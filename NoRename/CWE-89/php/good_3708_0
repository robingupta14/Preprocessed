<?php defined('SYSPATH') or die('No direct script access.');


class Reports_Controller extends Admin_Controller {

	public function __construct()
	{
		parent::__construct();

		$this->template->this_page = 'reports';
		$this->params = array('all_reports' => TRUE);
	}


	
	public function index($page = 1)
	{
		
		if ( ! $this->auth->has_permission("reports_view"))
		{
			url::redirect(url::site().'admin/dashboard');
		}

		$this->template->content = new View('admin/reports/main');
		$this->template->content->title = Kohana::lang('ui_admin.reports');

		
		$table_prefix = Kohana::config('database.default.table_prefix');

		
		Event::add('ushahidi_filter.fetch_incidents_set_params', array($this,'_add_incident_filters'));


		$status = "0";

		if ( !empty($_GET['status']))
		{
			$status = $_GET['status'];

			if (strtolower($status) == 'a')
			{
				array_push($this->params, 'i.incident_active = 0');
			}
			elseif (strtolower($status) == 'v')
			{
				array_push($this->params, 'i.incident_verified = 0');
			}
			elseif (strtolower($status) == 'o')
			{
				array_push($this->params, '(ic.category_id = 5 OR ic.category_id IS NULL)');
			}
			else
			{
				$status = "0";
			}
		}

		
		if (isset($_GET['k']))
		{
			
			
			$keyword_raw = (isset($_GET['k']))? preg_replace('

			
			$keyword_raw = strip_tags($keyword_raw);

			
			
			$keyword_raw = $this->input->xss_clean($keyword_raw);

			$filter = " (".$this->_get_searchstring($keyword_raw).")";

			array_push($this->params, $filter);
		}
		else
		{
			$keyword_raw = "";
		}

		
		$form_error = FALSE;
		$errors = array();
		$form_saved = FALSE;
		$form_action = "";

		if ($_POST)
		{
			$post = Validation::factory($_POST);

			 
			$post->pre_filter('trim', TRUE);

			
			
			$post->add_rules('action','required', 'alpha', 'length[1,1]');
			$post->add_rules('incident_id.*','required','numeric');
			
			if (in_array($post->action, array('a','u')) AND ! Auth::instance()->has_permission('reports_approve'))
			{
				$post->add_error('action','permission');
			}
			
			if ($post->action == 'v' AND ! Auth::instance()->has_permission('reports_verify'))
			{
				$post->add_error('action','permission');
			}
			
			if ($post->action == 'd' AND ! Auth::instance()->has_permission('reports_edit'))
			{
				$post->add_error('action','permission');
			}
			
			if ($post->action == 'a')
			{
				
				foreach($post->incident_id as $key => $id)
				{
					$post->incident_id[$key] = intval($id);
				}
				
				
				$query = "SELECT i.* FROM ".$table_prefix."incident i "
				    . "LEFT JOIN ".$table_prefix."incident_category ic ON i.id=ic.incident_id "
				    . "LEFT JOIN ".$table_prefix."category c ON c.id = ic.category_id "
				    . "WHERE (c.category_title =\"NONE\" OR c.id IS NULL) "
				    . "AND i.id IN (".implode(',',$post->incident_id).")";

				$result = Database::instance()->query($query);

				
				
				foreach ($result as $incident)
				{
					$post->add_error('incident_id', 'categories_required', $incident->incident_title);
				}
			}

			if ($post->validate())
			{
				
				if ($post->action == 'a')
				{
					foreach($post->incident_id as $item)
					{
						$update = new Incident_Model($item);
						if ($update->loaded == TRUE)
						{
							$update->incident_active = '1';

							
							if ($update->incident_alert_status != '2')
							{
								
								$update->incident_alert_status = '1';
							}
							$update->save();

							
							reports::verify_approve($update);

							
							Event::run('ushahidi_action.report_approve', $update);
						}
						$form_action = utf8::strtoupper(Kohana::lang('ui_admin.approved'));
					}

				}
				
				
				elseif ($post->action == 'u')
				{
					foreach ($post->incident_id as $item)
					{
						$update = new Incident_Model($item);
						if ($update->loaded == TRUE)
						{
							$update->incident_active = '0';

							
							if ($update->incident_alert_status == '1')
							{
								$update->incident_alert_status = '0';
							}

							$update->save();

							
							reports::verify_approve($update);

							
							Event::run('ushahidi_action.report_unapprove', $update);
						}
					}
					$form_action = utf8::strtoupper(Kohana::lang('ui_admin.unapproved'));
				}
				
				
				elseif ($post->action == 'v')
				{
					foreach ($post->incident_id as $item)
					{
						$update = new Incident_Model($item);
						$verify = new Verify_Model();
						if ($update->loaded == TRUE)
						{
							if ($update->incident_verified == '1')
							{
								$update->incident_verified = '0';
								$verify->verified_status = '0';
							}
							else
							{
								$update->incident_verified = '1';
								$verify->verified_status = '2';
							}
							$update->save();

							
							reports::verify_approve($update);
						}
					}

					
					$form_action = utf8::strtoupper(Kohana::lang('ui_admin.verified_unverified'));
				}

				
				elseif ($post->action == 'd')
				{
					foreach ($post->incident_id as $item)
					{
						$update = new Incident_Model($item);
						if ($update->loaded)
						{
							$update->delete();
						}
					}
					$form_action = utf8::strtoupper(Kohana::lang('ui_admin.deleted'));
				}
				$form_saved = TRUE;
			}
			else
			{
				
				

				
				$errors = $post->errors('reports');
				$form_error = TRUE;
			}
		}

		
		$incidents = reports::fetch_incidents(TRUE, Kohana::config('settings.items_per_page_admin'));

		Event::run('ushahidi_filter.filter_incidents',$incidents);

		$this->template->content->countries = Country_Model::get_countries_list();
		$this->template->content->incidents = $incidents;
		$this->template->content->pagination = reports::$pagination;
		$this->template->content->form_error = $form_error;
		$this->template->content->errors = $errors;
		$this->template->content->form_saved = $form_saved;
		$this->template->content->form_action = $form_action;

		
		$this->template->content->total_items = reports::$pagination->total_items;

		
		$this->template->content->status = $status;

		
		$this->template->js = new View('admin/reports/reports_js');
	}

	
	public function edit($id = FALSE, $saved = FALSE)
	{
		$db = new Database();

		
		if ( ! $this->auth->has_permission("reports_edit"))
		{
			url::redirect('admin/dashboard');
		}

		$this->template->content = new View('admin/reports/edit');
		$this->template->content->title = Kohana::lang('ui_admin.create_report');

		
		$form = array(
			'location_id' => '',
			'form_id' => '',
			'locale' => '',
			'incident_title' => '',
			'incident_description' => '',
			'incident_date' => '',
			'incident_hour' => '',
			'incident_minute' => '',
			'incident_ampm' => '',
			'latitude' => '',
			'longitude' => '',
			'geometry' => array(),
			'location_name' => '',
			'country_id' => '',
			'country_name' =>'',
			'incident_category' => array(),
			'incident_news' => array(),
			'incident_video' => array(),
			'incident_photo' => array(),
			'person_first' => '',
			'person_last' => '',
			'person_email' => '',
			'custom_field' => array(),
			'incident_active' => '',
			'incident_verified' => '',
			'incident_zoom' => ''
		);

		
		
		$errors = $form;
		$form_error = FALSE;
		$form_saved = ($saved == 'saved');

		
		$form['locale'] = Kohana::config('locale.language');
		
		
		$form['incident_date'] = date("m/d/Y",time());
		$form['incident_hour'] = date('h');
		$form['incident_minute'] = date('i');
		$form['incident_ampm'] = date('a');
		$form['country_id'] = Kohana::config('settings.default_country');

		
		
		
		
		
		
		
		$form['form_id'] = 1;
		$form_id = $form['form_id'];
		if ($id AND Incident_Model::is_valid_incident($id, FALSE))
		{
			$form_id = ORM::factory('incident', $id)->form_id;
		}
		
		
		$form['custom_field'] = customforms::get_custom_form_fields($id,$form_id,true);

		
		$this->template->content->locale_array = Kohana::config('locale.all_languages');

		
		$this->template->content->categories = Category_Model::get_categories(0, FALSE, FALSE);
		$this->template->content->new_categories_form = $this->_new_categories_form_arr();

		
		$this->template->content->hour_array = $this->_hour_array();
		$this->template->content->minute_array = $this->_minute_array();
		$this->template->content->ampm_array = $this->_ampm_array();

		$this->template->content->stroke_width_array = $this->_stroke_width_array();

		
		$countries = array();
		foreach (ORM::factory('country')->orderby('country')->find_all() as $country)
		{
			
			$this_country = $country->country;
			if (strlen($this_country) > 35)
			{
				$this_country = substr($this_country, 0, 35) . "...";
			}
			$countries[$country->id] = $this_country;
		}

		
		
		$form['country_name'] = $countries[$form['country_id']];
		$this->template->content->countries = $countries;

		
		$forms = array();
		foreach (customforms::get_custom_forms(FALSE) as $custom_forms)
		{
			$forms[$custom_forms->id] = $custom_forms->form_title;
		}
		$this->template->content->forms = $forms;

		
		$incident_media =  Incident_Model::is_valid_incident($id, FALSE)
			? ORM::factory('incident', $id)->media
			: FALSE;

		$this->template->content->incident_media = $incident_media;

		
		
		if (isset($_GET['mid']) AND intval($_GET['mid']) > 0)
		{
			$message_id = intval($_GET['mid']);
			$service_id = "";
			$message = ORM::factory('message', $message_id);

			if ($message->loaded AND $message->message_type == 1)
			{
				$service_id = $message->reporter->service_id;

				
				if ($message->incident_id != 0) {

					
					url::redirect('admin/reports/edit/'. $message->incident_id);
				}

				$this->template->content->show_messages = true;
				$incident_description = $message->message;
				if ( ! empty($message->message_detail))
				{
					$form['incident_title'] = $message->message;
					$incident_description = $message->message_detail;
				}

				$form['incident_description'] = $incident_description;
				$form['incident_date'] = date('m/d/Y', strtotime($message->message_date));
				$form['incident_hour'] = date('h', strtotime($message->message_date));
				$form['incident_minute'] = date('i', strtotime($message->message_date));
				$form['incident_ampm'] = date('a', strtotime($message->message_date));
				$form['person_first'] = $message->reporter->reporter_first;
				$form['person_last'] = $message->reporter->reporter_last;

				
				if ($message->latitude != NULL AND $message->longitude != NULL)
				{
					$form['latitude'] = $message->latitude;
					$form['longitude'] = $message->longitude;
				}
				
				
				elseif ($message->reporter->location->loaded)
				{
					$form['location_id'] = $message->reporter->location->id;
					$form['latitude'] = $message->reporter->location->latitude;
					$form['longitude'] = $message->reporter->location->longitude;
					$form['location_name'] = $message->reporter->location->location_name;
				}

				
				Event::run('ushahidi_action.location_from',$message_from = $message->message_from);
				
				
				Event::run('ushahidi_filter.location_name',$form['location_name']);
				
				
				Event::run('ushahidi_filter.location_find',$form['location_find']);


				
				$this->template->content->all_messages = ORM::factory('message')
					->where('reporter_id', $message->reporter_id)
					->orderby('message_date', 'desc')
					->limit(5)
					->find_all();
			}
			else
			{
				$message_id = "";
				$this->template->content->show_messages = FALSE;
			}
		}
		else
		{
			$this->template->content->show_messages = FALSE;
		}

		
		if ( isset($_GET['fid']) AND intval($_GET['fid']) > 0 )
		{
			$feed_item_id = intval($_GET['fid']);
			$feed_item = ORM::factory('feed_item', $feed_item_id);

			if ($feed_item->loaded)
			{
				
				if ($feed_item->incident_id != 0)
				{
					
					url::redirect('admin/reports/edit/'. $feed_item->incident_id);
				}

				$form['incident_title'] = $feed_item->item_title;
				$form['incident_description'] = $feed_item->item_description;
				$form['incident_date'] = date('m/d/Y', strtotime($feed_item->item_date));
				$form['incident_hour'] = date('h', strtotime($feed_item->item_date));
				$form['incident_minute'] = date('i', strtotime($feed_item->item_date));
				$form['incident_ampm'] = date('a', strtotime($feed_item->item_date));

				
				$form['incident_news'][0] = $feed_item->item_link;

				
				if ($feed_item->location_id)
				{
					$form['location_id'] = $feed_item->location_id;
					$form['latitude'] = $feed_item->location->latitude;
					$form['longitude'] = $feed_item->location->longitude;
					$form['location_name'] = $feed_item->location->location_name;
				}
			}
			else
			{
				$feed_item_id = "";
			}
		}

		
		if ($_POST)
		{
			
			
			$post = array_merge($_POST, $_FILES);

			
			if (isset($service_id) AND intval($service_id) > 0)
			{
				$post = array_merge($post, array('service_id' => $service_id));
			}

			
			if (Incident_Model::is_valid_incident($id, FALSE))
			{
				$post = array_merge($post, array('incident_id' => $id));
			}

			

			
			Event::run('ushahidi_action.report_submit_admin', $post);

			
			if (reports::validate($post))
			{
				
				$location_id = $post->location_id;

				
				$location = new Location_Model($location_id);
				reports::save_location($post, $location);

				
				$incident = new Incident_Model($id);
				reports::save_report($post, $incident, $location->id);

				
				reports::verify_approve($incident);

				
				reports::save_report_geometry($post, $incident);

				
				reports::save_category($post, $incident);

				
				reports::save_media($post, $incident);

				
				reports::save_personal_info($post, $incident);

				
				
				if (isset($message_id) AND intval($message_id) > 0)
				{
					$savemessage = ORM::factory('message', $message_id);
					if ($savemessage->loaded)
					{
						$savemessage->incident_id = $incident->id;
						$savemessage->save();

						
						
						$attachments = ORM::factory("media")
							->where("message_id", $savemessage->id)
							->find_all();
						foreach ($attachments AS $attachment)
						{
							$attachment->incident_id = $incident->id;
							$attachment->save();
						}
					}
				}

				
				
				if (isset($feed_item_id) AND intval($feed_item_id) > 0)
				{
					$savefeed = ORM::factory('feed_item', $feed_item_id);
					if ($savefeed->loaded)
					{
						$savefeed->incident_id = $incident->id;
						$savefeed->location_id = $location->id;
						$savefeed->save();
					}
				}

				
				reports::save_custom_fields($post, $incident);

				
				Event::run('ushahidi_action.report_edit', $incident);

				
				switch ($post->save)
				{
					case 1:
					case 'dontclose':
						
						url::redirect('admin/reports/edit/'. $incident->id .'/saved');
						break;
					case 'addnew':
						
						url::redirect('admin/reports/edit/0/saved');
						break;
					default:
						
						url::redirect('admin/reports/');
				}
			}
			
			
			else
			{
				
				$form = arr::overwrite($form, $post->as_array());

				
				$errors = arr::merge($errors, $post->errors('report'));
				$form_error = TRUE;
			}
		}
		else
		{
			if (Incident_Model::is_valid_incident($id, FALSE))
			{
				
				$incident = ORM::factory('incident', $id);
				if ($incident->loaded == true)
				{
					
					$incident_category = array();
					foreach($incident->incident_category as $category)
					{
						$incident_category[] = $category->category_id;
					}

					
					$incident_news = array();
					$incident_video = array();
					$incident_photo = array();
					foreach($incident->media as $media)
					{
						if ($media->media_type == 4)
						{
							$incident_news[] = $media->media_link;
						}
						elseif ($media->media_type == 2)
						{
							$incident_video[] = $media->media_link;
						}
						elseif ($media->media_type == 1)
						{
							$incident_photo[] = $media->media_link;
						}
					}

					
					$sql = "SELECT AsText(geometry) as geometry, geometry_label,
						geometry_comment, geometry_color, geometry_strokewidth
						FROM ".Kohana::config('database.default.table_prefix')."geometry
						WHERE incident_id = ?";
					$query = $db->query($sql, $id);
					foreach ( $query as $item )
					{
						$geometry = array(
								"geometry" => $item->geometry,
								"label" => $item->geometry_label,
								"comment" => $item->geometry_comment,
								"color" => $item->geometry_color,
								"strokewidth" => $item->geometry_strokewidth
							);
						$form['geometry'][] = json_encode($geometry);
					}

					
					$incident_arr = array(
						'location_id' => $incident->location->id,
						'form_id' => $incident->form_id,
						'locale' => $incident->locale,
						'incident_title' => $incident->incident_title,
						'incident_description' => $incident->incident_description,
						'incident_date' => date('m/d/Y', strtotime($incident->incident_date)),
						'incident_hour' => date('h', strtotime($incident->incident_date)),
						'incident_minute' => date('i', strtotime($incident->incident_date)),
						'incident_ampm' => date('a', strtotime($incident->incident_date)),
						'latitude' => $incident->location->latitude,
						'longitude' => $incident->location->longitude,
						'location_name' => $incident->location->location_name,
						'country_id' => $incident->location->country_id,
						'incident_category' => $incident_category,
						'incident_news' => $incident_news,
						'incident_video' => $incident_video,
						'incident_photo' => $incident_photo,
						'person_first' => $incident->incident_person->person_first,
						'person_last' => $incident->incident_person->person_last,
						'person_email' => $incident->incident_person->person_email,
						'custom_field' => customforms::get_custom_form_fields($id,$incident->form_id,true),
						'incident_active' => $incident->incident_active,
						'incident_verified' => $incident->incident_verified,
						'incident_zoom' => $incident->incident_zoom
					);

					
					$form = arr::overwrite($form, $incident_arr);
				}
				else
				{
					
					url::redirect('admin/reports/');
				}

			}
		}

		$this->template->content->id = $id;
		$this->template->content->form = $form;
		$this->template->content->errors = $errors;
		$this->template->content->form_error = $form_error;
		$this->template->content->form_saved = $form_saved;

		
		$this->template->content->custom_forms = new View('reports/submit_custom_forms');
		$disp_custom_fields = customforms::get_custom_form_fields($id, $form['form_id'], FALSE, "view");
		$custom_field_mismatch = customforms::get_edit_mismatch($form['form_id']);
        $this->template->content->custom_forms->disp_custom_fields = $disp_custom_fields;
		$this->template->content->custom_forms->custom_field_mismatch = $custom_field_mismatch;
		$this->template->content->custom_forms->form = $form;

		
		$previous = ORM::factory('incident')->where('id < ', $id)->orderby('id','desc')->find();
		$previous_url = $previous->loaded
		    ? url::base().'admin/reports/edit/'.$previous->id
		    : url::base().'admin/reports/';
		$next = ORM::factory('incident')->where('id > ', $id)->orderby('id','desc')->find();
		$next_url = $next->loaded
		    ? url::base().'admin/reports/edit/'.$next->id
		    : url::base().'admin/reports/';
		$this->template->content->previous_url = $previous_url;
		$this->template->content->next_url = $next_url;

		
		$this->template->map_enabled = TRUE;
		$this->template->colorpicker_enabled = TRUE;
		$this->template->treeview_enabled = TRUE;
		$this->template->json2_enabled = TRUE;

		$this->template->js = new View('reports/submit_edit_js');
		$this->template->js->edit_mode = TRUE;
		$this->template->js->default_map = Kohana::config('settings.default_map');
		$this->template->js->default_zoom = Kohana::config('settings.default_zoom');

		if ( ! $form['latitude'] OR !$form['latitude'])
		{
			$this->template->js->latitude = Kohana::config('settings.default_lat');
			$this->template->js->longitude = Kohana::config('settings.default_lon');
		}
		else
		{
			$this->template->js->latitude = $form['latitude'];
			$this->template->js->longitude = $form['longitude'];
		}

		$this->template->js->incident_zoom = $form['incident_zoom'];
		$this->template->js->geometries = $form['geometry'];

		
		$this->template->content->date_picker_js = $this->_date_picker_js();
		$this->template->content->color_picker_js = $this->_color_picker_js();
		$this->template->content->new_category_toggle_js = $this->_new_category_toggle_js();

		
		$myPacker = new javascriptpacker($this->template->js , 'Normal', false, false);
		$this->template->js = $myPacker->pack();
	}


	
	public function download()
	{
		
		if ( ! $this->auth->has_permission("reports_download"))
		{
			url::redirect(url::site().'admin/dashboard');
		}

		$this->template->content = new View('admin/reports/download');
		$this->template->content->title = Kohana::lang('ui_admin.download_reports');

		$form = array(
			'data_active'   => '',
			'data_verified'   => '',
			'data_include' => '',
			'from_date'	   => '',
			'to_date'	   => '',
			'form_auth_token'=> ''
		);

		$errors = $form;
		$form_error = FALSE;

		
		if ($_POST)
		{
			
			$post = Validation::factory($_POST);

			 
			$post->pre_filter('trim', TRUE);

			
			$post->add_rules('data_active.*','required','numeric','between[0,1]');
			$post->add_rules('data_verified.*','required','numeric','between[0,1]');
			
			$post->add_rules('data_include.*','numeric','between[1,6]');
			$post->add_rules('from_date','date_mmddyyyy');
			$post->add_rules('to_date','date_mmddyyyy');

			
			if (!empty($_POST['from_date']) OR !empty($_POST['to_date']))
			{
				
				if (empty($_POST['from_date']) OR (strtotime($_POST['from_date']) > strtotime("today")))
				{
					$post->add_error('from_date','range');
				}

				
				if (empty($_POST['to_date']) OR (strtotime($_POST['to_date']) > strtotime("today")))
				{
					$post->add_error('to_date','range');
				}

				
				if (strtotime($_POST['from_date']) > strtotime($_POST['to_date']))
				{
					$post->add_error('to_date','range_greater');
				}
			}

			
			if ($post->validate(TRUE))
			{
				
				$filter = '( ';
				
				
				$show_active = false;
				$show_inactive = false;
				$show_verified = false;
				$show_not_verified = false;
				
				if (in_array(1, $post->data_active))
				{
					$show_active = true;
				}

				if (in_array(0, $post->data_active))
				{
					$show_inactive = true;
				}

				if (in_array(1, $post->data_verified))
				{
					$show_verified = true;
				}

				if (in_array(0, $post->data_verified))
				{
					$show_not_verified = true;
				}
				
				
				if ($show_active && !$show_inactive)
				{
					$filter .= ' incident_active = 1 ';
				}
				elseif (!$show_active && $show_inactive)
				{
					$filter .= '  incident_active = 0 ';
				}
				elseif ($show_active && $show_inactive)
				{
					$filter .= ' (incident_active = 1 OR incident_active = 0) ';
				}
				
				
				elseif (!$show_active && !$show_inactive)
				{
					
					$filter .= ' (incident_active = 0 AND incident_active = 1) ';
				}
				
				$filter .= ' AND ';
				
				
				if($show_verified && !$show_not_verified)
				{				
					$filter .= ' incident_verified = 1 ';
				}
				elseif (!$show_verified && $show_not_verified)
				{				
					$filter .= ' incident_verified = 0 ';
				}
				elseif ($show_verified && $show_not_verified)
				{				
					$filter .= ' (incident_verified = 0 OR incident_verified = 1) ';
				}
				elseif (!$show_verified && !$show_not_verified)
				{				
					$filter .= ' (incident_verified = 0 AND incident_verified = 1) ';
				}
				
				$filter .= ') ';

				
				if ( ! empty($post->from_date) AND !empty($post->to_date))
				{
					$filter .= " AND ( incident_date >= '" . date("Y-m-d H:i:s",strtotime($post->from_date))
							. "' AND incident_date <= '" . date("Y-m-d H:i:s",strtotime($post->to_date)) . "' ) ";
				}

				
				$incidents = ORM::factory('incident')->where($filter)->orderby('incident_dateadd', 'desc')->find_all();

				
				ob_start();
				
					}

					if ($item == 2) {
						
					}

					if ($item == 3) {
						
					}

					if ($item == 4) {
						
					}

					if($item == 5) {
						
					}
					if($item == 6)
					{
						$custom_titles = customforms::get_custom_form_fields('','',false);
						foreach($custom_titles as $field_name)
						{

							
						}

					}

				}

				

				
				$custom_headers = "";
				Event::run('ushahidi_filter.report_download_csv_header', $custom_headers);
				

				

				foreach ($incidents as $incident)
				{
					
					
					

					foreach($post->data_include as $item)
					{
						switch ($item)
						{
							case 1:
								
							break;

							case 2:
								
							break;

							case 3:
								

								foreach($incident->incident_category as $category)
								{
									if ($category->category->category_title)
									{
										
									}
								}
								
							break;

							case 4:
								
							break;

							case 5:
								
							break;

							case 6:
								$incident_id = $incident->id;
								$custom_fields = customforms::get_custom_form_fields($incident_id,'',false);
								if ( ! empty($custom_fields))
								{
									foreach($custom_fields as $custom_field)
									{
										echo',"'.$this->_csv_text($custom_field['field_response']).'"';
									}
								}
								else
								{
									$custom_field = customforms::get_custom_form_fields('','',false);
									foreach ($custom_field as $custom)
									{
										echo',"'.$this->_csv_text("").'"';
									}
								}
							break;
						}
					}

					if ($incident->incident_active)
					{
						
					}
					else
					{
						
					}

					if ($incident->incident_verified)
					{
						
					}
					else
					{
						
					}

					
					$event_data = array("report_csv" => "", "incident" => $incident);
					Event::run('ushahidi_filter.report_download_csv_incident', $event_data);
					
					
				}
				$report_csv = ob_get_clean();

				
				header("Content-type: text/x-csv");
				header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
				header("Content-Disposition: attachment; filename=" . time() . ".csv");
				header("Content-Length: " . strlen($report_csv));
				
				exit;
			}

			
			else
			{
				
				$form = arr::overwrite($form, $post->as_array());

				
				$errors = arr::merge($errors, $post->errors('report'));
				$form_error = TRUE;
			}
		}

		$this->template->content->form = $form;
		$this->template->content->errors = $errors;
		$this->template->content->form_error = $form_error;

		
		$this->template->js = new View('admin/reports/download_js');
		$this->template->js->calendar_img = url::base() . "media/img/icon-calendar.gif";
	}

	public function upload()
	{
		
		if ( ! $this->auth->has_permission("reports_upload"))
		{
			url::redirect(url::site().'admin/dashboard');
		}

		if ($_SERVER['REQUEST_METHOD'] == 'GET') {
			$this->template->content = new View('admin/reports/upload');
			$this->template->content->title = 'Upload Reports';
			$this->template->content->form_error = false;
		}

		if ($_SERVER['REQUEST_METHOD']=='POST')
		{
			$errors = array();
			$notices = array();

			if (!$_FILES['csvfile']['error'])
			{
				if (file_exists($_FILES['csvfile']['tmp_name']))
				{
					if($filehandle = fopen($_FILES['csvfile']['tmp_name'], 'r'))
					{
						$importer = new ReportsImporter;

						if ($importer->import($filehandle))
						{
							$this->template->content = new View('admin/reports/upload_success');
							$this->template->content->title = 'Upload Reports';
							$this->template->content->rowcount = $importer->totalrows;
							$this->template->content->imported = $importer->importedrows;
							$this->template->content->notices = $importer->notices;
						}
						else
						{
							$errors = $importer->errors;
						}
					}
					else
					{
						$errors[] = Kohana::lang('ui_admin.file_open_error');
					}
				}

				
				else
				{
					$errors[] = Kohana::lang('ui_admin.file_not_found_upload');
				}
			}

			
			else
			{
				$errors[] = $_FILES['csvfile']['error'];
			}

			if (count($errors))
			{
				$this->template->content = new View('admin/reports/upload');
				$this->template->content->title = Kohana::lang('ui_admin.upload_reports');
				$this->template->content->errors = $errors;
				$this->template->content->form_error = 1;
			}
		}
	}

	

	public function translate( $id = false, $saved = FALSE)
	{
		$this->template->content = new View('admin/reports/translate');
		$this->template->content->title = Kohana::lang('ui_admin.translate_reports');

		
		if (isset($_GET['iid']) && !empty($_GET['iid']))
		{
			$incident_id = (int) $_GET['iid'];
			$incident = ORM::factory('incident', $incident_id);

			if ($incident->loaded == true)
			{
				$orig_locale = $incident->locale;
				$this->template->content->orig_title = $incident->incident_title;
				$this->template->content->orig_description = $incident->incident_description;
			}
			else
			{
				
				url::redirect('admin/reports/');
			}
		}
		else
		{
			
			url::redirect('admin/reports/');
		}

		
		$form = array(
			'locale'	  => '',
			'incident_title'	  => '',
			'incident_description'	  => ''
		);

		
		$errors = $form;
		$form_error = FALSE;

		$form_saved = ($saved == 'saved')? TRUE : FALSE;

		
		$this->template->content->locale_array = Kohana::config('locale.all_languages');

		
		if ($_POST)
		{
			
			$post = Validation::factory($_POST);

			 
			$post->pre_filter('trim', TRUE);

			
			$post->add_rules('locale','required','alpha_dash','length[5]');
			$post->add_rules('incident_title','required', 'length[3,200]');
			$post->add_rules('incident_description','required');
			$post->add_callbacks('locale', array($this,'translate_exists_chk'));

			if ($orig_locale == $_POST['locale'])
			{
				
				$post->add_error('locale','locale');
			}

			
			if ($post->validate())
			{
				
				$incident_l = new Incident_Lang_Model($id);
				$incident_l->incident_id = $incident_id;
				$incident_l->locale = $post->locale;
				$incident_l->incident_title = $post->incident_title;
				$incident_l->incident_description = $post->incident_description;
				$incident_l->save();


				
				
				if ($post->save == 1)
				{
					url::redirect('admin/reports/translate/'. $incident_l->id .'/saved/?iid=' . $incident_id);
				}

				
				else
				{
					url::redirect('admin/reports/');
				}
			}

			
			else
			{
				
				$form = arr::overwrite($form, $post->as_array());

				
				$errors = arr::merge($errors, $post->errors('report'));
				$form_error = TRUE;
			}
		}
		else
		{
			if ($id)
			{
				
				$incident_l = ORM::factory('incident_lang', $id)->where('incident_id', $incident_id)->find();
				if ($incident_l->loaded == true)
				{
					$form['locale'] = $incident_l->locale;
					$form['incident_title'] = $incident_l->incident_title;
					$form['incident_description'] = $incident_l->incident_description;
				}
				else
				{
					
					url::redirect('admin/reports/');
				}
			}
		}

		$this->template->content->form = $form;
		$this->template->content->errors = $errors;
		$this->template->content->form_error = $form_error;
		$this->template->content->form_saved = $form_saved;

		
		$this->template->js = new View('admin/reports/translate_js');
	}


	
	public function save_category()
	{
		$this->auto_render = FALSE;
		$this->template = "";

		
		if ($_POST)
		{
			
			$post = Validation::factory($_POST);

			 
			$post->pre_filter('trim', TRUE);

			
			$post->add_rules('category_title','required', 'length[3,200]');
			$post->add_rules('category_description','required');
			$post->add_rules('category_color','required', 'length[6,6]');

			
			if ($post->validate())
			{
				
				$category = new Category_Model();
				$category->category_title = $post->category_title;
				$category->category_description = $post->category_description;
				$category->category_color = $post->category_color;
				$category->save();
				$form_saved = TRUE;

				
			}
			else
			{
				
			}
		}
		else
		{
			
		}
	}

	

	
	private function _new_categories_form_arr()
	{
		return array(
			'category_name' => '',
			'category_description' => '',
			'category_color' => '',
		);
	}

	
	private function _hour_array()
	{
		for ($i=1; $i <= 12 ; $i++)
		{
			
			$hour_array[sprintf("%02d", $i)] = sprintf("%02d", $i);
		}
		return $hour_array;
	}

	private function _minute_array()
	{
		for ($j=0; $j <= 59 ; $j++)
		{
			
			$minute_array[sprintf("%02d", $j)] = sprintf("%02d", $j);
		}
		return $minute_array;
	}

	private function _ampm_array()
	{
		return $ampm_array = array('pm'=>Kohana::lang('ui_admin.pm'),'am'=>Kohana::lang('ui_admin.am'));
	}

	private function _stroke_width_array()
	{
		for ($i = 0.5; $i <= 8 ; $i += 0.5)
		{
			$stroke_width_array["$i"] = $i;
		}
		return $stroke_width_array;
	}

	
	private function _color_picker_js()
	{
		 return "<script type=\"text/javascript\">
					$(document).ready(function() {
					$('
							onSubmit: function(hsb, hex, rgb) {
								$('
							},
							onChange: function(hsb, hex, rgb) {
								$('
							},
							onBeforeShow: function () {
								$(this).ColorPickerSetColor(this.value);
							}
						})
					.bind('keyup', function(){
						$(this).ColorPickerSetColor(this.value);
					});
					});
				</script>";
	}

	private function _date_picker_js()
	{
		return "<script type=\"text/javascript\">
				$(document).ready(function() {
				$(\"
				showOn: \"both\",
				buttonImage: \"" . url::base() . "media/img/icon-calendar.gif\",
				buttonImageOnly: true
				});
				});
			</script>";
	}


	private function _new_category_toggle_js()
	{
		return "<script type=\"text/javascript\">
				$(document).ready(function() {
				$('a
				$('
				return false;
				});
				});
			</script>";
	}


	
	public function translate_exists_chk(Validation $post)
	{
		
		if (array_key_exists('locale', $post->errors()))
			return;

		$iid = (isset($_GET['iid']) AND intval($_GTE['iid'] > 0))? intval($_GET['iid']) : 0;

		
		$translate = ORM::factory('incident_lang')
						->where('incident_id',$iid)
						->where('locale',$post->locale)
						->find();

		if ($translate->loaded)
		{
			$post->add_error( 'locale', 'exists');
		}
		else
		{
			
			return;
		}
	}

	
	private function _get_searchstring($keyword_raw)
	{
		$or = '';
		$where_string = '';

		
		
		
		$stop_words = array('the', 'and', 'a', 'to', 'of', 'in', 'i', 'is', 'that', 'it',
		'on', 'you', 'this', 'for', 'but', 'with', 'are', 'have', 'be',
		'at', 'or', 'as', 'was', 'so', 'if', 'out', 'not');

		$keywords = explode(' ', $keyword_raw);

		if (is_array($keywords) AND !empty($keywords))
		{
			array_change_key_case($keywords, CASE_LOWER);
			$i = 0;

			foreach ($keywords as $value)
			{
				if (!in_array($value,$stop_words) AND !empty($value))
				{
					$chunk = $this->db->escape_str($value);
					if ($i > 0)
					{
						$or = ' OR ';
					}
					$where_string = $where_string
									.$or
									."incident_title LIKE '%$chunk%' OR incident_description LIKE '%$chunk%'  OR location_name LIKE '%$chunk%'";
					$i++;
				}
			}
		}

		
		return (!empty($where_string)) ? $where_string :  "1=1";
	}

	private function _csv_text($text)
	{
		$text = stripslashes(htmlspecialchars($text));
		return $text;
	}

	
	public function _add_incident_filters()
	{
		$params = Event::$data;
		$params = array_merge($params, $this->params);
		Event::$data = $params;
	}
	

	
	public function deletePhoto ($id)
	{
		$this->auto_render = FALSE;
		$this->template = "";

		if ($id)
		{
			Media_Model::delete_photo($id);
		}
	}

}
