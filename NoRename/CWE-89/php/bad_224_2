<?php





if (! empty($conf->propal->enabled))     require_once DOL_DOCUMENT_ROOT.'/comm/propal/class/propal.class.php';
if (! empty($conf->facture->enabled))    require_once DOL_DOCUMENT_ROOT.'/compta/facture/class/facture.class.php';
if (! empty($conf->commande->enabled))   require_once DOL_DOCUMENT_ROOT.'/commande/class/commande.class.php';
if (! empty($conf->accounting->enabled)) require_once DOL_DOCUMENT_ROOT.'/core/lib/accounting.lib.php';
if (! empty($conf->accounting->enabled)) require_once DOL_DOCUMENT_ROOT.'/core/class/html.formaccounting.class.php';
if (! empty($conf->accounting->enabled)) require_once DOL_DOCUMENT_ROOT.'/accountancy/class/accountingaccount.class.php';

$langs->load("products");
$langs->load("other");
if (! empty($conf->stock->enabled)) $langs->load("stocks");
if (! empty($conf->facture->enabled)) $langs->load("bills");
if (! empty($conf->productbatch->enabled)) $langs->load("productbatch");

$mesg=''; $error=0; $errors=array();

$refalreadyexists=0;

$id=GETPOST('id', 'int');
$ref=GETPOST('ref', 'alpha');
$type=GETPOST('type','int');
$action=(GETPOST('action','alpha') ? GETPOST('action','alpha') : 'view');
$cancel=GETPOST('cancel','alpha');
$confirm=GETPOST('confirm','alpha');
$socid=GETPOST('socid','int');
$duration_value = GETPOST('duration_value');
$duration_unit = GETPOST('duration_unit');
if (! empty($user->societe_id)) $socid=$user->societe_id;

$object = new Product($db);
$object->type = $type;	
$extrafields = new ExtraFields($db);


$extralabels=$extrafields->fetch_name_optionals_label($object->table_element);

if ($id > 0 || ! empty($ref))
{
    $result = $object->fetch($id, $ref);

    if (! empty($conf->product->enabled)) $upload_dir = $conf->product->multidir_output[$object->entity].'/'.get_exdir(0, 0, 0, 0, $object, 'product').dol_sanitizeFileName($object->ref);
    elseif (! empty($conf->service->enabled)) $upload_dir = $conf->service->multidir_output[$object->entity].'/'.get_exdir(0, 0, 0, 0, $object, 'product').dol_sanitizeFileName($object->ref);

    if (! empty($conf->global->PRODUCT_USE_OLD_PATH_FOR_PHOTO))    
    {
        if (! empty($conf->product->enabled)) $upload_dirold = $conf->product->multidir_output[$object->entity].'/'.substr(substr("000".$object->id, -2),1,1).'/'.substr(substr("000".$object->id, -2),0,1).'/'.$object->id."/photos";
        else $upload_dirold = $conf->service->multidir_output[$object->entity].'/'.substr(substr("000".$object->id, -2),1,1).'/'.substr(substr("000".$object->id, -2),0,1).'/'.$object->id."/photos";
    }
}

$modulepart='product';


$canvas = !empty($object->canvas)?$object->canvas:GETPOST("canvas");
$objcanvas=null;
if (! empty($canvas))
{
    $objcanvas = new Canvas($db,$action);
    $objcanvas->getCanvas('product','card',$canvas);
}


$fieldvalue = (! empty($id) ? $id : (! empty($ref) ? $ref : ''));
$fieldtype = (! empty($id) ? 'rowid' : 'ref');
$result=restrictedArea($user,'produit|service',$fieldvalue,'product&product','','',$fieldtype,$objcanvas);


$hookmanager->initHooks(array('productcard','globalcard'));





if ($cancel) $action = '';

$usercanread = (($object->type == Product::TYPE_PRODUCT && $user->rights->produit->lire) || ($object->type == Product::TYPE_SERVICE && $user->rights->service->lire));
$usercancreate = (($object->type == Product::TYPE_PRODUCT && $user->rights->produit->creer) || ($object->type == Product::TYPE_SERVICE && $user->rights->service->creer));
$usercandelete = (($object->type == Product::TYPE_PRODUCT && $user->rights->produit->supprimer) || ($object->type == Product::TYPE_SERVICE && $user->rights->service->supprimer));
$createbarcode=empty($conf->barcode->enabled)?0:1;
if (! empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->creer_advance)) $createbarcode=0;

$parameters=array('id'=>$id, 'ref'=>$ref, 'objcanvas'=>$objcanvas);
$reshook=$hookmanager->executeHooks('doActions',$parameters,$object,$action);    
if ($reshook < 0) setEventMessages($hookmanager->error, $hookmanager->errors, 'errors');

if (empty($reshook))
{
    
	if ($action == 'setfk_product_type' && $usercancreate)
    {
    	$result = $object->setValueFrom('fk_product_type', GETPOST('fk_product_type'), '', null, 'text', '', $user, 'PRODUCT_MODIFY');
    	header("Location: ".$_SERVER['PHP_SELF']."?id=".$object->id);
    	exit;
    }

    
    $upload_dir = $conf->produit->dir_output;
    $permissioncreate = $usercancreate;


    
    if ($action ==	'setfk_barcode_type' && $createbarcode)
    {
        $result = $object->setValueFrom('fk_barcode_type', GETPOST('fk_barcode_type'), '', null, 'text', '', $user, 'PRODUCT_MODIFY');
    	header("Location: ".$_SERVER['PHP_SELF']."?id=".$object->id);
    	exit;
    }

    
    if ($action ==	'setbarcode' && $createbarcode)
    {
    	$result=$object->check_barcode(GETPOST('barcode'),GETPOST('barcode_type_code'));

		if ($result >= 0)
		{
	    	$result = $object->setValueFrom('barcode', GETPOST('barcode'));
	    	header("Location: ".$_SERVER['PHP_SELF']."?id=".$object->id);
	    	exit;
		}
		else
		{
			$langs->load("errors");
        	if ($result == -1) $errors[] = 'ErrorBadBarCodeSyntax';
        	else if ($result == -2) $errors[] = 'ErrorBarCodeRequired';
        	else if ($result == -3) $errors[] = 'ErrorBarCodeAlreadyUsed';
        	else $errors[] = 'FailedToValidateBarCode';

			$error++;
			setEventMessages($errors, null, 'errors');
		}
    }

    
    if ($action == 'add' && $usercancreate)
    {
        $error=0;

        if (! GETPOST('label'))
        {
            setEventMessages($langs->trans('ErrorFieldRequired',$langs->transnoentities('Label')), null, 'errors');
            $action = "create";
            $error++;
        }
        if (empty($ref))
        {
            setEventMessages($langs->trans('ErrorFieldRequired',$langs->transnoentities('Ref')), null, 'errors');
            $action = "create";
            $error++;
        }
        if (! empty($duration_value) && empty($duration_unit))
        {
            setEventMessages($langs->trans('ErrorFieldRequired',$langs->transnoentities('Unit')), null, 'errors');
            $action = "create";
            $error++;
        }

        if (! $error)
        {
	        $units = GETPOST('units', 'int');

            $object->ref                   = $ref;
            $object->label                 = GETPOST('label');
            $object->price_base_type       = GETPOST('price_base_type');

            if ($object->price_base_type == 'TTC')
            	$object->price_ttc = GETPOST('price');
            else
            	$object->price = GETPOST('price');
            if ($object->price_base_type == 'TTC')
            	$object->price_min_ttc = GETPOST('price_min');
            else
            	$object->price_min = GETPOST('price_min');

	        $tva_tx_txt = GETPOST('tva_tx', 'alpha');           

	        
	        $vatratecode = '';
	        $tva_tx = preg_replace('/[^0-9\.].*$/', '', $tva_tx_txt);     
	        $npr = preg_match('/\*/', $tva_tx_txt) ? 1 : 0;
	        $localtax1 = 0; $localtax2 = 0; $localtax1_type = '0'; $localtax2_type = '0';
	        
	        if (preg_match('/\((.*)\)/', $tva_tx_txt, $reg))
	        {
	            
	            $vatratecode=$reg[1];
	            
	            $sql = "SELECT t.rowid, t.code, t.recuperableonly, t.localtax1, t.localtax2, t.localtax1_type, t.localtax2_type";
	            $sql.= " FROM ".MAIN_DB_PREFIX."c_tva as t, ".MAIN_DB_PREFIX."c_country as c";
	            $sql.= " WHERE t.fk_pays = c.rowid AND c.code = '".$mysoc->country_code."'";
	            $sql.= " AND t.taux = ".((float) $tva_tx)." AND t.active = 1";
	            $sql.= " AND t.code ='".$vatratecode."'";
	            $resql=$db->query($sql);
	            if ($resql)
	            {
	                $obj = $db->fetch_object($resql);
	                $npr = $obj->recuperableonly;
	                $localtax1 = $obj->localtax1;
	                $localtax2 = $obj->localtax2;
	                $localtax1_type = $obj->localtax1_type;
	                $localtax2_type = $obj->localtax2_type;
	            }
	        }

	        $object->default_vat_code = $vatratecode;
	        $object->tva_tx = $tva_tx;
	        $object->tva_npr = $npr;
	        $object->localtax1_tx = $localtax1;
	        $object->localtax2_tx = $localtax2;
	        $object->localtax1_type = $localtax1_type;
	        $object->localtax2_type = $localtax2_type;

            $object->type               	 = $type;
            $object->status             	 = GETPOST('statut');
            $object->status_buy            = GETPOST('statut_buy');
			$object->status_batch          	= GETPOST('status_batch');

            $object->barcode_type          = GETPOST('fk_barcode_type');
            $object->barcode		           = GETPOST('barcode');
            
            $stdobject=new GenericObject($db);
    	    $stdobject->element='product';
            $stdobject->barcode_type=GETPOST('fk_barcode_type');
            $result=$stdobject->fetch_barcode();
            if ($result < 0)
            {
            	$error++;
            	$mesg='Failed to get bar code type information ';
            	setEventMessages($mesg.$stdobject->error, $mesg.$stdobject->errors, 'errors');
            }
            $object->barcode_type_code      = $stdobject->barcode_type_code;
            $object->barcode_type_coder     = $stdobject->barcode_type_coder;
            $object->barcode_type_label     = $stdobject->barcode_type_label;

            $object->description        	 = dol_htmlcleanlastbr(GETPOST('desc','none'));
            $object->url					 = GETPOST('url');
            $object->note_private          	 = dol_htmlcleanlastbr(GETPOST('note_private','none'));
            $object->note               	 = $object->note_private;   
            $object->customcode              = GETPOST('customcode');
            $object->country_id              = GETPOST('country_id');
            $object->duration_value     	 = $duration_value;
            $object->duration_unit      	 = $duration_unit;
            $object->seuil_stock_alerte 	 = GETPOST('seuil_stock_alerte')?GETPOST('seuil_stock_alerte'):0;
            $object->desiredstock            = GETPOST('desiredstock')?GETPOST('desiredstock'):0;
            $object->canvas             	 = GETPOST('canvas');
            $object->weight             	 = GETPOST('weight');
            $object->weight_units       	 = GETPOST('weight_units');
            $object->length             	 = GETPOST('size');
            $object->length_units       	 = GETPOST('size_units');
            $object->width               	 = GETPOST('sizewidth');
            $object->height             	 = GETPOST('sizeheight');
	        $object->surface            	 = GETPOST('surface');
            $object->surface_units      	 = GETPOST('surface_units');
            $object->volume             	 = GETPOST('volume');
            $object->volume_units       	 = GETPOST('volume_units');
            $object->finished           	 = GETPOST('finished');
	        $object->fk_unit                 = GETPOST('units');

			$accountancy_code_sell 			 = GETPOST('accountancy_code_sell');
			$accountancy_code_sell_intra	 = GETPOST('accountancy_code_sell_intra');
			$accountancy_code_sell_export	 = GETPOST('accountancy_code_sell_export');
			$accountancy_code_buy 			 = GETPOST('accountancy_code_buy');

			if ($accountancy_code_sell <= 0) { $object->accountancy_code_sell = ''; } else { $object->accountancy_code_sell = $accountancy_code_sell; }
			if ($accountancy_code_sell_intra <= 0) { $object->accountancy_code_sell_intra = ''; } else { $object->accountancy_code_sell_intra = $accountancy_code_sell_intra; }
			if ($accountancy_code_sell_export <= 0) { $object->accountancy_code_sell_export = ''; } else { $object->accountancy_code_sell_export = $accountancy_code_sell_export; }
			if ($accountancy_code_buy <= 0) { $object->accountancy_code_buy = ''; } else { $object->accountancy_code_buy = $accountancy_code_buy; }

            
            if (! empty($conf->global->PRODUIT_MULTIPRICES))
            {
                for($i=2;$i<=$conf->global->PRODUIT_MULTIPRICES_LIMIT;$i++)
                {
                    if (isset($_POST["price_".$i]))
                    {
                        $object->multiprices["$i"] = price2num($_POST["price_".$i],'MU');
                        $object->multiprices_base_type["$i"] = $_POST["multiprices_base_type_".$i];
                    }
                    else
                    {
                        $object->multiprices["$i"] = "";
                    }
                }
            }

            
        	$ret = $extrafields->setOptionalsFromPost($extralabels,$object);
			if ($ret < 0) $error++;

			if (! $error)
			{
            	$id = $object->create($user);
			}

            if ($id > 0)
            {
				
				$categories = GETPOST('categories', 'array');
				$object->setCategories($categories);

                header("Location: ".$_SERVER['PHP_SELF']."?id=".$id);
                exit;
            }
            else
			{
            	if (count($object->errors)) setEventMessages($object->error, $object->errors, 'errors');
				else setEventMessages($langs->trans($object->error), null, 'errors');
                $action = "create";
            }
        }
    }

    
    if ($action == 'update' && $usercancreate)
    {
    	if (GETPOST('cancel','alpha'))
        {
            $action = '';
        }
        else
        {
            if ($object->id > 0)
            {
				$object->oldcopy= clone $object;

                $object->ref                    = $ref;
                $object->label                  = GETPOST('label');
                $object->description            = dol_htmlcleanlastbr(GETPOST('desc','none'));
            	$object->url					= GETPOST('url');
    			if (! empty($conf->global->MAIN_DISABLE_NOTES_TAB))
    			{
                	$object->note_private           = dol_htmlcleanlastbr(GETPOST('note_private','none'));
                    $object->note                   = $object->note_private;
    			}
                $object->customcode             = GETPOST('customcode');
                $object->country_id             = GETPOST('country_id');
                $object->status                 = GETPOST('statut');
                $object->status_buy             = GETPOST('statut_buy');
                $object->status_batch	        = GETPOST('status_batch');
                
                
                $object->duration_value         = GETPOST('duration_value');
                $object->duration_unit          = GETPOST('duration_unit');

                $object->canvas                 = GETPOST('canvas');
                $object->weight                 = GETPOST('weight');
                $object->weight_units           = GETPOST('weight_units');
                $object->length                 = GETPOST('size');
                $object->length_units           = GETPOST('size_units');
                $object->width               	 = GETPOST('sizewidth');
                $object->height             	 = GETPOST('sizeheight');

                $object->surface                = GETPOST('surface');
                $object->surface_units          = GETPOST('surface_units');
                $object->volume                 = GETPOST('volume');
                $object->volume_units           = GETPOST('volume_units');
                $object->finished               = GETPOST('finished');

	            $units = GETPOST('units', 'int');

	            if ($units > 0) {
		            $object->fk_unit = $units;
	            } else {
		            $object->fk_unit = null;
	            }

	            $object->barcode_type           = GETPOST('fk_barcode_type');
    	        $object->barcode		        = GETPOST('barcode');
    	        
    	        $stdobject=new GenericObject($db);
    	        $stdobject->element='product';
    	        $stdobject->barcode_type=GETPOST('fk_barcode_type');
    	        $result=$stdobject->fetch_barcode();
    	        if ($result < 0)
    	        {
    	        	$error++;
    	        	$mesg='Failed to get bar code type information ';
            		setEventMessages($mesg.$stdobject->error, $mesg.$stdobject->errors, 'errors');
    	        }
    	        $object->barcode_type_code      = $stdobject->barcode_type_code;
    	        $object->barcode_type_coder     = $stdobject->barcode_type_coder;
    	        $object->barcode_type_label     = $stdobject->barcode_type_label;

				$accountancy_code_sell 			 = GETPOST('accountancy_code_sell');
				$accountancy_code_sell_intra	 = GETPOST('accountancy_code_sell_intra');
				$accountancy_code_sell_export	 = GETPOST('accountancy_code_sell_export');
				$accountancy_code_buy 			 = GETPOST('accountancy_code_buy');

				if ($accountancy_code_sell <= 0) { $object->accountancy_code_sell = ''; } else { $object->accountancy_code_sell = $accountancy_code_sell; }
				if ($accountancy_code_sell_intra <= 0) { $object->accountancy_code_sell_intra = ''; } else { $object->accountancy_code_sell_intra = $accountancy_code_sell_intra; }
				if ($accountancy_code_sell_export <= 0) { $object->accountancy_code_sell_export = ''; } else { $object->accountancy_code_sell_export = $accountancy_code_sell_export; }
				if ($accountancy_code_buy <= 0) { $object->accountancy_code_buy = ''; } else { $object->accountancy_code_buy = $accountancy_code_buy; }

                
        		$ret = $extrafields->setOptionalsFromPost($extralabels,$object);
				if ($ret < 0) $error++;

                if (! $error && $object->check())
                {
                    if ($object->update($object->id, $user) > 0)
                    {
						
						$categories = GETPOST('categories', 'array');
						$object->setCategories($categories);

                        $action = 'view';
                    }
                    else
					{
						if (count($object->errors)) setEventMessages($object->error, $object->errors, 'errors');
                    	else setEventMessages($langs->trans($object->error), null, 'errors');
                        $action = 'edit';
                    }
                }
                else
				{
					if (count($object->errors)) setEventMessages($object->error, $object->errors, 'errors');
                	else setEventMessages($langs->trans("ErrorProductBadRefOrLabel"), null, 'errors');
                    $action = 'edit';
                }
            }

        }
    }

    
    if ($action == 'confirm_clone' && $confirm != 'yes') { $action=''; }
    if ($action == 'confirm_clone' && $confirm == 'yes' && $usercancreate)
    {
        if (! GETPOST('clone_content') && ! GETPOST('clone_prices') )
        {
        	setEventMessages($langs->trans("NoCloneOptionsSpecified"), null, 'errors');
        }
        else
        {
            $db->begin();

            $originalId = $id;
            if ($object->id > 0)
            {
                $object->ref = GETPOST('clone_ref');
                $object->status = 0;
                $object->status_buy = 0;
                $object->id = null;
                $object->barcode = -1;

                if ($object->check())
                {
                    $id = $object->create($user);
                    if ($id > 0)
                    {
                        if (GETPOST('clone_composition'))
                        {
                            $result = $object->clone_associations($originalId, $id);

                            if ($result < 1)
                            {
                                $db->rollback();
                                setEventMessages($langs->trans('ErrorProductClone'), null, 'errors');
                                header("Location: ".$_SERVER["PHP_SELF"]."?id=".$originalId);
                                exit;
                            }
                        }

                        

                        $db->commit();
                        $db->close();

                        header("Location: ".$_SERVER["PHP_SELF"]."?id=".$id);
                        exit;
                    }
                    else
                    {
                        $id=$originalId;

                        if ($object->error == 'ErrorProductAlreadyExists')
                        {
                            $db->rollback();

                            $refalreadyexists++;
                            $action = "";

                            $mesg=$langs->trans("ErrorProductAlreadyExists",$object->ref);
                            $mesg.=' <a href="'.$_SERVER["PHP_SELF"].'?ref='.$object->ref.'">'.$langs->trans("ShowCardHere").'</a>.';
                            setEventMessages($mesg, null, 'errors');
                            $object->fetch($id);
                        }
                        else
                     {
                            $db->rollback();
                            if (count($object->errors))
                            {
                            	setEventMessages($object->error, $object->errors, 'errors');
                            	dol_print_error($db,$object->errors);
                            }
                            else
                            {
                            	setEventMessages($langs->trans($object->error), null, 'errors');
                            	dol_print_error($db,$object->error);
                            }
                        }
                    }
                }
            }
            else
            {
                $db->rollback();
                dol_print_error($db,$object->error);
            }
        }
    }

    
    if ($action == 'confirm_delete' && $confirm != 'yes') { $action=''; }
    if ($action == 'confirm_delete' && $confirm == 'yes' && $usercandelete)
	{
		$result = $object->delete($user);

        if ($result > 0)
        {
            header('Location: '.DOL_URL_ROOT.'/product/list.php?type='.$object->type.'&delprod='.urlencode($object->ref));
            exit;
        }
        else
        {
        	setEventMessages($langs->trans($object->error), null, 'errors');
            $reload = 0;
            $action='';
        }
    }


    
    if ($object->id > 0 && $action == 'addin')
    {
        $thirpdartyid =0 ;
        if (GETPOST('propalid') > 0)
        {
        	$propal = new Propal($db);
	        $result=$propal->fetch(GETPOST('propalid'));
	        if ($result <= 0)
	        {
	            dol_print_error($db,$propal->error);
	            exit;
	        }
	        $thirpdartyid = $propal->socid;
        }
        elseif (GETPOST('commandeid') > 0)
        {
            $commande = new Commande($db);
	        $result=$commande->fetch(GETPOST('commandeid'));
	        if ($result <= 0)
	        {
	            dol_print_error($db,$commande->error);
	            exit;
	        }
	        $thirpdartyid = $commande->socid;
        }
        elseif (GETPOST('factureid') > 0)
        {
    	    $facture = new Facture($db);
	        $result=$facture->fetch(GETPOST('factureid'));
	        if ($result <= 0)
	        {
	            dol_print_error($db,$facture->error);
	            exit;
	        }
	        $thirpdartyid = $facture->socid;
        }

        if ( $thirpdartyid > 0)  {
            $soc = new Societe($db);
            $result = $soc->fetch($thirpdartyid);
            if ($result <= 0) {
                dol_print_error($db, $soc->error);
                exit;
            }

            $desc = $object->description;

            $tva_tx = get_default_tva($mysoc, $soc, $object->id);
            $tva_npr = get_default_npr($mysoc, $soc, $object->id);
            if (empty($tva_tx)) $tva_npr=0;
            $localtax1_tx = get_localtax($tva_tx, 1, $soc, $mysoc, $tva_npr);
            $localtax2_tx = get_localtax($tva_tx, 2, $soc, $mysoc, $tva_npr);

            $pu_ht = $object->price;
            $pu_ttc = $object->price_ttc;
            $price_base_type = $object->price_base_type;

            
            if ($conf->global->PRODUIT_MULTIPRICES && $soc->price_level) {
                $pu_ht = $object->multiprices[$soc->price_level];
                $pu_ttc = $object->multiprices_ttc[$soc->price_level];
                $price_base_type = $object->multiprices_base_type[$soc->price_level];
            } elseif (!empty($conf->global->PRODUIT_CUSTOMER_PRICES)) {

                $prodcustprice = new Productcustomerprice($db);

                $filter = array('t.fk_product' => $object->id, 't.fk_soc' => $soc->id);

                $result = $prodcustprice->fetch_all('', '', 0, 0, $filter);
                if ($result) {
                    if (count($prodcustprice->lines) > 0) {
                        $pu_ht = price($prodcustprice->lines [0]->price);
                        $pu_ttc = price($prodcustprice->lines [0]->price_ttc);
                        $price_base_type = $prodcustprice->lines [0]->price_base_type;
                        $tva_tx = $prodcustprice->lines [0]->tva_tx;
                    }
                }
            }

			$tmpvat = price2num(preg_replace('/\s*\(.*\)/', '', $tva_tx));
			$tmpprodvat = price2num(preg_replace('/\s*\(.*\)/', '', $prod->tva_tx));

            
            
            if ($tmpvat != $tmpprodvat) {
                if ($price_base_type != 'HT') {
                    $pu_ht = price2num($pu_ttc / (1 + ($tmpvat / 100)), 'MU');
                } else {
                    $pu_ttc = price2num($pu_ht * (1 + ($tmpvat / 100)), 'MU');
                }
            }

            if (GETPOST('propalid') > 0) {
                
                $buyprice=0;
                if (($result = $propal->defineBuyPrice($pu_ht, GETPOST('remise_percent'), $object->id)) < 0)
                {
                    dol_syslog($langs->trans('FailedToGetCostPrice'));
                    setEventMessage($langs->trans('FailedToGetCostPrice'), 'errors');
                }
                else
                {
                    $buyprice = $result;
                }

                $result = $propal->addline(
                    $desc,
                    $pu_ht,
                    GETPOST('qty'),
                    $tva_tx,
                    $localtax1_tx, 
                    $localtax2_tx, 
                    $object->id,
                    GETPOST('remise_percent'),
                    $price_base_type,
                    $pu_ttc,
                    0,
                    0,
                    -1,
                    0,
                    0,
                    0,
                    $buyprice,
                    '',
                    '',
                    '',
                    0,
                    $object->fk_unit
                );
                if ($result > 0) {
                    header("Location: " . DOL_URL_ROOT . "/comm/propal/card.php?id=" . $propal->id);
                    return;
                }

                setEventMessages($langs->trans("ErrorUnknown") . ": $result", null, 'errors');
            } elseif (GETPOST('commandeid') > 0) {
                
                $buyprice=0;
                if (($result = $commande->defineBuyPrice($pu_ht, GETPOST('remise_percent'), $object->id)) < 0)
                {
                    dol_syslog($langs->trans('FailedToGetCostPrice'));
                    setEventMessage($langs->trans('FailedToGetCostPrice'), 'errors');
                }
                else
                {
                    $buyprice = $result;
                }

                $result = $commande->addline(
                    $desc,
                    $pu_ht,
                    GETPOST('qty'),
                    $tva_tx,
                    $localtax1_tx, 
                    $localtax2_tx, 
                    $object->id,
                    GETPOST('remise_percent'),
                    '',
                    '',
                    $price_base_type,
                    $pu_ttc,
                    '',
                    '',
                    0,
                    -1,
                    0,
                    0,
                    null,
                    $buyprice,
                    '',
                    0,
                    $object->fk_unit
                );

                if ($result > 0) {
                    header("Location: " . DOL_URL_ROOT . "/commande/card.php?id=" . $commande->id);
                    exit;
                }
            } elseif (GETPOST('factureid') > 0) {
                
                $buyprice=0;
                if (($result = $facture->defineBuyPrice($pu_ht, GETPOST('remise_percent'), $object->id)) < 0)
                {
                    dol_syslog($langs->trans('FailedToGetCostPrice'));
                    setEventMessage($langs->trans('FailedToGetCostPrice'), 'errors');
                }
                else
                {
                    $buyprice = $result;
                }

                $result = $facture->addline(
                    $desc,
                    $pu_ht,
                    GETPOST('qty'),
                    $tva_tx,
                    $localtax1_tx,
                    $localtax2_tx,
                    $object->id,
                    GETPOST('remise_percent'),
                    '',
                    '',
                    '',
                    '',
                    '',
                    $price_base_type,
                    $pu_ttc,
                    Facture::TYPE_STANDARD,
                    -1,
                    0,
                    '',
                    0,
                    0,
                    null,
                    $buyprice,
                    '',
                    0,
                    100,
                    '',
                    $object->fk_unit
                );

                if ($result > 0) {
                    header("Location: " . DOL_URL_ROOT . "/compta/facture/card.php?facid=" . $facture->id);
                    exit;
                }
            }
        }
        else {
            $action="";
            setEventMessages($langs->trans("WarningSelectOneDocument"), null, 'warnings');
        }
    }
}





$title = $langs->trans('ProductServiceCard');
$helpurl = '';
$shortlabel = dol_trunc($object->label,16);
if (GETPOST("type") == '0' || ($object->type == Product::TYPE_PRODUCT))
{
	$title = $langs->trans('Product')." ". $shortlabel ." - ".$langs->trans('Card');
	$helpurl='EN:Module_Products|FR:Module_Produits|ES:M&oacute;dulo_Productos';
}
if (GETPOST("type") == '1' || ($object->type == Product::TYPE_SERVICE))
{
	$title = $langs->trans('Service')." ". $shortlabel ." - ".$langs->trans('Card');
	$helpurl='EN:Module_Services_En|FR:Module_Services|ES:M&oacute;dulo_Servicios';
}

llxHeader('', $title, $helpurl);

$form = new Form($db);
$formfile = new FormFile($db);
$formproduct = new FormProduct($db);
if (! empty($conf->accounting->enabled)) $formaccounting = new FormAccounting($db);


$res=0;
if (! empty($conf->barcode->enabled) && ! empty($conf->global->BARCODE_PRODUCT_ADDON_NUM))
{
	$module=strtolower($conf->global->BARCODE_PRODUCT_ADDON_NUM);
	$dirbarcode=array_merge(array('/core/modules/barcode/'),$conf->modules_parts['barcode']);
	foreach ($dirbarcode as $dirroot)
	{
		$res=dol_include_once($dirroot.$module.'.php');
		if ($res) break;
	}
	if ($res > 0)
	{
			$modBarCodeProduct =new $module();
	}
}


if (is_object($objcanvas) && $objcanvas->displayCanvasExists($action))
{
	
	
	
	if (empty($object->error) && $id)
	{
		$object = new Product($db);
		$result=$object->fetch($id);
		if ($result <= 0) dol_print_error('',$object->error);
	}
	$objcanvas->assign_values($action, $object->id, $object->ref);	
	$objcanvas->display_canvas($action);							
}
else
{
    
    
    
	if ($action == 'create' && $usercancreate)
    {
        

		
        $module=(! empty($conf->global->PRODUCT_CODEPRODUCT_ADDON)?$conf->global->PRODUCT_CODEPRODUCT_ADDON:'mod_codeproduct_leopard');
        if (substr($module, 0, 16) == 'mod_codeproduct_' && substr($module, -3) == 'php')
        {
            $module = substr($module, 0, dol_strlen($module)-4);
        }
        $result=dol_include_once('/core/modules/product/'.$module.'.php');
        if ($result > 0)
        {
        	$modCodeProduct = new $module();
        }

        dol_set_focus('input[name="ref"]');

        
        
        
        
		if (! empty($modCodeProduct->code_auto))
			
		if (! empty($modBarCodeProduct->code_auto))
			

        if ($type==1) $title=$langs->trans("NewService");
        else $title=$langs->trans("NewProduct");
        $linkback="";
        

        dol_fiche_head('');

        

        
        $tmpcode='';
		if (! empty($modCodeProduct->code_auto)) $tmpcode=$modCodeProduct->getNextValue($object,$type);
        
        if ($refalreadyexists)
        {
            
        }
        

        
        

        
        
        $statutarray=array('1' => $langs->trans("OnSell"), '0' => $langs->trans("NotOnSell"));
        
        

        
        
        $statutarray=array('1' => $langs->trans("ProductStatusOnBuy"), '0' => $langs->trans("ProductStatusNotOnBuy"));
        
        

	    
		if (! empty($conf->productbatch->enabled))
		{
			
			$statutarray=array('0' => $langs->trans("ProductStatusNotOnBatch"), '1' => $langs->trans("ProductStatusOnBatch"));
			
			
		}

        $showbarcode=empty($conf->barcode->enabled)?0:1;
        if (! empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->lire_advance)) $showbarcode=0;

        if ($showbarcode)
        {
 	        
 	        if (isset($_POST['fk_barcode_type']))
	        {
	         	$fk_barcode_type=GETPOST('fk_barcode_type');
	        }
	        else
	        {
	        	if (empty($fk_barcode_type) && ! empty($conf->global->PRODUIT_DEFAULT_BARCODE_TYPE)) $fk_barcode_type = $conf->global->PRODUIT_DEFAULT_BARCODE_TYPE;
	        }
            $formbarcode = new FormBarCode($db);
	        
	        
	        $tmpcode=isset($_POST['barcode'])?GETPOST('barcode'):$object->barcode;
	        if (empty($tmpcode) && ! empty($modBarCodeProduct->code_auto)) $tmpcode=$modBarCodeProduct->getNextValue($object,$type);
	        
	        
        }

        
        

        $doleditor = new DolEditor('desc', GETPOST('desc','none'), '', 160, 'dolibarr_details', '', false, true, $conf->global->FCKEDITOR_ENABLE_PRODUCTDESC, ROWS_4, '90%');
        $doleditor->Create();

        

        
        
		
        

        
        if ($type != 1 && ! empty($conf->stock->enabled))
        {
            
            
            
            
            
            
            
        }
        else
        {
            
            
        }

        
        if ($type != 1)
        {
            
            $statutarray=array('1' => $langs->trans("Finished"), '0' => $langs->trans("RowMaterial"));
            
            
        }

        
        if ($type == 1)
        {
            ';
            ';
            ';
            ';
            ';
            ';
            
        }

        if ($type != 1)	
        {
            
            
            
            
            
            
            if (empty($conf->global->PRODUCT_DISABLE_SIZE))
            {
                
                
                
                
                
                
            }
            if (empty($conf->global->PRODUCT_DISABLE_SURFACE))
            {
                
                
                
                
                
            }
            
            
            
            
            
        }

        
	    if($conf->global->PRODUCT_USE_UNITS)
	    {
		    
		    
		    
		    
	    }

        
        if (empty($conf->global->PRODUCT_DISABLE_CUSTOM_INFO) && empty($type))
        {
	        
	        
	        
	        
	        if ($user->admin) 
	        
        }

        
        $parameters=array('cols' => 3);
        $reshook=$hookmanager->executeHooks('formObjectOptions',$parameters,$object,$action);    
        
        if (empty($reshook) && ! empty($extrafields->attribute_label))
        {
        	
        }

        
        
        
            

            
            $doleditor = new DolEditor('note_private', GETPOST('note_private','none'), '', 140, 'dolibarr_details', '', false, true, $conf->global->FCKEDITOR_ENABLE_PRODUCTDESC, ROWS_8, '90%');
    	    $doleditor->Create();

            
        

		if ($conf->categorie->enabled) {
			
			
			$cate_arbo = $form->select_all_categories(Categorie::TYPE_PRODUCT, '', 'parent', 64, 0, 1);
			
			
		}

        

        

        if (! empty($conf->global->PRODUIT_MULTIPRICES))
        {
            
            
            
            
            
            $defaultva = get_default_tva($mysoc, $mysoc);
            
            
            
            
        }
        else
		{
            

            
            
            
            
            

            
            
            
            

            
            
            $defaultva=get_default_tva($mysoc, $mysoc);
            
            

            

            
        }

        
        

		if (! empty($conf->accounting->enabled))
		{
			
			
			
			
			

			if ($conf->global->MAIN_FEATURES_LEVEL)
			{
				
				if ($mysoc->isInEEC())
				{
					
					
					
					
				}

				
				
				
				
				
			}

			
			
			
			
			
		}
		else 
		{
			
			
			
			

			if ($conf->global->MAIN_FEATURES_LEVEL)
			{
				
				if ($mysoc->isInEEC())
				{
					
					
					
				}

				
				
				
				
			}

			
			
			
			
		}
		

		dol_fiche_end();

		
		
		 &nbsp; ';
		
		

		
	}

    

    else if ($object->id > 0)
    {
        
		if ($action == 'edit' && $usercancreate)
		{
            

            $type = $langs->trans('Product');
            if ($object->isService()) $type = $langs->trans('Service');
            

            
            
            
            
            
            

            $head=product_prepare_head($object);
            $titre=$langs->trans("CardProduct".$object->type);
            $picto=($object->type== Product::TYPE_SERVICE?'service':'product');
            dol_fiche_head($head, 'card', $titre, 0, $picto);

            

            
            

            
            

            
            
            
            if ($object->status)
            {
                
                
            }
            else
            {
                
                
            }
            
            

            
            
            
            if ($object->status_buy)
            {
                
                
            }
            else
            {
                
                
            }
            
            

			
			if ($conf->productbatch->enabled) 
			{
				if ($object->isProduct() || ! empty($conf->global->STOCK_SUPPORTS_SERVICES))
				{
					
					$statutarray=array('0' => $langs->trans("ProductStatusNotOnBatch"), '1' => $langs->trans("ProductStatusOnBatch"));
					
					
				}
			}

            
            $showbarcode=empty($conf->barcode->enabled)?0:1;
            if (! empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->lire_advance)) $showbarcode=0;

	        if ($showbarcode)
	        {
		        
		        if (isset($_POST['fk_barcode_type']))
		        {
		         	$fk_barcode_type=GETPOST('fk_barcode_type');
		        }
		        else
		        {
	        		$fk_barcode_type=$object->barcode_type;
		        	if (empty($fk_barcode_type) && ! empty($conf->global->PRODUIT_DEFAULT_BARCODE_TYPE)) $fk_barcode_type = $conf->global->PRODUIT_DEFAULT_BARCODE_TYPE;
		        }
	            $formbarcode = new FormBarCode($db);
		        
		        
		        $tmpcode=isset($_POST['barcode'])?GETPOST('barcode'):$object->barcode;
		        if (empty($tmpcode) && ! empty($modBarCodeProduct->code_auto)) $tmpcode=$modBarCodeProduct->getNextValue($object,$type);
		        
		        
	        }

            
            

            
            $doleditor = new DolEditor('desc', $object->description, '', 160, 'dolibarr_details', '', false, true, $conf->global->FCKEDITOR_ENABLE_PRODUCTDESC, ROWS_4, '90%');
            $doleditor->Create();

            
            

            
            
			
            

            
            

            
            if($object->type!= Product::TYPE_SERVICE)
            {
                
                $statutarray=array('-1'=>'&nbsp;', '1' => $langs->trans("Finished"), '0' => $langs->trans("RowMaterial"));
                
                
            }

            if ($object->isService())
            {
                
                
                 ';
                
                 ';
                
                 ';
                
                 ';
                
                 ';
                
                
            }
            else
			{
                
                
                
                
                
                if (empty($conf->global->PRODUCT_DISABLE_SIZE))
                {
        			
        			
        			
        			
        			
        			
        			
                }
                if (empty($conf->global->PRODUCT_DISABLE_SURFACE))
                {
                    
                    
                    
                    
                    
                }
                if (empty($conf->global->PRODUCT_DISABLE_VOLUME))
                {
                    
                    
                    
                    
                    
                }
            }
        	
	        if($conf->global->PRODUCT_USE_UNITS)
	        {
		        
		        
		        
		        
	        }

	        
    	    if (! $object->isService() && empty($conf->global->PRODUCT_DISABLE_CUSTOM_INFO))
        	{
	            
	            
	            
	            
	            if ($user->admin) 
	            
        	}

            
            $parameters=array('colspan' => ' colspan="3"', 'cols'=>3);
            $reshook=$hookmanager->executeHooks('formObjectOptions',$parameters,$object,$action);    
            
            if (empty($reshook) && ! empty($extrafields->attribute_label))
            {
            	
            }

			
            if ($conf->categorie->enabled)
			{
				
				$cate_arbo = $form->select_all_categories(Categorie::TYPE_PRODUCT, '', 'parent', 64, 0, 1);
				$c = new Categorie($db);
				$cats = $c->containing($object->id,Categorie::TYPE_PRODUCT);
				$arrayselected=array();
				foreach($cats as $cat) {
					$arrayselected[] = $cat->id;
				}
				
				
			}

            
			if (! empty($conf->global->MAIN_DISABLE_NOTES_TAB))
			{
                

                $doleditor = new DolEditor('note_private', $object->note_private, '', 140, 'dolibarr_notes', '', false, true, $conf->global->FCKEDITOR_ENABLE_PRODUCTDESC, ROWS_4, '90%');
                $doleditor->Create();

                
			}

            

            

            

			if (! empty($conf->accounting->enabled))
			{
				
				
				
				
				

				if ($conf->global->MAIN_FEATURES_LEVEL)
				{
					
					if ($mysoc->isInEEC())
					{
						
						
						
						
					}

					
					
					
					
					
				}

				
				
				
				
				
			}
			else 
			{
				
				
				
				

				if ($conf->global->MAIN_FEATURES_LEVEL)
				{
					
					if ($mysoc->isInEEC())
					{
						
						
						
					}

					
					
					
					
				}

				
				
				
				
			}
			

			dol_fiche_end();

			
			
			&nbsp;&nbsp;&nbsp;&nbsp;';
			
			

			
		}
        
        else
		{
            $showbarcode=empty($conf->barcode->enabled)?0:1;
            if (! empty($conf->global->MAIN_USE_ADVANCED_PERMS) && empty($user->rights->barcode->lire_advance)) $showbarcode=0;

		    $head=product_prepare_head($object);
            $titre=$langs->trans("CardProduct".$object->type);
            $picto=($object->type== Product::TYPE_SERVICE?'service':'product');

            dol_fiche_head($head, 'card', $titre, -1, $picto);

            $linkback = '<a href="'.DOL_URL_ROOT.'/product/list.php?restore_lastsearch_values=1&type='.$object->type.'">'.$langs->trans("BackToList").'</a>';
            $object->next_prev_filter=" fk_product_type = ".$object->type;

            $shownav = 1;
            if ($user->societe_id && ! in_array('product', explode(',',$conf->global->MAIN_MODULES_FOR_EXTERNAL))) $shownav=0;

            dol_banner_tab($object, 'ref', $linkback, $shownav, 'ref');


            
            

            
            

			
			if (! empty($conf->produit->enabled) && ! empty($conf->service->enabled))
			{
				
				$typeformat='select;0:'.$langs->trans("Product").',1:'.$langs->trans("Service");
				
				
				
			}

            if ($showbarcode)
            {
                
                
                
                
                
                if (($action != 'editbarcodetype') && $usercancreate && $createbarcode) id='.$object->id.'">'.img_edit($langs->trans('Edit'),1).'</a></td>';
                
                
                if ($action == 'editbarcodetype' || $action == 'editbarcode')
                {
                    $formbarcode = new FormBarCode($db);
				}
                if ($action == 'editbarcodetype')
                {
                    $formbarcode->form_barcode_type($_SERVER['PHP_SELF'].'?id='.$object->id,$object->barcode_type,'fk_barcode_type');
                }
                else
                {
                    $object->fetch_barcode();
                    
                }
                

                
                
                
                
                
                if (($action != 'editbarcode') && $usercancreate && $createbarcode) id='.$object->id.'">'.img_edit($langs->trans('Edit'),1).'</a></td>';
                
                
                if ($action == 'editbarcode')
                {
					$tmpcode=isset($_POST['barcode'])?GETPOST('barcode'):$object->barcode;
					if (empty($tmpcode) && ! empty($modBarCodeProduct->code_auto)) $tmpcode=$modBarCodeProduct->getNextValue($object,$type);

					
					
					
					
					
					<input type="submit" class="button" value="'.$langs->trans("Modify").'">';
					
                }
                else
                {
					
                }
                
            }

			
			
			
			
			if (! empty($conf->accounting->enabled))
			{
				$accountingaccount = new AccountingAccount($db);
				$accountingaccount->fetch('',$object->accountancy_code_sell,1);

				
			} else {
				
			}
			

			if ($conf->global->MAIN_FEATURES_LEVEL)
			{
				
				if ($mysoc->isInEEC())
				{
					
					
					
					if (! empty($conf->accounting->enabled))
					{
						$accountingaccount2 = new AccountingAccount($db);
						$accountingaccount2->fetch('',$object->accountancy_code_sell_intra,1);

						
					} else {
						
					}
					
				}

				
				
				
				
				if (! empty($conf->accounting->enabled))
				{
					$accountingaccount3 = new AccountingAccount($db);
					$accountingaccount3->fetch('',$object->accountancy_code_sell_export,1);

					
				} else {
					
				}
				
			}

			
			
			
			
			if (! empty($conf->accounting->enabled))
			{
				$accountingaccount4 = new AccountingAccount($db);
				$accountingaccount4->fetch('',$object->accountancy_code_buy,1);

				
			} else {
				
			}
			

            
            if (! empty($conf->productbatch->enabled)) 
            {
				if ($object->isProduct() || ! empty($conf->global->STOCK_SUPPORTS_SERVICES))
				{
            		
            	    if (! empty($conf->use_javascript_ajax) && $usercancreate && ! empty($conf->global->MAIN_DIRECT_STATUS_UPDATE)) {
            	        
            	    } else {
            	        
            	    }
            	    
				}
            }

            
            

            
            
			
            

            
            if (!empty($conf->variants->enabled) && $object->isProduct()) {

                $combination = new ProductCombination($db);

                if ($combination->fetchByFkProductChild($object->id) > 0) {
                    $prodstatic = new Product($db);
                    $prodstatic->fetch($combination->fk_product_parent);

                    
                    
                    
                    
                }
            }

            
            
            

            
            

            
            if($object->type!= Product::TYPE_SERVICE)
            {
                
                
                
            }

            if ($object->isService())
            {
                
                ';
                if ($object->duration_value > 1)
                {
                    $dur=array("h"=>$langs->trans("Hours"),"d"=>$langs->trans("Days"),"w"=>$langs->trans("Weeks"),"m"=>$langs->trans("Months"),"y"=>$langs->trans("Years"));
                }
                else if ($object->duration_value > 0)
                {
                    $dur=array("h"=>$langs->trans("Hour"),"d"=>$langs->trans("Day"),"w"=>$langs->trans("Week"),"m"=>$langs->trans("Month"),"y"=>$langs->trans("Year"));
                }
                ";

                
            }
            else
            {
                
                
                if ($object->weight != '')
                {
                    
                }
                else
                {
                    ';
                }
                
                if (empty($conf->global->PRODUCT_DISABLE_SIZE))
                {
                    
                    
                    if ($object->length != '' || $object->width != '' || $object->height != '')
                    {
                        
                        if ($object->width) 
                        if ($object->height) 
                        
                    }
                    else
                    {
                        ';
                    }
                    
                }
                if (empty($conf->global->PRODUCT_DISABLE_SURFACE))
                {
                    
                    
                    if ($object->surface != '')
                    {
                        
                    }
                    else
                    {
                        ';
                    }
                    
                }
                if (empty($conf->global->PRODUCT_DISABLE_VOLUME))
                {
                    
                    
                    if ($object->volume != '')
                    {
                        
                    }
                    else
                    {
                        ';
                    }
                    
                }
            }

			
			if (! empty($conf->global->PRODUCT_USE_UNITS))
			{
				$unit = $object->getLabelOfUnit();

				
				if ($unit !== '') {
					
				}
				
			}

        	
        	if (! $object->isService() && empty($conf->global->PRODUCT_DISABLE_CUSTOM_INFO))
        	{
	            

            	
            	
        	}

            
            $parameters=array('colspan' => ' colspan="'.(2+(($showphoto||$showbarcode)?1:0)).'"');

			
			if($conf->categorie->enabled) {
				
				
				
			}

            
			if (! empty($conf->global->MAIN_DISABLE_NOTES_TAB))
			{
    			
                
                
			}

            
    		

            
            

            dol_fiche_end();
        }

    }
    else if ($action != 'create')
    {
        exit;
    }
}


$module=(! empty($conf->global->PRODUCT_CODEPRODUCT_ADDON)?$conf->global->PRODUCT_CODEPRODUCT_ADDON:'mod_codeproduct_leopard');
if (substr($module, 0, 16) == 'mod_codeproduct_' && substr($module, -3) == 'php')
{
    $module = substr($module, 0, dol_strlen($module)-4);
}
$result=dol_include_once('/core/modules/product/'.$module.'.php');
if ($result > 0)
{
	$modCodeProduct = new $module();
}

$tmpcode='';
if (! empty($modCodeProduct->code_auto)) $tmpcode=$modCodeProduct->getNextValue($object,$object->type);


$formquestionclone=array(
	'text' => $langs->trans("ConfirmClone"),
    array('type' => 'text', 'name' => 'clone_ref','label' => $langs->trans("NewRefForClone"), 'value' => empty($tmpcode) ? $langs->trans("CopyOf").' '.$object->ref : $tmpcode, 'size'=>24),
    array('type' => 'checkbox', 'name' => 'clone_content','label' => $langs->trans("CloneContentProduct"), 'value' => 1),
    array('type' => 'checkbox', 'name' => 'clone_prices', 'label' => $langs->trans("ClonePricesProduct").' ('.$langs->trans("FeatureNotYetAvailable").')', 'value' => 0, 'disabled' => true),
);
if (! empty($conf->global->PRODUIT_SOUSPRODUITS))
{
    $formquestionclone[]=array('type' => 'checkbox', 'name' => 'clone_composition', 'label' => $langs->trans('CloneCompositionProduct'), 'value' => 1);
}


if (($action == 'delete' && (empty($conf->use_javascript_ajax) || ! empty($conf->dol_use_jmobile)))	
	|| (! empty($conf->use_javascript_ajax) && empty($conf->dol_use_jmobile)))							
{
    
}


if (($action == 'clone' && (empty($conf->use_javascript_ajax) || ! empty($conf->dol_use_jmobile)))		
	|| (! empty($conf->use_javascript_ajax) && empty($conf->dol_use_jmobile)))							
{
    
}







if ($action != 'create' && $action != 'edit')
{
    

    $parameters=array();
    $reshook=$hookmanager->executeHooks('addMoreActionsButtons',$parameters,$object,$action);    
    if (empty($reshook))
	{
		if ($usercancreate)
        {
            if (! isset($object->no_button_edit) || $object->no_button_edit <> 1) id='.$object->id.'">'.$langs->trans("Modify").'</a></div>';

            if (! isset($object->no_button_copy) || $object->no_button_copy <> 1)
            {
                if (! empty($conf->use_javascript_ajax) && empty($conf->dol_use_jmobile))
                {
                    
                }
                else
    			{
                    id='.$object->id.'">'.$langs->trans("ToClone").'</a></div>';
                }
            }
        }
        $object_is_used = $object->isObjectUsed($object->id);

        if ($usercandelete)
        {
            if (empty($object_is_used) && (! isset($object->no_button_delete) || $object->no_button_delete <> 1))
            {
                if (! empty($conf->use_javascript_ajax) && empty($conf->dol_use_jmobile))
                {
                    
                }
                else
    			{
                    id='.$object->id.'">'.$langs->trans("Delete").'</a></div>';
                }
            }
            else
    		{
                
}



if (! empty($conf->global->PRODUCT_ADD_FORM_ADD_TO) && $object->id && ($action == '' || $action == 'view') && $object->status)
{
    
    $html = '';
	

    
    if (! empty($conf->propal->enabled) && $user->rights->propale->creer)
    {
        $propal = new Propal($db);

        $langs->load("propal");

        $otherprop = $propal->liste_array(2,1,0);

        if (is_array($otherprop) && count($otherprop))
        {
        	$html .= '<tr><td style="width: 200px;">';
        	$html .= $langs->trans("AddToDraftProposals").'</td><td>';
        	$html .= $form->selectarray("propalid", $otherprop, 0, 1);
        	$html .= '</td></tr>';
        }
        else
       {
        	$html .= '<tr><td style="width: 200px;">';
        	$html .= $langs->trans("AddToDraftProposals").'</td><td>';
        	$html .= $langs->trans("NoDraftProposals");
        	$html .= '</td></tr>';
        }
    }

    
    if (! empty($conf->commande->enabled) && $user->rights->commande->creer)
    {
        $commande = new Commande($db);

        $langs->load("orders");

        $othercom = $commande->liste_array(2, 1, null);
        if (is_array($othercom) && count($othercom))
        {
        	$html .= '<tr><td style="width: 200px;">';
        	$html .= $langs->trans("AddToDraftOrders").'</td><td>';
        	$html .= $form->selectarray("commandeid", $othercom, 0, 1);
        	$html .= '</td></tr>';
        }
        else
		{
        	$html .= '<tr><td style="width: 200px;">';
        	$html .= $langs->trans("AddToDraftOrders").'</td><td>';
        	$html .= $langs->trans("NoDraftOrders");
        	$html .= '</td></tr>';
        }
    }

    
    if (! empty($conf->facture->enabled) && $user->rights->facture->creer)
    {
    	$invoice = new Facture($db);

    	$langs->load("bills");

    	$otherinvoice = $invoice->liste_array(2, 1, null);
    	if (is_array($otherinvoice) && count($otherinvoice))
    	{
    		$html .= '<tr><td style="width: 200px;">';
    		$html .= $langs->trans("AddToDraftInvoices").'</td><td>';
    		$html .= $form->selectarray("factureid", $otherinvoice, 0, 1);
    		$html .= '</td></tr>';
    	}
    	else
    	{
    		$html .= '<tr><td style="width: 200px;">';
    		$html .= $langs->trans("AddToDraftInvoices").'</td><td>';
    		$html .= $langs->trans("NoDraftInvoices");
    		$html .= '</td></tr>';
    	}
    }

    
    if (!empty($html))
    {
	    
    	
    	

	    

		dol_fiche_head('');

    	$html .= '<tr><td class="nowrap">'.$langs->trans("Quantity").' ';
    	$html .= '<input type="text" class="flat" name="qty" size="1" value="1"></td>';
        $html .= '<td class="nowrap">'.$langs->trans("ReductionShort").'(%) ';
    	$html .= '<input type="text" class="flat" name="remise_percent" size="1" value="0">';
    	$html .= '</td></tr>';

    	
        
        

        
        
        

        dol_fiche_end();

        
    }
}




if ($action != 'create' && $action != 'edit' && $action != 'delete')
{
    
     

    
    $objectref = dol_sanitizeFileName($object->ref);
    $relativepath = $comref . '/' . $objectref . '.pdf';
    $filedir = $conf->produit->dir_output . '/' . $objectref;
    $urlsource=$_SERVER["PHP_SELF"]."?id=".$object->id;
    $genallowed=$usercanread;
    $delallowed=$usercancreate;

    $var=true;

    
    $somethingshown=$formfile->numoffiles;

    

    $MAXEVENT = 10;

    $morehtmlright = '<a href="'.DOL_URL_ROOT.'/product/agenda.php?id='.$object->id.'">';
    $morehtmlright.= $langs->trans("SeeAll");
    $morehtmlright.= '</a>';

    
    $formactions = new FormActions($db);
    $somethingshown = $formactions->showactions($object, 'product', 0, 1, '', $MAXEVENT, '', $morehtmlright);		

    
}


llxFooter();
$db->close();
