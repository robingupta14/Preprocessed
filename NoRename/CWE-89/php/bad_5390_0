<?php


















class expPaginator {
    
	public $model = null;
    public $search_string = '';
	public $sql = '';
    public $count_sql = '';
	public $where = '';
	public $controller = '';
	public $action = '';
	public $order = '';
	public $order_direction = '';
	public $firstpage = '';
	public $lastpage = '';
	public $previous_page = '';
	public $next_page = '';
	public $previous_shift = '';
	public $next_shift = '';
	public $pagelink = '';
	public $header_columns = '';
	public $default = '';
	public $view = null;
    public $uncat ='';




	
	public $page  = 1;

    public $limit = 0;
	public $start = 0;
	public $last = 0;
	public $pages_to_show = 10;
	public $total_records = 0;
	public $total_pages = 0;
	public $page_offset = 0;
    public $categorize = false;


	
	public $pages = array();
	public $records = array();
    public $cats = array();
    public $sort_dropdown = array();

	
	public function __construct($params=array()) {
		global $router, $db;

        $this->pages_to_show = expTheme::is_mobile() ? 6 : 10; 
		$this->where = empty($params['where']) ? null : $params['where'];
		$this->records = empty($params['records']) ? array() : $params['records'];

        $this->limit = empty($params['limit']) ? 0 : intval($params['limit']);
        $this->page = empty($params['page']) ? 1 : intval($params['page']);
		$this->action = empty($params['action']) ? '' : $params['action'];
		$this->controller = empty($params['controller']) ? '' : $params['controller'];
		$this->sql = empty($params['sql']) ? '' : $params['sql'];
        $this->count_sql = empty($params['count_sql']) ? '' : $params['count_sql'];
		$this->order = empty($params['order']) ? 'id' : expString::escape($params['order']);
		$this->dir = empty($params['dir']) || !in_array($params['dir'], array('ASC', 'DESC')) ? 'ASC' : $params['dir'];
		$this->src = empty($params['src']) ? null : expString::escape($params['src']);
        $this->categorize = empty($params['categorize']) ? false : $params['categorize'];
        $this->uncat = !empty($params['uncat']) ? $params['uncat'] : gt('Not Categorized');
        $this->groups = !empty($params['groups']) ? $params['groups'] : array();
        $this->grouplimit = !empty($params['grouplimit']) ? $params['grouplimit'] : null;
        $this->dontsortwithincat = !empty($params['dontsortwithincat']) ? $params['dontsortwithincat'] : null;
        $this->dontsort = !empty($params['dontsort']) ? $params['dontsort'] : null;

		
		if (isset($params['view']))
            $this->view = $params['view'];

        
        if (isset($params['model'])) {
            $this->model = $params['model'];
            $class = new $this->model(null, false, false);
        }

	    
	    expCSS::pushToHead(array(


            'corecss'=>'pagination'
		    )
		);

		if ($this->limit)
            $this->start = (($this->page * $this->limit) - $this->limit);
        if ($this->start < 0)
            $this->start = 0;

		
        $this->columns = array();
		if (isset($params['columns'])) {
		    foreach($params['columns'] as $key=>$col){
		        $colparse[$key] = explode('|',$col);
		        $column = array($key=>$colparse[$key][0]);
		        $this->columns = array_merge($this->columns,$column);
		        if (!empty($colparse[$key][1])) {
		            $params = explode(',',$colparse[$key][1]);
		            foreach ($params as $paramval) {
		                $prm = explode('=',$paramval);
		                $this->linkables[$key][$prm[0]] = $prm[1];
		            }
		        }
		    }
		}

		
		
		
		
		$this->order_direction = $this->dir;

        
        if (strstr($this->order," ")) {
            $orderby = explode(" ",$this->order);
            $this->order = $orderby[0];
            $this->order_direction = $orderby[1];
        }
        if(!preg_match('/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/', $this->order))
            $this->order = 'id';
        if (!in_array($this->order_direction, array('ASC', 'DESC')))
            $this->order_direction = 'ASC';
        if ($this->dontsort)
            $sort = null;
        else
            $sort = $this->order.' '.$this->order_direction;

		
		
        if (!empty($this->categorize))
            $limit = null;
        else
            $limit = $this->limit;

		if (isset($params['records'])) { 
		    
            if (!empty($sort))
                usort($this->records,array('expPaginator', strtolower($this->order_direction)));

		} elseif (!empty($class)) { 
			$this->total_records = $class->find('count', $this->where);
            $this->records = $class->find('all', $this->where, $sort, $limit, $this->start);
		} elseif (!empty($this->where)) { 
			$this->total_records = $class->find('count', $this->where);
            $this->records = $class->find('all', $this->where, $sort, $limit, $this->start);
		} else { 
			
			
            
            
			



            if (!empty($sort)) $this->sql .= ' ORDER BY '.$sort;
            if (!empty($this->count_sql)) $this->total_records = $db->countObjectsBySql($this->count_sql);
			if (!empty($this->limit)) $this->sql .= ' LIMIT '.$this->start.','.$this->limit;

			$this->records = array();
			if (isset($this->model) || isset($params['model_field'])) {
			    foreach($db->selectObjectsBySql($this->sql) as $record) {
                    $type = $params['model_field'];
			        $classname = isset($params['model_field']) ? $record->$type : $this->model;
			        
					$this->records[] = new $classname($record->id, false, true); 
			    }
			} else {
			    $this->records = $db->selectObjectsBySql($this->sql);
			}
		}

        
        if (!empty($this->categorize) && $this->categorize && empty($this->dontsort))
            expCatController::addCats($this->records,$sort,$this->uncat,$this->groups,$this->dontsortwithincat);

        
        if (empty($this->total_records))
            $this->total_records = count($this->records);
        if ($this->limit && $this->start >= $this->total_records)
            $this->start = $this->total_records - $this->limit;

        
        
        if (empty($this->grouplimit) && ($this->limit) && count($this->records) > $this->limit)
            $this->records = array_slice($this->records, $this->start, $this->limit);
        
        if (empty($this->dontsort)) {
            if (!empty($this->categorize) && $this->categorize) {
                expCatController::sortedByCats($this->records,$this->cats,$this->groups,$this->grouplimit);
            } elseif (empty($this->dontsortwithincat)) {  
                $order = $this->order;
                if (in_array($order,array('created_at','edited_at','publish'))) {
                    if ($this->total_records && (abs($this->records[0]->$order - $this->records[count($this->records)-1]->$order)  >= 63072000)) {
                        $datetype = 'Y';  
                    } else {
                        $datetype = 'M Y';  
                    }
                    foreach ($this->records as $record) {
                        if (is_numeric($record->$order)) {
                            $title = date($datetype,$record->$order);
                            $title = empty($title)?gt('Undated'):$title;
                        } else {
                            $title = gt('Undated');
                        }
                        if (empty($this->cats[$title])) {
                            $this->cats[$title] = new stdClass();
                            $this->cats[$title]->count = 1;
                            $this->cats[$title]->name = $title;
                        } else {
                            $this->cats[$title]->count++;
                        }
                        $this->cats[$title]->records[] = $record;
                    }
                } else {
                    foreach ($this->records as $record) {
                        if (!empty($record->$order) && is_string($record->$order) && !is_numeric($record->$order)) {
                            $title = ucfirst($record->$order);
                            $title = empty($title[0])?'':$title[0];
                        } else {
                            $title = '';
                        }
                        if (empty($this->cats[$title])) {
                            $this->cats[$title] = new stdClass();
                            $this->cats[$title]->count = 1;
                            $this->cats[$title]->name = $title;
                        } else {
                            $this->cats[$title]->count++;
                        }
                        $this->cats[$title]->records[] = $record;
                    }
                }
            }
            if (!empty($this->grouplimit)) {
                if ($this->limit)
                    $this->records = array_slice($this->records, $this->start, $this->limit);
            } else {
                if ($this->limit)
                    $this->cats = array_slice($this->cats, $this->start, $this->limit);
            }
        }

        if (isset($params['records']))
            $this->runCallback(); 

        
		
		
		if ($this->total_records > 0) {
			$this->firstrecord = $this->start + 1;
			$this->lastrecord = ($this->total_records < $this->limit) ? ($this->start + $this->total_records) : ($this->start + $this->limit);
			if ($this->lastrecord > $this->total_records || $this->lastrecord == 0)
                $this->lastrecord = $this->total_records;
		} else {
			$this->firstrecord = 0;
			$this->lastrecord = 0;
		}

		
        $page_params = $router->params;

        foreach (array("__utma", "__utmz", "route_sanitized") as $key) {
            if (isset($page_params[$key]))
                unset($page_params[$key]);
        }
        if (!empty($page_params['search_string']))
            $page_params['search_string'] = urlencode($page_params['search_string']);

		
		
		
		if (!empty($this->controller)) {
		    unset($page_params['module']);
		    $page_params['controller'] = expModules::getModuleName($this->controller);
		} else {
            if (expTheme::inAction() && empty($params)) {
                
    
    
    
    
    
                $mod = !empty($router->params['controller']) ? $router->params['controller'] : $router->params['module'];
                if ($this->controller == $mod && $this->action == $router->params['action']) {
                    $this->order = isset($router->params['order']) ? $router->params['order'] : $this->order;
                    $this->order_direction = isset($router->params['dir']) ? $router->params['dir'] : $this->dir;
                    if(!preg_match('/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/', $this->order))
                        $this->order = 'id';
                    if (!in_array($this->order_direction, array('ASC', 'DESC')))
                        $this->order_direction = 'ASC';
                }
            } else {
                if (isset($params->controller)) {
                    $mod = $params->controller;
                } else {
                    $mod = '';
                }
            }
            $page_params['controller'] = $mod;  
        }

		if (!empty($this->action))
            $page_params['action'] =  $this->action;
		if (!empty($this->src))
            $page_params['src'] =  $this->src;

		if (isset($page_params['section']))
            unset($page_params['section']);

		
		$this->morelink = $router->makeLink($page_params, false, false, true);

		if (!empty($this->view))
            $page_params['view'] = $this->view;

		
		$this->pagelink = $router->makeLink($page_params, false, false, true);

		
		

		$this->total_pages = ($this->limit > 0) ? ceil($this->total_records/$this->limit) : 0;

        
		if ($this->page > $this->total_pages) {
			$this->page = $this->total_pages;
            
            if (!empty($this->total_pages)) header(':', true, 404);
		}

        
        if ($this->page > 1) {
            $page_params['page'] = $this->page - 1;
            $this->previous_pagenum = $this->page - 1;
            $this->previous_page = $router->makeLink($page_params, false, false, true);
            if (expTheme::is_mobile())
                $this->pages_to_show--;
        }

        
        if ($this->page < $this->total_pages) {
            $page_params['page'] = $this->page + 1;
            $this->next_pagenum = $this->page + 1;
            $this->next_page = $router->makeLink($page_params, false, false, true);
            if (expTheme::is_mobile())
                $this->pages_to_show--;
        }

		
		if ($this->total_pages > $this->pages_to_show) {
			$this->first_pagelink = max(1, floor(($this->page) - ($this->pages_to_show) / 2));
		    $this->last_pagelink = $this->first_pagelink + $this->pages_to_show - 1;
		    if ($this->last_pagelink > $this->total_pages) {
		        $this->first_pagelink = max(1, $this->total_pages - $this->pages_to_show) + 1;
		        $this->last_pagelink = $this->total_pages;
		    }
		} else {
			$this->first_pagelink = 1;
			$this->last_pagelink = $this->total_pages;
		}

		
		if ($this->page > $this->pages_to_show) {
			$page_params['page'] = $this->first_pagelink - 1;
            $this->previous_shiftnum = $this->first_pagelink - 1;
        	$this->previous_shift = $router->makeLink($page_params, false, false, true);
			$page_params['page'] = 1;
			$this->firstpage = $router->makeLink($page_params, false, false, true);
		}

		
		if ($this->page < ($this->total_pages - $this->pages_to_show)) {
            $page_params['page'] = $this->last_pagelink + 1;
            $this->next_shiftnum = $this->last_pagelink + 1;
            $this->next_shift = $router->makeLink($page_params, false, false, true);
			$page_params['page'] = $this->total_pages;
			$this->lastpage = $router->makeLink($page_params, false, false, true);
        }

		
		for($i=$this->first_pagelink; $i<=$this->last_pagelink; $i++) {
			$page_params['page'] = $i;
			$this->pages[$i] = $router->makeLink($page_params, false, false, true);
		}

		$links_template = expTemplate::get_common_template('pagination_links', null, 'common');
		$links_template->assign('page', $this);
		$this->links = $links_template->render();

		$this->makeHeaderCols($page_params);  

        $sortparams = array_merge($page_params, $router->params);

		
        if (isset($router->params['page']))
            $sortparams['page'] = $router->params['page'];
        else
            unset($sortparams['page']);
        

		$this->makeSortDropdown($sortparams);  

        $table_template = expTemplate::get_common_template('pagination_table', null, 'common');
        $table_template->assign('page', $this);
        $this->table = $table_template->render();  

	}

	
    private function cleanParams($params) {
        $defaultParams = array('title'=>'','module'=>'','controller'=>'','src'=>'','id'=>'','dir'=>'','_common'=>'');
        $newParams = array();
        $func = new ReflectionClass($this);
        foreach ($params as $pKey=>$pVal) {
            $propname = $pKey;
            if (array_key_exists($propname,$defaultParams)) {
                $newParams[$propname] = $params[$propname];
            }
        }
        foreach ($func->getProperties() as $p) {
            $propname = $p->name;
            if (array_key_exists($propname,$params)) {
                $newParams[$propname] = $params[$propname];
            }
        }

        return $newParams;
    }

    public function makeHeaderCols($params) {
        global $router;

        if (!empty($this->columns) && is_array($this->columns)) {
            $this->header_columns = '';

            
            if (!expTheme::inAction()) {
                unset($params['section']);
                if (empty($params['controller'])) $params['controller'] = $this->controller;
                if (empty($params['action'])) $params['action'] = $this->action;
            }


            if (isset($params['order'])) {
                $current = $params['order'];
                unset($params['order']);
            } else {
                $current = $this->order;
            }

            
            foreach ($this->columns as $colname=>$col) {
                
                $class = isset($this->class) ? $this->class : 'page';
                $params['dir'] = 'ASC';

                if ($col == $current) {
                    $class  = 'current '.strtolower($this->order_direction);
                    $params['dir'] = $this->order_direction == 'ASC' ? 'DESC' : 'ASC';
                }

                $params['order'] = $col;

                $this->header_columns .= '<th class="'.$class.'">';
                

                if (empty($col)) {
                    $this->header_columns .= '<span>'.$colname.'</span>';
                    $this->columns[$colname] = ' ';
                } else if($colname=="actupon") {
                    $this->header_columns .= '<input type=checkbox name=selall id=selall value=1 class="select-all"/>';



















                    $js = "
                    $('
                        $('input[name=\"act-upon[]\"]').prop('checked', this.checked);
                    });
                    ";

                    expJavascript::pushToFoot(array(
                        "unique"=>'select-all',

                        "jquery"=>1,
                        "content"=>$js,

                     ));

                } else {
					unset($params['page']);  
                    if ($col == 'no-sort') {
                        $this->header_columns .= $colname;
                    } else {
                        $this->header_columns .= '<a href="'.$router->makeLink($params, false, false, true).'" alt="sort by '.$colname.'" rel="nofollow">'.$colname.'</a>';
                    }
                }

                $this->header_columns .= '</th>';
            }
        }
    }

    
    private function runCallback() {
        foreach ($this->records as &$record) {
            if (isset($record->ref_type)) {
                $refType = $record->ref_type;
                if (class_exists($record->ref_type)) {
                    $type = new $refType();
                    $classinfo = new ReflectionClass($type);
                    if ($classinfo->hasMethod('paginationCallback')) {
                        $item = new $type($record->original_id);
                        $item->paginationCallback($record);
                    }
                }
            }
        }
    }

	public function makeSortDropdown($params) {
		global $router;

		if (!empty($this->columns) && is_array($this->columns)) {
			$this->sort_dropdown = array();

			
			if (!expTheme::inAction()) {
				unset($params['section']);
				if (empty($params['controller'])) $params['controller'] = $this->controller;
				if (empty($params['action'])) $params['action'] = $this->action;
			}

			

			
           
            $defaultParams['controller'] = $params['controller'];
            $defaultParams['action'] = $params['action'];
            if (isset($params['title']))
                $defaultParams['title'] = $params['title'];
            if (isset($params['page']))
                $defaultParams['page'] = $params['page'];

            $this->sort_dropdown[$router->makeLink($defaultParams, false, false, true)] = "Default";
			foreach ($this->columns as $colname=>$col) {
				
				

				
				$params['order'] = $col;

				if (!empty($col)) {
                    if ($colname == 'Price') {
                        $params['dir'] = 'ASC';
                        $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . " - Lowest to Highest";
                        $params['dir'] = 'DESC';
                        $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . " - Highest to Lowest";
                    } else {
                        $params['dir'] = 'ASC';
                        $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . " - A-Z";
                        $params['dir'] = 'DESC';
                        $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . " - Z-A";
                    }
				}
			}
		}
	}

    
    public function asc($a,$b) {
        $col = $this->order;
        if (is_object($a)) {
            return ($a->$col < $b->$col ? -1 : 1);
        } elseif (is_array($a)) {
            return ($a[$col] < $b[$col] ? -1 : 1);
        } else {
            return ($a < $b ? -1 : 1);
        }
    }

    
    public function desc($a,$b) {
        $col = $this->order;
        if (is_object($a)) {
            return ($a->$col > $b->$col ? -1 : 1);
        } elseif (is_array($a)) {
            return ($a[$col] > $b[$col] ? -1 : 1);
        } else {
            return ($a > $b ? -1 : 1);
        }
    }
}

?>