<?php



class TableAccess
{
    
    protected $additionalTables = array();
    
    protected $tableName;
    
    protected $columnPrefix;
    
    protected $keyColumnName;
    
    protected $db;

    
    protected $newRecord;
    
    protected $columnsValueChanged;
    
    protected $dbColumns = array();
    
    protected $columnsInfos = array();

    
    public function __construct(Database $database, $tableName, $columnPrefix, $id = '')
    {
        $this->db          =& $database;
        $this->tableName    = $tableName;
        $this->columnPrefix = $columnPrefix;

        
        if(!is_array($this->additionalTables))
        {
            $this->additionalTables = array();
        }

        
        if ($id > 0)
        {
            $this->readDataById($id);
        }
        else
        {
            $this->clear();
        }
    }

    
    public function __wakeup()
    {
        global $gDb;

        if ($gDb instanceof Database)
        {
            $this->db = $gDb;
        }
    }

    
    public function clear()
    {
        $this->newRecord = true;
        $this->columnsValueChanged = false;

        if (count($this->columnsInfos) > 0)
        {
            
            
            foreach ($this->dbColumns as $fieldName => &$fieldValue)
            {
                $fieldValue = ''; 
                $this->columnsInfos[$fieldName]['changed'] = false;
            }
            unset($fieldValue);
        }
        else
        {
            
            $tableColumnsProperties = $this->db->getTableColumnsProperties($this->tableName);

            foreach ($tableColumnsProperties as $columnName => $property)
            {
                $this->dbColumns[$columnName] = '';
                $this->columnsInfos[$columnName]['changed'] = false;
                $this->columnsInfos[$columnName]['type']    = $property['type'];
                $this->columnsInfos[$columnName]['null']    = $property['null'];
                $this->columnsInfos[$columnName]['key']     = $property['key'];
                $this->columnsInfos[$columnName]['serial']  = $property['serial'];

                if ($property['serial'])
                {
                    $this->keyColumnName = $columnName;
                }
            }
        }
    }

    
    protected function connectAdditionalTable($table, $columnNameAdditionalTable, $columnNameClassTable)
    {
        $this->additionalTables[] = array(
            'table'                     => $table,
            'columnNameAdditionalTable' => $columnNameAdditionalTable,
            'columnNameClassTable'      => $columnNameClassTable
        );
    }

    
    public function countAllRecords()
    {
        $sql = 'SELECT COUNT(*) AS count FROM '.$this->tableName;
        $countStatement = $this->db->queryPrepared($sql);

        return (int) $countStatement->fetchColumn();
    }

    
    public function delete()
    {
        if (array_key_exists($this->keyColumnName, $this->dbColumns) && $this->dbColumns[$this->keyColumnName] !== '')
        {
            $sql = 'DELETE FROM '.$this->tableName.'
                     WHERE '.$this->keyColumnName.' = ? -- $this->dbColumns[$this->keyColumnName]';
            $this->db->queryPrepared($sql, array($this->dbColumns[$this->keyColumnName]));
        }

        $this->clear();
        return true;
    }

    
    public function getValue($columnName, $format = '')
    {
        global $gSettingsManager;

        $columnValue = '';

        if (array_key_exists($columnName, $this->dbColumns))
        {
            
            if ($this->keyColumnName === $columnName && empty($this->dbColumns[$columnName]))
            {
                $columnValue = 0;
            }
            else
            {
                $columnValue = $this->dbColumns[$columnName];
            }
        }

        if (array_key_exists((string) $columnName, $this->columnsInfos) && array_key_exists('type', $this->columnsInfos[$columnName]))
        {
            switch ($this->columnsInfos[$columnName]['type'])
            {
                
                case 'char':
                case 'varchar':
                case 'text':
                    if ($format !== 'database')
                    {
                        
                        $columnValue = htmlspecialchars($columnValue, ENT_QUOTES);
                    }
                    break;

                
                case 'bytea':
                    
                    $columnValue = pack('H*', pack('H*', substr($columnValue, 2)));
                    break;

                case 'timestamp':
                case 'date':
                case 'time':
                    if ($columnValue !== '' && $columnValue !== null)
                    {
                        if ($format === '' && isset($gSettingsManager))
                        {
                            if (admStrContains($this->columnsInfos[$columnName]['type'], 'timestamp'))
                            {
                                $format = $gSettingsManager->getString('system_date') . ' ' . $gSettingsManager->getString('system_time');
                            }
                            elseif (admStrContains($this->columnsInfos[$columnName]['type'], 'date'))
                            {
                                $format = $gSettingsManager->getString('system_date');
                            }
                            else
                            {
                                $format = $gSettingsManager->getString('system_time');
                            }
                        }

                        
                        try
                        {
                            $datetime = new \DateTime($columnValue);
                            $columnValue = $datetime->format($format);
                        }
                        catch (Exception $e) {}
                    }
                    break;
            }
        }

        return $columnValue;
    }

    
    public function hasColumnsValueChanged()
    {
        return $this->columnsValueChanged;
    }

    
    public function isNewRecord()
    {
        return $this->newRecord;
    }

    
    protected function readData($sqlWhereCondition, array $queryParams = array())
    {
        $sqlAdditionalTables = '';

        
        if (count($this->additionalTables) > 0)
        {
            foreach ($this->additionalTables as $arrAdditionalTable)
            {
                $sqlAdditionalTables .= ', '.$arrAdditionalTable['table'];
                $sqlWhereCondition   .= ' AND '.$arrAdditionalTable['columnNameAdditionalTable'].' = '.$arrAdditionalTable['columnNameClassTable'].' ';
            }
        }

        
        if (admStrStartsWith(strtoupper(ltrim($sqlWhereCondition)), 'AND'))
        {
            $sqlWhereCondition = substr($sqlWhereCondition, 4);
        }

        if ($sqlWhereCondition !== '')
        {
            $sql = 'SELECT *
                      FROM '.$this->tableName.'
                           '.$sqlAdditionalTables.'
                     WHERE '.$sqlWhereCondition;
            $readDataStatement = $this->db->queryPrepared($sql, $queryParams); 

            if ($readDataStatement->rowCount() === 1)
            {
                $row = $readDataStatement->fetch();
                $this->newRecord = false;

                
                foreach ($row as $key => $value)
                {
                    if ($value === null)
                    {
                        $this->dbColumns[$key] = ''; 
                    }
                    else
                    {
                        $this->dbColumns[$key] = $value;
                    }
                }

                return true;
            }

            $this->clear();
        }

        return false;
    }

    
    public function readDataById($id)
    {
        
        $this->clear();

        
        if ($id > 0)
        {
            
            return $this->readData(' AND ' . $this->keyColumnName . ' = ? ', array($id));
        }

        return false;
    }

    
    public function readDataByColumns(array $columnArray)
    {
        
        $this->clear();

        if (count($columnArray) === 0)
        {
            return false;
        }

        $sqlWhereCondition = '';

        
        foreach ($columnArray as $columnName => $columnValue)
        {
            $sqlWhereCondition .= ' AND ' . $columnName . ' = \'' . $columnValue . '\' ';
        }

        
        $returnCode = $this->readData($sqlWhereCondition);

        
        if (!$returnCode)
        {
            foreach ($columnArray as $columnName => $columnValue)
            {
                $this->setValue($columnName, $columnValue);
            }
        }

        return $returnCode;
    }

    
    public function save($updateFingerPrint = true)
    {
        global $gCurrentUser;

        if (!$this->columnsValueChanged && $this->dbColumns[$this->keyColumnName] !== '')
        {
            return false;
        }

        if ($updateFingerPrint && is_object($gCurrentUser) && $gCurrentUser->getValue('usr_id') > 0)
        {
            
            
            if ($this->newRecord && array_key_exists($this->columnPrefix . '_usr_id_create', $this->dbColumns))
            {
                $this->setValue($this->columnPrefix . '_timestamp_create', DATETIME_NOW);
                $this->setValue($this->columnPrefix . '_usr_id_create', $gCurrentUser->getValue('usr_id'));
            }
            elseif (array_key_exists($this->columnPrefix . '_usr_id_change', $this->dbColumns))
            {
                
                if ((int) $gCurrentUser->getValue('usr_id') !== (int) $this->getValue($this->columnPrefix . '_usr_id_create')
                || time() > (strtotime($this->getValue($this->columnPrefix . '_timestamp_create')) + 900))
                {
                    $this->setValue($this->columnPrefix . '_timestamp_change', DATETIME_NOW);
                    $this->setValue($this->columnPrefix . '_usr_id_change', $gCurrentUser->getValue('usr_id'));
                }
            }
        }

        
        $sqlFieldArray = array();
        $sqlSetArray = array();
        $queryParams = array();

        
        foreach ($this->dbColumns as $key => $value)
        {
            
            
            if (admStrStartsWith($key, $this->columnPrefix . '_')
            && !$this->columnsInfos[$key]['serial'] && $this->columnsInfos[$key]['changed'])
            {
                if ($this->newRecord)
                {
                    if ($value !== '')
                    {
                        
                        $sqlFieldArray[] = $key;
                        $queryParams[] = $value;
                    }
                }
                else
                {
                    $sqlSetArray[] = $key . ' = ?';

                    
                    if ($value === '' || $value === null)
                    {
                        $queryParams[] = null;
                    }
                    else
                    {
                        $queryParams[] = $value;
                    }
                }

                $this->columnsInfos[$key]['changed'] = false;
            }
        }

        if ($this->newRecord)
        {
            
            $sql = 'INSERT INTO '.$this->tableName.'
                           ('.implode(',', $sqlFieldArray).')
                    VALUES ('.replaceValuesArrWithQM($sqlFieldArray).')';
            $this->db->queryPrepared($sql, $queryParams);

            $this->newRecord = false;
            if ($this->keyColumnName !== '')
            {
                $this->dbColumns[$this->keyColumnName] = $this->db->lastInsertId();
            }
        }
        else
        {
            $sql = 'UPDATE '.$this->tableName.'
                       SET '.implode(', ', $sqlSetArray).'
                     WHERE '.$this->keyColumnName.' = ? -- $this->dbColumns[$this->keyColumnName]';
            $queryParams[] = $this->dbColumns[$this->keyColumnName];
            $this->db->queryPrepared($sql, $queryParams);
        }

        $this->columnsValueChanged = false;

        return true;
    }

    
    public function setArray(array $fieldArray)
    {
        foreach ($fieldArray as $field => $value)
        {
            $this->dbColumns[$field] = $value;
            $this->columnsInfos[$field]['changed'] = false;
        }

        $this->newRecord = empty($this->dbColumns[$this->keyColumnName]);
    }

    
    public function setValue($columnName, $newValue, $checkValue = true)
    {
        if (!array_key_exists($columnName, $this->dbColumns))
        {
            return false;
        }

        
        if ($checkValue && $newValue !== '')
        {
            switch ($this->columnsInfos[$columnName]['type'])
            {
                
                case 'integer':
                case 'smallint':
                    if (!is_numeric($newValue))
                    {
                        $newValue = '';
                    }

                    
                    if ((int) $newValue === 0 &&
                        ($this->columnsInfos[$columnName]['key'] || $this->columnsInfos[$columnName]['null']))
                    {
                        $newValue = '';
                    }
                    break;

                
                case 'char':
                case 'varchar':
                case 'text':
                    $newValue = strStripTags($newValue);
                    break;

                
                case 'bytea':
                    
                    $newValue = bin2hex($newValue);
                    break;
            }
        }

        
        if ($this->keyColumnName === $columnName && (int) $newValue === 0)
        {
            $this->newRecord = true;

            
            foreach ($this->dbColumns as $column => $value)
            {
                if (strlen((string) $value) > 0)
                {
                    $this->columnsInfos[$column]['changed'] = true;
                }
            }
        }

        if (array_key_exists($columnName, $this->dbColumns))
        {
            
            if ($this->dbColumns[$columnName] != $newValue)
            {
                $this->dbColumns[$columnName] = $newValue;
                $this->columnsValueChanged = true;
                $this->columnsInfos[$columnName]['changed'] = true;
            }

            return true;
        }

        return false;
    }
}
