<?php

















class expDatabase {

	
	public static function connect($username,$password,$hostname,$database,$dbclass = '',$new=false,$log=null) {
		if (!defined('DB_ENGINE')) {
			$backends = array_keys(self::backends(1));
			if (count($backends)) {
				define('DB_ENGINE',$backends[0]);
			} else {
				define('DB_ENGINE','NOTSUPPORTED');
			}
		}
		(include_once(BASE.'framework/core/subsystems/database/'.DB_ENGINE.'.php')) or exit(gt('None of the installed Exponent Database Backends will work with this server\'s version of PHP.'));
		if ($dbclass == '' || $dbclass == null) $dbclass = DB_ENGINE;
		(include_once(BASE.'framework/core/subsystems/database/'.$dbclass.'.php')) or exit(gt('The specified database backend').'  ('.$dbclass.') '.gt('is not supported by Exponent'));
		$dbclass .= '_database';
		$newdb = new $dbclass($username,$password,$hostname,$database,$new,$log);
        if (!$newdb->tableExists('user')) {
            $newdb->havedb = false;
        }
		return $newdb;
	}

	
	public static function backends($valid_only = 1) {
		$options = array();
		$dh = opendir(BASE.'framework/core/subsystems/database');
		while (($file = readdir($dh)) !== false) {
			if (is_file(BASE.'framework/core/subsystems/database/'.$file) && is_readable(BASE.'framework/core/subsystems/database/'.$file) && substr($file,-9,9) == '.info.php') {
				$info = include(BASE.'framework/core/subsystems/database/'.$file);
				if ($info['is_valid'] == 1 || !$valid_only) {
					$options[substr($file,0,-9)] = $info['name'];
				}
			}
		}
		return $options;
	}

    public static function fix_table_names() {
        global $db;

        
        $tablenames = array (
            'content_expcats'=>'content_expCats',
            'content_expcomments'=>'content_expComments',
            'content_expdefinablefields'=>'content_expDefinableFields',
            'content_expdefinablefields_value'=>'content_expDefinableFields_value',
            'content_expfiles'=>'content_expFiles',
            'content_expratings'=>'content_expRatings',
            'content_expsimplenote'=>'content_expSimpleNote',
            'content_exptags'=>'content_expTags',
            'expcats'=>'expCats',
            'expcomments'=>'expComments',
            'expdefinablefields'=>'expDefinableFields',
            'expealerts'=>'expeAlerts',
            'expealerts_temp'=>'expeAlerts_temp',
            'expfiles'=>'expFiles',
            'expratings'=>'expRatings',
            'exprss'=>'expRss',
            'expsimplenote'=>'expSimpleNote',
            'exptags'=>'expTags',
			'bing_product_types_storecategories'=>'bing_product_types_storeCategories',
			'google_product_types_storecategories'=>'google_product_types_storeCategories',
			'nextag_product_types_storecategories'=>'nextag_product_types_storeCategories',
			'pricegrabber_product_types_storecategories'=>'pricegrabber_product_types_storeCategories',
			'shopping_product_types_storecategories'=>'shopping_product_types_storeCategories',
			'shopzilla_product_types_storecategories'=>'shopzilla_product_types_storeCategories',
			'crosssellitem_product'=>'crosssellItem_product',
			'product_storecategories'=>'product_storeCategories',
			'storecategories'=>'storeCategories',
        );

        $renamed = array();
        foreach ($tablenames as $oldtablename=>$newtablename) {
            if (!$db->tableExists($newtablename)) {
                $db->sql('RENAME TABLE '.$db->prefix.$oldtablename.' TO '.$db->prefix.$newtablename);
                $renamed[] = $newtablename;
            }
        }
        return $renamed;
    }

    public static function install_dbtables($aggressive=false, $workflow=ENABLE_WORKFLOW) {
   	    global $db;

   		expSession::clearAllUsersSessionCache();
   		$tables = array();

   		
   		$coredefs = BASE.'framework/core/definitions';
   		if (is_readable($coredefs)) {
   			$dh = opendir($coredefs);
   			while (($file = readdir($dh)) !== false) {
   				if (is_readable("$coredefs/$file") && is_file("$coredefs/$file") && substr($file,-4,4) == ".php" && substr($file,-9,9) != ".info.php") {
   					$tablename = substr($file,0,-4);
   					$dd = include("$coredefs/$file");
   					$info = null;
   					if (is_readable("$coredefs/$tablename.info.php")) $info = include("$coredefs/$tablename.info.php");
   					if (!$db->tableExists($tablename)) {
   						foreach ($db->createTable($tablename, $dd, $info) as $key=>$status) {
   							$tables[$key] = $status;
   						}
   					} else {
   						foreach ($db->alterTable($tablename, $dd, $info, $aggressive) as $key=>$status) {

   							if ($status == TABLE_ALTER_FAILED){
   								$tables[$key] = $status;
   							} else {
   								$tables[$key] = ($status == TABLE_ALTER_NOT_NEEDED ? DATABASE_TABLE_EXISTED : DATABASE_TABLE_ALTERED);
   							}

   						}
   					}
   				}
   			}
   		}

   		
   		$moddefs = array(
   			BASE.'themes/'.DISPLAY_THEME.'/modules',
   			BASE."framework/modules",
   			);
        $models = expModules::initializeModels();
   		foreach ($moddefs as $moddef) {
   			if (is_readable($moddef)) {
   				$dh = opendir($moddef);
   				while (($file = readdir($dh)) !== false) {
   					if (is_dir($moddef.'/'.$file) && ($file != '..' && $file != '.')) {
   						$dirpath = $moddef.'/'.$file.'/definitions';
   						if (file_exists($dirpath)) {
   							$def_dir = opendir($dirpath);
   							while (($def = readdir($def_dir)) !== false) {
   	
   								if (is_readable("$dirpath/$def") && is_file("$dirpath/$def") && substr($def,-4,4) == ".php" && substr($def,-9,9) != ".info.php") {
   									$tablename = substr($def,0,-4);
   									$dd = include("$dirpath/$def");
   									$info = null;

                                    $rev_aggressive = $aggressive;
                                    
                                    if (!empty($models[substr($def,0,-4)])) {
                                        $modelname = substr($def,0,-4);
                                        $model = new $modelname();
                                        if ($model->supports_revisions && $workflow) {
                                            $dd['revision_id'] = array(
                                                DB_FIELD_TYPE=>DB_DEF_INTEGER,
                                                DB_PRIMARY=>true,
                                                DB_DEFAULT=>1,
                                            );
                                            $dd['approved'] = array(
                                                DB_FIELD_TYPE=>DB_DEF_BOOLEAN
                                            );
                                            $rev_aggressive = true;
                                        }
                                    }
   									if (is_readable("$dirpath/$tablename.info.php")) $info = include("$dirpath/$tablename.info.php");
   									if (!$db->tableExists($tablename)) {
   										foreach ($db->createTable($tablename, $dd, $info) as $key=>$status) {
   											$tables[$key] = $status;
   										}
   									} else {
   										foreach ($db->alterTable($tablename, $dd, $info, $rev_aggressive) as $key=>$status) {

   											if ($status == TABLE_ALTER_FAILED){
   												$tables[$key] = $status;
   											} else {
   												$tables[$key] = ($status == TABLE_ALTER_NOT_NEEDED ? DATABASE_TABLE_EXISTED : DATABASE_TABLE_ALTERED);
   											}

   										}
   									}
   								}
   							}
   						}
   					}
   				}
   			}
   		}
   		return $tables;
   	}
}



abstract class database {

	
	var $connection = null;
	
	var $havedb = false;
	
	var $prefix = "";

	

	
	abstract function __construct($username, $password, $hostname, $database, $new=false);

	   
	abstract function createTable($tablename, $datadef, $info);

	
	function fieldSQL($name, $def) {
	   $sql = "`$name`";
	   if (!isset($def[DB_FIELD_TYPE])) {
	       return false;
	   }
	   $type = $def[DB_FIELD_TYPE];
	   if ($type == DB_DEF_ID) {
	       $sql .= " INT(11)";
	   } else if ($type == DB_DEF_BOOLEAN) {
	       $sql .= " TINYINT(1)";
	   } else if ($type == DB_DEF_TIMESTAMP) {
	       $sql .= " INT(14)";
       } else if ($type == DB_DEF_DATETIME) {
   	       $sql .= " DATETIME";
	   } else if ($type == DB_DEF_INTEGER) {
	       $sql .= " INT(8)";
	   } else if ($type == DB_DEF_STRING) {
	       if (isset($def[DB_FIELD_LEN]) && is_int($def[DB_FIELD_LEN])) {
	           $len = $def[DB_FIELD_LEN];
	           if ($len < 256)
	               $sql .= " VARCHAR($len)";
	           else if ($len < 65536)
	               $sql .= " TEXT";
	           else if ($len < 16777216)
	               $sql .= " MEDIUMTEXT";
	           else
	               $sql .= "LONGTEXT";
	       } else {  
               $sql .= " TEXT";
	       }
	   } else if ($type == DB_DEF_DECIMAL) {
	       $sql .= " DOUBLE";
	   } else {
	       return false; 
	   }
	   $sql .= " NOT NULL";
	   if (isset($def[DB_DEFAULT]))
	       $sql .= " DEFAULT '" . $def[DB_DEFAULT] . "'";

	   if (isset($def[DB_INCREMENT]) && $def[DB_INCREMENT])
	       $sql .= " AUTO_INCREMENT";
	   return $sql;
	}

	
	function switchValues($table, $field, $a, $b, $additional_where = null) {
	   if ($additional_where == null) {
	       $additional_where = '1';
	   }
       $a = intval($a);
       $b = intval($b);
	   $object_a = $this->selectObject($table, "$field='$a' AND $additional_where");
	   $object_b = $this->selectObject($table, "$field='$b' AND $additional_where");

	   if ($object_a && $object_b) {
	       $tmp = $object_a->$field;
	       $object_a->$field = $object_b->$field;
	       $object_b->$field = $tmp;

	       $this->updateObject($object_a, $table);
	       $this->updateObject($object_b, $table);

	       return true;
	   } else {
	       return false;
	   }
	}

	
	function isValid() {
	   return ($this->connection != null && $this->havedb);
	}

	
	function testPrivileges() {

	   $status = array();

	   $tablename = "___testertable" . uniqid("");
	   $dd = array(
	       "id" => array(
	           DB_FIELD_TYPE => DB_DEF_ID,
	           DB_PRIMARY => true,
	           DB_INCREMENT => true),
	       "name" => array(
	           DB_FIELD_TYPE => DB_DEF_STRING,
	           DB_FIELD_LEN => 100)
	   );

	   $this->createTable($tablename, $dd, array());
	   if (!$this->tableExists($tablename)) {
	       $status["CREATE TABLE"] = false;
	       return $status;
	   } else
	       $status["CREATE TABLE"] = true;

	   $o = new stdClass();
	   $o->name = "Testing Name";
	   $insert_id = $this->insertObject($o, $tablename);
	   if ($insert_id == 0) {
	       $status["INSERT"] = false;
	       return $status;
	   } else
	       $status["INSERT"] = true;

	   $o = $this->selectObject($tablename, "id=" . $insert_id);
	   if ($o == null || $o->name != "Testing Name") {
	       $status["SELECT"] = false;
	       return $status;
	   } else
	       $status["SELECT"] = true;

	   $o->name = "Testing 2";
	   if (!$this->updateObject($o, $tablename)) {
	       $status["UPDATE"] = false;
	       return $status;
	   } else
	       $status["UPDATE"] = true;

	   $this->delete($tablename, "id=" . $insert_id);
	   $o = $this->selectObject($tablename, "id=" . $insert_id);
	   if ($o != null) {
	       $status["DELETE"] = false;
	       return $status;
	   } else
	       $status["DELETE"] = true;

	   $dd["thirdcol"] = array(
	       DB_FIELD_TYPE => DB_DEF_TIMESTAMP);

	   $this->alterTable($tablename, $dd, array());
	   $o = new stdClass();
	   $o->name = "Alter Test";
	   $o->thirdcol = "Third Column";
	   if (!$this->insertObject($o, $tablename)) {
	       $status["ALTER TABLE"] = false;
	       return $status;
	   } else
	       $status["ALTER TABLE"] = true;

	   $this->dropTable($tablename);
	   if ($this->tableExists($tablename)) {
	       $status["DROP TABLE"] = false;
	       return $status;
	   } else
	       $status["DROP TABLE"] = true;

	   foreach ($this->getTables() as $t) {
	       if (substr($t, 0, 14 + strlen($this->prefix)) == $this->prefix . "___testertable")
	           $this->dropTable($t);
	   }

	   return $status;
	}

	
	abstract function alterTable($tablename, $newdatadef, $info, $aggressive = false);

	
	abstract function dropTable($table);

	
	abstract function sql($sql, $escape = true);

	
	function toggle($table, $col, $where=null) {
	   $obj = $this->selectObject($table, $where);
	   $obj->$col = ($obj->$col == 0) ? 1 : 0;
	   $this->updateObject($obj, $table);
	}

	
	abstract function columnUpdate($table, $col, $val, $where=1);

	
	function setUniqueFlag($object, $table, $col, $where=1) {
	   if (isset($object->id)) {
	       $this->sql("UPDATE " . $this->prefix . $table . " SET " . $col . "=0 WHERE " . $where);
	       $this->sql("UPDATE " . $this->prefix . $table . " SET " . $col . "=1 WHERE id=" . $object->id);
	       return true;
	   }
	   return false;
	}

	
	abstract function selectObjects($table, $where = null, $orderby = null);

	
	function selectSearch($terms, $where = null) {  

	}

	
	function selectAndJoinObjects($colsA=null, $colsB=null, $tableA, $tableB, $keyA, $keyB=null, $where = null, $orderby = null) {  

	}

	
	abstract function selectObjectBySql($sql);

	
	abstract function selectObjectsBySql($sql);

	
	abstract function selectColumn($table, $col, $where = null, $orderby = null, $distinct=false);

	
	function selectSum($table, $col, $where = null) {  

	}

	
	abstract function selectDropdown($table, $col, $where = null, $orderby = null);

	
	abstract function selectValue($table, $col, $where=null);

	
	function selectValueBySql($sql) {  

	}

	
	function selectObjectsInArray($table, $array=array(), $orderby=null) {
	   $where = 'id IN ' . implode(",", $array);
	   $res = $this->selectObjects($table, $where, $orderby);
	   return $res;
	}

	
	abstract function selectObjectsIndexedArray($table, $where = null, $orderby = null);

    
	abstract function countObjects($table, $where = null, $is_revisioned=false, $needs_approval=false);

	
	abstract function countObjectsBySql($sql);

	
	function queryRows($sql) { 

	}

	
	abstract function selectObject($table, $where);

	
	abstract function lockTable($table,$lockType="WRITE");

	
	abstract function unlockTables();

	
	abstract function insertObject($object, $table);

	
	abstract function delete($table, $where = null);

	
	abstract function updateObject($object, $table, $where=null, $identifier='id', $is_revisioned=false);

    
    public function trim_revisions($table, $id, $num, $workflow=ENABLE_WORKFLOW) {
        if ($workflow && $num) {
            $max_revision = $this->max($table, 'revision_id', null, 'id='.$id);
            $max_approved = $this->max($table, 'revision_id', null, 'id='.$id.' AND approved=1');
            $min_revision = $this->min($table, 'revision_id', null, 'id='.$id);
            if ($max_revision == null) {
                return;
            }
            if (($max_revision - $num) > $max_approved) {
                $approved_max = ' AND revision_id < ' . $max_approved;  
            } else {
                $approved_max = '';
            }
            if ($max_revision - $min_revision >= $num) {
                $this->delete($table, 'id=' . $id . ' AND revision_id <= ' . ($max_revision - $num) . $approved_max);
            }
            if (!empty($approved_max)) {
                
                $this->delete($table, 'id=' . $id . ' AND revision_id <= ' . ($max_revision - $num + 1) . ' AND revision_id > ' . $max_approved);
            }
        }
    }

	
	abstract function max($table, $attribute, $groupfields = null, $where = null);

	
	abstract function min($table, $attribute, $groupfields = null, $where = null);

	
	abstract function increment($table, $field, $step, $where = null);

	

	function decrement($table, $field, $step, $where = null) {
	   $this->increment($table, $field, -1 * $step, $where);
	}

	
	abstract function tableExists($table);

	
	abstract function getTables($prefixed_only=true);

	
	abstract function optimize($table);

	
	function tableInfo($table) {  

	}

	
	function tableIsEmpty($table) {
	   return ($this->countObjects($table) == 0);
	}

	
	abstract function databaseInfo();

	
	function translateTableStatus($status) {
	   $data = new stdClass();
	   $data->rows = $status->Rows;
	   $data->average_row_lenth = $status->Avg_row_length;
	   $data->data_overhead = $status->Data_free;
	   $data->data_total = $status->Data_length;

	   return $data;
	}

	
	function describeTable($table) { 

	}

	
	abstract function getDataDefinition($table);

	
	function getDDFieldType($fieldObj) {
	   $type = strtolower($fieldObj->Type);

	   if ($type == "int(11)")
	       return DB_DEF_ID;
	   if ($type == "int(8)")
	       return DB_DEF_INTEGER;
	   elseif ($type == "tinyint(1)")
	       return DB_DEF_BOOLEAN;
	   elseif ($type == "int(14)")
	       return DB_DEF_TIMESTAMP;
       elseif ($type == "datetime")
  	       return DB_DEF_TIMESTAMP;
	   
           
	   elseif ($type == "double")
	       return DB_DEF_DECIMAL;
	   
	   elseif ($type == "text" || $type == "mediumtext" || $type == "longtext" || strpos($type, "varchar(") !== false) {
	       return DB_DEF_STRING;
	   } else {
           return DB_DEF_INTEGER;
       }
	}

	
	function getDDStringLen($fieldObj) {
	   $type = strtolower($fieldObj->Type);
	   if ($type == "text")
	       return 65535;
	   else if ($type == "mediumtext")
	       return 16777215;
	   else if ($type == "longtext")
	       return 16777216;
	   else if (strpos($type, "varchar(") !== false) {
	       return str_replace(array("varchar(", ")"), "", $type) + 0;
	   } else {
           return 256;
       }
	}

	
	function getDDKey($fieldObj) {
	   $key = strtolower($fieldObj->Key);
	   if ($key == "pri")
	       return DB_PRIMARY;
	   else if ($key == "uni") {
	       return DB_UNIQUE;
	   } else {
           return false;
       }
	}

	
	function getDDAutoIncrement($fieldObj) {
	   $auto = strtolower($fieldObj->Extra);
	   if ($auto == "auto_increment") {
	       return true;
	   } else {
           return false;
       }
	}

	
	function getDDIsNull($fieldObj) {
	   $null = strtolower($fieldObj->Null);
	   if ($null == "yes") {
	       return true;
	   } else {
           return false;
       }
	}

	
	function getDDDefault($fieldObj) {
		return strtolower($fieldObj->Default);
	}

	
	abstract function error();

	
	abstract function inError();

	
	abstract function escapeString($string);

    
   	function injectProof($string) {
   	    $quotes = substr_count("'", $string);
        if ($quotes % 2 != 0)
            $string = $this->escapeString($string);
        $dquotes = substr_count('"', $string);
        if ($dquotes % 2 != 0)
            $string = $this->escapeString($string);
        return $string;
    }

	
	function limit($num, $offset) {
	   return ' LIMIT ' . $offset . ',' . $num . ' ';
	}

	
	abstract function selectArrays($table, $where = null, $orderby = null);

	
	abstract function selectArraysBySql($sql);

    
	abstract function selectArray($table, $where = null, $orderby = null, $is_revisioned=false, $needs_approval=false);

    
	abstract function selectExpObjects($table, $where=null, $classname, $get_assoc=true, $get_attached=true, $except=array(), $cascade_except=false, $order=null, $limitsql=null, $is_revisioned=false, $needs_approval=false);

	
	function selectExpObjectsBySql($sql, $classname, $get_assoc=true, $get_attached=true) {  

	}

	
	function selectNestedTree($table) {
	   $sql = 'SELECT node.*, (COUNT(parent.sef_url) - 1) AS depth
		FROM `' . $this->prefix . $table . '` AS node,
		`' . $this->prefix . $table . '` AS parent
		WHERE node.lft BETWEEN parent.lft AND parent.rgt
		GROUP BY node.sef_url
		ORDER BY node.lft';
	   return $this->selectObjectsBySql($sql);
	}

	function selectFormattedNestedTree($table) {
		$sql = "SELECT CONCAT( REPEAT( '&
				FROM " .$this->prefix . $table. " as node, " .$this->prefix . $table. " as parent
				WHERE node.lft BETWEEN parent.lft and parent.rgt
				GROUP BY node.title, node.id
				ORDER BY node.lft";

		return $this->selectObjectsBySql($sql);
	}

	
	function adjustNestedTreeFrom($table, $start, $width) {
	   $table = $this->prefix . $table;
	   $this->sql('UPDATE `' . $table . '` SET rgt = rgt + ' . $width . ' WHERE rgt >=' . $start);
	   $this->sql('UPDATE `' . $table . '` SET lft = lft + ' . $width . ' WHERE lft >=' . $start);
	   
	   
	}

	
	function adjustNestedTreeBetween($table, $lft, $rgt, $width) {
	   $table = $this->prefix . $table;
	   $this->sql('UPDATE `' . $table . '` SET rgt = rgt + ' . $width . ' WHERE rgt BETWEEN ' . $lft . ' AND ' . $rgt);
	   $this->sql('UPDATE `' . $table . '` SET lft = lft + ' . $width . ' WHERE lft BETWEEN ' . $lft . ' AND ' . $rgt);
	   
	   
	}

	
	function selectNestedBranch($table, $node=null) {
	   if (empty($node))
	       return array();

	   $where = is_numeric($node) ? 'id=' . $node : 'title="' . $node . '"';

	   $sql = 'SELECT node.*,
	           (COUNT(parent.title) - (sub_tree.depth + 1)) AS depth
	           FROM `' . $this->prefix . $table . '` AS node,
	           `' . $this->prefix . $table . '` AS parent,
	           `' . $this->prefix . $table . '` AS sub_parent,
	                   (       SELECT node.*, (COUNT(parent.title) - 1) AS depth
	                           FROM `' . $this->prefix . $table . '` AS node,
	                           `' . $this->prefix . $table . '` AS parent
	                           WHERE node.lft BETWEEN parent.lft
	                           AND parent.rgt AND node.' . $where . '
	                           GROUP BY node.title
	                           ORDER BY node.lft )
	           AS sub_tree
	           WHERE node.lft BETWEEN parent.lft AND parent.rgt
	           AND node.lft BETWEEN sub_parent.lft AND sub_parent.rgt
	           AND sub_parent.title = sub_tree.title
	           GROUP BY node.title
	           ORDER BY node.lft;';

	   return $this->selectObjectsBySql($sql);
	}

	
	function deleteNestedNode($table, $lft, $rgt) {
	   $table = $this->prefix . $table;

	   $width = ($rgt - $lft) + 1;
	   $this->sql('DELETE FROM `' . $table . '` WHERE lft BETWEEN ' . $lft . ' AND ' . $rgt);
	   $this->sql('UPDATE `' . $table . '` SET rgt = rgt - ' . $width . ' WHERE rgt > ' . $rgt);
	   $this->sql('UPDATE `' . $table . '` SET lft = lft - ' . $width . ' WHERE lft > ' . $rgt);
	}

	
	function selectPathToNestedNode($table, $node=null) {
	   if (empty($node))
	       return array();

	   $where = is_numeric($node) ? 'id=' . $node : 'title="' . $node . '"';
	   $sql = 'SELECT parent.*
		FROM `' . $this->prefix . $table . '` AS node,
		`' . $this->prefix . $table . '` AS parent
		WHERE node.lft BETWEEN parent.lft AND parent.rgt
		AND node.' . $where . '
		ORDER BY parent.lft;';
	   return $this->selectObjectsBySql($sql);
	}

	
	function selectNestedNodeParent($table, $node=null) {
	   if (empty($node))
	       return array();

	   $where = is_numeric($node) ? 'id=' . $node : 'title="' . $node . '"';
	   $sql = 'SELECT parent.*
		FROM `' . $this->prefix . $table . '` AS node,
		`' . $this->prefix . $table . '` AS parent
		WHERE node.lft BETWEEN parent.lft AND parent.rgt
		AND node.' . $where . '
		ORDER BY parent.lft DESC
		LIMIT 1, 1;';
	   $parent_array = $this->selectObjectsBySql($sql);
	   return $parent_array[0];
	}

	
	function selectNestedNodeChildren($table, $node=null) {
	   if (empty($node))
	       return array();

	   $where = is_numeric($node) ? 'node.id=' . $node : 'node.title="' . $node . '"';
	   $sql = '
		SELECT node.*, (COUNT(parent.title) - (sub_tree.depth + 1)) AS depth
		FROM ' . $this->prefix . $table . ' AS node,
			' . $this->prefix . $table . ' AS parent,
			' . $this->prefix . $table . ' AS sub_parent,
			(
				SELECT node.*, (COUNT(parent.title) - 1) AS depth
				FROM ' . $this->prefix . $table . ' AS node,
				' . $this->prefix . $table . ' AS parent
				WHERE node.lft BETWEEN parent.lft AND parent.rgt
				AND ' . $where . '
				GROUP BY node.title
				ORDER BY node.lft
			)AS sub_tree
		WHERE node.lft BETWEEN parent.lft AND parent.rgt
			AND node.lft BETWEEN sub_parent.lft AND sub_parent.rgt
			AND sub_parent.title = sub_tree.title
		GROUP BY node.title
		HAVING depth = 1
		ORDER BY node.lft;';
	$children = $this->selectObjectsBySql($sql);
	   return $children;
	}

	
	abstract function getTextColumns($table);

}

?>