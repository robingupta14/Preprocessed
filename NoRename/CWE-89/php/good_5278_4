<?php



















class expTheme
{

    public static function initialize()
    {
        global $auto_dirs2;

        
		if (defined('OLD_THEME_COMPATIBLE') && OLD_THEME_COMPATIBLE)

        if (!defined('DISPLAY_THEME')) {
            
            define('DISPLAY_THEME', DISPLAY_THEME_REAL);
        }

        if (!defined('THEME_ABSOLUTE')) {
            
            define('THEME_ABSOLUTE', BASE . 'themes/' . DISPLAY_THEME . '/'); 
        }

        if (!defined('THEME_RELATIVE')) {
            
            define('THEME_RELATIVE', PATH_RELATIVE . 'themes/' . DISPLAY_THEME . '/');
        }
        if (!defined('THEME_STYLE')) {
            
            define('THEME_STYLE', THEME_STYLE_REAL);
        }
        if (THEME_STYLE != '' && file_exists(BASE . 'themes/' . DISPLAY_THEME . '/config_' . THEME_STYLE . '.php')) {
            @include_once(BASE . 'themes/' . DISPLAY_THEME . '/config_' . THEME_STYLE . '.php');
        } elseif (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/config.php')) {
            @include_once(BASE . 'themes/' . DISPLAY_THEME . '/config.php');
        }
        if (!defined('BTN_SIZE')) {
            define('BTN_SIZE', 'medium');
        } 
        if (!defined('BTN_COLOR')) {
            define('BTN_COLOR', 'black');
        } 
        if (!defined('SWATCH')) {
            define('SWATCH', "''");
        } 

        
        array_unshift($auto_dirs2, BASE . 'themes/' . DISPLAY_THEME . '/modules');
    }

    public static function head($config = array())
    {
        
        self::advertiseRSS();
    }

    public static function headerInfo($config)
    {
        global $sectionObj, $validateTheme, $head_config, $auto_dirs, $less_vars, $framework;

        $validateTheme['headerinfo'] = true;
        

        
        $head_config = $config;

        
        $framework = !empty($head_config['framework']) ? $head_config['framework'] : '';
        if (empty($framework)) {
            if (NEWUI) {
                $framework = 'newui';
            } else {
                $framework = 'yui';  
            }
        }
        expSession::set('framework', $framework);

        
        if (!empty($config['lessvars'])) {
            $less_vars = $config['lessvars'];
        } else {
            $less_vars = array();
        }

        
        if (isset($config['xhtml']) && $config['xhtml'] == true) {
            define('XHTML', 1);
            define('XHTML_CLOSING', "/"); 
        } else {
            define('XHTML', 0);
            define('XHTML_CLOSING', "");
        }

        
        if (!empty($config['css_primer']) || !empty($config['lessprimer']) || !empty($config['link']) || !empty($config['lesscss']) || !empty($config['normalize'])) {
            expCSS::pushToHead($config);
        };

        
        if (empty($config['css_primer']) && empty($config['lessprimer'])) {
            $head_config = array('css_primer' => true) + $head_config;
        }

        
        if (isset($config['css_core'])) {
            if (is_array($config['css_core'])) {
                $corecss = implode(",", $config['css_core']);
                expCSS::pushToHead(
                    array(
                        "corecss" => $corecss
                    )
                );
            }
        } else {
            $head_config['css_core'] = false;
        };

        
        if (!empty($config['css_links']) || !isset($config['css_links'])) {
            $head_config['css_links'] = true;
        }

        
        if (!empty($config['css_theme']) || !isset($config['css_theme'])) {
            $head_config['css_theme'] = true;
        }

        if (empty($sectionObj)) {
            return false;
        }

        
        if (empty($head_config['framework'])) {
            $head_config['framework'] = '';
        }
        if (bs() || $framework == 'jquery') {
            array_unshift(
                $auto_dirs,
                BASE . 'framework/core/forms/controls/jquery'
            );
        }
        if (bs(true)) {
            array_unshift(
                $auto_dirs,
                BASE . 'framework/core/forms/controls/bootstrap'
            );
        }
        if (bs3(true)) {
            array_unshift(
                $auto_dirs,
                BASE . 'framework/core/forms/controls/bootstrap3'
            );
        }
        if (newui()) {
            expCSS::pushToHead(array(
                "lessprimer"=>"external/bootstrap3/less/newui.less",




            ));
            if (!defined("BTN_SIZE")) define("BTN_SIZE", 'small');
            array_unshift($auto_dirs, BASE . 'framework/core/forms/controls/newui');
        }
        array_unshift($auto_dirs, BASE . 'themes/' . DISPLAY_THEME . '/controls');







        

        $metainfo = self::pageMetaInfo();

        
        if (!isset($config['meta']['content_type'])) {
            $config['meta']['content_type'] = true;
        }
        if (!isset($config['meta']['content_language'])) {
            $config['meta']['content_language'] = true;
        }
        if (!isset($config['meta']['generator'])) {
            $config['meta']['generator'] = true;
        }
        if (!isset($config['meta']['keywords'])) {
            $config['meta']['keywords'] = true;
        }
        if (!isset($config['meta']['description'])) {
            $config['meta']['description'] = true;
        }
        if (!isset($config['meta']['canonical'])) {
            $config['meta']['canonical'] = true;
        }
        if (!isset($config['meta']['rich'])) {
            $config['meta']['rich'] = true;
        }
        if (!isset($config['meta']['fb'])) {
            $config['meta']['fb'] = true;
        }
        if (!isset($config['meta']['tw'])) {
            $config['meta']['tw'] = true;
        }
        if (!isset($config['meta']['viewport'])) {
            $config['meta']['viewport'] = true;
        }
        if (!isset($config['meta']['ie_compat'])) {
            $config['meta']['ie_compat'] = true;
        }

        $str = '<title>' . $metainfo['title'] . "</title>\n";
        if ($config['meta']['content_type']) {
            $str .= "\t" . '<meta http-equiv="Content-Type" content="text/html; charset=' . LANG_CHARSET . '" ' . XHTML_CLOSING . '>' . "\n";
        }
        $locale = strtolower(str_replace('_', '-', LOCALE));
        if ($config['meta']['content_language']) {
            $str .= "\t" . '<meta content="' . $locale . '" http-equiv="Content-Language" ' . XHTML_CLOSING . '>' . "\n";
        }
        if ($config['meta']['generator']) {
            $str .= "\t" . '<meta name="Generator" content="Exponent Content Management System - v' . expVersion::getVersion(
                    true
                ) . self::getThemeDetails() . '" ' . XHTML_CLOSING . '>' . "\n";
        }
        if ($config['meta']['keywords']) {
            $str .= "\t" . '<meta name="Keywords" content="' . $metainfo['keywords'] . '" ' . XHTML_CLOSING . '>' . "\n";
        }
        if ($config['meta']['description']) {
            $str .= "\t" . '<meta name="Description" content="' . $metainfo['description'] . '" ' . XHTML_CLOSING . '>' . "\n";
        }
        if ($config['meta']['canonical'] && !empty($metainfo['canonical'])) {
            $str .= "\t" . '<link rel="canonical" href="' . $metainfo['canonical'] . '" ' . XHTML_CLOSING . '>' . "\n";
        }
        if ($config['meta']['rich'] && !empty($metainfo['rich'])) {
            $str .= "\t" . $metainfo['rich'] . "\n";
        }
        if ($config['meta']['fb'] && !empty($metainfo['fb'])) {
            foreach ($metainfo['fb'] as $key => $value) {
                if (!empty($value)) {
                    $str .= "\t" . '<meta property="og:' . $key . '" content="' . $value . '" ' . XHTML_CLOSING . '>' . "\n";
                }
            }
        }
        if ($config['meta']['tw'] && !empty($metainfo['tw'])) {
            foreach ($metainfo['tw'] as $key => $value) {
                if (!empty($value)) {
                    $str .= "\t" . '<meta name="twitter:' . $key . '" content="' . $value . '" ' . XHTML_CLOSING . '>' . "\n";
                }
            }
        }

        if ($metainfo['noindex'] || $metainfo['nofollow']) {
            $str .= "\t" . '<meta name="robots" content="' . (!empty($metainfo['noindex']) ? 'noindex' : '') . ' ' . ($metainfo['nofollow'] ? 'nofollow' : '') . '" ' . XHTML_CLOSING . '>' . "\n";
        }

        if (empty($config['viewport'])) {
            $viewport = 'width=device-width, user-scalable=yes';
        } else {
            if (!empty($config['viewport']['width'])) {
                $viewport = 'width=' . $config['viewport']['width'];
            } else {
                $viewport = 'width=device-width';
            }
            if (!empty($config['viewport']['height'])) {
                $viewport .= ', height=' . $config['viewport']['height'];
            }
            if (!empty($config['viewport']['initial_scale'])) {
                $viewport .= ' initial-scale=' . $config['viewport']['initial_scale'];


            }
            if (!empty($config['viewport']['minimum_scale'])) {
                $viewport .= ', minimum-scale=' . $config['viewport']['minimum_scale'];
            }
            if (!empty($config['viewport']['maximum_scale'])) {
                $viewport .= ', maximum-scale=' . $config['viewport']['maximum_scale'];
            }
            if (!empty($config['viewport']['user_scalable'])) {
                $viewport .= ', user-scalable=' . ($config['viewport']['user_scalable'] ? "yes" : "no");
            } else {
                $viewport .= ', user-scalable=yes';
            }
        }
        if ($config['meta']['viewport']) {
            $str .= "\t" . '<meta name="viewport" content="' . $viewport . '" ' . XHTML_CLOSING . '>' . "\n";
        }

        
        if (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/favicon.png')) {
            $str .= "\t" . '<link rel="icon" href="' . URL_FULL . 'themes/' . DISPLAY_THEME . '/favicon.png" type="image/png" ' . XHTML_CLOSING . '>' . "\n";
        } elseif (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/favicon.ico')) {
            $str .= "\t" . '<link rel="icon" href="' . URL_FULL . 'themes/' . DISPLAY_THEME . '/favicon.ico" type="image/x-icon" ' . XHTML_CLOSING . '>' . "\n";
        }
        
        if (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/apple-touch-icon.png')) {
            $str .= "\t" . '<link rel="apple-touch-icon" href="' . URL_FULL . 'themes/' . DISPLAY_THEME . '/apple-touch-icon.png" ' . XHTML_CLOSING . '>' . "\n";
        }
        if (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/apple-touch-icon-precomposed.png')) {
            $str .= "\t" . '<link rel="apple-touch-icon-precomposed" href="' . URL_FULL . 'themes/' . DISPLAY_THEME . '/apple-touch-icon-precomposed.png" ' . XHTML_CLOSING . '>' . "\n";
        }

        
        if (USE_XMLRPC) {
            if (file_exists(BASE . 'rsd.xml')) {
                $str .= "\t" . '<link rel="EditURI" href="' . URL_FULL . 'rsd.xml" type="application/rsd+xml" ' . XHTML_CLOSING . '>' . "\n";
            }
            $str .= "\t" . '<link rel="wlwmanifest" href="' . URL_FULL . 'wlwmanifest.xml" type="application/wlwmanifest+xml" ' . XHTML_CLOSING . '>' . "\n";
        }

        
        $str .= '<!-- MINIFY REPLACE -->';

        if ($config['meta']['ie_compat']) {
            
            $str .= "\t" . '<!--[if IE 6]><style type="text/css">  body { behavior: url(' . PATH_RELATIVE . 'external/csshover.htc); }</style><![endif]-->' . "\n";

            


            
            $str .= "\t" . '<!--[if lt IE 9]><script src="' . PATH_RELATIVE . 'external/html5shiv/html5shiv-shiv.js"></script><![endif]-->' . "\n";

            
            $str .= "\t" . '<!--[if lt IE 9]><script src="' . PATH_RELATIVE . 'external/Respond-1.4.2/dest/respond.min.js"></script><![endif]-->' . "\n";

            


            
            $str .= "\t" . '<!--[if IE 10]><link rel="stylesheet" href="' . PATH_RELATIVE . 'external/ie10-viewport-bug-workaround.css" type="text/css"' . XHTML_CLOSING . '><![endif]-->' . "\n";
            $str .= "\t" . '<!--[if IE 10]><script src="' . PATH_RELATIVE . 'external/ie10-viewport-bug-workaround.js"></script><![endif]-->' . "\n";

            
            $str .= "\t" . '<meta http-equiv="X-UA-Compatible" content="IE=edge"' . XHTML_CLOSING . '>' . "\n";
        }

        return $str;
    }

    public static function foot($params = array())
    {
        self::footerInfo($params);
    }

    public static function footerInfo($params = array())
    {
        
        global $validateTheme, $user, $jsForHead;

        $validateTheme['footerinfo'] = true;

        if (!empty($user->getsToolbar) && PRINTER_FRIENDLY != 1 && EXPORT_AS_PDF != 1 && !defined(
                'SOURCE_SELECTOR'
            ) && empty($params['hide-slingbar'])
        ) {
            self::module(array("controller" => "administration", "action" => "toolbar", "source" => "admin"));
        }

        if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php')) {
            
        }
        

        if (!empty($params['src']) || !empty($params['content']) || !empty($params['yui3mods']) || !empty($params['jquery']) || !empty($params['bootstrap'])) {
            expJavascript::pushToFoot($params);
        }
        self::processCSSandJS();
        

        expSession::deleteVar(
            "last_POST"
        ); 
        expSession::deleteVar(
            'last_post_errors'
        );
    }

    public static function pageMetaInfo()
    {
        global $sectionObj, $router;

        $metainfo = array();
        if (self::inAction() && (!empty($router->url_parts[0]) && expModules::controllerExists(
                    $router->url_parts[0]
                ))
        ) {


            $controller = expModules::getController($router->url_parts[0]);
            $metainfo = $controller->metainfo();
        }
        if (empty($metainfo)) {
            $metainfo['title'] = empty($sectionObj->page_title) ? SITE_TITLE : $sectionObj->page_title;
            $metainfo['keywords'] = empty($sectionObj->keywords) ? SITE_KEYWORDS : $sectionObj->keywords;
            $metainfo['description'] = empty($sectionObj->description) ? SITE_DESCRIPTION : $sectionObj->description;
            $metainfo['canonical'] = empty($sectionObj->canonical) ? URL_FULL . $sectionObj->sef_name : $sectionObj->canonical;
            $metainfo['noindex'] = empty($sectionObj->noindex) ? false : $sectionObj->noindex;
            $metainfo['nofollow'] = empty($sectionObj->nofollow) ? false : $sectionObj->nofollow;
        }

        
        foreach ($metainfo as $key=>$value) {
            $metainfo[$key] = expString::parseAndTrim($value, true);
        }
        return $metainfo;
    }

    public static function grabView($path, $filename)
    { 
        $dirs = array(
            BASE . 'themes/' . DISPLAY_THEME . '/' . $path,
            BASE . 'framework/' . $path,
        );

        foreach ($dirs as $dir) {
            if (file_exists($dir . $filename . '.tpl')) {
                return $dir . $form . '.tpl';
            } 
        }

        return false;
    }

    public static function grabViews($path, $filter = '')
    { 
        $dirs = array(
            BASE . 'framework/' . $path,
            BASE . 'themes/' . DISPLAY_THEME . '/' . $path,
        );

        $files = array();
        foreach ($dirs as $dir) {
            if (is_dir($dir) && is_readable($dir)) {
                $dh = opendir($dir);
                while (($filename = readdir($dh)) !== false) {
                    $file = $dir . $filename;
                    if (is_file($file)) { 
                        $files[$filename] = $file;
                    }
                }
            }
        }

        return $files;
    }

    public static function processCSSandJS()
    {
        global $jsForHead, $cssForHead;

        
        $jsForHead = expJavascript::parseJSFiles();
        $cssForHead = expCSS::parseCSSFiles();
    }

    public static function removeCss()
    {
        expFile::removeFilesInDirectory(BASE . 'tmp/minify'); 
        return expFile::removeFilesInDirectory(BASE . 'tmp/css');
    }

    public static function clearSmartyCache()
    {
        self::removeSmartyCache();
        flash('message', gt("Smarty Cache has been cleared"));
        expHistory::back();
    }

    public static function removeSmartyCache()
    {
        expFile::removeFilesInDirectory(BASE . 'tmp/cache'); 
        return expFile::removeFilesInDirectory(BASE . 'tmp/views_c');
    }

    
    public static function advertiseRSS()
    {
        if (defined('ADVERTISE_RSS') && ADVERTISE_RSS == 1) {
            
            $rss = new expRss();
            $feeds = $rss->getFeeds('advertise=1');
            foreach ($feeds as $feed) {
                if ($feed->enable_rss) {

                    $title = empty($feed->title) ? 'RSS - ' . ORGANIZATION_NAME : htmlspecialchars(
                        $feed->title,
                        ENT_QUOTES
                    );
                    $params['module'] = $feed->module;
                    $params['src'] = $feed->src;

                    
                    
                }
            }
        }
    }

    public static function loadActionMaps()
    {
        if (is_readable(BASE . 'themes/' . DISPLAY_THEME . '/action_maps.php')) {
            return include(BASE . 'themes/' . DISPLAY_THEME . '/action_maps.php');
        } else {
            return array();
        }
    }

    public static function satisfyThemeRequirements()
    {
        global $validateTheme;

        if ($validateTheme['headerinfo'] == false) {
            border:5px solid 
			<a href=\"http:
			</h1>";
            die();
        }

        if ($validateTheme['footerinfo'] == false) {
            border:5px solid 
			<a href=\"http:
			</h1>";
            die();
        }
    }

    public static function getTheme()
    {
        global $sectionObj, $router;

        
        $action_maps = self::loadActionMaps();



        
        if (self::inAction()) {



            $module = isset($_REQUEST['module']) ? $_REQUEST['module'] : $_REQUEST['controller'];
        }

        
        if (self::inAction() && (!empty($action_maps[$module]) && (array_key_exists(
                        $_REQUEST['action'],
                        $action_maps[$module]
                    ) || array_key_exists('*', $action_maps[$module])))
        ) {
            $actionname = array_key_exists($_REQUEST['action'], $action_maps[$module]) ? $_REQUEST['action'] : '*';
            $actiontheme = explode(":", $action_maps[$module][$actionname]);

            
            
            if (!empty($actiontheme[1])) {
                $sectionObj = @$router->getSectionObj($actiontheme[1]);
            }

            if ($actiontheme[0] == "default" || $actiontheme[0] == "Default" || $actiontheme[0] == "index") {
                if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php')) {
                    $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php';
                } else {
                    $theme = BASE . 'themes/' . DISPLAY_THEME . '/index.php';
                }
            } elseif (is_readable(BASE . 'themes/' . DISPLAY_THEME . '/subthemes/' . $actiontheme[0] . '.php')) {
                if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/' . $actiontheme[0] . '.php')) {
                    $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/' . $actiontheme[0] . '.php';
                } else {
                    $theme = BASE . 'themes/' . DISPLAY_THEME . '/subthemes/' . $actiontheme[0] . '.php';
                }
            } else {
                $theme = BASE . 'themes/' . DISPLAY_THEME . '/index.php';
            }
        } elseif ($sectionObj->subtheme != '' && is_readable(
                BASE . 'themes/' . DISPLAY_THEME . '/subthemes/' . $sectionObj->subtheme . '.php'
            )
        ) {
            if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/' . $sectionObj->subtheme . '.php')) {
                $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/' . $sectionObj->subtheme . '.php';
            } elseif (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php')) {
                $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php';
            } else {
                $theme = BASE . 'themes/' . DISPLAY_THEME . '/subthemes/' . $sectionObj->subtheme . '.php';
            }
        } else {
            if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php')) {
                $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php';
            } else {
                $theme = BASE . 'themes/' . DISPLAY_THEME . '/index.php';
            }
        }
        if (!is_readable($theme)) {
            if (is_readable(BASE . 'framework/core/index.php')) {
                $theme = BASE . 'framework/core/index.php';  
            }
        }
        return $theme;
    }

    
    public static function getSubthemes($include_default = true, $theme = DISPLAY_THEME)
    {
        $base = BASE . "themes/$theme/subthemes";
        
        
        
        $subs = array();
        if ($include_default == true) {
            
            $subs[''] = DEFAULT_VIEW; 
        }

        if (is_readable($base)) {
            
            $dh = opendir($base);
            
            while (($s = readdir($dh)) !== false) {
                if (substr($s, -4, 4) == '.php' && substr($s, 0, 1) != '_' && is_file($base . "/$s") && is_readable(
                        $base . "/$s"
                    )
                ) {
                    
                    $subs[substr($s, 0, -4)] = substr($s, 0, -4);
                }
            }
            
            
            uksort($subs, 'strnatcmp');
        }
        return $subs;
    }

    public static function getPrinterFriendlyTheme()
    {
        global $framework;

        $common = 'framework/core/printer-friendly.php';
        $theme = 'themes/' . DISPLAY_THEME . '/printer-friendly.php';
        if (empty($framework)) {
            $fw = expSession::get('framework');
            $fwprint = 'framework/core/printer-friendly.' . $fw . '.php';
        } else {
            $fwprint = 'framework/core/printer-friendly.' . $framework . '.php';
        }

        if (is_readable($theme)) {
            return $theme;
        } elseif (is_readable($fwprint)) {
            return $fwprint;
        } elseif (is_readable($common)) {
            return $common;
        } else {
            return null;
        }
    }

    
    public static function inPreview()
    {
        $level = 99;
        if (expSession::is_set('uilevel')) {
            $level = expSession::get('uilevel');
        }
        return ($level == UILEVEL_PREVIEW);
    }

    public static function inAction($action=null)
    {
        return (isset($_REQUEST['action']) && (isset($_REQUEST['module']) || isset($_REQUEST['controller'])) && (!isset($action) || ($action == $_REQUEST['action'])));
    }

    public static function reRoutActionTo($theme = "")
    {
        if (empty($theme)) {
            return false;
        }
        if (self::inAction()) {
            exit;
        }
        return false;
    }

    
    public static function runAction()
    {
        global $user;

        if (self::inAction()) {
            if (!AUTHORIZED_SECTION && !expJavascript::inAjaxAction())
                notfoundController::handle_not_authorized();





            




            if (!$user->isAdmin())
                expString::sanitize($_REQUEST);






            
            $module = empty($_REQUEST['controller']) ? $_REQUEST['module'] : $_REQUEST['controller'];



            if (expModules::controllerExists($module)) {
                
                
                
                $_REQUEST['controller'] = $module;













                



































            }
        }
        return false;
    }

    public static function showAction($module, $action, $src = "", $params = array())
    { 
        global $user;

        $loc = expCore::makeLocation($module, (isset($src) ? $src : ""), (isset($int) ? $int : ""));

        $actfile = "/" . $module . "/actions/" . $action . ".php";
        if (isset($params)) {




            if (!$user->isAdmin())
                expString::sanitize($_GET);
        }
        

        if (is_readable(BASE . "themes/" . DISPLAY_THEME . "/modules" . $actfile)) {


        } else {
            notfoundController::handle_not_found();
            
            
            
        }
    }

    
    public static function goDefaultSection()
    {
        $last_section = expSession::get("last_section");
        if (defined('SITE_DEFAULT_SECTION') && SITE_DEFAULT_SECTION != $last_section) {
            header("Location: " . URL_FULL . "index.php?section=" . SITE_DEFAULT_SECTION);
            exit();
        } else {
            global $db;

            $section = $db->selectObject("section", "public = 1 AND active = 1"); 
            if ($section) {
                header("Location: " . URL_FULL . "index.php?section=" . $section->id);
                exit();
            } else {
                notfoundController::handle_not_found();
            }
        }
    }

    
    public static function main()
    {
        global $db;

        if ((!defined('SOURCE_SELECTOR') || SOURCE_SELECTOR == 1)) {
            $last_section = expSession::get("last_section");
            $section = $db->selectObject("section", "id=" . $last_section);
            
            if (self::inAction()) {
                if (!PRINTER_FRIENDLY && !EXPORT_AS_PDF)
                    
                self::runAction();
            } else {
                if ($section == null) {
                    self::goDefaultSection();
                } else {
                    if (!PRINTER_FRIENDLY && !EXPORT_AS_PDF)
                        
                    self::mainContainer();
                }
            }






        }
    }

    
    public static function mainContainer()
    {
        global $router;

        if (!AUTHORIZED_SECTION) {
            
            
            expHistory::set('manageable', $router->params);
            notfoundController::handle_not_authorized();
            return;
        }

        if (PUBLIC_SECTION) {
            
            expHistory::set('viewable', $router->params);
        } else {
            
            expHistory::set('manageable', $router->params);
        }

        
        

        self::module(
            array(
                "controller" => "container",
                "action"     => "showall",
                "view"       => "showall",
                "source"     => "@section",
                "scope"      => "sectional"
            )
        );

        
        
        
    }

    
    public static function showSectionalModule(
        $module,
        $view,
        $title,
        $prefix = null,
        $pickable = false,
        $hide_menu = false
    ) {
        global $module_scope;

        self::deprecated('expTheme::module()', $module, $view);
        $module = expModules::getModuleName($module); 
        if ($prefix == null) {
            $prefix = "@section";
        }

        $src = $prefix;







        global $sectionObj;

        
        
        $src .= $sectionObj->id;

        $module_scope[$src][$module] = new stdClass();
        $module_scope[$src][$module]->scope = 'sectional';

        self::showModule($module, $view, $title, $src, false, null, $hide_menu);
    }

    
    public static function showTopSectionalModule(
        $module,
        $view,
        $title,
        $prefix = null,
        $pickable = false,
        $hide_menu = false
    ) {
        global $db, $module_scope, $sectionObj;

        self::deprecated('expTheme::module()', $module, $view);
        $module = expModules::getModuleName($module); 
        if ($prefix == null) {
            $prefix = "@section";
        }


        $section = $sectionObj; 

        $module_scope[$prefix . $section->id][$module]->scope = 'top-sectional';
        
        while ($section->parent != 0) {
            $section = $db->selectObject("section", "id=" . $section->parent);
        }

        self::showModule($module, $view, $title, $prefix . $section->id, false, null, $hide_menu);
    }

    
    public static function showSectionalController($params = array())
    { 
        global $sectionObj, $module_scope;

        $src = "@section" . $sectionObj->id;
        $params['source'] = $src;

        $module_scope[$params['source']][(isset($params['module']) ? $params['module'] : $params['controller'])]->scope = 'sectional';
        $module = !empty($params['module']) ? $params['module'] : $params['controller'];
        $view = !empty($params['action']) ? $params['action'] : $params['view'];
        self::deprecated('expTheme::module()', $module, $view);
        self::module($params);
    }

    
    public static function showController($params = array())
    {
        $module = !empty($params['module']) ? $params['module'] : $params['controller'];
        $view = !empty($params['action']) ? $params['action'] : $params['view'];
        self::deprecated('expTheme::module()', $module, $view);
        self::module($params);


































    }

    
    public static function module($params)
    {
        global $db, $module_scope, $sectionObj;

        if (empty($params)) {
            return false;
        } elseif (isset($params['module']) && expModules::controllerExists($params['module'])) {
            
            $params['controller'] = $params['module'];
            unset($params['module']);
        }
        if (!isset($params['action'])) {
            $params['action'] = 'showall';
        }
        if (isset($params['view']) && $params['view'] != $params['action']) {
            $test = explode('_', $params['view']);
            if ($test[0] != $params['action']) {
                $params['view'] = $params['action'] . '_' . $params['view'];
            }
        } elseif (!empty($params['action'])) {
            $params['view'] = $params['action'];
        } else {
            $params['view'] = 'showall';
        }

        $controller = expModules::getModuleName($params['controller']);

        $params['title'] = isset($params['moduletitle']) ? $params['moduletitle'] : '';
        $params['chrome'] = (!isset($params['chrome']) || (isset($params['chrome']) && empty($params['chrome']))) ? true : false;
        $params['scope'] = isset($params['scope']) ? $params['scope'] : 'global';

        
        $requestvars = isset($params['params']) ? $params['params'] : array();
        $requestvars['controller'] = $controller;
        $requestvars['action'] = isset($params['action']) ? $params['action'] : null;
        $requestvars['view'] = isset($params['view']) ? $params['view'] : null;

        
        if ($params['scope'] == 'global') {
            $params['source'] = isset($params['source']) ? $params['source'] : null;
        } elseif ($params['scope'] == 'sectional') {
            $params['source'] = isset($params['source']) ? $params['source'] : '@section';
            $params['source'] .= $sectionObj->id;
        } elseif ($params['scope'] == 'top-sectional') {
            $params['source'] = isset($params['source']) ? $params['source'] : '@section';
            $section = $sectionObj;
            while ($section->parent > 0) {
                $section = $db->selectObject("section", "id=" . $section->parent);
            }
            $params['source'] .= $section->id;
        }
        $module_scope[$params['source']][$controller] = new stdClass();
        $module_scope[$params['source']][$controller]->scope = $params['scope'];

        return self::showModule(
            $controller,
            $params['view'],
            $params['title'],
            $params['source'],
            false,
            null,
            $params['chrome'],
            $requestvars
        );














































    }

    
    public static function showModule(
        $module,
        $view = "Default",
        $title = "",
        $source = null,
        $pickable = false,
        $section = null,
        $hide_menu = false,
        $params = array()
    ) {
        $module = expModules::getModuleName($module); 
        if (!AUTHORIZED_SECTION && $module != 'navigation' && $module != 'login') {
            return;
        }

        global $db, $sectionObj, $module_scope;

        
        
        if ($sectionObj == null) {
            $section_id = expSession::get('last_section');
            if ($section_id == null) {
                $section_id = SITE_DEFAULT_SECTION;
            }
            $sectionObj = $db->selectObject('section', 'id=' . $section_id);
            
        }
        if ($module == "login" && defined('PREVIEW_READONLY') && PREVIEW_READONLY == 1) {
            return;
        }





        if (empty($params['action'])) {
            $params['action'] = $view;
        }
        $loc = expCore::makeLocation($module, $source . "");

        if (empty($module_scope[$source][$module]->scope)) {
            $module_scope[$source][$module] = new stdClass();
            $module_scope[$source][$module]->scope = 'global';
        }
        
        $secref = $db->selectObject("sectionref", "module='$module' AND source='" . $loc->src . "'");
        if ($secref == null) {
            $secref = new stdClass();
            $secref->module = $module;
            $secref->source = $loc->src;
            $secref->internal = "";
            $secref->refcount = 1000; 
            if ($sectionObj != null) {
                $secref->section = $sectionObj->id;
            }

            $db->insertObject($secref, 'sectionref');



        }
        
        $container = $db->selectObject('container', "internal='" . serialize($loc) . "'");
        if (empty($container->id)) {
            
            $newcontainer = new stdClass();
            $newcontainer->internal = serialize($loc);
            $newcontainer->external = serialize(null);
            $newcontainer->title = $title;
            $newcontainer->view = $view;
            $newcontainer->action = $params['action'];
            $newcontainer->id = $db->insertObject($newcontainer, 'container');
        }
        if (empty($title) && !empty($container->title)) {
            $title = $container->title;
        }


        if (defined('SELECTOR') && call_user_func(array(expModules::getModuleClassName($module), "hasSources"))) {
            containerController::wrapOutput($module, $view, $loc, $title);
        } else {

            if (expModules::controllerExists($module)) {
                
                
                


























                
                if (!$hide_menu && $loc->mod != "container") {
                    $controller = expModules::getController($module);

                    $hccontainer = new stdClass(); 
                    $hccontainer->permissions = array(
                        'manage'    => (expPermissions::check('manage', $loc) ? 1 : 0),
                        'configure' => (expPermissions::check('configure', $loc) ? 1 : 0)
                    );

                    if ($hccontainer->permissions['manage'] || $hccontainer->permissions['configure']) {
                        $hccontainer->randomizer = mt_rand(1, ceil(microtime(1)));
                        $hccontainer->view = $view;
                        $hccontainer->action = $params['action'];
                        $hccontainer->info['class'] = expModules::getModuleClassName($loc->mod);
                        $hccontainer->info['module'] = $controller->displayname();

                        $hccontainer->info['source'] = $loc->src;
                        $hccontainer->info['scope'] = $module_scope[$source][$module]->scope;



                        $c2 = new containerController();
                        $template = expTemplate::get_template_for_action($c2, '_hardcoded_module_menu');
                        $template->assign('container', $hccontainer);
                        $template->output();
                    }
                }



                $params['src'] = $loc->src;
                $params['controller'] = $module;
                $params['view'] = $view;
                $params['moduletitle'] = $title;
                return renderAction($params);



            } else {
                
                return false;
            }
        }
    }

    public static function getThemeDetails() {
        $theme_file = DISPLAY_THEME;
        if (is_readable(BASE.'themes/'.$theme_file.'/class.php')) {
            
            if (!class_exists($theme_file)) {
            }

            if (class_exists($theme_file)) {
                
                $theme = new $theme_file();
                return ' ' . gt('using') . ' ' . $theme->name() . ' ' . gt('by') . ' ' . $theme->author();
            }
        }
        return '';
    }

    
    public static function buttonColor($color = null)
    {
        $colors = array(
            'green'   => 'btn-success',
            'blue'    => 'btn-primary',
            'red'     => 'btn-danger',
            'magenta' => 'btn-danger',
            'orange'  => 'btn-warning',
            'yellow'  => 'btn-warning',
            'grey'    => 'btn-default',
            'purple'  => 'btn-info',
            'black'   => 'btn-inverse',
            'pink'    => 'btn-danger',
        );
        if (bs()) {
            if (!empty($colors[$color])) { 
                $found = $colors[$color];
            } else {
                $found = 'btn-default';
            }
        } else {
            $found = array_search($color, $colors); 
            if (empty($found)) {
                $found = $color;
            } else {
                $found = BTN_COLOR;
            }
        }
        return $found;
    }

    
    public static function buttonSize($size = null)
    {
        if (bs2()) {
            if (BTN_SIZE == 'large' || (!empty($size) && $size == 'large')) {
                $btn_size = ''; 
            } elseif (BTN_SIZE == 'small' || (!empty($size) && $size == 'small')) {
                $btn_size = 'btn-mini';
            } else { 
                $btn_size = 'btn-small';
            }
            return $btn_size;
        } elseif (bs3()) {
            if (BTN_SIZE == 'large' || (!empty($size) && $size == 'large')) {
                $btn_size = 'btn-lg';
            } elseif (BTN_SIZE == 'small' || (!empty($size) && $size == 'small')) {
                $btn_size = 'btn-sm';
            } elseif (BTN_SIZE == 'extrasmall' || (!empty($size) && $size == 'extrasmall')) {
                $btn_size = 'btn-xs';
            } else { 
                $btn_size = '';
            }
            return $btn_size;
        } else {
            if (empty($size)) {
                $size = BTN_SIZE;
            }
            return $size;
        }
    }

    
    public static function buttonStyle($color = null, $size = null)
    {
        if (bs()) {
            $btn_class = 'btn ' . self::buttonColor($color) . ' ' . self::buttonSize($size);
        } else {
            $btn_size = !empty($size) ? $size : BTN_SIZE;
            $btn_color = !empty($color) ? $color : BTN_COLOR;
            $btn_class = "awesome " . $btn_size . " " . $btn_color;
        }
        return $btn_class;
    }

    
    public static function buttonIcon($class, $size=null)
    {
        $btn_type = '';
        if (bs2()) {
            switch ($class) {
                case 'delete' :
                case 'delete-title' :
                    $class = "remove-sign";
                    $btn_type = "btn-danger"; 
                    break;
                case 'add' :
                case 'add-title' :
                case 'add-body' :
                case 'switchtheme add' :
                    $class = "plus-sign";
                    $btn_type = "btn-success"; 
                    break;
                case 'copy' :
                    $class = "copy";
                    break;
                case 'downloadfile' :
                case 'export' :
                    $class = "download-alt";
                    break;
                case 'uploadfile' :
                case 'import' :
                    $class = "upload-alt";
                    break;
                case 'manage' :
                    $class = "briefcase";
                    break;
                case 'merge' :
                case 'arrow_merge' :
                    $class = "signin";
                    break;
                case 'reranklink' :
                case 'alphasort' :
                    $class = "sort";
                    break;
                case 'configure' :
                    $class = "wrench";
                    break;
                case 'view' :
                    $class = "search";
                    break;
                case 'page_next' :
                    $class = 'double-angle-right';
                    break;
                case 'page_prev' :
                    $class = 'double-angle-left';
                    break;
                case 'password' :
                case 'change_password' :
                    $class = 'key';
                    break;
                case 'clean' :
                    $class = 'check';
                    break;
                case 'userperms' :
                    $class = 'user';
                    break;
                case 'groupperms' :
                    $class = 'group';
                    break;
                case 'monthviewlink' :
                case 'weekviewlink' :
                    $class = 'calendar';
                    break;
                case 'listviewlink' :
                    $class = 'list';
                    break;
                case 'adminviewlink' :
                    $class = 'cogs';
                    break;
                case 'approve' :
                    $class = "check";
                    $btn_type = "btn-success"; 
                    break;
                case 'ajax' :
                    $class = "spinner icon-spin";
                    break;
            }
            $found = new stdClass();
            $found->type = $btn_type;
            $found->class = $class;
            $found->size = self::iconSize($size);
            $found->prefix = 'icon-';
            return $found;
        } elseif (bs3()) {
            switch ($class) {
                case 'delete' :
                case 'delete-title' :
                    $class = "times-circle";
                    $btn_type = "btn-danger";  
                    break;
                case 'add' :
                case 'add-title' :
                case 'add-body' :
                case 'switchtheme add' :
                    $class = "plus-circle";
                    $btn_type = "btn-success";  
                    break;
                case 'copy' :
                    $class = "files-o";
                    break;
                case 'downloadfile' :
                case 'export' :
                    $class = "download";
                    break;
                case 'uploadfile' :
                case 'import' :
                    $class = "upload";
                    break;
                case 'manage' :
                    $class = "briefcase";
                    break;
                case 'merge' :
                case 'arrow_merge' :
                    $class = "sign-in";
                    break;
                case 'reranklink' :
                case 'alphasort' :
                    $class = "sort";
                    break;
                case 'configure' :
                    $class = "wrench";
                    break;
                case 'view' :
                    $class = "search";
                    break;
                case 'page_next' :
                    $class ='angle-double-right';
                    break;
                case 'page_prev' :
                    $class = 'angle-double-left';
                    break;
                case 'password' :
                case 'change_password' :
                    $class = 'key';
                    break;
                case 'clean' :
                    $class = 'check-square-o';
                    break;
                case 'trash' :
                    $class = "trash-o";
                    break;
                case 'userperms' :
                    $class = 'user';
                    break;
                case 'groupperms' :
                    $class = 'group';
                    break;
                case 'monthviewlink' :
                case 'weekviewlink' :
                    $class = 'calendar';
                    break;
                case 'listviewlink' :
                    $class = 'list';
                    break;
                case 'adminviewlink' :
                    $class = 'cogs';
                    break;
                case 'approve' :
                    $class = "check";
                    $btn_type = "btn-success"; 
                    break;
                case 'ajax' :
                    $class = "spinner fa-spin";
                    break;
            }
            $found = new stdClass();
            $found->type = $btn_type;
            $found->class = $class;
            $found->size = self::iconSize($size);
            $found->prefix = 'fa fa-';
            return $found;
        } else {
            return $class;
        }
    }

    
    public static function iconStyle($class, $text = null) {
        $style = self::buttonIcon($class);
        if (!empty($style->prefix)) {
            if ($text) {
                return '<i class="' .$style->prefix . $style->class . '"></i> '. $text;
            } else {
                return $style->prefix . $style->class;
            }
        } else {
            return $style;
        }
    }

    
    public static function iconSize($size = null)
    {
        if (bs2()) {
            if (BTN_SIZE == 'large' || (!empty($size) && $size == 'large')) {
                $icon_size = 'icon-large';
            } elseif (BTN_SIZE == 'small' || (!empty($size) && $size == 'small')) {
                $icon_size = '';
            } else { 
                $icon_size = 'icon-large';
            }
            return $icon_size;
        } elseif (bs3()) {
            if (BTN_SIZE == 'large' || (!empty($size) && $size == 'large')) {
                $icon_size = 'fa-lg';
            } elseif (BTN_SIZE == 'small' || (!empty($size) && $size == 'small')) {
                $icon_size = '';
            } else { 
                $icon_size = 'fa-lg';
            }
            return $icon_size;
        } else {
            return BTN_SIZE;
        }
    }

    public static function is_mobile()
    {
        $tablet_browser = 0;
        $mobile_browser = 0;

        if (preg_match(
            '/(tablet|ipad|playbook)|(android(?!.*(mobi|opera mini)))/i',
            strtolower($_SERVER['HTTP_USER_AGENT'])
        )
        ) {
            $tablet_browser++;
        }

        if (preg_match(
            '/(up.browser|up.link|mmp|symbian|smartphone|midp|wap|phone|android|iemobile)/i',
            strtolower($_SERVER['HTTP_USER_AGENT'])
        )
        ) {
            $mobile_browser++;
        }

        if ((!empty($_SERVER['HTTP_ACCEPT']) && strpos(
                    strtolower($_SERVER['HTTP_ACCEPT']),
                    'application/vnd.wap.xhtml+xml'
                ) > 0) or ((isset($_SERVER['HTTP_X_WAP_PROFILE']) or isset($_SERVER['HTTP_PROFILE'])))
        ) {
            $mobile_browser++;
        }

        $mobile_ua = strtolower(substr($_SERVER['HTTP_USER_AGENT'], 0, 4));
        $mobile_agents = array(
            'w3c ',
            'acs-',
            'alav',
            'alca',
            'amoi',
            'audi',
            'avan',
            'benq',
            'bird',
            'blac',
            'blaz',
            'brew',
            'cell',
            'cldc',
            'cmd-',
            'dang',
            'doco',
            'eric',
            'hipt',
            'inno',
            'ipaq',
            'java',
            'jigs',
            'kddi',
            'keji',
            'leno',
            'lg-c',
            'lg-d',
            'lg-g',
            'lge-',
            'maui',
            'maxo',
            'midp',
            'mits',
            'mmef',
            'mobi',
            'mot-',
            'moto',
            'mwbp',
            'nec-',
            'newt',
            'noki',
            'palm',
            'pana',
            'pant',
            'phil',
            'play',
            'port',
            'prox',
            'qwap',
            'sage',
            'sams',
            'sany',
            'sch-',
            'sec-',
            'send',
            'seri',
            'sgh-',
            'shar',
            'sie-',
            'siem',
            'smal',
            'smar',
            'sony',
            'sph-',
            'symb',
            't-mo',
            'teli',
            'tim-',
            'tosh',
            'tsm-',
            'upg1',
            'upsi',
            'vk-v',
            'voda',
            'wap-',
            'wapa',
            'wapi',
            'wapp',
            'wapr',
            'webc',
            'winw',
            'winw',
            'xda ',
            'xda-'
        );

        if (in_array($mobile_ua, $mobile_agents)) {
            $mobile_browser++;
        }

        if (strpos(strtolower($_SERVER['HTTP_USER_AGENT']), 'opera mini') > 0) {
            $mobile_browser++;
            
            $stock_ua = strtolower(
                isset($_SERVER['HTTP_X_OPERAMINI_PHONE_UA']) ? $_SERVER['HTTP_X_OPERAMINI_PHONE_UA'] : (isset($_SERVER['HTTP_DEVICE_STOCK_UA']) ? $_SERVER['HTTP_DEVICE_STOCK_UA'] : '')
            );
            if (preg_match('/(tablet|ipad|playbook)|(android(?!.*mobile))/i', $stock_ua)) {
                $tablet_browser++;
            }
        }

        if (strpos(strtolower($_SERVER['HTTP_USER_AGENT']), 'windows') > 0) {
            $mobile_browser = 0;
        }

        if ($tablet_browser > 0) {
            

        } elseif ($mobile_browser > 0) {
            

        } else {
            

        }

        return $mobile_browser;
    }

    
    public static function deprecated($newcall = "expTheme::module()", $controller = null, $actionview = null)
    {
        global $user;

        if ($user->isAdmin() && DEVELOPMENT) {
            $trace = debug_backtrace();
            $caller = $trace[1];
            if (substr($caller['file'], -16, 6) == 'compat') {
                $caller = $trace[2];
            }
            $oldcall = $caller['function'];
            if ($caller['class'] == 'expTheme') {
                $oldcall = $caller['class'] . '::' . $oldcall;
            }
            $message = '<strong>' . $oldcall . '</strong> ' . gt(
                    'is deprecated and should be replaced by'
                ) . ' <strong>' . $newcall . '</strong>';
            if (!empty($controller)) {
                $message .= '<br>' . gt(
                        'for hard coded module'
                    ) . ' - <strong>' . $controller . ' / ' . $actionview . '</strong>';
            }
            $message .= '<br>' . gt('line') . ' 
            $message .= ' <a class="helplink" title="' . gt('Get Theme Update Help') . '" href="' . help::makeHelpLink(
                    'theme_update'
                ) . '" target="_blank">' . gt('Help') . '</a>';
            flash('notice', $message);
        }
    }

}

?>