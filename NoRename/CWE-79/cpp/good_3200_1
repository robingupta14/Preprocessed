







namespace
{
    class NaturalCompare
    {
    public:
        explicit NaturalCompare(const bool caseSensitive = true)
            : m_caseSensitive(caseSensitive)
        {

        }

        bool operator()(const QString &left, const QString &right) const
        {

            return lessThan(left, right);

        }

        bool lessThan(const QString &left, const QString &right) const
        {

            int posL = 0;
            int posR = 0;
            while (true) {
                while (true) {
                    if ((posL == left.size()) || (posR == right.size()))
                        return (left.size() < right.size());

                    QChar leftChar = m_caseSensitive ? left[posL] : left[posL].toLower();
                    QChar rightChar = m_caseSensitive ? right[posR] : right[posR].toLower();
                    if (leftChar == rightChar)
                        ;
                    else if (leftChar.isDigit() && rightChar.isDigit())
                        break;
                    else
                        return leftChar < rightChar;

                    ++posL;
                    ++posR;
                }

                int startL = posL;
                while ((posL < left.size()) && left[posL].isDigit())
                    ++posL;



                int numL = left.mid(startL, posL - startL).toInt();


                int startR = posR;
                while ((posR < right.size()) && right[posR].isDigit())
                    ++posR;



                int numR = right.mid(startR, posR - startR).toInt();


                if (numL != numR)
                    return (numL < numR);



            }
            return false;
        }

    private:



        const bool m_caseSensitive;
    };
}

bool Utils::String::naturalCompareCaseSensitive(const QString &left, const QString &right)
{







    thread_local NaturalCompare nCmp(true);
    return nCmp(left, right);

}

bool Utils::String::naturalCompareCaseInsensitive(const QString &left, const QString &right)
{







    thread_local NaturalCompare nCmp(false);
    return nCmp(left, right);

}

QString Utils::String::fromStdString(const std::string &str)
{
    return QString::fromUtf8(str.c_str());
}

std::string Utils::String::toStdString(const QString &str)
{



    QByteArray utf8 = str.toUtf8();
    return std::string(utf8.constData(), utf8.length());

}


QString Utils::String::fromDouble(double n, int precision)
{






    double prec = std::pow(10.0, precision);
    return QLocale::system().toString(std::floor(n * prec) / prec, 'f', precision);
}



bool Utils::String::slowEquals(const QByteArray &a, const QByteArray &b)
{
    int lengthA = a.length();
    int lengthB = b.length();

    int diff = lengthA ^ lengthB;
    for (int i = 0; (i < lengthA) && (i < lengthB); i++)
        diff |= a[i] ^ b[i];

    return (diff == 0);
}

QString Utils::String::toHtmlEscaped(const QString &str)
{



    return Qt::escape(str);

}
