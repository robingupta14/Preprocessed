






import org.w3c.css.atrules.css.AtRuleMedia;
import org.w3c.css.atrules.css.AtRulePage;
import org.w3c.css.parser.AtRule;
import org.w3c.css.parser.CssError;
import org.w3c.css.parser.CssFouffa;
import org.w3c.css.parser.CssParseException;
import org.w3c.css.parser.CssSelectors;
import org.w3c.css.parser.CssValidatorListener;
import org.w3c.css.parser.Errors;
import org.w3c.css.parser.analyzer.ParseException;
import org.w3c.css.parser.analyzer.TokenMgrError;
import org.w3c.css.properties.css.CssProperty;
import org.w3c.css.selectors.IdSelector;
import org.w3c.css.util.ApplContext;
import org.w3c.css.util.CssVersion;
import org.w3c.css.util.InvalidParamException;
import org.w3c.css.util.Messages;
import org.w3c.css.util.Util;
import org.w3c.css.util.Warning;
import org.w3c.css.util.Warnings;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Constructor;
import java.net.URL;
import java.util.ArrayList;
import java.util.StringTokenizer;


public final class StyleSheetParser
        implements CssValidatorListener, CssParser {

    private static Constructor co = null;

    static {
        try {
            Class c = java.lang.Exception.class;
            Class cp[] = {java.lang.Exception.class};
            co = c.getDeclaredConstructor(cp);
        } catch (NoSuchMethodException ex) {}
    }

    CssFouffa cssFouffa;
    StyleSheet style = new StyleSheet();

    public void reInit() {
        style = new StyleSheet();
    }

    public StyleSheet getStyleSheet() {
        return style;
    }

    public void setWarningLevel(int warningLevel) {
        style.setWarningLevel(warningLevel);
    }

    public void notifyErrors(Errors errors) {
        style.addErrors(errors);
    }

    public void notifyWarnings(Warnings warnings) {
        style.addWarnings(warnings);
    }

    
    public void handleRule(ApplContext ac, CssSelectors selector,
                           ArrayList<CssProperty> properties) {
        if (selector.getAtRule() instanceof AtRulePage) {
            style.remove(selector);
        }
        for (CssProperty property : properties) {
            property.setSelectors(selector);
            style.addProperty(selector, property);
        }
    }

    

    public void addCharSet(String charset) {
        style.addCharSet(charset);
    }

    public void newAtRule(AtRule atRule) {
        style.newAtRule(atRule);
    }

    public void endOfAtRule() {
        style.endOfAtRule();
    }

    public void setImportant(boolean important) {
        style.setImportant(important);
    }

    public void setSelectorList(ArrayList<CssSelectors> selectors) {
        style.setSelectorList(selectors);
    }

    public void setProperty(ArrayList<CssProperty> properties) {
        style.setProperty(properties);
    }

    public void endOfRule() {
        style.endOfRule();
    }

    public void removeThisRule() {
        style.removeThisRule();
    }

    public void removeThisAtRule() {
        style.removeThisAtRule();
    }

    

    
    public void handleAtRule(ApplContext ac, String ident, String string) {
        style.getWarnings().addWarning(new Warning(cssFouffa.getSourceFile(),
                cssFouffa.getLine(),
                "at-rule",
                2,
                new String[]{ident, string},
                ac));
        
    }

    
    public void parseURL(ApplContext ac, URL url, String title,
                         String kind, String media,
                         int origin) {
        boolean doneref = false;
        URL ref = ac.getReferrer();
        setWarningLevel(ac.getWarningLevel());
        if (Util.onDebug) {
            System.err.println("StyleSheet.parseURL(" + url + ", "
                    + title + ", "
                    + kind + ", " + media + ", "
                    + origin + ")");
        }
        if (kind != null) {
            kind = kind.trim().toLowerCase();
            if (!kind.equals("stylesheet") && !kind.equals("alternate stylesheet")) {
                return;
            }
        }
        try {
            ac.setOrigin(origin);

            cssFouffa = new CssFouffa(ac, url);
            cssFouffa.addListener(this);




            

            
            
            
            
            if (media == null) {
                if (ac.getCssVersion() != CssVersion.CSS1) {
                    if (ac.getMedium() == null) {
                        media = "all";
                    } else {
                        media = ac.getMedium();
                    }
                }
            }
            AtRuleMedia m = AtRuleMedia.getInstance(ac.getCssVersion());
            try {
                if (media != null) {
                    addMedias(m, media, ac);
                }
                cssFouffa.setAtRule(m);
            } catch (org.w3c.css.util.InvalidParamException e) {
                Errors er = new Errors();
                er.addError(new org.w3c.css.parser.CssError(url.toString(),
                        -1, e));
                notifyErrors(er);
                return;
            }
            ac.setReferrer(url);
            doneref = true;
            cssFouffa.parseStyle();
        } catch (Exception e) {} finally {
            if (doneref) {
                ac.setReferrer(ref);
            }
        }
    }

    
    private void addMedias(AtRuleMedia m, String medias, ApplContext ac) throws InvalidParamException {
        
        if (ac.getCssVersion().compareTo(CssVersion.CSS3) < 0) {
            StringTokenizer tokens = new StringTokenizer(medias, ",");
            while (tokens.hasMoreTokens()) {
                m.addMedia(null, tokens.nextToken().trim(), ac);
            }
        } else {
            CssFouffa muP = new CssFouffa(ac, new StringReader(medias));
            try {
                AtRuleMedia arm = muP.parseMediaDeclaration();
                if (arm != null) {
                    m.allMedia = arm.allMedia;
                }
            } catch (ParseException pex) {}
        }
    }

    
    public void parseStyleElement(ApplContext ac, Reader reader,
                                  String title, String media,
                                  URL url, int lineno) {
        boolean doneref = false;
        style.setWarningLevel(ac.getWarningLevel());
        if (Util.onDebug) {
            System.err.println("StyleSheet.parseStyleElement(" + title + ", "
                    + media + ", " + url
                    + "," + lineno + ")");
        }
        URL ref = ac.getReferrer();
        try {


            String charset = ac.getCharsetForURL(url);
            cssFouffa = new CssFouffa(ac, reader, url, lineno);
            cssFouffa.addListener(this);




            
            
            
            if (media == null && ac.getCssVersion() != CssVersion.CSS1) {
                media = "all";
            }

            AtRuleMedia m = AtRuleMedia.getInstance(ac.getCssVersion());
            try {
                if (media != null) {
                    addMedias(m, media, ac);
                }
                cssFouffa.setAtRule(m);
            } catch (org.w3c.css.util.InvalidParamException e) {
                Errors er = new Errors();
                er.addError(new org.w3c.css.parser.CssError(url.toString(),
                        -1, e));
                notifyErrors(er);
                return;
            }
            ac.setReferrer(url);
            doneref = true;
            cssFouffa.parseStyle();
        } catch (IOException e) {} catch (TokenMgrError e) {} catch (Exception ex) {}
            }
            if (cpe == null) {
                cpe = new CssParseException(new Exception(e.getMessage()));
            }
            er.addError(new org.w3c.css.parser.CssError(url.toString(),
                    -1,
                    
                    cpe));
            notifyErrors(er);
        } catch (RuntimeException e) {} finally {
            if (doneref) {
                ac.setReferrer(ref);
            }
        }
    }

    
    public void parseStyleElement(ApplContext ac, String input, URL url, int lineno) {
        parseStyleElement(ac, new StringReader(input), null, null, url, lineno);
    }

    
    public void parseStyleElement(ApplContext ac, InputStream input,
                                  String title, String media,
                                  URL url, int lineno) {
        InputStreamReader reader = null;
        String charset = ac.getCharsetForURL(url);
        try {
            reader = new InputStreamReader(input, (charset == null) ?
                    "iso-8859-1" : charset);
        } catch (UnsupportedEncodingException uex) {} catch (Exception ex) {}
        }
        if (reader != null) {
            parseStyleElement(ac, reader, title, media, url, lineno);
        }
    }

    
    public void parseStyleSheet(ApplContext ac, Reader reader, URL docref) {
        parseStyleElement(ac, reader, null, null, (docref == null) ? ac.getFakeURL() : docref, 0);
    }

    
    public void parseStyleAttribute(ApplContext ac, InputStream input, String id,
                                    URL url, int lineno) {
        style.setWarningLevel(ac.getWarningLevel());
        lineno--; 
        if (Util.onDebug) {
            System.err.println("StyleSheet.parseStyleAttribute(" + id + ","
                    + url + "," + lineno + ")");
        }

        try {
            
            String charset = ac.getCharsetForURL(url);
            cssFouffa = new CssFouffa(ac, input, charset, url, lineno);
            cssFouffa.addListener(this);
            

            CssSelectors selector = new CssSelectors(ac);

            try {
                AtRuleMedia media = AtRuleMedia.getInstance(ac.getCssVersion());
                if (ac.getCssVersion() != CssVersion.CSS1) {
                    media.addMedia(null, "all", ac);
                }
                cssFouffa.setAtRule(media);
            } catch (InvalidParamException e) {} 

            try {
                if (id == null || id.length() == 0) {
                    id = "nullId-" + Long.toHexString(System.currentTimeMillis());
                    
                }
                selector.addId(new IdSelector(id.substring(1)));
            } catch (InvalidParamException e) {}
            cssFouffa.parseDeclarations(selector);
        } catch (IOException e) {}
    }

    
    public void parseStyleAttribute(ApplContext ac, String input, String id,
                                    URL url, int lineno) {
        parseStyleAttribute(ac, new ByteArrayInputStream(input.getBytes()),
                id, url, lineno);
    }

    public void setStyle(Class style) {
        cssFouffa.setStyle(style);
    }

}
