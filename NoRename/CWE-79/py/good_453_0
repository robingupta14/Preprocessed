

try:
    from urlparse import urlsplit
    from urllib import unquote_plus
except ImportError:
    
    from urllib.parse import urlsplit, unquote_plus
from lxml import etree
from lxml.html import defs
from lxml.html import fromstring, XHTML_NAMESPACE
from lxml.html import xhtml_to_html, _transform_result

try:
    unichr
except NameError:
    
    unichr = chr
try:
    unicode
except NameError:
    
    unicode = str
try:
    bytes
except NameError:
    
    bytes = str
try:
    basestring
except NameError:
    basestring = (str, bytes)


__all__ = ['clean_html', 'clean', 'Cleaner', 'autolink', 'autolink_html', 'word_break', 'word_break_html']






















_css_javascript_re = re.compile(
    expression\s*\(.*?\), re.S|re.I)


_css_import_re = re.compile(
    @\s*import, re.I)



_is_image_dataurl = re.compile(
    ^data:image/.+;base64, re.I).search
_is_possibly_malicious_scheme = re.compile(
    (?:javascript|jscript|livescript|vbscript|data|about|mocha):,
    re.I).search
def _is_javascript_scheme(s):
    if _is_image_dataurl(s):
        return None
    return _is_possibly_malicious_scheme(s)

_substitute_whitespace = re.compile[\s\x00-\x08\x0B\x0C\x0E-\x19]+.sub



_conditional_comment_re = re.compile(
    \[if[\s\n\r]+.*?][\s\n\r]*>, re.I|re.S)

_find_styled_elements = lxml.etree.XPathdescendant-or-self::*[@style]

_find_external_links = lxml.etree.XPath(
    ("descendant-or-self::a  [normalize-space(@href) and substring(normalize-space(@href),1,1) != '
     "descendant-or-self::x:a[normalize-space(@href) and substring(normalize-space(@href),1,1) != '
    namespaces={x:XHTML_NAMESPACE})


class Cleaner(object):
    

    scripts = True
    javascript = True
    comments = True
    style = False
    inline_style = None
    links = True
    meta = True
    page_structure = True
    processing_instructions = True
    embedded = True
    frames = True
    forms = True
    annoying_tags = True
    remove_tags = None
    allow_tags = None
    kill_tags = None
    remove_unknown_tags = True
    safe_attrs_only = True
    safe_attrs = lxml.html.defs.safe_attrs
    add_nofollow = False
    host_whitelist = ()
    whitelist_tags = set['iframe', 'embed']

    def __init__(self, **kw):
        for name, value in kw.items():
            if not hasattr(self, name):
                raise TypeError(
                    Unknown parameter: %s=%r % (name, value))
            setattr(self, name, value)
        if self.inline_style is None and inline_style not in kw:
            self.inline_style = self.style

    
    
    _tag_link_attrs = dict(
        script=src,
        link=href,
        
        
        applet=['code', 'object'],
        iframe=src,
        embed=src,
        layer=src,
        
        
        
        
        
        
        
        
        a=href,
        )

    def __call__(self, doc):
        
        if hasattr(doc, getroot):
            
            doc = doc.getroot()
        
        xhtml_to_html(doc)
        
        
        for el in doc.iterimage:
            el.tag = img
        if not self.comments:
            
            
            self.kill_conditional_comments(doc)

        kill_tags = set(self.kill_tags or ())
        remove_tags = set(self.remove_tags or ())
        allow_tags = set(self.allow_tags or ())

        if self.scripts:
            kill_tags.addscript
        if self.safe_attrs_only:
            safe_attrs = set(self.safe_attrs)
            for el in doc.iter(lxml.etree.Element):
                attrib = el.attrib
                for aname in attrib.keys():
                    if aname not in safe_attrs:
                        del attrib[aname]
        if self.javascript:
            if not (self.safe_attrs_only and
                    self.safe_attrs == lxml.html.defs.safe_attrs):
                
                for el in doc.iter(lxml.etree.Element):
                    attrib = el.attrib
                    for aname in attrib.keys():
                        if aname.startswithon:
                            del attrib[aname]
            doc.rewrite_links(self._remove_javascript_link,
                              resolve_base_href=False)
            
            
            if not self.inline_style:
                for el in _find_styled_elements(doc):
                    old = el.getstyle
                    new = _css_javascript_re.sub(, old)
                    new = _css_import_re.sub(, new)
                    if self._has_sneaky_javascript(new):
                        
                        del el.attrib[style]
                    elif new != old:
                        el.set(style, new)
            if not self.style:
                for el in list(doc.iterstyle):
                    if el.get('type', '').lower().strip() == text/javascript:
                        el.drop_tree()
                        continue
                    old = el.text or 
                    new = _css_javascript_re.sub(, old)
                    
                    new = _css_import_re.sub(, old)
                    if self._has_sneaky_javascript(new):
                        
                        el.text = /* deleted */
                    elif new != old:
                        el.text = new
        if self.comments or self.processing_instructions:
            
            
            
            kill_tags.add(lxml.etree.Comment)
        if self.processing_instructions:
            kill_tags.add(lxml.etree.ProcessingInstruction)
        if self.style:
            kill_tags.addstyle
        if self.inline_style:
            lxml.etree.strip_attributes(doc, style)
        if self.links:
            kill_tags.addlink
        elif self.style or self.javascript:
            
            
            for el in list(doc.iterlink):
                if stylesheet in el.get('rel', '').lower():
                    
                    if not self.allow_element(el):
                        el.drop_tree()
        if self.meta:
            kill_tags.addmeta
        if self.page_structure:
            remove_tags.update('head', 'html', 'title')
        if self.embedded:
            
            
            
            for el in list(doc.iterparam):
                found_parent = False
                parent = el.getparent()
                while parent is not None and parent.tag not in ('applet', 'object'):
                    parent = parent.getparent()
                if parent is None:
                    el.drop_tree()
            kill_tags.update('applet',)
            
            remove_tags.update('iframe', 'embed', 'layer', 'object', 'param')
        if self.frames:
            
            
            
            kill_tags.update(lxml.html.defs.frame_tags)
        if self.forms:
            remove_tags.addform
            kill_tags.update('button', 'input', 'select', 'textarea')
        if self.annoying_tags:
            remove_tags.update('blink', 'marquee')

        _remove = []
        _kill = []
        for el in doc.iter():
            if el.tag in kill_tags:
                if self.allow_element(el):
                    continue
                _kill.append(el)
            elif el.tag in remove_tags:
                if self.allow_element(el):
                    continue
                _remove.append(el)

        if _remove and _remove[0] == doc:
            
            
            el = _remove.pop0
            el.tag = div
            el.attrib.clear()
        elif _kill and _kill[0] == doc:
            
            
            el = _kill.pop0
            if el.tag != html:
                el.tag = div
            el.clear()

        _kill.reverse() 
        for el in _kill:
            el.drop_tree()
        for el in _remove:
            el.drop_tag()

        if self.remove_unknown_tags:
            if allow_tags:
                raise ValueError()
            allow_tags = set(lxml.html.defs.tags)
        if allow_tags:
            bad = []
            for el in doc.iter():
                if el.tag not in allow_tags:
                    bad.append(el)
            if bad:
                if bad[0] is doc:
                    el = bad.pop0
                    el.tag = div
                    el.attrib.clear()
                for el in bad:
                    el.drop_tag()
        if self.add_nofollow:
            for el in _find_external_links(doc):
                if not self.allow_follow(el):
                    rel = el.getrel
                    if rel:
                        if (nofollow in rel
                                and  nofollow  in ( %s  % rel)):
                            continue
                        rel = %s nofollow % rel
                    else:
                        rel = nofollow
                    el.set(rel, rel)

    def allow_follow(self, anchor):
        
        return False

    def allow_element(self, el):
        if el.tag not in self._tag_link_attrs:
            return False
        attr = self._tag_link_attrs[el.tag]
        if isinstance(attr, (list, tuple)):
            for one_attr in attr:
                url = el.get(one_attr)
                if not url:
                    return False
                if not self.allow_embedded_url(el, url):
                    return False
            return True
        else:
            url = el.get(attr)
            if not url:
                return False
            return self.allow_embedded_url(el, url)

    def allow_embedded_url(self, el, url):
        if (self.whitelist_tags is not None
            and el.tag not in self.whitelist_tags):
            return False
        scheme, netloc, path, query, fragment = urlsplit(url)
        netloc = netloc.lower().split(':', 1)[0]
        if scheme not in ('http', 'https'):
            return False
        if netloc in self.host_whitelist:
            return True
        return False

    def kill_conditional_comments(self, doc):
        
        bad = []
        self._kill_elements(
            doc, <function <lambda> at 0x7f5fe0983ce0>,
            lxml.etree.Comment)                

    def _kill_elements(self, doc, condition, iterate=None):
        bad = []
        for el in doc.iter(iterate):
            if condition(el):
                bad.append(el)
        for el in bad:
            el.drop_tree()

    def _remove_javascript_link(self, link):
        
        new = _substitute_whitespace(, unquote_plus(link))
        if _is_javascript_scheme(new):
            
            return 
        return link

    _substitute_comments = re.compile(/\*.*?\*/, re.S).sub

    def _has_sneaky_javascript(self, style):
        
        style = self._substitute_comments(, style)
        style = style.replace('\\', '')
        style = _substitute_whitespace(, style)
        style = style.lower()
        if javascript: in style:
            return True
        if expression( in style:
            return True
        return False

    def clean_html(self, html):
        result_type = type(html)
        if isinstance(html, basestring):
            doc = fromstring(html)
        else:
            doc = copy.deepcopy(html)
        self(doc)
        return _transform_result(result_type, doc)

clean = Cleaner()
clean_html = clean.clean_html





_link_regexes = [
    re.compile((?P<body>https?://(?P<host>[a-z0-9._-]+)(?:/[/\-_.,a-z0-9%&?;=~]*)?(?:\([/\-_.,a-z0-9%&?;=~]*\))?), re.I),
    
    re.compile(mailto:(?P<body>[a-z0-9._-]+@(?P<host>[a-z0-9_.-]+[a-z])), re.I),
    ]

_avoid_elements = [textarea, pre, code, head, select, a]

_avoid_hosts = [
    re.compile(^localhost, re.I),
    re.compile(\bexample\.(?:com|org|net)$, re.I),
    re.compile^127\.0\.0\.1$,
    ]

_avoid_classes = [nolink]

def autolink(el, link_regexes=_link_regexes,
             avoid_elements=_avoid_elements,
             avoid_hosts=_avoid_hosts,
             avoid_classes=_avoid_classes):
    
    if el.tag in avoid_elements:
        return
    class_name = el.getclass
    if class_name:
        class_name = class_name.split()
        for match_class in avoid_classes:
            if match_class in class_name:
                return
    for child in list(el):
        autolink(child, link_regexes=link_regexes,
                 avoid_elements=avoid_elements,
                 avoid_hosts=avoid_hosts,
                 avoid_classes=avoid_classes)
        if child.tail:
            text, tail_children = _link_text(
                child.tail, link_regexes, avoid_hosts, factory=el.makeelement)
            if tail_children:
                child.tail = text
                index = el.index(child)
                el[index+1:index+1] = tail_children
    if el.text:
        text, pre_children = _link_text(
            el.text, link_regexes, avoid_hosts, factory=el.makeelement)
        if pre_children:
            el.text = text
            el[:0] = pre_children

def _link_text(text, link_regexes, avoid_hosts, factory):
    leading_text = 
    links = []
    last_pos = 0
    while 1:
        best_match, best_pos = None, None
        for regex in link_regexes:
            regex_pos = last_pos
            while 1:
                match = regex.search(text, pos=regex_pos)
                if match is None:
                    break
                host = match.grouphost
                for host_regex in avoid_hosts:
                    if host_regex.search(host):
                        regex_pos = match.end()
                        break
                else:
                    break
            if match is None:
                continue
            if best_pos is None or match.start() < best_pos:
                best_match = match
                best_pos = match.start()
        if best_match is None:
            
            if links:
                assert not links[-1].tail
                links[-1].tail = text
            else:
                assert not leading_text
                leading_text = text
            break
        link = best_match.group0
        end = best_match.end()
        if link.endswith. or link.endswith,:
            
            end -= 1
            link = link[:-1]
        prev_text = text[:best_match.start()]
        if links:
            assert not links[-1].tail
            links[-1].tail = prev_text
        else:
            assert not leading_text
            leading_text = prev_text
        anchor = factorya
        anchor.set(href, link)
        body = best_match.groupbody
        if not body:
            body = link
        if body.endswith. or body.endswith,:
            body = body[:-1]
        anchor.text = body
        links.append(anchor)
        text = text[end:]
    return leading_text, links
                
def autolink_html(html, *args, **kw):
    result_type = type(html)
    if isinstance(html, basestring):
        doc = fromstring(html)
    else:
        doc = copy.deepcopy(html)
    autolink(doc, *args, **kw)
    return _transform_result(result_type, doc)

autolink_html.__doc__ = autolink.__doc__





_avoid_word_break_elements = ['pre', 'textarea', 'code']
_avoid_word_break_classes = [nobreak]

def word_break(el, max_width=40,
               avoid_elements=_avoid_word_break_elements,
               avoid_classes=_avoid_word_break_classes,
               break_character=unichr8203):
    
    
    
    if el.tag in _avoid_word_break_elements:
        return
    class_name = el.getclass
    if class_name:
        dont_break = False
        class_name = class_name.split()
        for avoid in avoid_classes:
            if avoid in class_name:
                dont_break = True
                break
        if dont_break:
            return
    if el.text:
        el.text = _break_text(el.text, max_width, break_character)
    for child in el:
        word_break(child, max_width=max_width,
                   avoid_elements=avoid_elements,
                   avoid_classes=avoid_classes,
                   break_character=break_character)
        if child.tail:
            child.tail = _break_text(child.tail, max_width, break_character)

def word_break_html(html, *args, **kw):
    result_type = type(html)
    doc = fromstring(html)
    word_break(doc, *args, **kw)
    return _transform_result(result_type, doc)

def _break_text(text, max_width, break_character):
    words = text.split()
    for word in words:
        if len(word) > max_width:
            replacement = _insert_break(word, max_width, break_character)
            text = text.replace(word, replacement)
    return text

_break_prefer_re = re.compile([^a-z], re.I)

def _insert_break(word, width, break_character):
    orig_word = word
    result = 
    while len(word) > width:
        start = word[:width]
        breaks = list(_break_prefer_re.finditer(start))
        if breaks:
            last_break = breaks[-1]
            
            if last_break.end() > width-10:
                
                
                start = word[:last_break.end()]
        result += start + break_character
        word = word[len(start):]
    result += word
    return result
    
