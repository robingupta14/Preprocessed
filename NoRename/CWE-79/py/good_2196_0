
from ajenti.http import HttpHandler
from ajenti.api import BasePlugin, plugin, persistent, rootcontext
from ajenti.api.http import HttpPlugin, SocketPlugin
from ajenti.plugins import manager
from ajenti.profiler import *


class SocketIORouteHandler (HttpHandler):
    def __init__(self):
        self.namespaces = {}
        for cls in ajenti.api.http.SocketPlugin.get_classes():
            self.namespaces[cls.name] = cls

    def handle(self, context):
        return str(socketio.socketio_manage(context.env, self.namespaces, context))


class InvalidRouteHandler (HttpHandler):
    def handle(self, context):
        context.respond_not_found()
        return Invalid URL


@plugin
@persistent
@rootcontext
class CentralDispatcher (BasePlugin, HttpHandler):
    def __init__(self):
        self.invalid = InvalidRouteHandler()
        self.io = SocketIORouteHandler()

    @profiled<function <lambda> at 0x7f5fe09820c0>
    def handle(self, context):
        

        if hasattr(context.session, appcontext):
            self.context = context.session.appcontext
        else:
            self.context = ajenti.plugins.manager.context

        if context.path.startswith/ajenti:socket:
            return context.fallthrough(self.io)

        if not hasattr(self.context, http_handlers):
            self.context.http_handlers = ajenti.api.http.HttpPlugin.get_all()

        for instance in self.context.http_handlers:
            try:
                output = instance.handle(context)
            except Exception, e:
                return [self.respond_error(context, e)]
            if output is not None:
                return output
        return context.fallthrough(self.invalid)

    def respond_error(self, context, exception):
        context.respond_server_error()
        stack = traceback.format_exc()
        return  % cgi.escape(stack)
