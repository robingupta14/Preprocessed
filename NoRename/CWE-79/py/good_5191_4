
from __future__ import unicode_literals


from django.contrib.auth.models import User
from django.contrib.contenttypes.fields import (
    GenericForeignKey, GenericRelation,
)
from django.contrib.contenttypes.models import ContentType
from django.core.files.storage import FileSystemStorage
from django.db import models
from django.utils.encoding import python_2_unicode_compatible


@python_2_unicode_compatible
class Section(django.db.models.Model):
    
    name = django.db.models.CharField(max_length=100)

    def __str__(self):
        return self.name

    @property
    def name_property(self):
        
        return self.name


@python_2_unicode_compatible
class Article(django.db.models.Model):
    
    title = django.db.models.CharField(max_length=100)
    content = django.db.models.TextField()
    date = django.db.models.DateTimeField()
    section = django.db.models.ForeignKey(Section, null=True, blank=True)
    sub_section = django.db.models.ForeignKey(Section, null=True, blank=True, on_delete=django.db.models.SET_NULL, related_name=+)

    def __str__(self):
        return self.title

    def model_year(self):
        return self.date.year
    model_year.admin_order_field = date
    model_year.short_description = 

    def model_year_reversed(self):
        return self.date.year
    model_year_reversed.admin_order_field = -date
    model_year_reversed.short_description = 


@python_2_unicode_compatible
class Book(django.db.models.Model):
    
    name = django.db.models.CharField(max_length=100, verbose_name=¿Name?)

    def __str__(self):
        return self.name


@python_2_unicode_compatible
class Promo(django.db.models.Model):
    name = django.db.models.CharField(max_length=100, verbose_name=¿Name?)
    book = django.db.models.ForeignKey(Book)

    def __str__(self):
        return self.name


@python_2_unicode_compatible
class Chapter(django.db.models.Model):
    title = django.db.models.CharField(max_length=100, verbose_name=¿Title?)
    content = django.db.models.TextField()
    book = django.db.models.ForeignKey(Book)

    def __str__(self):
        return self.title

    class Meta:
        
        verbose_name = ¿Chapter?


@python_2_unicode_compatible
class ChapterXtra1(django.db.models.Model):
    chap = django.db.models.OneToOneField(Chapter, verbose_name=¿Chap?)
    xtra = django.db.models.CharField(max_length=100, verbose_name=¿Xtra?)

    def __str__(self):
        return ¿Xtra1: %s % self.xtra


@python_2_unicode_compatible
class ChapterXtra2(django.db.models.Model):
    chap = django.db.models.OneToOneField(Chapter, verbose_name=¿Chap?)
    xtra = django.db.models.CharField(max_length=100, verbose_name=¿Xtra?)

    def __str__(self):
        return ¿Xtra2: %s % self.xtra


class RowLevelChangePermissionModel(django.db.models.Model):
    name = django.db.models.CharField(max_length=100, blank=True)


class CustomArticle(django.db.models.Model):
    content = django.db.models.TextField()
    date = django.db.models.DateTimeField()


@python_2_unicode_compatible
class ModelWithStringPrimaryKey(django.db.models.Model):
    string_pk = django.db.models.CharField(max_length=255, primary_key=True)

    def __str__(self):
        return self.string_pk

    def get_absolute_url(self):
        return /dummy/%s/ % self.string_pk


@python_2_unicode_compatible
class Color(django.db.models.Model):
    value = django.db.models.CharField(max_length=10)
    warm = django.db.models.BooleanField(default=False)

    def __str__(self):
        return self.value



class Color2(Color):
    class Meta:
        proxy = True


@python_2_unicode_compatible
class Thing(django.db.models.Model):
    title = django.db.models.CharField(max_length=20)
    color = django.db.models.ForeignKey(Color, limit_choices_to={'warm': True})
    pub_date = django.db.models.DateField(blank=True, null=True)

    def __str__(self):
        return self.title


@python_2_unicode_compatible
class Actor(django.db.models.Model):
    name = django.db.models.CharField(max_length=50)
    age = django.db.models.IntegerField()
    title = django.db.models.CharField(max_length=50, null=True, blank=True)

    def __str__(self):
        return self.name


@python_2_unicode_compatible
class Inquisition(django.db.models.Model):
    expected = django.db.models.BooleanField(default=False)
    leader = django.db.models.ForeignKey(Actor)
    country = django.db.models.CharField(max_length=20)

    def __str__(self):
        return by %s from %s % (self.leader, self.country)


@python_2_unicode_compatible
class Sketch(django.db.models.Model):
    title = django.db.models.CharField(max_length=100)
    inquisition = django.db.models.ForeignKey(Inquisition, limit_choices_to={'leader__name': 'Palin', 'leader__age': 27, 'expected': False})
    defendant0 = django.db.models.ForeignKey(Actor, limit_choices_to={'title__isnull': False}, related_name=as_defendant0)
    defendant1 = django.db.models.ForeignKey(Actor, limit_choices_to={'title__isnull': True}, related_name=as_defendant1)

    def __str__(self):
        return self.title


def today_callable_dict():
    return {last_action__gte: datetime.datetime.today()}


def today_callable_q():
    return django.db.models.Q(last_action__gte=datetime.datetime.today())


@python_2_unicode_compatible
class Character(django.db.models.Model):
    username = django.db.models.CharField(max_length=100)
    last_action = django.db.models.DateTimeField()

    def __str__(self):
        return self.username


@python_2_unicode_compatible
class StumpJoke(django.db.models.Model):
    variation = django.db.models.CharField(max_length=100)
    most_recently_fooled = django.db.models.ForeignKey(Character, limit_choices_to=today_callable_dict, related_name=+)
    has_fooled_today = django.db.models.ManyToManyField(Character, limit_choices_to=today_callable_q, related_name=+)

    def __str__(self):
        return self.variation


class Fabric(django.db.models.Model):
    NG_CHOICES = (('Textured', (('x', 'Horizontal'), ('y', 'Vertical'))), ('plain', 'Smooth'))
    surface = django.db.models.CharField(max_length=20, choices=NG_CHOICES)


@python_2_unicode_compatible
class Person(django.db.models.Model):
    GENDER_CHOICES = ((1, 'Male'), (2, 'Female'))
    name = django.db.models.CharField(max_length=100)
    gender = django.db.models.IntegerField(choices=GENDER_CHOICES)
    age = django.db.models.IntegerField(default=21)
    alive = django.db.models.BooleanField(default=True)

    def __str__(self):
        return self.name


@python_2_unicode_compatible
class Persona(django.db.models.Model):
    
    name = django.db.models.CharField(blank=False, max_length=80)

    def __str__(self):
        return self.name


@python_2_unicode_compatible
class Account(django.db.models.Model):
    
    username = django.db.models.CharField(blank=False, max_length=80)
    persona = django.db.models.ForeignKey(Persona, related_name=accounts)
    servicename = generic service

    def __str__(self):
        return %s: %s % (self.servicename, self.username)


class FooAccount(Account):
    
    servicename = foo


class BarAccount(Account):
    
    servicename = bar


@python_2_unicode_compatible
class Subscriber(django.db.models.Model):
    name = django.db.models.CharField(blank=False, max_length=80)
    email = django.db.models.EmailField(blank=False, max_length=175)

    def __str__(self):
        return %s (%s) % (self.name, self.email)


class ExternalSubscriber(Subscriber):
    pass


class OldSubscriber(Subscriber):
    pass


class Media(django.db.models.Model):
    name = django.db.models.CharField(max_length=60)


class Podcast(Media):
    release_date = django.db.models.DateField()

    class Meta:
        ordering = ('release_date',)  


class Vodcast(Media):
    media = django.db.models.OneToOneField(Media, primary_key=True, parent_link=True)
    released = django.db.models.BooleanField(default=False)


class Parent(django.db.models.Model):
    name = django.db.models.CharField(max_length=128)


class Child(django.db.models.Model):
    parent = django.db.models.ForeignKey(Parent, editable=False)
    name = django.db.models.CharField(max_length=30, blank=True)


@python_2_unicode_compatible
class EmptyModel(django.db.models.Model):
    def __str__(self):
        return Primary key = %s % self.id


temp_storage = FileSystemStorage(tempfile.mkdtemp())
UPLOAD_TO = os.path.join(temp_storage.location, test_upload)


class Gallery(django.db.models.Model):
    name = django.db.models.CharField(max_length=100)


class Picture(django.db.models.Model):
    name = django.db.models.CharField(max_length=100)
    image = django.db.models.FileField(storage=temp_storage, upload_to=test_upload)
    gallery = django.db.models.ForeignKey(Gallery, related_name=pictures)


class Language(django.db.models.Model):
    iso = django.db.models.CharField(max_length=5, primary_key=True)
    name = django.db.models.CharField(max_length=50)
    english_name = django.db.models.CharField(max_length=50)
    shortlist = django.db.models.BooleanField(default=False)

    class Meta:
        ordering = ('iso',)



class Title(django.db.models.Model):
    pass


class TitleTranslation(django.db.models.Model):
    title = django.db.models.ForeignKey(Title)
    text = django.db.models.CharField(max_length=100)


class Recommender(Title):
    pass


class Recommendation(Title):
    recommender = django.db.models.ForeignKey(Recommender)


class Collector(django.db.models.Model):
    name = django.db.models.CharField(max_length=100)


class Widget(django.db.models.Model):
    owner = django.db.models.ForeignKey(Collector)
    name = django.db.models.CharField(max_length=100)


class DooHickey(django.db.models.Model):
    code = django.db.models.CharField(max_length=10, primary_key=True)
    owner = django.db.models.ForeignKey(Collector)
    name = django.db.models.CharField(max_length=100)


class Grommet(django.db.models.Model):
    code = django.db.models.AutoField(primary_key=True)
    owner = django.db.models.ForeignKey(Collector)
    name = django.db.models.CharField(max_length=100)


class Whatsit(django.db.models.Model):
    index = django.db.models.IntegerField(primary_key=True)
    owner = django.db.models.ForeignKey(Collector)
    name = django.db.models.CharField(max_length=100)


class Doodad(django.db.models.Model):
    name = django.db.models.CharField(max_length=100)


class FancyDoodad(Doodad):
    owner = django.db.models.ForeignKey(Collector)
    expensive = django.db.models.BooleanField(default=True)


@python_2_unicode_compatible
class Category(django.db.models.Model):
    collector = django.db.models.ForeignKey(Collector)
    order = django.db.models.PositiveIntegerField()

    class Meta:
        ordering = ('order',)

    def __str__(self):
        return %s:o%s % (self.id, self.order)


class Link(django.db.models.Model):
    posted = django.db.models.DateField(
        default=<function <lambda> at 0x7f5fe0983f60>
    )
    url = django.db.models.URLField()
    post = django.db.models.ForeignKeyPost
    readonly_link_content = django.db.models.TextField()


class PrePopulatedPost(django.db.models.Model):
    title = django.db.models.CharField(max_length=100)
    published = django.db.models.BooleanField(default=False)
    slug = django.db.models.SlugField()


class PrePopulatedSubPost(django.db.models.Model):
    post = django.db.models.ForeignKey(PrePopulatedPost)
    subtitle = django.db.models.CharField(max_length=100)
    subslug = django.db.models.SlugField()


class Post(django.db.models.Model):
    title = django.db.models.CharField(max_length=100, help_text=Some help text for the title (with unicode ŠĐĆŽćžšđ))
    content = django.db.models.TextField(help_text=Some help text for the content (with unicode ŠĐĆŽćžšđ))
    readonly_content = django.db.models.TextField()
    posted = django.db.models.DateField(
        default=datetime.date.today,
        help_text=Some help text for the date (with unicode ŠĐĆŽćžšđ)
    )
    public = django.db.models.NullBooleanField()

    def awesomeness_level(self):
        return Very awesome.




class FieldOverridePost(Post):
    class Meta:
        proxy = True


@python_2_unicode_compatible
class Gadget(django.db.models.Model):
    name = django.db.models.CharField(max_length=100)

    def __str__(self):
        return self.name


@python_2_unicode_compatible
class Villain(django.db.models.Model):
    name = django.db.models.CharField(max_length=100)

    def __str__(self):
        return self.name


class SuperVillain(Villain):
    pass


@python_2_unicode_compatible
class FunkyTag(django.db.models.Model):
    Because we all know there's only one real use case for GFKs.
    name = django.db.models.CharField(max_length=25)
    content_type = django.db.models.ForeignKey(ContentType)
    object_id = django.db.models.PositiveIntegerField()
    content_object = GenericForeignKey('content_type', 'object_id')

    def __str__(self):
        return self.name


@python_2_unicode_compatible
class Plot(django.db.models.Model):
    name = django.db.models.CharField(max_length=100)
    team_leader = django.db.models.ForeignKey(Villain, related_name=lead_plots)
    contact = django.db.models.ForeignKey(Villain, related_name=contact_plots)
    tags = GenericRelation(FunkyTag)

    def __str__(self):
        return self.name


@python_2_unicode_compatible
class PlotDetails(django.db.models.Model):
    details = django.db.models.CharField(max_length=100)
    plot = django.db.models.OneToOneField(Plot, null=True, blank=True)

    def __str__(self):
        return self.details


class PlotProxy(Plot):
    class Meta:
        proxy = True


@python_2_unicode_compatible
class SecretHideout(django.db.models.Model):
    
    location = django.db.models.CharField(max_length=100)
    villain = django.db.models.ForeignKey(Villain)

    def __str__(self):
        return self.location


@python_2_unicode_compatible
class SuperSecretHideout(django.db.models.Model):
    
    location = django.db.models.CharField(max_length=100)
    supervillain = django.db.models.ForeignKey(SuperVillain)

    def __str__(self):
        return self.location


@python_2_unicode_compatible
class CyclicOne(django.db.models.Model):
    name = django.db.models.CharField(max_length=25)
    two = django.db.models.ForeignKeyCyclicTwo

    def __str__(self):
        return self.name


@python_2_unicode_compatible
class CyclicTwo(django.db.models.Model):
    name = django.db.models.CharField(max_length=25)
    one = django.db.models.ForeignKey(CyclicOne)

    def __str__(self):
        return self.name


class Topping(django.db.models.Model):
    name = django.db.models.CharField(max_length=20)


class Pizza(django.db.models.Model):
    name = django.db.models.CharField(max_length=20)
    toppings = django.db.models.ManyToManyField(Topping, related_name=pizzas)


class Album(django.db.models.Model):
    owner = django.db.models.ForeignKey(User, null=True, blank=True, on_delete=django.db.models.SET_NULL)
    title = django.db.models.CharField(max_length=30)


class Employee(Person):
    code = django.db.models.CharField(max_length=20)


class WorkHour(django.db.models.Model):
    datum = django.db.models.DateField()
    employee = django.db.models.ForeignKey(Employee)


class Question(django.db.models.Model):
    question = django.db.models.CharField(max_length=20)


@python_2_unicode_compatible
class Answer(django.db.models.Model):
    question = django.db.models.ForeignKey(Question, on_delete=django.db.models.PROTECT)
    answer = django.db.models.CharField(max_length=20)

    def __str__(self):
        return self.answer


class Reservation(django.db.models.Model):
    start_date = django.db.models.DateTimeField()
    price = django.db.models.IntegerField()


DRIVER_CHOICES = (('bill', 'Bill G'), ('steve', 'Steve J'))

RESTAURANT_CHOICES = (('indian', 'A Taste of India'), ('thai', 'Thai Pography'), ('pizza', 'Pizza Mama'))


class FoodDelivery(django.db.models.Model):
    reference = django.db.models.CharField(max_length=100)
    driver = django.db.models.CharField(max_length=100, choices=DRIVER_CHOICES, blank=True)
    restaurant = django.db.models.CharField(max_length=100, choices=RESTAURANT_CHOICES, blank=True)

    class Meta:
        unique_together = (('driver', 'restaurant'),)


@python_2_unicode_compatible
class CoverLetter(django.db.models.Model):
    author = django.db.models.CharField(max_length=30)
    date_written = django.db.models.DateField(null=True, blank=True)

    def __str__(self):
        return self.author


class Paper(django.db.models.Model):
    title = django.db.models.CharField(max_length=30)
    author = django.db.models.CharField(max_length=30, blank=True, null=True)


class ShortMessage(django.db.models.Model):
    content = django.db.models.CharField(max_length=140)
    timestamp = django.db.models.DateTimeField(null=True, blank=True)


@python_2_unicode_compatible
class Telegram(django.db.models.Model):
    title = django.db.models.CharField(max_length=30)
    date_sent = django.db.models.DateField(null=True, blank=True)

    def __str__(self):
        return self.title


class Story(django.db.models.Model):
    title = django.db.models.CharField(max_length=100)
    content = django.db.models.TextField()


class OtherStory(django.db.models.Model):
    title = django.db.models.CharField(max_length=100)
    content = django.db.models.TextField()


class ComplexSortedPerson(django.db.models.Model):
    name = django.db.models.CharField(max_length=100)
    age = django.db.models.PositiveIntegerField()
    is_employee = django.db.models.NullBooleanField()


class PluggableSearchPerson(django.db.models.Model):
    name = django.db.models.CharField(max_length=100)
    age = django.db.models.PositiveIntegerField()


class PrePopulatedPostLargeSlug(django.db.models.Model):
    
    title = django.db.models.CharField(max_length=100)
    published = django.db.models.BooleanField(default=False)
    
    slug = django.db.models.SlugField(max_length=1000, db_index=False)


class AdminOrderedField(django.db.models.Model):
    order = django.db.models.IntegerField()
    stuff = django.db.models.CharField(max_length=200)


class AdminOrderedModelMethod(django.db.models.Model):
    order = django.db.models.IntegerField()
    stuff = django.db.models.CharField(max_length=200)

    def some_order(self):
        return self.order
    some_order.admin_order_field = order


class AdminOrderedAdminMethod(django.db.models.Model):
    order = django.db.models.IntegerField()
    stuff = django.db.models.CharField(max_length=200)


class AdminOrderedCallable(django.db.models.Model):
    order = django.db.models.IntegerField()
    stuff = django.db.models.CharField(max_length=200)


@python_2_unicode_compatible
class Report(django.db.models.Model):
    title = django.db.models.CharField(max_length=100)

    def __str__(self):
        return self.title


class MainPrepopulated(django.db.models.Model):
    name = django.db.models.CharField(max_length=100)
    pubdate = django.db.models.DateField()
    status = django.db.models.CharField(
        max_length=20,
        choices=(('option one', 'Option One'), ('option two', 'Option Two')))
    slug1 = django.db.models.SlugField(blank=True)
    slug2 = django.db.models.SlugField(blank=True)


class RelatedPrepopulated(django.db.models.Model):
    parent = django.db.models.ForeignKey(MainPrepopulated)
    name = django.db.models.CharField(max_length=75)
    pubdate = django.db.models.DateField()
    status = django.db.models.CharField(
        max_length=20,
        choices=(('option one', 'Option One'), ('option two', 'Option Two')))
    slug1 = django.db.models.SlugField(max_length=50)
    slug2 = django.db.models.SlugField(max_length=60)


class UnorderedObject(django.db.models.Model):
    
    name = django.db.models.CharField(max_length=255)
    bool = django.db.models.BooleanField(default=True)


class UndeletableObject(django.db.models.Model):
    
    name = django.db.models.CharField(max_length=255)


class UnchangeableObject(django.db.models.Model):
    


class UserMessenger(django.db.models.Model):
    


class Simple(django.db.models.Model):
    


class Choice(django.db.models.Model):
    choice = django.db.models.IntegerField(blank=True, null=True,
        choices=((1, 'Yes'), (0, 'No'), (None, 'No opinion')))


class ParentWithDependentChildren(django.db.models.Model):
    
    some_required_info = django.db.models.PositiveIntegerField()
    family_name = django.db.models.CharField(max_length=255, blank=False)


class DependentChild(django.db.models.Model):
    
    parent = django.db.models.ForeignKey(ParentWithDependentChildren)
    family_name = django.db.models.CharField(max_length=255)


class _Manager(django.db.models.Manager):
    def get_queryset(self):
        return super(_Manager, self).get_queryset().filter(pk__gt=1)


class FilteredManager(django.db.models.Model):
    def __str__(self):
        return PK=%d % self.pk

    pk_gt_1 = _Manager()
    objects = django.db.models.Manager()


class EmptyModelVisible(django.db.models.Model):
     See ticket 


class EmptyModelMixin(django.db.models.Model):
    """ See ticket 


class State(django.db.models.Model):
    name = django.db.models.CharField(max_length=100)


class City(django.db.models.Model):
    state = django.db.models.ForeignKey(State)
    name = django.db.models.CharField(max_length=100)

    def get_absolute_url(self):
        return /dummy/%s/ % self.pk


class Restaurant(django.db.models.Model):
    city = django.db.models.ForeignKey(City)
    name = django.db.models.CharField(max_length=100)

    def get_absolute_url(self):
        return /dummy/%s/ % self.pk


class Worker(django.db.models.Model):
    work_at = django.db.models.ForeignKey(Restaurant)
    name = django.db.models.CharField(max_length=50)
    surname = django.db.models.CharField(max_length=50)



class ReferencedByParent(django.db.models.Model):
    name = django.db.models.CharField(max_length=20, unique=True)


class ParentWithFK(django.db.models.Model):
    fk = django.db.models.ForeignKey(
        ReferencedByParent, to_field=name, related_name=hidden+,
    )


class ChildOfReferer(ParentWithFK):
    pass



class ReferencedByInline(django.db.models.Model):
    name = django.db.models.CharField(max_length=20, unique=True)


class InlineReference(django.db.models.Model):
    fk = django.db.models.ForeignKey(
        ReferencedByInline, to_field=name, related_name=hidden+,
    )


class InlineReferer(django.db.models.Model):
    refs = django.db.models.ManyToManyField(InlineReference)



class Recipe(django.db.models.Model):
    rname = django.db.models.CharField(max_length=20, unique=True)


class Ingredient(django.db.models.Model):
    iname = django.db.models.CharField(max_length=20, unique=True)
    recipes = django.db.models.ManyToManyField(Recipe, through=RecipeIngredient)


class RecipeIngredient(django.db.models.Model):
    ingredient = django.db.models.ForeignKey(Ingredient, to_field=iname)
    recipe = django.db.models.ForeignKey(Recipe, to_field=rname)



class NotReferenced(django.db.models.Model):
    
    pass



class ExplicitlyProvidedPK(django.db.models.Model):
    name = django.db.models.IntegerField(primary_key=True)


class ImplicitlyGeneratedPK(django.db.models.Model):
    name = django.db.models.IntegerField(unique=True)



class ReferencedByGenRel(django.db.models.Model):
    content_type = django.db.models.ForeignKey(ContentType, on_delete=django.db.models.CASCADE)
    object_id = django.db.models.PositiveIntegerField()
    content_object = GenericForeignKey('content_type', 'object_id')


class GenRelReference(django.db.models.Model):
    references = GenericRelation(ReferencedByGenRel)


class ParentWithUUIDPK(django.db.models.Model):
    id = django.db.models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    title = django.db.models.CharField(max_length=100)

    def __str__(self):
        return str(self.id)


class RelatedWithUUIDPKModel(django.db.models.Model):
    parent = django.db.models.ForeignKey(ParentWithUUIDPK, on_delete=django.db.models.CASCADE)
