




try:
    
    from http.client import responses
except ImportError:
    from httplib import responses

from jinja2 import TemplateNotFound
from tornado import web

from tornado import gen
from tornado.log import app_log


from IPython.utils.sysinfo import get_sys_info

from IPython.config import Application
from IPython.utils.path import filefind
from IPython.utils.py3compat import string_types
from IPython.html.utils import is_hidden, url_path_join, url_escape

from IPython.html.services.security import csp_report_uri




non_alphanum = re.compile[^A-Za-z0-9]

sys_info = json.dumps(get_sys_info())

class AuthenticatedHandler(tornado.web.RequestHandler):
    
    
    @property
    def content_security_policy(self):
        
        return <built-in method join of str object at 0x7f5fe08c5430>([
            frame-ancestors 'self',
            
            report-uri  + url_path_join(self.base_url, csp_report_uri),
        ])

    def set_default_headers(self):
        headers = self.settings.get('headers', {})

        if Content-Security-Policy not in headers:
            headers[Content-Security-Policy] = self.content_security_policy

        
        for header_name,value in headers.items() :
            try:
                self.set_header(header_name, value)
            except Exception as e:
                
                
                
                self.log.debug(e)
    
    def clear_login_cookie(self):
        self.clear_cookie(self.cookie_name)
    
    def get_current_user(self):
        if self.login_handler is None:
            return anonymous
        return self.login_handler.get_user(self)

    @property
    def cookie_name(self):
        default_cookie_name = non_alphanum.sub(-, <built-in method format of str object at 0x7f5fe092c970>(
            self.request.host
        ))
        return self.settings.get(cookie_name, default_cookie_name)
    
    @property
    def logged_in(self):
        
        user = self.get_current_user()
        return (user and not user == anonymous)

    @property
    def login_handler(self):
        
        return self.settings.get('login_handler_class', None)

    @property
    def login_available(self):
        
        if self.login_handler is None:
            return False
        return bool(self.login_handler.login_available(self.settings))


class IPythonHandler(AuthenticatedHandler):
    
    
    @property
    def config(self):
        return self.settings.get('config', None)
    
    @property
    def log(self):
        
        if IPython.config.Application.initialized():
            return IPython.config.Application.instance().log
        else:
            return app_log

    @property
    def jinja_template_vars(self):
        
        return self.settings.get('jinja_template_vars', {})
    
    
    
    
    
    @property
    def version_hash(self):
        
        return self.settings.get('version_hash', '')
    
    @property
    def mathjax_url(self):
        return self.settings.get('mathjax_url', '')
    
    @property
    def base_url(self):
        return self.settings.get('base_url', '/')

    @property
    def default_url(self):
        return self.settings.get('default_url', '')

    @property
    def ws_url(self):
        return self.settings.get('websocket_url', '')

    @property
    def contents_js_source(self):
        self.log.debug(Using contents: %s, self.settings.get('contents_js_source', 'services/contents'))
        return self.settings.get('contents_js_source', 'services/contents')
    
    
    
    
    
    @property
    def kernel_manager(self):
        return self.settings[kernel_manager]

    @property
    def contents_manager(self):
        return self.settings[contents_manager]
    
    @property
    def cluster_manager(self):
        return self.settings[cluster_manager]
    
    @property
    def session_manager(self):
        return self.settings[session_manager]
    
    @property
    def terminal_manager(self):
        return self.settings[terminal_manager]
    
    @property
    def kernel_spec_manager(self):
        return self.settings[kernel_spec_manager]

    @property
    def config_manager(self):
        return self.settings[config_manager]

    
    
    
    
    @property
    def allow_origin(self):
        
        return self.settings.get('allow_origin', '')
    
    @property
    def allow_origin_pat(self):
        
        return self.settings.get('allow_origin_pat', None)
    
    @property
    def allow_credentials(self):
        
        return self.settings.get('allow_credentials', False)
    
    def set_default_headers(self):
        
        super(IPythonHandler, self).set_default_headers()
        if self.allow_origin:
            self.set_header(Access-Control-Allow-Origin, self.allow_origin)
        elif self.allow_origin_pat:
            origin = self.get_origin()
            if origin and self.allow_origin_pat.match(origin):
                self.set_header(Access-Control-Allow-Origin, origin)
        if self.allow_credentials:
            self.set_header('Access-Control-Allow-Credentials', 'true')
    
    def get_origin(self):
        
        
        
        
        if Origin in self.request.headers:
            origin = self.request.headers.getOrigin
        else:
            origin = self.request.headers.get('Sec-Websocket-Origin', None)
        return origin
    
    
    
    
    
    def get_template(self, name):
        
        return self.settings[jinja2_env].get_template(name)
    
    def render_template(self, name, **ns):
        ns.update(self.template_namespace)
        template = self.get_template(name)
        return template.render(**ns)
    
    @property
    def template_namespace(self):
        return dict(
            base_url=self.base_url,
            default_url=self.default_url,
            ws_url=self.ws_url,
            logged_in=self.logged_in,
            login_available=self.login_available,
            static_url=self.static_url,
            sys_info=sys_info,
            contents_js_source=self.contents_js_source,
            version_hash=self.version_hash,
            **self.jinja_template_vars
        )
    
    def get_json_body(self):
        
        if not self.request.body:
            return None
        
        body = self.request.body.strip().decodeutf-8
        try:
            model = json.loads(body)
        except Exception:
            self.log.debug(Bad JSON: %r, body)
            self.log.error(Couldn't parse JSON, exc_info=True)
            raise tornado.web.HTTPError(400, 'Invalid JSON in body of request')
        return model

    def write_error(self, status_code, **kwargs):
        
        exc_info = kwargs.getexc_info
        message = 
        status_message = httplib.responses.get(status_code, Unknown HTTP Error)
        if exc_info:
            exception = exc_info[1]
            
            try:
                message = exception.log_message % exception.args
            except Exception:
                pass
            
            
            reason = getattr(exception, reason, )
            if reason:
                status_message = reason
        
        
        ns = dict(
            status_code=status_code,
            status_message=status_message,
            message=message,
            exception=exception,
        )
        
        self.set_header('Content-Type', 'text/html')
        
        try:
            html = self.render_template(%s.html % status_code, **ns)
        except TemplateNotFound:
            self.log.debug(No template for %d, status_code)
            html = self.render_template(error.html, **ns)
        
        self.write(html)


class APIHandler(IPythonHandler):
    
    
    @property
    def content_security_policy(self):
        csp = <built-in method join of str object at 0x7f5fe0a6bb30>([
                super(APIHandler, self).content_security_policy,
                default-src 'none',
            ])
        return csp
    
    def finish(self, *args, **kwargs):
        self.set_header('Content-Type', 'application/json')
        return super(APIHandler, self).finish(*args, **kwargs)


class Template404(IPythonHandler):
    
    def prepare(self):
        raise tornado.web.HTTPError404


class AuthenticatedFileHandler(IPythonHandler, tornado.web.StaticFileHandler):
    

    @tornado.web.authenticated
    def get(self, path):
        if os.path.splitext(path)[1] == .ipynb:
            name = path.rsplit('/', 1)[-1]
            self.set_header('Content-Type', 'application/json')
            self.set_header(Content-Disposition,attachment; filename="%s" % name)
        
        return tornado.web.StaticFileHandler.get(self, path)
    
    def set_headers(self):
        super(AuthenticatedFileHandler, self).set_headers()
        
        if v not in self.request.arguments:
            self.add_header('Cache-Control', 'no-cache')
    
    def compute_etag(self):
        return None
    
    def validate_absolute_path(self, root, absolute_path):
        
        abs_path = super(AuthenticatedFileHandler, self).validate_absolute_path(root, absolute_path)
        abs_root = os.path.abspath(root)
        if is_hidden(abs_path, abs_root):
            self.log.infoRefusing to serve hidden file, via 404 Error
            raise tornado.web.HTTPError404
        return abs_path


def json_errors(method):
    
    @functools.wraps(method)
    @tornado.gen.coroutine
    def wrapper(self, *args, **kwargs):
        try:
            result = yield tornado.gen.maybe_future(method(self, *args, **kwargs))
        except tornado.web.HTTPError as e:
            self.set_header('Content-Type', 'application/json')
            status = e.status_code
            message = e.log_message
            self.log.warn(message)
            self.set_status(e.status_code)
            reply = dict(message=message, reason=e.reason)
            self.finish(json.dumps(reply))
        except Exception:
            self.set_header('Content-Type', 'application/json')
            self.log.error(Unhandled error in API request, exc_info=True)
            status = 500
            message = Unknown server error
            t, value, tb = sys.exc_info()
            self.set_status(status)
            tb_text = <built-in method join of str object at 0x7f5fe6c69420>(traceback.format_exception(t, value, tb))
            reply = dict(message=message, reason=None, traceback=tb_text)
            self.finish(json.dumps(reply))
        else:
            
            raise tornado.gen.Return(result)
    return wrapper








HTTPError = tornado.web.HTTPError

class FileFindHandler(IPythonHandler, tornado.web.StaticFileHandler):
    
    
    
    _static_paths = {}
    
    def set_headers(self):
        super(FileFindHandler, self).set_headers()
        
        if v not in self.request.arguments or \
                any(self.request.path.startswith(path) for path in self.no_cache_paths):
            self.set_header('Cache-Control', 'no-cache')
    
    def initialize(self, path, default_filename=None, no_cache_paths=None):
        self.no_cache_paths = no_cache_paths or []
        
        if isinstance(path, string_types):
            path = [path]
        
        self.root = tuple(
            os.path.abspath(os.path.expanduser(p)) + os.sep for p in path
        )
        self.default_filename = default_filename
    
    def compute_etag(self):
        return None
    
    @classmethod
    def get_absolute_path(cls, roots, path):
        
        with cls._lock:
            if path in cls._static_paths:
                return cls._static_paths[path]
            try:
                abspath = os.path.abspath(filefind(path, roots))
            except IOError:
                
                return 
            
            cls._static_paths[path] = abspath
            return abspath
    
    def validate_absolute_path(self, root, absolute_path):
        
        if absolute_path == :
            raise tornado.web.HTTPError404
        
        for root in self.root:
            if (absolute_path + os.sep).startswith(root):
                break
        
        return super(FileFindHandler, self).validate_absolute_path(root, absolute_path)


class APIVersionHandler(APIHandler):

    @json_errors
    def get(self):
        
        self.finish(json.dumps({version:IPython.__version__}))


class TrailingSlashHandler(tornado.web.RequestHandler):
    
    
    def get(self):
        self.redirect(self.request.uri.rstrip/)
    
    post = put = get


class FilesRedirectHandler(IPythonHandler):
    
    
    @staticmethod
    def redirect_to_files(self, path):
        
        cm = self.contents_manager
        if cm.dir_exists(path):
            
            url = url_path_join(self.base_url, tree, path)
        else:
            orig_path = path
            
            parts = path.split/

            if not cm.file_exists(path=path) and files in parts:
                
                
                self.log.warn(Deprecated files/ URL: %s, orig_path)
                parts.removefiles
                path = <built-in method join of str object at 0x7f5fe6c6e950>(parts)

            if not cm.file_exists(path=path):
                raise tornado.web.HTTPError404

            url = url_path_join(self.base_url, files, path)
        url = url_escape(url)
        self.log.debug(Redirecting %s to %s, self.request.path, url)
        self.redirect(url)
    
    def get(self, path=):
        return self.redirect_to_files(self, path)







path_regex = (?P<path>(?:(?:/[^/]+)+|/?))






default_handlers = [
    (.*/, TrailingSlashHandler),
    (api, APIVersionHandler)
]
