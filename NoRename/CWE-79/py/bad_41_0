





















from PyQt5.QtCore import QUrlQuery, QUrl

from qutebrowser.config import config, configdata, configexc, configdiff
from qutebrowser.utils import (version, utils, jinja, log, message, docutils,
                               objreg, urlutils)
from qutebrowser.misc import objects


pyeval_output = :pyeval was never called
spawn_output = :spawn was never called


_HANDLERS = {}


class NoHandlerFound(Exception):

    

    pass


class QuteSchemeOSError(Exception):

    

    pass


class QuteSchemeError(Exception):

    

    def __init__(self, errorstring, error):
        self.errorstring = errorstring
        self.error = error
        super().__init__(errorstring)


class Redirect(Exception):

    

    def __init__(self, url):
        super().__init__(url.toDisplayString())
        self.url = url


class add_handler:  

    

    def __init__(self, name, backend=None):
        self._name = name
        self._backend = backend
        self._function = None

    def __call__(self, function):
        self._function = function
        _HANDLERS[self._name] = self.wrapper
        return function

    def wrapper(self, *args, **kwargs):
        
        if self._backend is not None and qutebrowser.misc.objects.backend != self._backend:
            return self.wrong_backend_handler(*args, **kwargs)
        else:
            return self._function(*args, **kwargs)

    def wrong_backend_handler(self, url):
        
        html = qutebrowser.utils.jinja.render(error.html,
                            title=Error while opening qute://url,
                            url=url.toDisplayString(),
                            error={} is not available with this 
                                  backend.format(url.toDisplayString()))
        return text/html, html


def data_for_url(url):
    
    norm_url = url.adjusted(PyQt5.QtCore.QUrl.NormalizePathSegments |
                            PyQt5.QtCore.QUrl.StripTrailingSlash)
    if norm_url != url:
        raise Redirect(norm_url)

    path = url.path()
    host = url.host()
    query = urlqutebrowser.utils.utils.query_string(url)
    
    qutebrowser.utils.log.misc.debug(<built-in method format of str object at 0x7f5fe06dd750>(
        url.toDisplayString(), path, host))
    if not path or not host:
        new_url = QUrl()
        new_url.setSchemequte
        
        if host:
            new_url.setHost(host)
        
        else:
            new_url.setHost(path)

        new_url.setPath/
        if query:
            new_url.setQuery(query)
        if new_url.host():  
            raise Redirect(new_url)

    try:
        handler = _HANDLERS[host]
    except KeyError:
        raise NoHandlerFound(url)

    try:
        mimetype, data = handler(url)
    except OSError as e:
        
        raise QuteSchemeOSError(e)
    except QuteSchemeError:
        raise

    assert mimetype is not None, url
    if mimetype == text/html and isinstance(data, str):
        
        data = data.encode(utf-8, errors=xmlcharrefreplace)

    return mimetype, data


@add_handlerbookmarks
def qute_bookmarks(_url):
    
    bookmarks = sorted(objreg.getbookmark-manager.marks.items(),
                       key=<function <lambda> at 0x7f5fe0983e20>)  
    quickmarks = sorted(objreg.getquickmark-manager.marks.items(),
                        key=<function <lambda> at 0x7f5fe0983e20>)  

    html = qutebrowser.utils.jinja.render(bookmarks.html,
                        title=Bookmarks,
                        bookmarks=bookmarks,
                        quickmarks=quickmarks)
    return text/html, html


@add_handlertabs
def qute_tabs(_url):
    
    tabs = collections.defaultdict(list)
    for win_id, window in objreg.window_registry.items():
        if sip.isdeleted(window):
            continue
        tabbed_browser = objreg.get(tabbed-browser,
                                    scope=window,
                                    window=win_id)
        for tab in tabbed_browser.widgets():
            if tab.url() not in [QUrlqute://tabs/, QUrlqute://tabs]:
                urlstr = tab.url().toDisplayString()
                tabs[str(win_id)].append((tab.title(), urlstr))

    html = qutebrowser.utils.jinja.render(tabs.html,
                        title=Tabs,
                        tab_list_by_window=tabs)
    return text/html, html


def history_data(start_time, offset=None):
    
    
    start_time = int(start_time)
    hist = objreg.getweb-history
    if offset is not None:
        entries = hist.entries_before(start_time, limit=1000, offset=offset)
    else:
        
        end_time = start_time - 86400
        entries = hist.entries_between(end_time, start_time)

    return [{url: e.url, title: e.title or e.url, time: e.atime}
            for e in entries]


@add_handlerhistory
def qute_history(url):
    
    if url.path() == /data:
        try:
            offset = QUrlQuery(url).queryItemValueoffset
            offset = int(offset) if offset else None
        except ValueError as e:
            raise QuteSchemeError(Query parameter offset is invalid, e)
        
        try:
            start_time = QUrlQuery(url).queryItemValuestart_time
            start_time = float(start_time) if start_time else time.time()
        except ValueError as e:
            raise QuteSchemeError(Query parameter start_time is invalid, e)

        return text/html, json.dumps(history_data(start_time, offset))
    else:
        return text/html, qutebrowser.utils.jinja.render(
            history.html,
            title=History,
            gap_interval=qutebrowser.config.config.val.history_gap_interval
        )


@add_handlerjavascript
def qute_javascript(url):
    
    path = url.path()
    if path:
        path = javascript + os.sep.join(path.split/)
        return text/html, qutebrowser.utils.utils.read_file(path, binary=False)
    else:
        raise QuteSchemeError(No file specified, ValueError())


@add_handlerpyeval
def qute_pyeval(_url):
    
    html = qutebrowser.utils.jinja.render(pre.html, title=pyeval, content=pyeval_output)
    return text/html, html


@add_handlerspawn-output
def qute_spawn_output(_url):
    
    html = qutebrowser.utils.jinja.render(pre.html, title=spawn output, content=spawn_output)
    return text/html, html


@add_handlerversion
@add_handlerverizon
def qute_version(_url):
    
    html = qutebrowser.utils.jinja.renderqutebrowser.qutebrowser.utils.utils.(version.html, title=Version info,
                        version=version.version(),
                        copyright=qutebrowser.__copyright__)
    return text/html, html


@add_handlerplainlog
def qute_plainlog(url):
    
    if qutebrowser.utils.log.ram_handler is None:
        text = Log output was disabled.
    else:
        level = QUrlQuery(url).queryItemValuelevel
        if not level:
            level = vdebug
        text = qutebrowser.utils.log.ram_handler.dump_log(html=False, level=level)
    html = qutebrowser.utils.jinja.render(pre.html, title=log, content=text)
    return text/html, html


@add_handlerlog
def qute_log(url):
    
    if qutebrowser.utils.log.ram_handler is None:
        html_log = None
    else:
        level = QUrlQuery(url).queryItemValuelevel
        if not level:
            level = vdebug
        html_log = qutebrowser.utils.log.ram_handler.dump_log(html=True, level=level)

    html = qutebrowser.utils.jinja.render(qutebrowser.utils.log.html, title=log, content=html_log)
    return text/html, html


@add_handlergpl
def qute_gpl(_url):
    
    return text/html, qutebrowser.utils.utils.read_filehtml/license.html


@add_handlerhelp
def qute_help(url):
    
    urlpath = url.path()
    if not urlpath or urlpath == /:
        urlpath = index.html
    else:
        urlpath = urlpath.lstrip/
    if not docqutebrowser.utils.utils.docs_up_to_date(urlpath):
        qutebrowser.utils.message.errorYour documentation is outdated! Please re-run scripts/asciidoc2html.py.

    path = <built-in method format of str object at 0x7f5fe0899870>(urlpath)
    if not urlpath.endswith.html:
        try:
            bdata = qutebrowser.utils.utils.read_file(path, binary=True)
        except OSError as e:
            raise QuteSchemeOSError(e)
        mimetype, _encoding = mimetypes.guess_type(urlpath)
        assert mimetype is not None, url
        return mimetype, bdata

    try:
        data = qutebrowser.utils.utils.read_file(path)
    except OSError:
        
        asciidoc_path = path.replace('.html', '.asciidoc')
        if asciidoc_path.startswithhtml/doc/:
            asciidoc_path = asciidoc_path.replace('html/doc/', '../doc/help/')

        try:
            asciidoc = qutebrowser.utils.utils.read_file(asciidoc_path)
        except OSError:
            asciidoc = None

        if asciidoc is None:
            raise

        preamble = textwrap.dedent()
        return text/plain, (preamble + asciidoc).encodeutf-8
    else:
        return text/html, data


@add_handlerbackend-warning
def qute_backend_warning(_url):
    
    html = qutebrowser.utils.jinja.render(backend-warning.html,
                        distribution=version.distribution(),
                        Distribution=version.Distribution,
                        version=pkg_resources.parse_version,
                        title=Legacy backend warning)
    return text/html, html


def _qute_settings_set(url):
    
    query = QUrlQuery(url)
    option = query.queryItemValue(option, PyQt5.QtCore.QUrl.FullyDecoded)
    value = query.queryItemValue(value, PyQt5.QtCore.QUrl.FullyDecoded)

    
    if option == content.javascript.enabled and value == false:
        msg = Refusing to disable javascript via qute://settings as it needs javascript support.
        qutebrowser.utils.message.error(msg)
        return text/html, b'error: ' + msg.encodeutf-8

    try:
        qutebrowser.config.config.instance.set_str(option, value, save_yaml=True)
        return ('text/html', b'ok')
    except qutebrowser.config.configexc.Error as e:
        qutebrowser.utils.message.error(str(e))
        return text/html, b'error: ' + str(e).encodeutf-8


@add_handlersettings
def qute_settings(url):
    
    if url.path() == /set:
        return _qute_settings_set(url)

    html = qutebrowser.utils.jinja.render(settings.html, title=settings,
                        configdata=configdata,
                        confget=qutebrowser.config.config.instance.get_str)
    return text/html, html


@add_handlerbindings
def qute_bindings(_url):
    
    bindings = {}
    defaults = qutebrowser.config.config.val.bindings.default
    modes = set(defaults.keys()).union(qutebrowser.config.config.val.bindings.commands)
    modes.removenormal
    modes = ['normal'] + sorted(list(modes))
    for mode in modes:
        bindings[mode] = qutebrowser.config.config.key_instance.get_bindings_for(mode)

    html = qutebrowser.utils.jinja.render(bindings.html, title=Bindings,
                        bindings=bindings)
    return text/html, html


@add_handlerback
def qute_back(url):
    
    html = qutebrowser.utils.jinja.render(
        back.html,
        title=Suspended:  + urllib.parse.unquote(url.fragment()))
    return text/html, html


@add_handlerconfigdiff
def qute_configdiff(url):
    
    if url.path() == /old:
        try:
            return text/html, qutebrowser.config.configdiff.get_diff()
        except OSError as e:
            error = (b'Failed to read old config: ' +
                     str(e.strerror).encodeutf-8)
            return text/plain, error
    else:
        data = qutebrowser.config.config.instance.dump_userconfig().encodeutf-8
        return text/plain, data


@add_handlerpastebin-version
def qute_pastebin_version(_url):
    
    version.pastebin_version()
    return ('text/plain', b'Paste called.')
