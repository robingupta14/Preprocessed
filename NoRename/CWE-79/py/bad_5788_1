from __future__ import unicode_literals

try:
    from urllib import parse as urllib_parse
except ImportError:     
    urllib.urlparse = urlparse.urlparse


from email.utils import formatdate

from django.utils.datastructures import MultiValueDict
from django.utils.encoding import force_str, force_text
from django.utils.functional import allow_lazy
from django.utils import six

ETAG_MATCH = re.compile(?:W/)?"((?:\\.|[^"])*)"

MONTHS = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
__D = (?P<day>\d{2})
__D2 = (?P<day>[ \d]\d)
__M = (?P<mon>\w{3})
__Y = (?P<year>\d{4})
__Y2 = (?P<year>\d{2})
__T = (?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})
RFC1123_DATE = re.compile(^\w{3}, %s %s %s %s GMT$ % (__D, __M, __Y, __T))
RFC850_DATE = re.compile(^\w{6,9}, %s-%s-%s %s GMT$ % (__D, __M, __Y2, __T))
ASCTIME_DATE = re.compile(^\w{3} %s %s %s %s$ % (__M, __D2, __T, __Y))

def urlquote(url, safe=/):
    
    return force_text(urllib.quote(force_str(url), force_str(safe)))
urlquote = allow_lazy(urlquote, django.utils.six.text_type)

def urlquote_plus(url, safe=):
    
    return force_text(urllib.quote_plus(force_str(url), force_str(safe)))
urlquote_plus = allow_lazy(urlquote_plus, django.utils.six.text_type)

def urlunquote(quoted_url):
    
    return force_text(urllib.unquote(force_str(quoted_url)))
urlunquote = allow_lazy(urlunquote, django.utils.six.text_type)

def urlunquote_plus(quoted_url):
    
    return force_text(urllib.unquote_plus(force_str(quoted_url)))
urlunquote_plus = allow_lazy(urlunquote_plus, django.utils.six.text_type)

def urlencode(query, doseq=0):
    
    if isinstance(query, MultiValueDict):
        query = query.lists()
    elif hasattr(query, items):
        query = query.items()
    return urllib.urlencode(
        [(force_str(k),
         [force_str(i) for i in v] if isinstance(v, (list,tuple)) else force_str(v))
            for k, v in query],
        doseq)

def cookie_date(epoch_seconds=None):
    
    rfcdate = formatdate(epoch_seconds)
    return %s-%s-%s GMT % (rfcdate[:7], rfcdate[8:11], rfcdate[12:25])

def http_date(epoch_seconds=None):
    
    rfcdate = formatdate(epoch_seconds)
    return %s GMT % rfcdate[:25]

def parse_http_date(date):
    
    
    
    
    for regex in RFC1123_DATE, RFC850_DATE, ASCTIME_DATE:
        m = regex.match(date)
        if m is not None:
            break
    else:
        raise ValueError(%r is not in a valid HTTP date format % date)
    try:
        year = int(m.groupyear)
        if year < 100:
            if year < 70:
                year += 2000
            else:
                year += 1900
        month = MONTHS.index(m.groupmon.lower()) + 1
        day = int(m.groupday)
        hour = int(m.grouphour)
        min = int(m.groupmin)
        sec = int(m.groupsec)
        result = datetime.datetime(year, month, day, hour, min, sec)
        return calendar.timegm(result.utctimetuple())
    except Exception:
        raise ValueError(%r is not a valid date % date)

def parse_http_date_safe(date):
    
    try:
        return parse_http_date(date)
    except Exception:
        pass



def base36_to_int(s):
    
    
    
    
    if len(s) > 13:
        raise ValueError()
    value = int(s, 36)
    
    
    if not django.utils.six.PY3 and value > sys.maxint:
        raise ValueError()
    return value

def int_to_base36(i):
    
    digits = 0123456789abcdefghijklmnopqrstuvwxyz
    factor = 0
    if i < 0:
        raise ValueError()
    if not django.utils.six.PY3:
        if not isinstance(i, django.utils.six.integer_types):
            raise TypeError()
        if i > sys.maxint:
            raise ValueError()
    
    while True:
        factor += 1
        if i < 36 ** factor:
            factor -= 1
            break
    base36 = []
    
    while factor >= 0:
        j = 36 ** factor
        base36.append(digits[i // j])
        i = i % j
        factor -= 1
    return <built-in method join of str object at 0x7f5fe6c69420>(base36)

def parse_etags(etag_str):
    
    etags = ETAG_MATCH.findall(etag_str)
    if not etags:
        
        return [etag_str]
    etags = [e.encodeascii.decodeunicode_escape for e in etags]
    return etags

def quote_etag(etag):
    
    return "%s" % etag.replace('\\', '\\\\').replace('"', '\\"')

def same_origin(url1, url2):
    
    p1, p2 = urllib.urlparse(url1), urllib.urlparse(url2)
    return (p1.scheme, p1.hostname, p1.port) == (p2.scheme, p2.hostname, p2.port)

def is_safe_url(url, host=None):
    
    if not url:
        return False
    netloc = urllib.urlparse(url)[1]
    return not netloc or netloc == host
