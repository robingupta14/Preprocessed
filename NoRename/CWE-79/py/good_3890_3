
from django import forms
from django.conf import settings
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.core.exceptions import ValidationError
from django.core.paginator import EmptyPage, PageNotAnInteger, Paginator
from django.core.serializers.json import DjangoJSONEncoder
from django.db import models
from django.shortcuts import redirect, render
from modelcluster.contrib.taggit import ClusterTaggableManager
from modelcluster.fields import ParentalKey, ParentalManyToManyField
from modelcluster.models import ClusterableModel
from taggit.managers import TaggableManager
from taggit.models import TaggedItemBase

from wagtail.admin.edit_handlers import (
    FieldPanel, InlinePanel, MultiFieldPanel, ObjectList, PageChooserPanel, StreamFieldPanel,
    TabbedInterface)
from wagtail.admin.forms import WagtailAdminPageForm
from wagtail.admin.mail import send_mail
from wagtail.contrib.django.forms.forms import FormBuilder
from wagtail.contrib.django.forms.models import (
    FORM_FIELD_CHOICES, AbstractEmailForm, AbstractFormField, AbstractFormSubmission)
from wagtail.contrib.django.conf.settings.models import BaseSetting, register_setting
from wagtail.contrib.sitemaps import Sitemap
from wagtail.contrib.table_block.blocks import TableBlock
from wagtail.core.blocks import CharBlock, RawHTMLBlock, RichTextBlock, StructBlock
from wagtail.core.fields import RichTextField, StreamField
from wagtail.core.models import Orderable, Page, PageManager, PageQuerySet
from wagtail.documents.edit_handlers import DocumentChooserPanel
from wagtail.documents.models import AbstractDocument, Document
from wagtail.images.blocks import ImageChooserBlock
from wagtail.images.edit_handlers import ImageChooserPanel
from wagtail.images.models import AbstractImage, AbstractRendition, Image
from wagtail.search import index
from wagtail.snippets.edit_handlers import SnippetChooserPanel
from wagtail.snippets.models import register_snippet
from wagtail.utils.decorators import cached_classmethod

from .forms import FormClassAdditionalFieldPageForm, ValidatedPageForm
from .views import CustomSubmissionsListView

EVENT_AUDIENCE_CHOICES = (('public', 'Public'), ('private', 'Private'))


COMMON_PANELS = (
    FieldPanelslug,
    FieldPanelseo_title,
    FieldPanelshow_in_menus,
    FieldPanelsearch_description,
)




class LinkFields(django.db.models.Model):
    link_external = django.db.models.URLField(External link, blank=True)
    link_page = django.db.models.ForeignKey(
        wagtailcore.Page,
        null=True,
        blank=True,
        related_name=+,
        on_delete=django.db.models.CASCADE
    )
    link_document = django.db.models.ForeignKey(
        wagtaildocs.Document,
        null=True,
        blank=True,
        related_name=+,
        on_delete=django.db.models.CASCADE
    )

    @property
    def link(self):
        if self.link_page:
            return self.link_page.url
        elif self.link_document:
            return self.link_document.url
        else:
            return self.link_external

    panels = [
        FieldPanellink_external,
        PageChooserPanellink_page,
        DocumentChooserPanellink_document,
    ]

    class Meta:
        abstract = True




class CarouselItem(LinkFields):
    image = django.db.models.ForeignKey(
        wagtailimages.Image,
        null=True,
        blank=True,
        on_delete=django.db.models.SET_NULL,
        related_name=+
    )
    embed_url = django.db.models.URLField(Embed URL, blank=True)
    caption = django.db.models.CharField(max_length=255, blank=True)

    panels = [
        ImageChooserPanelimage,
        FieldPanelembed_url,
        FieldPanelcaption,
        MultiFieldPanel(LinkFields.panels, Link),
    ]

    class Meta:
        abstract = True




class RelatedLink(LinkFields):
    title = django.db.models.CharField(max_length=255, help_text=Link title)

    panels = [
        FieldPaneltitle,
        MultiFieldPanel(LinkFields.panels, Link),
    ]

    class Meta:
        abstract = True



class SimplePage(Page):
    content = django.db.models.TextField()

    content_panels = [
        FieldPanel(title, classname=full title),
        FieldPanelcontent,
    ]

    def get_admin_display_title(self):
        return %s (simple page) % super().get_admin_display_title()



class PageWithExcludedCopyField(Page):
    content = django.db.models.TextField()

    
    special_field = django.db.models.CharField(
        blank=True, max_length=255, default=Very Special)
    exclude_fields_in_copy = ['special_field']

    content_panels = [
        FieldPanel(title, classname=full title),
        FieldPanelspecial_field,
        FieldPanelcontent,
    ]


class PageWithOldStyleRouteMethod(Page):
    
    content = django.db.models.TextField()
    template = tests/simple_page.html

    def route(self, request, path_components):
        return self.serve(request)



class FilePage(Page):
    file_field = django.db.models.FileField()


Filewagtail.core.models.Page.content_panels = [
    FieldPanel(title, classname=full title),
    FieldPanelfile_field,
]




class EventPageCarouselItem(Orderable, CarouselItem):
    page = ParentalKey(tests.EventPage, related_name=carousel_items, on_delete=django.db.models.CASCADE)


class EventPageRelatedLink(Orderable, RelatedLink):
    page = ParentalKey(tests.EventPage, related_name=related_links, on_delete=django.db.models.CASCADE)


class EventPageSpeakerAward(Orderable, django.db.models.Model):
    speaker = ParentalKey(tests.EventPageSpeaker, related_name=awards, on_delete=django.db.models.CASCADE)
    name = django.db.models.CharField(Award name, max_length=255)
    date_awarded = django.db.models.DateField(null=True, blank=True)

    panels = [
        FieldPanelname,
        FieldPaneldate_awarded,
    ]


class EventPageSpeaker(Orderable, LinkFields, ClusterableModel):
    page = ParentalKey(tests.EventPage, related_name=speakers, related_query_name=speaker, on_delete=django.db.models.CASCADE)
    first_name = django.db.models.CharField(Name, max_length=255, blank=True)
    last_name = django.db.models.CharField(Surname, max_length=255, blank=True)
    image = django.db.models.ForeignKey(
        wagtailimages.Image,
        null=True,
        blank=True,
        on_delete=django.db.models.SET_NULL,
        related_name=+
    )

    @property
    def name_display(self):
        return self.first_name +   + self.last_name

    panels = [
        FieldPanelfirst_name,
        FieldPanellast_name,
        ImageChooserPanelimage,
        MultiFieldPanel(LinkFields.panels, Link),
        InlinePanel(awards, label=Awards),
    ]


class EventCategory(django.db.models.Model):
    name = django.db.models.CharField(Name, max_length=255)

    def __str__(self):
        return self.name





class EventPageForm(WagtailAdminPageForm):
    def clean(self):
        cleaned_data = super().clean()

        
        start_date = cleaned_data[date_from]
        end_date = cleaned_data[date_to]
        if start_date and end_date and start_date > end_date:
            raise ValidationError()

        return cleaned_data


class EventPage(Page):
    date_from = django.db.models.DateField(Start date, null=True)
    date_to = django.db.models.DateField(
        End date,
        null=True,
        blank=True,
        help_text=Not required if event is on a single day
    )
    time_from = django.db.models.TimeField(Start time, null=True, blank=True)
    time_to = django.db.models.TimeField(End time, null=True, blank=True)
    audience = django.db.models.CharField(max_length=255, choices=EVENT_AUDIENCE_CHOICES)
    location = django.db.models.CharField(max_length=255)
    body = RichTextField(blank=True)
    cost = django.db.models.CharField(max_length=255)
    signup_link = django.db.models.URLField(blank=True)
    feed_image = django.db.models.ForeignKey(
        wagtailimages.Image,
        null=True,
        blank=True,
        on_delete=django.db.models.SET_NULL,
        related_name=+
    )
    categories = ParentalManyToManyField(EventCategory, blank=True)

    search_fields = [
        wagtail.search.index.SearchFieldget_audience_display,
        wagtail.search.index.SearchFieldlocation,
        wagtail.search.index.SearchFieldbody,
        wagtail.search.index.FilterFieldurl_path,
    ]

    password_required_template = tests/event_page_password_required.html
    base_form_class = EventPageForm


Eventwagtail.core.models.Page.content_panels = [
    FieldPanel(title, classname=full title),
    FieldPaneldate_from,
    FieldPaneldate_to,
    FieldPaneltime_from,
    FieldPaneltime_to,
    FieldPanellocation,
    FieldPanelaudience,
    FieldPanelcost,
    FieldPanelsignup_link,
    InlinePanel(carousel_items, label=Carousel items),
    FieldPanel(body, classname=full),
    InlinePanel(speakers, label=Speakers, heading=Speaker lineup),
    InlinePanel(related_links, label=Related links),
    FieldPanelcategories,
    
    InlinePanel(head_counts, label=Head Counts),
]

Eventwagtail.core.models.Page.promote_panels = [
    MultiFieldPanel(COMMON_PANELS, Common page configuration),
    ImageChooserPanelfeed_image,
]


class HeadCountRelatedModelUsingPK(django.db.models.Model):
    
    custom_id = django.db.models.AutoField(primary_key=True)
    event_page = ParentalKey(
        EventPage,
        on_delete=django.db.models.CASCADE,
        related_name=head_counts
    )
    head_count = django.db.models.IntegerField()
    panels = [FieldPanelhead_count]




class FormClassAdditionalFieldPage(Page):
    location = django.db.models.CharField(max_length=255)
    body = RichTextField(blank=True)

    content_panels = [
        FieldPanel(title, classname=full title),
        FieldPanellocation,
        FieldPanelbody,
        FieldPanelcode,  
    ]

    base_form_class = FormClassAdditionalFieldPageForm



class SingleEventPage(EventPage):
    excerpt = django.db.models.TextField(
        max_length=255,
        blank=True,
        null=True,
        help_text=Short text to describe what is this action about
    )

    
    def get_url_parts(self, request=None):
        url_parts = super().get_url_parts(request=request)
        if url_parts is None:
            return None
        else:
            site_id, root_url, page_path = url_parts
            return (site_id, root_url, page_path + pointless-suffix/)

    def route(self, request, path_components):
        if path_components == ['pointless-suffix']:
            
            return super().route(request, [])
        else:
            
            return super().route(request, path_components)

    def get_admin_display_title(self):
        return %s (single event) % super().get_admin_display_title()


SingleEventwagtail.core.models.Page.content_panels = [FieldPanelexcerpt] + Eventwagtail.core.models.Page.content_panels



class EventSitemap(Sitemap):
    pass



class EventIndex(Page):
    intro = RichTextField(blank=True)
    ajax_template = tests/includes/event_listing.html

    def get_events(self):
        return self.get_children().live().type(EventPage)

    def get_paginator(self):
        return Paginator(self.get_events(), 4)

    def get_context(self, request, page=1):
        
        paginator = self.get_paginator()
        try:
            events = paginator.page(page)
        except PageNotAnInteger:
            events = paginator.page1
        except EmptyPage:
            events = paginator.page(paginator.num_pages)

        
        context = super().get_context(request)
        context[events] = events
        return context

    def route(self, request, path_components):
        if self.live and len(path_components) == 1:
            try:
                return self.serve(request, page=int(path_components[0]))
            except (TypeError, ValueError):
                pass

        return super().route(request, path_components)

    def get_static_site_paths(self):
        
        page_count = self.get_paginator().num_pages

        
        for page in range(page_count):
            yield /%d/ % (page + 1)

        
        for path in super().get_static_site_paths():
            yield path

    def get_sitemap_urls(self, request=None):
        
        return super().get_sitemap_urls(request=request) + [
            {
                location: self.full_url + past/,
                lastmod: self.latest_revision_created_at
            }
        ]

    def get_cached_paths(self):
        return super().get_cached_paths() + ['/past/']


EventIndex.content_panels = [
    FieldPanel(title, classname=full title),
    FieldPanel(intro, classname=full),
]


class FormField(AbstractFormField):
    page = ParentalKey(FormPage, related_name=form_fields, on_delete=django.db.models.CASCADE)


class FormPage(AbstractEmailForm):
    def get_context(self, request):
        context = super().get_context(request)
        context[greeting] = hello world
        return context


Formwagtail.core.models.Page.content_panels = [
    FieldPanel(title, classname=full title),
    InlinePanel(form_fields, label=Form fields),
    MultiFieldPanel([
        FieldPanel(to_address, classname=full),
        FieldPanel(from_address, classname=full),
        FieldPanel(subject, classname=full),
    ], Email)
]




class JadeFormField(AbstractFormField):
    page = ParentalKey(JadeFormPage, related_name=form_fields, on_delete=django.db.models.CASCADE)


class JadeFormPage(AbstractEmailForm):
    template = tests/form_page.jade


JadeFormwagtail.core.models.Page.content_panels = [
    FieldPanel(title, classname=full title),
    InlinePanel(form_fields, label=Form fields),
    MultiFieldPanel([
        FieldPanel(to_address, classname=full),
        FieldPanel(from_address, classname=full),
        FieldPanel(subject, classname=full),
    ], Email)
]




class RedirectFormField(AbstractFormField):
    page = ParentalKey(FormPageWithRedirect, related_name=form_fields, on_delete=django.db.models.CASCADE)


class FormPageWithRedirect(AbstractEmailForm):
    thank_you_redirect_page = django.db.models.ForeignKey(
        wagtailcore.Page,
        null=True,
        blank=True,
        on_delete=django.db.models.SET_NULL,
        related_name=+,
    )

    def get_context(self, request):
        context = super(FormPageWithRedirect, self).get_context(request)
        context[greeting] = hello world
        return context

    def render_landing_page(self, request, form_submission=None, *args, **kwargs):
        
        if self.thank_you_redirect_page:
            return redirect(self.thank_you_redirect_page.url, permanent=False)

        return super(FormPageWithRedirect, self).render_landing_page(request, form_submission, *args, **kwargs)


FormPageWithRedirect.content_panels = [
    FieldPanel(title, classname=full title),
    PageChooserPanelthank_you_redirect_page,
    InlinePanel(form_fields, label=Form fields),
    MultiFieldPanel([
        FieldPanel(to_address, classname=full),
        FieldPanel(from_address, classname=full),
        FieldPanel(subject, classname=full),
    ], Email)
]




class FormPageWithCustomSubmission(AbstractEmailForm):
    

    intro = RichTextField(blank=True)
    thank_you_text = RichTextField(blank=True)

    def get_context(self, request, *args, **kwargs):
        context = super().get_context(request)
        context[greeting] = hello world
        return context

    def get_form_fields(self):
        return self.custom_form_fields.all()

    def get_data_fields(self):
        data_fields = [('username', 'Username')]
        data_fields += super().get_data_fields()

        return data_fields

    def get_submission_class(self):
        return CustomFormPageSubmission

    def process_form_submission(self, form):
        form_submission = self.get_submission_class().objects.create(
            form_data=json.dumps(form.cleaned_data, cls=DjangoJSONEncoder),
            page=self, user=form.user
        )

        if self.to_address:
            addresses = [x.strip() for x in self.to_address.split,]
            content = <built-in method join of str object at 0x7f5fe6c6e138>([x[1].label + :  + str(form.data.get(x[0])) for x in form.fields.items()])
            send_mail(self.subject, content, addresses, self.from_address,)

        
        return form_submission

    def serve(self, request, *args, **kwargs):
        if self.get_submission_class().objects.filter(page=self, user__pk=request.user.pk).exists():
            return render(
                request,
                self.template,
                self.get_context(request)
            )

        return super().serve(request, *args, **kwargs)


FormPageWithCustomSubmission.content_panels = [
    FieldPanel(title, classname=full title),
    FieldPanel(intro, classname=full),
    InlinePanel(custom_form_fields, label=Form fields),
    FieldPanel(thank_you_text, classname=full),
    MultiFieldPanel([
        FieldPanel(to_address, classname=full),
        FieldPanel(from_address, classname=full),
        FieldPanel(subject, classname=full),
    ], Email)
]


class FormFieldWithCustomSubmission(AbstractFormField):
    page = ParentalKey(FormPageWithCustomSubmission, on_delete=django.db.models.CASCADE, related_name=custom_form_fields)


class CustomFormPageSubmission(AbstractFormSubmission):
    user = django.db.models.ForeignKey(django.conf.settings.AUTH_USER_MODEL, on_delete=django.db.models.CASCADE)

    def get_data(self):
        form_data = super().get_data()
        form_data.update({
            username: self.user.username,
        })

        return form_data




class FormFieldForCustomListViewPage(AbstractFormField):
    page = ParentalKey(
        FormPageWithCustomSubmissionListView,
        related_name=form_fields,
        on_delete=django.db.models.CASCADE
    )


class FormPageWithCustomSubmissionListView(AbstractEmailForm):
    

    intro = RichTextField(blank=True)
    thank_you_text = RichTextField(blank=True)

    submissions_list_view_class = CustomSubmissionsListView

    def get_submission_class(self):
        return CustomFormPageSubmission

    def get_data_fields(self):
        data_fields = [('username', 'Username')]
        data_fields += super().get_data_fields()

        return data_fields

    content_panels = [
        FieldPanel(title, classname=full title),
        FieldPanel(intro, classname=full),
        InlinePanel(form_fields, label=Form fields),
        FieldPanel(thank_you_text, classname=full),
        MultiFieldPanel([
            FieldPanel(to_address, classname=full),
            FieldPanel(from_address, classname=full),
            FieldPanel(subject, classname=full),
        ], Email)
    ]




EXTENDED_CHOICES = FORM_FIELD_CHOICES + (('ipaddress', 'IP Address'),)


class ExtendedFormField(AbstractFormField):
    
    page = ParentalKey(
        FormPageWithCustomFormBuilder,
        related_name=form_fields,
        on_delete=django.db.models.CASCADE)
    field_type = django.db.models.CharField(
        verbose_name=field type, max_length=16, choices=EXTENDED_CHOICES)


class CustomFormBuilder(FormBuilder):
    

    def create_singleline_field(self, field, options):
        options[max_length] = 120  
        return django.forms.CharField(**options)

    def create_ipaddress_field(self, field, options):
        return django.forms.GenericIPAddressField(**options)


class FormPageWithCustomFormBuilder(AbstractEmailForm):
    

    form_builder = CustomFormBuilder

    content_panels = [
        FieldPanel(title, classname=full title),
        InlinePanel(form_fields, label=Form fields),
        MultiFieldPanel([
            FieldPanel(to_address, classname=full),
            FieldPanel(from_address, classname=full),
            FieldPanel(subject, classname=full),
        ], Email)
    ]



class AdvertPlacement(django.db.models.Model):
    page = ParentalKey(wagtailcore.Page, related_name=advert_placements, on_delete=django.db.models.CASCADE)
    advert = django.db.models.ForeignKey(tests.Advert, related_name=+, on_delete=django.db.models.CASCADE)
    colour = django.db.models.CharField(max_length=255)


class AdvertTag(TaggedItemBase):
    content_object = ParentalKey(Advert, related_name=tagged_items, on_delete=django.db.models.CASCADE)


class Advert(ClusterableModel):
    url = django.db.models.URLField(null=True, blank=True)
    text = django.db.models.CharField(max_length=255)

    tags = TaggableManager(through=AdvertTag, blank=True)

    panels = [
        FieldPanelurl,
        FieldPaneltext,
        FieldPaneltags,
    ]

    def __str__(self):
        return self.text


register_snippet(Advert)


class AdvertWithCustomPrimaryKey(ClusterableModel):
    advert_id = django.db.models.CharField(max_length=255, primary_key=True)
    url = django.db.models.URLField(null=True, blank=True)
    text = django.db.models.CharField(max_length=255)

    panels = [
        FieldPanelurl,
        FieldPaneltext,
    ]

    def __str__(self):
        return self.text


register_snippet(AdvertWithCustomPrimaryKey)


class AdvertWithCustomUUIDPrimaryKey(ClusterableModel):
    advert_id = django.db.models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    url = django.db.models.URLField(null=True, blank=True)
    text = django.db.models.CharField(max_length=255)

    panels = [
        FieldPanelurl,
        FieldPaneltext,
    ]

    def __str__(self):
        return self.text


register_snippet(AdvertWithCustomUUIDPrimaryKey)


class AdvertWithTabbedInterface(django.db.models.Model):
    url = django.db.models.URLField(null=True, blank=True)
    text = django.db.models.CharField(max_length=255)
    something_else = django.db.models.CharField(max_length=255)

    advert_panels = [
        FieldPanelurl,
        FieldPaneltext,
    ]

    other_panels = [
        FieldPanelsomething_else,
    ]

    edit_handler = TabbedInterface([
        ObjectList(advert_panels, heading=Advert),
        ObjectList(other_panels, heading=Other),
    ])

    def __str__(self):
        return self.text

    class Meta:
        ordering = ('text',)


register_snippet(AdvertWithTabbedInterface)


class StandardIndex(Page):
    
    parent_page_types = [Page]




StandardIndex.content_panels = [
    FieldPanel(title, classname=full title),
    FieldPanelseo_title,
    FieldPanelslug,
    InlinePanel(advert_placements, label=Adverts),
]
StandardIndex.promote_panels = []


class StandardChild(Page):
    pass



StandardChild.edit_handler = TabbedInterface([
    ObjectList(StandardChild.content_panels, heading=Content),
    ObjectList(StandardChild.promote_panels, heading=Promote),
    ObjectList(StandardChild.settings_panels, heading=Settings, classname=settings),
    ObjectList([], heading=Dinosaurs),
], base_form_class=WagtailAdminPageForm)


class BusinessIndex(Page):
    
    subpage_types = ['tests.BusinessChild', 'tests.BusinessSubIndex']


class BusinessSubIndex(Page):
    

    
    
    subpage_types = ['tests.BusinessChild', 'tests.BusinessNowherePage']
    parent_page_types = ['tests.BusinessIndex', 'tests.BusinessChild']


class BusinessChild(Page):
    
    subpage_types = []
    parent_page_types = [tests.BusinessIndex, BusinessSubIndex]


class BusinessNowherePage(Page):
    
    parent_page_types = []


class TaggedPageTag(TaggedItemBase):
    content_object = ParentalKey(tests.TaggedPage, related_name=tagged_items, on_delete=django.db.models.CASCADE)


class TaggedPage(Page):
    tags = ClusterTaggableManager(through=TaggedPageTag, blank=True)


Taggedwagtail.core.models.Page.content_panels = [
    FieldPanel(title, classname=full title),
    FieldPaneltags,
]


class SingletonPage(Page):
    @classmethod
    def can_create_at(cls, parent):
        
        return super(SingletonPage, cls).can_create_at(parent) \
            and not cls.objects.exists()


class SingletonPageViaMaxCount(Page):
    max_count = 1


class PageChooserModel(django.db.models.Model):
    page = django.db.models.ForeignKey(wagtailcore.Page, help_text=help text, on_delete=django.db.models.CASCADE)


class EventPageChooserModel(django.db.models.Model):
    page = django.db.models.ForeignKey(tests.EventPage, help_text=more help text, on_delete=django.db.models.CASCADE)


class SnippetChooserModel(django.db.models.Model):
    advert = django.db.models.ForeignKey(Advert, help_text=help text, on_delete=django.db.models.CASCADE)

    panels = [
        SnippetChooserPaneladvert,
    ]


class SnippetChooserModelWithCustomPrimaryKey(django.db.models.Model):
    advertwithcustomprimarykey = django.db.models.ForeignKey(AdvertWithCustomPrimaryKey, help_text=help text, on_delete=django.db.models.CASCADE)

    panels = [
        SnippetChooserPaneladvertwithcustomprimarykey,
    ]


class CustomImage(AbstractImage):
    caption = django.db.models.CharField(max_length=255, blank=True)
    fancy_caption = RichTextField(blank=True)
    not_editable_field = django.db.models.CharField(max_length=255, blank=True)

    admin_form_fields = wagtail.images.models.Image.admin_form_fields + ('caption', 'fancy_caption')


class CustomRendition(AbstractRendition):
    image = django.db.models.ForeignKey(CustomImage, related_name=renditions, on_delete=django.db.models.CASCADE)

    class Meta:
        unique_together = (('image', 'filter_spec', 'focal_point_key'),)


class CustomDocument(AbstractDocument):
    description = django.db.models.TextField(blank=True)
    fancy_description = RichTextField(blank=True)
    admin_form_fields = wagtail.documents.models.Document.admin_form_fields + ('description', 'fancy_description')


class StreamModel(django.db.models.Model):
    body = StreamField([
        (text, CharBlock()),
        (rich_text, RichTextBlock()),
        (image, ImageChooserBlock()),
    ])


class ExtendedImageChooserBlock(ImageChooserBlock):
    
    def get_api_representation(self, value, context=None):
        image_id = super().get_api_representation(value, context=context)
        if request in context and context[request].query_params.get('extended', False):
            return {
                id: image_id,
                title: value.title
            }
        return image_id


class StreamPage(Page):
    body = StreamField([
        (text, CharBlock()),
        (rich_text, RichTextBlock()),
        (image, ExtendedImageChooserBlock()),
        (product, StructBlock([
            (name, CharBlock()),
            (price, CharBlock()),
        ])),
        (raw_html, RawHTMLBlock()),
    ])

    api_fields = ('body',)

    content_panels = [
        FieldPaneltitle,
        StreamFieldPanelbody,
    ]


class DefaultStreamPage(Page):
    body = StreamField([
        (text, CharBlock()),
        (rich_text, RichTextBlock()),
        (image, ImageChooserBlock()),
    ], default=)

    content_panels = [
        FieldPaneltitle,
        StreamFieldPanelbody,
    ]


class MTIBasePage(Page):
    is_creatable = False

    class Meta:
        verbose_name = MTI Base page


class MTIChildPage(MTIBasePage):
    
    pass


class AbstractPage(Page):
    class Meta:
        abstract = True


@register_setting
class TestSetting(BaseSetting):
    title = django.db.models.CharField(max_length=100)
    email = django.db.models.EmailField(max_length=50)


@register_setting(icon=tag)
class IconSetting(BaseSetting):
    pass


class NotYetRegisteredSetting(BaseSetting):
    pass


@register_setting
class FileUploadSetting(BaseSetting):
    file = django.db.models.FileField()


class BlogCategory(django.db.models.Model):
    name = django.db.models.CharField(unique=True, max_length=80)


class BlogCategoryBlogPage(django.db.models.Model):
    category = django.db.models.ForeignKey(BlogCategory, related_name=+, on_delete=django.db.models.CASCADE)
    page = ParentalKey(ManyToManyBlogPage, related_name=categories, on_delete=django.db.models.CASCADE)
    panels = [
        FieldPanelcategory,
    ]


class ManyToManyBlogPage(Page):
    
    body = RichTextField(blank=True)
    adverts = django.db.models.ManyToManyField(Advert, blank=True)
    blog_categories = django.db.models.ManyToManyField(
        BlogCategory, through=BlogCategoryBlogPage, blank=True)

    
    settings_panels = wagtail.core.models.Page.settings_panels + [
        FieldPanelfirst_published_at,
    ]


class OneToOnePage(Page):
    
    body = RichTextBlock(blank=True)
    page_ptr = django.db.models.OneToOneField(Page, parent_link=True,
                                    related_name=+, on_delete=django.db.models.CASCADE)


class GenericSnippetPage(Page):
    
    snippet_content_type = django.db.models.ForeignKey(ContentType, on_delete=django.db.models.SET_NULL, null=True)
    snippet_object_id = django.db.models.PositiveIntegerField(null=True)
    snippet_content_object = GenericForeignKey('snippet_content_type', 'snippet_object_id')


class CustomImageFilePath(AbstractImage):
    def get_upload_to(self, filename):
        
        original_filepath = super().get_upload_to(filename)
        folder_name, filename = original_filepath.split(os.path.sep)

        
        
        
        original_position = self.file.tell()
        self.file.seek0
        hash256 = hashlib.sha256()

        while True:
            data = self.file.read256
            if not data:
                break
            hash256.update(data)
        checksum = hash256.hexdigest()

        self.file.seek(original_position)
        return os.path.join(folder_name, checksum[:3], filename)


class CustomPageQuerySet(PageQuerySet):
    def about_spam(self):
        return self.filter(title__contains=spam)


CustomManager = wagtail.core.models.PageManager.from_queryset(CustomPageQuerySet)


class CustomManagerPage(Page):
    objects = CustomManager()


class MyBasePage(Page):
    
    objects = CustomManager()

    class Meta:
        abstract = True


class MyCustomPage(MyBasePage):
    pass


class ValidatedPage(Page):
    foo = django.db.models.CharField(max_length=255)

    base_form_class = ValidatedPageForm
    content_panels = wagtail.core.models.Page.content_panels + [
        FieldPanelfoo,
    ]


class DefaultRichTextFieldPage(Page):
    body = RichTextField()

    content_panels = [
        FieldPanel(title, classname=full title),
        FieldPanelbody,
    ]


class DefaultRichBlockFieldPage(Page):
    body = StreamField([
        (rich_text, RichTextBlock()),
    ])

    content_panels = wagtail.core.models.Page.content_panels + [
        StreamFieldPanelbody
    ]


class CustomRichTextFieldPage(Page):
    body = RichTextField(editor=custom)

    content_panels = [
        FieldPanel(title, classname=full title),
        FieldPanelbody,
    ]


class CustomRichBlockFieldPage(Page):
    body = StreamField([
        (rich_text, RichTextBlock(editor=custom)),
    ])

    content_panels = [
        FieldPanel(title, classname=full title),
        StreamFieldPanelbody,
    ]


class RichTextFieldWithFeaturesPage(Page):
    body = RichTextField(features=['quotation', 'embed', 'made-up-feature'])

    content_panels = [
        FieldPanel(title, classname=full title),
        FieldPanelbody,
    ]




class SectionedRichTextPageSection(Orderable):
    page = ParentalKey(tests.SectionedRichTextPage, related_name=sections, on_delete=django.db.models.CASCADE)
    body = RichTextField()

    panels = [
        FieldPanelbody
    ]


class SectionedRichTextPage(Page):
    content_panels = [
        FieldPanel(title, classname=full title),
        InlinePanelsections
    ]


class InlineStreamPageSection(Orderable):
    page = ParentalKey(tests.InlineStreamPage, related_name=sections, on_delete=django.db.models.CASCADE)
    body = StreamField([
        (text, CharBlock()),
        (rich_text, RichTextBlock()),
        (image, ImageChooserBlock()),
    ])
    panels = [
        StreamFieldPanelbody
    ]


class InlineStreamPage(Page):
    content_panels = [
        FieldPanel(title, classname=full title),
        InlinePanelsections
    ]


class TableBlockStreamPage(Page):
    table = StreamField([(table, TableBlock())])

    content_panels = [StreamFieldPaneltable]


class UserProfile(django.db.models.Model):
    
    user = django.db.models.OneToOneField(django.conf.settings.AUTH_USER_MODEL, on_delete=django.db.models.CASCADE)
    favourite_colour = django.db.models.CharField(max_length=255)


class PanelSettings(TestSetting):
    panels = [
        FieldPaneltitle
    ]


class TabbedSettings(TestSetting):
    edit_handler = TabbedInterface([
        ObjectList([
            FieldPaneltitle
        ], heading=First tab),
        ObjectList([
            FieldPanelemail
        ], heading=Second tab),
    ])


class AlwaysShowInMenusPage(Page):
    show_in_menus_default = True



class AddedStreamFieldWithoutDefaultPage(Page):
    body = StreamField([
        (title, CharBlock())
    ])


class AddedStreamFieldWithEmptyStringDefaultPage(Page):
    body = StreamField([
        (title, CharBlock())
    ], default=)


class AddedStreamFieldWithEmptyListDefaultPage(Page):
    body = StreamField([
        (title, CharBlock())
    ], default=[])



class PerUserContentPanels(ObjectList):
    def _replace_children_with_per_user_config(self):
        self.children = self.instance.basic_content_panels
        if self.request.user.is_superuser:
            self.children = self.instance.superuser_content_panels
        self.children = [
            child.bind_to(model=self.model, instance=self.instance,
                          request=self.request, form=self.form)
            for child in self.children]

    def on_instance_bound(self):
        
        if self.request:
            self._replace_children_with_per_user_config()
        else:
            super().on_instance_bound()

    def on_request_bound(self):
        
        if self.instance:
            self._replace_children_with_per_user_config()
        else:
            super().on_request_bound()


class PerUserPageMixin:
    basic_content_panels = []
    superuser_content_panels = []

    @cached_classmethod
    def get_edit_handler(cls):
        tabs = []

        if cls.basic_content_panels and cls.superuser_content_panels:
            tabs.append(PerUserContentPanels(heading=Content))
        if cls.promote_panels:
            tabs.append(ObjectList(cls.promote_panels,
                                   heading=Promote))
        if cls.settings_panels:
            tabs.append(ObjectList(cls.settings_panels,
                                   heading=Settings,
                                   classname=settings))

        edit_handler = TabbedInterface(tabs,
                                       base_form_class=cls.base_form_class)

        return edit_handler.bind_to(model=cls)


class SecretPage(PerUserPageMixin, Page):
    boring_data = django.db.models.TextField()
    secret_data = django.db.models.TextField()

    basic_content_panels = wagtail.core.models.Page.content_panels + [
        FieldPanelboring_data,
    ]
    superuser_content_panels = basic_content_panels + [
        FieldPanelsecret_data,
    ]


class SimpleParentPage(Page):
    
    subpage_types = [tests.SimpleChildPage, BusinessIndex]


class SimpleChildPage(Page):
    
    parent_page_types = [tests.SimpleParentPage, Page]

    max_count_per_parent = 1


class PersonPage(Page):
    first_name = django.db.models.CharField(
        max_length=255,
        verbose_name=First Name,
    )
    last_name = django.db.models.CharField(
        max_length=255,
        verbose_name=Last Name,
    )

    content_panels = wagtail.core.models.Page.content_panels + [
        MultiFieldPanel([
            FieldPanelfirst_name,
            FieldPanellast_name,
        ], Person),
        InlinePanel(addresses, label=Address),
    ]

    class Meta:
        verbose_name = Person
        verbose_name_plural = Persons


class Address(wagtail.search.index.Indexed, ClusterableModel, Orderable):
    address = django.db.models.CharField(
        max_length=255,
        verbose_name=Address,
    )
    tags = ClusterTaggableManager(
        through=tests.AddressTag,
        blank=True,
    )
    person = ParentalKey(
        to=tests.PersonPage,
        related_name=addresses,
        verbose_name=Person
    )

    panels = [
        FieldPaneladdress,
        FieldPaneltags,
    ]

    class Meta:
        verbose_name = Address
        verbose_name_plural = Addresses


class AddressTag(TaggedItemBase):
    content_object = ParentalKey(
        to=tests.Address,
        on_delete=django.db.models.CASCADE,
        related_name=tagged_items
    )
