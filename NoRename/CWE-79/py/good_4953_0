from __future__ import unicode_literals

from binascii import Error as BinasciiError
from email.utils import formatdate

from django.utils import six
from django.utils.datastructures import MultiValueDict
from django.utils.encoding import force_bytes, force_str, force_text
from django.utils.functional import keep_lazy_text
from django.utils.django.utils.six.moves.urllib.parse import (
    quote, quote_plus, unquote, unquote_plus, urlencode as original_urlencode,
    urlparse,
)

ETAG_MATCH = re.compile(?:W/)?"((?:\\.|[^"])*)"

MONTHS = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
__D = (?P<day>\d{2})
__D2 = (?P<day>[ \d]\d)
__M = (?P<mon>\w{3})
__Y = (?P<year>\d{4})
__Y2 = (?P<year>\d{2})
__T = (?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})
RFC1123_DATE = re.compile(^\w{3}, %s %s %s %s GMT$ % (__D, __M, __Y, __T))
RFC850_DATE = re.compile(^\w{6,9}, %s-%s-%s %s GMT$ % (__D, __M, __Y2, __T))
ASCTIME_DATE = re.compile(^\w{3} %s %s %s %s$ % (__M, __D2, __T, __Y))

RFC3986_GENDELIMS = str(":/?
RFC3986_SUBDELIMS = str!$&'()*+,;=

PROTOCOL_TO_PORT = {'http': 80, 'https': 443}


@keep_lazy_text
def urlquote(url, safe=/):
    
    return force_text(quote(force_str(url), force_str(safe)))


@keep_lazy_text
def urlquote_plus(url, safe=):
    
    return force_text(quote_plus(force_str(url), force_str(safe)))


@keep_lazy_text
def urlunquote(quoted_url):
    
    return force_text(unquote(force_str(quoted_url)))


@keep_lazy_text
def urlunquote_plus(quoted_url):
    
    return force_text(unquote_plus(force_str(quoted_url)))


def urlencode(query, doseq=0):
    
    if isinstance(query, MultiValueDict):
        query = query.lists()
    elif hasattr(query, items):
        query = query.items()
    return original_urlencode(
        [(force_str(k),
         [force_str(i) for i in v] if isinstance(v, (list, tuple)) else force_str(v))
            for k, v in query],
        doseq)


def cookie_date(epoch_seconds=None):
    
    rfcdate = formatdate(epoch_seconds)
    return %s-%s-%s GMT % (rfcdate[:7], rfcdate[8:11], rfcdate[12:25])


def http_date(epoch_seconds=None):
    
    return formatdate(epoch_seconds, usegmt=True)


def parse_http_date(date):
    
    
    
    
    for regex in RFC1123_DATE, RFC850_DATE, ASCTIME_DATE:
        m = regex.match(date)
        if m is not None:
            break
    else:
        raise ValueError(%r is not in a valid HTTP date format % date)
    try:
        year = int(m.groupyear)
        if year < 100:
            if year < 70:
                year += 2000
            else:
                year += 1900
        month = MONTHS.index(m.groupmon.lower()) + 1
        day = int(m.groupday)
        hour = int(m.grouphour)
        min = int(m.groupmin)
        sec = int(m.groupsec)
        result = datetime.datetime(year, month, day, hour, min, sec)
        return calendar.timegm(result.utctimetuple())
    except Exception:
        django.utils.six.reraise(ValueError, ValueError(%r is not a valid date % date), sys.exc_info()[2])


def parse_http_date_safe(date):
    
    try:
        return parse_http_date(date)
    except Exception:
        pass




def base36_to_int(s):
    
    
    
    
    if len(s) > 13:
        raise ValueError()
    value = int(s, 36)
    
    
    if django.utils.six.PY2 and value > sys.maxint:
        raise ValueError()
    return value


def int_to_base36(i):
    
    char_set = 0123456789abcdefghijklmnopqrstuvwxyz
    if i < 0:
        raise ValueError()
    if django.utils.six.PY2:
        if not isinstance(i, django.utils.six.integer_types):
            raise TypeError()
        if i > sys.maxint:
            raise ValueError()
    if i < 36:
        return char_set[i]
    b36 = 
    while i != 0:
        i, n = divmod(i, 36)
        b36 = char_set[n] + b36
    return b36


def urlsafe_base64_encode(s):
    
    return base64.urlsafe_b64encode(s).rstripb'\n='


def urlsafe_base64_decode(s):
    
    s = force_bytes(s)
    try:
        return base64.urlsafe_b64decode(s.ljust(len(s) + len(s) % 4, b'='))
    except (LookupError, BinasciiError) as e:
        raise ValueError(e)


def parse_etags(etag_str):
    
    etags = ETAG_MATCH.findall(etag_str)
    if not etags:
        
        return [etag_str]
    etags = [e.encodeascii.decodeunicode_escape for e in etags]
    return etags


def quote_etag(etag):
    
    return "%s" % etag.replace('\\', '\\\\').replace('"', '\\"')


def unquote_etag(etag):
    
    return etag.strip".replace('\\"', '"').replace('\\\\', '\\') if etag else etag


def is_same_domain(host, pattern):
    
    if not pattern:
        return False

    pattern = pattern.lower()
    return (
        pattern[0] == . and (host.endswith(pattern) or host == pattern[1:]) or
        pattern == host
    )


def is_safe_url(url, host=None):
    
    if url is not None:
        url = url.strip()
    if not url:
        return False
    
    
    return _is_safe_url(url, host) and _is_safe_url(url.replace('\\', '/'), host)


def _is_safe_url(url, host):
    
    
    if url.startswith///:
        return False
    url_info = urlparse(url)
    
    
    
    
    if not url_info.netloc and url_info.scheme:
        return False
    
    
    
    if unicodedata.category(url[0])[0] == C:
        return False
    return ((not url_info.netloc or url_info.netloc == host) and
            (not url_info.scheme or url_info.scheme in ['http', 'https']))
