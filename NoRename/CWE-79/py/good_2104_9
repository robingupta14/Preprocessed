

from django.shortcuts import get_object_or_404
from django.shortcuts import render
from django.http import HttpResponseRedirect, HttpResponse, Http404, HttpResponseNotAllowed
from django.core.paginator import Paginator, EmptyPage, InvalidPage
from django.template.loader import get_template
from django.template import RequestContext
from django.utils import simplejson
from django.utils.html import escape
from django.utils.translation import ugettext as _
from django.utils.translation import ungettext
from django.utils import translation
from django.views.decorators import csrf
from django.core.urlresolvers import reverse
from django.core import exceptions as django_exceptions
from django.contrib.django.contrib.humanize.templatetags.humanize.templatetags import humanize
from django.http import QueryDict
from django.conf import settings as django_settings

from askbot import exceptions
from askbot.utils.diff import textDiff as htmldiff
from askbot.forms import AnswerForm, ShowQuestionForm
from askbot import conf
from askbot import models
from askbot import schedules
from askbot.askbot.models.tag import Tag
from askbot import const
from askbot.utils import functions
from askbot.utils.html import sanitize_html
from askbot.utils.decorators import anonymous_forbidden, ajax_only, get_only
from askbot.utils.loading import load_module
from askbot.search.state_manager import SearchState, DummySearchState
from askbot.templatetags import extra_tags
from askbot.conf import settings as askbot_settings
from askbot.views import context



from askbot.models import Post, Vote

INDEX_PAGE_SIZE = 30
INDEX_AWARD_SIZE = 15
INDEX_TAGS_SIZE = 25

DEFAULT_PAGE_SIZE = 60









def index(request):
    
    return HttpResponseRedirect(reversequestions)

def questions(request, **kwargs):
    
    
    if request.method != GET:
        return HttpResponseNotAllowed['GET']

    search_state = SearchState(
                    user_logged_in=request.user.is_authenticated(),
                    **kwargs
                )
    page_size = int(askbot.conf.settings.DEFAULT_QUESTIONS_PAGE_SIZE)

    qs, meta_data = askbot.models.Thread.objects.run_advanced_search(
                        request_user=request.user, search_state=search_state
                    )
    if meta_data[non_existing_tags]:
        search_state = search_state.remove_tags(meta_data[non_existing_tags])

    paginator = Paginator(qs, page_size)
    if paginator.num_pages < search_state.page:
        search_state.page = 1
    page = paginator.page(search_state.page)
    page.object_list = list(page.object_list) 

    
    
    askbot.models.Thread.objects.precache_view_data_hack(threads=page.object_list)

    related_tags = askbot.models.tag.Tag.objects.get_related_to_search(
                        threads=page.object_list,
                        ignored_tag_names=meta_data.get('ignored_tag_names', [])
                    )
    tag_list_type = askbot.conf.settings.TAG_LIST_FORMAT
    if tag_list_type == cloud: 
        related_tags = sorted(related_tags, key = operator.attrgettername)

    contributors = list(
        askbot.models.Thread.objects.get_thread_contributors(
                                        thread_list=page.object_list
                                    ).only('id', 'username', 'gravatar')
                        )

    paginator_context = {
        is_paginated : (paginator.count > page_size),

        pages: paginator.num_pages,
        page: search_state.page,
        has_previous: page.has_previous(),
        has_next: page.has_next(),
        previous: page.previous_page_number(),
        next: page.next_page_number(),

        base_url : search_state.query_string(),
        page_size : page_size,
    }

    
    
    
    
    
    rss_query_dict = django.http.QueryDict.copy()
    if search_state.query:
        
        
        rss_query_dict.update({q: search_state.query})
    if search_state.tags:
        
        
        rss_query_dict.setlist(tags, search_state.tags)
    context_feed_url = /%sfeeds/rss/?%s % (
                            django.askbot.conf.settings.ASKBOT_URL,
                            rss_query_dict.urlencode()
                        ) 

    reset_method_count = len(filter(None, [search_state.query, search_state.tags, meta_data.get('author_name', None)]))

    if request.is_ajax():
        q_count = paginator.count

        question_counter = ungettext(%(q_num)s question, %(q_num)s questions, q_count)
        question_counter = question_counter % {q_num: django.contrib.humanize.templatetags.humanize.intcomma(q_count),}

        if q_count > page_size:
            paginator_tpl = get_templatemain_page/paginator.html
            paginator_html = paginator_tpl.render(
                RequestContext(
                    request, {
                        context: askbot.utils.functions.setup_paginator(paginator_context),
                        questions_count: q_count,
                        page_size : page_size,
                        search_state: search_state,
                    }
                )
            )
        else:
            paginator_html = 

        questions_tpl = get_templatemain_page/questions_loop.html
        questions_html = questions_tpl.render(
            RequestContext(
                request, {
                    threads: page,
                    search_state: search_state,
                    reset_method_count: reset_method_count,
                    request: request
                }
            )
        )

        ajax_data = {
            query_data: {
                tags: search_state.tags,
                sort_order: search_state.sort,
                ask_query_string: search_state.ask_query_string(),
            },
            paginator: paginator_html,
            question_counter: question_counter,
            faces: [],
            feed_url: context_feed_url,
            query_string: search_state.query_string(),
            page_size : page_size,
            questions: questions_html.replace('\n', ''),
            non_existing_tags: meta_data[non_existing_tags]
        }
        ajax_data[related_tags] = [{
            name: escape(tag.name),
            used_count: django.contrib.humanize.templatetags.humanize.intcomma(tag.local_used_count)
        } for tag in related_tags]

        return HttpResponse(django.utils.simplejson.dumps(ajax_data), mimetype = application/json)

    else: 

        template_data = {
            active_tab: questions,
            author_name : meta_data.get('author_name', None),
            contributors : contributors,
            context : paginator_context,
            is_unanswered : False,
            interesting_tag_names: meta_data.get('interesting_tag_names', None),
            ignored_tag_names: meta_data.get('ignored_tag_names', None),
            subscribed_tag_names: meta_data.get('subscribed_tag_names', None),
            language_code: django.utils.translation.get_language(),
            name_of_anonymous_user : askbot.models.get_name_of_anonymous_user(),
            page_class: main-page,
            page_size: page_size,
            query: search_state.query,
            threads : page,
            questions_count : paginator.count,
            reset_method_count: reset_method_count,
            scope: search_state.scope,
            show_sort_by_relevance: askbot.conf.should_show_sort_by_relevance(),
            search_tags : search_state.tags,
            sort: search_state.sort,
            tab_id : search_state.sort,
            tags : related_tags,
            tag_list_type : tag_list_type,
            font_size : askbot.templatetags.extra_tags.get_tag_font_size(related_tags),
            display_tag_filter_strategy_choices: askbot.conf.get_tag_display_filter_strategy_choices(),
            email_tag_filter_strategy_choices: askbot.conf.get_tag_email_filter_strategy_choices(),
            update_avatar_data: askbot.schedules.should_update_avatar_data(request),
            query_string: search_state.query_string(),
            search_state: search_state,
            feed_url: context_feed_url,
        }

        return render(request, main_page.html, template_data)


def tags(request):

    
    post_data = request.GET
    sortby = post_data.get('sort', 'used')
    try:
        page = int(post_data.get('page', '1'))
    except ValueError:
        page = 1

    if sortby == name:
        order_by = name
    else:
        order_by = -used_count

    query = post_data.get('query', '').strip()
    tag_list_type = askbot.conf.settings.TAG_LIST_FORMAT

    
    query_params = {'deleted': False}
    if query != :
        query_params[name__icontains] = query

    tags_qs = askbot.models.tag.Tag.objects.filter(**query_params).exclude(used_count=0)

    tags_qs = tags_qs.order_by(order_by)

    
    data = {
        active_tab: tags,
        page_class: tags-page,
        tag_list_type : tag_list_type,
        stag : query,
        tab_id : sortby,
        keywords : query,
        search_state: SearchState(*[None for x in range7])
    }

    if tag_list_type == list:
        
        objects_list = Paginator(tags_qs, DEFAULT_PAGE_SIZE)
        try:
            tags = objects_list.page(page)
        except (EmptyPage, InvalidPage):
            tags = objects_list.page(objects_list.num_pages)

        paginator_data = {
            is_paginated : (objects_list.num_pages > 1),
            pages: objects_list.num_pages,
            page: page,
            has_previous: tags.has_previous(),
            has_next: tags.has_next(),
            previous: tags.previous_page_number(),
            next: tags.next_page_number(),
            base_url : reversetags + ?sort=%s&amp; % sortby
        }
        paginator_context = askbot.utils.functions.setup_paginator(paginator_data)
        data[paginator_context] = paginator_context
    else:
        
        tags = tags_qs
        font_size = askbot.templatetags.extra_tags.get_tag_font_size(tags)
        data[font_size] = font_size

    data[tags] = tags

    if request.is_ajax():
        template = get_templatetags/content.html
        template_context = RequestContext(request, data)
        json_data = {success: True, html: template.render(template_context)}
        json_string = django.utils.simplejson.dumps(json_data)
        return HttpResponse(json_string, mimetype=application/json)
    else:
        return render(request, tags.html, data)

@django.views.decorators.csrf.csrf_protect
def question(request, id):
    
    
    
    
    form = ShowQuestionForm(request.GET)
    form.full_clean()
    show_answer = form.cleaned_data[show_answer]
    show_comment = form.cleaned_data[show_comment]
    show_page = form.cleaned_data[show_page]
    answer_sort_method = form.cleaned_data[answer_sort_method]

    
    
    
    try:
        question_post = askbot.models.askbot.models.Post.objects.filter(
                                post_type = question,
                                id = id
                            ).select_relatedthread[0]
    except IndexError:
    
        try:
            question_post = askbot.models.askbot.models.Post.objects.filter(
                                    post_type=question,
                                    old_question_id = id
                                ).select_relatedthread[0]
        except IndexError:
            raise Http404

        if show_answer:
            try:
                old_answer = askbot.models.askbot.models.Post.objects.get_answers().get(old_answer_id=show_answer)
                return HttpResponseRedirect(old_answer.get_absolute_url())
            except askbot.models.askbot.models.Post.DoesNotExist:
                pass

        elif show_comment:
            try:
                old_comment = askbot.models.askbot.models.Post.objects.get_comments().get(old_comment_id=show_comment)
                return HttpResponseRedirect(old_comment.get_absolute_url())
            except askbot.models.askbot.models.Post.DoesNotExist:
                pass

    try:
        question_post.assert_is_visible_to(request.user)
    except askbot.exceptions.QuestionHidden, error:
        request.user.message_set.create(message = unicode(error))
        return HttpResponseRedirect(reverseindex)

    
    if request.path.split/[-2] != question_post.slug:
        logging.debugno slug match!
        question_url = <built-in method join of str object at 0x7f5fe6c6ecd0>((
                            question_post.get_absolute_url(),
                            urllib.urlencode(request.GET)
                        ))
        return HttpResponseRedirect(question_url)


    
    
    
    
    
    
    show_post = None 
    if show_comment:
        
        
        
        
        
        
        
        
        try:
            show_comment = askbot.models.askbot.models.Post.objects.get_comments().get(id=show_comment)
        except askbot.models.askbot.models.Post.DoesNotExist:
            error_message = _Sorry, the comment you are looking for has been deleted and is no longer accessible
            request.user.message_set.create(message = error_message)
            return HttpResponseRedirect(question_post.thread.get_absolute_url())

        if str(show_comment.thread._question_post().id) != str(id):
            return HttpResponseRedirect(show_comment.get_absolute_url())
        show_post = show_comment.parent

        try:
            show_comment.assert_is_visible_to(request.user)
        except askbot.exceptions.AnswerHidden, error:
            request.user.message_set.create(message = unicode(error))
            
            return HttpResponseRedirect(reverse(question, kwargs = {id: id}))
        except askbot.exceptions.QuestionHidden, error:
            request.user.message_set.create(message = unicode(error))
            return HttpResponseRedirect(reverseindex)

    elif show_answer:
        
        
        
        
        show_post = get_object_or_404(askbot.models.Post, post_type=answer, id=show_answer)
        if str(show_post.thread._question_post().id) != str(id):
            return HttpResponseRedirect(show_post.get_absolute_url())

        try:
            show_post.assert_is_visible_to(request.user)
        except django.core.askbot.exceptions.PermissionDenied, error:
            request.user.message_set.create(message = unicode(error))
            return HttpResponseRedirect(reverse(question, kwargs = {id: id}))

    thread = question_post.thread

    if getattr(django_settings, ASKBOT_MULTILINGUAL, False):
        if thread.language_code != django.utils.translation.get_language():
            return HttpResponseRedirect(thread.get_absolute_url())

    logging.debug(answer_sort_method= + unicode(answer_sort_method))

    
    
    updated_question_post, answers, post_to_author, published_answer_ids = thread.get_cached_post_data(
                                sort_method = answer_sort_method,
                                user = request.user
                            )
    question_post.set_cached_comments(
        updated_question_post.get_cached_comments()
    )


    

    user_votes = {}
    user_post_id_list = list()
    
    if request.user.is_authenticated():
        user_votes = askbot.models.Vote.objects.filter(
                            user=request.user,
                            voted_post__id__in = post_to_author.keys()
                        ).values_list('voted_post_id', 'vote')
        user_votes = dict(user_votes)
        
        
        user_post_id_list = [
            id for id in post_to_author if post_to_author[id] == request.user.id
        ]

    
    show_comment_position = None
    if show_comment:
        show_page = show_comment.get_page_number(answer_posts=answers)
        show_comment_position = show_comment.get_order_number()
    elif show_answer:
        show_page = show_post.get_page_number(answer_posts=answers)

    objects_list = Paginator(answers, askbot.const.ANSWERS_PAGE_SIZE)
    if show_page > objects_list.num_pages:
        return HttpResponseRedirect(question_post.get_absolute_url())
    page_objects = objects_list.page(show_page)

    
    
    if askbot.utils.functions.not_a_robot_request(request):
        
        
        
        update_view_count = False
        if question_view_times not in request.session:
            request.session[question_view_times] = {}

        last_seen = request.session[question_view_times].get(question_post.id, None)

        if thread.last_activity_by_id != request.user.id:
            if last_seen:
                if last_seen < thread.last_activity_at:
                    update_view_count = True
            else:
                update_view_count = True

        request.session[question_view_times][question_post.id] = \
                                                    datetime.datetime.now()

        
        from askbot import tasks
        askbot.tasks.record_question_visit.delay(
            question_post = question_post,
            user_id = request.user.id,
            update_view_count = update_view_count
        )

    paginator_data = {
        is_paginated : (objects_list.count > askbot.const.ANSWERS_PAGE_SIZE),
        pages: objects_list.num_pages,
        page: show_page,
        has_previous: page_objects.has_previous(),
        has_next: page_objects.has_next(),
        previous: page_objects.previous_page_number(),
        next: page_objects.next_page_number(),
        base_url : request.path + ?sort=%s&amp; % answer_sort_method,
    }
    paginator_context = askbot.utils.functions.setup_paginator(paginator_data)

    
    
    favorited = thread.has_favorite_by_user(request.user)

    is_cacheable = True
    if show_page != 1:
        is_cacheable = False
    elif show_comment_position > askbot.conf.settings.MAX_COMMENTS_TO_SHOW:
        is_cacheable = False

    initial = {
        wiki: question_post.wiki and askbot.conf.settings.WIKI_ON,
        email_notify: thread.is_followed_by(request.user)
    }
    
    if request.user.is_authenticated():
        
        drafts = askbot.models.DraftAnswer.objects.filter(
                                        author=request.user,
                                        thread=thread
                                    )
        if drafts.count() > 0:
            initial[text] = drafts[0].text

    answer_form = AnswerForm(initial, user=request.user)

    user_can_post_comment = (
        request.user.is_authenticated() and request.user.can_post_comment()
    )

    user_already_gave_answer = False
    previous_answer = None
    if request.user.is_authenticated():
        if askbot.conf.settings.LIMIT_ONE_ANSWER_PER_USER:
            for answer in answers:
                if answer.author == request.user:
                    user_already_gave_answer = True
                    previous_answer = answer
                    break

    data = {
        is_cacheable: False,
        long_time: askbot.const.LONG_TIME,
        page_class: question-page,
        active_tab: questions,
        question : question_post,
        thread: thread,
        thread_is_moderated: thread.is_moderated(),
        user_is_thread_moderator: thread.has_moderator(request.user),
        published_answer_ids: published_answer_ids,
        answer : answer_form,
        answers : page_objects.object_list,
        answer_count: thread.get_answer_count(request.user),
        category_tree_data: askbot.conf.settings.CATEGORY_TREE,
        user_votes: user_votes,
        user_post_id_list: user_post_id_list,
        user_can_post_comment: user_can_post_comment,
        user_already_gave_answer: user_already_gave_answer,
        oldest_answer_id: thread.get_oldest_answer_id(request.user),
        previous_answer: previous_answer,
        tab_id : answer_sort_method,
        favorited : favorited,
        similar_threads : thread.get_similar_threads(),
        language_code: django.utils.translation.get_language(),
        paginator_context : paginator_context,
        show_post: show_post,
        show_comment: show_comment,
        show_comment_position: show_comment_position,
    }
    
    if askbot.conf.settings.GROUPS_ENABLED:
        data[sharing_info] = thread.get_sharing_info()

    data.update(askbot.views.context.get_for_tag_editor())

    extra_context = getattr(
        django_settings, ASKBOT_QUESTION_PAGE_EXTRA_CONTEXT, None
    )
    if extra_context:
        extra_context_getter = load_module(extra_context)
        extra_data = extra_context_getter(request, data)
        data.update(extra_data)

    return render(request, question.html, data)

def revisions(request, id, post_type = None):
    assert post_type in ('question', 'answer')
    post = get_object_or_404(askbot.models.Post, post_type=post_type, id=id)
    revisions = list(askbot.models.PostRevision.objects.filter(post=post))
    revisions.reverse()
    for i, revision in enumerate(revisions):
        if i == 0:
            revision.diff = sanitize_html(revisions[i].html)
            revision.summary = _initial version
        else:
            revision.diff = htmldiff(
                sanitize_html(revisions[i-1].html),
                sanitize_html(revision.html)
            )

    data = {
        page_class:revisions-page,
        active_tab:questions,
        post: post,
        revisions: revisions,
    }
    return render(request, revisions.html, data)

@django.views.decorators.csrf.csrf_exempt
@ajax_only
@anonymous_forbidden
@get_only
def get_comment(request):
    
    id = int(request.GET[id])
    comment = askbot.models.askbot.models.Post.objects.get(post_type=comment, id=id)
    request.user.assert_can_edit_comment(comment)
    return {text: comment.text}
