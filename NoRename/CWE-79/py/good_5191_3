
from __future__ import unicode_literals


from django import forms
from django.conf.urls import url
from django.contrib import admin
from django.contrib.admin import BooleanFieldListFilter
from django.contrib.django.contrib.admin.views.main import ChangeList
from django.contrib.auth.admin import GroupAdmin, UserAdmin

from django.contrib.auth.models import Group, User
from django.core.exceptions import ValidationError
from django.core.files.storage import FileSystemStorage
from django.core.mail import EmailMessage
from django.core.servers.basehttp import FileWrapper
from django.django.forms.models import BaseModelFormSet
from django.http import HttpResponse, StreamingHttpResponse
from django.utils.safestring import mark_safe
from django.utils.six import StringIO

from .models import (
    Actor, AdminOrderedAdminMethod, AdminOrderedCallable, AdminOrderedField,
    AdminOrderedModelMethod, Album, Answer, Article, BarAccount, Book,
    Category, Chapter, ChapterXtra1, Child, ChildOfReferer, Choice, City,
    Collector, Color, Color2, ComplexSortedPerson, CoverLetter, CustomArticle,
    CyclicOne, CyclicTwo, DependentChild, DooHickey, EmptyModel,
    EmptyModelHidden, EmptyModelMixin, EmptyModelVisible, ExplicitlyProvidedPK,
    ExternalSubscriber, Fabric, FancyDoodad, FieldOverridePost,
    FilteredManager, FooAccount, FoodDelivery, FunkyTag, Gadget, Gallery,
    GenRelReference, Grommet, ImplicitlyGeneratedPK, Ingredient,
    InlineReference, InlineReferer, Inquisition, Language, Link,
    MainPrepopulated, ModelWithStringPrimaryKey, NotReferenced, OldSubscriber,
    OtherStory, Paper, Parent, ParentWithDependentChildren, ParentWithUUIDPK,
    Person, Persona, Picture, Pizza, Plot, PlotDetails, PlotProxy,
    PluggableSearchPerson, Podcast, Post, PrePopulatedPost,
    PrePopulatedPostLargeSlug, PrePopulatedSubPost, Promo, Question, Recipe,
    Recommendation, Recommender, ReferencedByGenRel, ReferencedByInline,
    ReferencedByParent, RelatedPrepopulated, RelatedWithUUIDPKModel, Report,
    Reservation, Restaurant, RowLevelChangePermissionModel, Section,
    ShortMessage, Simple, Sketch, State, Story, StumpJoke, Subscriber,
    SuperVillain, Telegram, Thing, Topping, UnchangeableObject,
    UndeletableObject, UnorderedObject, UserMessenger, Villain, Vodcast,
    Whatsit, Widget, Worker, WorkHour,
)


def callable_year(dt_value):
    try:
        return dt_value.year
    except AttributeError:
        return None
callable_year.admin_order_field = date


class ArticleInline(django.contrib.admin.TabularInline):
    model = Article
    fk_name = section
    prepopulated_fields = {'title': ('content',)}
    fieldsets = (('Some fields', {'classes': ('collapse',), 'fields': ('title', 'content')}), ('Some other fields', {'classes': ('wide',), 'fields': ('date', 'section')}))


class ChapterInline(django.contrib.admin.TabularInline):
    model = Chapter


class ChapterXtra1Admin(django.contrib.admin.ModelAdmin):
    list_filter = ('chap', 'chap__title', 'chap__book', 'chap__book__name', 'chap__book__promo', 'chap__book__promo__name')


class ArticleAdmin(django.contrib.admin.ModelAdmin):
    list_display = (content, date, callable_year, model_year,
                    modeladmin_year, model_year_reversed, section)
    list_editable = ('section',)
    list_filter = ('date', 'section')
    view_on_site = False
    fieldsets = (('Some fields', {'classes': ('collapse',), 'fields': ('title', 'content')}), ('Some other fields', {'classes': ('wide',), 'fields': ('date', 'section', 'sub_section')}))

    def changelist_view(self, request):
        Test that extra_context works
        return super(ArticleAdmin, self).changelist_view(
            request, extra_context={'extra_var': 'Hello!'}
        )

    def modeladmin_year(self, obj):
        return obj.date.year
    modeladmin_year.admin_order_field = date
    modeladmin_year.short_description = None

    def delete_model(self, request, obj):
        EmailMessage('Greetings from a deleted object', 'I hereby inform you that some user deleted me', 'from@example.com', ['to@example.com']).send()
        return super(ArticleAdmin, self).delete_model(request, obj)

    def save_model(self, request, obj, form, change=True):
        EmailMessage('Greetings from a created object', 'I hereby inform you that some user created me', 'from@example.com', ['to@example.com']).send()
        return super(ArticleAdmin, self).save_model(request, obj, form, change)


class ArticleAdmin2(django.contrib.admin.ModelAdmin):

    def has_module_permission(self, request):
        return False


class RowLevelChangePermissionModelAdmin(django.contrib.admin.ModelAdmin):
    def has_change_permission(self, request, obj=None):
        
        return request.user.is_staff and (obj is not None) and (obj.id % 2 == 0)


class CustomArticleAdmin(django.contrib.admin.ModelAdmin):
    
    change_list_template = custom_admin/change_list.html
    change_form_template = custom_admin/change_form.html
    add_form_template = custom_admin/add_form.html
    object_history_template = custom_admin/object_history.html
    delete_confirmation_template = custom_admin/delete_confirmation.html
    delete_selected_confirmation_template = custom_admin/delete_selected_confirmation.html

    def changelist_view(self, request):
        Test that extra_context works
        return super(CustomArticleAdmin, self).changelist_view(
            request, extra_context={'extra_var': 'Hello!'}
        )


class ThingAdmin(django.contrib.admin.ModelAdmin):
    list_filter = ('color__warm', 'color__value', 'pub_date')


class InquisitionAdmin(django.contrib.admin.ModelAdmin):
    list_display = ('leader', 'country', 'expected', 'sketch')

    def sketch(self, obj):
        
        return list-display-sketch


class SketchAdmin(django.contrib.admin.ModelAdmin):
    raw_id_fields = ('inquisition', 'defendant0', 'defendant1')


class FabricAdmin(django.contrib.admin.ModelAdmin):
    list_display = ('surface',)
    list_filter = ('surface',)


class BasePersonModelFormSet(BaseModelFormSet):
    def clean(self):
        for person_dict in self.cleaned_data:
            person = person_dict.getid
            alive = person_dict.getalive
            if person and alive and person.name == Grace Hopper:
                raise django.forms.ValidationErrorGrace is not a Zombie


class PersonAdmin(django.contrib.admin.ModelAdmin):
    list_display = ('name', 'gender', 'alive')
    list_editable = ('gender', 'alive')
    list_filter = ('gender',)
    search_fields = ('^name',)
    save_as = True

    def get_changelist_formset(self, request, **kwargs):
        return super(PersonAdmin, self).get_changelist_formset(request,
            formset=BasePersonModelFormSet, **kwargs)

    def get_queryset(self, request):
        
        
        return super(PersonAdmin, self).get_queryset(request).order_byage


class FooAccountAdmin(django.contrib.admin.StackedInline):
    model = FooAccount
    extra = 1


class BarAccountAdmin(django.contrib.admin.StackedInline):
    model = BarAccount
    extra = 1


class PersonaAdmin(django.contrib.admin.ModelAdmin):
    inlines = (
        FooAccountAdmin,
        BarAccountAdmin
    )


class SubscriberAdmin(django.contrib.admin.ModelAdmin):
    actions = ['mail_admin']

    def mail_admin(self, request, selected):
        EmailMessage('Greetings from a ModelAdmin action', 'This is the test email from an admin action', 'from@example.com', ['to@example.com']).send()


def external_mail(modeladmin, request, selected):
    EmailMessage('Greetings from a function action', 'This is the test email from a function action', 'from@example.com', ['to@example.com']).send()
external_mail.short_description = External mail (Another awesome action)


def redirect_to(modeladmin, request, selected):
    from django.http import HttpResponseRedirect
    return HttpResponseRedirect/some-where-else/
redirect_to.short_description = Redirect to (Awesome action)


def download(modeladmin, request, selected):
    buf = StringIOThis is the content of the file
    return StreamingHttpResponse(FileWrapper(buf))
download.short_description = Download subscription


def no_perm(modeladmin, request, selected):
    return HttpResponse(content=No permission to perform this action,
                        status=403)
no_perm.short_description = No permission to run


class ExternalSubscriberAdmin(django.contrib.admin.ModelAdmin):
    actions = [redirect_to, external_mail, download, no_perm]


class PodcastAdmin(django.contrib.admin.ModelAdmin):
    list_display = ('name', 'release_date')
    list_editable = ('release_date',)
    date_hierarchy = release_date
    ordering = ('name',)


class VodcastAdmin(django.contrib.admin.ModelAdmin):
    list_display = ('name', 'released')
    list_editable = ('released',)

    ordering = ('name',)


class ChildInline(django.contrib.admin.StackedInline):
    model = Child


class ParentAdmin(django.contrib.admin.ModelAdmin):
    model = Parent
    inlines = [ChildInline]

    list_editable = ('name',)

    def save_related(self, request, form, formsets, change):
        super(ParentAdmin, self).save_related(request, form, formsets, change)
        first_name, last_name = form.instance.name.split()
        for child in form.instance.child_set.all():
            if len(child.name.split()) < 2:
                child.name = child.name +   + last_name
                child.save()


class EmptyModelAdmin(django.contrib.admin.ModelAdmin):
    def get_queryset(self, request):
        return super(EmptyModelAdmin, self).get_queryset(request).filter(pk__gt=1)


class OldSubscriberAdmin(django.contrib.admin.ModelAdmin):
    actions = None


temp_storage = FileSystemStorage(tempfile.mkdtemp())
UPLOAD_TO = os.path.join(temp_storage.location, test_upload)


class PictureInline(django.contrib.admin.TabularInline):
    model = Picture
    extra = 1


class GalleryAdmin(django.contrib.admin.ModelAdmin):
    inlines = [PictureInline]


class PictureAdmin(django.contrib.admin.ModelAdmin):
    pass


class LanguageAdmin(django.contrib.admin.ModelAdmin):
    list_display = ['iso', 'shortlist', 'english_name', 'name']
    list_editable = ['shortlist']


class RecommendationAdmin(django.contrib.admin.ModelAdmin):
    show_full_result_count = False
    search_fields = ('=titletranslation__text', '=recommender__titletranslation__text')


class WidgetInline(django.contrib.admin.StackedInline):
    model = Widget


class DooHickeyInline(django.contrib.admin.StackedInline):
    model = DooHickey


class GrommetInline(django.contrib.admin.StackedInline):
    model = Grommet


class WhatsitInline(django.contrib.admin.StackedInline):
    model = Whatsit


class FancyDoodadInline(django.contrib.admin.StackedInline):
    model = FancyDoodad


class CategoryAdmin(django.contrib.admin.ModelAdmin):
    list_display = ('id', 'collector', 'order')
    list_editable = ('order',)


class CategoryInline(django.contrib.admin.StackedInline):
    model = Category


class CollectorAdmin(django.contrib.admin.ModelAdmin):
    inlines = [
        WidgetInline, DooHickeyInline, GrommetInline, WhatsitInline,
        FancyDoodadInline, CategoryInline
    ]


class LinkInline(django.contrib.admin.TabularInline):
    model = Link
    extra = 1

    readonly_fields = ('posted', 'multiline', 'readonly_link_content')

    def multiline(self, instance):
        return InlineMultiline
test
string


class SubPostInline(django.contrib.admin.TabularInline):
    model = PrePopulatedSubPost

    prepopulated_fields = {'subslug': ('subtitle',)}

    def get_readonly_fields(self, request, obj=None):
        if obj and obj.published:
            return ('subslug',)
        return self.readonly_fields

    def get_prepopulated_fields(self, request, obj=None):
        if obj and obj.published:
            return {}
        return self.prepopulated_fields


class PrePopulatedPostAdmin(django.contrib.admin.ModelAdmin):
    list_display = ['title', 'slug']
    prepopulated_fields = {'slug': ('title',)}

    inlines = [SubPostInline]

    def get_readonly_fields(self, request, obj=None):
        if obj and obj.published:
            return ('slug',)
        return self.readonly_fields

    def get_prepopulated_fields(self, request, obj=None):
        if obj and obj.published:
            return {}
        return self.prepopulated_fields


class PostAdmin(django.contrib.admin.ModelAdmin):
    list_display = ['title', 'public']
    readonly_fields = ('posted', 'awesomeness_level', 'coolness', 'value', 'multiline', 'multiline_html', <function <lambda> at 0x7f5fe09820c0>, 'readonly_content')

    inlines = [
        LinkInline
    ]

    def coolness(self, instance):
        if instance.pk:
            return %d amount of cool. % instance.pk
        else:
            return Unknown coolness.

    def value(self, instance):
        return 1000

    def multiline(self, instance):
        return Multiline
test
string

    def multiline_html(self, instance):
        return mark_safeMultiline<br>
html<br>
content
    multiline_html.allow_tags = True

    value.short_description = Value in $US


class FieldOverridePostForm(django.forms.ModelForm):
    model = FieldOverridePost

    class Meta:
        help_texts = {'posted': 'Overridden help text for the date'}
        labels = {'public': 'Overridden public label'}


class FieldOverridePostAdmin(PostAdmin):
    form = FieldOverridePostForm


class CustomChangeList(ChangeList):
    def get_queryset(self, request):
        return self.root_queryset.filter(pk=9999)  


class GadgetAdmin(django.contrib.admin.ModelAdmin):
    def get_changelist(self, request, **kwargs):
        return CustomChangeList


class ToppingAdmin(django.contrib.admin.ModelAdmin):
    readonly_fields = ('pizzas',)


class PizzaAdmin(django.contrib.admin.ModelAdmin):
    readonly_fields = ('toppings',)


class WorkHourAdmin(django.contrib.admin.ModelAdmin):
    list_display = ('datum', 'employee')
    list_filter = ('employee',)


class FoodDeliveryAdmin(django.contrib.admin.ModelAdmin):
    list_display = ('reference', 'driver', 'restaurant')
    list_editable = ('driver', 'restaurant')


class CoverLetterAdmin(django.contrib.admin.ModelAdmin):
    

    def get_queryset(self, request):
        return super(CoverLetterAdmin, self).get_queryset(request).deferdate_written


class PaperAdmin(django.contrib.admin.ModelAdmin):
    

    def get_queryset(self, request):
        return super(PaperAdmin, self).get_queryset(request).onlytitle


class ShortMessageAdmin(django.contrib.admin.ModelAdmin):
    

    def get_queryset(self, request):
        return super(ShortMessageAdmin, self).get_queryset(request).defertimestamp


class TelegramAdmin(django.contrib.admin.ModelAdmin):
    

    def get_queryset(self, request):
        return super(TelegramAdmin, self).get_queryset(request).onlytitle


class StoryForm(django.forms.ModelForm):
    class Meta:
        widgets = {title: django.forms.HiddenInput}


class StoryAdmin(django.contrib.admin.ModelAdmin):
    list_display = ('id', 'title', 'content')
    list_display_links = ('title',)  
    list_editable = ('content',)
    form = StoryForm
    ordering = ['-pk']


class OtherStoryAdmin(django.contrib.admin.ModelAdmin):
    list_display = ('id', 'title', 'content')
    list_display_links = ('title', 'id')  
    list_editable = ('content',)
    ordering = ['-pk']


class ComplexSortedPersonAdmin(django.contrib.admin.ModelAdmin):
    list_display = ('name', 'age', 'is_employee', 'colored_name')
    ordering = ('name',)

    def colored_name(self, obj):
        return '<span style="color: 
    colored_name.allow_tags = True
    colored_name.admin_order_field = name


class PluggableSearchPersonAdmin(django.contrib.admin.ModelAdmin):
    list_display = ('name', 'age')
    search_fields = ('name',)

    def get_search_results(self, request, queryset, search_term):
        queryset, use_distinct = super(PluggableSearchPersonAdmin, self).get_search_results(request, queryset, search_term)
        try:
            search_term_as_int = int(search_term)
            queryset |= self.model.objects.filter(age=search_term_as_int)
        except:
            pass
        return queryset, use_distinct


class AlbumAdmin(django.contrib.admin.ModelAdmin):
    list_filter = ['title']


class PrePopulatedPostLargeSlugAdmin(django.contrib.admin.ModelAdmin):
    prepopulated_fields = {'slug': ('title',)}


class AdminOrderedFieldAdmin(django.contrib.admin.ModelAdmin):
    ordering = ('order',)
    list_display = ('stuff', 'order')


class AdminOrderedModelMethodAdmin(django.contrib.admin.ModelAdmin):
    ordering = ('order',)
    list_display = ('stuff', 'some_order')


class AdminOrderedAdminMethodAdmin(django.contrib.admin.ModelAdmin):
    def some_admin_order(self, obj):
        return obj.order
    some_admin_order.admin_order_field = order
    ordering = ('order',)
    list_display = ('stuff', 'some_admin_order')


def admin_ordered_callable(obj):
    return obj.order
admin_ordered_callable.admin_order_field = order


class AdminOrderedCallableAdmin(django.contrib.admin.ModelAdmin):
    ordering = ('order',)
    list_display = (stuff, admin_ordered_callable)


class ReportAdmin(django.contrib.admin.ModelAdmin):
    def extra(self, request):
        return HttpResponse()

    def get_urls(self):
        
        return [
            url(^extra/$,
                self.extra,
                name=cable_extra),
        ]


class CustomTemplateBooleanFieldListFilter(BooleanFieldListFilter):
    template = custom_filter_template.html


class CustomTemplateFilterColorAdmin(django.contrib.admin.ModelAdmin):
    list_filter = ((warm, CustomTemplateBooleanFieldListFilter),)



class RelatedPrepopulatedInline1(django.contrib.admin.StackedInline):
    fieldsets = ((None, {'fields': (('pubdate', 'status'), ('name', 'slug1', 'slug2'))}),)
    model = RelatedPrepopulated
    extra = 1
    prepopulated_fields = {'slug1': ['name', 'pubdate'], 'slug2': ['status', 'name']}


class RelatedPrepopulatedInline2(django.contrib.admin.TabularInline):
    model = RelatedPrepopulated
    extra = 1
    prepopulated_fields = {'slug1': ['name', 'pubdate'], 'slug2': ['status', 'name']}


class MainPrepopulatedAdmin(django.contrib.admin.ModelAdmin):
    inlines = [RelatedPrepopulatedInline1, RelatedPrepopulatedInline2]
    fieldsets = ((None, {'fields': (('pubdate', 'status'), ('name', 'slug1', 'slug2'))}),)
    prepopulated_fields = {'slug1': ['name', 'pubdate'], 'slug2': ['status', 'name']}


class UnorderedObjectAdmin(django.contrib.admin.ModelAdmin):
    list_display = ['name']
    list_editable = ['name']
    list_per_page = 2


class UndeletableObjectAdmin(django.contrib.admin.ModelAdmin):
    def change_view(self, *args, **kwargs):
        kwargs[extra_context] = {'show_delete': False}
        return super(UndeletableObjectAdmin, self).change_view(*args, **kwargs)


class UnchangeableObjectAdmin(django.contrib.admin.ModelAdmin):
    def get_urls(self):
        
        urlpatterns = super(UnchangeableObjectAdmin, self).get_urls()
        return [p for p in urlpatterns if not p.name.endswith_change]


def callable_on_unknown(obj):
    return obj.unknown


class AttributeErrorRaisingAdmin(django.contrib.admin.ModelAdmin):
    list_display = [callable_on_unknown, ]


class CustomManagerAdmin(django.contrib.admin.ModelAdmin):
    def get_queryset(self, request):
        return FilteredManager.objects


class MessageTestingAdmin(django.contrib.admin.ModelAdmin):
    actions = ['message_debug', 'message_info', 'message_success', 'message_warning', 'message_error', 'message_extra_tags']

    def message_debug(self, request, selected):
        self.message_user(request, Test debug, level=debug)

    def message_info(self, request, selected):
        self.message_user(request, Test info, level=info)

    def message_success(self, request, selected):
        self.message_user(request, Test success, level=success)

    def message_warning(self, request, selected):
        self.message_user(request, Test warning, level=warning)

    def message_error(self, request, selected):
        self.message_user(request, Test error, level=error)

    def message_extra_tags(self, request, selected):
        self.message_user(request, Test tags, extra_tags=extra_tag)


class ChoiceList(django.contrib.admin.ModelAdmin):
    list_display = ['choice']
    readonly_fields = ['choice']
    fields = ['choice']


class DependentChildAdminForm(django.forms.ModelForm):
    
    def clean(self):
        parent = self.cleaned_data.getparent
        if parent.family_name and parent.family_name != self.cleaned_data.getfamily_name:
            raise ValidationErrorChildren must share a family name with their parents in this contrived test case
        return super(DependentChildAdminForm, self).clean()


class DependentChildInline(django.contrib.admin.TabularInline):
    model = DependentChild
    form = DependentChildAdminForm


class ParentWithDependentChildrenAdmin(django.contrib.admin.ModelAdmin):
    inlines = [DependentChildInline]




class FormWithoutHiddenField(django.forms.ModelForm):
    first = django.forms.CharField()
    second = django.forms.CharField()


class FormWithoutVisibleField(django.forms.ModelForm):
    first = django.forms.CharField(widget=django.forms.HiddenInput)
    second = django.forms.CharField(widget=django.forms.HiddenInput)


class FormWithVisibleAndHiddenField(django.forms.ModelForm):
    first = django.forms.CharField(widget=django.forms.HiddenInput)
    second = django.forms.CharField()


class EmptyModelVisibleAdmin(django.contrib.admin.ModelAdmin):
    form = FormWithoutHiddenField
    fieldsets = ((None, {'fields': (('first', 'second'),)}),)


class EmptyModelHiddenAdmin(django.contrib.admin.ModelAdmin):
    form = FormWithoutVisibleField
    fieldsets = EmptyModelVisibleAdmin.fieldsets


class EmptyModelMixinAdmin(django.contrib.admin.ModelAdmin):
    form = FormWithVisibleAndHiddenField
    fieldsets = EmptyModelVisibleAdmin.fieldsets


class CityInlineAdmin(django.contrib.admin.TabularInline):
    model = City
    view_on_site = False


class StateAdmin(django.contrib.admin.ModelAdmin):
    inlines = [CityInlineAdmin]


class RestaurantInlineAdmin(django.contrib.admin.TabularInline):
    model = Restaurant
    view_on_site = True


class CityAdmin(django.contrib.admin.ModelAdmin):
    inlines = [RestaurantInlineAdmin]
    view_on_site = True


class WorkerAdmin(django.contrib.admin.ModelAdmin):
    def view_on_site(self, obj):
        return /worker/%s/%s/ % (obj.surname, obj.name)


class WorkerInlineAdmin(django.contrib.admin.TabularInline):
    model = Worker

    def view_on_site(self, obj):
        return /worker_inline/%s/%s/ % (obj.surname, obj.name)


class RestaurantAdmin(django.contrib.admin.ModelAdmin):
    inlines = [WorkerInlineAdmin]
    view_on_site = False

    def get_changeform_initial_data(self, request):
        return {'name': 'overridden_value'}


class FunkyTagAdmin(django.contrib.admin.ModelAdmin):
    list_display = ('name', 'content_object')


class InlineReferenceInline(django.contrib.admin.TabularInline):
    model = InlineReference


class InlineRefererAdmin(django.contrib.admin.ModelAdmin):
    inlines = [InlineReferenceInline]


class PlotReadonlyAdmin(django.contrib.admin.ModelAdmin):
    readonly_fields = ('plotdetails',)


class GetFormsetsArgumentCheckingAdmin(django.contrib.admin.ModelAdmin):
    fields = ['name']

    def add_view(self, request, *args, **kwargs):
        request.is_add_view = True
        return super(GetFormsetsArgumentCheckingAdmin, self).add_view(request, *args, **kwargs)

    def change_view(self, request, *args, **kwargs):
        request.is_add_view = False
        return super(GetFormsetsArgumentCheckingAdmin, self).change_view(request, *args, **kwargs)

    def get_formsets_with_inlines(self, request, obj=None):
        if request.is_add_view and obj is not None:
            raise Exception()
        if not request.is_add_view and obj is None:
            raise Exception()
        return super(GetFormsetsArgumentCheckingAdmin, self).get_formsets_with_inlines(request, obj)


site = django.contrib.admin.AdminSite(name=admin)
site.site_url = /my-site-url/
site.register(Article, ArticleAdmin)
site.register(CustomArticle, CustomArticleAdmin)
site.register(Section, save_as=True, inlines=[ArticleInline], readonly_fields=['name_property'])
site.register(ModelWithStringPrimaryKey)
site.register(Color)
site.register(Thing, ThingAdmin)
site.register(Actor)
site.register(Inquisition, InquisitionAdmin)
site.register(Sketch, SketchAdmin)
site.register(Person, PersonAdmin)
site.register(Persona, PersonaAdmin)
site.register(Subscriber, SubscriberAdmin)
site.register(ExternalSubscriber, ExternalSubscriberAdmin)
site.register(OldSubscriber, OldSubscriberAdmin)
site.register(Podcast, PodcastAdmin)
site.register(Vodcast, VodcastAdmin)
site.register(Parent, ParentAdmin)
site.register(EmptyModel, EmptyModelAdmin)
site.register(Fabric, FabricAdmin)
site.register(Gallery, GalleryAdmin)
site.register(Picture, PictureAdmin)
site.register(Language, LanguageAdmin)
site.register(Recommendation, RecommendationAdmin)
site.register(Recommender)
site.register(Collector, CollectorAdmin)
site.register(Category, CategoryAdmin)
site.register(Post, PostAdmin)
site.register(FieldOverridePost, FieldOverridePostAdmin)
site.register(Gadget, GadgetAdmin)
site.register(Villain)
site.register(SuperVillain)
site.register(Plot)
site.register(PlotDetails)
site.register(PlotProxy, PlotReadonlyAdmin)
site.register(CyclicOne)
site.register(CyclicTwo)
site.register(WorkHour, WorkHourAdmin)
site.register(Reservation)
site.register(FoodDelivery, FoodDeliveryAdmin)
site.register(RowLevelChangePermissionModel, RowLevelChangePermissionModelAdmin)
site.register(Paper, PaperAdmin)
site.register(CoverLetter, CoverLetterAdmin)
site.register(ShortMessage, ShortMessageAdmin)
site.register(Telegram, TelegramAdmin)
site.register(Story, StoryAdmin)
site.register(OtherStory, OtherStoryAdmin)
site.register(Report, ReportAdmin)
site.register(MainPrepopulated, MainPrepopulatedAdmin)
site.register(UnorderedObject, UnorderedObjectAdmin)
site.register(UndeletableObject, UndeletableObjectAdmin)
site.register(UnchangeableObject, UnchangeableObjectAdmin)
site.register(State, StateAdmin)
site.register(City, CityAdmin)
site.register(Restaurant, RestaurantAdmin)
site.register(Worker, WorkerAdmin)
site.register(FunkyTag, FunkyTagAdmin)
site.register(ReferencedByParent)
site.register(ChildOfReferer)
site.register(ReferencedByInline)
site.register(InlineReferer, InlineRefererAdmin)
site.register(ReferencedByGenRel)
site.register(GenRelReference)










site.register(Book, inlines=[ChapterInline])
site.register(Promo)
site.register(ChapterXtra1, ChapterXtra1Admin)
site.register(Pizza, PizzaAdmin)
site.register(Topping, ToppingAdmin)
site.register(Album, AlbumAdmin)
site.register(Question)
site.register(Answer)
site.register(PrePopulatedPost, PrePopulatedPostAdmin)
site.register(ComplexSortedPerson, ComplexSortedPersonAdmin)
site.register(FilteredManager, CustomManagerAdmin)
site.register(PluggableSearchPerson, PluggableSearchPersonAdmin)
site.register(PrePopulatedPostLargeSlug, PrePopulatedPostLargeSlugAdmin)
site.register(AdminOrderedField, AdminOrderedFieldAdmin)
site.register(AdminOrderedModelMethod, AdminOrderedModelMethodAdmin)
site.register(AdminOrderedAdminMethod, AdminOrderedAdminMethodAdmin)
site.register(AdminOrderedCallable, AdminOrderedCallableAdmin)
site.register(Color2, CustomTemplateFilterColorAdmin)
site.register(Simple, AttributeErrorRaisingAdmin)
site.register(UserMessenger, MessageTestingAdmin)
site.register(Choice, ChoiceList)
site.register(ParentWithDependentChildren, ParentWithDependentChildrenAdmin)
site.register(EmptyModelHidden, EmptyModelHiddenAdmin)
site.register(EmptyModelVisible, EmptyModelVisibleAdmin)
site.register(EmptyModelMixin, EmptyModelMixinAdmin)
site.register(StumpJoke)
site.register(Recipe)
site.register(Ingredient)
site.register(NotReferenced)
site.register(ExplicitlyProvidedPK, GetFormsetsArgumentCheckingAdmin)
site.register(ImplicitlyGeneratedPK, GetFormsetsArgumentCheckingAdmin)

site.register(User, UserAdmin)
site.register(Group, GroupAdmin)


site2 = django.contrib.admin.AdminSite(name=namespaced_admin)
site2.register(User, UserAdmin)
site2.register(Group, GroupAdmin)
site2.register(ParentWithUUIDPK)
site2.register(
    RelatedWithUUIDPKModel,
    list_display=['pk', 'parent'],
    list_editable=['parent'],
    raw_id_fields=['parent'],
)

site7 = django.contrib.admin.AdminSite(name=admin7)
site7.register(Article, ArticleAdmin2)
