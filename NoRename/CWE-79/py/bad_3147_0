


from MoinMoin import config, wikiutil
from MoinMoin.action.AttachFile import _get_files
from MoinMoin.Page import Page





def macro_dialog(request):
    help = get_macro_help(request)
    request.write(
         % request.cfg.url_prefix_static)

    macros = []
    for macro in macro_list(request):
        if macro == BR:
            selected =  selected="selected"
        else:
            selected = 
        if macro in help:
            macros.append(<option value="%s"%s>%s</option> %
                          (help[macro].groupprototype, selected, macro))
        else:
            macros.append(<option value="%s"%s>%s</option> %
                          (macro, selected, macro))

    request.write(<built-in method join of str object at 0x7f5fe6c6e138>(macros))
    request.write()

    helptexts = []
    for macro in macro_list(request):
        if macro in help:
            match = help[macro]
            prototype = match.groupprototype
            helptext = match.grouphelp
        else:
            prototype = macro
            helptext = 
        helptexts.append(
            
            % (prototype, prototype, helptext))

    request.write(<built-in method join of str object at 0x7f5fe6c69420>(helptexts))
    request.write()

def macro_list(request):
    from MoinMoin import macro
    macros = MoinMoin.macro.getNames(request.cfg)
    macros.sort()
    return macros

def get_macro_help(request):
    
    helppage = MoinMoin.wikiutil.getLocalizedPage(request, HelpOnMacros)
    content = helppage.get_raw_body()
    macro_re = re.compile(
        \|\|(<.*?>)?\{\{\{ +
        <<(?P<prototype>(?P<macro>\w*).*)>> +
        \}\}\}\s*\|\| +
        [^|]*\|\|[^|]*\|\|<[^>]*> +
        \s*(?P<help>.*?)\s*\|\|\s*(?P<example>.*?)\s*(<<[^>]*>>)*\s*\|\|$, re.U|re.M)
    help = {}
    for match in macro_re.finditer(content):
        help[match.groupmacro] = match
    return help





def page_list(request):
    from MoinMoin import search
    name = request.values.get('pagename', '')
    if name:
        searchresult = MoinMoin.search.searchPages(request, t:"%s" % name)
        pages = [p.page_name for p in searchresult.hits]
    else:
        pages = [name]
    request.write(
         % <built-in method join of str object at 0x7f5fe6c69420>([<option>%s</option>
 % MoinMoin.wikiutil.escape(p) for p in pages]))

def link_dialog(request):
    
    name = request.values.get('pagename', '')
    if name:
        from MoinMoin import search
        
        searchresult = MoinMoin.search.searchPages(request, t:"%s" % name)

        pages = [p.page_name for p in searchresult.hits]
        pages.sort()
        pages[0:0] = [name]
        page_list =  % <built-in method join of str object at 0x7f5fe6c6e138>([<option value="%s">%s</option> % (MoinMoin.wikiutil.escape(page), MoinMoin.wikiutil.escape(page))
                 for page in pages])
    else:
        page_list = 

    
    interwiki_list = MoinMoin.wikiutil.load_wikimap(request)
    interwiki = interwiki_list.keys()
    interwiki.sort()
    iwpreferred = request.cfg.interwiki_preferred[:]
    if not iwpreferred or iwpreferred and iwpreferred[-1] is not None:
        resultlist = iwpreferred
        for iw in interwiki:
            if not iw in iwpreferred:
                resultlist.append(iw)
    else:
        resultlist = iwpreferred[:-1]
    interwiki = <built-in method join of str object at 0x7f5fe6c6e138>(
        [<option value="%s">%s</option> % (MoinMoin.wikiutil.escape(key), MoinMoin.wikiutil.escape(key))
         for key in resultlist])

    
    url_prefix_static = request.cfg.url_prefix_static
    scriptname = request.script_root + /
    action = scriptname
    basepage = MoinMoin.wikiutil.escape(request.page.page_name)
    request.write(u % locals())


def attachment_dialog(request):
    
    
    
    
    
    _ = request.getText
    url_prefix_static = request.cfg.url_prefix_static

    
    action = request.script_root + /

    
    
    
    
    

    requestedPagename = MoinMoin.wikiutil.escape(request.values.get('requestedPagename', ''), quote=True)
    destinationPagename = MoinMoin.wikiutil.escape(request.values.get(destinationPagename, request.page.page_name), quote=True)

    attachmentsPagename = requestedPagename or MoinMoin.wikiutil.escape(request.page.page_name)
    attachments = _get_files(request, attachmentsPagename)
    attachments.sort()
    attachmentList =  % <built-in method join of str object at 0x7f5fe6c6e138>([<option value="%s">%s</option> % (MoinMoin.wikiutil.escape(attachment, quote=True), MoinMoin.wikiutil.escape(attachment, quote=True))
                 for attachment in attachments])

    
    langAttachmentLocation = _Attachment location
    langPagename = _Page name
    langAttachmentname = _Attachment name
    langListAttachmentsButton = _Refresh attachment list
    langAttachmentList = _List of attachments

    if len(attachmentsPagename) > 50:
        shortenedPagename = %s ... %s % (attachmentsPagename[0:25], attachmentsPagename[-25:])
    else:
        shortenedPagename = attachmentsPagename
    langAvailableAttachments = %s: %s % (_Available attachments for page, shortenedPagename)

    request.write( % locals())






def image_dialog(request):
    url_prefix_static = request.cfg.url_prefix_static
    request.write( % locals())






def execute(pagename, request):
    dialog = request.values.get('dialog', '')

    if dialog == macro:
        macro_dialog(request)
    elif dialog == macrolist:
        macro_list(request)
    elif dialog == pagelist:
        page_list(request)
    elif dialog == link:
        link_dialog(request)
    elif dialog == attachment:
        attachment_dialog(request)
    elif dialog == image:
        image_dialog(request)
    else:
        from MoinMoin.Page import Page
        request.theme.add_msg('Dialog unknown!', 'error')
        Page(request, pagename).send_page()

