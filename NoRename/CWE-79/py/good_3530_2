from django import template
from django.conf import settings
from django.db.models import Q
from django.template import NodeList, TemplateSyntaxError
from django.django.template.loader import render_to_string
from django.utils import simplejson
from django.utils.html import escape
from django.utils.translation import ugettext_lazy as _
from djblets.util.decorators import basictag, blocktag
from djblets.util.misc import get_object_or_none
from djblets.util.templatetags.djblets_utils import humanize_list

from reviewboard.accounts.models import Profile
from reviewboard.diffviewer.models import DiffSet
from reviewboard.reviews.models import Comment, Group, ReviewRequest, \
                                       ScreenshotComment


register = django.template.Library()


@register.tag
@blocktag
def forcomment(context, nodelist, filediff, review=None):
    
    new_nodelist = NodeList()
    context.push()

    if not review:
        comments = filediff.comments.all()
    else:
        comments = filediff.comments.filter(review=review)

    for comment in comments:
        context[comment] = comment

        for node in nodelist:
            new_nodelist.append(node.render(context))

    context.pop()
    return new_nodelist.render(context)


@register.tag
@blocktag
def ifneatnumber(context, nodelist, rid):
    
    if rid == None or rid < 1000:
        return 

    ridstr = str(rid)
    interesting = False

    context.push()
    context[milestone] = False
    context[palindrome] = False

    if rid >= 1000:
        trailing = ridstr[1:]
        if trailing == 0 * len(trailing):
            context[milestone] = True
            interesting = True

    if not interesting:
        if ridstr == <built-in method join of str object at 0x7f5fe6c69420>(reversed(ridstr)):
            context[palindrome] = True
            interesting = True

    if not interesting:
        context.pop()
        return 

    s = nodelist.render(context)
    context.pop()
    return s


@register.tag
@basictag(takes_context=True)
def commentcounts(context, filediff, interfilediff=None):
    
    comment_dict = {}
    user = context.get('user', None)

    if interfilediff:
        query = reviewboard.reviews.models.Comment.objects.filter(filediff=filediff,
                                       interfilediff=interfilediff)
    else:
        query = reviewboard.reviews.models.Comment.objects.filter(filediff=filediff,
                                       interfilediff__isnull=True)

    for comment in query:
        review = get_object_or_none(comment.review)

        if review and (review.public or review.user == user):
            key = (comment.first_line, comment.num_lines)

            comment_dict.setdefault(key, []).append({
                comment_id: comment.id,
                text: escape(comment.text),
                line: comment.first_line,
                num_lines: comment.num_lines,
                user: {
                    username: review.user.username,
                    name: review.user.get_full_name() or review.user.username,
                },
                
                url: comment.get_review_url(),
                localdraft: review.user == user and \
                              not review.public,
            })

    comments_array = []

    for key, value in comment_dict.iteritems():
        comments_array.append({
            linenum: key[0],
            num_lines: key[1],
            comments: value,
        })

    comments_array.sort(cmp=<function <lambda> at 0x7f5fe09822a0>)

    return django.utils.simplejson.dumps(comments_array)


@register.tag
@basictag(takes_context=True)
def screenshotcommentcounts(context, screenshot):
    
    comments = {}
    user = context.get('user', None)

    for comment in screenshot.comments.all():
        review = get_object_or_none(comment.review)

        if review and (review.public or review.user == user):
            position = %dx%d+%d+%d % (comment.w, comment.h, \
                                        comment.x, comment.y)

            comments.setdefault(position, []).append({
                id: comment.id,
                text: escape(comment.text),
                user: {
                    username: review.user.username,
                    name: review.user.get_full_name() or review.user.username,
                },
                url: comment.get_review_url(),
                localdraft : review.user == user and \
                               not review.public,
                x : comment.x,
                y : comment.y,
                w : comment.w,
                h : comment.h,
            })

    return django.utils.simplejson.dumps(comments)


@register.tag
@basictag(takes_context=True)
def reply_list(context, review, comment, context_type, context_id):
    
    def generate_reply_html(reply, timestamp, text):
        return render_to_string(reviews/review_reply.html, {
            context_id: context_id,
            id: reply.id,
            review: review,
            timestamp: timestamp,
            text: text,
            reply_user: reply.user,
            draft: not reply.public
        })

    def process_body_replies(queryset, attrname, user):
        if user.is_anonymous():
            queryset = queryset.filter(public=True)
        else:
            queryset = queryset.filter(Q(public=True) | Q(user=user))

        s = 
        for reply_comment in queryset:
            s += generate_reply_html(reply, reply.timestamp,
                                     getattr(reply, attrname))

        return s

    user = context.get('user', None)
    if user.is_anonymous():
        user = None

    s = 

    if context_type == comment or context_type == screenshot_comment:
        for reply_comment in comment.public_replies(user):
            s += generate_reply_html(reply_comment.review.get(),
                                     reply_comment.timestamp,
                                     reply_comment.text)
    elif context_type == body_top or context_type == body_bottom:
        q = Q(public=True)

        if user:
            q = q | Q(user=user)

        replies = getattr(review, %s_replies % context_type).filter(q)

        for reply in replies:
            s += generate_reply_html(reply, reply.timestamp,
                                     getattr(reply, context_type))

        return s
    else:
        raise TemplateSyntaxError, Invalid context type passed

    return s


@register.inclusion_tag(reviews/review_reply_section.html,
                        takes_context=True)
def reply_section(context, review, comment, context_type, context_id):
    
    if comment != :
        if type(comment) is ScreenshotComment:
            context_id += s
        context_id += str(comment.id)

    return {
        review: review,
        comment: comment,
        context_type: context_type,
        context_id: context_id,
        user: context.get('user', None)
    }


@register.inclusion_tag(reviews/dashboard_entry.html, takes_context=True)
def dashboard_entry(context, level, text, view, group=None):
    
    user = context.get('user', None)
    datagrid = context.get('datagrid', None)
    starred = False
    show_count = True
    count = 0

    if view == to-group:
        count = datagrid.counts[groups].get(group.name, 0)
    elif view == watched-groups:
        starred = True
        show_count = False
    elif view in datagrid.counts:
        count = datagrid.counts[view]

        if view == starred:
            starred = True
    else:
        raise django.template.TemplateSyntaxError, \
            Invalid view type '%s' passed to 'dashboard_entry' tag. % view

    return {
        MEDIA_URL: django.conf.settings.MEDIA_URL,
        MEDIA_SERIAL: django.conf.settings.MEDIA_SERIAL,
        level: level,
        text: text,
        view: view,
        group: group,
        count: count,
        show_count: show_count,
        user: user,
        starred: starred,
        selected: context.get('view', None) == view and \
                    (not group or context.get('group', None) == group.name),
    }


@register.simple_tag
def reviewer_list(review_request):
    
    return humanize_list([group.display_name or group.name \
                          for group in review_request.target_groups.all()] + \
                         [user.get_full_name() or user.username \
                          for user  in review_request.target_people.all()])


@register.filter
def bug_url(bug_id, review_request):
    
    if (review_request.repository and
        review_request.repository.bug_tracker and
        %s in review_request.repository.bug_tracker):
        try:
            return review_request.repository.bug_tracker % bug_id
        except TypeError:
            logging.error(Error creating bug URL. The bug tracker URL '%s' 
                          is likely invalid. %
                          review_request.repository.bug_tracker)

    return None


@register.filter
def diffsets_with_comments(review, current_pair):
    
    if not review:
        return

    diffsets = reviewboard.diffviewer.models.DiffSet.objects.filter(files__comments__review=review)
    diffsets = diffsets.filter(files__comments__interfilediff__isnull=True)
    diffsets = diffsets.distinct()

    for diffset in diffsets:
        yield {
            diffset: diffset,
            is_current: current_pair[0] == diffset and
                          current_pair[1] == None,
        }


@register.filter
def interdiffs_with_comments(review, current_pair):
    
    if not review:
        return

    diffsets = reviewboard.diffviewer.models.DiffSet.objects.filter(files__comments__review=review)
    diffsets = diffsets.filter(files__comments__interfilediff__isnull=False)
    diffsets = diffsets.distinct()

    for diffset in diffsets:
        interdiffs = reviewboard.diffviewer.models.DiffSet.objects.filter(
            files__interdiff_comments__filediff__diffset=diffset).distinct()

        for interdiff in interdiffs:
            yield {
                diffset: diffset,
                interdiff: interdiff,
                is_current: current_pair[0] == diffset and
                              current_pair[1] == interdiff,
            }


@register.filter
def has_comments_in_diffsets_excluding(review, diffset_pair):
    
    if not review:
        return False

    current_diffset, interdiff = diffset_pair

    
    q = reviewboard.diffviewer.models.DiffSet.objects.filter(files__comments__review=review)
    q = q.filter(files__comments__interfilediff__isnull=True).distinct()

    if not interdiff:
        
        q = q.exclude(pk=current_diffset.id)

    if q.count() > 0:
        return True

    
    q = reviewboard.diffviewer.models.DiffSet.objects.filter(files__comments__review=review)
    q = q.filter(files__comments__interfilediff__isnull=False)

    if interdiff:
        
        q = q.exclude(pk=current_diffset.id,
                      files__comments__interfilediff__diffset=interdiff)

    return q.count() > 0


@register.tag
@basictag(takes_context=True)
def star(context, obj):
    
    return render_star(context.get('user', None), obj)


def render_star(user, obj):
    
    if user.is_anonymous():
        return 

    profile = None

    if not hasattr(obj, starred):
        try:
            profile = user.get_profile()
        except reviewboard.accounts.models.Profile.DoesNotExist:
            return 

    if isinstance(obj, ReviewRequest):
        obj_info = {
            type: reviewrequests,
            id: obj.id
        }

        if hasattr(obj, starred):
            starred = obj.starred
        else:
            starred = \
                profile.starred_review_requests.filter(pk=obj.id).count() > 0
    elif isinstance(obj, Group):
        obj_info = {
            type: groups,
            id: obj.name
        }

        if hasattr(obj, starred):
            starred = obj.starred
        else:
            starred = \
                profile.starred_groups.filter(pk=obj.id).count() > 0
    else:
        raise django.template.TemplateSyntaxError, \
            star tag received an incompatible object type (%s) % \
            type(obj)

    if starred:
        image_alt = _Starred
    else:
        image_alt = _Click to star

    return render_to_string(reviews/star.html, {
        object: obj_info,
        starred: int(starred),
        alt: image_alt,
        user: user,
        MEDIA_URL: django.conf.settings.MEDIA_URL,
    })
