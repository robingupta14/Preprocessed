





from tornado import web, escape
from tornado.log import app_log

from ..base.handlers import (
    IPythonHandler, FilesRedirectHandler,
    path_regex,
)
from nbformat import from_dict

from ipython_genutils.py3compat import cast_bytes
from ipython_genutils import text

def find_resource_files(output_files_dir):
    files = []
    for dirpath, dirnames, filenames in os.walk(output_files_dir):
        files.extend([os.path.join(dirpath, f) for f in filenames])
    return files

def respond_zip(handler, name, output, resources):
    
    
    output_files = resources.get('outputs', None)
    if not output_files:
        return False

    
    zip_filename = os.path.splitext(name)[0] + .zip
    handler.set_attachment_header(zip_filename)
    handler.set_header('Content-Type', 'application/zip')
    handler.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')

    
    buffer = io.BytesIO()
    zipf = zipfile.ZipFile(buffer, mode=w, compression=zipfile.ZIP_DEFLATED)
    output_filename = os.path.splitext(name)[0] + resources[output_extension]
    zipf.writestr(output_filename, cast_bytes(output, utf-8))
    for filename, data in output_files.items():
        zipf.writestr(os.path.basename(filename), data)
    zipf.close()

    handler.finish(buffer.getvalue())
    return True

def get_exporter(format, **kwargs):
    
    
    try:
        from nbconvert.exporters.base import get_exporter
    except ImportError as e:
        raise tornado.web.HTTPError(500, Could not import nbconvert: %s % e)

    try:
        Exporter = get_exporter(format)
    except KeyError:
        
        raise tornado.web.HTTPError(404, No exporter for format: %s % format)

    try:
        return Exporter(**kwargs)
    except Exception as e:
        tornado.log.app_log.exception(Could not construct Exporter: %s, Exporter)
        raise tornado.web.HTTPError(500, Could not construct Exporter: %s % e)

class NbconvertFileHandler(IPythonHandler):

    SUPPORTED_METHODS = ('GET',)

    @property
    def content_security_policy(self):
        
        
        return super(NbconvertFileHandler, self).content_security_policy + \
               ; sandbox allow-scripts

    @tornado.web.authenticated
    def get(self, format, path):

        exporter = get_exporter(format, config=self.config, log=self.log)

        path = path.strip/
        
        
        if hasattr(self.contents_manager, _get_os_path):
            os_path = self.contents_manager._get_os_path(path)
            ext_resources_dir, basename = os.path.split(os_path)
        else:
            ext_resources_dir = None

        model = self.contents_manager.get(path=path)
        name = model[name]
        if model[type] != notebook:
            
            return FilesRedirectHandler.redirect_to_files(self, path)

        nb = model[content]

        self.set_header(Last-Modified, model[last_modified])

        
        mod_date = model[last_modified].strftime(ipython_genutils.text.date_format)
        nb_title = os.path.splitext(name)[0]

        resource_dict = {
            metadata: {
                name: nb_title,
                modified_date: mod_date
            },
            config_dir: self.application.settings[config_dir]
        }

        if ext_resources_dir:
            resource_dict[metadata][path] = ext_resources_dir

        try:
            output, resources = exporter.from_notebook_node(
                nb,
                resources=resource_dict
            )
        except Exception as e:
            self.log.exception(nbconvert failed: %s, e)
            raise tornado.web.HTTPError(500, nbconvert failed: %s % e)

        if respond_zip(self, name, output, resources):
            return

        
        if self.get_argument('download', 'false').lower() == true:
            filename = os.path.splitext(name)[0] + resources[output_extension]
            self.set_attachment_header(filename)

        
        if exporter.output_mimetype:
            self.set_header(Content-Type,
                            %s; charset=utf-8 % exporter.output_mimetype)

        self.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')
        self.finish(output)

class NbconvertPostHandler(IPythonHandler):
    SUPPORTED_METHODS = ('POST',)

    @property
    def content_security_policy(self):
        
        
        return super(NbconvertPostHandler, self).content_security_policy + \
               ; sandbox allow-scripts

    @tornado.web.authenticated
    def post(self, format):
        exporter = get_exporter(format, config=self.config)

        model = self.get_json_body()
        name = model.get('name', 'notebook.ipynb')
        nbnode = from_dict(model[content])

        try:
            output, resources = exporter.from_notebook_node(nbnode, resources={
                metadata: {name: name[:name.rfind.],},
                config_dir: self.application.settings[config_dir],
            })
        except Exception as e:
            raise tornado.web.HTTPError(500, nbconvert failed: %s % e)

        if respond_zip(self, name, output, resources):
            return

        
        if exporter.output_mimetype:
            self.set_header(Content-Type,
                            %s; charset=utf-8 % exporter.output_mimetype)

        self.finish(output)






_format_regex = (?P<format>\w+)


default_handlers = [
    (/nbconvert/%s % _format_regex, NbconvertPostHandler),
    (/nbconvert/%s%s % (_format_regex, path_regex),
         NbconvertFileHandler),
]
