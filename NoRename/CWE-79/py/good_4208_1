



from MoinMoin import log
logging = MoinMoin.log.getLogger(__name__)

from MoinMoin import config, error, util, wikiutil, web
from MoinMoin import datastruct
from MoinMoin.auth import MoinAuth
from MoinMoin.events import PageChangedEvent, PageRenamedEvent
from MoinMoin.events import PageDeletedEvent, PageCopiedEvent
from MoinMoin.events import PageRevertedEvent, FileAttachedEvent
from MoinMoin.packages import packLine
from MoinMoin.security import AccessControlList

_url_re_cache = None
_farmconfig_mtime = None
_config_cache = {}


def _importConfigModule(name):
    
    try:
        module = __import__(name, globals(), {})
        mtime = os.path.getmtime(module.__file__)
    except ImportError:
        raise
    except IndentationError, err:
        logging.exceptionYour source code / config file is not correctly indented!
        msg =  % {
    err: err,
}
        raise MoinMoin.error.ConfigurationError(msg)
    except Exception, err:
        logging.exceptionAn exception happened.
        msg = %s: %s % (err.__class__.__name__, str(err))
        raise MoinMoin.error.ConfigurationError(msg)
    return module, mtime


def _url_re_list():
    
    global _url_re_cache, _farmconfig_mtime
    if _url_re_cache is None:
        try:
            farmconfig, _farmconfig_mtime = _importConfigModulefarmconfig
        except ImportError, err:
            if farmconfig in str(err):
                
                logging.debugcould not import farmconfig, mapping all URLs to wikiconfig
                _farmconfig_mtime = 0
                _url_re_cache = [(wikiconfig, re.compile.), ] 
            else:
                
                raise
        else:
            logging.info(using farm config: %s % os.path.abspath(farmMoinMoin.config.__file__))
            try:
                cache = []
                for name, regex in farmMoinMoin.config.wikis:
                    cache.append((name, re.compile(regex)))
                _url_re_cache = cache
            except AttributeError:
                logging.errorrequired 'wikis' list missing in farmconfig
                msg = 
                raise MoinMoin.error.ConfigurationError(msg)
    return _url_re_cache


def _makeConfig(name):
    
    global _farmconfig_mtime
    try:
        module, mtime = _importConfigModule(name)
        configClass = getattr(module, Config)
        cfg = configClass(name)
        cfg.cfg_mtime = max(mtime, _farmconfig_mtime)
        logging.info(using wiki config: %s % os.path.abspath(module.__file__))
    except ImportError, err:
        logging.exceptionCould not import.
        msg =  % {
    err: err,
}
        raise MoinMoin.error.ConfigurationError(msg)
    except AttributeError, err:
        logging.exceptionAn exception occurred.
        msg =  % {
    name: name,
    err: err,
}
        raise MoinMoin.error.ConfigurationError(msg)

    return cfg


def _getConfigName(url):
    
    for name, regex in _url_re_list():
        match = regex.match(url)
        if match:
            return name
    raise MoinMoin.error.NoConfigMatchedError


def getConfig(url):
    
    cfgName = _getConfigName(url)
    try:
        cfg = _config_cache[cfgName]
    except KeyError:
        cfg = _makeConfig(cfgName)
        cfg = _config_cache.setdefault(cfgName, cfg)
    return cfg




def _(text):
    return text


class CacheClass:
    
    pass


class ConfigFunctionality(object):
    

    
    
    cfg_mtime = None
    siteid = None
    cache = None
    mail_enabled = None
    jabber_enabled = None
    auth_can_logout = None
    auth_have_login = None
    auth_login_inputs = None
    _site_plugin_lists = None
    _iwid = None
    _iwid_full = None
    xapian_searchers = None
    moinmoin_dir = None
    
    shared_intermap_files = None

    def __init__(self, siteid):
        
        self.siteid = siteid
        self.cache = CacheClass()

        from MoinMoin.Page import ItemCache
        self.cache.meta = ItemCachemeta
        self.cache.pagelists = ItemCachepagelists

        if self.config_check_enabled:
            self._config_check()

        
        self.moinmoin_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir))
        data_dir = os.path.normpath(self.data_dir)
        self.data_dir = data_dir
        for dirname in ('user', 'cache', 'plugin'):
            name = dirname + _dir
            if not getattr(self, name, None):
                setattr(self, name, os.path.abspath(os.path.join(data_dir, dirname)))
        
        for dirname in ('session',):
            name = dirname + _dir
            if not getattr(self, name, None):
                setattr(self, name, os.path.abspath(os.path.join(self.cache_dir, __%s__ % dirname)))

        
        self._decode()

        
        self.cache.page_category_regex = re.compile(self.page_category_regex, re.UNICODE)
        self.cache.page_dict_regex = re.compile(self.page_dict_regex, re.UNICODE)
        self.cache.page_group_regex = re.compile(self.page_group_regex, re.UNICODE)
        self.cache.page_template_regex = re.compile(self.page_template_regex, re.UNICODE)

        
        self.cache.page_category_regexact = re.compile(^%s$ % self.page_category_regex, re.UNICODE)
        self.cache.page_dict_regexact = re.compile(^%s$ % self.page_dict_regex, re.UNICODE)
        self.cache.page_group_regexact = re.compile(^%s$ % self.page_group_regex, re.UNICODE)
        self.cache.page_template_regexact = re.compile(^%s$ % self.page_template_regex, re.UNICODE)

        self.cache.ua_spiders = self.ua_spiders and re.compile(self.ua_spiders, re.IGNORECASE)

        self._check_directories()

        if not isinstance(self.superuser, list):
            msg = 
            raise MoinMoin.error.ConfigurationError(msg)

        if not isinstance(self.actions_superuser, list):
            msg = 
            raise MoinMoin.error.ConfigurationError(msg)

        
        
        
        if not (isinstance(self.cookie_lifetime, tuple) and len(self.cookie_lifetime) == 2):
            logging.error(wiki configuration has an invalid setting:  +
                          cookie_lifetime = %r % (self.cookie_lifetime, ))
            try:
                anon_lifetime = self.anonymous_session_lifetime
                logging.warning(wiki configuration has an unsupported setting:  +
                                anonymous_session_lifetime = %r -  % anon_lifetime +
                                please remove it.)
                if anon_lifetime is None:
                    anon_lifetime = 0
                anon_lifetime = float(anon_lifetime)
            except:
                
                anon_lifetime = 0
            try:
                logged_in_lifetime = int(self.cookie_lifetime)
            except:
                
                logged_in_lifetime = 12
            self.cookie_lifetime = (anon_lifetime, logged_in_lifetime)
            logging.warning(using cookie_lifetime = %r -  % (self.cookie_lifetime, ) +
                            please fix your wiki configuration.)

        self._loadPluginModule()

        
        self._fillDicts()

        
        self.language_default = self.language_default.lower()

        
        if self.logo_string is None:
            self.logo_string = self.sitename

        

        
        
        
        
        if self.chart_options:
            try:
            except ImportError:
                self.chart_options = None

        
        self.auth_can_logout = ['setuid']
        self.auth_login_inputs = []
        found_names = []
        for auth in self.auth:
            if not auth.name:
                raise MoinMoin.error.ConfigurationErrorAuth methods must have a name.
            if auth.name in found_names:
                raise MoinMoin.error.ConfigurationErrorAuth method names must be unique.
            found_names.append(auth.name)
            if auth.logout_possible and auth.name:
                self.auth_can_logout.append(auth.name)
            for input in auth.login_inputs:
                if not input in self.auth_login_inputs:
                    self.auth_login_inputs.append(input)
        self.auth_have_login = len(self.auth_login_inputs) > 0
        self.auth_methods = found_names

        
        self._site_plugin_lists = {}

        
        
        self.navi_bar = [elem % self for elem in self.navi_bar]

        
        if self.xapian_search:
            try:
            except ImportError, err:
                self.xapian_search = False
                logging.error(xapian_search was auto-disabled because python-xapian is not installed [%s]. % str(err))

        
        self.xapian_searchers = []

        
        self.mail_enabled = (self.mail_smarthost is not None or self.mail_sendmail is not None) and self.mail_from
        self.mail_enabled = self.mail_enabled and True or False

        
        self.jabber_enabled = self.notification_bot_uri is not None

        
        if self.jabber_enabled:
            from xmlrpclib import Server
            self.notification_server = Server(self.notification_bot_uri, )

        
        self._iwid = self._iwid_full = self._meta_dict = None

        self.cache.acl_rights_before = AccessControlList(self, [self.acl_rights_before])
        self.cache.acl_rights_default = AccessControlList(self, [self.acl_rights_default])
        self.cache.acl_rights_after = AccessControlList(self, [self.acl_rights_after])

        action_prefix = self.url_prefix_action
        if action_prefix is not None and action_prefix.endswith/: 
            self.url_prefix_action = action_prefix[:-1]

        if self.url_prefix_local is None:
            self.url_prefix_local = self.url_prefix_static

        if self.url_prefix_fckeditor is None:
            self.url_prefix_fckeditor = self.url_prefix_local + /applets/FCKeditor

        if self.secrets is None:  
            self.secrets = self.calc_secrets()

        secret_key_names = ['action/cache', 'wikiutil/tickets', 'xmlrpc/ProcessMail', 'xmlrpc/RemoteScript']
        if self.jabber_enabled:
            secret_key_names.appendjabberbot
        if self.textchas:
            secret_key_names.appendsecurity/textcha

        secret_min_length = 10
        if isinstance(self.secrets, str):
            if len(self.secrets) < secret_min_length:
                raise MoinMoin.error.ConfigurationError(The secrets = '...' wiki config setting is a way too short string (minimum length is %d chars)! % (
                    secret_min_length))
            
            secrets = {}
            for key in secret_key_names:
                secrets[key] = self.secrets
            self.secrets = secrets

        
        for secret_key_name in secret_key_names:
            try:
                secret = self.secrets[secret_key_name]
                if len(secret) < secret_min_length:
                    raise ValueError
            except (KeyError, ValueError):
                raise MoinMoin.error.ConfigurationError(You must set a (at least %d chars long) secret string for secrets['%s']! % (
                    secret_min_length, secret_key_name))

        if self.password_scheme not in MoinMoin.config.password_schemes_configurable:
            raise MoinMoin.error.ConfigurationError(not supported: password_scheme = %r % self.password_scheme)

        if self.passlib_support:
            try:
                from passlib.context import CryptContext
            except ImportError, err:
                raise MoinMoin.error.ConfigurationError(Wiki is configured to use passlib, but importing passlib failed [%s]! % str(err))
            try:
                self.cache.pwd_context = CryptContext(**self.passlib_crypt_context)
            except (ValueError, KeyError, TypeError, UserWarning), err:
                
                
                
                raise MoinMoin.error.ConfigurationError(passlib_crypt_context configuration is invalid [%s]. % str(err))
        elif self.password_scheme == {PASSLIB}:
            raise MoinMoin.error.ConfigurationErrorpasslib_support is switched off, thus you can't use password_scheme = '{PASSLIB}'.

    def calc_secrets(self):
        
        varnames = ['data_dir', 'data_underlay_dir', 'language_default', 'mail_smarthost', 'mail_from', 'page_front_page', 'theme_default', 'sitename', 'logo_string', 'interwikiname', 'user_homewiki', 'acl_rights_before']
        secret = 
        for varname in varnames:
            var = getattr(self, varname, None)
            if isinstance(var, (str, unicode)):
                secret += repr(var)
        return secret

    _meta_dict = None
    def load_meta_dict(self):
        
        if self._meta_dict is None:
            self._meta_dict = wikiMoinMoin.util.MetaDict(os.path.join(self.data_dir, meta), self.cache_dir)
        return self._meta_dict
    meta_dict = property(load_meta_dict)

    
    def make_iwid_property(attr):
        def getter(self):
            if getattr(self, attr, None) is None:
                self.load_IWID()
            return getattr(self, attr)
        return property(getter)
    iwid = make_iwid_property_iwid
    iwid_full = make_iwid_property_iwid_full

    
    _event_handlers = None
    def make_event_handlers_prop():
        def getter(self):
            if self._event_handlers is None:
                self._event_handlers = MoinMoin.events.get_handlers(self)
            return self._event_handlers

        def setter(self, new_handlers):
            self._event_handlers = new_handlers

        return property(getter, setter)
    event_handlers = make_event_handlers_prop()

    def load_IWID(self):
        
        try:
            iwid = self.meta_dict[IWID]
        except KeyError:
            iwid = MoinMoin.util.random_string16.encodehex + - + str(int(time.time()))
            self.meta_dict[IWID] = iwid
            self.meta_dict.sync()

        self._iwid = iwid
        if self.interwikiname is not None:
            self._iwid_full = packLine([iwid, self.interwikiname])
        else:
            self._iwid_full = packLine([iwid])

    def _config_check(self):
        
        unknown = ["%s" % name for name in dir(self)
                  if not name.startswith_ and
                  name not in DefaultConfig.__dict__ and
                  not isinstance(getattr(self, name), (type(sys), type(DefaultConfig)))]
        if unknown:
            msg =  % <built-in method join of str object at 0x7f5fe0910f30>(unknown)
            raise MoinMoin.error.ConfigurationError(msg)

    def _decode(self):
        
        charset = utf-8
        message = u

        decode_names = ('sitename', 'interwikiname', 'user_homewiki', 'logo_string', 'navi_bar', 'page_front_page', 'page_category_regex', 'page_dict_regex', 'page_group_regex', 'page_template_regex', 'page_license_page', 'page_local_spelling_words', 'acl_rights_default', 'acl_rights_before', 'acl_rights_after', 'mail_from', 'quicklinks_default', 'subscribed_pages_default')

        for name in decode_names:
            attr = getattr(self, name, None)
            if attr:
                
                if isinstance(attr, str):
                    try:
                        setattr(self, name, unicode(attr, charset))
                    except UnicodeError:
                        raise MoinMoin.error.ConfigurationError(message %
                                                       {name: name})
                
                elif isinstance(attr, list):
                    for i in xrange(len(attr)):
                        item = attr[i]
                        if isinstance(item, str):
                            try:
                                attr[i] = unicode(item, charset)
                            except UnicodeError:
                                raise MoinMoin.error.ConfigurationError(message %
                                                               {name: name})

    def _check_directories(self):
        
        mode = os.F_OK | os.R_OK | os.W_OK | os.X_OK
        for attr in ('data_dir', 'data_underlay_dir'):
            path = getattr(self, attr)

            
            if attr == data_underlay_dir and not path:
                continue

            path_pages = os.path.join(path, pages)
            if not (os.path.isdir(path_pages) and os.access(path_pages, mode)):
                msg =  % {attr: attr, path: path, }
                raise MoinMoin.error.ConfigurationError(msg)

    def _loadPluginModule(self):
        

        plugin_dirs = [self.plugin_dir] + self.plugin_dirs
        self._plugin_modules = []

        try:
            
            imp.acquire_lock()
            try:
                for pdir in plugin_dirs:
                    csum = p_%s % hashlib.new(sha1, pdir).hexdigest()
                    modname = %s.%s % (self.siteid, csum)
                    
                    if not modname in sys.modules:
                        
                        abspath = os.path.abspath(pdir)
                        parent_dir, pname = os.path.split(abspath)
                        fp, path, info = imp.find_module(pname, [parent_dir])
                        try:
                            
                            module = imp.load_module(modname, fp, path, info)
                            setattr(sys.modules[self.siteid], csum, module)
                        finally:
                            
                            if fp:
                                fp.close()
                    if modname not in self._plugin_modules:
                        self._plugin_modules.append(modname)
            finally:
                imp.release_lock()
        except ImportError, err:
            msg =  % {
    path: pdir,
    err: str(err),
}
            raise MoinMoin.error.ConfigurationError(msg)

    def _fillDicts(self):
        
        
        for key, value in DefaultConfig.user_checkbox_defaults.items():
            if key not in self.user_checkbox_defaults:
                self.user_checkbox_defaults[key] = value

    def __getitem__(self, item):
        
        return getattr(self, item)


class DefaultConfig(ConfigFunctionality):
    
    
    
    
    

_default_backlink_method = <function <lambda> at 0x7f5fe0983ec0>


def _default_password_checker(cfg, request, username, password,
                              min_length=6, min_different=4):
    
    _ = request.getText
    
    if len(password) < min_length:
        return _Password is too short.
    if len(set(password)) < min_different:
        return _Password has not enough different characters.

    username_lower = username.lower()
    password_lower = password.lower()
    if username in password or password in username or \
       username_lower in password_lower or password_lower in username_lower:
        return _Password is too easy (password contains name or name contains password).

    keyboards = (ur"`1234567890-=qwertyuiop[]\asdfghjkl;'zxcvbnm,./", 
                 ur"^1234567890ߴqwertzuiop�+asdfghjkl��
                ) 
    for kbd in keyboards:
        rev_kbd = kbd[::-1]
        if password in kbd or password in rev_kbd or \
           password_lower in kbd or password_lower in rev_kbd:
            return _Password is too easy (keyboard sequence).
    return None


class DefaultExpression(object):
    def __init__(self, exprstr):
        self.text = exprstr
        self.value = eval(exprstr)







options_no_group_name = {
  
  attachment_extension: ('Mapping of attachment extensions to actions', None, (('extensions_mapping', {'.tdraw': {'modify': 'twikidraw'}, '.adraw': {'modify': 'anywikidraw'}}, 'file extension -> do -> action'),)),
  
  datastruct: ('Datastruct settings', None, (('dicts', <function <lambda> at 0x7f5fe0983d80>, 'function f(cfg, request) that returns a backend which is used to access dicts definitions.'), ('groups', <function <lambda> at 0x7f5fe09822a0>, 'function f(cfg, request) that returns a backend which is used to access groups definitions.'))),
  
  session: (Session settings, Session-related settings, see HelpOnSessions., (
    (session_service, DefaultExpressionMoinMoin.web.session.FileSessionService(),
     The session service.),
    ('cookie_name', None, 'The variable part of the session cookie name. (None = determine from URL, siteidmagic = use siteid, any other string = use that)'),
    ('cookie_secure', None, 'Use secure cookie. (None = auto-enable secure cookie for https, True = ever use secure cookie, False = never use secure cookie).'),
    ('cookie_httponly', False, 'Use a httponly cookie that can only be used by the server, not by clientside scripts.'),
    ('cookie_domain', None, 'Domain used in the session cookie. (None = do not specify domain).'),
    ('cookie_path', None, 'Path used in the session cookie (None = auto-detect). Please only set if you know exactly what you are doing.'),
    ('cookie_lifetime', (0, 12), 'Session lifetime [h] of (anonymous, logged-in) users (see HelpOnSessions for details).'),
  )),
  
  auth: (Authentication / Authorization / Security settings, None, (
    ('superuser', [], 'List of trusted user names with wiki system administration super powers (not to be confused with ACL admin rights!). Used for e.g. software installation, language installation via SystemPagesSetup and more. See also HelpOnSuperUser.'),
    (auth, DefaultExpression[MoinAuth()],
     list of auth objects, to be called in this order (see HelpOnAuthentication)),
    ('auth_methods_trusted', ['http', 'given', 'xmlrpc_applytoken'], 'authentication methods for which users should be included in the special "Trusted" ACL group.'),
    ('secrets', None),
    ('DesktopEdition', False, "if True, give all local users special powers - ''only use this for a local desktop wiki!''"),
    ('SecurityPolicy', None, 'Class object hook for implementing security restrictions or relaxations'),
    ('actions_superuser', ['newaccount'], 'Restrict actions to superuser only (list of strings)'),
    ('actions_excluded', ['xmlrpc', 'MyPages', 'CopyPage'], 'Exclude unwanted actions (list of strings)'),

    ('allow_xslt', False, 'if True, enables XSLT processing via 4Suite (Note that this is DANGEROUS. It enables anyone who can edit the wiki to get  and to insert  into your wiki pages, which is why this setting defaults to `False` (XSLT disabled). Do not set it to other values, except if you know what you do and if you have very trusted editors only).'),

    (password_checker, DefaultExpression_default_password_checker,
     checks whether a password is acceptable (default check is length >= 6, at least 4 different chars, no keyboard sequence, not username used somehow (you can switch this off by using `None`)),

    ('password_scheme', '{PASSLIB}', 'Either "{PASSLIB}" (default) to use passlib for creating and upgrading password hashes (see also passlib_crypt_context for passlib configuration), or "{SSHA}" (or any other of the builtin password schemes) to not use passlib (not recommended).'),

    ('passlib_support', True, 'If True (default), import passlib and support password hashes offered by it.'),

    (passlib_crypt_context, dict(
        
        
        
        
        
        
        
        schemes=['sha512_crypt'],
        
        
        
        
        
        
        
        
        
        
    ),
    passlib CryptContext arguments, see passlib docs),

    ('recovery_token_lifetime', 12, 'how long the password recovery token is valid [h]'),
  )),
  
  spam_leech_dos: ('Anti-Spam/Leech/DOS', 'These settings help limiting ressource usage and avoiding abuse.', (('hosts_deny', [], 'List of denied IPs; if an IP ends with a dot, it denies a whole subnet (class A, B or C)'), ('surge_action_limits', {'all': (30, 30), 'default': (30, 60), 'show': (30, 60), 'recall': (10, 120), 'raw': (20, 40), 'diff': (30, 60), 'fullsearch': (10, 120), 'edit': (30, 300), 'rss_rc': (1, 60), 'AttachFile': (300, 30), 'cache': (600, 30)}, 'Surge protection tries to deny clients causing too much load/traffic, see HelpOnConfiguration/SurgeProtection.'), ('surge_lockout_time', 3600, 'time [s] someone gets locked out when ignoring the warnings'), ('textchas', None, 'Spam protection setup using site-specific questions/answers, see HelpOnSpam.'), ('textchas_disabled_group', None, 'Name of a group of trusted users who do not get asked !TextCha questions.'), ('textchas_expiry_time', 600, 'Time [s] for a !TextCha to expire.'), ('antispam_master_url', 'http://master.moinmo.in/?action=xmlrpc2', 'where antispam security policy fetches spam pattern updates (if it is enabled)'), ('ua_spiders', 'archiver|bingbot|cfetch|charlotte|crawler|gigabot|googlebot|heritrix|holmes|htdig|httrack|httpunit|intelix|jeeves|larbin|leech|libwww-perl|linkbot|linkmap|linkwalk|litefinder|mercator|microsoft.url.control|mirror| mj12bot|msnbot|msrbot|neomo|nutbot|omniexplorer|puf|robot|scooter|seekbot|sherlock|slurp|sitecheck|snoopy|spider|teleport|twiceler|voilabot|voyager|webreaper|wget|yeti', 'A regex of HTTP_USER_AGENTs that should be excluded from logging and are not allowed to use actions.'), ('unzip_single_file_size', 2000000.0, 'max. size of a single file in the archive which will be extracted [bytes]'), ('unzip_attachments_space', 200000000.0, 'max. total amount of bytes can be used to unzip files [bytes]'), ('unzip_attachments_count', 101, 'max. number of files which are extracted from the zip file'))),
  
  style: (Style / Theme / UI related,
  These settings control how the wiki user interface will look like.,
  (
    ('sitename', 'Untitled Wiki', 'Short description of your wiki site, displayed below the logo on each page, and used in RSS documents as the channel title [Unicode]'),
    ('interwikiname', None, 'unique and stable InterWiki name (prefix, moniker) of the site [Unicode], or None'),
    ('logo_string', None, 'The wiki logo top of page, HTML is allowed (`<img>` is possible as well) [Unicode]'),
    ('html_pagetitle', None, 'Allows you to set a specific HTML page title (if None, it defaults to the value of `sitename`)'),
    ('navi_bar', ['RecentChanges', 'FindPage', 'HelpContents'], 'Most important page names. Users can add more names in their quick links in user preferences. To link to URL, use `u"[[url|link title]]"`, to use a shortened name for long page name, use `u"[[LongLongPageName|title]]"`. [list of Unicode strings]'),

    ('theme_default', 'modernized', 'the name of the theme that is used by default (see HelpOnThemes)'),
    ('theme_force', False, 'if True, do not allow to change the theme'),

    ('stylesheets', [], 'List of tuples (media, csshref) to insert after theme css, before user css, see HelpOnThemes.'),

    ('supplementation_page', False, 'if True, show a link to the supplementation page in the theme'),
    ('supplementation_page_name', 'Discussion', 'default name of the supplementation (sub)page [unicode]'),
    ('supplementation_page_template', 'DiscussionTemplate', 'default template used for creation of the supplementation page [unicode]'),

    ('interwiki_preferred', [], 'In dialogues, show those wikis at the top of the list.'),
    ('sistersites', [], "list of tuples `('WikiName', 'sisterpagelist_fetch_url')`"),

    ('trail_size', 5, 'Number of pages in the trail of visited pages'),

    ('page_footer1', '', "Custom HTML markup sent ''before'' the system footer."),
    ('page_footer2', '', "Custom HTML markup sent ''after'' the system footer."),
    ('page_header1', '', "Custom HTML markup sent ''before'' the system header / title area but after the body tag."),
    ('page_header2', '', "Custom HTML markup sent ''after'' the system header / title area (and body tag)."),

    ('changed_time_fmt', '%H:%M', 'Time format used on Recent``Changes for page edits within the last 24 hours'),
    ('date_fmt', '%Y-%m-%d', 'System date format, used mostly in Recent``Changes'),
    ('datetime_fmt', '%Y-%m-%d %H:%M:%S', 'Default format for dates and times (when the user has no preferences or chose the "default" date format)'),
    ('chart_options', None, "If you have gdchart, use something like chart_options = {'width': 720, 'height': 540}"),

    ('edit_bar', ['Edit', 'Comments', 'Discussion', 'Info', 'Subscribe', 'Quicklink', 'Attachments', 'ActionsMenu'], 'list of edit bar entries'),
    ('history_count', (100, 200, 5, 10, 25, 50), 'Number of revisions shown for info/history action (default_count_shown, max_count_shown, [other values shown as page size choices]). At least first two values (default and maximum) should be provided. If additional values are provided, user will be able to change number of items per page in the UI.'),
    ('history_paging', True, "Enable paging functionality for info action's history display."),

    ('show_hosts', True, 'if True, show host names and IPs. Set to False to hide them.'),
    ('show_interwiki', False, 'if True, let the theme display your interwiki name'),
    ('show_names', True, 'if True, show user names in the revision history and on Recent``Changes. Set to False to hide them.'),
    ('show_section_numbers', False, 'show section numbers in headings by default'),
    ('show_timings', False, 'show some timing values at bottom of a page'),
    ('show_version', False, "show moin's version at the bottom of a page"),
    ('show_rename_redirect', False, 'if True, offer creation of redirect pages when renaming wiki pages'),

    (backlink_method, DefaultExpression_default_backlink_method,
     function determining how the (last part of the) pagename should be rendered in the title area),

    ('packagepages_actions_excluded', ['setthemename', 'copythemefile', 'installplugin', 'renamepage', 'deletepage', 'delattachment'], 'list with excluded package actions (e.g. because they are dangerous / questionable)'),

    ('page_credits', ['<a href="http://moinmo.in/" title="This site uses the MoinMoin Wiki software.">MoinMoin Powered</a>', '<a href="http://moinmo.in/Python" title="MoinMoin is written in Python.">Python Powered</a>', '<a href="http://moinmo.in/GPL" title="MoinMoin is GPL licensed.">GPL licensed</a>', '<a href="http://validator.w3.org/check?uri=referer" title="Click here to validate this page.">Valid HTML 4.01</a>'], 'list with html fragments with logos or strings for crediting.'),

    
    
    
    ('page_iconbar', ['up', 'edit', 'view', 'diff', 'info', 'subscribe', 'raw', 'print'], 'list of icons to show in iconbar, valid values are only those in page_icons_table. Available only in classic theme.'),

    
    (page_icons_table,
     {
        
        diff: (page, {'action': 'diff'}, _Diffs, diff),
        info: (page, {'action': 'info'}, _Info, info),
        edit: (page, {'action': 'edit'}, _Edit, edit),
        unsubscribe: (page, {'action': 'unsubscribe'}, _UnSubscribe, unsubscribe),
        subscribe: (page, {'action': 'subscribe'}, _Subscribe, subscribe),
        raw: (page, {'action': 'raw'}, _Raw, raw),
        xml: (page, {'action': 'show', 'mimetype': 'text/xml'}, _XML, xml),
        print: (page, {'action': 'print'}, _Print, print),
        view: (page, {}, _View, view),
        up: (page_parent_page, {}, _Up, up),
     },
     dict of {'iconname': (url, title, icon-img-key), ...}. Available only in classic theme.),
    ('show_highlight_msg', False, 'Show message that page has highlighted text and provide link to non-highlighted version.'),
  )),
  
  editor: ('Editor related', None, (('editor_default', 'text', "Editor to use by default, 'text' or 'gui'"), ('editor_force', True, 'if True, force using the default editor'), ('editor_ui', 'theonepreferred', "Editor choice shown on the user interface, 'freechoice' or 'theonepreferred'"), ('page_license_enabled', False, 'if True, show a license hint in page editor.'), ('page_license_page', 'WikiLicense', 'Page linked from the license hint. [Unicode]'), ('edit_locking', 'warn 10', "Editor locking policy: `None`, `'warn <timeout in minutes>'`, or `'lock <timeout in minutes>'`"), ('edit_ticketing', True, None), ('edit_rows', 20, 'Default height of the edit box'), ('comment_required', False, 'if True, only allow saving if a comment is filled in'))),
  
  paths: ('Paths', None, (('data_dir', './data/', 'Path to the data directory containing your (locally made) wiki pages.'), ('data_underlay_dir', './underlay/', 'Path to the underlay directory containing distribution system and help pages.'), ('cache_dir', None, 'Directory for caching, by default computed from `data_dir`/cache.'), ('session_dir', None, 'Directory for session storage, by default computed to be `cache_dir`/__session__.'), ('user_dir', None, 'Directory for user storage, by default computed to be `data_dir`/user.'), ('plugin_dir', None, 'Plugin directory, by default computed to be `data_dir`/plugin.'), ('plugin_dirs', [], 'Additional plugin directories.'), ('docbook_html_dir', '/usr/share/xml/docbook/stylesheet/nwalsh/html/', 'Path to the directory with the Docbook to HTML XSLT files (optional, used by the docbook parser). The default value is correct for Debian Etch.'), ('shared_intermap', None, 'Path to a file containing global InterWiki definitions (or a list of such filenames)'))),
  
  urls: (URLs, None, (
    
    
    
    (url_prefix_static, MoinMoin.config.url_prefix_static,
     used as the base URL for icons, css, etc. - includes the moin version number and changes on every release. This replaces the deprecated and sometimes confusing `url_prefix = '/wiki'` setting.),
    ('url_prefix_local', None, 'used as the base URL for some Javascript - set this to a URL on same server as the wiki if your url_prefix_static points to a different server.'),
    ('url_prefix_fckeditor', None, 'used as the base URL for FCKeditor - similar to url_prefix_local, but just for FCKeditor.'),

    ('url_prefix_action', None, "Use 'action' to enable action URL generation to be compatible with robots.txt. It will generate .../action/info/PageName?action=info then. Recommended for internet wikis."),

    ('notification_bot_uri', None, 'URI of the Jabber notification bot.'),

    ('url_mappings', {}, "lookup table to remap URL prefixes (dict of {{{'prefix': 'replacement'}}}); especially useful in intranets, when whole trees of externally hosted documents move around"),

  )),
  
  pages: (Special page names, None, (
    ('page_front_page', 'LanguageSetup', "Name of the front page. We don't expect you to keep the default. Just read LanguageSetup in case you're wondering... [Unicode]"),

    
    
    
    
    (page_category_regex, ur'(?P<all>Category(?P<key>(?!Template)\S+))',
     Pagenames exactly matching this regex are regarded as Wiki categories [Unicode]),
    (page_dict_regex, ur'(?P<all>(?P<key>\S+)Dict)',
     Pagenames exactly matching this regex are regarded as pages containing variable dictionary definitions [Unicode]),
    (page_group_regex, ur'(?P<all>(?P<key>\S+)Group)',
     Pagenames exactly matching this regex are regarded as pages containing group definitions [Unicode]),
    (page_template_regex, ur'(?P<all>(?P<key>\S+)Template)',
     Pagenames exactly matching this regex are regarded as pages containing templates for new pages [Unicode]),

    ('page_local_spelling_words', 'LocalSpellingWords', 'Name of the page containing user-provided spellchecker words [Unicode]'),
  )),
  
  user: (User Preferences related, None, (
    ('quicklinks_default', [], 'List of preset quicklinks for a newly created user accounts. Existing accounts are not affected by this option whereas changes in navi_bar do always affect existing accounts. Preset quicklinks can be removed by the user in the user preferences menu, navi_bar settings not.'),
    ('subscribed_pages_default', [], 'List of pagenames used for presetting page subscriptions for newly created user accounts.'),

    (email_subscribed_events_default,
     [
        MoinMoin.events.PageChangedEvent.__name__,
        MoinMoin.events.PageRenamedEvent.__name__,
        MoinMoin.events.PageDeletedEvent.__name__,
        MoinMoin.events.PageCopiedEvent.__name__,
        MoinMoin.events.PageRevertedEvent.__name__,
        MoinMoin.events.FileAttachedEvent.__name__,
     ], None),
    ('jabber_subscribed_events_default', [], None),

    ('tz_offset', 0.0, 'default time zone offset in hours from UTC'),

    ('userprefs_disabled', [], 'Disable the listed user preferences plugins.'),
  )),
  
  various: (Various, None, (
    ('bang_meta', True, 'if True, enable {{{!NoWikiName}}} markup'),
    ('caching_formats', ['text_html'], 'output formats that are cached; set to [] to turn off caching (useful for development)'),

    ('config_check_enabled', False, 'if True, check configuration for unknown settings.'),

    ('default_markup', 'wiki', 'Default page parser / format (name of module in `MoinMoin.parser`)'),

    ('html_head', '', 'Additional <HEAD> tags, see HelpOnThemes.'),
    ('html_head_queries', '<meta name="robots" content="noindex,nofollow">\n', 'Additional <HEAD> tags for requests with query strings, like actions.'),
    ('html_head_posts', '<meta name="robots" content="noindex,nofollow">\n', 'Additional <HEAD> tags for POST requests.'),
    ('html_head_index', '<meta name="robots" content="index,follow">\n', 'Additional <HEAD> tags for some few index pages.'),
    ('html_head_normal', '<meta name="robots" content="index,nofollow">\n', 'Additional <HEAD> tags for most normal pages.'),

    ('language_default', 'en', 'Default language for user interface and page content, see HelpOnLanguages.'),
    ('language_ignore_browser', False, "if True, ignore user's browser language settings, see HelpOnLanguages."),

    ('log_remote_addr', True, 'if True, log the remote IP address (and maybe hostname).'),
    ('log_reverse_dns_lookups', False, 'if True, do a reverse DNS lookup on page SAVE.'),
    ('log_timing', False, 'if True, add timing infos to the log output to analyse load conditions'),
    ('log_events_format', 1, '0 = no events logging, 1 = standard format (like <= 1.9.7) [default], 2 = extended format'),

    
    
    
    ('mimetypes_xss_protect', ['text/html', 'image/svg+xml', 'application/x-shockwave-flash', 'application/xhtml+xml'], '"content-disposition: inline" isn\'t used for them when a user downloads such attachments'),

    ('mimetypes_embed', ['application/x-dvi', 'application/postscript', 'application/pdf', 'application/ogg', 'application/vnd.visio', 'image/x-ms-bmp', 'image/svg+xml', 'image/tiff', 'image/x-photoshop', 'audio/mpeg', 'audio/midi', 'audio/x-wav', 'video/fli', 'video/mpeg', 'video/quicktime', 'video/x-msvideo', 'chemical/x-pdb', 'x-world/x-vrml'], 'mimetypes that can be embedded by the [[HelpOnMacros/EmbedObject|EmbedObject macro]]'),

    (refresh, None,
     "refresh = (minimum_delay_s, targets_allowed) enables use of `
    ('rss_cache', 60, 'suggested caching time for RecentChanges RSS, in second'),

    ('search_results_per_page', 25, 'Number of hits shown per page in the search results'),

    ('siteid', 'default', None),
    ('xmlrpc_overwrite_user', True, 'Overwrite authenticated user at start of xmlrpc code'),
  )),
}
























options = {
    acl: ('Access control lists', 'ACLs control who may do what, see HelpOnAccessControlLists.', (('hierarchic', False, 'True to use hierarchical ACLs'), ('rights_default', 'Trusted:read,write,delete,revert Known:read All:read', 'ACL used if no ACL is specified on the page'), ('rights_before', '', 'ACL that is processed before the on-page/default ACL'), ('rights_after', '', 'ACL that is processed after the on-page/default ACL'), ('rights_valid', ['read', 'write', 'delete', 'revert', 'admin'], 'Valid tokens for right sides of ACL entries.'))),

    xapian: ('Xapian search', 'Configuration of the Xapian based indexed search, see HelpOnXapian.', (('search', False, 'True to enable the fast, indexed search (based on the Xapian search library)'), ('index_dir', None, 'Directory where the Xapian search index is stored (None = auto-configure wiki local storage)'), ('stemming', False, 'True to enable Xapian word stemmer usage for indexing / searching.'), ('index_history', False, 'True to enable indexing of non-current page revisions.'))),

    user: (Users / User settings, None, (
      ('email_unique', True, "if True, check email addresses for uniqueness and don't accept duplicates."),
      ('jid_unique', True, "if True, check Jabber IDs for uniqueness and don't accept duplicates."),

      ('homewiki', 'Self', 'interwiki name of the wiki where the user home pages are located [Unicode] - useful if you have \'\'many\'\' users. You could even link to nonwiki "user pages" if the wiki username is in the target URL.'),

      ('checkbox_fields', [('mailto_author', <function <lambda> at 0x7f5fe0a60400>), ('edit_on_doubleclick', <function <lambda> at 0x7f5fe0a607c0>), ('remember_last_visit', <function <lambda> at 0x7f5fe0a60540>), ('show_comments', <function <lambda> at 0x7f5fe0a60680>), ('show_nonexist_qm', <function <lambda> at 0x7f5fe0a604a0>), ('show_page_trail', <function <lambda> at 0x7f5fe0a60860>), ('show_toolbar', <function <lambda> at 0x7f5fe0a60900>), ('show_topbottom', <function <lambda> at 0x7f5fe0a609a0>), ('show_fancy_diff', <function <lambda> at 0x7f5fe0a60a40>), ('wikiname_add_spaces', <function <lambda> at 0x7f5fe0a60ae0>), ('remember_me', <function <lambda> at 0x7f5fe0a60b80>), ('disabled', <function <lambda> at 0x7f5fe0a60c20>)], 'Describes user preferences, see HelpOnConfiguration/UserPreferences.'),

      ('checkbox_defaults', {'mailto_author': 0, 'edit_on_doubleclick': 1, 'remember_last_visit': 0, 'show_comments': 0, 'show_nonexist_qm': False, 'show_page_trail': 1, 'show_toolbar': 1, 'show_topbottom': 0, 'show_fancy_diff': 1, 'wikiname_add_spaces': 0, 'remember_me': 1}, 'Defaults for user preferences, see HelpOnConfiguration/UserPreferences.'),

      ('checkbox_disable', [], 'Disable user preferences, see HelpOnConfiguration/UserPreferences.'),

      ('checkbox_remove', [], 'Remove user preferences, see HelpOnConfiguration/UserPreferences.'),

      (form_fields,
       [
        (name, _Name, text, 36, _(Use FirstnameLastname)),
        (aliasname, _Alias-Name, text, 36, ),
        (email, _Email, text, 36, ),
        (jid, _Jabber ID, text, 36, ),
        (css_url, _User CSS URL, text, 40, _(Leave it empty for disabling user CSS)),
        (edit_rows, _Editor size, text, 3, ),
       ],
       None),

      ('form_defaults', {'name': '', 'aliasname': '', 'password': '', 'password2': '', 'email': '', 'jid': '', 'css_url': '', 'edit_rows': '20'}, None),

      ('form_disable', [], 'list of field names used to disable user preferences form fields'),

      ('form_remove', [], 'list of field names used to remove user preferences form fields'),

      ('transient_fields', ['id', 'valid', 'may', 'auth_username', 'password', 'password2', 'auth_method', 'auth_attribs'], 'User object attributes that are not persisted to permanent storage (internal use).'),
    )),

    openidrp: ('OpenID Relying Party', 'These settings control the built-in OpenID Relying Party (client).', (('allowed_op', [], 'List of forced providers'),)),

    openid_server: ('OpenID Server', 'These settings control the built-in OpenID Identity Provider (server).', (('enabled', False, 'True to enable the built-in OpenID server.'), ('restricted_users_group', None, 'If set to a group name, the group members are allowed to use the wiki as an OpenID provider. (None = allow for all users)'), ('enable_user', False, 'If True, the OpenIDUser processing instruction is allowed.'))),

    mail: (Mail settings,
        These settings control outgoing and incoming email from and to the wiki.,
    (
      ('from', None, 'Used as From: address for generated mail.'),
      ('login', None, "'username userpass' for SMTP server authentication (None = don't use auth)."),
      ('smarthost', None, "Address of SMTP server to use for sending mail (None = don't use SMTP server)."),
      ('sendmail', None, "sendmail command to use for sending mail (None = don't use sendmail)"),

      ('import_subpage_template', '$from-$date-$subject', 'Create subpages using this template when importing mail.'),
      ('import_pagename_search', ['subject', 'to'], 'Where to look for target pagename specification.'),
      ('import_pagename_envelope', '%s', 'Use this to add some fixed prefix/postfix to the generated target pagename.'),
      ('import_pagename_regex', '\\[\\[([^\\]]*)\\]\\]', 'Regular expression used to search for target pagename specification.'),
      ('import_wiki_addrs', [], 'Target mail addresses to consider when importing mail'),

      ('notify_page_text', '%(intro)s%(difflink)s\n\n%(comment)s%(diff)s', 'Template for putting together the pieces for the page changed/deleted/renamed notification mail text body'),
      (notify_page_changed_subject, _[%(sitename)s] %(trivial)sUpdate of "%(pagename)s" by %(username)s,
       Template for the page changed notification mail subject header),
      (notify_page_changed_intro,
       _Dear Wiki user,

You have subscribed to a wiki page or wiki category on "%(sitename)s" for change notification.

The "%(pagename)s" page has been changed by %(editor)s:
,
       Template for the page changed notification mail intro text),
      (notify_page_deleted_subject, _[%(sitename)s] %(trivial)sUpdate of "%(pagename)s" by %(username)s,
       Template for the page deleted notification mail subject header),
      (notify_page_deleted_intro,
       _Dear wiki user,

You have subscribed to a wiki page "%(sitename)s" for change notification.

The page "%(pagename)s" has been deleted by %(editor)s:

,
       Template for the page deleted notification mail intro text),
      (notify_page_renamed_subject, _[%(sitename)s] %(trivial)sUpdate of "%(pagename)s" by %(username)s,
       Template for the page renamed notification mail subject header),
      (notify_page_renamed_intro,
       _Dear wiki user,

You have subscribed to a wiki page "%(sitename)s" for change notification.

The page "%(pagename)s" has been renamed from "%(oldname)s" by %(editor)s:
,
       Template for the page renamed notification mail intro text),
      (notify_att_added_subject, _[%(sitename)s] New attachment added to page %(pagename)s,
       Template for the attachment added notification mail subject header),
      (notify_att_added_intro,
       _Dear Wiki user,

You have subscribed to a wiki page "%(page_name)s" for change notification. An attachment has been added to that page by %(editor)s. Following detailed information is available:

Attachment name: %(attach_name)s
Attachment size: %(attach_size)s
,
       Template for the attachment added notification mail intro text),
      (notify_att_removed_subject, _[%(sitename)s] Removed attachment from page %(pagename)s,
       Template for the attachment removed notification mail subject header),
      (notify_att_removed_intro,
       _Dear Wiki user,

You have subscribed to a wiki page "%(page_name)s" for change notification. An attachment has been removed from that page by %(editor)s. Following detailed information is available:

Attachment name: %(attach_name)s
Attachment size: %(attach_size)s
,
       Template for the attachment removed notification mail intro text),
      (notify_user_created_subject,
       _[%(sitename)s] New user account created,
       Template for the user created notification mail subject header),
      (notify_user_created_intro,
       _Dear Superuser, a new user has just been created on "%(sitename)s". Details follow:

    User name: %(username)s
    Email address: %(useremail)s,
       Template for the user created notification mail intro text),
    )),

    backup: ('Backup settings', 'These settings control how the backup action works and who is allowed to use it.', (('compression', 'gz', 'What compression to use for the backup ("gz" or "bz2").'), ('users', [], 'List of trusted user names who are allowed to get a backup.'), ('include', [], 'List of pathes to backup.'), ('exclude', <function <lambda> at 0x7f5fe0a60860>, 'Function f(self, filename) that tells whether a file should be excluded from backup. By default, nothing is excluded.'))),
    rss: ('RSS settings', 'These settings control RSS behaviour.', (('items_default', 15, 'Default maximum items value for RSS feed. Can be changed via items URL query parameter of rss_rc action.'), ('items_limit', 100, "Limit for item count got via RSS (i. e. user can't get more than items_limit items even via changing items URL query parameter)."), ('unique', 0, 'If set to 1, for each page name only one RSS item would be shown. Can be changed via unique rss_rc action URL query parameter.'), ('diffs', 0, 'Add diffs in RSS item descriptions by default. Can be changed via diffs URL query parameter of rss_rc action.'), ('ddiffs', 0, 'If set to 1, links to diff view instead of page itself would be generated by default. Can be changed via ddiffs URL query parameter of rss_rc action.'), ('lines_default', 20, 'Default line count limit for diffs added as item descriptions for RSS items. Can be changed via lines URL query parameter of rss_rc action.'), ('lines_limit', 100, 'Limit for possible line count for diffs added as item descriptions in RSS.'), ('show_attachment_entries', 0, 'If set to 1, items, related to attachment management, would be added to RSS feed. Can be changed via show_att URL query parameter of rss_rc action.'), ('page_filter_pattern', '', 'Default page filter pattern for RSS feed. Empty pattern matches to any page. Pattern beginning with circumflex is interpreted as regular expression. Pattern ending with slash matches page and all its subpages. Otherwise pattern sets specific pagename. Can be changed via page URL query parameter of rss_rc action.'), ('show_page_history_link', True, 'Add link to page change history RSS feed in theme.'))),
    search_macro: ('Search macro settings', 'Settings related to behaviour of search macros (such as FullSearch, FullSearchCached, PageList)', (('parse_args', False, 'Do search macro parameter parsing. In previous versions of MoinMoin, whole search macro parameter string had been interpreted as needle. Now, to provide ability to pass additional parameters, this behaviour should be changed.'), ('highlight_titles', 1, 'Perform title matches highlighting by default in search results generated by macro.'), ('highlight_pages', 1, 'Add highlight parameter to links in search results generated by search macros by default.'))),
}

def _add_options_to_defconfig(opts, addgroup=True):
    for groupname in opts:
        group_short, group_doc, group_opts = opts[groupname]
        for name, default, doc in group_opts:
            if addgroup:
                name = groupname + _ + name
            if isinstance(default, DefaultExpression):
                default = default.value
            setattr(DefaultConfig, name, default)

_add_options_to_defconfig(options)
_add_options_to_defconfig(options_no_group_name, False)


del _

