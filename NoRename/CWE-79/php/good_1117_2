<?php



function wptexturize( $text, $reset = false ) {
	global $wp_cockneyreplace, $shortcode_tags;
	static $static_characters            = null,
		$static_replacements             = null,
		$dynamic_characters              = null,
		$dynamic_replacements            = null,
		$default_no_texturize_tags       = null,
		$default_no_texturize_shortcodes = null,
		$run_texturize                   = true,
		$apos                            = null,
		$prime                           = null,
		$double_prime                    = null,
		$opening_quote                   = null,
		$closing_quote                   = null,
		$opening_single_quote            = null,
		$closing_single_quote            = null,
		$open_q_flag                     = '<!--oq-->',
		$open_sq_flag                    = '<!--osq-->',
		$apos_flag                       = '<!--apos-->';

	
	if ( empty( $text ) || false === $run_texturize ) {
		return $text;
	}

	
	if ( $reset || ! isset( $static_characters ) ) {
		
		$run_texturize = apply_filters( 'run_wptexturize', $run_texturize );
		if ( false === $run_texturize ) {
			return $text;
		}

		
		$opening_quote = _x( '&
		
		$closing_quote = _x( '&

		
		$apos = _x( '&

		
		$prime = _x( '&
		
		$double_prime = _x( '&

		
		$opening_single_quote = _x( '&
		
		$closing_single_quote = _x( '&

		
		$en_dash = _x( '&
		
		$em_dash = _x( '&

		$default_no_texturize_tags       = array( 'pre', 'code', 'kbd', 'style', 'script', 'tt' );
		$default_no_texturize_shortcodes = array( 'code' );

		
		if ( isset( $wp_cockneyreplace ) ) {
			$cockney        = array_keys( $wp_cockneyreplace );
			$cockneyreplace = array_values( $wp_cockneyreplace );
		} else {
			
			$cockney = explode(
				',',
				_x(
					"'tain't,'twere,'twas,'tis,'twill,'til,'bout,'nuff,'round,'cause,'em",
					'Comma-separated list of words to texturize in your language'
				)
			);

			$cockneyreplace = explode(
				',',
				_x(
					'&
					'Comma-separated list of replacement words in your language'
				)
			);
		}

		$static_characters   = array_merge( array( '...', '``', '\'\'', ' (tm)' ), $cockney );
		$static_replacements = array_merge( array( '&

		
		
		$dynamic_characters   = array(
			'apos'  => array(),
			'quote' => array(),
			'dash'  => array(),
		);
		$dynamic_replacements = array(
			'apos'  => array(),
			'quote' => array(),
			'dash'  => array(),
		);
		$dynamic              = array();
		$spaces               = wp_spaces_regexp();

		
		if ( "'" !== $apos || "'" !== $closing_single_quote ) {
			$dynamic[ '/\'(\d\d)\'(?=\Z|[.,:;!?)}\-\]]|&gt;|' . $spaces . ')/' ] = $apos_flag . '$1' . $closing_single_quote;
		}
		if ( "'" !== $apos || '"' !== $closing_quote ) {
			$dynamic[ '/\'(\d\d)"(?=\Z|[.,:;!?)}\-\]]|&gt;|' . $spaces . ')/' ] = $apos_flag . '$1' . $closing_quote;
		}

		
		if ( "'" !== $apos ) {
			$dynamic['/\'(?=\d\d(?:\Z|(?![%\d]|[.,]\d)))/'] = $apos_flag;
		}

		
		if ( "'" !== $opening_single_quote && "'" !== $closing_single_quote ) {
			$dynamic[ '/(?<=\A|' . $spaces . ')\'(\d[.,\d]*)\'/' ] = $open_sq_flag . '$1' . $closing_single_quote;
		}

		
		if ( "'" !== $opening_single_quote ) {
			$dynamic[ '/(?<=\A|[([{"\-]|&lt;|' . $spaces . ')\'/' ] = $open_sq_flag;
		}

		
		if ( "'" !== $apos ) {
			$dynamic[ '/(?<!' . $spaces . ')\'(?!\Z|[.,:;!?"\'(){}[\]\-]|&[lg]t;|' . $spaces . ')/' ] = $apos_flag;
		}

		$dynamic_characters['apos']   = array_keys( $dynamic );
		$dynamic_replacements['apos'] = array_values( $dynamic );
		$dynamic                      = array();

		
		if ( '"' !== $opening_quote && '"' !== $closing_quote ) {
			$dynamic[ '/(?<=\A|' . $spaces . ')"(\d[.,\d]*)"/' ] = $open_q_flag . '$1' . $closing_quote;
		}

		
		if ( '"' !== $opening_quote ) {
			$dynamic[ '/(?<=\A|[([{\-]|&lt;|' . $spaces . ')"(?!' . $spaces . ')/' ] = $open_q_flag;
		}

		$dynamic_characters['quote']   = array_keys( $dynamic );
		$dynamic_replacements['quote'] = array_values( $dynamic );
		$dynamic                       = array();

		
		$dynamic['/---/'] = $em_dash;
		$dynamic[ '/(?<=^|' . $spaces . ')--(?=$|' . $spaces . ')/' ] = $em_dash;
		$dynamic['/(?<!xn)--/']                                       = $en_dash;
		$dynamic[ '/(?<=^|' . $spaces . ')-(?=$|' . $spaces . ')/' ]  = $en_dash;

		$dynamic_characters['dash']   = array_keys( $dynamic );
		$dynamic_replacements['dash'] = array_values( $dynamic );
	}

	
	
	$no_texturize_tags = apply_filters( 'no_texturize_tags', $default_no_texturize_tags );
	
	$no_texturize_shortcodes = apply_filters( 'no_texturize_shortcodes', $default_no_texturize_shortcodes );

	$no_texturize_tags_stack       = array();
	$no_texturize_shortcodes_stack = array();

	

	preg_match_all( '@\[/?([^<>&/\[\]\x00-\x20=]++)@', $text, $matches );
	$tagnames         = array_intersect( array_keys( $shortcode_tags ), $matches[1] );
	$found_shortcodes = ! empty( $tagnames );
	$shortcode_regex  = $found_shortcodes ? _get_wptexturize_shortcode_regex( $tagnames ) : '';
	$regex            = _get_wptexturize_split_regex( $shortcode_regex );

	$textarr = preg_split( $regex, $text, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY );

	foreach ( $textarr as &$curl ) {
		
		$first = $curl[0];
		if ( '<' === $first ) {
			if ( '<!--' === substr( $curl, 0, 4 ) ) {
				
				continue;
			} else {
				

				
				$curl = preg_replace( '/&(?!

				_wptexturize_pushpop_element( $curl, $no_texturize_tags_stack, $no_texturize_tags );
			}
		} elseif ( '' === trim( $curl ) ) {
			
			continue;

		} elseif ( '[' === $first && $found_shortcodes && 1 === preg_match( '/^' . $shortcode_regex . '$/', $curl ) ) {
			

			if ( '[[' !== substr( $curl, 0, 2 ) && ']]' !== substr( $curl, -2 ) ) {
				
				_wptexturize_pushpop_element( $curl, $no_texturize_shortcodes_stack, $no_texturize_shortcodes );
			} else {
				
				continue;
			}
		} elseif ( empty( $no_texturize_shortcodes_stack ) && empty( $no_texturize_tags_stack ) ) {
			

			$curl = str_replace( $static_characters, $static_replacements, $curl );

			if ( false !== strpos( $curl, "'" ) ) {
				$curl = preg_replace( $dynamic_characters['apos'], $dynamic_replacements['apos'], $curl );
				$curl = wptexturize_primes( $curl, "'", $prime, $open_sq_flag, $closing_single_quote );
				$curl = str_replace( $apos_flag, $apos, $curl );
				$curl = str_replace( $open_sq_flag, $opening_single_quote, $curl );
			}
			if ( false !== strpos( $curl, '"' ) ) {
				$curl = preg_replace( $dynamic_characters['quote'], $dynamic_replacements['quote'], $curl );
				$curl = wptexturize_primes( $curl, '"', $double_prime, $open_q_flag, $closing_quote );
				$curl = str_replace( $open_q_flag, $opening_quote, $curl );
			}
			if ( false !== strpos( $curl, '-' ) ) {
				$curl = preg_replace( $dynamic_characters['dash'], $dynamic_replacements['dash'], $curl );
			}

			
			if ( 1 === preg_match( '/(?<=\d)x\d/', $curl ) ) {
				
				$curl = preg_replace( '/\b(\d(?(?<=0)[\d\.,]+|[\d\.,]*))x(\d[\d\.,]*)\b/', '$1&
			}

			
			$curl = preg_replace( '/&(?!
		}
	}

	return implode( '', $textarr );
}


function wptexturize_primes( $haystack, $needle, $prime, $open_quote, $close_quote ) {
	$spaces           = wp_spaces_regexp();
	$flag             = '<!--wp-prime-or-quote-->';
	$quote_pattern    = "/$needle(?=\\Z|[.,:;!?)}\\-\\]]|&gt;|" . $spaces . ')/';
	$prime_pattern    = "/(?<=\\d)$needle/";
	$flag_after_digit = "/(?<=\\d)$flag/";
	$flag_no_digit    = "/(?<!\\d)$flag/";

	$sentences = explode( $open_quote, $haystack );

	foreach ( $sentences as $key => &$sentence ) {
		if ( false === strpos( $sentence, $needle ) ) {
			continue;
		} elseif ( 0 !== $key && 0 === substr_count( $sentence, $close_quote ) ) {
			$sentence = preg_replace( $quote_pattern, $flag, $sentence, -1, $count );
			if ( $count > 1 ) {
				
				$sentence = preg_replace( $flag_no_digit, $close_quote, $sentence, -1, $count2 );
				if ( 0 === $count2 ) {
					
					$count2 = substr_count( $sentence, "$flag." );
					if ( $count2 > 0 ) {
						
						$pos = strrpos( $sentence, "$flag." );
					} else {
						
						
						$pos = strrpos( $sentence, $flag );
					}
					$sentence = substr_replace( $sentence, $close_quote, $pos, strlen( $flag ) );
				}
				
				$sentence = preg_replace( $prime_pattern, $prime, $sentence );
				$sentence = preg_replace( $flag_after_digit, $prime, $sentence );
				$sentence = str_replace( $flag, $close_quote, $sentence );
			} elseif ( 1 == $count ) {
				
				$sentence = str_replace( $flag, $close_quote, $sentence );
				$sentence = preg_replace( $prime_pattern, $prime, $sentence );
			} else {
				
				$sentence = preg_replace( $prime_pattern, $prime, $sentence );
			}
		} else {
			$sentence = preg_replace( $prime_pattern, $prime, $sentence );
			$sentence = preg_replace( $quote_pattern, $close_quote, $sentence );
		}
		if ( '"' == $needle && false !== strpos( $sentence, '"' ) ) {
			$sentence = str_replace( '"', $close_quote, $sentence );
		}
	}

	return implode( $open_quote, $sentences );
}


function _wptexturize_pushpop_element( $text, &$stack, $disabled_elements ) {
	
	if ( isset( $text[1] ) && '/' !== $text[1] ) {
		$opening_tag = true;
		$name_offset = 1;
	} elseif ( 0 == count( $stack ) ) {
		
		return;
	} else {
		$opening_tag = false;
		$name_offset = 2;
	}

	
	$space = strpos( $text, ' ' );
	if ( false === $space ) {
		$space = -1;
	} else {
		$space -= $name_offset;
	}
	$tag = substr( $text, $name_offset, $space );

	
	if ( in_array( $tag, $disabled_elements ) ) {
		if ( $opening_tag ) {
			

			array_push( $stack, $tag );
		} elseif ( end( $stack ) == $tag ) {
			array_pop( $stack );
		}
	}
}


function wpautop( $pee, $br = true ) {
	$pre_tags = array();

	if ( trim( $pee ) === '' ) {
		return '';
	}

	
	$pee = $pee . "\n";

	
	if ( strpos( $pee, '<pre' ) !== false ) {
		$pee_parts = explode( '</pre>', $pee );
		$last_pee  = array_pop( $pee_parts );
		$pee       = '';
		$i         = 0;

		foreach ( $pee_parts as $pee_part ) {
			$start = strpos( $pee_part, '<pre' );

			
			if ( $start === false ) {
				$pee .= $pee_part;
				continue;
			}

			$name              = "<pre wp-pre-tag-$i></pre>";
			$pre_tags[ $name ] = substr( $pee_part, $start ) . '</pre>';

			$pee .= substr( $pee_part, 0, $start ) . $name;
			$i++;
		}

		$pee .= $last_pee;
	}
	
	$pee = preg_replace( '|<br\s*/?>\s*<br\s*/?>|', "\n\n", $pee );

	$allblocks = '(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|form|map|area|blockquote|address|math|style|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)';

	
	$pee = preg_replace( '!(<' . $allblocks . '[\s/>])!', "\n\n$1", $pee );

	
	$pee = preg_replace( '!(</' . $allblocks . '>)!', "$1\n\n", $pee );

	
	$pee = preg_replace( '!(<hr\s*?/?>)!', "$1\n\n", $pee );

	
	$pee = str_replace( array( "\r\n", "\r" ), "\n", $pee );

	
	$pee = wp_replace_in_html_tags( $pee, array( "\n" => ' <!-- wpnl --> ' ) );

	
	if ( strpos( $pee, '<option' ) !== false ) {
		$pee = preg_replace( '|\s*<option|', '<option', $pee );
		$pee = preg_replace( '|</option>\s*|', '</option>', $pee );
	}

	
	if ( strpos( $pee, '</object>' ) !== false ) {
		$pee = preg_replace( '|(<object[^>]*>)\s*|', '$1', $pee );
		$pee = preg_replace( '|\s*</object>|', '</object>', $pee );
		$pee = preg_replace( '%\s*(</?(?:param|embed)[^>]*>)\s*%', '$1', $pee );
	}

	
	if ( strpos( $pee, '<source' ) !== false || strpos( $pee, '<track' ) !== false ) {
		$pee = preg_replace( '%([<\[](?:audio|video)[^>\]]*[>\]])\s*%', '$1', $pee );
		$pee = preg_replace( '%\s*([<\[]/(?:audio|video)[>\]])%', '$1', $pee );
		$pee = preg_replace( '%\s*(<(?:source|track)[^>]*>)\s*%', '$1', $pee );
	}

	
	if ( strpos( $pee, '<figcaption' ) !== false ) {
		$pee = preg_replace( '|\s*(<figcaption[^>]*>)|', '$1', $pee );
		$pee = preg_replace( '|</figcaption>\s*|', '</figcaption>', $pee );
	}

	
	$pee = preg_replace( "/\n\n+/", "\n\n", $pee );

	
	$pees = preg_split( '/\n\s*\n/', $pee, -1, PREG_SPLIT_NO_EMPTY );

	
	$pee = '';

	
	foreach ( $pees as $tinkle ) {
		$pee .= '<p>' . trim( $tinkle, "\n" ) . "</p>\n";
	}

	
	$pee = preg_replace( '|<p>\s*</p>|', '', $pee );

	
	$pee = preg_replace( '!<p>([^<]+)</(div|address|form)>!', '<p>$1</p></$2>', $pee );

	
	$pee = preg_replace( '!<p>\s*(</?' . $allblocks . '[^>]*>)\s*</p>!', '$1', $pee );

	
	$pee = preg_replace( '|<p>(<li.+?)</p>|', '$1', $pee );

	
	$pee = preg_replace( '|<p><blockquote([^>]*)>|i', '<blockquote$1><p>', $pee );
	$pee = str_replace( '</blockquote></p>', '</p></blockquote>', $pee );

	
	$pee = preg_replace( '!<p>\s*(</?' . $allblocks . '[^>]*>)!', '$1', $pee );

	
	$pee = preg_replace( '!(</?' . $allblocks . '[^>]*>)\s*</p>!', '$1', $pee );

	
	if ( $br ) {
		
		$pee = preg_replace_callback( '/<(script|style|svg).*?<\/\\1>/s', '_autop_newline_preservation_helper', $pee );

		
		$pee = str_replace( array( '<br>', '<br/>' ), '<br />', $pee );

		
		$pee = preg_replace( '|(?<!<br />)\s*\n|', "<br />\n", $pee );

		
		$pee = str_replace( '<WPPreserveNewline />', "\n", $pee );
	}

	
	$pee = preg_replace( '!(</?' . $allblocks . '[^>]*>)\s*<br />!', '$1', $pee );

	
	$pee = preg_replace( '!<br />(\s*</?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)!', '$1', $pee );
	$pee = preg_replace( "|\n</p>$|", '</p>', $pee );

	
	if ( ! empty( $pre_tags ) ) {
		$pee = str_replace( array_keys( $pre_tags ), array_values( $pre_tags ), $pee );
	}

	
	if ( false !== strpos( $pee, '<!-- wpnl -->' ) ) {
		$pee = str_replace( array( ' <!-- wpnl --> ', '<!-- wpnl -->' ), "\n", $pee );
	}

	return $pee;
}


function wp_html_split( $input ) {
	return preg_split( get_html_split_regex(), $input, -1, PREG_SPLIT_DELIM_CAPTURE );
}


function get_html_split_regex() {
	static $regex;

	if ( ! isset( $regex ) ) {
		
		$comments =
			'!'             
			. '(?:'         
			.     '-(?!->)' 
			.     '[^\-]*+' 
			. ')*+'         
			. '(?:-->)?';   

		$cdata =
			'!\[CDATA\['    
			. '[^\]]*+'     
			. '(?:'         
			.     '](?!]>)' 
			.     '[^\]]*+' 
			. ')*+'         
			. '(?:]]>)?';   

		$escaped =
			'(?='             
			.    '!--'
			. '|'
			.    '!\[CDATA\['
			. ')'
			. '(?(?=!-)'      
			.     $comments
			. '|'
			.     $cdata
			. ')';

		$regex =
			'/('                
			.     '<'           
			.     '(?'          
			.         $escaped  
			.     '|'           
			.         '[^>]*>?' 
			.     ')'
			. ')/';
		
	}

	return $regex;
}


function _get_wptexturize_split_regex( $shortcode_regex = '' ) {
	static $html_regex;

	if ( ! isset( $html_regex ) ) {
		
		$comment_regex =
			'!'             
			. '(?:'         
			.     '-(?!->)' 
			.     '[^\-]*+' 
			. ')*+'         
			. '(?:-->)?';   

		$html_regex = 
			'<'                  
			. '(?(?=!--)'        
			.     $comment_regex 
			. '|'
			.     '[^>]*>?'      
			. ')';
		
	}

	if ( empty( $shortcode_regex ) ) {
		$regex = '/(' . $html_regex . ')/';
	} else {
		$regex = '/(' . $html_regex . '|' . $shortcode_regex . ')/';
	}

	return $regex;
}


function _get_wptexturize_shortcode_regex( $tagnames ) {
	$tagregexp = join( '|', array_map( 'preg_quote', $tagnames ) );
	$tagregexp = "(?:$tagregexp)(?=[\\s\\]\\/])"; 
	
	$regex =
		'\['              
		. '[\/\[]?'         
		. $tagregexp        
		. '(?:'
		.     '[^\[\]<>]+'  
		. '|'
		.     '<[^\[\]>]*>' 
		. ')*+'             
		. '\]'              
		. '\]?';            
	

	return $regex;
}


function wp_replace_in_html_tags( $haystack, $replace_pairs ) {
	
	$textarr = wp_html_split( $haystack );
	$changed = false;

	
	if ( 1 === count( $replace_pairs ) ) {
		
		foreach ( $replace_pairs as $needle => $replace ) {
		}

		
		for ( $i = 1, $c = count( $textarr ); $i < $c; $i += 2 ) {
			if ( false !== strpos( $textarr[ $i ], $needle ) ) {
				$textarr[ $i ] = str_replace( $needle, $replace, $textarr[ $i ] );
				$changed       = true;
			}
		}
	} else {
		
		$needles = array_keys( $replace_pairs );

		
		for ( $i = 1, $c = count( $textarr ); $i < $c; $i += 2 ) {
			foreach ( $needles as $needle ) {
				if ( false !== strpos( $textarr[ $i ], $needle ) ) {
					$textarr[ $i ] = strtr( $textarr[ $i ], $replace_pairs );
					$changed       = true;
					
					break;
				}
			}
		}
	}

	if ( $changed ) {
		$haystack = implode( $textarr );
	}

	return $haystack;
}


function _autop_newline_preservation_helper( $matches ) {
	return str_replace( "\n", '<WPPreserveNewline />', $matches[0] );
}


function shortcode_unautop( $pee ) {
	global $shortcode_tags;

	if ( empty( $shortcode_tags ) || ! is_array( $shortcode_tags ) ) {
		return $pee;
	}

	$tagregexp = join( '|', array_map( 'preg_quote', array_keys( $shortcode_tags ) ) );
	$spaces    = wp_spaces_regexp();

	
	$pattern =
		'/'
		. '<p>'                              
		. '(?:' . $spaces . ')*+'            
		. '('                                
		.     '\\['                          
		.     "($tagregexp)"                 
		.     '(?![\\w-])'                   
											 
		.     '[^\\]\\/]*'                   
		.     '(?:'
		.         '\\/(?!\\])'               
		.         '[^\\]\\/]*'               
		.     ')*?'
		.     '(?:'
		.         '\\/\\]'                   
		.     '|'
		.         '\\]'                      
		.         '(?:'                      
		.             '[^\\[]*+'             
		.             '(?:'
		.                 '\\[(?!\\/\\2\\])' 
		.                 '[^\\[]*+'         
		.             ')*+'
		.             '\\[\\/\\2\\]'         
		.         ')?'
		.     ')'
		. ')'
		. '(?:' . $spaces . ')*+'            
		. '<\\/p>'                           
		. '/';
	

	return preg_replace( $pattern, '$1', $pee );
}


function seems_utf8( $str ) {
	mbstring_binary_safe_encoding();
	$length = strlen( $str );
	reset_mbstring_encoding();
	for ( $i = 0; $i < $length; $i++ ) {
		$c = ord( $str[ $i ] );
		if ( $c < 0x80 ) {
			$n = 0; 
		} elseif ( ( $c & 0xE0 ) == 0xC0 ) {
			$n = 1; 
		} elseif ( ( $c & 0xF0 ) == 0xE0 ) {
			$n = 2; 
		} elseif ( ( $c & 0xF8 ) == 0xF0 ) {
			$n = 3; 
		} elseif ( ( $c & 0xFC ) == 0xF8 ) {
			$n = 4; 
		} elseif ( ( $c & 0xFE ) == 0xFC ) {
			$n = 5; 
		} else {
			return false; 
		}
		for ( $j = 0; $j < $n; $j++ ) { 
			if ( ( ++$i == $length ) || ( ( ord( $str[ $i ] ) & 0xC0 ) != 0x80 ) ) {
				return false;
			}
		}
	}
	return true;
}


function _wp_specialchars( $string, $quote_style = ENT_NOQUOTES, $charset = false, $double_encode = false ) {
	$string = (string) $string;

	if ( 0 === strlen( $string ) ) {
		return '';
	}

	
	if ( ! preg_match( '/[&<>"\']/', $string ) ) {
		return $string;
	}

	
	if ( empty( $quote_style ) ) {
		$quote_style = ENT_NOQUOTES;
	} elseif ( ! in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {
		$quote_style = ENT_QUOTES;
	}

	
	if ( ! $charset ) {
		static $_charset = null;
		if ( ! isset( $_charset ) ) {
			$alloptions = wp_load_alloptions();
			$_charset   = isset( $alloptions['blog_charset'] ) ? $alloptions['blog_charset'] : '';
		}
		$charset = $_charset;
	}

	if ( in_array( $charset, array( 'utf8', 'utf-8', 'UTF8' ) ) ) {
		$charset = 'UTF-8';
	}

	$_quote_style = $quote_style;

	if ( $quote_style === 'double' ) {
		$quote_style  = ENT_COMPAT;
		$_quote_style = ENT_COMPAT;
	} elseif ( $quote_style === 'single' ) {
		$quote_style = ENT_NOQUOTES;
	}

	if ( ! $double_encode ) {
		
		
		$string = wp_kses_normalize_entities( $string );
	}

	$string = htmlspecialchars( $string, $quote_style, $charset, $double_encode );

	
	if ( 'single' === $_quote_style ) {
		$string = str_replace( "'", '&
	}

	return $string;
}


function wp_specialchars_decode( $string, $quote_style = ENT_NOQUOTES ) {
	$string = (string) $string;

	if ( 0 === strlen( $string ) ) {
		return '';
	}

	
	if ( strpos( $string, '&' ) === false ) {
		return $string;
	}

	
	if ( empty( $quote_style ) ) {
		$quote_style = ENT_NOQUOTES;
	} elseif ( ! in_array( $quote_style, array( 0, 2, 3, 'single', 'double' ), true ) ) {
		$quote_style = ENT_QUOTES;
	}

	
	$single      = array(
		'&
		'&
	);
	$single_preg = array(
		'/&
		'/&
	);
	$double      = array(
		'&quot;' => '"',
		'&
		'&
	);
	$double_preg = array(
		'/&
		'/&
	);
	$others      = array(
		'&lt;'   => '<',
		'&
		'&gt;'   => '>',
		'&
		'&amp;'  => '&',
		'&
		'&
	);
	$others_preg = array(
		'/&
		'/&
		'/&
		'/&
	);

	if ( $quote_style === ENT_QUOTES ) {
		$translation      = array_merge( $single, $double, $others );
		$translation_preg = array_merge( $single_preg, $double_preg, $others_preg );
	} elseif ( $quote_style === ENT_COMPAT || $quote_style === 'double' ) {
		$translation      = array_merge( $double, $others );
		$translation_preg = array_merge( $double_preg, $others_preg );
	} elseif ( $quote_style === 'single' ) {
		$translation      = array_merge( $single, $others );
		$translation_preg = array_merge( $single_preg, $others_preg );
	} elseif ( $quote_style === ENT_NOQUOTES ) {
		$translation      = $others;
		$translation_preg = $others_preg;
	}

	
	$string = preg_replace( array_keys( $translation_preg ), array_values( $translation_preg ), $string );

	
	return strtr( $string, $translation );
}


function wp_check_invalid_utf8( $string, $strip = false ) {
	$string = (string) $string;

	if ( 0 === strlen( $string ) ) {
		return '';
	}

	
	static $is_utf8 = null;
	if ( ! isset( $is_utf8 ) ) {
		$is_utf8 = in_array( get_option( 'blog_charset' ), array( 'utf8', 'utf-8', 'UTF8', 'UTF-8' ) );
	}
	if ( ! $is_utf8 ) {
		return $string;
	}

	
	static $utf8_pcre = null;
	if ( ! isset( $utf8_pcre ) ) {
		
		$utf8_pcre = @preg_match( '/^./u', 'a' );
	}
	
	if ( ! $utf8_pcre ) {
		return $string;
	}

	
	if ( 1 === @preg_match( '/^./us', $string ) ) {
		return $string;
	}

	
	if ( $strip && function_exists( 'iconv' ) ) {
		return iconv( 'utf-8', 'utf-8', $string );
	}

	return '';
}


function utf8_uri_encode( $utf8_string, $length = 0 ) {
	$unicode        = '';
	$values         = array();
	$num_octets     = 1;
	$unicode_length = 0;

	mbstring_binary_safe_encoding();
	$string_length = strlen( $utf8_string );
	reset_mbstring_encoding();

	for ( $i = 0; $i < $string_length; $i++ ) {

		$value = ord( $utf8_string[ $i ] );

		if ( $value < 128 ) {
			if ( $length && ( $unicode_length >= $length ) ) {
				break;
			}
			$unicode .= chr( $value );
			$unicode_length++;
		} else {
			if ( count( $values ) == 0 ) {
				if ( $value < 224 ) {
					$num_octets = 2;
				} elseif ( $value < 240 ) {
					$num_octets = 3;
				} else {
					$num_octets = 4;
				}
			}

			$values[] = $value;

			if ( $length && ( $unicode_length + ( $num_octets * 3 ) ) > $length ) {
				break;
			}
			if ( count( $values ) == $num_octets ) {
				for ( $j = 0; $j < $num_octets; $j++ ) {
					$unicode .= '%' . dechex( $values[ $j ] );
				}

				$unicode_length += $num_octets * 3;

				$values     = array();
				$num_octets = 1;
			}
		}
	}

	return $unicode;
}


function remove_accents( $string ) {
	if ( ! preg_match( '/[\x80-\xff]/', $string ) ) {
		return $string;
	}

	if ( seems_utf8( $string ) ) {
		$chars = array(
			
			'ª' => 'a',
			'º' => 'o',
			'À' => 'A',
			'Á' => 'A',
			'Â' => 'A',
			'Ã' => 'A',
			'Ä' => 'A',
			'Å' => 'A',
			'Æ' => 'AE',
			'Ç' => 'C',
			'È' => 'E',
			'É' => 'E',
			'Ê' => 'E',
			'Ë' => 'E',
			'Ì' => 'I',
			'Í' => 'I',
			'Î' => 'I',
			'Ï' => 'I',
			'Ð' => 'D',
			'Ñ' => 'N',
			'Ò' => 'O',
			'Ó' => 'O',
			'Ô' => 'O',
			'Õ' => 'O',
			'Ö' => 'O',
			'Ù' => 'U',
			'Ú' => 'U',
			'Û' => 'U',
			'Ü' => 'U',
			'Ý' => 'Y',
			'Þ' => 'TH',
			'ß' => 's',
			'à' => 'a',
			'á' => 'a',
			'â' => 'a',
			'ã' => 'a',
			'ä' => 'a',
			'å' => 'a',
			'æ' => 'ae',
			'ç' => 'c',
			'è' => 'e',
			'é' => 'e',
			'ê' => 'e',
			'ë' => 'e',
			'ì' => 'i',
			'í' => 'i',
			'î' => 'i',
			'ï' => 'i',
			'ð' => 'd',
			'ñ' => 'n',
			'ò' => 'o',
			'ó' => 'o',
			'ô' => 'o',
			'õ' => 'o',
			'ö' => 'o',
			'ø' => 'o',
			'ù' => 'u',
			'ú' => 'u',
			'û' => 'u',
			'ü' => 'u',
			'ý' => 'y',
			'þ' => 'th',
			'ÿ' => 'y',
			'Ø' => 'O',
			
			'Ā' => 'A',
			'ā' => 'a',
			'Ă' => 'A',
			'ă' => 'a',
			'Ą' => 'A',
			'ą' => 'a',
			'Ć' => 'C',
			'ć' => 'c',
			'Ĉ' => 'C',
			'ĉ' => 'c',
			'Ċ' => 'C',
			'ċ' => 'c',
			'Č' => 'C',
			'č' => 'c',
			'Ď' => 'D',
			'ď' => 'd',
			'Đ' => 'D',
			'đ' => 'd',
			'Ē' => 'E',
			'ē' => 'e',
			'Ĕ' => 'E',
			'ĕ' => 'e',
			'Ė' => 'E',
			'ė' => 'e',
			'Ę' => 'E',
			'ę' => 'e',
			'Ě' => 'E',
			'ě' => 'e',
			'Ĝ' => 'G',
			'ĝ' => 'g',
			'Ğ' => 'G',
			'ğ' => 'g',
			'Ġ' => 'G',
			'ġ' => 'g',
			'Ģ' => 'G',
			'ģ' => 'g',
			'Ĥ' => 'H',
			'ĥ' => 'h',
			'Ħ' => 'H',
			'ħ' => 'h',
			'Ĩ' => 'I',
			'ĩ' => 'i',
			'Ī' => 'I',
			'ī' => 'i',
			'Ĭ' => 'I',
			'ĭ' => 'i',
			'Į' => 'I',
			'į' => 'i',
			'İ' => 'I',
			'ı' => 'i',
			'Ĳ' => 'IJ',
			'ĳ' => 'ij',
			'Ĵ' => 'J',
			'ĵ' => 'j',
			'Ķ' => 'K',
			'ķ' => 'k',
			'ĸ' => 'k',
			'Ĺ' => 'L',
			'ĺ' => 'l',
			'Ļ' => 'L',
			'ļ' => 'l',
			'Ľ' => 'L',
			'ľ' => 'l',
			'Ŀ' => 'L',
			'ŀ' => 'l',
			'Ł' => 'L',
			'ł' => 'l',
			'Ń' => 'N',
			'ń' => 'n',
			'Ņ' => 'N',
			'ņ' => 'n',
			'Ň' => 'N',
			'ň' => 'n',
			'ŉ' => 'n',
			'Ŋ' => 'N',
			'ŋ' => 'n',
			'Ō' => 'O',
			'ō' => 'o',
			'Ŏ' => 'O',
			'ŏ' => 'o',
			'Ő' => 'O',
			'ő' => 'o',
			'Œ' => 'OE',
			'œ' => 'oe',
			'Ŕ' => 'R',
			'ŕ' => 'r',
			'Ŗ' => 'R',
			'ŗ' => 'r',
			'Ř' => 'R',
			'ř' => 'r',
			'Ś' => 'S',
			'ś' => 's',
			'Ŝ' => 'S',
			'ŝ' => 's',
			'Ş' => 'S',
			'ş' => 's',
			'Š' => 'S',
			'š' => 's',
			'Ţ' => 'T',
			'ţ' => 't',
			'Ť' => 'T',
			'ť' => 't',
			'Ŧ' => 'T',
			'ŧ' => 't',
			'Ũ' => 'U',
			'ũ' => 'u',
			'Ū' => 'U',
			'ū' => 'u',
			'Ŭ' => 'U',
			'ŭ' => 'u',
			'Ů' => 'U',
			'ů' => 'u',
			'Ű' => 'U',
			'ű' => 'u',
			'Ų' => 'U',
			'ų' => 'u',
			'Ŵ' => 'W',
			'ŵ' => 'w',
			'Ŷ' => 'Y',
			'ŷ' => 'y',
			'Ÿ' => 'Y',
			'Ź' => 'Z',
			'ź' => 'z',
			'Ż' => 'Z',
			'ż' => 'z',
			'Ž' => 'Z',
			'ž' => 'z',
			'ſ' => 's',
			
			'Ș' => 'S',
			'ș' => 's',
			'Ț' => 'T',
			'ț' => 't',
			
			'€' => 'E',
			
			'£' => '',
			
			
			'Ơ' => 'O',
			'ơ' => 'o',
			'Ư' => 'U',
			'ư' => 'u',
			
			'Ầ' => 'A',
			'ầ' => 'a',
			'Ằ' => 'A',
			'ằ' => 'a',
			'Ề' => 'E',
			'ề' => 'e',
			'Ồ' => 'O',
			'ồ' => 'o',
			'Ờ' => 'O',
			'ờ' => 'o',
			'Ừ' => 'U',
			'ừ' => 'u',
			'Ỳ' => 'Y',
			'ỳ' => 'y',
			
			'Ả' => 'A',
			'ả' => 'a',
			'Ẩ' => 'A',
			'ẩ' => 'a',
			'Ẳ' => 'A',
			'ẳ' => 'a',
			'Ẻ' => 'E',
			'ẻ' => 'e',
			'Ể' => 'E',
			'ể' => 'e',
			'Ỉ' => 'I',
			'ỉ' => 'i',
			'Ỏ' => 'O',
			'ỏ' => 'o',
			'Ổ' => 'O',
			'ổ' => 'o',
			'Ở' => 'O',
			'ở' => 'o',
			'Ủ' => 'U',
			'ủ' => 'u',
			'Ử' => 'U',
			'ử' => 'u',
			'Ỷ' => 'Y',
			'ỷ' => 'y',
			
			'Ẫ' => 'A',
			'ẫ' => 'a',
			'Ẵ' => 'A',
			'ẵ' => 'a',
			'Ẽ' => 'E',
			'ẽ' => 'e',
			'Ễ' => 'E',
			'ễ' => 'e',
			'Ỗ' => 'O',
			'ỗ' => 'o',
			'Ỡ' => 'O',
			'ỡ' => 'o',
			'Ữ' => 'U',
			'ữ' => 'u',
			'Ỹ' => 'Y',
			'ỹ' => 'y',
			
			'Ấ' => 'A',
			'ấ' => 'a',
			'Ắ' => 'A',
			'ắ' => 'a',
			'Ế' => 'E',
			'ế' => 'e',
			'Ố' => 'O',
			'ố' => 'o',
			'Ớ' => 'O',
			'ớ' => 'o',
			'Ứ' => 'U',
			'ứ' => 'u',
			
			'Ạ' => 'A',
			'ạ' => 'a',
			'Ậ' => 'A',
			'ậ' => 'a',
			'Ặ' => 'A',
			'ặ' => 'a',
			'Ẹ' => 'E',
			'ẹ' => 'e',
			'Ệ' => 'E',
			'ệ' => 'e',
			'Ị' => 'I',
			'ị' => 'i',
			'Ọ' => 'O',
			'ọ' => 'o',
			'Ộ' => 'O',
			'ộ' => 'o',
			'Ợ' => 'O',
			'ợ' => 'o',
			'Ụ' => 'U',
			'ụ' => 'u',
			'Ự' => 'U',
			'ự' => 'u',
			'Ỵ' => 'Y',
			'ỵ' => 'y',
			
			'ɑ' => 'a',
			
			'Ǖ' => 'U',
			'ǖ' => 'u',
			
			'Ǘ' => 'U',
			'ǘ' => 'u',
			
			'Ǎ' => 'A',
			'ǎ' => 'a',
			'Ǐ' => 'I',
			'ǐ' => 'i',
			'Ǒ' => 'O',
			'ǒ' => 'o',
			'Ǔ' => 'U',
			'ǔ' => 'u',
			'Ǚ' => 'U',
			'ǚ' => 'u',
			
			'Ǜ' => 'U',
			'ǜ' => 'u',
		);

		
		$locale = get_locale();

		if ( 'de_DE' == $locale || 'de_DE_formal' == $locale || 'de_CH' == $locale || 'de_CH_informal' == $locale ) {
			$chars['Ä'] = 'Ae';
			$chars['ä'] = 'ae';
			$chars['Ö'] = 'Oe';
			$chars['ö'] = 'oe';
			$chars['Ü'] = 'Ue';
			$chars['ü'] = 'ue';
			$chars['ß'] = 'ss';
		} elseif ( 'da_DK' === $locale ) {
			$chars['Æ'] = 'Ae';
			$chars['æ'] = 'ae';
			$chars['Ø'] = 'Oe';
			$chars['ø'] = 'oe';
			$chars['Å'] = 'Aa';
			$chars['å'] = 'aa';
		} elseif ( 'ca' === $locale ) {
			$chars['l·l'] = 'll';
		} elseif ( 'sr_RS' === $locale || 'bs_BA' === $locale ) {
			$chars['Đ'] = 'DJ';
			$chars['đ'] = 'dj';
		}

		$string = strtr( $string, $chars );
	} else {
		$chars = array();
		
		$chars['in'] = "\x80\x83\x8a\x8e\x9a\x9e"
			. "\x9f\xa2\xa5\xb5\xc0\xc1\xc2"
			. "\xc3\xc4\xc5\xc7\xc8\xc9\xca"
			. "\xcb\xcc\xcd\xce\xcf\xd1\xd2"
			. "\xd3\xd4\xd5\xd6\xd8\xd9\xda"
			. "\xdb\xdc\xdd\xe0\xe1\xe2\xe3"
			. "\xe4\xe5\xe7\xe8\xe9\xea\xeb"
			. "\xec\xed\xee\xef\xf1\xf2\xf3"
			. "\xf4\xf5\xf6\xf8\xf9\xfa\xfb"
			. "\xfc\xfd\xff";

		$chars['out'] = 'EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy';

		$string              = strtr( $string, $chars['in'], $chars['out'] );
		$double_chars        = array();
		$double_chars['in']  = array( "\x8c", "\x9c", "\xc6", "\xd0", "\xde", "\xdf", "\xe6", "\xf0", "\xfe" );
		$double_chars['out'] = array( 'OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th' );
		$string              = str_replace( $double_chars['in'], $double_chars['out'], $string );
	}

	return $string;
}


function sanitize_file_name( $filename ) {
	$filename_raw  = $filename;
	$special_chars = array( '?', '[', ']', '/', '\\', '=', '<', '>', ':', ';', ',', "'", '"', '&', '$', '
	
	$special_chars = apply_filters( 'sanitize_file_name_chars', $special_chars, $filename_raw );
	$filename      = preg_replace( "
	$filename      = str_replace( $special_chars, '', $filename );
	$filename      = str_replace( array( '%20', '+' ), '-', $filename );
	$filename      = preg_replace( '/[\r\n\t -]+/', '-', $filename );
	$filename      = trim( $filename, '.-_' );

	if ( false === strpos( $filename, '.' ) ) {
		$mime_types = wp_get_mime_types();
		$filetype   = wp_check_filetype( 'test.' . $filename, $mime_types );
		if ( $filetype['ext'] === $filename ) {
			$filename = 'unnamed-file.' . $filetype['ext'];
		}
	}

	
	$parts = explode( '.', $filename );

	
	if ( count( $parts ) <= 2 ) {
		
		return apply_filters( 'sanitize_file_name', $filename, $filename_raw );
	}

	
	$filename  = array_shift( $parts );
	$extension = array_pop( $parts );
	$mimes     = get_allowed_mime_types();

	
	foreach ( (array) $parts as $part ) {
		$filename .= '.' . $part;

		if ( preg_match( '/^[a-zA-Z]{2,5}\d?$/', $part ) ) {
			$allowed = false;
			foreach ( $mimes as $ext_preg => $mime_match ) {
				$ext_preg = '!^(' . $ext_preg . ')$!i';
				if ( preg_match( $ext_preg, $part ) ) {
					$allowed = true;
					break;
				}
			}
			if ( ! $allowed ) {
				$filename .= '_';
			}
		}
	}
	$filename .= '.' . $extension;
	
	return apply_filters( 'sanitize_file_name', $filename, $filename_raw );
}


function sanitize_user( $username, $strict = false ) {
	$raw_username = $username;
	$username     = wp_strip_all_tags( $username );
	$username     = remove_accents( $username );
	
	$username = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '', $username );
	$username = preg_replace( '/&.+?;/', '', $username ); 

	
	if ( $strict ) {
		$username = preg_replace( '|[^a-z0-9 _.\-@]|i', '', $username );
	}

	$username = trim( $username );
	
	$username = preg_replace( '|\s+|', ' ', $username );

	
	return apply_filters( 'sanitize_user', $username, $raw_username, $strict );
}


function sanitize_key( $key ) {
	$raw_key = $key;
	$key     = strtolower( $key );
	$key     = preg_replace( '/[^a-z0-9_\-]/', '', $key );

	
	return apply_filters( 'sanitize_key', $key, $raw_key );
}


function sanitize_title( $title, $fallback_title = '', $context = 'save' ) {
	$raw_title = $title;

	if ( 'save' == $context ) {
		$title = remove_accents( $title );
	}

	
	$title = apply_filters( 'sanitize_title', $title, $raw_title, $context );

	if ( '' === $title || false === $title ) {
		$title = $fallback_title;
	}

	return $title;
}


function sanitize_title_for_query( $title ) {
	return sanitize_title( $title, '', 'query' );
}


function sanitize_title_with_dashes( $title, $raw_title = '', $context = 'display' ) {
	$title = strip_tags( $title );
	
	$title = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '---$1---', $title );
	
	$title = str_replace( '%', '', $title );
	
	$title = preg_replace( '|---([a-fA-F0-9][a-fA-F0-9])---|', '%$1', $title );

	if ( seems_utf8( $title ) ) {
		if ( function_exists( 'mb_strtolower' ) ) {
			$title = mb_strtolower( $title, 'UTF-8' );
		}
		$title = utf8_uri_encode( $title, 200 );
	}

	$title = strtolower( $title );

	if ( 'save' == $context ) {
		
		$title = str_replace( array( '%c2%a0', '%e2%80%93', '%e2%80%94' ), '-', $title );
		
		$title = str_replace( array( '&nbsp;', '&
		
		$title = str_replace( '/', '-', $title );

		
		$title = str_replace(
			array(
				
				'%c2%ad',
				
				'%c2%a1',
				'%c2%bf',
				
				'%c2%ab',
				'%c2%bb',
				'%e2%80%b9',
				'%e2%80%ba',
				
				'%e2%80%98',
				'%e2%80%99',
				'%e2%80%9c',
				'%e2%80%9d',
				'%e2%80%9a',
				'%e2%80%9b',
				'%e2%80%9e',
				'%e2%80%9f',
				
				'%c2%a9',
				'%c2%ae',
				'%c2%b0',
				'%e2%80%a6',
				'%e2%84%a2',
				
				'%c2%b4',
				'%cb%8a',
				'%cc%81',
				'%cd%81',
				
				'%cc%80',
				'%cc%84',
				'%cc%8c',
			),
			'',
			$title
		);

		
		$title = str_replace( '%c3%97', 'x', $title );
	}

	$title = preg_replace( '/&.+?;/', '', $title ); 
	$title = str_replace( '.', '-', $title );

	$title = preg_replace( '/[^%a-z0-9 _-]/', '', $title );
	$title = preg_replace( '/\s+/', '-', $title );
	$title = preg_replace( '|-+|', '-', $title );
	$title = trim( $title, '-' );

	return $title;
}


function sanitize_sql_orderby( $orderby ) {
	if ( preg_match( '/^\s*(([a-z0-9_]+|`[a-z0-9_]+`)(\s+(ASC|DESC))?\s*(,\s*(?=[a-z0-9_`])|$))+$/i', $orderby ) || preg_match( '/^\s*RAND\(\s*\)\s*$/i', $orderby ) ) {
		return $orderby;
	}
	return false;
}


function sanitize_html_class( $class, $fallback = '' ) {
	
	$sanitized = preg_replace( '|%[a-fA-F0-9][a-fA-F0-9]|', '', $class );

	
	$sanitized = preg_replace( '/[^A-Za-z0-9_-]/', '', $sanitized );

	if ( '' == $sanitized && $fallback ) {
		return sanitize_html_class( $fallback );
	}
	
	return apply_filters( 'sanitize_html_class', $sanitized, $class, $fallback );
}


function convert_chars( $content, $deprecated = '' ) {
	if ( ! empty( $deprecated ) ) {
		_deprecated_argument( __FUNCTION__, '0.71' );
	}

	if ( strpos( $content, '&' ) !== false ) {
		$content = preg_replace( '/&([^
	}

	return $content;
}


function convert_invalid_entities( $content ) {
	$wp_htmltranswinuni = array(
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
		'&
	);

	if ( strpos( $content, '&
		$content = strtr( $content, $wp_htmltranswinuni );
	}

	return $content;
}


function balanceTags( $text, $force = false ) {  
	if ( $force || (int) get_option( 'use_balanceTags' ) === 1 ) {
		return force_balance_tags( $text );
	} else {
		return $text;
	}
}


function force_balance_tags( $text ) {
	$tagstack  = array();
	$stacksize = 0;
	$tagqueue  = '';
	$newtext   = '';
	
	$single_tags = array( 'area', 'base', 'basefont', 'br', 'col', 'command', 'embed', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param', 'source' );
	
	$nestable_tags = array( 'blockquote', 'div', 'object', 'q', 'span' );

	
	$text = str_replace( '< !--', '<    !--', $text );
	
	$text = preg_replace( '

	
	$tag_pattern = (
		'
		'(/?)' . 
		'(' . 
			
			'(?:[a-z](?:[a-z0-9._]*)-(?:[a-z0-9._-]+)+)' .
				'|' .
			
			'(?:[\w:]+)' .
		')' .
		'(?:' .
			
			'\s*' .
			'(/?)' . 
				'|' .
			
			'(\s+)' . 
			'([^>]*)' . 
		')' .
		'>
	);

	while ( preg_match( $tag_pattern, $text, $regex ) ) {
		$full_match        = $regex[0];
		$has_leading_slash = ! empty( $regex[1] );
		$tag_name          = $regex[2];
		$tag               = strtolower( $tag_name );
		$is_single_tag     = in_array( $tag, $single_tags, true );
		$pre_attribute_ws  = isset( $regex[4] ) ? $regex[4] : '';
		$attributes        = trim( isset( $regex[5] ) ? $regex[5] : $regex[3] );
		$has_self_closer   = '/' === substr( $attributes, -1 );

		$newtext .= $tagqueue;

		$i = strpos( $text, $full_match );
		$l = strlen( $full_match );

		
		$tagqueue = '';
		if ( $has_leading_slash ) { 
			
			if ( $stacksize <= 0 ) {
				$tag = '';
				

				
			} elseif ( $tagstack[ $stacksize - 1 ] === $tag ) { 
				$tag = '</' . $tag . '>'; 
				array_pop( $tagstack );
				$stacksize--;
			} else { 
				for ( $j = $stacksize - 1; $j >= 0; $j-- ) {
					if ( $tagstack[ $j ] === $tag ) {
						
						for ( $k = $stacksize - 1; $k >= $j; $k-- ) {
							$tagqueue .= '</' . array_pop( $tagstack ) . '>';
							$stacksize--;
						}
						break;
					}
				}
				$tag = '';
			}
		} else { 
			if ( $has_self_closer ) { 
				
				
				if ( ! $is_single_tag ) {
					$attributes = trim( substr( $attributes, 0, -1 ) ) . "></$tag";
				}
			} elseif ( $is_single_tag ) { 
				$pre_attribute_ws = ' ';
				$attributes      .= '/';
			} else { 
				
				if ( $stacksize > 0 && ! in_array( $tag, $nestable_tags, true ) && $tagstack[ $stacksize - 1 ] === $tag ) {
					$tagqueue = '</' . array_pop( $tagstack ) . '>';
					$stacksize--;
				}
				$stacksize = array_push( $tagstack, $tag );
			}

			
			if ( $has_self_closer && $is_single_tag ) {
				
				$pre_attribute_ws = ' ';
			}

			$tag = '<' . $tag . $pre_attribute_ws . $attributes . '>';
			
			if ( ! empty( $tagqueue ) ) {
				$tagqueue .= $tag;
				$tag       = '';
			}
		}
		$newtext .= substr( $text, 0, $i ) . $tag;
		$text     = substr( $text, $i + $l );
	}

	
	$newtext .= $tagqueue;

	
	$newtext .= $text;

	while ( $x = array_pop( $tagstack ) ) {
		$newtext .= '</' . $x . '>'; 
	}

	
	$newtext = str_replace( '< !--', '<!--', $newtext );
	$newtext = str_replace( '<    !--', '< !--', $newtext );

	return $newtext;
}


function format_to_edit( $content, $rich_text = false ) {
	
	$content = apply_filters( 'format_to_edit', $content );
	if ( ! $rich_text ) {
		$content = esc_textarea( $content );
	}
	return $content;
}


function zeroise( $number, $threshold ) {
	return sprintf( '%0' . $threshold . 's', $number );
}


function backslashit( $string ) {
	if ( isset( $string[0] ) && $string[0] >= '0' && $string[0] <= '9' ) {
		$string = '\\\\' . $string;
	}
	return addcslashes( $string, 'A..Za..z' );
}


function trailingslashit( $string ) {
	return untrailingslashit( $string ) . '/';
}


function untrailingslashit( $string ) {
	return rtrim( $string, '/\\' );
}


function addslashes_gpc( $gpc ) {
	return wp_slash( $gpc );
}


function stripslashes_deep( $value ) {
	return map_deep( $value, 'stripslashes_from_strings_only' );
}


function stripslashes_from_strings_only( $value ) {
	return is_string( $value ) ? stripslashes( $value ) : $value;
}


function urlencode_deep( $value ) {
	return map_deep( $value, 'urlencode' );
}


function rawurlencode_deep( $value ) {
	return map_deep( $value, 'rawurlencode' );
}


function urldecode_deep( $value ) {
	return map_deep( $value, 'urldecode' );
}


function antispambot( $email_address, $hex_encoding = 0 ) {
	$email_no_spam_address = '';
	for ( $i = 0, $len = strlen( $email_address ); $i < $len; $i++ ) {
		$j = rand( 0, 1 + $hex_encoding );
		if ( $j == 0 ) {
			$email_no_spam_address .= '&
		} elseif ( $j == 1 ) {
			$email_no_spam_address .= $email_address[ $i ];
		} elseif ( $j == 2 ) {
			$email_no_spam_address .= '%' . zeroise( dechex( ord( $email_address[ $i ] ) ), 2 );
		}
	}

	return str_replace( '@', '&
}


function _make_url_clickable_cb( $matches ) {
	$url = $matches[2];

	if ( ')' == $matches[3] && strpos( $url, '(' ) ) {
		
		
		$url   .= $matches[3];
		$suffix = '';
	} else {
		$suffix = $matches[3];
	}

	
	while ( substr_count( $url, '(' ) < substr_count( $url, ')' ) ) {
		$suffix = strrchr( $url, ')' ) . $suffix;
		$url    = substr( $url, 0, strrpos( $url, ')' ) );
	}

	$url = esc_url( $url );
	if ( empty( $url ) ) {
		return $matches[0];
	}

	if ( 'comment_text' === current_filter() ) {
		$rel = 'nofollow ugc';
	} else {
		$rel = 'nofollow';
	}

	
	$rel = apply_filters( 'make_clickable_rel', $rel, $url );
	$rel = esc_attr( $rel );

	return $matches[1] . "<a href=\"$url\" rel=\"$rel\">$url</a>" . $suffix;
}


function _make_web_ftp_clickable_cb( $matches ) {
	$ret  = '';
	$dest = $matches[2];
	$dest = 'http:

	
	if ( in_array( substr( $dest, -1 ), array( '.', ',', ';', ':', ')' ) ) === true ) {
		$ret  = substr( $dest, -1 );
		$dest = substr( $dest, 0, strlen( $dest ) - 1 );
	}

	$dest = esc_url( $dest );
	if ( empty( $dest ) ) {
		return $matches[0];
	}

	if ( 'comment_text' === current_filter() ) {
		$rel = 'nofollow ugc';
	} else {
		$rel = 'nofollow';
	}

	
	$rel = apply_filters( 'make_clickable_rel', $rel, $dest );
	$rel = esc_attr( $rel );

	return $matches[1] . "<a href=\"$dest\" rel=\"$rel\">$dest</a>$ret";
}


function _make_email_clickable_cb( $matches ) {
	$email = $matches[2] . '@' . $matches[3];
	return $matches[1] . "<a href=\"mailto:$email\">$email</a>";
}


function make_clickable( $text ) {
	$r               = '';
	$textarr         = preg_split( '/(<[^<>]+>)/', $text, -1, PREG_SPLIT_DELIM_CAPTURE ); 
	$nested_code_pre = 0; 
	foreach ( $textarr as $piece ) {

		if ( preg_match( '|^<code[\s>]|i', $piece ) || preg_match( '|^<pre[\s>]|i', $piece ) || preg_match( '|^<script[\s>]|i', $piece ) || preg_match( '|^<style[\s>]|i', $piece ) ) {
			$nested_code_pre++;
		} elseif ( $nested_code_pre && ( '</code>' === strtolower( $piece ) || '</pre>' === strtolower( $piece ) || '</script>' === strtolower( $piece ) || '</style>' === strtolower( $piece ) ) ) {
			$nested_code_pre--;
		}

		if ( $nested_code_pre || empty( $piece ) || ( $piece[0] === '<' && ! preg_match( '|^<\s*[\w]{1,20}+:
			$r .= $piece;
			continue;
		}

		
		if ( 10000 < strlen( $piece ) ) {
			
			foreach ( _split_str_by_whitespace( $piece, 2100 ) as $chunk ) { 
				if ( 2101 < strlen( $chunk ) ) {
					$r .= $chunk; 
				} else {
					$r .= make_clickable( $chunk );
				}
			}
		} else {
			$ret = " $piece "; 

			$url_clickable = '~
				([\\s(<.,;:!?])                                        
				(                                                      
					[\\w]{1,20}+:
					(?=\S{1,2000}\s)                               
					[\\w\\x80-\\xff
					(?:                                            
						[\'.,;:!?)]                            
						[\\w\\x80-\\xff
					)*
				)
				(\)?)                                                  
			~xS';
			
			

			$ret = preg_replace_callback( $url_clickable, '_make_url_clickable_cb', $ret );

			$ret = preg_replace_callback( '
			$ret = preg_replace_callback( '

			$ret = substr( $ret, 1, -1 ); 
			$r  .= $ret;
		}
	}

	
	return preg_replace( '
}


function _split_str_by_whitespace( $string, $goal ) {
	$chunks = array();

	$string_nullspace = strtr( $string, "\r\n\t\v\f ", "\000\000\000\000\000\000" );

	while ( $goal < strlen( $string_nullspace ) ) {
		$pos = strrpos( substr( $string_nullspace, 0, $goal + 1 ), "\000" );

		if ( false === $pos ) {
			$pos = strpos( $string_nullspace, "\000", $goal + 1 );
			if ( false === $pos ) {
				break;
			}
		}

		$chunks[]         = substr( $string, 0, $pos + 1 );
		$string           = substr( $string, $pos + 1 );
		$string_nullspace = substr( $string_nullspace, $pos + 1 );
	}

	if ( $string ) {
		$chunks[] = $string;
	}

	return $chunks;
}


function wp_rel_callback( $matches, $rel ) {
	$text = $matches[1];
	$atts = wp_kses_hair( $matches[1], wp_allowed_protocols() );

	if ( ! empty( $atts['href'] ) ) {
		if ( in_array( strtolower( wp_parse_url( $atts['href']['value'], PHP_URL_SCHEME ) ), array( 'http', 'https' ), true ) ) {
			if ( strtolower( wp_parse_url( $atts['href']['value'], PHP_URL_HOST ) ) === strtolower( wp_parse_url( home_url(), PHP_URL_HOST ) ) ) {
				return "<a $text>";
			}
		}
	}

	if ( ! empty( $atts['rel'] ) ) {
		$parts     = array_map( 'trim', explode( ' ', $atts['rel']['value'] ) );
		$rel_array = array_map( 'trim', explode( ' ', $rel ) );
		$parts     = array_unique( array_merge( $parts, $rel_array ) );
		$rel       = implode( ' ', $parts );
		unset( $atts['rel'] );

		$html = '';
		foreach ( $atts as $name => $value ) {
			if ( isset( $value['vless'] ) && 'y' === $value['vless'] ) {
				$html .= $name . ' ';
			} else {
				$html .= "{$name}=\"" . esc_attr( $value['value'] ) . '" ';
			}
		}
		$text = trim( $html );
	}
	return "<a $text rel=\"" . esc_attr( $rel ) . '">';
}


function wp_rel_nofollow( $text ) {
	
	$text = stripslashes( $text );
	$text = preg_replace_callback(
		'|<a (.+?)>|i',
		function( $matches ) {
			return wp_rel_callback( $matches, 'nofollow' );
		},
		$text
	);
	return wp_slash( $text );
}


function wp_rel_nofollow_callback( $matches ) {
	return wp_rel_callback( $matches, 'nofollow' );
}


function wp_rel_ugc( $text ) {
	
	$text = stripslashes( $text );
	$text = preg_replace_callback(
		'|<a (.+?)>|i',
		function( $matches ) {
			return wp_rel_callback( $matches, 'nofollow ugc' );
		},
		$text
	);
	return wp_slash( $text );
}


function wp_targeted_link_rel( $text ) {
	
	if ( stripos( $text, 'target' ) === false || stripos( $text, '<a ' ) === false || is_serialized( $text ) ) {
		return $text;
	}

	$script_and_style_regex = '/<(script|style).*?<\/\\1>/si';

	preg_match_all( $script_and_style_regex, $text, $matches );
	$extra_parts = $matches[0];
	$html_parts  = preg_split( $script_and_style_regex, $text );

	foreach ( $html_parts as &$part ) {
		$part = preg_replace_callback( '|<a\s([^>]*target\s*=[^>]*)>|i', 'wp_targeted_link_rel_callback', $part );
	}

	$text = '';
	for ( $i = 0; $i < count( $html_parts ); $i++ ) {
		$text .= $html_parts[ $i ];
		if ( isset( $extra_parts[ $i ] ) ) {
			$text .= $extra_parts[ $i ];
		}
	}

	return $text;
}


function wp_targeted_link_rel_callback( $matches ) {
	$link_html          = $matches[1];
	$original_link_html = $link_html;

	
	$is_escaped = ! preg_match( '/(^|[^\\\\])[\'"]/', $link_html );
	if ( $is_escaped ) {
		
		$link_html = preg_replace( '/\\\\([\'"])/', '$1', $link_html );
	}

	$atts = wp_kses_hair( $link_html, wp_allowed_protocols() );

	
	$rel = apply_filters( 'wp_targeted_link_rel', 'noopener noreferrer', $link_html );

	
	if ( ! $rel || ! isset( $atts['target'] ) ) {
		return "<a $original_link_html>";
	}

	if ( isset( $atts['rel'] ) ) {
		$all_parts = preg_split( '/\s/', "{$atts['rel']['value']} $rel", -1, PREG_SPLIT_NO_EMPTY );
		$rel       = implode( ' ', array_unique( $all_parts ) );
	}

	$atts['rel']['whole'] = 'rel="' . esc_attr( $rel ) . '"';
	$link_html            = join( ' ', array_column( $atts, 'whole' ) );

	if ( $is_escaped ) {
		$link_html = preg_replace( '/[\'"]/', '\\\\$0', $link_html );
	}

	return "<a $link_html>";
}


function wp_init_targeted_link_rel_filters() {
	$filters = array(
		'title_save_pre',
		'content_save_pre',
		'excerpt_save_pre',
		'content_filtered_save_pre',
		'pre_comment_content',
		'pre_term_description',
		'pre_link_description',
		'pre_link_notes',
		'pre_user_description',
	);

	foreach ( $filters as $filter ) {
		add_filter( $filter, 'wp_targeted_link_rel' );
	};
}


function wp_remove_targeted_link_rel_filters() {
	$filters = array(
		'title_save_pre',
		'content_save_pre',
		'excerpt_save_pre',
		'content_filtered_save_pre',
		'pre_comment_content',
		'pre_term_description',
		'pre_link_description',
		'pre_link_notes',
		'pre_user_description',
	);

	foreach ( $filters as $filter ) {
		remove_filter( $filter, 'wp_targeted_link_rel' );
	};
}


function translate_smiley( $matches ) {
	global $wpsmiliestrans;

	if ( count( $matches ) == 0 ) {
		return '';
	}

	$smiley = trim( reset( $matches ) );
	$img    = $wpsmiliestrans[ $smiley ];

	$matches    = array();
	$ext        = preg_match( '/\.([^.]+)$/', $img, $matches ) ? strtolower( $matches[1] ) : false;
	$image_exts = array( 'jpg', 'jpeg', 'jpe', 'gif', 'png' );

	
	if ( ! in_array( $ext, $image_exts ) ) {
		return $img;
	}

	
	$src_url = apply_filters( 'smilies_src', includes_url( "images/smilies/$img" ), $img, site_url() );

	return sprintf( '<img src="%s" alt="%s" class="wp-smiley" style="height: 1em; max-height: 1em;" />', esc_url( $src_url ), esc_attr( $smiley ) );
}


function convert_smilies( $text ) {
	global $wp_smiliessearch;
	$output = '';
	if ( get_option( 'use_smilies' ) && ! empty( $wp_smiliessearch ) ) {
		
		$textarr = preg_split( '/(<.*>)/U', $text, -1, PREG_SPLIT_DELIM_CAPTURE ); 
		$stop    = count( $textarr );

		
		$tags_to_ignore       = 'code|pre|style|script|textarea';
		$ignore_block_element = '';

		for ( $i = 0; $i < $stop; $i++ ) {
			$content = $textarr[ $i ];

			
			if ( '' == $ignore_block_element && preg_match( '/^<(' . $tags_to_ignore . ')[^>]*>/', $content, $matches ) ) {
				$ignore_block_element = $matches[1];
			}

			
			if ( '' == $ignore_block_element && strlen( $content ) > 0 && '<' != $content[0] ) {
				$content = preg_replace_callback( $wp_smiliessearch, 'translate_smiley', $content );
			}

			
			if ( '' != $ignore_block_element && '</' . $ignore_block_element . '>' == $content ) {
				$ignore_block_element = '';
			}

			$output .= $content;
		}
	} else {
		
		$output = $text;
	}
	return $output;
}


function is_email( $email, $deprecated = false ) {
	if ( ! empty( $deprecated ) ) {
		_deprecated_argument( __FUNCTION__, '3.0.0' );
	}

	
	if ( strlen( $email ) < 6 ) {
		
		return apply_filters( 'is_email', false, $email, 'email_too_short' );
	}

	
	if ( strpos( $email, '@', 1 ) === false ) {
		
		return apply_filters( 'is_email', false, $email, 'email_no_at' );
	}

	
	list( $local, $domain ) = explode( '@', $email, 2 );

	
	
	if ( ! preg_match( '/^[a-zA-Z0-9!
		
		return apply_filters( 'is_email', false, $email, 'local_invalid_chars' );
	}

	
	
	if ( preg_match( '/\.{2,}/', $domain ) ) {
		
		return apply_filters( 'is_email', false, $email, 'domain_period_sequence' );
	}

	
	if ( trim( $domain, " \t\n\r\0\x0B." ) !== $domain ) {
		
		return apply_filters( 'is_email', false, $email, 'domain_period_limits' );
	}

	
	$subs = explode( '.', $domain );

	
	if ( 2 > count( $subs ) ) {
		
		return apply_filters( 'is_email', false, $email, 'domain_no_periods' );
	}

	
	foreach ( $subs as $sub ) {
		
		if ( trim( $sub, " \t\n\r\0\x0B-" ) !== $sub ) {
			
			return apply_filters( 'is_email', false, $email, 'sub_hyphen_limits' );
		}

		
		if ( ! preg_match( '/^[a-z0-9-]+$/i', $sub ) ) {
			
			return apply_filters( 'is_email', false, $email, 'sub_invalid_chars' );
		}
	}

	
	
	return apply_filters( 'is_email', $email, $email, null );
}


function wp_iso_descrambler( $string ) {
	
	if ( ! preg_match( '
		return $string;
	} else {
		$subject = str_replace( '_', ' ', $matches[2] );
		return preg_replace_callback( '
	}
}


function _wp_iso_convert( $match ) {
	return chr( hexdec( strtolower( $match[1] ) ) );
}


function get_gmt_from_date( $string, $format = 'Y-m-d H:i:s' ) {
	$datetime = date_create( $string, wp_timezone() );

	if ( false === $datetime ) {
		return gmdate( $format, 0 );
	}

	return $datetime->setTimezone( new DateTimeZone( 'UTC' ) )->format( $format );
}


function get_date_from_gmt( $string, $format = 'Y-m-d H:i:s' ) {
	$datetime = date_create( $string, new DateTimeZone( 'UTC' ) );

	if ( false === $datetime ) {
		return gmdate( $format, 0 );
	}

	return $datetime->setTimezone( wp_timezone() )->format( $format );
}


function iso8601_timezone_to_offset( $timezone ) {
	
	if ( $timezone == 'Z' ) {
		$offset = 0;
	} else {
		$sign    = ( substr( $timezone, 0, 1 ) == '+' ) ? 1 : -1;
		$hours   = intval( substr( $timezone, 1, 2 ) );
		$minutes = intval( substr( $timezone, 3, 4 ) ) / 60;
		$offset  = $sign * HOUR_IN_SECONDS * ( $hours + $minutes );
	}
	return $offset;
}


function iso8601_to_datetime( $date_string, $timezone = 'user' ) {
	$timezone    = strtolower( $timezone );
	$wp_timezone = wp_timezone();
	$datetime    = date_create( $date_string, $wp_timezone ); 

	if ( false === $datetime ) {
		return false;
	}

	if ( 'gmt' === $timezone ) {
		return $datetime->setTimezone( new DateTimeZone( 'UTC' ) )->format( 'Y-m-d H:i:s' );
	}

	if ( 'user' === $timezone ) {
		return $datetime->setTimezone( $wp_timezone )->format( 'Y-m-d H:i:s' );
	}

	return false;
}


function sanitize_email( $email ) {
	
	if ( strlen( $email ) < 6 ) {
		
		return apply_filters( 'sanitize_email', '', $email, 'email_too_short' );
	}

	
	if ( strpos( $email, '@', 1 ) === false ) {
		
		return apply_filters( 'sanitize_email', '', $email, 'email_no_at' );
	}

	
	list( $local, $domain ) = explode( '@', $email, 2 );

	
	
	$local = preg_replace( '/[^a-zA-Z0-9!
	if ( '' === $local ) {
		
		return apply_filters( 'sanitize_email', '', $email, 'local_invalid_chars' );
	}

	
	
	$domain = preg_replace( '/\.{2,}/', '', $domain );
	if ( '' === $domain ) {
		
		return apply_filters( 'sanitize_email', '', $email, 'domain_period_sequence' );
	}

	
	$domain = trim( $domain, " \t\n\r\0\x0B." );
	if ( '' === $domain ) {
		
		return apply_filters( 'sanitize_email', '', $email, 'domain_period_limits' );
	}

	
	$subs = explode( '.', $domain );

	
	if ( 2 > count( $subs ) ) {
		
		return apply_filters( 'sanitize_email', '', $email, 'domain_no_periods' );
	}

	
	$new_subs = array();

	
	foreach ( $subs as $sub ) {
		
		$sub = trim( $sub, " \t\n\r\0\x0B-" );

		
		$sub = preg_replace( '/[^a-z0-9-]+/i', '', $sub );

		
		if ( '' !== $sub ) {
			$new_subs[] = $sub;
		}
	}

	
	if ( 2 > count( $new_subs ) ) {
		
		return apply_filters( 'sanitize_email', '', $email, 'domain_no_valid_subs' );
	}

	
	$domain = join( '.', $new_subs );

	
	$sanitized_email = $local . '@' . $domain;

	
	
	return apply_filters( 'sanitize_email', $sanitized_email, $email, null );
}


function human_time_diff( $from, $to = 0 ) {
	if ( empty( $to ) ) {
		$to = time();
	}

	$diff = (int) abs( $to - $from );

	if ( $diff < MINUTE_IN_SECONDS ) {
		$secs = $diff;
		if ( $secs <= 1 ) {
			$secs = 1;
		}
		
		$since = sprintf( _n( '%s second', '%s seconds', $secs ), $secs );
	} elseif ( $diff < HOUR_IN_SECONDS && $diff >= MINUTE_IN_SECONDS ) {
		$mins = round( $diff / MINUTE_IN_SECONDS );
		if ( $mins <= 1 ) {
			$mins = 1;
		}
		
		$since = sprintf( _n( '%s min', '%s mins', $mins ), $mins );
	} elseif ( $diff < DAY_IN_SECONDS && $diff >= HOUR_IN_SECONDS ) {
		$hours = round( $diff / HOUR_IN_SECONDS );
		if ( $hours <= 1 ) {
			$hours = 1;
		}
		
		$since = sprintf( _n( '%s hour', '%s hours', $hours ), $hours );
	} elseif ( $diff < WEEK_IN_SECONDS && $diff >= DAY_IN_SECONDS ) {
		$days = round( $diff / DAY_IN_SECONDS );
		if ( $days <= 1 ) {
			$days = 1;
		}
		
		$since = sprintf( _n( '%s day', '%s days', $days ), $days );
	} elseif ( $diff < MONTH_IN_SECONDS && $diff >= WEEK_IN_SECONDS ) {
		$weeks = round( $diff / WEEK_IN_SECONDS );
		if ( $weeks <= 1 ) {
			$weeks = 1;
		}
		
		$since = sprintf( _n( '%s week', '%s weeks', $weeks ), $weeks );
	} elseif ( $diff < YEAR_IN_SECONDS && $diff >= MONTH_IN_SECONDS ) {
		$months = round( $diff / MONTH_IN_SECONDS );
		if ( $months <= 1 ) {
			$months = 1;
		}
		
		$since = sprintf( _n( '%s month', '%s months', $months ), $months );
	} elseif ( $diff >= YEAR_IN_SECONDS ) {
		$years = round( $diff / YEAR_IN_SECONDS );
		if ( $years <= 1 ) {
			$years = 1;
		}
		
		$since = sprintf( _n( '%s year', '%s years', $years ), $years );
	}

	
	return apply_filters( 'human_time_diff', $since, $diff, $from, $to );
}


function wp_trim_excerpt( $text = '', $post = null ) {
	$raw_excerpt = $text;
	if ( '' == $text ) {
		$post = get_post( $post );
		$text = get_the_content( '', false, $post );

		$text = strip_shortcodes( $text );
		$text = excerpt_remove_blocks( $text );

		
		$text = apply_filters( 'the_content', $text );
		$text = str_replace( ']]>', ']]&gt;', $text );

		
		$excerpt_length = intval( _x( '55', 'excerpt_length' ) );

		
		$excerpt_length = (int) apply_filters( 'excerpt_length', $excerpt_length );

		
		$excerpt_more = apply_filters( 'excerpt_more', ' ' . '[&hellip;]' );
		$text         = wp_trim_words( $text, $excerpt_length, $excerpt_more );
	}

	
	return apply_filters( 'wp_trim_excerpt', $text, $raw_excerpt );
}


function wp_trim_words( $text, $num_words = 55, $more = null ) {
	if ( null === $more ) {
		$more = __( '&hellip;' );
	}

	$original_text = $text;
	$text          = wp_strip_all_tags( $text );
	$num_words     = (int) $num_words;

	
	if ( strpos( _x( 'words', 'Word count type. Do not translate!' ), 'characters' ) === 0 && preg_match( '/^utf\-?8$/i', get_option( 'blog_charset' ) ) ) {
		$text = trim( preg_replace( "/[\n\r\t ]+/", ' ', $text ), ' ' );
		preg_match_all( '/./u', $text, $words_array );
		$words_array = array_slice( $words_array[0], 0, $num_words + 1 );
		$sep         = '';
	} else {
		$words_array = preg_split( "/[\n\r\t ]+/", $text, $num_words + 1, PREG_SPLIT_NO_EMPTY );
		$sep         = ' ';
	}

	if ( count( $words_array ) > $num_words ) {
		array_pop( $words_array );
		$text = implode( $sep, $words_array );
		$text = $text . $more;
	} else {
		$text = implode( $sep, $words_array );
	}

	
	return apply_filters( 'wp_trim_words', $text, $num_words, $more, $original_text );
}


function ent2ncr( $text ) {

	
	$filtered = apply_filters( 'pre_ent2ncr', null, $text );
	if ( null !== $filtered ) {
		return $filtered;
	}

	$to_ncr = array(
		'&quot;'     => '&
		'&amp;'      => '&
		'&lt;'       => '&
		'&gt;'       => '&
		'|'          => '&
		'&nbsp;'     => '&
		'&iexcl;'    => '&
		'&cent;'     => '&
		'&pound;'    => '&
		'&curren;'   => '&
		'&yen;'      => '&
		'&brvbar;'   => '&
		'&brkbar;'   => '&
		'&sect;'     => '&
		'&uml;'      => '&
		'&die;'      => '&
		'&copy;'     => '&
		'&ordf;'     => '&
		'&laquo;'    => '&
		'&not;'      => '&
		'&shy;'      => '&
		'&reg;'      => '&
		'&macr;'     => '&
		'&hibar;'    => '&
		'&deg;'      => '&
		'&plusmn;'   => '&
		'&sup2;'     => '&
		'&sup3;'     => '&
		'&acute;'    => '&
		'&micro;'    => '&
		'&para;'     => '&
		'&middot;'   => '&
		'&cedil;'    => '&
		'&sup1;'     => '&
		'&ordm;'     => '&
		'&raquo;'    => '&
		'&frac14;'   => '&
		'&frac12;'   => '&
		'&frac34;'   => '&
		'&iquest;'   => '&
		'&Agrave;'   => '&
		'&Aacute;'   => '&
		'&Acirc;'    => '&
		'&Atilde;'   => '&
		'&Auml;'     => '&
		'&Aring;'    => '&
		'&AElig;'    => '&
		'&Ccedil;'   => '&
		'&Egrave;'   => '&
		'&Eacute;'   => '&
		'&Ecirc;'    => '&
		'&Euml;'     => '&
		'&Igrave;'   => '&
		'&Iacute;'   => '&
		'&Icirc;'    => '&
		'&Iuml;'     => '&
		'&ETH;'      => '&
		'&Ntilde;'   => '&
		'&Ograve;'   => '&
		'&Oacute;'   => '&
		'&Ocirc;'    => '&
		'&Otilde;'   => '&
		'&Ouml;'     => '&
		'&times;'    => '&
		'&Oslash;'   => '&
		'&Ugrave;'   => '&
		'&Uacute;'   => '&
		'&Ucirc;'    => '&
		'&Uuml;'     => '&
		'&Yacute;'   => '&
		'&THORN;'    => '&
		'&szlig;'    => '&
		'&agrave;'   => '&
		'&aacute;'   => '&
		'&acirc;'    => '&
		'&atilde;'   => '&
		'&auml;'     => '&
		'&aring;'    => '&
		'&aelig;'    => '&
		'&ccedil;'   => '&
		'&egrave;'   => '&
		'&eacute;'   => '&
		'&ecirc;'    => '&
		'&euml;'     => '&
		'&igrave;'   => '&
		'&iacute;'   => '&
		'&icirc;'    => '&
		'&iuml;'     => '&
		'&eth;'      => '&
		'&ntilde;'   => '&
		'&ograve;'   => '&
		'&oacute;'   => '&
		'&ocirc;'    => '&
		'&otilde;'   => '&
		'&ouml;'     => '&
		'&divide;'   => '&
		'&oslash;'   => '&
		'&ugrave;'   => '&
		'&uacute;'   => '&
		'&ucirc;'    => '&
		'&uuml;'     => '&
		'&yacute;'   => '&
		'&thorn;'    => '&
		'&yuml;'     => '&
		'&OElig;'    => '&
		'&oelig;'    => '&
		'&Scaron;'   => '&
		'&scaron;'   => '&
		'&Yuml;'     => '&
		'&fnof;'     => '&
		'&circ;'     => '&
		'&tilde;'    => '&
		'&Alpha;'    => '&
		'&Beta;'     => '&
		'&Gamma;'    => '&
		'&Delta;'    => '&
		'&Epsilon;'  => '&
		'&Zeta;'     => '&
		'&Eta;'      => '&
		'&Theta;'    => '&
		'&Iota;'     => '&
		'&Kappa;'    => '&
		'&Lambda;'   => '&
		'&Mu;'       => '&
		'&Nu;'       => '&
		'&Xi;'       => '&
		'&Omicron;'  => '&
		'&Pi;'       => '&
		'&Rho;'      => '&
		'&Sigma;'    => '&
		'&Tau;'      => '&
		'&Upsilon;'  => '&
		'&Phi;'      => '&
		'&Chi;'      => '&
		'&Psi;'      => '&
		'&Omega;'    => '&
		'&alpha;'    => '&
		'&beta;'     => '&
		'&gamma;'    => '&
		'&delta;'    => '&
		'&epsilon;'  => '&
		'&zeta;'     => '&
		'&eta;'      => '&
		'&theta;'    => '&
		'&iota;'     => '&
		'&kappa;'    => '&
		'&lambda;'   => '&
		'&mu;'       => '&
		'&nu;'       => '&
		'&xi;'       => '&
		'&omicron;'  => '&
		'&pi;'       => '&
		'&rho;'      => '&
		'&sigmaf;'   => '&
		'&sigma;'    => '&
		'&tau;'      => '&
		'&upsilon;'  => '&
		'&phi;'      => '&
		'&chi;'      => '&
		'&psi;'      => '&
		'&omega;'    => '&
		'&thetasym;' => '&
		'&upsih;'    => '&
		'&piv;'      => '&
		'&ensp;'     => '&
		'&emsp;'     => '&
		'&thinsp;'   => '&
		'&zwnj;'     => '&
		'&zwj;'      => '&
		'&lrm;'      => '&
		'&rlm;'      => '&
		'&ndash;'    => '&
		'&mdash;'    => '&
		'&lsquo;'    => '&
		'&rsquo;'    => '&
		'&sbquo;'    => '&
		'&ldquo;'    => '&
		'&rdquo;'    => '&
		'&bdquo;'    => '&
		'&dagger;'   => '&
		'&Dagger;'   => '&
		'&bull;'     => '&
		'&hellip;'   => '&
		'&permil;'   => '&
		'&prime;'    => '&
		'&Prime;'    => '&
		'&lsaquo;'   => '&
		'&rsaquo;'   => '&
		'&oline;'    => '&
		'&frasl;'    => '&
		'&euro;'     => '&
		'&image;'    => '&
		'&weierp;'   => '&
		'&real;'     => '&
		'&trade;'    => '&
		'&alefsym;'  => '&
		'&crarr;'    => '&
		'&lArr;'     => '&
		'&uArr;'     => '&
		'&rArr;'     => '&
		'&dArr;'     => '&
		'&hArr;'     => '&
		'&forall;'   => '&
		'&part;'     => '&
		'&exist;'    => '&
		'&empty;'    => '&
		'&nabla;'    => '&
		'&isin;'     => '&
		'&notin;'    => '&
		'&ni;'       => '&
		'&prod;'     => '&
		'&sum;'      => '&
		'&minus;'    => '&
		'&lowast;'   => '&
		'&radic;'    => '&
		'&prop;'     => '&
		'&infin;'    => '&
		'&ang;'      => '&
		'&and;'      => '&
		'&or;'       => '&
		'&cap;'      => '&
		'&cup;'      => '&
		'&int;'      => '&
		'&there4;'   => '&
		'&sim;'      => '&
		'&cong;'     => '&
		'&asymp;'    => '&
		'&ne;'       => '&
		'&equiv;'    => '&
		'&le;'       => '&
		'&ge;'       => '&
		'&sub;'      => '&
		'&sup;'      => '&
		'&nsub;'     => '&
		'&sube;'     => '&
		'&supe;'     => '&
		'&oplus;'    => '&
		'&otimes;'   => '&
		'&perp;'     => '&
		'&sdot;'     => '&
		'&lceil;'    => '&
		'&rceil;'    => '&
		'&lfloor;'   => '&
		'&rfloor;'   => '&
		'&lang;'     => '&
		'&rang;'     => '&
		'&larr;'     => '&
		'&uarr;'     => '&
		'&rarr;'     => '&
		'&darr;'     => '&
		'&harr;'     => '&
		'&loz;'      => '&
		'&spades;'   => '&
		'&clubs;'    => '&
		'&hearts;'   => '&
		'&diams;'    => '&
	);

	return str_replace( array_keys( $to_ncr ), array_values( $to_ncr ), $text );
}


function format_for_editor( $text, $default_editor = null ) {
	if ( $text ) {
		$text = htmlspecialchars( $text, ENT_NOQUOTES, get_option( 'blog_charset' ) );
	}

	
	return apply_filters( 'format_for_editor', $text, $default_editor );
}


function _deep_replace( $search, $subject ) {
	$subject = (string) $subject;

	$count = 1;
	while ( $count ) {
		$subject = str_replace( $search, '', $subject, $count );
	}

	return $subject;
}


function esc_sql( $data ) {
	global $wpdb;
	return $wpdb->_escape( $data );
}


function esc_url( $url, $protocols = null, $_context = 'display' ) {
	$original_url = $url;

	if ( '' == $url ) {
		return $url;
	}

	$url = str_replace( ' ', '%20', ltrim( $url ) );
	$url = preg_replace( '|[^a-z0-9-~+_.?

	if ( '' === $url ) {
		return $url;
	}

	if ( 0 !== stripos( $url, 'mailto:' ) ) {
		$strip = array( '%0d', '%0a', '%0D', '%0A' );
		$url   = _deep_replace( $strip, $url );
	}

	$url = str_replace( ';
	
	if ( strpos( $url, ':' ) === false && ! in_array( $url[0], array( '/', '
		! preg_match( '/^[a-z0-9-]+?\.php/i', $url ) ) {
		$url = 'http:
	}

	
	if ( 'display' == $_context ) {
		$url = wp_kses_normalize_entities( $url );
		$url = str_replace( '&amp;', '&
		$url = str_replace( "'", '&
	}

	if ( ( false !== strpos( $url, '[' ) ) || ( false !== strpos( $url, ']' ) ) ) {

		$parsed = wp_parse_url( $url );
		$front  = '';

		if ( isset( $parsed['scheme'] ) ) {
			$front .= $parsed['scheme'] . ':
		} elseif ( '/' === $url[0] ) {
			$front .= '
		}

		if ( isset( $parsed['user'] ) ) {
			$front .= $parsed['user'];
		}

		if ( isset( $parsed['pass'] ) ) {
			$front .= ':' . $parsed['pass'];
		}

		if ( isset( $parsed['user'] ) || isset( $parsed['pass'] ) ) {
			$front .= '@';
		}

		if ( isset( $parsed['host'] ) ) {
			$front .= $parsed['host'];
		}

		if ( isset( $parsed['port'] ) ) {
			$front .= ':' . $parsed['port'];
		}

		$end_dirty = str_replace( $front, '', $url );
		$end_clean = str_replace( array( '[', ']' ), array( '%5B', '%5D' ), $end_dirty );
		$url       = str_replace( $end_dirty, $end_clean, $url );

	}

	if ( '/' === $url[0] ) {
		$good_protocol_url = $url;
	} else {
		if ( ! is_array( $protocols ) ) {
			$protocols = wp_allowed_protocols();
		}
		$good_protocol_url = wp_kses_bad_protocol( $url, $protocols );
		if ( strtolower( $good_protocol_url ) != strtolower( $url ) ) {
			return '';
		}
	}

	
	return apply_filters( 'clean_url', $good_protocol_url, $original_url, $_context );
}


function esc_url_raw( $url, $protocols = null ) {
	return esc_url( $url, $protocols, 'db' );
}


function htmlentities2( $myHTML ) {
	$translation_table              = get_html_translation_table( HTML_ENTITIES, ENT_QUOTES );
	$translation_table[ chr( 38 ) ] = '&';
	return preg_replace( '/&(?![A-Za-z]{0,4}\w{2,3};|
}


function esc_js( $text ) {
	$safe_text = wp_check_invalid_utf8( $text );
	$safe_text = _wp_specialchars( $safe_text, ENT_COMPAT );
	$safe_text = preg_replace( '/&
	$safe_text = str_replace( "\r", '', $safe_text );
	$safe_text = str_replace( "\n", '\\n', addslashes( $safe_text ) );
	
	return apply_filters( 'js_escape', $safe_text, $text );
}


function esc_html( $text ) {
	$safe_text = wp_check_invalid_utf8( $text );
	$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );
	
	return apply_filters( 'esc_html', $safe_text, $text );
}


function esc_attr( $text ) {
	$safe_text = wp_check_invalid_utf8( $text );
	$safe_text = _wp_specialchars( $safe_text, ENT_QUOTES );
	
	return apply_filters( 'attribute_escape', $safe_text, $text );
}


function esc_textarea( $text ) {
	$safe_text = htmlspecialchars( $text, ENT_QUOTES, get_option( 'blog_charset' ) );
	
	return apply_filters( 'esc_textarea', $safe_text, $text );
}


function tag_escape( $tag_name ) {
	$safe_tag = strtolower( preg_replace( '/[^a-zA-Z0-9_:]/', '', $tag_name ) );
	
	return apply_filters( 'tag_escape', $safe_tag, $tag_name );
}


function wp_make_link_relative( $link ) {
	return preg_replace( '|^(https?:)?
}


function sanitize_option( $option, $value ) {
	global $wpdb;

	$original_value = $value;
	$error          = '';

	switch ( $option ) {
		case 'admin_email':
		case 'new_admin_email':
			$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );
			if ( is_wp_error( $value ) ) {
				$error = $value->get_error_message();
			} else {
				$value = sanitize_email( $value );
				if ( ! is_email( $value ) ) {
					$error = __( 'The email address entered did not appear to be a valid email address. Please enter a valid email address.' );
				}
			}
			break;

		case 'thumbnail_size_w':
		case 'thumbnail_size_h':
		case 'medium_size_w':
		case 'medium_size_h':
		case 'medium_large_size_w':
		case 'medium_large_size_h':
		case 'large_size_w':
		case 'large_size_h':
		case 'mailserver_port':
		case 'comment_max_links':
		case 'page_on_front':
		case 'page_for_posts':
		case 'rss_excerpt_length':
		case 'default_category':
		case 'default_email_category':
		case 'default_link_category':
		case 'close_comments_days_old':
		case 'comments_per_page':
		case 'thread_comments_depth':
		case 'users_can_register':
		case 'start_of_week':
		case 'site_icon':
			$value = absint( $value );
			break;

		case 'posts_per_page':
		case 'posts_per_rss':
			$value = (int) $value;
			if ( empty( $value ) ) {
				$value = 1;
			}
			if ( $value < -1 ) {
				$value = abs( $value );
			}
			break;

		case 'default_ping_status':
		case 'default_comment_status':
			
			if ( $value == '0' || $value == '' ) {
				$value = 'closed';
			}
			break;

		case 'blogdescription':
		case 'blogname':
			$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );
			if ( $value !== $original_value ) {
				$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', wp_encode_emoji( $original_value ) );
			}

			if ( is_wp_error( $value ) ) {
				$error = $value->get_error_message();
			} else {
				$value = esc_html( $value );
			}
			break;

		case 'blog_charset':
			$value = preg_replace( '/[^a-zA-Z0-9_-]/', '', $value ); 
			break;

		case 'blog_public':
			
			if ( null === $value ) {
				$value = 1;
			} else {
				$value = intval( $value );
			}
			break;

		case 'date_format':
		case 'time_format':
		case 'mailserver_url':
		case 'mailserver_login':
		case 'mailserver_pass':
		case 'upload_path':
			$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );
			if ( is_wp_error( $value ) ) {
				$error = $value->get_error_message();
			} else {
				$value = strip_tags( $value );
				$value = wp_kses_data( $value );
			}
			break;

		case 'ping_sites':
			$value = explode( "\n", $value );
			$value = array_filter( array_map( 'trim', $value ) );
			$value = array_filter( array_map( 'esc_url_raw', $value ) );
			$value = implode( "\n", $value );
			break;

		case 'gmt_offset':
			$value = preg_replace( '/[^0-9:.-]/', '', $value ); 
			break;

		case 'siteurl':
			$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );
			if ( is_wp_error( $value ) ) {
				$error = $value->get_error_message();
			} else {
				if ( preg_match( '
					$value = esc_url_raw( $value );
				} else {
					$error = __( 'The WordPress address you entered did not appear to be a valid URL. Please enter a valid URL.' );
				}
			}
			break;

		case 'home':
			$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );
			if ( is_wp_error( $value ) ) {
				$error = $value->get_error_message();
			} else {
				if ( preg_match( '
					$value = esc_url_raw( $value );
				} else {
					$error = __( 'The Site address you entered did not appear to be a valid URL. Please enter a valid URL.' );
				}
			}
			break;

		case 'WPLANG':
			$allowed = get_available_languages();
			if ( ! is_multisite() && defined( 'WPLANG' ) && '' !== WPLANG && 'en_US' !== WPLANG ) {
				$allowed[] = WPLANG;
			}
			if ( ! in_array( $value, $allowed ) && ! empty( $value ) ) {
				$value = get_option( $option );
			}
			break;

		case 'illegal_names':
			$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );
			if ( is_wp_error( $value ) ) {
				$error = $value->get_error_message();
			} else {
				if ( ! is_array( $value ) ) {
					$value = explode( ' ', $value );
				}

				$value = array_values( array_filter( array_map( 'trim', $value ) ) );

				if ( ! $value ) {
					$value = '';
				}
			}
			break;

		case 'limited_email_domains':
		case 'banned_email_domains':
			$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );
			if ( is_wp_error( $value ) ) {
				$error = $value->get_error_message();
			} else {
				if ( ! is_array( $value ) ) {
					$value = explode( "\n", $value );
				}

				$domains = array_values( array_filter( array_map( 'trim', $value ) ) );
				$value   = array();

				foreach ( $domains as $domain ) {
					if ( ! preg_match( '/(--|\.\.)/', $domain ) && preg_match( '|^([a-zA-Z0-9-\.])+$|', $domain ) ) {
						$value[] = $domain;
					}
				}
				if ( ! $value ) {
					$value = '';
				}
			}
			break;

		case 'timezone_string':
			$allowed_zones = timezone_identifiers_list();
			if ( ! in_array( $value, $allowed_zones ) && ! empty( $value ) ) {
				$error = __( 'The timezone you have entered is not valid. Please select a valid timezone.' );
			}
			break;

		case 'permalink_structure':
		case 'category_base':
		case 'tag_base':
			$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );
			if ( is_wp_error( $value ) ) {
				$error = $value->get_error_message();
			} else {
				$value = esc_url_raw( $value );
				$value = str_replace( 'http:
			}

			if ( 'permalink_structure' === $option && '' !== $value && ! preg_match( '/%[^\/%]+%/', $value ) ) {
				$error = sprintf(
					
					__( 'A structure tag is required when using custom permalinks. <a href="%s">Learn more</a>' ),
					__( 'https:
				);
			}
			break;

		case 'default_role':
			if ( ! get_role( $value ) && get_role( 'subscriber' ) ) {
				$value = 'subscriber';
			}
			break;

		case 'moderation_keys':
		case 'blacklist_keys':
			$value = $wpdb->strip_invalid_text_for_column( $wpdb->options, 'option_value', $value );
			if ( is_wp_error( $value ) ) {
				$error = $value->get_error_message();
			} else {
				$value = explode( "\n", $value );
				$value = array_filter( array_map( 'trim', $value ) );
				$value = array_unique( $value );
				$value = implode( "\n", $value );
			}
			break;
	}

	if ( ! empty( $error ) ) {
		$value = get_option( $option );
		if ( function_exists( 'add_settings_error' ) ) {
			add_settings_error( $option, "invalid_{$option}", $error );
		}
	}

	
	return apply_filters( "sanitize_option_{$option}", $value, $option, $original_value );
}


function map_deep( $value, $callback ) {
	if ( is_array( $value ) ) {
		foreach ( $value as $index => $item ) {
			$value[ $index ] = map_deep( $item, $callback );
		}
	} elseif ( is_object( $value ) ) {
		$object_vars = get_object_vars( $value );
		foreach ( $object_vars as $property_name => $property_value ) {
			$value->$property_name = map_deep( $property_value, $callback );
		}
	} else {
		$value = call_user_func( $callback, $value );
	}

	return $value;
}


function wp_parse_str( $string, &$array ) {
	parse_str( $string, $array );

	
	$array = apply_filters( 'wp_parse_str', $array );
}


function wp_pre_kses_less_than( $text ) {
	return preg_replace_callback( '%<[^>]*?((?=<)|>|$)%', 'wp_pre_kses_less_than_callback', $text );
}


function wp_pre_kses_less_than_callback( $matches ) {
	if ( false === strpos( $matches[0], '>' ) ) {
		return esc_html( $matches[0] );
	}
	return $matches[0];
}


function wp_pre_kses_block_attributes( $string, $allowed_html, $allowed_protocols ) {
	
	remove_filter( 'pre_kses', 'wp_pre_kses_block_attributes', 10 );
	$string = filter_block_content( $string, $allowed_html, $allowed_protocols );
	add_filter( 'pre_kses', 'wp_pre_kses_block_attributes', 10, 3 );

	return $string;
}


function wp_sprintf( $pattern, ...$args ) {
	$len       = strlen( $pattern );
	$start     = 0;
	$result    = '';
	$arg_index = 0;
	while ( $len > $start ) {
		
		if ( strlen( $pattern ) - 1 == $start ) {
			$result .= substr( $pattern, -1 );
			break;
		}

		
		if ( substr( $pattern, $start, 2 ) == '%%' ) {
			$start  += 2;
			$result .= '%';
			continue;
		}

		
		$end = strpos( $pattern, '%', $start + 1 );
		if ( false === $end ) {
			$end = $len;
		}
		$fragment = substr( $pattern, $start, $end - $start );

		
		if ( $pattern[ $start ] == '%' ) {
			
			if ( preg_match( '/^%(\d+)\$/', $fragment, $matches ) ) {
				$index    = $matches[1] - 1; 
				$arg      = isset( $args[ $index ] ) ? $args[ $index ] : '';
				$fragment = str_replace( "%{$matches[1]}$", '%', $fragment );
			} else {
				$arg = isset( $args[ $arg_index ] ) ? $args[ $arg_index ] : '';
				++$arg_index;
			}

			
			$_fragment = apply_filters( 'wp_sprintf', $fragment, $arg );
			if ( $_fragment != $fragment ) {
				$fragment = $_fragment;
			} else {
				$fragment = sprintf( $fragment, strval( $arg ) );
			}
		}

		
		$result .= $fragment;
		$start   = $end;
	}
	return $result;
}


function wp_sprintf_l( $pattern, $args ) {
	
	if ( substr( $pattern, 0, 2 ) != '%l' ) {
		return $pattern;
	}

	
	if ( empty( $args ) ) {
		return '';
	}

	
	$l = apply_filters(
		'wp_sprintf_l',
		array(
			
			'between'          => sprintf( __( '%1$s, %2$s' ), '', '' ),
			
			'between_last_two' => sprintf( __( '%1$s, and %2$s' ), '', '' ),
			
			'between_only_two' => sprintf( __( '%1$s and %2$s' ), '', '' ),
		)
	);

	$args   = (array) $args;
	$result = array_shift( $args );
	if ( count( $args ) == 1 ) {
		$result .= $l['between_only_two'] . array_shift( $args );
	}
	
	$i = count( $args );
	while ( $i ) {
		$arg = array_shift( $args );
		$i--;
		if ( 0 == $i ) {
			$result .= $l['between_last_two'] . $arg;
		} else {
			$result .= $l['between'] . $arg;
		}
	}
	return $result . substr( $pattern, 2 );
}


function wp_html_excerpt( $str, $count, $more = null ) {
	if ( null === $more ) {
		$more = '';
	}
	$str     = wp_strip_all_tags( $str, true );
	$excerpt = mb_substr( $str, 0, $count );
	
	$excerpt = preg_replace( '/&[^;\s]{0,6}$/', '', $excerpt );
	if ( $str != $excerpt ) {
		$excerpt = trim( $excerpt ) . $more;
	}
	return $excerpt;
}


function links_add_base_url( $content, $base, $attrs = array( 'src', 'href' ) ) {
	global $_links_add_base;
	$_links_add_base = $base;
	$attrs           = implode( '|', (array) $attrs );
	return preg_replace_callback( "!($attrs)=(['\"])(.+?)\\2!i", '_links_add_base', $content );
}


function _links_add_base( $m ) {
	global $_links_add_base;
	
	return $m[1] . '=' . $m[2] .
		( preg_match( '
			$m[3] :
			WP_Http::make_absolute_url( $m[3], $_links_add_base )
		)
		. $m[2];
}


function links_add_target( $content, $target = '_blank', $tags = array( 'a' ) ) {
	global $_links_add_target;
	$_links_add_target = $target;
	$tags              = implode( '|', (array) $tags );
	return preg_replace_callback( "!<($tags)([^>]*)>!i", '_links_add_target', $content );
}


function _links_add_target( $m ) {
	global $_links_add_target;
	$tag  = $m[1];
	$link = preg_replace( '|( target=([\'"])(.*?)\2)|i', '', $m[2] );
	return '<' . $tag . $link . ' target="' . esc_attr( $_links_add_target ) . '">';
}


function normalize_whitespace( $str ) {
	$str = trim( $str );
	$str = str_replace( "\r", "\n", $str );
	$str = preg_replace( array( '/\n+/', '/[ \t]+/' ), array( "\n", ' ' ), $str );
	return $str;
}


function wp_strip_all_tags( $string, $remove_breaks = false ) {
	$string = preg_replace( '@<(script|style)[^>]*?>.*?</\\1>@si', '', $string );
	$string = strip_tags( $string );

	if ( $remove_breaks ) {
		$string = preg_replace( '/[\r\n\t ]+/', ' ', $string );
	}

	return trim( $string );
}


function sanitize_text_field( $str ) {
	$filtered = _sanitize_text_fields( $str, false );

	
	return apply_filters( 'sanitize_text_field', $filtered, $str );
}


function sanitize_textarea_field( $str ) {
	$filtered = _sanitize_text_fields( $str, true );

	
	return apply_filters( 'sanitize_textarea_field', $filtered, $str );
}


function _sanitize_text_fields( $str, $keep_newlines = false ) {
	if ( is_object( $str ) || is_array( $str ) ) {
		return '';
	}

	$str = (string) $str;

	$filtered = wp_check_invalid_utf8( $str );

	if ( strpos( $filtered, '<' ) !== false ) {
		$filtered = wp_pre_kses_less_than( $filtered );
		
		$filtered = wp_strip_all_tags( $filtered, false );

		
		
		$filtered = str_replace( "<\n", "&lt;\n", $filtered );
	}

	if ( ! $keep_newlines ) {
		$filtered = preg_replace( '/[\r\n\t ]+/', ' ', $filtered );
	}
	$filtered = trim( $filtered );

	$found = false;
	while ( preg_match( '/%[a-f0-9]{2}/i', $filtered, $match ) ) {
		$filtered = str_replace( $match[0], '', $filtered );
		$found    = true;
	}

	if ( $found ) {
		
		$filtered = trim( preg_replace( '/ +/', ' ', $filtered ) );
	}

	return $filtered;
}


function wp_basename( $path, $suffix = '' ) {
	return urldecode( basename( str_replace( array( '%2F', '%5C' ), '/', urlencode( $path ) ), $suffix ) );
}



function capital_P_dangit( $text ) {
	
	$current_filter = current_filter();
	if ( 'the_title' === $current_filter || 'wp_title' === $current_filter ) {
		return str_replace( 'Wordpress', 'WordPress', $text );
	}
	
	static $dblq = false;
	if ( false === $dblq ) {
		$dblq = _x( '&
	}
	return str_replace(
		array( ' Wordpress', '&
		array( ' WordPress', '&
		$text
	);
}



function sanitize_mime_type( $mime_type ) {
	$sani_mime_type = preg_replace( '/[^-+*.a-zA-Z0-9\/]/', '', $mime_type );
	
	return apply_filters( 'sanitize_mime_type', $sani_mime_type, $mime_type );
}


function sanitize_trackback_urls( $to_ping ) {
	$urls_to_ping = preg_split( '/[\r\n\t ]/', trim( $to_ping ), -1, PREG_SPLIT_NO_EMPTY );
	foreach ( $urls_to_ping as $k => $url ) {
		if ( ! preg_match( '
			unset( $urls_to_ping[ $k ] );
		}
	}
	$urls_to_ping = array_map( 'esc_url_raw', $urls_to_ping );
	$urls_to_ping = implode( "\n", $urls_to_ping );
	
	return apply_filters( 'sanitize_trackback_urls', $urls_to_ping, $to_ping );
}


function wp_slash( $value ) {
	if ( is_array( $value ) ) {
		foreach ( $value as $k => $v ) {
			if ( is_array( $v ) ) {
				$value[ $k ] = wp_slash( $v );
			} else {
				$value[ $k ] = addslashes( $v );
			}
		}
	} else {
		$value = addslashes( $value );
	}

	return $value;
}


function wp_unslash( $value ) {
	return stripslashes_deep( $value );
}


function wp_slash_strings_only( $value ) {
	return map_deep( $value, 'addslashes_strings_only' );
}


function addslashes_strings_only( $value ) {
	return is_string( $value ) ? addslashes( $value ) : $value;
}


function get_url_in_content( $content ) {
	if ( empty( $content ) ) {
		return false;
	}

	if ( preg_match( '/<a\s[^>]*?href=([\'"])(.+?)\1/is', $content, $matches ) ) {
		return esc_url_raw( $matches[2] );
	}

	return false;
}


function wp_spaces_regexp() {
	static $spaces = '';

	if ( empty( $spaces ) ) {
		
		$spaces = apply_filters( 'wp_spaces_regexp', '[\r\n\t ]|\xC2\xA0|&nbsp;' );
	}

	return $spaces;
}


function print_emoji_styles() {
	static $printed = false;

	if ( $printed ) {
		return;
	}

	$printed = true;

	$type_attr = current_theme_supports( 'html5', 'style' ) ? '' : ' type="text/css"';
	?>
<style<?php  ?>>
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<?php
}


function print_emoji_detection_script() {
	static $printed = false;

	if ( $printed ) {
		return;
	}

	$printed = true;

	_print_emoji_detection_script();
}


function _print_emoji_detection_script() {
	$settings = array(
		
		'baseUrl' => apply_filters( 'emoji_url', 'https:

		
		'ext'     => apply_filters( 'emoji_ext', '.png' ),

		
		'svgUrl'  => apply_filters( 'emoji_svg_url', 'https:

		
		'svgExt'  => apply_filters( 'emoji_svg_ext', '.svg' ),
	);

	$version   = 'ver=' . get_bloginfo( 'version' );
	$type_attr = current_theme_supports( 'html5', 'style' ) ? '' : ' type="text/javascript"';

	if ( SCRIPT_DEBUG ) {
		$settings['source'] = array(
			
			'wpemoji' => apply_filters( 'script_loader_src', includes_url( "js/wp-emoji.js?$version" ), 'wpemoji' ),
			
			'twemoji' => apply_filters( 'script_loader_src', includes_url( "js/twemoji.js?$version" ), 'twemoji' ),
		);

		?>
		<script<?php  ?>>
			window._wpemojiSettings = <?php  ?>;
			<?php readfile( ABSPATH . WPINC . '/js/wp-emoji-loader.js' ); ?>
		</script>
		<?php
	} else {
		$settings['source'] = array(
			
			'concatemoji' => apply_filters( 'script_loader_src', includes_url( "js/wp-emoji-release.min.js?$version" ), 'concatemoji' ),
		);

		
		?>
		<script<?php  ?>>
			window._wpemojiSettings = <?php  ?>;
		</script>
		<?php
	}
}


function wp_encode_emoji( $content ) {
	$emoji = _wp_emoji_list( 'partials' );

	foreach ( $emoji as $emojum ) {
		$emoji_char = html_entity_decode( $emojum );
		if ( false !== strpos( $content, $emoji_char ) ) {
			$content = preg_replace( "/$emoji_char/", $emojum, $content );
		}
	}

	return $content;
}


function wp_staticize_emoji( $text ) {
	if ( false === strpos( $text, '&
		if ( ( function_exists( 'mb_check_encoding' ) && mb_check_encoding( $text, 'ASCII' ) ) || ! preg_match( '/[^\x00-\x7F]/', $text ) ) {
			
			return $text;
		} else {
			$encoded_text = wp_encode_emoji( $text );
			if ( $encoded_text === $text ) {
				return $encoded_text;
			}

			$text = $encoded_text;
		}
	}

	$emoji = _wp_emoji_list( 'entities' );

	
	$possible_emoji = array();
	foreach ( $emoji as $emojum ) {
		if ( false !== strpos( $text, $emojum ) ) {
			$possible_emoji[ $emojum ] = html_entity_decode( $emojum );
		}
	}

	if ( ! $possible_emoji ) {
		return $text;
	}

	
	$cdn_url = apply_filters( 'emoji_url', 'https:

	
	$ext = apply_filters( 'emoji_ext', '.png' );

	$output = '';
	
	$textarr = preg_split( '/(<.*>)/U', $text, -1, PREG_SPLIT_DELIM_CAPTURE );
	$stop    = count( $textarr );

	
	$tags_to_ignore       = 'code|pre|style|script|textarea';
	$ignore_block_element = '';

	for ( $i = 0; $i < $stop; $i++ ) {
		$content = $textarr[ $i ];

		
		if ( '' == $ignore_block_element && preg_match( '/^<(' . $tags_to_ignore . ')>/', $content, $matches ) ) {
			$ignore_block_element = $matches[1];
		}

		
		if ( '' == $ignore_block_element && strlen( $content ) > 0 && '<' != $content[0] && false !== strpos( $content, '&
			foreach ( $possible_emoji as $emojum => $emoji_char ) {
				if ( false === strpos( $content, $emojum ) ) {
					continue;
				}

				$file = str_replace( ';&
				$file = str_replace( array( '&

				$entity = sprintf( '<img src="%s" alt="%s" class="wp-smiley" style="height: 1em; max-height: 1em;" />', $cdn_url . $file . $ext, $emoji_char );

				$content = str_replace( $emojum, $entity, $content );
			}
		}

		
		if ( '' != $ignore_block_element && '</' . $ignore_block_element . '>' == $content ) {
			$ignore_block_element = '';
		}

		$output .= $content;
	}

	
	$output = str_replace( '&

	return $output;
}


function wp_staticize_emoji_for_email( $mail ) {
	if ( ! isset( $mail['message'] ) ) {
		return $mail;
	}

	
	$headers = array();
	if ( isset( $mail['headers'] ) ) {
		if ( is_array( $mail['headers'] ) ) {
			$headers = $mail['headers'];
		} else {
			$headers = explode( "\n", str_replace( "\r\n", "\n", $mail['headers'] ) );
		}
	}

	foreach ( $headers as $header ) {
		if ( strpos( $header, ':' ) === false ) {
			continue;
		}

		
		list( $name, $content ) = explode( ':', trim( $header ), 2 );

		
		$name    = trim( $name );
		$content = trim( $content );

		if ( 'content-type' === strtolower( $name ) ) {
			if ( strpos( $content, ';' ) !== false ) {
				list( $type, $charset ) = explode( ';', $content );
				$content_type           = trim( $type );
			} else {
				$content_type = trim( $content );
			}
			break;
		}
	}

	
	if ( ! isset( $content_type ) ) {
		$content_type = 'text/plain';
	}

	
	$content_type = apply_filters( 'wp_mail_content_type', $content_type );

	if ( 'text/html' === $content_type ) {
		$mail['message'] = wp_staticize_emoji( $mail['message'] );
	}

	return $mail;
}


function _wp_emoji_list( $type = 'entities' ) {
	

	
	$entities = array( '&
	$partials = array( '&
	

	if ( 'entities' === $type ) {
		return $entities;
	}

	return $partials;
}


function url_shorten( $url, $length = 35 ) {
	$stripped  = str_replace( array( 'https:
	$short_url = untrailingslashit( $stripped );

	if ( strlen( $short_url ) > $length ) {
		$short_url = substr( $short_url, 0, $length - 3 ) . '&hellip;';
	}
	return $short_url;
}


function sanitize_hex_color( $color ) {
	if ( '' === $color ) {
		return '';
	}

	
	if ( preg_match( '|^
		return $color;
	}
}


function sanitize_hex_color_no_hash( $color ) {
	$color = ltrim( $color, '

	if ( '' === $color ) {
		return '';
	}

	return sanitize_hex_color( '
}


function maybe_hash_hex_color( $color ) {
	$unhashed = sanitize_hex_color_no_hash( $color );
	if ( $unhashed ) {
		return '
	}

	return $color;
}
