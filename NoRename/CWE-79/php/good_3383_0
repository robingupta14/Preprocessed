<?php






class TikiFilter_PreventXss implements Zend\Filter\FilterInterface
{
	function filter( $value )
	{
		
		if ( ctype_alnum($value) || empty($value) )
			return $value;
		else
			return $this->RemoveXSS($value);
	}

	
	function RemoveXSS($val)
	{
		static $ra_as_tag_only = NULL;
		static $ra_as_attribute = NULL;
		static $ra_as_content = NULL;
		static $ra_javascript = NULL;

		
		if ( $ra_as_tag_only == NULL ) {
			$ra_as_tag_only = array(
                'style',
                'script',
                'embed',
                'object',
                'applet',
                'meta',
                'iframe',
                'frame',    
                'ilayer',
                'layer',
                'bgsound',
                'base',
                'xml',
                'import',
                'link',
                'audio',
                'video'
			);


			
			$ra_as_attribute = array(
                'onabort',
                'onactivate',
                'onafter',
                'onbefore',
                'onbegin',
                'onblur',
                'onbounce',
                'onbroadcast',
                'oncellchange',
                'onchange',
                'onclick',
                'onclose',
                'oncommand',
                'oncontextmenu',
                'oncontrolselect',
                'oncopy',
                'oncut',
                'ondata',
                'ondblclick',
                'ondeactivate',
                'ondrag',
                'ondrop',
                'onend',
                'onerror',
                'onfilterchange',
                'onfinish',
                'onfocus',
                'ongotpointer',
                'onhashchange',
                'onhelp',
                'oninput',
                'oninvalid',
                'onkey',
                'onlayoutcomplete',
                'onload',
                'onlosecapture',
                'onlostpointer',
                'onmedia',
                'onmessage',
                'onmouse',
                'onmove',
                'onoffline',
                'ononline',
                'onoutofsync',
                'onover',
                'onpage',
                'onpaste',
                'onpause',
                'onpointer',
                'onpopstate',
                'onprogress',
                'onpropertychange',
                'onreadystatechange',
                'onredo',
                'onrepeat',
                'onreset',
                'onresize',
                'onresume',
                'onreverse',
                'onrow',
                'onunder',
                'onscroll',
                'onseek',
                'onsearch',
                'onselect',
                'onstart',
                'onshow',
                'onstop',
                'onstorage',
                'onsyncrestored',
                'onsubmit',
                'ontimeerror',
                'ontoggle',
                'ontouch',
                'ontrackchange',
                'onundo',
                'onunload',
                'onurlflip',
                'onwheel',
                'onpopup',
                'codebase',
                'dynsrc',
                'lowsrc',
                'xmlns'
			);

			$ra_as_content = array('vbscript', 'eval');
			$ra_javascript = array('javascript');
	
		}

		
		while ( $this->RemoveXSSchars($val)
			|| $this->RemoveXSSregexp($ra_as_tag_only, $val, '(\<|\[\\\\xC0\]\[\\\\xBC\])\??')
			|| $this->RemoveXSSregexp($ra_as_attribute, $val)
			|| $this->RemoveXSSregexp($ra_as_content, $val, '[\.\\\\+\*\?\[\^\]\$\(\)\{\}\=\!\<\|\:;\-\/`
			|| $this->RemoveXSSregexp($ra_javascript, $val, '', ':', true)
	
		);

		return $val;
	}

	function RemoveXSSchars(&$val)
	{
		static $patterns = NULL;
		static $replacements = NULL;
		$val_before = $val;
		$found = true;

		if ( $patterns == NULL ) {
			$patterns = array();
			$replacements = array();

			
			
			
			
			$patterns[] = '/([\x00-\x08\x0b-\x0c\x0e-\x19])/';
			$replacements[] = '';

			
			
			
			
			$search = 'abcdefghijklmnopqrstuvwxyz';
			$search .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
			$search .= '1234567890!@
			$search .= '~`";:?+/={}[]-_|\'\\';
			for ($i = 0, $istrlen_search = strlen($search); $i < $istrlen_search; $i++) {
				
				
				
				$patterns[] = '/(&
				$replacements[] = $search[$i];
				
				
				$patterns[] = '/(&
				$replacements[] = $search[$i];
			}
		}
		$val = preg_replace($patterns, $replacements, $val);
		if ($val_before == $val) {
			
			$found = false;
		}
		return $found;
	}

	function RemoveXSSregexp(&$ra, &$val, $prefix = '', $suffix = '', $allow_spaces = false)
	{
		$val_before = $val;
		$found = true;
		$patterns = array();
		$replacements = array();

		$pattern_sep = '('
			.'&
			.'|&
			.'|(?ms)(\/\*.*?\*\/|\<\!\-\-.*?\-\-\>)'
			.'|(\<\!\[CDATA\[|\]\]\>)'
			.'|\\\\?'
			.( $allow_spaces ? '|\s' : '' )
		.')*';

		$pattern_start = '/';
		if ( $prefix != '' ) {
			$pattern_start .= '(' . $prefix . '\s*' . $pattern_sep . ')';
		}

		$pattern_end = '/i';
		if ( $suffix != '' ) {
			if ( $suffix == '=' || $suffix == ':' ) {
				$replacement_end = $suffix;
				$pattern_end = '(' . $pattern_sep . '\s*' . $suffix . ')' . $pattern_end;
			} else {
				$replacement_end = '';
				$pattern_end = $suffix . $pattern_end;
			}
		} else {
			$replacement_end = '';
		}

		for ($i = 0, $isizeof_ra = count($ra); $i < $isizeof_ra; $i++) {
			$pattern = $pattern_start;
			for ($j = 0, $jstrlen_rai = strlen($ra[$i]); $j < $jstrlen_rai; $j++) {
				if ($j > 0) {
					$pattern .= $pattern_sep;
				}
				$pattern .= $ra[$i][$j];
			}
			$pattern .= $pattern_end;
			$replacement = ( $prefix != '' ) ? '\\1' : '';
			
			$replacement .= substr($ra[$i], 0, 2).'<x>'.substr($ra[$i], 2);
			$patterns[] = $pattern;
			$replacements[] = $replacement.$replacement_end;
		}
		
		$val = preg_replace($patterns, $replacements, $val);

		if ($val === null) {
			Feedback::error(tr('Filter error: "%0"', 
				array_flip(get_defined_constants(true)['pcre'])[preg_last_error()]), 'session');
		}
		if ($val_before == $val) {
			
			$found = false;
		}

		return $found;
	}
}
