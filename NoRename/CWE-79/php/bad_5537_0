<?php



class OC_Helper {
	private static $mimetypes=array();
	private static $tmpFiles=array();

	
	public static function linkTo( $app, $file, $args = array() ) {
		if( $app != '' ) {
			$app_path = OC_App::getAppPath($app);
			
			if( $app_path && file_exists( $app_path.'/'.$file )) {
				if(substr($file, -3) == 'php' || substr($file, -3) == 'css') {
					$urlLinkTo =  OC::$WEBROOT . '/?app=' . $app;
					$urlLinkTo .= ($file!='index.php')?'&getfile=' . rawurlencode($file):'';
				}else{
					$urlLinkTo =  OC_App::getAppWebPath($app) . '/' . $file;
				}
			}
			else{
				$urlLinkTo =  OC::$WEBROOT . '/' . $app . '/' . $file;
			}
		}
		else{
			if( file_exists( OC::$SERVERROOT . '/core/'. $file )) {
				$urlLinkTo =  OC::$WEBROOT . '/core/'.$file;
			}
			else{
				$urlLinkTo =  OC::$WEBROOT . '/'.$file;
			}
		}

		if (!empty($args)) {
			$urlLinkTo .= '?';
			foreach($args as $k => $v) {
				$urlLinkTo .= '&'.$k.'='.rawurlencode($v);
			}
		}

		return $urlLinkTo;
	}

	
	public static function linkToAbsolute( $app, $file, $args = array() ) {
		$urlLinkTo = self::linkTo( $app, $file, $args );
		return self::makeURLAbsolute($urlLinkTo);
	}

	
	public static function makeURLAbsolute( $url )
	{
		return OC_Request::serverProtocol(). ':
	}

	
	public static function linkToRemoteBase( $service ) {
		return self::linkTo( '', 'remote.php') . '/' . $service;
	}

	
	public static function linkToRemote( $service, $add_slash = true ) {
		return self::makeURLAbsolute(self::linkToRemoteBase($service)) . (($add_slash && $service[strlen($service)-1]!='/')?'/':'');
	}

	
	public static function linkToPublic($service, $add_slash = false) {
		return self::linkToAbsolute( '', 'public.php') . '?service=' . $service . (($add_slash && $service[strlen($service)-1]!='/')?'/':'');
	}

	
	public static function imagePath( $app, $image ) {
		
		$theme=OC_Config::getValue( "theme" );

		
		if( file_exists( OC::$SERVERROOT."/themes/$theme/apps/$app/img/$image" )) {
			return OC::$WEBROOT."/themes/$theme/apps/$app/img/$image";
		}elseif( file_exists(OC_App::getAppPath($app)."/img/$image" )) {
			return OC_App::getAppWebPath($app)."/img/$image";
		}elseif( !empty( $app ) and file_exists( OC::$SERVERROOT."/themes/$theme/$app/img/$image" )) {
			return OC::$WEBROOT."/themes/$theme/$app/img/$image";
		}elseif( !empty( $app ) and file_exists( OC::$SERVERROOT."/$app/img/$image" )) {
			return OC::$WEBROOT."/$app/img/$image";
		}elseif( file_exists( OC::$SERVERROOT."/themes/$theme/core/img/$image" )) {
			return OC::$WEBROOT."/themes/$theme/core/img/$image";
		}elseif( file_exists( OC::$SERVERROOT."/core/img/$image" )) {
			return OC::$WEBROOT."/core/img/$image";
		}else{
			echo('image not found: image:'.$image.' webroot:'.OC::$WEBROOT.' serverroot:'.OC::$SERVERROOT);
			die();
		}
	}

	
	public static function mimetypeIcon( $mimetype ) {
		$alias=array('application/xml'=>'code/xml');
		if(isset($alias[$mimetype])) {
			$mimetype=$alias[$mimetype];
		}
		
		$mimetype = str_replace( "/", "-", $mimetype );

		
		if( $mimetype == "dir" ) {
			return OC::$WEBROOT."/core/img/filetypes/folder.png";
		}

		
		if( file_exists( OC::$SERVERROOT."/core/img/filetypes/$mimetype.png" )) {
			return OC::$WEBROOT."/core/img/filetypes/$mimetype.png";
		}
		
		$mimetype=substr($mimetype,0,strpos($mimetype,'-'));
		if( file_exists( OC::$SERVERROOT."/core/img/filetypes/$mimetype.png" )) {
			return OC::$WEBROOT."/core/img/filetypes/$mimetype.png";
		}
		else{
			return OC::$WEBROOT."/core/img/filetypes/file.png";
		}
	}

	
	public static function humanFileSize( $bytes ) {
		if( $bytes < 1024 ) {
			return "$bytes B";
		}
		$bytes = round( $bytes / 1024, 1 );
		if( $bytes < 1024 ) {
			return "$bytes kB";
		}
		$bytes = round( $bytes / 1024, 1 );
		if( $bytes < 1024 ) {
			return "$bytes MB";
		}

		
		$bytes = round( $bytes / 1024, 1 );
		return "$bytes GB";
	}

	
	public static function computerFileSize( $str ) {
		$str=strtolower($str);

		$bytes_array = array(
			'b' => 1,
			'k' => 1024,
			'kb' => 1024,
			'mb' => 1048576,
			'm'  => 1048576,
			'gb' => 1073741824,
			'g'  => 1073741824,
			'tb' => 1099511627776,
			't'  => 1099511627776,
			'pb' => 1125899906842624,
			'p'  => 1125899906842624,
		);

		$bytes = floatval($str);

		if (preg_match('
			$bytes *= $bytes_array[$matches[1]];
		}

		$bytes = round($bytes, 2);

		return $bytes;
	}

	
	static function chmodr($path, $filemode) {
		if (!is_dir($path))
			return chmod($path, $filemode);
		$dh = opendir($path);
		while (($file = readdir($dh)) !== false) {
			if($file != '.' && $file != '..') {
				$fullpath = $path.'/'.$file;
				if(is_link($fullpath))
					return FALSE;
				elseif(!is_dir($fullpath) && !@chmod($fullpath, $filemode))
						return FALSE;
				elseif(!self::chmodr($fullpath, $filemode))
					return FALSE;
			}
		}
		closedir($dh);
		if(@chmod($path, $filemode))
			return TRUE;
		else
			return FALSE;
	}

	
	static function copyr($src, $dest) {
		if(is_dir($src)) {
			if(!is_dir($dest)) {
				mkdir($dest);
			}
			$files = scandir($src);
			foreach ($files as $file) {
				if ($file != "." && $file != "..") {
					self::copyr("$src/$file", "$dest/$file");
				}
			}
		}elseif(file_exists($src) && !OC_Filesystem::isFileBlacklisted($src)) {
			copy($src, $dest);
		}
	}

	
	static function rmdirr($dir) {
		if(is_dir($dir)) {
			$files=scandir($dir);
			foreach($files as $file) {
				if ($file != "." && $file != "..") {
					self::rmdirr("$dir/$file");
				}
			}
			rmdir($dir);
		}elseif(file_exists($dir)) {
			unlink($dir);
		}
		if(file_exists($dir)) {
			return false;
		}else{
			return true;
		}
	}

	
	static function getMimeType($path) {
		$isWrapped=(strpos($path,':

		if (@is_dir($path)) {
			
			return "httpd/unix-directory";
		}

		if(strpos($path,'.')) {
			
			if(!self::$mimetypes || self::$mimetypes != include('mimetypes.list.php')) {
				self::$mimetypes=include('mimetypes.list.php');
			}
			$extension=strtolower(strrchr(basename($path), "."));
			$extension=substr($extension,1);
			$mimeType=(isset(self::$mimetypes[$extension]))?self::$mimetypes[$extension]:'application/octet-stream';
		}else{
			$mimeType='application/octet-stream';
		}

		if($mimeType=='application/octet-stream' and function_exists('finfo_open') and function_exists('finfo_file') and $finfo=finfo_open(FILEINFO_MIME)) {
			$info = @strtolower(finfo_file($finfo,$path));
			if($info) {
				$mimeType=substr($info,0,strpos($info,';'));
			}
			finfo_close($finfo);
		}
		if (!$isWrapped and $mimeType=='application/octet-stream' && function_exists("mime_content_type")) {
			
			$mimeType = mime_content_type($path);
		}
		if (!$isWrapped and $mimeType=='application/octet-stream' && OC_Helper::canExecute("file")) {
			
			
			$path=escapeshellarg($path);
			$fp = popen("file -i -b $path 2>/dev/null", "r");
			$reply = fgets($fp);
			pclose($fp);

			
			$mimeType=substr($reply,0,strrpos($reply,' '));
			$mimeType=substr($mimeType,0,strrpos($mimeType,"\n"));

			
			if (strpos($mimeType, ';') !== false) {
				$mimeType = strstr($mimeType, ';', true);
			}

		}
		return $mimeType;
	}

	
	static function getStringMimeType($data) {
		if(function_exists('finfo_open') and function_exists('finfo_file')) {
			$finfo=finfo_open(FILEINFO_MIME);
			return finfo_buffer($finfo, $data);
		}else{
			$tmpFile=OC_Helper::tmpFile();
			$fh=fopen($tmpFile,'wb');
			fwrite($fh,$data,8024);
			fclose($fh);
			$mime=self::getMimeType($tmpFile);
			unset($tmpFile);
			return $mime;
		}
	}

	

	
	public static function init_var($s, $d="") {
		$r = $d;
		if(isset($_REQUEST[$s]) && !empty($_REQUEST[$s]))
			$r = stripslashes(htmlspecialchars($_REQUEST[$s]));

		return $r;
	}

	
	public static function init_radio($s, $v, $d) {
		if((isset($_REQUEST[$s]) && $_REQUEST[$s]==$v) || (!isset($_REQUEST[$s]) && $v == $d))
			
	}

	
	public static function canExecute($name, $path = false) {
		
		if ($path === false) {
			$path = getenv("PATH");
		}
		
		if (!strncmp(PHP_OS, "WIN", 3)) {
			
			$exts = array(".exe", ".com");
			$check_fn = "file_exists";
		} else {
			
			$exts = array("");
			$check_fn = "is_executable";
		}
		
		$dirs = explode(PATH_SEPARATOR, $path);
		
		$obd = ini_get('open_basedir');
		if($obd != "none"){
			$obd_values = explode(PATH_SEPARATOR, $obd);
			if(count($obd_values) > 0 and $obd_values[0]){
				
				
				$dirs = $obd_values;
			}
		}
		foreach($dirs as $dir){
			foreach($exts as $ext){
				if($check_fn("$dir/$name".$ext))
					return true;
			}
		}
		return false;
	}

	
	public static function streamCopy($source,$target) {
		if(!$source or !$target) {
			return false;
		}
		$count=0;
		while(!feof($source)) {
			$count+=fwrite($target,fread($source,8192));
		}
		return $count;
	}

	
	public static function tmpFile($postfix='') {
		$file=get_temp_dir().'/'.md5(time().rand()).$postfix;
		$fh=fopen($file,'w');
		fclose($fh);
		self::$tmpFiles[]=$file;
		return $file;
	}

	
	public static function tmpFolder() {
		$path=get_temp_dir().'/'.md5(time().rand());
		mkdir($path);
		self::$tmpFiles[]=$path;
		return $path.'/';
	}

	
	public static function cleanTmp() {
		$leftoversFile=get_temp_dir().'/oc-not-deleted';
		if(file_exists($leftoversFile)) {
			$leftovers=file($leftoversFile);
			foreach($leftovers as $file) {
				self::rmdirr($file);
			}
			unlink($leftoversFile);
		}

		foreach(self::$tmpFiles as $file) {
			if(file_exists($file)) {
				if(!self::rmdirr($file)) {
					file_put_contents($leftoversFile, $file."\n", FILE_APPEND);
				}
			}
		}
	}

	
	public static function buildNotExistingFileName($path, $filename) {
		if($path==='/') {
			$path='';
		}
		if ($pos = strrpos($filename, '.')) {
			$name = substr($filename, 0, $pos);
			$ext = substr($filename, $pos);
		} else {
			$name = $filename;
			$ext = '';
		}

		$newpath = $path . '/' . $filename;
		$counter = 2;
		while (OC_Filesystem::file_exists($newpath)) {
			$newname = $name . ' (' . $counter . ')' . $ext;
			$newpath = $path . '/' . $newname;
			$counter++;
		}

		return $newpath;
	}

	
	public static function issubdirectory($sub, $parent) {
		if($sub == null || $sub == '' || $parent == null || $parent == '') {
			return false;
		}
		$realpath_sub = realpath($sub);
		$realpath_parent = realpath($parent);
		if(($realpath_sub == false && substr_count($realpath_sub, './') != 0) || ($realpath_parent == false && substr_count($realpath_parent, './') != 0)) { 
			return false;
		}
		if($realpath_sub && $realpath_sub != '' && $realpath_parent && $realpath_parent != '') {
			if(substr($realpath_sub, 0, strlen($realpath_parent)) == $realpath_parent) {
				return true;
			}
		}else{
			if(substr($sub, 0, strlen($parent)) == $parent) {
				return true;
			}
		}
		
		return false;
	}

	
	public static function mb_array_change_key_case($input, $case = MB_CASE_LOWER, $encoding = 'UTF-8') {
		$case = ($case != MB_CASE_UPPER) ? MB_CASE_LOWER : MB_CASE_UPPER;
		$ret = array();
		foreach ($input as $k => $v) {
			$ret[mb_convert_case($k, $case, $encoding)] = $v;
		}
		return $ret;
	}

	
	public static function mb_substr_replace($string, $replacement, $start, $length = null, $encoding = 'UTF-8') {
		$start = intval($start);
		$length = intval($length);
		$string = mb_substr($string, 0, $start, $encoding) .
		          $replacement .
		          mb_substr($string, $start+$length, mb_strlen($string, 'UTF-8')-$start, $encoding);

		return $string;
	}

	
	public static function mb_str_replace($search, $replace, $subject, $encoding = 'UTF-8', &$count = null) {
		$offset = -1;
		$length = mb_strlen($search, $encoding);
		while(($i = mb_strrpos($subject, $search, $offset, $encoding)) !== false ) {
			$subject = OC_Helper::mb_substr_replace($subject, $replace, $i, $length);
			$offset = $i - mb_strlen($subject, $encoding) - 1;
			$count++;
		}
		return $subject;
	}

	
	public static function recursiveArraySearch($haystack, $needle, $index = null) {
		$aIt = new RecursiveArrayIterator($haystack);
		$it = new RecursiveIteratorIterator($aIt);

		while($it->valid()) {
			if (((isset($index) AND ($it->key() == $index)) OR (!isset($index))) AND ($it->current() == $needle)) {
				return $aIt->key();
			}

			$it->next();
		}

		return false;
	}
}
