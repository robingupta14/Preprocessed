<?php




class OC_Contacts_VCard{
	
	public static function all($id){
		$result = null;
		if(is_array($id)) {
			$id_sql = join(',', array_fill(0, count($id), '?'));
			$prep = 'SELECT * FROM *PREFIX*contacts_cards WHERE addressbookid IN ('.$id_sql.') ORDER BY fullname';
			try {
				$stmt = OCP\DB::prepare( $prep );
				$result = $stmt->execute($id);
			} catch(Exception $e) {}
		} elseif($id) {
			try {
				$stmt = OCP\DB::prepare( 'SELECT * FROM *PREFIX*contacts_cards WHERE addressbookid = ? ORDER BY fullname' );
				$result = $stmt->execute(array($id));
			} catch(Exception $e) {}
		}
		$cards = array();
		if(!is_null($result)) {
			while( $row = $result->fetchRow()){
				$cards[] = $row;
			}
		}

		return $cards;
	}

	
	public static function find($id){
		$stmt = OCP\DB::prepare( 'SELECT * FROM *PREFIX*contacts_cards WHERE id = ?' );
		$result = $stmt->execute(array($id));

		return $result->fetchRow();
	}

	
	public static function findWhereDAVDataIs($aid,$uri){
		$stmt = OCP\DB::prepare( 'SELECT * FROM *PREFIX*contacts_cards WHERE addressbookid = ? AND uri = ?' );
		$result = $stmt->execute(array($aid,$uri));

		return $result->fetchRow();
	}

	
	public static function formatPropertyTypes(&$property) {
		foreach($property->parameters as $key=>&$parameter){
			$types = OC_Contacts_App::getTypesOfProperty($property->name);
			if(is_array($types) && in_array(strtoupper($parameter->name), array_keys($types)) || strtoupper($parameter->name) == 'PREF') {
				$property->parameters[] = new Sabre_VObject_Parameter('TYPE', $parameter->name);
			}
			unset($property->parameters[$key]);
		}
	}

	
	public static function decodeProperty(&$property) {
		
		foreach($property->parameters as $key=>&$parameter){
			if(strtoupper($parameter->name) == 'ENCODING') {
				if(strtoupper($parameter->value) == 'QUOTED-PRINTABLE') { 
					$property->value = quoted_printable_decode($property->value);
					unset($property->parameters[$key]);
				}
			} elseif(strtoupper($parameter->name) == 'CHARSET') {
					unset($property->parameters[$key]);
			}
		}
	}

	
	protected static function trueUID($aid, &$uid) {
		$stmt = OCP\DB::prepare( 'SELECT * FROM *PREFIX*contacts_cards WHERE addressbookid = ? AND uri = ?' );
		$uri = $uid.'.vcf';
		$result = $stmt->execute(array($aid,$uri));
		if($result->numRows() > 0){
			while(true) {
				$tmpuid = substr(md5(rand().time()),0,10);
				$uri = $tmpuid.'.vcf';
				$result = $stmt->execute(array($aid,$uri));
				if($result->numRows() > 0){
					continue;
				} else {
					$uid = $tmpuid;
					return true;
				}
			}
		} else {
			return false;
		}
	}

	
	protected static function updateValuesFromAdd($aid, &$vcard) { 
		$stringprops = array('N', 'FN', 'ORG', 'NICK', 'ADR', 'NOTE');
		$typeprops = array('ADR', 'TEL', 'EMAIL');
		$upgrade = false;
		$fn = $n = $uid = $email = $org = null;
		$version = $vcard->getAsString('VERSION');
		
		if($version && $version < '3.0') {
			$upgrade = true;
			OCP\Util::writeLog('contacts','OC_Contacts_VCard::updateValuesFromAdd. Updating from version: '.$version,OCP\Util::DEBUG);
		}
		foreach($vcard->children as &$property){
			
			if($upgrade && in_array($property->name, $stringprops)) {
				self::decodeProperty($property);
			}
			if(in_array($property->name, $stringprops)) {
				$property->value = strip_tags($property->value);
			}
			
			if($upgrade && in_array($property->name, $typeprops)) {
				OCP\Util::writeLog('contacts','OC_Contacts_VCard::updateValuesFromAdd. before: '.$property->serialize(),OCP\Util::DEBUG);
				self::formatPropertyTypes($property);
				OCP\Util::writeLog('contacts','OC_Contacts_VCard::updateValuesFromAdd. after: '.$property->serialize(),OCP\Util::DEBUG);
			}
			if($property->name == 'FN'){
				$fn = $property->value;
			}
			if($property->name == 'N'){
				$n = $property->value;
			}
			if($property->name == 'UID'){
				$uid = $property->value;
			}
			if($property->name == 'ORG'){
				$org = $property->value;
			}
			if($property->name == 'EMAIL' && is_null($email)){ 
				$email = $property->value;
			}
		}
		
		if(!$fn) {
			if($n && $n != ';;;;'){
				$fn = join(' ', array_reverse(array_slice(explode(';', $n), 0, 2)));
			} elseif($email) {
				$fn = $email;
			} elseif($org) {
				$fn = $org;
			} else {
				$fn = 'Unknown Name';
			}
			$vcard->setString('FN', $fn);
			OCP\Util::writeLog('contacts','OC_Contacts_VCard::updateValuesFromAdd. Added missing \'FN\' field: '.$fn,OCP\Util::DEBUG);
		}
		if(!$n || $n = ';;;;'){ 
			$slice = array_reverse(array_slice(explode(' ', $fn), 0, 2)); 
			if(count($slice) < 2) { 
				$slice[] = "";
			}
			$n = implode(';', $slice).';;;';
			$vcard->setString('N', $n);
			OCP\Util::writeLog('contacts','OC_Contacts_VCard::updateValuesFromAdd. Added missing \'N\' field: '.$n,OCP\Util::DEBUG);
		}
		if(!$uid) {
			$vcard->setUID();
			$uid = $vcard->getAsString('UID');
			OCP\Util::writeLog('contacts','OC_Contacts_VCard::updateValuesFromAdd. Added missing \'UID\' field: '.$uid,OCP\Util::DEBUG);
		}
		if(self::trueUID($aid, $uid)) {
			$vcard->setString('UID', $uid);
		}
		$now = new DateTime;
		$vcard->setString('REV', $now->format(DateTime::W3C));
	}

	
	public static function add($aid, OC_VObject $card, $uri=null, $isnew=false){
		if(is_null($card)){
			OCP\Util::writeLog('contacts','OC_Contacts_VCard::add. No vCard supplied', OCP\Util::ERROR);
			return null;
		};

		if(!$isnew) {
			OC_Contacts_App::loadCategoriesFromVCard($card);
			self::updateValuesFromAdd($aid, $card);
		}

		$card->setString('VERSION','3.0');
		
		$prodid = trim($card->getAsString('PRODID'));
		if(!$prodid) {
			$appinfo = OCP\App::getAppInfo('contacts');
			$appversion = OCP\App::getAppVersion('contacts');
			$prodid = '-
			$card->setString('PRODID', $prodid);
		}

		$fn = $card->getAsString('FN');
		if (empty($fn)) {
			$fn = '';
		}

		if (!$uri) {
			$uid = $card->getAsString('UID');
			$uri = $uid.'.vcf';
		}

		$data = $card->serialize();
		$stmt = OCP\DB::prepare( 'INSERT INTO *PREFIX*contacts_cards (addressbookid,fullname,carddata,uri,lastmodified) VALUES(?,?,?,?,?)' );
		$result = $stmt->execute(array($aid,$fn,$data,$uri,time()));
		$newid = OCP\DB::insertid('*PREFIX*contacts_cards');

		OC_Contacts_Addressbook::touch($aid);

		return $newid;
	}

	
	public static function addFromDAVData($id,$uri,$data){
		$card = OC_VObject::parse($data);
		return self::add($id, $card, $uri);
	}

	
	public static function updateDataByID($objects){
		$stmt = OCP\DB::prepare( 'UPDATE *PREFIX*contacts_cards SET carddata = ?, lastmodified = ? WHERE id = ?' );
		$now = new DateTime;
		foreach($objects as $object) {
			$vcard = OC_VObject::parse($object[1]);
			if(!is_null($vcard)){
				$vcard->setString('REV', $now->format(DateTime::W3C));
				$data = $vcard->serialize();
				try {
					$result = $stmt->execute(array($data,time(),$object[0]));
					
				} catch(Exception $e) {}
			}
		}
	}

	
	public static function edit($id, OC_VObject $card){
		$oldcard = self::find($id);

		if(is_null($card)) {
			return false;
		}

		OC_Contacts_App::loadCategoriesFromVCard($card);

		$fn = $card->getAsString('FN');
		if (empty($fn)) {
			$fn = null;
		}

		$now = new DateTime;
		$card->setString('REV', $now->format(DateTime::W3C));

		$data = $card->serialize();
		$stmt = OCP\DB::prepare( 'UPDATE *PREFIX*contacts_cards SET fullname = ?,carddata = ?, lastmodified = ? WHERE id = ?' );
		$result = $stmt->execute(array($fn,$data,time(),$id));

		OC_Contacts_Addressbook::touch($oldcard['addressbookid']);

		return true;
	}

	
	public static function editFromDAVData($aid,$uri,$data){
		$oldcard = self::findWhereDAVDataIs($aid,$uri);
		$card = OC_VObject::parse($data);
		return self::edit($oldcard['id'], $card);
	}

	
	public static function delete($id){
		
		$stmt = OCP\DB::prepare( 'DELETE FROM *PREFIX*contacts_cards WHERE id = ?' );
		$stmt->execute(array($id));

		return true;
	}

	
	public static function deleteFromDAVData($aid,$uri){
		
		$stmt = OCP\DB::prepare( 'DELETE FROM *PREFIX*contacts_cards WHERE addressbookid = ? AND uri=?' );
		$stmt->execute(array($aid,$uri));
		OC_Contacts_Addressbook::touch($aid);

		return true;
	}

	
	public static function escapeDelimiters($value, $delimiter=';') {
		foreach($value as &$i ) {
			$i = implode("\\$delimiter", explode($delimiter, $i));
		}
		return implode($delimiter, $value);
	}


	
	public static function unescapeDelimiters($value, $delimiter=';') {
		$array = explode($delimiter,$value);
		for($i=0;$i<count($array);$i++) {
			if(substr($array[$i],-1,1)=="\\") {
				if(isset($array[$i+1])) {
					$array[$i] = substr($array[$i],0,count($array[$i])-2).$delimiter.$array[$i+1];
					unset($array[$i+1]);
				} else {
					$array[$i] = substr($array[$i],0,count($array[$i])-2).$delimiter;
				}
				$i = $i - 1;
			}
		}
		$array = array_map('trim', $array);
		return $array;
	}

	
	public static function structureContact($object){
		$details = array();
		foreach($object->children as $property){
			$temp = self::structureProperty($property);
			if(!is_null($temp)) {
				if(array_key_exists($property->name,$details)){
					$details[$property->name][] = $temp;
				}
				else{
					$details[$property->name] = array($temp);
				}
			}
		}
		return $details;
	}

	
	public static function structureProperty($property){
		$value = $property->value;
		
		if($property->name == 'ADR' || $property->name == 'N'){
			$value = self::unescapeDelimiters($value);
		} elseif($property->name == 'BDAY') {
			if(strpos($value, '-') === false) {
				if(strlen($value) >= 8) {
					$value = substr($value, 0, 4).'-'.substr($value, 4, 2).'-'.substr($value, 6, 2);
				} else {
					return null; 
				}
			}
		}
		$temp = array(
			'name' => $property->name,
			'value' => $value,
			'parameters' => array(),
			'checksum' => md5($property->serialize()));
		foreach($property->parameters as $parameter){
			
			
			
			if($parameter->name == 'TYPE' && $parameter->value == 'PREF'){
				$parameter->name = 'PREF';
				$parameter->value = '1';
			}
			
			
			if (in_array($property->name, array('TEL', 'EMAIL')) && $parameter->name == 'TYPE'){
				if (isset($temp['parameters'][$parameter->name])){
					$temp['parameters'][$parameter->name][] = $parameter->value;
				}
				else{
					$temp['parameters'][$parameter->name] = array($parameter->value);
				}
			}
			else{
				$temp['parameters'][$parameter->name] = $parameter->value;
			}
		}
		return $temp;
	}

	
	public static function moveToAddressBook($aid, $id){
		OC_Contacts_App::getAddressbook($aid); 
		if(is_array($id)) {
			$id_sql = join(',', array_fill(0, count($id), '?'));
			$prep = 'UPDATE *PREFIX*contacts_cards SET addressbookid = ? WHERE id IN ('.$id_sql.')';
			try {
				$stmt = OCP\DB::prepare( $prep );
				
				$vals = array_merge((array)$aid, $id);
				$result = $stmt->execute($vals);
			} catch(Exception $e) {}
		} else {
			try {
				$stmt = OCP\DB::prepare( 'UPDATE *PREFIX*contacts_cards SET addressbookid = ? WHERE id = ?' );
				$result = $stmt->execute(array($aid, $id));
			} catch(Exception $e) {}
		}

		OC_Contacts_Addressbook::touch($aid);
		return true;
	}

}
