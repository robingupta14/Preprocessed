<?php


class ProductCommentsUpdateCommentUsefulnessModuleFrontController extends ModuleFrontController
{
    public function display()
    {
        if (!Configuration::get('PRODUCT_COMMENTS_USEFULNESS')) {
            $this->ajaxRender(json_encode([
                'success' => false,
                'error' => $this->trans('This feature is not enabled.', [], 'Modules.Productcomments.Shop'),
            ]));

            return false;
        }

        $customerId = (int) $this->context->cookie->id_customer;
        if (!$customerId) {
            $this->ajaxRender(json_encode([
                'success' => false,
                'error' => $this->trans(
                    'You need to be [1]logged in[/1] or [2]create an account[/2] to give your appreciation of a review.',
                    [
                        '[1]' => '<a href="' . $this->context->link->getPageLink('my-account') . '">',
                        '[/1]' => '</a>',
                        '[2]' => '<a href="' . $this->context->link->getPageLink('authentication&create_account=1') . '">',
                        '[/2]' => '</a>',
                    ],
                    'Modules.Productcomments.Shop'
                ),
            ]));

            return false;
        }

        $id_product_comment = (int) Tools::getValue('id_product_comment');
        $usefulness = (int) Tools::getValue('usefulness');

        
        $entityManager = $this->container->get('doctrine.orm.entity_manager');
        $productCommentEntityRepository = $entityManager->getRepository(PrestaShop\Module\ProductComment\Entity\ProductComment::class);

        $productComment = $productCommentEntityRepository->findOneById($id_product_comment);
        if (!$productComment) {
            $this->ajaxRender(json_encode([
                'success' => false,
                'error' => $this->trans('Cannot find the requested product review.', [], 'Modules.Productcomments.Shop'),
            ]));

            return false;
        }

        $productCommentUsefulnesRepository = $entityManager->getRepository(PrestaShop\Module\ProductComment\Entity\ProductCommentUsefulness::class);
        
        $productCommentUsefulness = $productCommentUsefulnesRepository->findOneBy([
            'comment' => $id_product_comment,
            'customerId' => $customerId,
        ]);
        if ($productCommentUsefulness) {
            $productCommentUsefulness->setUsefulness($usefulness);
        } else {
            $productCommentUsefulness = new ProductCommentUsefulness(
                $productComment,
                $customerId,
                $usefulness
            );
            $entityManager->persist($productCommentUsefulness);
        }

        $entityManager->flush();

        
        $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');
        $commentUsefulness = $productCommentRepository->getProductCommentUsefulness($id_product_comment);

        $this->ajaxRender(json_encode(array_merge([
            'success' => true,
            'id_product_comment' => $id_product_comment,
        ], $commentUsefulness)));
    }
}
