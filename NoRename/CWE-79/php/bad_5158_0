<?php





abstract class DateFormatTransformationsPlugin extends TransformationsPlugin
{
    
    public static function getInfo()
    {
        return __(
            'Displays a TIME, TIMESTAMP, DATETIME or numeric unix timestamp'
            . ' column as formatted date. The first option is the offset (in'
            . ' hours) which will be added to the timestamp (Default: 0). Use'
            . ' second option to specify a different date/time format string.'
            . ' Third option determines whether you want to see local date or'
            . ' UTC one (use "local" or "utc" strings) for that. According to'
            . ' that, date format has different value - for "local" see the'
            . ' documentation for PHP\'s strftime() function and for "utc" it'
            . ' is done using gmdate() function.'
        );
    }

    
    public function applyTransformation($buffer, $options = array(), $meta = '')
    {
        

        
        if (empty($options[0])) {
            $options[0] = 0;
        }

        if (empty($options[2])) {
            $options[2] = 'local';
        } else {
            $options[2] = mb_strtolower($options[2]);
        }

        if (empty($options[1])) {
            if ($options[2] == 'local') {
                $options[1] = __('%B %d, %Y at %I:%M %p');
            } else {
                $options[1] = 'Y-m-d  H:i:s';
            }
        }

        $timestamp = -1;

        
        
        
        if ($meta->type == 'int') {
            $timestamp = $buffer;

            
            
            
            
        } else {
            if (preg_match('/^(\d{2}){3,7}$/', $buffer)) {

                if (mb_strlen($buffer) == 14 || mb_strlen($buffer) == 8) {
                    $offset = 4;
                } else {
                    $offset = 2;
                }

                $aDate = array();
                $aDate['year'] = (int)
                mb_substr($buffer, 0, $offset);
                $aDate['month'] = (int)
                mb_substr($buffer, $offset, 2);
                $aDate['day'] = (int)
                mb_substr($buffer, $offset + 2, 2);
                $aDate['hour'] = (int)
                mb_substr($buffer, $offset + 4, 2);
                $aDate['minute'] = (int)
                mb_substr($buffer, $offset + 6, 2);
                $aDate['second'] = (int)
                mb_substr($buffer, $offset + 8, 2);

                if (checkdate($aDate['month'], $aDate['day'], $aDate['year'])) {
                    $timestamp = mktime(
                        $aDate['hour'],
                        $aDate['minute'],
                        $aDate['second'],
                        $aDate['month'],
                        $aDate['day'],
                        $aDate['year']
                    );
                }
                
                
            } else {
                if (preg_match('/^[0-9]\d{1,9}$/', $buffer)) {
                    $timestamp = (int)$buffer;
                } else {
                    $timestamp = strtotime($buffer);
                }
            }
        }

        
        if ($timestamp < 0 && preg_match('/^[1-9]\d{1,9}$/', $buffer)) {
            $timestamp = $buffer;
        }

        
        if ($timestamp >= 0) {
            $timestamp -= $options[0] * 60 * 60;
            $source = $buffer;
            if ($options[2] == 'local') {
                $text = PMA\libraries\Util::localisedDate(
                    $timestamp,
                    $options[1]
                );
            } elseif ($options[2] == 'utc') {
                $text = gmdate($options[1], $timestamp);
            } else {
                $text = 'INVALID DATE TYPE';
            }
            $buffer = '<dfn onclick="alert(\'' . $source . '\');" title="'
                . $source . '">' . $text . '</dfn>';
        }

        return $buffer;
    }

    

    
    public static function getName()
    {
        return "Date Format";
    }
}
