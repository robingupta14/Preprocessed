<?php



abstract class class_abstract_controller {

    const STR_MODULE_ANNOTATION = "@module";
    const STR_MODULEID_ANNOTATION = "@moduleId";


    
    protected $objConfig = null;

    
    protected $objToolkit = null;

    
    protected $objSession = null;

    
    protected $objTemplate = null;

    
    private $objLang = null;

    
    private $objModule = null;

    
    private $strLangBase = "";

    
    private $strAction = "";

    
    private $strSystemid = "";

    
    protected $arrModule = array();

    
    protected $strOutput = "";

    
    public function __construct($strSystemid = "") {

        
        
        $objCarrier = class_carrier::getInstance();

        $this->objConfig = $objCarrier->getObjConfig();
        $this->objSession = $objCarrier->getObjSession();
        $this->objLang = $objCarrier->getObjLang();
        $this->objTemplate = $objCarrier->getObjTemplate();

        
        if($strSystemid == "") {
            $this->setSystemid(class_carrier::getInstance()->getParam("systemid"));
        }
        else {
            $this->setSystemid($strSystemid);
        }


        
        $this->setAction($this->getParam("action"));
        
        if($this->getAction() == "") {
            $this->setAction("list");
        }

        
        $objReflection = new class_reflection($this);
        if(!isset($this->arrModule["modul"])) {
            $arrAnnotationValues = $objReflection->getAnnotationValuesFromClass(self::STR_MODULE_ANNOTATION);
            if(count($arrAnnotationValues) > 0)
                $this->setArrModuleEntry("modul", trim($arrAnnotationValues[0]));
        }

        if(!isset($this->arrModule["moduleId"])) {
            $arrAnnotationValues = $objReflection->getAnnotationValuesFromClass(self::STR_MODULEID_ANNOTATION);
            if(count($arrAnnotationValues) > 0)
                $this->setArrModuleEntry("moduleId", constant(trim($arrAnnotationValues[0])));
        }

        $this->strLangBase = $this->getArrModule("modul");
    }


    


    
    public function setParam($strKey, $mixedValue) {
        class_carrier::getInstance()->setParam($strKey, $mixedValue);
    }

    
    public function getParam($strKey) {
        return class_carrier::getInstance()->getParam($strKey);
    }

    
    public final function getAllParams() {
        return class_carrier::getAllParams();
    }

    
    public final function getAction() {
        return (string)$this->strAction;
    }

    
    public final function setAction($strAction) {
        $this->strAction = htmlspecialchars(trim($strAction), ENT_QUOTES, "UTF-8", false);
    }



    

    
    public final function setSystemid($strID) {
        if(validateSystemid($strID)) {
            $this->strSystemid = $strID;
            return true;
        }
        else {
            return false;
        }
    }

    
    public final function getSystemid() {
        return $this->strSystemid;
    }



    
    protected function getObjLang() {
        return $this->objLang;
    }


    
    protected function getObjModule() {
        if($this->objModule == null) {
            $this->objModule = class_module_system_module::getModuleByName($this->getArrModule("modul"));
        }

        return $this->objModule;
    }



    
    public function getPathArray($strSystemid = "", $strStopSystemid = "") {
        if($strSystemid == "") {
            $strSystemid = $this->getSystemid();
        }
        if($strStopSystemid == "") {
            $strStopSystemid = $this->getObjModule()->getSystemid();
        }

        $objSystemCommon = new class_module_system_common();
        return $objSystemCommon->getPathArray($strSystemid, $strStopSystemid);
    }

    
    public function getArrModule($strKey) {
        if(isset($this->arrModule[$strKey])) {
            return $this->arrModule[$strKey];
        }
        else {
            return "";
        }
    }

    
    public function setArrModuleEntry($strKey, $strValue) {
        $this->arrModule[$strKey] = $strValue;
    }


    

    
    public function getLang($strName, $strModule = "", $arrParameters = array()) {
        if(is_array($strModule))
            $arrParameters = $strModule;

        if($strModule == "" || is_array($strModule)) {
            $strModule = $this->strLangBase;
        }

        
        return $this->getObjLang()->getLang($strName, $strModule, $arrParameters);
    }

    
    protected final function setStrLangBase($strLangbase) {
        $this->strLangBase = $strLangbase;
    }



    

    
    public function flushCompletePagesCache() {
        return class_cache::flushCache("class_element_portal");
    }

    
    public function flushPageFromPagesCache() {
        
        
        return self::flushCompletePagesCache();
    }



}