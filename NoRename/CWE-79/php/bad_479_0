<?php



if (!defined('SEO_FULLWEBPATH')) {
	define('SEO_FULLWEBPATH', FULLWEBPATH);
	define('SEO_WEBPATH', WEBPATH);
}









function getVersion() {
	return ZENPHOTO_VERSION;
}


function printVersion() {
	
}


function printZenJavascripts() {
	global $_zp_current_album;
	?>
	<script type="text/javascript" src="<?php  ?>/js/jquery.js"></script>
	<?php
	if(zp_loggedin()) {
		?>
		<script type="text/javascript" src="<?php  ?>/js/zenphoto.js"></script>
		<link rel="stylesheet" href="<?php  ?>/admintoolbox.css" type="text/css" />
		<?php
	}
}


function adminToolbox() {
	global $_zp_current_album, $_zp_current_image, $_zp_current_search, $_zp_gallery_page, $_zp_gallery, $_zp_current_admin_obj, $_zp_loggedin, $_zp_conf_vars;
	if (zp_loggedin()) {
		$zf = FULLWEBPATH . "/" . ZENFOLDER;
		$page = getCurrentPage();
		ob_start();
		?>
		<script type="text/javascript">
			
			var deleteAlbum1 = "<?php  ?>";
			var deleteAlbum2 = "<?php  ?>";
			function newAlbum(folder, albumtab) {
				var album = prompt('<?php  ?>', '<?php  ?>');
				if (album) {
					launchScript('<?php  ?>/admin-edit.php', ['action=newalbum', 'folder=' + encodeURIComponent(folder), 'name=' + encodeURIComponent(album), 'albumtab=' + albumtab, 'XSRFToken=<?php  ?>']);
				}
			}
			
		</script>
		<div id="zp__admin_module">
			<div id="zp__admin_info">
				<span class="zp_logo">ZP</span>
				<span class="zp_user"> <?php  ?>
					<?php
					if(array_key_exists('site_upgrade_state', $_zp_conf_vars)) {
						if($_zp_conf_vars['site_upgrade_state'] == 'closed_for_test') {
							
						}
					}
					?>
				</span>
			</div>
			<button type="button" id="zp__admin_link" onclick="javascript:toggle('zp__admin_data');">
				<?php  ?>
			</button>
			<div id="zp__admin_data" style="display: none;">
				<ul>
				<?php
				$outputA = ob_get_contents();
				ob_end_clean();
				ob_start();

				if (zp_loggedin(OVERVIEW_RIGHTS)) {
					?>
					<li>
						<?php printLinkHTML($zf . '/admin.php', gettext("Overview"), NULL, NULL, NULL); ?>
					</li>
					<?php
				}
				if (zp_loggedin(UPLOAD_RIGHTS | FILES_RIGHTS | THEMES_RIGHTS)) {
					?>
					<li>
						<?php printLinkHTML($zf . '/admin-upload.php', gettext("Upload"), NULL, NULL, NULL); ?>
					</li>
					<?php
				}
				if (zp_loggedin(ALBUM_RIGHTS)) {
					?>
					<li>
						<?php printLinkHTML($zf . '/admin-edit.php', gettext("Albums"), NULL, NULL, NULL); ?>
					</li>
					<?php
				}
				zp_apply_filter('admin_toolbox_global', $zf);

				if (zp_loggedin(TAGS_RIGHTS)) {
					?>
					<li>
						<?php printLinkHTML($zf . '/admin-tags.php', gettext("Tags"), NULL, NULL, NULL); ?>
					</li>
					<?php
				}
				if (zp_loggedin(USER_RIGHTS)) {
					?>
					<li>
						<?php printLinkHTML($zf . '/admin-users.php', gettext("Users"), NULL, NULL, NULL); ?>
					</li>
					<?php
				}
				if (zp_loggedin(OPTIONS_RIGHTS)) {
					?>
					<li>
						<?php printLinkHTML($zf . '/admin-options.php?tab=general', gettext("Options"), NULL, NULL, NULL); ?>
					</li>
					<?php
				}
				if (zp_loggedin(THEMES_RIGHTS)) {
					?>
					<li>
						<?php printLinkHTML($zf . '/admin-themes.php', gettext("Themes"), NULL, NULL, NULL); ?>
					</li>
					<?php
				}
				if (zp_loggedin(ADMIN_RIGHTS)) {
					?>
					<li>
						<?php printLinkHTML($zf . '/admin-plugins.php', gettext("Plugins"), NULL, NULL, NULL); ?>
					</li>
					<li>
						<?php printLinkHTML($zf . '/admin-logs.php', gettext("Logs"), NULL, NULL, NULL); ?>
					</li>
					<?php
				}

				$gal = getOption('custom_index_page');
				if (empty($gal) || !file_exists(SERVERPATH . '/' . THEMEFOLDER . '/' . $_zp_gallery->getCurrentTheme() . '/' . internalToFilesystem($gal) . '.php')) {
					$gal = 'index.php';
				} else {
					$gal .= '.php';
				}
				$inImage = false;
				switch ($_zp_gallery_page) {
					case 'index.php':
					case $gal:
						
						if (zp_loggedin(ADMIN_RIGHTS)) {
							?>
							<li>
								<?php printLinkHTML($zf . '/admin-edit.php?page=edit', gettext("Sort Gallery"), NULL, NULL, NULL); ?>
							</li>
							<?php
						}
						if (zp_loggedin(UPLOAD_RIGHTS)) {
							
							?>
							<li>
								<a href="javascript:newAlbum('',true);"><?php  ?></a>
							</li>
							<?php
						}
						if ($_zp_gallery_page == 'index.php') {
							$redirect = '';
						} else {
							$redirect = "&amp;p=" . urlencode(stripSuffix($_zp_gallery_page));
						}
						if ($page > 1) {
							$redirect .= "&amp;page=$page";
						}
						zp_apply_filter('admin_toolbox_gallery', $zf);
						break;
					case 'image.php':
						$inImage = true; 
					case 'album.php':
						
						$albumname = $_zp_current_album->name;
						if ($_zp_current_album->isMyItem(ALBUM_RIGHTS)) {
							
							?>
							<li>
								<?php printLinkHTML($zf . '/admin-edit.php?page=edit&album=' . pathurlencode($_zp_current_album->name), gettext('Edit album'), NULL, NULL, NULL); ?>
							</li>
							<?php
							if (!$_zp_current_album->isDynamic()) {
								if ($_zp_current_album->getNumAlbums()) {
									?>
									<li>
										<?php printLinkHTML($zf . '/admin-edit.php?page=edit&album=' . pathurlencode($albumname) . '&tab=subalbuminfo', gettext("Sort subalbums"), NULL, NULL, NULL); ?>
									</li>
									<?php
								}
								if ($_zp_current_album->getNumImages() > 0) {
									?>
									<li>
										<?php printLinkHTML($zf . '/admin-albumsort.php?page=edit&album=' . pathurlencode($albumname) . '&tab=sort', gettext("Sort images"), NULL, NULL, NULL); ?>
									</li>
									<?php
								}
							}
							
							?>
							<li>
								<a href="javascript:confirmDeleteAlbum('<?php  ?>/admin-edit.php?page=edit&amp;action=deletealbum&amp;album=<?php XSRFToken=<?php  ?>');"
									 title="<?php  ?>"><?php  ?></a>
							</li>
							<?php
						}
						if ($_zp_current_album->isMyItem(UPLOAD_RIGHTS) && !$_zp_current_album->isDynamic()) {
							
							?>
							<li>
								<?php printLinkHTML($zf . '/admin-upload.php?album=' . pathurlencode($albumname), gettext("Upload Here"), NULL, NULL, NULL); ?>
							</li>
							<li>
								<a href="javascript:newAlbum('<?php  ?>',true);"><?php  ?></a>
							</li>
							<?php
						}
						zp_apply_filter('admin_toolbox_album', $albumname, $zf);
						if ($inImage) {
							
							$imagename = $_zp_current_image->filename;
							if (!$_zp_current_album->isDynamic()) { 
								if ($_zp_current_album->isMyItem(ALBUM_RIGHTS)) {
									$delete_image = gettext("Are you sure you want to delete this image? THIS CANNOT BE UNDONE!");
									
									?>
									<li>
										<a href="javascript:confirmDelete('<?php  ?>/admin-edit.php?page=edit&amp;action=deleteimage&amp;album=<?php  ?>&amp;image=<?php  ?>&amp;XSRFToken=<?php  ?>','<?php  ?>');"
											 title="<?php  ?>"><?php  ?></a>
									</li>
									<li>
										<a href="<?php  ?>/admin-edit.php?page=edit&amp;album=<?php  ?>&amp;singleimage=<?php  ?>&amp;tab=imageinfo&amp;nopagination"
											 title="<?php  ?>"><?php  ?></a>
									</li>
									<?php
								}
								
								zp_apply_filter('admin_toolbox_image', $albumname, $imagename, $zf);
							}
							$redirect = "&amp;album=" . html_encode(pathurlencode($albumname)) . "&amp;image=" . urlencode($imagename);
						} else {
							
							$redirect = "&amp;album=" . html_encode(pathurlencode($albumname));
							if ($page > 1) {
								$redirect .= "&amp;page=$page";
							}
						}
						break;
					case 'search.php':
						$words = $_zp_current_search->getSearchWords();
						if (!empty($words)) {
							
							if (zp_loggedin(UPLOAD_RIGHTS)) {
								$link = $zf . '/admin-dynamic-album.php?' . substr($_zp_current_search->getSearchParams(), 1);
								
								?>
								<li>
									<a href="<?php  ?>" title="<?php  ?>" ><?php  ?></a>
								</li>
								<?php
							}
							zp_apply_filter('admin_toolbox_search', $zf);
						}
						$redirect = "&amp;p=search" . $_zp_current_search->getSearchParams() . "&amp;page=$page";
						break;
					default:
						
						$gal = stripSuffix($_zp_gallery_page);
						$redirect = "&amp;p=" . urlencode($gal);
						if ($page > 1) {
							$redirect .= "&amp;page=$page";
						}
						$redirect = zp_apply_filter('admin_toolbox_' . $gal, $redirect, $zf);
						break;
				}
				$redirect = zp_apply_filter('admin_toolbox_close', $redirect, $zf);
				if ($_zp_current_admin_obj->logout_link) {
					
					$sec = (int) ((SERVER_PROTOCOL == 'https') & true);
					$link = SEO_FULLWEBPATH . '/index.php?logout=' . $sec . $redirect;
					?>
					<li>
						<a href="<?php  ?>"><?php  ?> </a>
					</li>
					<?php
				}
				$outputB = ob_get_contents();
				ob_end_clean();
				if ($outputB) {
					
					?>
				</ul>
			</div>
		</div>
		<?php
		}
	}
}





function getGalleryTitle() {
	global $_zp_gallery;
	return $_zp_gallery->getTitle();
}


function getBareGalleryTitle() {
	return getBare(getGalleryTitle());
}


function printGalleryTitle() {
	
}

function printBareGalleryTitle() {
	
}


function getHeadTitle($separator = ' | ', $listparentalbums = true, $listparentpages = true) {
	global $_zp_gallery, $_zp_current_album, $_zp_current_image, $_zp_current_zenpage_news, $_zp_current_zenpage_page, $_zp_gallery_page, $_zp_current_category, $_zp_page, $_myFavorites;
	$mainsitetitle = html_encode(getBare(getMainSiteName()));
	$separator = html_encode($separator);
	if ($mainsitetitle) {
		$mainsitetitle = $separator . $mainsitetitle;
	}
	$gallerytitle = html_encode(getBareGalleryTitle());
	if ($_zp_page > 1) {
		$pagenumber = ' (' . $_zp_page . ')';
	} else {
		$pagenumber = '';
	}
	switch ($_zp_gallery_page) {
		case 'index.php':
			return $gallerytitle . $mainsitetitle . $pagenumber;
			break;
		case 'album.php':
		case 'image.php':
			if ($listparentalbums) {
				$parents = getParentAlbums();
				$parentalbums = '';
				if (count($parents) != 0) {
					$parents = array_reverse($parents);
					foreach ($parents as $parent) {
						$parentalbums .= html_encode(getBare($parent->getTitle())) . $separator;
					}
				}
			} else {
				$parentalbums = '';
			}
			$albumtitle = html_encode(getBareAlbumTitle()) . $pagenumber . $separator . $parentalbums . $gallerytitle . $mainsitetitle;
			switch ($_zp_gallery_page) {
				case 'album.php':
					return $albumtitle;
					break;
				case 'image.php':
					return html_encode(getBareImageTitle()) . $separator . $albumtitle;
					break;
			}
			break;
		case 'news.php':
			if (function_exists("is_NewsArticle")) {
				if (is_NewsArticle()) {
					return html_encode(getBareNewsTitle()) . $pagenumber . $separator . gettext('News') . $separator . $gallerytitle . $mainsitetitle;
				} else if (is_NewsCategory()) {
					return html_encode(getBare($_zp_current_category->getTitle())) . $pagenumber . $separator . gettext('News') . $separator . $gallerytitle . $mainsitetitle;
				} else {
					return gettext('News') . $pagenumber . $separator . $gallerytitle . $mainsitetitle;
				}
			}
			break;
		case 'pages.php':
			if ($listparentpages) {
				$parents = $_zp_current_zenpage_page->getParents();
				$parentpages = '';
				if (count($parents) != 0) {
					$parents = array_reverse($parents);
					foreach ($parents as $parent) {
						$obj = new ZenpagePage($parent);
						$parentpages .= html_encode(getBare($obj->getTitle())) . $separator;
					}
				}
			} else {
				$parentpages = '';
			}
			return html_encode(getBarePageTitle()) . $pagenumber . $separator . $parentpages . $gallerytitle . $mainsitetitle;
			break;
		case '404.php':
			return gettext('Object not found') . $separator . $gallerytitle . $mainsitetitle;
			break;
		default: 
			$custompage = stripSuffix($_zp_gallery_page);
			$standard = array(
					'gallery' => gettext('Gallery'), 
					'contact' => gettext('Contact'), 
					'register' => gettext('Register'), 
					'search' => gettext('Search'), 
					'archive' => gettext('Archive view'), 
					'password' => gettext('Password required'));
			if (is_object($_myFavorites)) {
				$standard['favorites'] = gettext('My favorites');
			}
			if (array_key_exists($custompage, $standard)) {
				return $standard[$custompage] . $pagenumber . $separator . $gallerytitle . $mainsitetitle;
			} else {
				return $custompage . $pagenumber . $separator . $gallerytitle . $mainsitetitle;
			}
			break;
	}
}


function printHeadTitle($separator = ' | ', $listparentalbums = true, $listparentpages = true) {
	
}


function getGalleryDesc() {
	global $_zp_gallery;
	return $_zp_gallery->getDesc();
}


function getBareGalleryDesc() {
	return getBare(getGalleryDesc());
}


function printGalleryDesc() {
	
}

function printBareGalleryDesc() {
	
}


function getMainSiteName() {
	global $_zp_gallery;
	return $_zp_gallery->getWebsiteTitle();
}


function getMainSiteURL() {
	global $_zp_gallery;
	return $_zp_gallery->getWebsiteURL();
}


function getGalleryIndexURL() {
	global $_zp_current_album, $_zp_gallery_page;
	$page = 1;
	if (in_context(ZP_ALBUM) && $_zp_gallery_page != 'index.php') {
		$album = getUrAlbum($_zp_current_album);
		$page = $album->getGalleryPage();
	}
	if (!$link = getCustomGalleryIndexURL($page)) {
		$link = getStandardGalleryIndexURL($page);
	}
	return zp_apply_filter('getLink', $link, 'index.php', NULL);
}


function getStandardGalleryIndexURL($page = 1, $webpath = null) {
	if ($page > 1) {
		return rewrite_path('/' . _PAGE_ . '/' . $page . '/', "/index.php?" . "page=" . $page, $webpath);
	} else {
		if (is_null($webpath)) {
			if (class_exists('seo_locale')) {
				$webpath = seo_locale::localePath();
			} else {
				$webpath = WEBPATH;
			}
		}
		return $webpath . "/";
	}
}


function getCustomGalleryIndexURL($page = 1, $webpath = null) {
	$custom_index = getOption('custom_index_page');
	if ($custom_index) {
		$link = getCustomPageURL($custom_index, '', $webpath);
		if ($page > 1) {
			if (MOD_REWRITE) {
				$link .= $page . '/';
			} else {
				$link .= "&amp;page=" . $page;
			}
		}
		return $link;
	}
	return false;
}


function getCustomGalleryIndexPage() {
	$custom_index = getOption('custom_index_page');
	if ($custom_index) {
		return $custom_index . '.php';
	}
	return 'gallery.php';
}


function printGalleryIndexURL($after = NULL, $text = NULL, $printHomeURL = true) {
	global $_zp_gallery_page;
	if (is_null($text)) {
		$text = gettext('Gallery');
	}
	$customgalleryindex = getOption('custom_index_page');
	if ($customgalleryindex && $printHomeURL) {
		printSiteHomeURL($after);
	}
	if ($_zp_gallery_page == getCustomGalleryIndexPage()) {
		$after = NULL;
	}
	if (!$customgalleryindex || ($customgalleryindex && in_array($_zp_gallery_page, array('image.php', 'album.php', getCustomGalleryIndexPage())))) {
		printLinkHTML(getGalleryIndexURL(), $text, $text, 'galleryindexurl');
		
	}
}



function getSiteHomeURL() {
	return WEBPATH . '/';
}


function printSiteHomeURL($after = NULL, $text = NULL) {
	global $_zp_gallery_page;
	if ($_zp_gallery_page == 'index.php') {
		$after = '';
	}
	if (is_null($text)) {
		$text = gettext('Home');
	}
	printLinkHTML(getSiteHomeURL(), $text, $text, 'homeurl');
	
}


function printPrivacyPageLink($before = null, $after = null) {
	$data = getDataUsageNotice();
	if (!empty($data['url'])) {
		
		printLinkHTML($data['url'], $data['linktext'], $data['linktext'], null, null);
		
	}
}


function getNumAlbums() {
	global $_zp_gallery, $_zp_current_album, $_zp_current_search;
	if (in_context(ZP_SEARCH) && is_null($_zp_current_album)) {
		return $_zp_current_search->getNumAlbums();
	} else if (in_context(ZP_ALBUM)) {
		return $_zp_current_album->getNumAlbums();
	} else {
		return $_zp_gallery->getNumAlbums();
	}
}


function getCurrentTheme() {
	global $_zp_gallery;
	return $_zp_gallery->getCurrentTheme();
}





function next_album($all = false, $mine = NULL) {
	global $_zp_albums, $_zp_gallery, $_zp_current_album, $_zp_page, $_zp_current_album_restore, $_zp_current_search;
	if (is_null($_zp_albums)) {
		if (in_context(ZP_SEARCH)) {
			$_zp_albums = $_zp_current_search->getAlbums($all ? 0 : $_zp_page, NULL, NULL, true, $mine);
		} else if (in_context(ZP_ALBUM)) {
			$_zp_albums = $_zp_current_album->getAlbums($all ? 0 : $_zp_page, NULL, NULL, true, $mine);
		} else {
			$_zp_albums = $_zp_gallery->getAlbums($all ? 0 : $_zp_page, NULL, NULL, true, $mine);
		}
		if (empty($_zp_albums)) {
			return NULL;
		}
		$_zp_current_album_restore = $_zp_current_album;
		$_zp_current_album = newAlbum(array_shift($_zp_albums), true, true);
		save_context();
		add_context(ZP_ALBUM);
		return true;
	} else if (empty($_zp_albums)) {
		$_zp_albums = NULL;
		$_zp_current_album = $_zp_current_album_restore;
		restore_context();
		return false;
	} else {
		$_zp_current_album = newAlbum(array_shift($_zp_albums), true, true);
		return true;
	}
}


function getCurrentPage() {
	global $_zp_page;
	return $_zp_page;
}


function getAllAlbums($album = NULL) {
	global $_zp_current_album, $_zp_gallery;
	if (is_null($album))
		$album = $_zp_current_album;
	if (!is_object($album))
		return;
	$list = array();
	$subalbums = $album->getAlbums(0);
	if (is_array($subalbums)) {
		foreach ($subalbums as $subalbum) {
			$list[] = $subalbum;
			$sub = newAlbum($subalbum);
			$list = array_merge($list, getAllAlbums($sub));
		}
	}
	return $list;
}


function getAllAccessibleAlbums($obj, &$albumlist, $scan) {
	global $_zp_gallery;
	$locallist = $obj->getAlbums();
 foreach ($locallist as $folder) {
		$album = newAlbum($folder);
		If (!$album->isDynamic() && $album->checkAccess()) {
			if ($scan)
				$album->getImages();
			$albumlist[] = $album->getID();
			getAllAccessibleAlbums($album, $albumlist, $scan);
		}
	}
}


function getTotalPages($_oneImagePage = false) {
	global $_zp_gallery, $_zp_current_album, $_firstPageImages, $_zp_zenpage, $_zp_current_category;
	if (in_context(ZP_ALBUM | ZP_SEARCH)) {
		$albums_per_page = max(1, getOption('albums_per_page'));
		$pageCount = (int) ceil(getNumAlbums() / $albums_per_page);
		$imageCount = getNumImages();
		if ($_oneImagePage) {
			if ($_oneImagePage === true) {
				$imageCount = min(1, $imageCount);
			} else {
				$imageCount = 0;
			}
		}
		$images_per_page = max(1, getOption('images_per_page'));
		$pageCount = ($pageCount + ceil(($imageCount - $_firstPageImages) / $images_per_page));
		return $pageCount;
	} else if (get_context() == ZP_INDEX) {
		if (galleryAlbumsPerPage() != 0) {
			return (int) ceil($_zp_gallery->getNumAlbums() / galleryAlbumsPerPage());
		} else {
			return NULL;
		}
		return NULL;
	} else if (isset($_zp_zenpage)) {
		if (in_context(ZP_ZENPAGE_NEWS_CATEGORY)) {
			$cat = $_zp_current_category;
		} else {
			$cat = NULL;
		}
		return (int) ceil(count($_zp_zenpage->getArticles(0, NULL, true, NULL, NULL, NULL, $cat)) / ZP_ARTICLES_PER_PAGE);
	}
}


function getPageNumURL($page, $total = null) {
	global $_zp_current_album, $_zp_gallery, $_zp_current_search, $_zp_gallery_page, $_zp_conf_vars;
	if (is_null($total)) {
		$total = getTotalPages();
	}
	if ($page <= 0 || $page > $total) {
		return NULL;
	}
	if (in_context(ZP_SEARCH)) {
		$searchwords = $_zp_current_search->codifySearchString();
		$searchdate = $_zp_current_search->getSearchDate();
		$searchfields = $_zp_current_search->getSearchFields(true);
		$searchpagepath = getSearchURL($searchwords, $searchdate, $searchfields, $page, array('albums' => $_zp_current_search->getAlbumList()));
		return $searchpagepath;
	} else if (in_context(ZP_ALBUM)) {
		return $_zp_current_album->getLink($page);
	} else if (in_array($_zp_gallery_page, array('index.php', 'album.php', 'image.php'))) {
		if (in_context(ZP_INDEX)) {
			$pagination1 = '/';
			$pagination2 = 'index.php';
			if ($page > 1) {
				$pagination1 .= _PAGE_ . '/' . $page . '/';
				$pagination2 .= '?page=' . $page;
			}
		} else {
			return NULL;
		}
	} else {
		
		$pg = stripSuffix($_zp_gallery_page);
		if (array_key_exists($pg, $_zp_conf_vars['special_pages'])) {
			$pagination1 = preg_replace('~^_PAGE_/~', _PAGE_ . '/', $_zp_conf_vars['special_pages'][$pg]['rewrite']) . '/';
		} else {
			$pagination1 = '/' . _PAGE_ . '/' . $pg . '/';
		}
		$pagination2 = 'index.php?p=' . $pg;
		if ($page > 1) {
			$pagination1 .= $page . '/';
			$pagination2 .= '&page=' . $page;
		}
	}
	return zp_apply_filter('getLink', rewrite_path($pagination1, $pagination2), $_zp_gallery_page, $page);
}


function hasNextPage() {
	return (getCurrentPage() < getTotalPages());
}


function getNextPageURL() {
	return getPageNumURL(getCurrentPage() + 1);
}


function printNextPageURL($text, $title = NULL, $class = NULL, $id = NULL) {
	if (hasNextPage()) {
		printLinkHTML(getNextPageURL(), $text, $title, $class, $id);
	} else {
		
	}
}


function hasPrevPage() {
	return (getCurrentPage() > 1);
}


function getPrevPageURL() {
	return getPageNumURL(getCurrentPage() - 1);
}


function printPrevPageURL($text, $title = NULL, $class = NULL, $id = NULL) {
	if (hasPrevPage()) {
		printLinkHTML(getPrevPageURL(), $text, $title, $class, $id);
	} else {
		
	}
}


function printPageNav($prevtext, $separator, $nexttext, $class = 'pagenav', $id = NULL) {
	
	printPrevPageURL($prevtext, gettext("Previous Page"));
	
	printNextPageURL($nexttext, gettext("Next Page"));
	
}


function printPageList($class = 'pagelist', $id = NULL, $navlen = 9) {
	printPageListWithNav(null, null, false, false, $class, $id, false, $navlen);
}


function getPageNavList($_oneImagePage, $navlen, $firstlast, $current, $total) {
	$result = array();
	if (hasPrevPage()) {
		$result['prev'] = getPrevPageURL();
	} else {
		$result['prev'] = NULL;
	}
	if ($firstlast) {
		$result[1] = getPageNumURL(1, $total);
	}

	if ($navlen == 0) {
		$navlen = $total;
	}
	$extralinks = 2;
	if ($firstlast)
		$extralinks = $extralinks + 2;
	$len = floor(($navlen - $extralinks) / 2);
	$j = max(round($extralinks / 2), min($current - $len - (2 - round($extralinks / 2)), $total - $navlen + $extralinks - 1));
	$ilim = min($total, max($navlen - round($extralinks / 2), $current + floor($len)));
	$k1 = round(($j - 2) / 2) + 1;
	$k2 = $total - round(($total - $ilim) / 2);

	for ($i = $j; $i <= $ilim; $i++) {
		$result[$i] = getPageNumURL($i, $total);
	}
	if ($firstlast) {
		$result[$total] = getPageNumURL($total, $total);
	}
	if (hasNextPage()) {
		$result['next'] = getNextPageURL();
	} else {
		$result['next'] = NULL;
	}
	return $result;
}


function printPageListWithNav($prevtext, $nexttext, $_oneImagePage = false, $nextprev = true, $class = 'pagelist', $id = NULL, $firstlast = true, $navlen = 9) {
	$current = getCurrentPage();
	$total = max(1, getTotalPages($_oneImagePage));
	$nav = getPageNavList($_oneImagePage, $navlen, $firstlast, $current, $total);
	if ($total > 1) {
		?>
		<div <?php if ($id)  ?> class="<?php  ?>">
			<ul class="<?php  ?>">
				<?php
				$prev = $nav['prev'];
				unset($nav['prev']);
				$next = $nav['next'];
				unset($nav['next']);
				if ($nextprev) {
					?>
					<li class="prev">
						<?php
						if ($prev) {
							printLinkHTML($prev, html_encode($prevtext), gettext('Previous Page'));
						} else {
							?>
							<span class="disabledlink"><?php  ?></span>
							<?php
						}
						?>
					</li>
					<?php
				}
				$last = NULL;
				if ($firstlast) {
					?>
					<li class="<?php
					if ($current == 1)
						
					else
						
					?>">
								<?php
								if ($current == 1) {
									
								} else {
									printLinkHTML($nav[1], 1, gettext("Page 1"));
								}
								?>
					</li>
					<?php
					$last = 1;
					unset($nav[1]);
				}
				foreach ($nav as $i => $link) {
					$d = $i - $last;
					if ($d > 2) {
						?>
						<li>
							<?php
							$k1 = $i - (int) (($i - $last) / 2);
							printLinkHTML(getPageNumURL($k1, $total), '...', sprintf(ngettext('Page %u', 'Page %u', $k1), $k1));
							?>
						</li>
						<?php
					} else if ($d == 2) {
						?>
						<li>
							<?php
							$k1 = $last + 1;
							printLinkHTML(getPageNumURL($k1, $total), $k1, sprintf(ngettext('Page %u', 'Page %u', $k1), $k1));
							?>
						</li>
						<?php
					}
					?>
					<li<?php if ($current == $i)  ?>>
						<?php
						if ($i == $current) {
							
						} else {
							$title = sprintf(ngettext('Page %1$u', 'Page %1$u', $i), $i);
							printLinkHTML($link, $i, $title);
						}
						?>
					</li>
					<?php
					$last = $i;
					unset($nav[$i]);
					if ($firstlast && count($nav) == 1) {
						break;
					}
				}
				if ($firstlast) {
					foreach ($nav as $i => $link) {
						$d = $i - $last;
						if ($d > 2) {
							$k1 = $i - (int) (($i - $last) / 2);
							?>
							<li>
								<?php printLinkHTML(getPageNumURL($k1, $total), '...', sprintf(ngettext('Page %u', 'Page %u', $k1), $k1)); ?>
							</li>
							<?php
						} else if ($d == 2) {
							$k1 = $last + 1;
							?>
							<li>
								<?php printLinkHTML(getPageNumURL($k1, $total), $k1, sprintf(ngettext('Page %u', 'Page %u', $k1), $k1)); ?>
							</li>
							<?php
						}
						?>
						<li class="last<?php if ($current == $i)  ?>">
							<?php
							if ($current == $i) {
								
							} else {
								printLinkHTML($link, $i, sprintf(ngettext('Page %u', 'Page %u', $i), $i));
							}
							?>
						</li>
						<?php
					}
				}
				if ($nextprev) {
					?>
					<li class="next">
						<?php
						if ($next) {
							printLinkHTML($next, html_encode($nexttext), gettext('Next Page'));
						} else {
							?>
							<span class="disabledlink"><?php  ?></span>
							<?php
						}
						?>
					</li>
					<?php
				}
				?>
			</ul>
		</div>
		<?php
	}
}





function makeAlbumCurrent($album) {
	global $_zp_current_album;
	$_zp_current_album = $album;
	set_context(ZP_INDEX | ZP_ALBUM);
}


function getAlbumTitle() {
	if (!in_context(ZP_ALBUM))
		return false;
	global $_zp_current_album;
	return $_zp_current_album->getTitle();
}


function getBareAlbumTitle() {
	return getBare(getAlbumTitle());
}


function getAnnotatedAlbumTitle() {
	global $_zp_current_album;
	$title = getBareAlbumTitle();
	$pwd = $_zp_current_album->getPassword();
	if (zp_loggedin() && !empty($pwd)) {
		$title .= "\n" . gettext('The album is password protected.');
	}
	if (!$_zp_current_album->getShow()) {
		$title .= "\n" . gettext('The album is un-published.');
	}
	return $title;
}

function printAnnotatedAlbumTitle() {
	
}


function printAlbumTitle() {
	
}

function printBareAlbumTitle() {
	
}


function albumNumber() {
	global $_zp_current_album, $_zp_current_image, $_zp_current_search, $_zp_gallery;
	$name = $_zp_current_album->getFileName();
	if (in_context(ZP_SEARCH)) {
		$albums = $_zp_current_search->getAlbums();
	} else if (in_context(ZP_ALBUM)) {
		$parent = $_zp_current_album->getParent();
		if (is_null($parent)) {
			$albums = $_zp_gallery->getAlbums();
		} else {
			$albums = $parent->getAlbums();
		}
	}
	$c = 0;
	foreach ($albums as $albumfolder) {
		$c++;
		if ($name == $albumfolder) {
			return $c;
		}
	}
	return false;
}


function getParentAlbums($album = null) {
	$parents = array();
	if (in_context(ZP_ALBUM)) {
		global $_zp_current_album, $_zp_current_search, $_zp_gallery;
		if (is_null($album)) {
			if (in_context(ZP_SEARCH_LINKED) && !in_context(ZP_ALBUM_LINKED)) {
				$album = $_zp_current_search->getDynamicAlbum();
				if (empty($album))
					return $parents;
			} else {
				$album = $_zp_current_album;
			}
		}
		while (!is_null($album = $album->getParent())) {
			array_unshift($parents, $album);
		}
	}
	return $parents;
}


function getAlbumBreadcrumb($title = NULL) {
	global $_zp_current_search, $_zp_gallery, $_zp_current_album, $_zp_last_album;
	$output = array();
	if (in_context(ZP_SEARCH_LINKED)) {
		$album = NULL;
		$dynamic_album = $_zp_current_search->getDynamicAlbum();
		if (empty($dynamic_album)) {
			if (!is_null($_zp_current_album)) {
				if (in_context(ZP_ALBUM_LINKED) && $_zp_last_album == $_zp_current_album->name) {
					$album = $_zp_current_album;
				}
			}
		} else {
			if (in_context(ZP_IMAGE) && in_context(ZP_ALBUM_LINKED)) {
				$album = $_zp_current_album;
			} else {
				$album = $dynamic_album;
			}
		}
	} else {
		$album = $_zp_current_album;
	}
	if ($album) {
		if (is_null($title)) {
			$title = $album->getTitle();
			if (empty($title)) {
				$title = gettext('Album Thumbnails');
			}
		}
		return array('link' => $album->getLink(), 'text' => $title, 'title' => getBare($title));
	}
	return false;
}


function printAlbumBreadcrumb($before = '', $after = '', $title = NULL) {
	if ($breadcrumb = getAlbumBreadcrumb($title)) {
		if ($before) {
			$output = '<span class="beforetext">' . html_encode($before) . '</span>';
		} else {
			$output = '';
		}
		$output .= '<a href="' . html_encode($breadcrumb['link']) . '" title="' . html_encode($breadcrumb['title']) . '">';
		$output .= html_encode($breadcrumb['text']);
		$output .= '</a>';
		if ($after) {
			$output .= '<span class="aftertext">' . html_encode($after) . '</span>';
		}
		
	}
}


function printSearchBreadcrumb($between = NULL, $class = NULL, $search = NULL, $archive = NULL, $format = '%B %Y') {
	global $_zp_current_search;
	if (is_null($between)) {
		$between = ' | ';
	}
	if ($class) {
		$class = ' class="' . $class . '"';
	}
	if ($d = $_zp_current_search->getSearchDate()) {
		if (is_null($archive)) {
			$text = gettext('Archive');
			$textdecoration = true;
		} else {
			$text = getBare(html_encode($archive));
			$textdecoration = false;
		}
		
		printf('%s' . $text . '%s', $textdecoration ? '<em>' : '', $textdecoration ? '</em>' : '');
		
		
		if ($format) {
			$d = strtotime($d);
			$d = strftime($format, $d);
		}
		
	} else {
		if (is_null($search)) {
			$text = gettext('Search');
			$textdecoration = true;
		} else {
			$text = getBare(html_encode($search));
			$textdecoration = false;
		}
		printf('%s' . $text . '%s', $textdecoration ? '<em>' : '', $textdecoration ? '</em>' : '');
	}
}


function getParentBreadcrumb() {
	global $_zp_gallery, $_zp_current_search, $_zp_current_album, $_zp_last_album;
	$output = array();
	if (in_context(ZP_SEARCH_LINKED)) {
		$page = $_zp_current_search->page;
		$searchwords = $_zp_current_search->getSearchWords();
		$searchdate = $_zp_current_search->getSearchDate();
		$searchfields = $_zp_current_search->getSearchFields(true);
		$search_album_list = $_zp_current_search->getAlbumList();
		if (!is_array($search_album_list)) {
			$search_album_list = array();
		}
		$searchpagepath = getSearchURL($searchwords, $searchdate, $searchfields, $page, array('albums' => $search_album_list));
		$dynamic_album = $_zp_current_search->getDynamicAlbum();
		if (empty($dynamic_album)) {
			if (empty($searchdate)) {
				$output[] = array('link' => $searchpagepath, 'title' => gettext("Return to search"), 'text' => gettext("Search"));
				if (is_null($_zp_current_album)) {
					return $output;
				} else {
					$parents = getParentAlbums();
				}
			} else {
				return array(array('link' => $searchpagepath, 'title' => gettext("Return to archive"), 'text' => gettext("Archive")));
			}
		} else {
			$album = $dynamic_album;
			$parents = getParentAlbums($album);
			if (in_context(ZP_ALBUM_LINKED)) {
				array_push($parents, $album);
			}
		}

		foreach ($parents as $key => $analbum) {
			$target = $analbum->name;
			if ($target !== $dynamic_album && !in_array($target, $search_album_list)) {
				unset($parents[$key]);
			}
		}
	} else {
		$parents = getParentAlbums();
	}
	$n = count($parents);
	if ($n > 0) {
		array_push($parents, $_zp_current_album);
		$index = -1;
		foreach ($parents as $parent) {
			$index++;
			if($index != 0) {
				$parentparent = $parents[$index-1];
				$page = $parent->getGalleryPage();
				$url = $parentparent->getLink($page);
				$output[] = array('link' => html_encode($url), 'title' => $parentparent->getTitle(), 'text' => $parentparent->getTitle());
			}
		}
	}
	return $output;
}


function printParentBreadcrumb($before = NULL, $between = NULL, $after = NULL, $truncate = NULL, $elipsis = NULL) {
	$crumbs = getParentBreadcrumb();
	if (!empty($crumbs)) {
		if (is_null($between)) {
			$between = ' | ';
		}
		if (is_null($after)) {
			$after = ' | ';
		}
		if (is_null($elipsis)) {
			$elipsis = '...';
		}
		if ($before) {
			$output = '<span class="beforetext">' . html_encode($before) . '</span>';
		} else {
			$output = '';
		}
		if ($between) {
			$between = '<span class="betweentext">' . html_encode($between) . '</span>';
		}
		$i = 0;
		foreach ($crumbs as $crumb) {
			if ($i > 0) {
				$output .= $between;
			}

			$desc = $crumb['title'];
			if (!empty($desc) && $truncate) {
				$desc = truncate_string($desc, $truncate, $elipsis);
			}
			$output .= '<a href="' . html_encode($crumb['link']) . '"' . ' title="' . html_encode(getBare($desc)) . '">' . html_encode($crumb['text']) . '</a>';
			$i++;
		}
		if ($after) {
			$output .= '<span class="aftertext">' . html_encode($after) . '</span>';
		}
		
	}
}


function printHomeLink($before = '', $after = '', $title = NULL, $class = NULL, $id = NULL) {
	global $_zp_gallery;
	$site = rtrim($_zp_gallery->getWebsiteURL(), '/');
	if (!empty($site)) {
		$name = $_zp_gallery->getWebsiteTitle();
		if (empty($name)) {
			$name = gettext('Home');
		}
		if ($site != SEO_FULLWEBPATH) {
			if ($before) {
				
			}
			printLinkHTML($site, $name, $title, $class, $id);
			if ($after) {
				
			}
		}
	}
}


function getAlbumDate($format = null) {
	global $_zp_current_album;
	$d = $_zp_current_album->getDateTime();
	if (empty($d) || ($d == '0000-00-00 00:00:00')) {
		return false;
	}
	if (is_null($format)) {
		return $d;
	}
	return zpFormattedDate($format, strtotime($d));
}


function printAlbumDate($before = '', $format = NULL) {
	global $_zp_current_album;
	if (is_null($format)) {
		$format = DATE_FORMAT;
	}
	$date = getAlbumDate($format);
	if ($date) {
		if ($before) {
			$date = '<span class="beforetext">' . $before . '</span>' . $date;
		}
	}
	
}


function getAlbumLocation() {
	global $_zp_current_album;
	return $_zp_current_album->getLocation();
}


function printAlbumLocation() {
	
}


function getAlbumDesc() {
	if (!in_context(ZP_ALBUM))
		return false;
	global $_zp_current_album;
	return $_zp_current_album->getDesc();
}


function getBareAlbumDesc() {
	return getBare(getAlbumDesc());
}


function printAlbumDesc() {
	global $_zp_current_album;
	
}

function printBareAlbumDesc() {
	
}


function getAlbumCustomData() {
	global $_zp_current_album;
	return $_zp_current_album->getCustomData();
}


function printAlbumCustomData() {
	
}


function getAlbumData($field) {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_album_image;
	return get_language_string($_zp_album_image->get($field));
}


function printAlbumData($field, $label = '') {
	global $_zp_current_album;
	
}


function getAlbumPage($album = NULL) {
	global $_zp_current_album, $_zp_current_image, $_zp_current_search, $_firstPageImages;
	if (is_null($album))
		$album = $_zp_current_album;
	$page = 0;
	if (in_context(ZP_IMAGE) && !in_context(ZP_SEARCH)) {
		if ($_zp_current_album->isDynamic()) {
			$search = $_zp_current_album->getSearchEngine();
			$imageindex = $search->getImageIndex($_zp_current_album->name, $_zp_current_image->filename);
			$numalbums = $search->getNumAlbums();
		} else {
			$imageindex = $_zp_current_image->getIndex();
			$numalbums = $album->getNumAlbums();
		}
		$imagepage = floor(($imageindex - $_firstPageImages) / max(1, getOption('images_per_page'))) + 1;
		$albumpages = ceil($numalbums / max(1, getOption('albums_per_page')));
		if ($albumpages == 0 && $_firstPageImages > 0)
			$imagepage++;
		$page = $albumpages + $imagepage;
	}
	return $page;
}


function getAlbumURL($album = NULL) {
	global $_zp_current_album;
	if (is_null($album))
		$album = $_zp_current_album;
	if (in_context(ZP_IMAGE)) {
		$page = getAlbumPage($album);
		if ($page <= 1)
			$page = 0;
	} else {
		$page = 0;
	}
	return $album->getLink($page);
}


function printAlbumURL($text, $title, $class = NULL, $id = NULL) {
	printLinkHTML(getAlbumURL(), $text, $title, $class, $id);
}


function getAlbumThumb() {
	global $_zp_current_album;
	return $_zp_current_album->getThumb();
}


function getPasswordProtectImage($extra) {
	global $_zp_themeroot;
	$image = '';
	$themedir = SERVERPATH . '/themes/' . basename($_zp_themeroot);
	if (file_exists(internalToFilesystem($themedir . '/images/err-passwordprotected.png'))) {
		$image = $_zp_themeroot . '/images/err-passwordprotected.png';
	} else if (file_exists(internalToFilesystem($themedir . '/images/err-passwordprotected.gif'))) {
		$image = $_zp_themeroot . '/images/err-passwordprotected.gif';
	} else {
		$image = WEBPATH . '/' . ZENFOLDER . '/images/err-passwordprotected.png';
	}
	return '<img src="' . $image . '" ' . $extra . ' alt="protected" />';
}


function printAlbumThumbImage($alt, $class = NULL, $id = NULL , $title = null) {
	global $_zp_current_album, $_zp_themeroot;
	if (!$_zp_current_album->getShow()) {
		$class .= " not_visible";
	}
	$pwd = $_zp_current_album->getPassword();
	if (!empty($pwd)) {
		$class .= " password_protected";
	}

	$class = trim($class);
	if ($class) {
		$class = ' class="' . $class . '"';
	}
	if ($id) {
		$id = ' id="' . $id . '"';
	}
	if ($title) {
		$title = ' title="' . $title . '"';
	}
	$thumbobj = $_zp_current_album->getAlbumThumbImage();
	$sizes = getSizeDefaultThumb($thumbobj);
	$size = ' width="' . $sizes[0] . '" height="' . $sizes[1] . '"';
	if (!getOption('use_lock_image') || $_zp_current_album->isMyItem(LIST_RIGHTS) || empty($pwd)) {
		$html = '<img src="' . html_encode(pathurlencode($thumbobj->getThumb('album'))) . '"' . $size . ' alt="' . html_encode($alt) . '"' . $class . $id . $title . ' />';
		$html = zp_apply_filter('standard_album_thumb_html', $html);
		
	} else {
		
	}
}


function getCustomAlbumThumb($size, $width = NULL, $height = NULL, $cropw = NULL, $croph = NULL, $cropx = NULL, $cropy = null, $effects = NULL) {
	global $_zp_current_album;
	$thumb = $_zp_current_album->getAlbumThumbImage();
	return $thumb->getCustomImage($size, $width, $height, $cropw, $croph, $cropx, $cropy, true, $effects);
}


function printCustomAlbumThumbImage($alt, $size, $width = NULL, $height = NULL, $cropw = NULL, $croph = NULL, $cropx = NULL, $cropy = null, $class = NULL, $id = NULL, $title = null) {
	global $_zp_current_album;
	if (!$_zp_current_album->getShow()) {
		$class .= " not_visible";
	}
	$pwd = $_zp_current_album->getPassword();
	if (!empty($pwd)) {
		$class .= " password_protected";
	}
	$class = trim($class);
	
	$sizes = getSizeCustomImage($size, $width, $height, $cropw, $croph, $cropx, $cropy);
	$sizing = ' width="' . $sizes[0] . '" height="' . $sizes[1] . '"';
	if($class) {
		$class = ' class="' . $class . '"';
	}
	if($id) {
		$id = ' id="' . $id . '"';
	}
	if($title) {
		$title = ' title="' . html_encode($title) . '"';
	}
	if (!getOption('use_lock_image') || $_zp_current_album->isMyItem(LIST_RIGHTS) || empty($pwd)) {
		$html = '<img src="' . html_encode(pathurlencode(getCustomAlbumThumb($size, $width, $height, $cropw, $croph, $cropx, $cropy))) . '"' . $sizing . ' alt="' . html_encode($alt) . '"' 
						. $id . $class . $title . ' />';
		$html = zp_apply_filter('custom_album_thumb_html', $html);
		
	} else {
		
	}
}


function getMaxSpaceContainer(&$width, &$height, $image, $thumb = false) {
	global $_zp_gallery;
	$upscale = getOption('image_allow_upscale');
	$imagename = $image->filename;
	if (!isImagePhoto($image) & $thumb) {
		$imgfile = $image->getThumbImageFile();
		$image = zp_imageGet($imgfile);
		$s_width = zp_imageWidth($image);
		$s_height = zp_imageHeight($image);
	} else {
		$s_width = $image->get('width');
		if ($s_width == 0)
			$s_width = max($width, $height);
		$s_height = $image->get('height');
		if ($s_height == 0)
			$s_height = max($width, $height);
	}

	$newW = round($height / $s_height * $s_width);
	$newH = round($width / $s_width * $s_height);
	if (DEBUG_IMAGE)
		debugLog("getMaxSpaceContainer($width, $height, $imagename, $thumb): \$s_width=$s_width; \$s_height=$s_height; \$newW=$newW; \$newH=$newH; \$upscale=$upscale;");
	if ($newW > $width) {
		if ($upscale || $s_height > $newH) {
			$height = $newH;
		} else {
			$height = $s_height;
			$width = $s_width;
		}
	} else {
		if ($upscale || $s_width > $newW) {
			$width = $newW;
		} else {
			$height = $s_height;
			$width = $s_width;
		}
	}
}


function getCustomAlbumThumbMaxSpace($width, $height) {
	global $_zp_current_album;
	$albumthumb = $_zp_current_album->getAlbumThumbImage();
	getMaxSpaceContainer($width, $height, $albumthumb, true);
	return getCustomAlbumThumb(NULL, $width, $height, NULL, NULL, NULL, NULL);
}


function printCustomAlbumThumbMaxSpace($alt, $width, $height, $class = NULL, $id = NULL, $title = null) {
	global $_zp_current_album;
	$albumthumb = $_zp_current_album->getAlbumThumbImage();
	getMaxSpaceContainer($width, $height, $albumthumb, true);
	printCustomAlbumThumbImage($alt, NULL, $width, $height, NULL, NULL, NULL, NULL, $class, $id, $title);
}


function getNextAlbum() {
	global $_zp_current_album, $_zp_current_search, $_zp_gallery;
	if (in_context(ZP_SEARCH) || in_context(ZP_SEARCH_LINKED)) {
		$nextalbum = $_zp_current_search->getNextAlbum($_zp_current_album->name);
	} else if (in_context(ZP_ALBUM)) {
		$nextalbum = $_zp_current_album->getNextAlbum();
	} else {
		return null;
	}
	return $nextalbum;
}


function getNextAlbumURL() {
	$nextalbum = getNextAlbum();
	if ($nextalbum) {
		return $nextalbum->getLink();
	}
	return false;
}


function getPrevAlbum() {
	global $_zp_current_album, $_zp_current_search;
	if (in_context(ZP_SEARCH) || in_context(ZP_SEARCH_LINKED)) {
		$prevalbum = $_zp_current_search->getPrevAlbum($_zp_current_album->name);
	} else if (in_context(ZP_ALBUM)) {
		$prevalbum = $_zp_current_album->getPrevAlbum();
	} else {
		return null;
	}
	return $prevalbum;
}


function getPrevAlbumURL() {
	$prevalbum = getPrevAlbum();
	if ($prevalbum) {
		return $prevalbum->getLink();
	}
	return false;
}


function isImagePage() {
	if (getNumImages()) {
		global $_zp_page, $_firstPageImages;
		$imagestart = getTotalPages(2); 
		if (!$_firstPageImages)
			$imagestart++; 
		return $_zp_page >= $imagestart;
	}
	return false;
}


function isAlbumPage() {
	global $_zp_page;
	$pageCount = Ceil(getNumAlbums() / max(1, getOption('albums_per_page')));
	return ($_zp_page <= $pageCount);
}


function getNumImages() {
	global $_zp_current_album, $_zp_current_search;
	if ((in_context(ZP_SEARCH_LINKED) && !in_context(ZP_ALBUM_LINKED)) || in_context(ZP_SEARCH) && is_null($_zp_current_album)) {
		return $_zp_current_search->getNumImages();
	} else {
		return $_zp_current_album->getNumImages();
	}
}


function getTotalImagesIn($album) {
	global $_zp_gallery;
	$sum = $album->getNumImages();
	$subalbums = $album->getAlbums(0);
	while (count($subalbums) > 0) {
		$albumname = array_pop($subalbums);
		$album = newAlbum($albumname);
		$sum = $sum + getTotalImagesIn($album);
	}
	return $sum;
}


function next_image($all = false, $firstPageCount = NULL, $mine = NULL) {
	global $_zp_images, $_zp_current_image, $_zp_current_album, $_zp_page, $_zp_current_image_restore, $_zp_current_search, $_zp_gallery, $_firstPageImages;
	if (is_null($firstPageCount)) {
		$firstPageCount = $_firstPageImages;
	}
	$imagePageOffset = getTotalPages(2); 
	if ($all) {
		$imagePage = 1;
		$firstPageCount = 0;
	} else {
		$_firstPageImages = $firstPageCount; 
		$imagePage = $_zp_page - $imagePageOffset;
	}
	if ($firstPageCount > 0 && $imagePageOffset > 0) {
		$imagePage = $imagePage + 1; 
	}
	if ($imagePage <= 0) {
		return false; 
	}
	if (is_null($_zp_images)) {
		if (in_context(ZP_SEARCH)) {
			$_zp_images = $_zp_current_search->getImages($all ? 0 : ($imagePage), $firstPageCount, NULL, NULL, true, $mine);
		} else {
			$_zp_images = $_zp_current_album->getImages($all ? 0 : ($imagePage), $firstPageCount, NULL, NULL, true, $mine);
		}
		if (empty($_zp_images)) {
			return NULL;
		}
		$_zp_current_image_restore = $_zp_current_image;
		$img = array_shift($_zp_images);
		$_zp_current_image = newImage($_zp_current_album, $img, true, true);
		save_context();
		add_context(ZP_IMAGE);
		return true;
	} else if (empty($_zp_images)) {
		$_zp_images = NULL;
		$_zp_current_image = $_zp_current_image_restore;
		restore_context();
		return false;
	} else {
		$img = array_shift($_zp_images);
		$_zp_current_image = newImage($_zp_current_album, $img, true, true);
		return true;
	}
}





function makeImageCurrent($image) {
	if (!is_object($image))
		return;
	global $_zp_current_album, $_zp_current_image;
	$_zp_current_image = $image;
	$_zp_current_album = $_zp_current_image->getAlbum();
	set_context(ZP_INDEX | ZP_ALBUM | ZP_IMAGE);
}


function getImageTitle() {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_current_image;
	return $_zp_current_image->getTitle();
}


function getBareImageTitle() {
	return getBare(getImageTitle());
}


function getAnnotatedImageTitle() {
	global $_zp_current_image;
	$title = getBareImageTitle();
	if (!$_zp_current_image->getShow()) {
		$title .= "\n" . gettext('The image is marked un-published.');
	}
	return $title;
}

function printAnnotatedImageTitle() {
	
}


function printImageTitle() {
	
}

function printBareImageTitle() {
	
}


function imageNumber() {
	global $_zp_current_image, $_zp_current_search, $_zp_current_album;
	$name = $_zp_current_image->getFileName();
	if (in_context(ZP_SEARCH) || (in_context(ZP_SEARCH_LINKED) && !in_context(ZP_ALBUM_LINKED))) {
		$folder = $_zp_current_image->imagefolder;
		$images = $_zp_current_search->getImages();
		$c = 0;
		foreach ($images as $image) {
			$c++;
			if ($name == $image['filename'] && $folder == $image['folder']) {
				return $c;
			}
		}
	} else {
		return $_zp_current_image->getIndex() + 1;
	}
	return false;
}


function getImageDate($format = null) {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_current_image;
	$d = $_zp_current_image->getDateTime();
	if (empty($d) || ($d == '0000-00-00 00:00:00')) {
		return false;
	}
	if (is_null($format)) {
		return $d;
	}
	return zpFormattedDate($format, strtotime($d));
}


function printImageDate($before = '', $format = null) {
	global $_zp_current_image;
	if (is_null($format)) {
		$format = DATE_FORMAT;
	}
	$date = getImageDate($format);
	if ($date) {
		if ($before) {
			$date = '<span class="beforetext">' . $before . '</span>' . $date;
		}
	}
	
}



function getImageLocation() {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_current_image;
	return $_zp_current_image->getLocation();
}


function getImageCity() {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_current_image;
	return $_zp_current_image->getcity();
}


function getImageState() {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_current_image;
	return $_zp_current_image->getState();
}


function getImageCountry() {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_current_image;
	return $_zp_current_image->getCountry();
}


function getImageDesc() {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_current_image;
	return $_zp_current_image->getDesc();
}


function getBareImageDesc() {
	return getBare(getImageDesc());
}


function printImageDesc() {
	
}

function printBareImageDesc() {
	
}


function getImageData($field) {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_current_image;
	return get_language_string($_zp_current_image->get($field));
}


function getImageCustomData() {
	Global $_zp_current_image;
	return $_zp_current_image->getCustomData();
}


function printImageCustomData() {
	$data = getImageCustomData();
	$data = str_replace("\r\n", "\n", $data);
	$data = str_replace("\n", "<br />", $data);
	
}


function printImageData($field, $label = '') {
  global $_zp_current_image;
  $text = getImageData($field);
  if (!empty($text)) {
    
  }
}


function hasNextImage() {
  global $_zp_current_image;
  if (is_null($_zp_current_image))
    return false;
  return $_zp_current_image->getNextImage();
}


function hasPrevImage() {
  global $_zp_current_image;
  if (is_null($_zp_current_image))
    return false;
  return $_zp_current_image->getPrevImage();
}


function getNextImageURL() {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_current_album, $_zp_current_image;
	if (is_null($_zp_current_image))
		return false;
	$nextimg = $_zp_current_image->getNextImage();
	return $nextimg->getLink();
}


function getPrevImageURL() {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_current_album, $_zp_current_image;
	if (is_null($_zp_current_image))
		return false;
	$previmg = $_zp_current_image->getPrevImage();
	return $previmg->getLink();
}


function getPrevImageThumb() {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_current_image;
	if (is_null($_zp_current_image))
		return false;
	$img = $_zp_current_image->getPrevImage();
	return $img->getThumb();
}


function getNextImageThumb() {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_current_image;
	if (is_null($_zp_current_image))
		return false;
	$img = $_zp_current_image->getNextImage();
	return $img->getThumb();
}


function getImageURL() {
	if (!in_context(ZP_IMAGE))
		return false;
	global $_zp_current_image;
	if (is_null($_zp_current_image))
		return false;
	return $_zp_current_image->getLink();
}


function printImageURL($text, $title, $class = NULL, $id = NULL) {
	printLinkHTML(getImageURL(), $text, $title, $class, $id);
}


function getImageMetaData($image = NULL, $displayonly = true) {
	global $_zp_current_image, $_zp_exifvars;
	if (is_null($image))
		$image = $_zp_current_image;
	if (is_null($image) || !$image->get('hasMetadata')) {
		return false;
	}
	$data = $image->getMetaData();
	if ($displayonly) {
		foreach ($data as $field => $value) { 
			if (!$value || !$_zp_exifvars[$field][3]) {
				unset($data[$field]);
			}
		}
	}
	if (count($data) > 0) {
		return $data;
	}
	return false;
}


function printImageMetadata($title = NULL, $toggle = true, $id = 'imagemetadata', $class = null, $span = NULL) {
	global $_zp_exifvars, $_zp_current_image;
	if (false === ($exif = getImageMetaData($_zp_current_image, true))) {
		return;
	}
	if (is_null($title)) {
		$title = gettext('Image Info');
	}
	if ($class) {
		$class = ' class="' . $class . '"';
	}
	if (!$span) {
		$span = 'exif_link';
	}
	$dataid = $id . '_data';
	if ($id) {
		$id = ' id="' . $id . '"';
	}
	$refh = $refa = $style = '';
	if ($toggle == 'colorbox' && zp_has_filter('theme_head', 'colorbox::css')) {
		$refh = '<a href="
		$refa = '</a>';
		$style = ' style="display:none"';
	} else if ($toggle) {
		$refh = '<a class="metadata_toggle" href="
		$refa = '</a>';
		$style = ' style="display:none"';
	}
	?>
	<span id="<?php  ?>" class="metadata_title">
		<?php  ?><?php  ?><?php  ?>
	</span>
	<?php if($toggle) { ?>
		<script>
			$(".metadata_toggle").click(function(event) {
				event.preventDefault();
				$("
			});
		</script>
	<?php } ?>
	<div id="<?php  ?>"<?php  ?>>
		<div<?php  ?>>
			<table>
				<?php
				foreach ($exif as $field => $value) {
					$label = $_zp_exifvars[$field][2];
					
					switch ($_zp_exifvars[$field][6]) {
						case 'time':
							
							break;
						default:
							
							break;
					}
					
				}
				?>
			</table>
		</div>
	</div>
	<?php
}


function getSizeCustomImage($size, $width = NULL, $height = NULL, $cw = NULL, $ch = NULL, $cx = NULL, $cy = NULL, $image = NULL) {
  global $_zp_current_image;
  if (is_null($image))
    $image = $_zp_current_image;
  if (is_null($image))
    return false;

  $h = $image->getHeight();
  $w = $image->getWidth();

  
  if (!is_null($size) && !is_null($width) && !is_null($height)) {
    return array($width, $height);
  }
	if (isImageVideo($image)) { 
    return array($w, $h);
  }
  $side = getOption('image_use_side');
  $us = getOption('image_allow_upscale');
  $args = getImageParameters(array($size, $width, $height, $cw, $ch, $cx, $cy, NULL, NULL, NULL, NULL, NULL, NULL, NULL), $image->album->name);
  @list($size, $width, $height, $cw, $ch, $cx, $cy, $quality, $thumb, $crop, $thumbstandin, $passedWM, $adminrequest, $effects) = $args;
  if (!empty($size)) {
    $dim = $size;
    $width = $height = false;
  } else if (!empty($width)) {
    $dim = $width;
    $size = $height = false;
  } else if (!empty($height)) {
    $dim = $height;
    $size = $width = false;
  } else {
    $dim = 1;
  }

  if ($w == 0) {
    $hprop = 1;
  } else {
    $hprop = round(($h / $w) * $dim);
  }
  if ($h == 0) {
    $wprop = 1;
  } else {
    $wprop = round(($w / $h) * $dim);
  }

  if (($size && ($side == 'longest' && $h > $w) || ($side == 'height') || ($side == 'shortest' && $h < $w)) || $height) {

    $newh = $dim;
    $neww = $wprop;
  } else {

    $neww = $dim;
    $newh = $hprop;
  }
  if (!$us && $newh >= $h && $neww >= $w) {
    return array($w, $h);
  } else {
    if ($cw && $cw < $neww)
      $neww = $cw;
    if ($ch && $ch < $newh)
      $newh = $ch;
    if ($size && $ch && $cw) {
      $neww = $cw;
      $newh = $ch;
    }
    return array($neww, $newh);
  }
}


function getSizeDefaultImage($size = NULL, $image = NULL) {
  if (is_null($size))
    $size = getOption('image_size');
  return getSizeCustomImage($size, NULL, NULL, NULL, NULL, NULL, NULL, $image);
}


function getSizeFullImage($image = NULL) {
	global $_zp_current_image;
	if (is_null($image))
		$image = $_zp_current_image;
	if (is_null($image))
		return false;
	return array($image->getWidth(), $image->getHeight());
}


function getDefaultWidth($size = NULL, $image = NULL) {
	$size_a = getSizeDefaultImage($size, $image);
	return $size_a[0];
}


function getDefaultHeight($size = NULL, $image = NULL) {
	$size_a = getSizeDefaultImage($size, $image);
	return $size_a[1];
}


function getFullWidth($image = NULL) {
	global $_zp_current_image;
	if (is_null($image))
		$image = $_zp_current_image;
	if (is_null($image))
		return false;
	return $image->getWidth();
}


function getFullHeight($image = NULL) {
	global $_zp_current_image;
	if (is_null($image))
		$image = $_zp_current_image;
	if (is_null($image))
		return false;
	return $image->getHeight();
}


function isLandscape($image = NULL) {
	if (getFullWidth($image) >= getFullHeight($image))
		return true;
	return false;
}


function getDefaultSizedImage($image = NULL) {
	global $_zp_current_image;
	if (is_null($image))
		$image = $_zp_current_image;
	if (is_null($image))
		return false;
	return $image->getSizedImage(getOption('image_size'));
}


function printDefaultSizedImage($alt, $class = NULL, $id = NULL, $title = null) {
	global $_zp_current_image;
	if (is_null($_zp_current_image))
		return;
	if (!$_zp_current_image->getShow()) {
		$class .= " not_visible";
	}
	$album = $_zp_current_image->getAlbum();
	$pwd = $album->getPassword();
	if (!empty($pwd)) {
		$class .= " password_protected";
	}
	if ($class) {
		$class = ' class="' . $class . '"';
	}
	if ($id) {
		$id = ' id="' . $id . '"';
	}
	if ($title) {
		$title = ' title="' . html_encode($title) . '"';
	} 
	if (isImagePhoto()) { 
		$html = '<img src="' . html_encode(pathurlencode(getDefaultSizedImage())) . '" alt="' . html_encode($alt) . '"' .
						' width="' . getDefaultWidth() . '" height="' . getDefaultHeight() . '"' . $class . $id . $title . ' />';
		$html = zp_apply_filter('standard_image_html', $html);
		
	} else { 
		
	}
}


function getImageThumb() {
	global $_zp_current_image;
	if (is_null($_zp_current_image))
		return false;
	return $_zp_current_image->getThumb();
}


function printImageThumb($alt, $class = NULL, $id = NULL, $title = null) {
	global $_zp_current_image;
	if (is_null($_zp_current_image))
		return;
	if (!$_zp_current_image->getShow()) {
		$class .= " not_visible";
	}
	$album = $_zp_current_image->getAlbum();
	$pwd = $album->getPassword();
	if (!empty($pwd)) {
		$class .= " password_protected";
	}
	$url = getImageThumb();
	$sizes = getSizeDefaultThumb();
	$size = ' width="' . $sizes[0] . '" height="' . $sizes[1] . '"';
	$class = trim($class);
	if ($class) {
		$class = ' class="' . $class . '"';
	}
	if ($id) {
		$id = ' id="' . $id . '"';
	}
	if($title) {
		$title = ' title="' . html_encode($title) . '"';
	}
	$html = '<img src="' . html_encode(pathurlencode($url)) . '"' . $size . ' alt="' . html_encode($alt) . '"' . $class . $id . $title . " />";
	$html = zp_apply_filter('standard_image_thumb_html', $html);
	
}


function getSizeDefaultThumb($image = NULL) {
	global $_zp_current_image;
	if (is_null($image)) {
		$image = $_zp_current_image;
	}
	$s = getOption('thumb_size');
	if (getOption('thumb_crop')) {
		$w = getOption('thumb_crop_width');
		$h = getOption('thumb_crop_height');
		$sizes = getSizeCustomImage($s, $w, $h, $w, $h, null, null, $image);
	} else {
		$w = $h = $s;
		getMaxSpaceContainer($w, $h, $image, true);
		$sizes = array($w, $h);
	}
	return $sizes;
}


function getFullImageURL($image = NULL) {
	global $_zp_current_image;
	if (is_null($image)) {
		$image = $_zp_current_image;
	}
	if (is_null($image)) {
		return false;
	}
	$outcome = getOption('protect_full_image');
	if ($outcome == 'No access') {
		return NULL;
	}
	if ($outcome == 'Unprotected') {
		return $image->getFullImageURL();
	} else {
		return getProtectedImageURL($image, $outcome);
	}
}


function getUnprotectedImageURL($image = NULL) {
	global $_zp_current_image;
	if (is_null($image)) {
		$image = $_zp_current_image;
	}
	if (!is_null($image)) {
		return $image->getFullImageURL();
	}
}


function getProtectedImageURL($image = NULL, $disposal = NULL) {
	global $_zp_current_image;
	if (is_null($disposal)) {
		$disposal = getOption('protect_full_image');
	}
	if ($disposal == 'No access')
		return NULL;
	if (is_null($image)) {
		if (!in_context(ZP_IMAGE))
			return false;
		if (is_null($_zp_current_image))
			return false;
		$image = $_zp_current_image;
	}
	$album = $image->getAlbum();
	$watermark_use_image = getWatermarkParam($image, WATERMARK_FULL);
	if (!empty($watermark_use_image)) {
		$wmt = $watermark_use_image;
	} else {
		$wmt = false;
	}
	$args = array('FULL', NULL, NULL, NULL, NULL, NULL, NULL, (int) getOption('full_image_quality'), NULL, NULL, NULL, $wmt, false, NULL, NULL);
	$cache_file = getImageCacheFilename($album->name, $image->filename, $args);
	$cache_path = SERVERCACHE . $cache_file;
	if ($disposal != 'Download' && OPEN_IMAGE_CACHE && file_exists($cache_path)) {
		return WEBPATH . '/' . CACHEFOLDER . pathurlencode(imgSrcURI($cache_file));
	} else if ($disposal == 'Unprotected') {
		return getImageURI($args, $album->name, $image->filename, $image->filemtime);
	} else {
		$params = '&q=' . getOption('full_image_quality');
		if (!empty($watermark_use_image)) {
			$params .= '&wmk=' . $watermark_use_image;
		}
		if ($disposal) {
			$params .= '&dsp=' . $disposal;
		}
		$params .= '&check=' . sha1(HASH_SEED . serialize($args));
		if (is_array($image->filename)) {
			$album = dirname($image->filename['source']);
			$image = basename($image->filename['source']);
		} else {
			$album = $album->name;
			$image = $image->filename;
		}
		return WEBPATH . '/' . ZENFOLDER . '/full-image.php?a=' . $album . '&i=' . $image . $params;
	}
}


function getSizedImageURL($size) {
	return getCustomImageURL($size);
}


function getCustomImageURL($size, $width = NULL, $height = NULL, $cropw = NULL, $croph = NULL, $cropx = NULL, $cropy = NULL, $thumbStandin = false, $effects = NULL) {
	global $_zp_current_image;
	if (is_null($_zp_current_image))
		return false;
	return $_zp_current_image->getCustomImage($size, $width, $height, $cropw, $croph, $cropx, $cropy, $thumbStandin, $effects);
}


function printCustomSizedImage($alt, $size, $width = NULL, $height = NULL, $cropw = NULL, $croph = NULL, $cropx = NULL, $cropy = NULL, $class = NULL, $id = NULL, $thumbStandin = false, $effects = NULL, $title = null) {
	global $_zp_current_image;
	if (is_null($_zp_current_image))
		return;
	if (!$_zp_current_image->getShow()) {
		$class .= " not_visible";
	}
	$album = $_zp_current_image->getAlbum();
	$pwd = $album->getPassword();
	if (!empty($pwd)) {
		$class .= " password_protected";
	}
	if ($size) {
		$dims = getSizeCustomImage($size);
		$sizing = ' width="' . $dims[0] . '" height="' . $dims[1] . '"';
	} else {
		$sizing = '';
		if ($width)
			$sizing .= ' width="' . $width . '"';
		if ($height)
			$sizing .= ' height="' . $height . '"';
	}
	if ($id) {
		$id = ' id="' . $id . '"';
	}
	if ($class) {
		$class = ' class="' . $class . '"';
	}
	if($title) {
		$title = ' title="' . html_encode($title) . '"';
	}
	if (isImagePhoto() || $thumbStandin) {
		$html = '<img src="' . html_encode(pathurlencode(getCustomImageURL($size, $width, $height, $cropw, $croph, $cropx, $cropy, $thumbStandin, $effects))) . '"' .
						' alt="' . html_encode($alt) . '"' .
						$id . $class . $sizing . $title . ' />';
		$html = zp_apply_filter('custom_image_html', $html, $thumbStandin);
		
	} else { 
		
	}
}


function getCustomSizedImageMaxSpace($width, $height) {
	global $_zp_current_image;
	if (is_null($_zp_current_image))
		return false;
	getMaxSpaceContainer($width, $height, $_zp_current_image);
	return getCustomImageURL(NULL, $width, $height);
}


function getCustomSizedImageThumbMaxSpace($width, $height) {
	global $_zp_current_image;
	if (is_null($_zp_current_image))
		return false;
	getMaxSpaceContainer($width, $height, $_zp_current_image, true);
	return getCustomImageURL(NULL, $width, $height, NULL, NULL, NULL, NULL, true);
}


function printCustomSizedImageThumbMaxSpace($alt, $width, $height, $class = NULL, $id = NULL, $title = null) {
	global $_zp_current_image;
	if (is_null($_zp_current_image))
		return;
	getMaxSpaceContainer($width, $height, $_zp_current_image, true);
	printCustomSizedImage($alt, NULL, $width, $height, NULL, NULL, NULL, NULL, $class, $id, true, null, $title);
}


function printCustomSizedImageMaxSpace($alt, $width, $height, $class = NULL, $id = NULL, $thumb = false, $title = null) {
	global $_zp_current_image;
	if (is_null($_zp_current_image))
		return;
	getMaxSpaceContainer($width, $height, $_zp_current_image, $thumb);
	printCustomSizedImage($alt, NULL, $width, $height, NULL, NULL, NULL, NULL, $class, $id, $thumb, null, $title);
}


function printSizedImageURL($size, $text, $title, $class = NULL, $id = NULL) {
	printLinkHTML(getSizedImageURL($size), $text, $title, $class, $id);
}


function filterImageQuery($result, $source) {
	if ($result) {
		while ($row = db_fetch_assoc($result)) {
			$image = newImage(null, $row);
   $album = $image->album;
   if ($album->name == $source || $album->checkAccess()) {
				if (isImagePhoto($image)) {
					if ($image->checkAccess()) {
						return $image;
					}
				}
			}
		}
		db_free_result($result);
	}
	return NULL;
}


function getRandomImages($daily = false) {
	global $_zp_gallery;
	if ($daily) {
		$potd = getSerializedArray(getOption('picture_of_the_day'));
		if (date('Y-m-d', $potd['day']) == date('Y-m-d')) {
			$album = newAlbum($potd['folder'], true, true);
			if ($album->exists) {
				$image = newImage($album, $potd['filename'], true);
				if ($image->exists) {
					return $image;
				}
			}
		}
	}
	if (zp_loggedin()) {
		$imageWhere = '';
	} else {
		$imageWhere = " AND " . prefix('images') . ".show=1";
	}
	$result = query('SELECT `folder`, `filename` ' .
					' FROM ' . prefix('images') .
					' INNER JOIN ' . prefix('albums') . ' ON ' . prefix('images') . '.albumid = ' . prefix('albums') . '.id ' .
					' INNER JOIN (SELECT CEIL(RAND() * (SELECT MAX(id) FROM ' . prefix('images') . ')) AS id) AS r2 ON ' . prefix('images') . '.id >= r2.id ' . 
					' WHERE ' . prefix('albums') . '.folder!="" ' . $imageWhere . ' ORDER BY ' . prefix('images') . '.id LIMIT 1');

	$image = filterImageQuery($result, NULL);
	if ($image) {
		if ($daily) {
			$potd = array('day' => time(), 'folder' => $image->getAlbumName(), 'filename' => $image->getFileName());
			setThemeOption('picture_of_the_day', serialize($potd), NULL, $_zp_gallery->getCurrentTheme());
		}
		return $image;
	}
	return NULL;
}


function getRandomImagesAlbum($rootAlbum = NULL, $daily = false) {
	global $_zp_current_album, $_zp_gallery;
	if (empty($rootAlbum) && !in_context(ZP_ALBUM)) {
		return null;
	}
	if (empty($rootAlbum)) {
		$album = $_zp_current_album;
	} else {
		if (is_object($rootAlbum)) {
			$album = $rootAlbum;
		} else {
			$album = newAlbum($rootAlbum);
		}
	}
	if ($daily && ($potd = getOption('picture_of_the_day:' . $album->name))) {
		$potd = getSerializedArray($potd);
		if (date('Y-m-d', $potd['day']) == date('Y-m-d')) {
			$rndalbum = newAlbum($potd['folder']);
			$image = newImage($rndalbum, $potd['filename']);
			if ($image->exists)
				return $image;
		}
	}
	$image = NULL;
	if ($album->isDynamic()) {
		$images = $album->getImages(0);
		shuffle($images);
		while (count($images) > 0) {
			$result = array_pop($images);
			if (Gallery::validImage($result['filename'])) {
				$image = newImage(newAlbum($result['folder']), $result['filename']);
			}
		}
	} else {
		$albumfolder = $album->getFileName();
		if ($album->isMyItem(LIST_RIGHTS)) {
			$imageWhere = '';
			$albumInWhere = '';
		} else {
			$imageWhere = " AND " . prefix('images') . ".show=1";
			$albumInWhere = prefix('albums') . ".show=1";
		}
		$query = "SELECT id FROM " . prefix('albums') . " WHERE ";
		if ($albumInWhere) {
			$query .= $albumInWhere . ' AND ';
		}
		$query .= "folder LIKE " . db_quote(db_LIKE_escape($albumfolder) . '%');
		$result = query($query);
		if ($result) {
			$albumids = array();
			while ($row = db_fetch_assoc($result)) {
				$albumids[] = $row['id'];
			}
			if (empty($albumids)) {
				$albumInWhere = ' AND ' . $albumInWhere;
			} else {
				$albumInWhere = ' AND ' . prefix('albums') . ".id IN (" . implode(',', $albumids) . ')';
			}
			db_free_result($result);
			$sql = 'SELECT `folder`, `filename` ' .
							' FROM ' . prefix('images') . ', ' . prefix('albums') .
							' WHERE ' . prefix('albums') . '.folder!="" AND ' . prefix('images') . '.albumid = ' .
							prefix('albums') . '.id ' . $albumInWhere . $imageWhere . ' ORDER BY RAND()';
			$result = query($sql);
			$image = filterImageQuery($result, $album->name);
		}
	}
	if ($image) {
		if ($daily) {
			$potd = array('day' => time(), 'folder' => $image->getAlbumName(), 'filename' => $image->getFileName());
			setThemeOption('picture_of_the_day:' . $album->name, serialize($potd), NULL, $_zp_gallery->getCurrentTheme());
		}
	}
	return $image;
}


function printRandomImages($number = 5, $class = null, $option = 'all', $rootAlbum = '', $width = NULL, $height = NULL, $crop = NULL, $fullimagelink = false) {
	if (is_null($crop) && is_null($width) && is_null($height)) {
		$crop = 2;
	} else {
		if (is_null($width))
			$width = 85;
		if (is_null($height))
			$height = 85;
		if (is_null($crop)) {
			$crop = 1;
		} else {
			$crop = (int) $crop && true;
		}
	}
	if (!empty($class))
		$class = ' class="' . $class . '"';
	
	for ($i = 1; $i <= $number; $i++) {
		switch ($option) {
			case "all":
				$randomImage = getRandomImages();
				break;
			case "album":
				$randomImage = getRandomImagesAlbum($rootAlbum);
				break;
		}
		if (is_object($randomImage) && $randomImage->exists) {
			
			if ($fullimagelink) {
				$randomImageURL = $randomImage->getFullimageURL();
			} else {
				$randomImageURL = $randomImage->getLink();
			}
			
			switch ($crop) {
				case 0:
					$sizes = getSizeCustomImage($width, NULL, NULL, NULL, NULL, NULL, NULL, $randomImage);
					$html = '<img src="' . html_encode(pathurlencode($randomImage->getCustomImage($width, NULL, NULL, NULL, NULL, NULL, NULL, TRUE))) . '" width="' . $sizes[0] . '" height="' . $sizes[1] . '" alt="' . html_encode($randomImage->getTitle()) . '" />' . "\n";
					break;
				case 1:
					$sizes = getSizeCustomImage(NULL, $width, $height, $width, $height, NULL, NULL, $randomImage);
					$html = '<img src="' . html_encode(pathurlencode($randomImage->getCustomImage(NULL, $width, $height, $width, $height, NULL, NULL, TRUE))) . '" width="' . $sizes[0] . '" height="' . $sizes[1] . '" alt="' . html_encode($randomImage->getTitle()) . '" />' . "\n";
					break;
				case 2:
					$sizes = getSizeDefaultThumb($randomImage);
					$html = '<img src="' . html_encode(pathurlencode($randomImage->getThumb())) . '" width="' . $sizes[0] . '" height="' . $sizes[1] . '" alt="' . html_encode($randomImage->getTitle()) . '" />' . "\n";
					break;
			}
			
			
			
		} else {
			break;
		}
	}
	
}


function getTags() {
	if (in_context(ZP_IMAGE)) {
		global $_zp_current_image;
		return $_zp_current_image->getTags();
	} else if (in_context(ZP_ALBUM)) {
		global $_zp_current_album;
		return $_zp_current_album->getTags();
	} else if (in_context(ZP_ZENPAGE_PAGE)) {
		global $_zp_current_zenpage_page;
		return $_zp_current_zenpage_page->getTags();
	} else if (in_context(ZP_ZENPAGE_NEWS_ARTICLE)) {
		global $_zp_current_zenpage_news;
		return $_zp_current_zenpage_news->getTags();
	}
	return array();
}


function printTags($option = 'links', $preText = NULL, $class = NULL, $separator = ', ') {
	global $_zp_current_search;
	if (is_null($class)) {
		$class = 'taglist';
	}
	$singletag = getTags();
	$tagstring = implode(', ', $singletag);
	if ($tagstring === '' or $tagstring === NULL) {
		$preText = '';
	}
	if (in_context(ZP_IMAGE)) {
		$object = "image";
	} else if (in_context(ZP_ALBUM)) {
		$object = "album";
	} else if (in_context(ZP_ZENPAGE_PAGE)) {
		$object = "pages";
	} else if (in_context(ZP_ZENPAGE_NEWS_ARTICLE)) {
		$object = "news";
	}
	if (count($singletag) > 0) {
		if (!empty($preText)) {
			
		}
		
		if (is_object($_zp_current_search)) {
			$albumlist = $_zp_current_search->getAlbumList();
		} else {
			$albumlist = NULL;
		}
		$ct = count($singletag);
		$x = 0;
		foreach ($singletag as $atag) {
			if (++$x == $ct) {
				$separator = "";
			}
			if ($option === "links") {
				$links1 = "<a href=\"" . html_encode(getSearchURL(search_quote($atag), '', 'tags', 0, array('albums' => $albumlist))) . "\" title=\"" . html_encode($atag) . "\">";
				$links2 = "</a>";
			} else {
				$links1 = $links2 = '';
			}
			
		}
		
	} else {
		
	}
}


function printAllTagsAs($option, $class = '', $sort = NULL, $counter = FALSE, $links = TRUE, $maxfontsize = 2, $maxcount = 50, $mincount = 1, $limit = NULL, $minfontsize = 0.8, $exclude_unassigned = true, $checkaccess = false) {
	global $_zp_current_search;
	$option = strtolower($option);
	if ($class != "") {
		$class = ' class="' . $class . '"';
	}
	$tagcount = getAllTagsCount($exclude_unassigned, $checkaccess);
	if (!is_array($tagcount)) {
		return false;
	}
	switch ($sort) {
		case 'results':
			arsort($tagcount);
			if (!is_null($limit)) {
				$tagcount = array_slice($tagcount, 0, $limit);
			}
			break;
		case 'random':
			if (!is_null($limit)) {
				$tagcount = array_slice($tagcount, 0, $limit);
			}
			shuffle_assoc($tagcount);
			break;
		default:
			break;
	}
	?>
	<ul<?php  ?>>
		<?php
		if (count($tagcount) > 0) {
			foreach ($tagcount as $key => $val) {
				if (!$counter) {
					$counter = "";
				} else {
					$counter = " (" . $val . ") ";
				}
				if ($option == "cloud") { 
					if ($val <= $mincount) {
						$size = $minfontsize;
					} else {
						$size = min(max(round(($maxfontsize * ($val - $mincount)) / ($maxcount - $mincount), 2), $minfontsize), $maxfontsize);
					}
					$size = str_replace(',', '.', $size);
					$size = ' style="font-size:' . $size . 'em;"';
				} else {
					$size = '';
				}
				if ($val >= $mincount) {
					if ($links) {
						if (is_object($_zp_current_search)) {
							$albumlist = $_zp_current_search->getAlbumList();
						} else {
							$albumlist = NULL;
						}
						$link = getSearchURL(search_quote($key), '', 'tags', 0, array('albums' => $albumlist));
						?>
						<li>
							<a href="<?php  ?>"<?php  ?>><?php  ?></a>
						</li>
						<?php
					} else {
						?>
						<li<?php  ?>><?php  ?></li>
						<?php
					}
				}
			} 
		} else {
			?>
			<li><?php  ?></li>
			<?php
		}
		?>
	</ul>
	<?php
}


function getAllDates($order = 'asc') {
	$alldates = array();
	$cleandates = array();
	$sql = "SELECT `date` FROM " . prefix('images');
	if (!zp_loggedin()) {
		$sql .= " WHERE `show` = 1";
	}
	$hidealbums = getNotViewableAlbums();
	if (!is_null($hidealbums)) {
		if (zp_loggedin()) {
			$sql .= ' WHERE ';
		} else {
			$sql .= ' AND ';
		}
		foreach ($hidealbums as $id) {
			$sql .= '`albumid`!=' . $id . ' AND ';
		}
		$sql = substr($sql, 0, -5);
	}
	$result = query($sql);
	if ($result) {
		while ($row = db_fetch_assoc($result)) {
			$alldates[] = $row['date'];
		}
		db_free_result($result);
	}
	foreach ($alldates as $adate) {
		if (!empty($adate)) {
			$cleandates[] = substr($adate, 0, 7) . "-01";
		}
	}
	$datecount = array_count_values($cleandates);
	if ($order == 'desc') {
		krsort($datecount);
	} else {
		ksort($datecount);
	}
	return $datecount;
}


function printAllDates($class = 'archive', $yearid = 'year', $monthid = 'month', $order = 'asc') {
	global $_zp_current_search, $_zp_gallery_page;
	if (empty($class)) {
		$classactive = 'archive_active';
	} else {
		$classactive = $class . '_active';
		$class = 'class="' . $class . '"';
	}
	if ($_zp_gallery_page == 'search.php') {
		$activedate = getSearchDate('%Y-%m');
	} else {
		$activedate = '';
	}
	if (!empty($yearid)) {
		$yearid = 'class="' . $yearid . '"';
	}
	if (!empty($monthid)) {
		$monthid = 'class="' . $monthid . '"';
	}
	$datecount = getAllDates($order);
	$lastyear = "";
	
	$nr = 0;
	foreach($datecount as $key => $val) {
		$nr++;
		if ($key == '0000-00-01') {
			$year = "no date";
			$month = "";
		} else {
			$dt = strftime('%Y-%B', strtotime($key));
			$year = substr($dt, 0, 4);
			$month = substr($dt, 5);
		}

		if ($lastyear != $year) {
			$lastyear = $year;
			if ($nr != 1) {
				
			}
			
		}
		if (is_object($_zp_current_search)) {
			$albumlist = $_zp_current_search->getAlbumList();
		} else {
			$albumlist = NULL;
		}
		$datekey = substr($key, 0, 7);
		if ($activedate = $datekey) {
			$cl = ' class="' . $classactive . '"';
		} else {
			$cl = '';
		}
		
	}
	
}


function getCustomPageURL($page, $q = '', $webpath = null) {
	global $_zp_conf_vars;
	if (array_key_exists($page, $_zp_conf_vars['special_pages'])) {
		$rewrite = preg_replace('~^_PAGE_/~', _PAGE_ . '/', $_zp_conf_vars['special_pages'][$page]['rewrite']) . '/';
	} else {
		$rewrite = '/' . _PAGE_ . '/' . $page . '/';
	}
	$plain = "index.php?p=$page";
	if (!empty($q)) {
		$rewrite .= "?$q";
		$plain .= "&$q";
	}
	return zp_apply_filter('getLink', rewrite_path($rewrite, $plain, $webpath), $page . '.php', null);
}


function printCustomPageURL($linktext, $page, $q = '', $prev = '', $next = '', $class = NULL) {
	if (!is_null($class)) {
		$class = 'class="' . $class . '"';
	}
	
}





function isArchive() {
	return isset($_REQUEST['date']);
}


function getSearchURL($words, $dates, $fields, $page, $object_list = NULL) {
	$urls = '';
	$rewrite = false;
	if (MOD_REWRITE) {
		$rewrite = true;
		if (is_array($object_list)) {
			foreach ($object_list as $obj) {
				if ($obj) {
					$rewrite = false;
					break;
				}
			}
		}
	}

	if ($rewrite) {
		if (empty($dates)) {
			$url = SEO_WEBPATH . '/' . _SEARCH_ . '/';
		} else {
			$url = SEO_WEBPATH . '/' . _ARCHIVE_ . '/';
		}
	} else {
		$url = SEO_WEBPATH . "/index.php?p=search";
	}
	if (!empty($fields) && empty($dates)) {
		if (!is_array($fields)) {
			$fields = explode(',', $fields);
		}
		$temp = $fields;
		if ($rewrite && count($fields) == 1 && array_shift($temp) == 'tags') {
			$url = SEO_WEBPATH . '/' . _TAGS_ . '/';
		} else {
			$search = new SearchEngine();
			$urls = $search->getSearchFieldsText($fields, 'searchfields=');
		}
	}

	if (!empty($words)) {
		if (is_array($words)) {
			foreach ($words as $key => $word) {
				$words[$key] = search_quote($word);
			}
			$words = implode(',', $words);
		}
		$words = strtr($words, array('%' => '__25__', '&' => '__26__', '
		if ($rewrite) {
			$url .= urlencode($words) . '/';
		} else {
			$url .= "&words=" . urlencode($words);
		}
	}
	if (!empty($dates)) {
		if (is_array($dates)) {
			$dates = implode(',', $dates);
		}
		if ($rewrite) {
			$url .= $dates . '/';
		} else {
			$url .= "&date=$dates";
		}
	}
	if ($page > 1) {
		if ($rewrite) {
			$url .= "$page/";
		} else {
			if ($urls) {
				$urls .= '&';
			}
			$urls .= "page=$page";
		}
	}
	if (!empty($urls)) {
		if ($rewrite) {
			$url .= '?' . $urls;
		} else {
			$url .= '&' . $urls;
		}
	}
	if (is_array($object_list)) {
		foreach ($object_list as $key => $list) {
			if (!empty($list)) {
				$url .= '&in' . $key . '=' . html_encode(implode(',', $list));
			}
		}
	}
	return $url;
}


function printSearchForm($prevtext = NULL, $id = 'search', $buttonSource = NULL, $buttontext = '', $iconsource = NULL, $query_fields = NULL, $object_list = NULL, $within = NULL) {
	global $_zp_adminJS_loaded, $_zp_current_search;
	$engine = new SearchEngine();
	if (!is_null($_zp_current_search) && !$_zp_current_search->getSearchWords()) {
		$engine->clearSearchWords();
	}
	if (!is_null($object_list)) {
		if (array_key_exists(0, $object_list)) { 
			trigger_error(gettext('printSearchForm $album_list parameter is deprecated. Pass array("albums"=>array(album, album, ...)) instead.'), E_USER_NOTICE);
			$object_list = array('albums' => $object_list);
		}
	}
	if (empty($buttontext)) {
		$buttontext = gettext("Search");
	}
	$zf = WEBPATH . "/" . ZENFOLDER;
	$searchwords = $engine->codifySearchString();
	if (substr($searchwords, -1, 1) == ',') {
		$searchwords = substr($searchwords, 0, -1);
	}
	if (empty($searchwords)) {
		$within = false;
		$hint = '%s';
	} else {
		$hint = gettext('%s within previous results');
	}
	if (preg_match('!\/(.*)[\.png|\.jpg|\.jpeg|\.gif]$!', $buttonSource)) {
		$buttonSource = 'src="' . $buttonSource . '" alt="' . $buttontext . '"';
		$button = 'title="' . sprintf($hint, $buttontext) . '"';
		$type = 'image';
	} else {
		$type = 'submit';
		if ($buttonSource) {
			$button = 'value="' . $buttontext . '" title="' . sprintf($hint, $buttonSource) . '"';
			$buttonSource = '';
		} else {
			$button = 'value="' . $buttontext . '" title="' . sprintf($hint, $buttontext) . '"';
		}
	}
	if (empty($iconsource)) {
		$iconsource = WEBPATH . '/' . ZENFOLDER . '/images/searchfields_icon.png';
	}
	if (is_null($within)) {
		$within = getOption('search_within');
	}
	if (MOD_REWRITE) {
		$searchurl = SEO_WEBPATH . '/' . _SEARCH_ . '/';
	} else {
		$searchurl = WEBPATH . "/index.php?p=search";
	}
	if (!$within) {
		$engine->clearSearchWords();
	}

	$fields = $engine->allowedSearchFields();
	if (!$_zp_adminJS_loaded) {
		$_zp_adminJS_loaded = true;
		?>
		<script type="text/javascript" src="<?php  ?>/js/admin.js"></script>
		<?php
	}
	?>
	<div id="<?php  ?>">
		<!-- search form -->
		<form method="post" action="<?php  ?>" id="search_form">
			<script type="text/javascript">
			
			var within = <?php  ?>;
			function search_(way) {
				within = way;
				if (way) {
					$('
				} else {
					lastsearch = '';
					$('
				}
				$('
			}
			$('
				if (within) {
					var newsearch = $.trim($('
					if (newsearch.substring(newsearch.length - 1) == ',') {
						newsearch = newsearch.substr(0, newsearch.length - 1);
					}
					if (newsearch.length > 0) {
						$('
					} else {
						$('
					}
				}
				return true;
			});
    $(document).ready(function() {
      $( $("
        $("
      });
    });
			
			</script>
			<?php  ?>
			<div>
				<span class="tagSuggestContainer">
					<input type="text" name="words" value="" id="search_input" size="10" />
				</span>
				<?php if (count($fields) > 1 || $searchwords) { ?>
					<a class="toggle_searchextrashow" href="
					<script>
						$(".toggle_searchextrashow").click(function(event) {
							event.preventDefault();
							$("
						});
					</script>
				<?php } ?>
				<input type="<?php  ?>" <?php  ?> class="button buttons" id="search_submit" <?php  ?> data-role="none" />
				<?php
				if (is_array($object_list)) {
					foreach ($object_list as $key => $list) {
						?>
						<input type="hidden" name="in<?php 
						else
							
						?>" />
									 <?php
								 }
							 }
							 ?>
				<br />
				<?php
				if (count($fields) > 1 || $searchwords) {
					$fields = array_flip($fields);
					natcasesort($fields);
					$fields = array_flip($fields);
					if (is_null($query_fields)) {
						$query_fields = $engine->parseQueryFields();
					} else {
						if (!is_array($query_fields)) {
							$query_fields = $engine->numericFields($query_fields);
						}
					}
					if (count($query_fields) == 0) {
						$query_fields = $engine->allowedSearchFields();
					}
					?>
					<div style="display:none;" id="searchextrashow">
						<?php
						if ($searchwords) {
							?>
							<label>
								<input type="radio" name="search_within" id="search_within-1" value="1"<?php if ($within)  ?> onclick="search_(1);" />
								<?php  ?>
							</label>
							<label>
								<input type="radio" name="search_within" id="search_within-0" value="1"<?php if (!$within)  ?> onclick="search_(0);" />
								<?php  ?>
							</label>
							<?php
						}
						if (count($fields) > 1) {
							?>
							<ul>
        <li><label><input type="checkbox" name="checkall_searchfields" id="checkall_searchfields" checked="checked">* <?php  ?> *</label></li>
								<?php
								foreach ($fields as $display => $key) {
									
									if (in_array($key, $query_fields)) {
										
									}
									
								}
								?>
							</ul>
							<?php
						}
						?>
					</div>
					<?php
				}
				?>
			</div>
		</form>
	</div><!-- end of search form -->
	<?php
}


function getSearchWords() {
	global $_zp_current_search;
	if (!in_context(ZP_SEARCH))
		return '';
	return stripcslashes($_zp_current_search->codifySearchString());
}


function getSearchDate($format = '%B %Y') {
	if (in_context(ZP_SEARCH)) {
		global $_zp_current_search;
		$date = $_zp_current_search->getSearchDate();
		if (empty($date)) {
			return "";
		}
		if ($date == '0000-00') {
			return gettext("no date");
		};
		$dt = strtotime($date . "-01");
		return zpFormattedDate($format, $dt);
	}
	return false;
}


function setThemeColumns() {
	global $_zp_current_album, $_firstPageImages, $_oneImagePage;
	$_firstPageImages = false;
	if (($albumColumns = getOption('albums_per_row')) <= 1)
		$albumColumns = false;
	if (($imageColumns = getOption('images_per_row')) <= 1)
		$imageColumns = false;
	$albcount = max(1, getOption('albums_per_page'));
	if (($albumColumns) && (($albcount % $albumColumns) != 0)) {
		setOption('albums_per_page', $albcount = ((floor($albcount / $albumColumns) + 1) * $albumColumns), false);
	}
	$imgcount = max(1, getOption('images_per_page'));
	if (($imageColumns) && (($imgcount % $imageColumns) != 0)) {
		setOption('images_per_page', $imgcount = ((floor($imgcount / $imageColumns) + 1) * $imageColumns), false);
	}
	if ((getOption('thumb_transition') && !$_oneImagePage) && in_context(ZP_ALBUM | ZP_SEARCH) && $albumColumns && $imageColumns) {
		$count = getNumAlbums();
		if ($count == 0) {
			$_firstPageImages = 0;
		}
		$rowssused = ceil(($count % $albcount) / $albumColumns); 
		$leftover = floor(max(1, getOption('images_per_page')) / $imageColumns) - $rowssused;
		$_firstPageImages = max(0, $leftover * $imageColumns); 
		if ($_firstPageImages == $imgcount) {
			$_firstPageImages = 0;
		}
	}
}






function checkForGuest(&$hint = NULL, &$show = NULL) {
	global $_zp_gallery, $_zp_gallery_page, $_zp_current_zenpage_page, $_zp_current_category, $_zp_current_zenpage_news;
	$authType = zp_apply_filter('checkForGuest', NULL);
	if (!is_null($authType))
		return $authType;
	if (in_context(ZP_SEARCH)) { 
		$hash = getOption('search_password');
		if (getOption('search_user') != '')
			$show = true;
		$hint = get_language_string(getOption('search_hint'));
		$authType = 'zp_search_auth';
		if (empty($hash)) {
			$hash = $_zp_gallery->getPassword();
			if ($_zp_gallery->getUser() != '')
				$show = true;
			$hint = $_zp_gallery->getPasswordHint();
			$authType = 'zp_gallery_auth';
		}
		if (!empty($hash) && zp_getCookie($authType) == $hash) {
			return $authType;
		}
	} else if (!is_null($_zp_current_zenpage_news)) {
		$authType = $_zp_current_zenpage_news->checkAccess($hint, $show);
		return $authType;
	} else if (isset($_GET['album'])) { 
		list($album, $image) = rewrite_get_album_image('album', 'image');
		if ($authType = checkAlbumPassword($album, $hint)) {
			return $authType;
		} else {
			$alb = newAlbum($album);
			if ($alb->getUser() != '')
				$show = true;
			return false;
		}
	} else { 
		$hash = $_zp_gallery->getPassword();
		if ($_zp_gallery->getUser() != '')
			$show = true;
		$hint = $_zp_gallery->getPasswordHint();
		if (!empty($hash) && zp_getCookie('zp_gallery_auth') == $hash) {
			return 'zp_gallery_auth';
		}
	}
	if (empty($hash))
		return 'zp_public_access';
	return false;
}


function checkAccess(&$hint = NULL, &$show = NULL) {
	global $_zp_current_album, $_zp_current_search, $_zp_gallery, $_zp_gallery_page,
	$_zp_current_zenpage_page, $_zp_current_zenpage_news;
	if (GALLERY_SECURITY != 'public') 
		$show = true; 

	if ($_zp_gallery->isUnprotectedPage(stripSuffix($_zp_gallery_page)))
		return true;
	if (zp_loggedin()) {
		$fail = zp_apply_filter('isMyItemToView', NULL);
		if (!is_null($fail)) { 
			return $fail;
		}
		switch ($_zp_gallery_page) {
			case 'album.php':
			case 'image.php':
				if ($_zp_current_album->isMyItem(LIST_RIGHTS)) {
					return true;
				}
				break;
			case 'search.php':
				if (zp_loggedin(VIEW_SEARCH_RIGHTS)) {
					return true;
				}
				break;
			default:
				if (zp_loggedin(VIEW_GALLERY_RIGHTS)) {
					return true;
				}
				break;
		}
	}
	if (GALLERY_SECURITY == 'public' && ($access = checkForGuest($hint, $show))) {
		return $access; 
	}
	return false;
}


function getPageRedirect() {
  global $_zp_login_error, $_zp_password_form_printed, $_zp_current_search, $_zp_gallery_page,
  $_zp_current_album, $_zp_current_image, $_zp_current_zenpage_news;
	if($_zp_login_error !== 2) {
		return false;
	}
  switch ($_zp_gallery_page) {
    case 'index.php':
      $action = '/index.php';
      break;
    case 'album.php':
      $action = '/index.php?userlog=1&album=' . pathurlencode($_zp_current_album->name);
      break;
    case 'image.php':
      $action = '/index.php?userlog=1&album=' . pathurlencode($_zp_current_album->name) . '&image=' . urlencode($_zp_current_image->filename);
      break;
    case 'pages.php':
      $action = '/index.php?userlog=1&p=pages&title=' . urlencode(getPageTitlelink());
      break;
    case 'news.php':
      $action = '/index.php?userlog=1&p=news';
      if (!is_null($_zp_current_zenpage_news)) {
        $action .= '&title=' . urlencode($_zp_current_zenpage_news->getTitlelink());
      }
      break;
    case 'password.php':
      $action = str_replace(SEO_WEBPATH, '', getRequestURI());
      if ($action == '/' . _PAGE_ . '/password' || $action == '/index.php?p=password') {
        $action = '/index.php';
      }
      break;
    default:
      if (in_context(ZP_SEARCH)) {
        $action = '/index.php?userlog=1&p=search' . $_zp_current_search->getSearchParams();
      } else {
        $action = '/index.php?userlog=1&p=' . substr($_zp_gallery_page, 0, -4);
      }
  }
  return SEO_WEBPATH . $action;
}


function printPasswordForm($_password_hint, $_password_showuser = NULL, $_password_showProtected = true, $_password_redirect = NULL) {
	global $_zp_login_error, $_zp_password_form_printed, $_zp_current_search, $_zp_gallery, $_zp_gallery_page,
	$_zp_current_album, $_zp_current_image, $theme, $_zp_current_zenpage_page, $_zp_authority;
	if ($_zp_password_form_printed)
		return;
	$_zp_password_form_printed = true;

	if (is_null($_password_redirect))
		$_password_redirect = getPageRedirect();

	if (is_null($_password_showuser))
		$_password_showuser = $_zp_gallery->getUserLogonField();
	?>
	<div id="passwordform">
		<?php
		if ($_password_showProtected && !$_zp_login_error) {
			?>
			<p>
				<?php  ?>
			</p>
			<?php
		}
		if ($loginlink = zp_apply_filter('login_link', NULL)) {
			$logintext = gettext('login');
			?>
			<a href="<?php  ?>" title="<?php  ?>"><?php  ?></a>
			<?php
		} else {
			$_zp_authority->printLoginForm($_password_redirect, false, $_password_showuser, false, $_password_hint);
		}
		?>
	</div>
	<?php
}


function printZenphotoLink() {
	
	$a = basename($obj);
	if ($a != 'full-image.php') {
		
		if (TEST_RELEASE) {
			
			$graphics = zp_graphicsLibInfo();
			$graphics = sanitize(str_replace('<br />', ', ', $graphics['Library_desc']), 3);
			
			
			if (count($plugins) > 0) {
				sort($plugins);
				foreach ($plugins as $plugin) {
					
				}
			} else {
				
			}
		}
		
	}
}


function getCodeblock($number = 1, $object = NULL) {
	global $_zp_current_album, $_zp_current_image, $_zp_current_zenpage_news, $_zp_current_zenpage_page, $_zp_gallery, $_zp_gallery_page;
	if (!$number) {
		setOptionDefault('codeblock_first_tab', 0);
	}
	if (!is_object($object)) {
		if ($_zp_gallery_page == 'index.php') {
			$object = $_zp_gallery;
		}
		if (in_context(ZP_ALBUM)) {
			$object = $_zp_current_album;
		}
		if (in_context(ZP_IMAGE)) {
			$object = $_zp_current_image;
		}
		if (in_context(ZP_ZENPAGE_PAGE)) {
			if ($_zp_current_zenpage_page->checkAccess()) {
				$object = $_zp_current_zenpage_page;
			}
		}
		if (in_context(ZP_ZENPAGE_NEWS_ARTICLE)) {
			if ($_zp_current_zenpage_news->checkAccess()) {
				$object = $_zp_current_zenpage_news;
			}
		}
	}
	if (!is_object($object)) {
		return NULL;
	}
	$codeblock = getSerializedArray($object->getcodeblock());
	$codeblock = zp_apply_filter('codeblock', @$codeblock[$number], $object, $number);
	if ($codeblock) {
		$codeblock = applyMacros($codeblock);
	}
	return $codeblock;
}


function printCodeblock($number = 1, $what = NULL) {
	$codeblock = getCodeblock($number, $what);
	if ($codeblock) {
		$context = get_context();
		eval('?>' . $codeblock);
		set_context($context);
	}
}


function checkPageValidity($request, $gallery_page, $page) {
	global $_zp_gallery, $_firstPageImages, $_oneImagePage, $_zp_zenpage, $_zp_current_category;
	$count = NULL;
	switch ($gallery_page) {
		case 'album.php':
		case 'search.php':
			$albums_per_page = max(1, getOption('albums_per_page'));
			$pageCount = (int) ceil(getNumAlbums() / $albums_per_page);
			$imageCount = getNumImages();
			if ($_oneImagePage) {
				if ($_oneImagePage === true) {
					$imageCount = min(1, $imageCount);
				} else {
					$imageCount = 0;
				}
			}
			$images_per_page = max(1, getOption('images_per_page'));
			$count = ($pageCount + (int) ceil(($imageCount - $_firstPageImages) / $images_per_page));
			break;
		case 'index.php':
			if (galleryAlbumsPerPage() != 0) {
				$count = (int) ceil($_zp_gallery->getNumAlbums() / galleryAlbumsPerPage());
			}
			break;
		case 'news.php':
			if (in_context(ZP_ZENPAGE_NEWS_CATEGORY)) {
				$count = count($_zp_current_category->getArticles());
			} else {
				$count = count($_zp_zenpage->getArticles());
			}
			$count = (int) ceil($count / ZP_ARTICLES_PER_PAGE);
			break;
		default:
			$count = zp_apply_filter('checkPageValidity', NULL, $gallery_page, $page);
			break;
	}
	if ($page > $count) {
		$request = false; 
	}

	return $request;
}

function print404status($album, $image, $obj) {
	global $_zp_page;
	
	if (isset($album)) {
		

		if (isset($image)) {
			
		}
	} else {
		
	}
	if (isset($_zp_page) && $_zp_page > 1) {
		
	}
}

?>
