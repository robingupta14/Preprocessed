<?php






class washtml
{
  
  static $html_elements = array('a', 'abbr', 'acronym', 'address', 'area', 'b',
    'basefont', 'bdo', 'big', 'blockquote', 'br', 'caption', 'center',
    'cite', 'code', 'col', 'colgroup', 'dd', 'del', 'dfn', 'dir', 'div', 'dl',
    'dt', 'em', 'fieldset', 'font', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i',
    'ins', 'label', 'legend', 'li', 'map', 'menu', 'nobr', 'ol', 'p', 'pre', 'q',
    's', 'samp', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'table',
    'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'tt', 'u', 'ul', 'var', 'wbr', 'img',
    
    'button', 'input', 'textarea', 'select', 'option', 'optgroup'
  );

  
  static $ignore_elements = array('script', 'applet', 'embed', 'object', 'style');

  
  static $html_attribs = array('name', 'class', 'title', 'alt', 'width', 'height',
    'align', 'nowrap', 'col', 'row', 'id', 'rowspan', 'colspan', 'cellspacing',
    'cellpadding', 'valign', 'bgcolor', 'color', 'border', 'bordercolorlight',
    'bordercolordark', 'face', 'marginwidth', 'marginheight', 'axis', 'border',
    'abbr', 'char', 'charoff', 'clear', 'compact', 'coords', 'vspace', 'hspace',
    'cellborder', 'size', 'lang', 'dir', 'usemap', 'shape', 'media',
    
    'type', 'rows', 'cols', 'disabled', 'readonly', 'checked', 'multiple', 'value'
  );

  
  static $block_elements = array('div', 'p', 'pre', 'blockquote', 'a', 'font', 'center',
    'table', 'ul', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ol', 'dl', 'strong', 'i', 'b', 'u', 'span');

  
  public $extlinks = false;

  
  private $config = array();

  
  private $handlers = array();

  
  private $_html_elements = array();

  
  private $_ignore_elements = array();

  
  private $_block_elements = array();

  
  private $_html_attribs = array();


  
  public function __construct($p = array())
  {
    $this->_html_elements = array_flip((array)$p['html_elements']) + array_flip(self::$html_elements) ;
    $this->_html_attribs = array_flip((array)$p['html_attribs']) + array_flip(self::$html_attribs);
    $this->_ignore_elements = array_flip((array)$p['ignore_elements']) + array_flip(self::$ignore_elements);
    $this->_block_elements = array_flip((array)$p['block_elements']) + array_flip(self::$block_elements);
    unset($p['html_elements'], $p['html_attribs'], $p['ignore_elements'], $p['block_elements']);
    $this->config = $p + array('show_washed'=>true, 'allow_remote'=>false, 'cid_map'=>array());
  }

  
  public function add_callback($tagName, $callback)
  {
    $this->handlers[$tagName] = $callback;
  }

  
  private function wash_style($style)
  {
    $s = '';

    foreach (explode(';', $style) as $declaration) {
      if (preg_match('/^\s*([a-z\-]+)\s*:\s*(.*)\s*$/i', $declaration, $match)) {
        $cssid = $match[1];
        $str   = $match[2];
        $value = '';

        while (sizeof($str) > 0 &&
          preg_match('/^(url\(\s*[\'"]?([^\'"\)]*)[\'"]?\s*\)'.
                 '|rgb\(\s*[0-9]+\s*,\s*[0-9]+\s*,\s*[0-9]+\s*\)'.
                 '|-?[0-9.]+\s*(em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)?'.
                 '|
                 '|[a-z0-9", -]+'.
                 ')\s*/i', $str, $match)
        ) {
          if ($match[2]) {
            if (($src = $this->config['cid_map'][$match[2]])
                || ($src = $this->config['cid_map'][$this->config['base_url'].$match[2]])) {
              $value .= ' url('.htmlspecialchars($src, ENT_QUOTES) . ')';
            }
            else if (preg_match('!^(https?:)?
              if ($this->config['allow_remote'])
                $value .= ' url('.htmlspecialchars($url[0], ENT_QUOTES).')';
              else
                $this->extlinks = true;
            }
            else if (preg_match('/^data:.+/i', $match[2])) { 
              $value .= ' url('.htmlspecialchars($match[2], ENT_QUOTES).')';
            }
          }
          else { 
            $value .= ' ' . $match[0];

            
            if (preg_match('/(left|right|top|bottom|width|height)/i', $cssid) && preg_match('/^[0-9]+$/', $match[0])) {
              $value .= 'px';
            }
          }

          $str = substr($str, strlen($match[0]));
        }

        if (isset($value[0])) {
          $s .= ($s?' ':'') . $cssid . ':' . $value . ';';
        }
      }
    }
    return $s;
  }

  
  private function wash_attribs($node)
  {
    $t = '';
    $washed;

    foreach ($node->attributes as $key => $plop) {
      $key = strtolower($key);
      $value = $node->getAttribute($key);
      if (isset($this->_html_attribs[$key]) ||
         ($key == 'href' && !preg_match('!^javascript!i', $value)
           && preg_match('!^([a-z][a-z0-9.+-]+:|
      ) {
        $t .= ' ' . $key . '="' . htmlspecialchars($value, ENT_QUOTES) . '"';
      }
      else if ($key == 'style' && ($style = $this->wash_style($value))) {
        $quot = strpos($style, '"') !== false ? "'" : '"';
        $t .= ' style=' . $quot . $style . $quot;
      }
      else if ($key == 'background' || ($key == 'src' && strtolower($node->tagName) == 'img')) { 
        if (($src = $this->config['cid_map'][$value])
            || ($src = $this->config['cid_map'][$this->config['base_url'].$value])) {
          $t .= ' ' . $key . '="' . htmlspecialchars($src, ENT_QUOTES) . '"';
        }
        else if (preg_match('/^(http|https|ftp):.+/i', $value)) {
          if ($this->config['allow_remote'])
            $t .= ' ' . $key . '="' . htmlspecialchars($value, ENT_QUOTES) . '"';
          else {
            $this->extlinks = true;
            if ($this->config['blocked_src'])
              $t .= ' ' . $key . '="' . htmlspecialchars($this->config['blocked_src'], ENT_QUOTES) . '"';
          }
        }
        else if (preg_match('/^data:.+/i', $value)) { 
          $t .= ' ' . $key . '="' . htmlspecialchars($value, ENT_QUOTES) . '"';
        }
      }
      else
        $washed .= ($washed?' ':'') . $key;
    }
    return $t . ($washed && $this->config['show_washed']?' x-washed="'.$washed.'"':'');
  }

  
  private function dumpHtml($node)
  {
    if(!$node->hasChildNodes())
      return '';

    $node = $node->firstChild;
    $dump = '';

    do {
      switch($node->nodeType) {
      case XML_ELEMENT_NODE: 
        $tagName = strtolower($node->tagName);
        if ($callback = $this->handlers[$tagName]) {
          $dump .= call_user_func($callback, $tagName, $this->wash_attribs($node), $this->dumpHtml($node), $this);
        }
        else if (isset($this->_html_elements[$tagName])) {
          $content = $this->dumpHtml($node);
          $dump .= '<' . $tagName . $this->wash_attribs($node) .
            ($content != '' || isset($this->_block_elements[$tagName]) ? ">$content</$tagName>" : ' />');
        }
        else if (isset($this->_ignore_elements[$tagName])) {
          $dump .= '<!-- ' . htmlspecialchars($tagName, ENT_QUOTES) . ' not allowed -->';
        }
        else {
          $dump .= '<!-- ' . htmlspecialchars($tagName, ENT_QUOTES) . ' ignored -->';
          $dump .= $this->dumpHtml($node); 
        }
        break;
      case XML_CDATA_SECTION_NODE:
        $dump .= $node->nodeValue;
        break;
      case XML_TEXT_NODE:
        $dump .= htmlspecialchars($node->nodeValue);
        break;
      case XML_HTML_DOCUMENT_NODE:
        $dump .= $this->dumpHtml($node);
        break;
      case XML_DOCUMENT_TYPE_NODE:
        break;
      default:
        $dump . '<!-- node type ' . $node->nodeType . ' -->';
      }
    } while($node = $node->nextSibling);

    return $dump;
  }

  
  public function wash($html)
  {
    
    $node = new DOMDocument('1.0', $this->config['charset']);
    $this->extlinks = false;

    
    if (preg_match('/<base\s+href=[\'"]*([^\'"]+)/is', $html, $matches))
      $this->config['base_url'] = $matches[1];
    else
      $this->config['base_url'] = '';

    
    
    $html = preg_replace('/<!--[^->[\n]*>/', '', $html);

    @$node->loadHTML($html);
    return $this->dumpHtml($node);
  }

  
  public function get_config($prop)
  {
      return $this->config[$prop];
  }

}
