<?php

















$g_allow_browser_cache = 1;


$f_bug_id = gpc_get_int( 'bug_id' );

$tpl_bug = bug_get( $f_bug_id, true );

if ( $tpl_bug->project_id != helper_get_current_project() ) {
	
	
	$g_project_override = $tpl_bug->project_id;
	$tpl_changed_project = true;
} else {
	$tpl_changed_project = false;
}

if ( bug_is_readonly( $f_bug_id ) ) {
	error_parameters( $f_bug_id );
	trigger_error( ERROR_BUG_READ_ONLY_ACTION_DENIED, ERROR );
}

access_ensure_bug_level( config_get( 'update_bug_threshold' ), $f_bug_id );

html_page_top( bug_format_summary( $f_bug_id, SUMMARY_CAPTION ) );

print_recently_visited();

$t_fields = config_get( 'bug_update_page_fields' );
$t_fields = columns_filter_disabled( $t_fields );

$tpl_bug_id = $f_bug_id;

$t_action_button_position = config_get( 'action_button_position' );

$tpl_top_buttons_enabled = $t_action_button_position == POSITION_TOP || $t_action_button_position == POSITION_BOTH;
$tpl_bottom_buttons_enabled = $t_action_button_position == POSITION_BOTTOM || $t_action_button_position == POSITION_BOTH;

$tpl_show_id = in_array( 'id', $t_fields );
$tpl_show_project = in_array( 'project', $t_fields );
$tpl_show_category = in_array( 'category_id', $t_fields );
$tpl_show_view_state = in_array( 'view_state', $t_fields );
$tpl_view_state = $tpl_show_view_state ? string_display_line( get_enum_element( 'view_state', $tpl_bug->view_state ) ) : '';
$tpl_show_date_submitted = in_array( 'date_submitted', $t_fields );
$tpl_show_last_updated = in_array( 'last_updated', $t_fields );
$tpl_show_reporter = in_array( 'reporter', $t_fields );
$tpl_show_handler = in_array( 'handler', $t_fields );
$tpl_show_priority = in_array( 'priority', $t_fields );
$tpl_show_severity = in_array( 'severity', $t_fields );
$tpl_show_reproducibility = in_array( 'reproducibility', $t_fields );
$tpl_show_status = in_array( 'status', $t_fields );
$tpl_show_resolution = in_array( 'resolution', $t_fields );
$tpl_show_projection = in_array( 'projection', $t_fields ) && config_get( 'enable_projection' ) == ON;
$tpl_show_eta = in_array( 'eta', $t_fields ) && config_get( 'enable_eta' ) == ON;
$t_show_profiles = config_get( 'enable_profiles' ) == ON;
$tpl_show_platform = $t_show_profiles && in_array( 'platform', $t_fields );
$tpl_show_os = $t_show_profiles && in_array( 'os', $t_fields );
$tpl_show_os_version = $t_show_profiles && in_array( 'os_version', $t_fields );
$tpl_show_versions = version_should_show_product_version( $tpl_bug->project_id );
$tpl_show_product_version = $tpl_show_versions && in_array( 'product_version', $t_fields );
$tpl_show_product_build = $tpl_show_versions && in_array( 'product_build', $t_fields ) && ( config_get( 'enable_product_build' ) == ON );
$tpl_product_build_attribute = $tpl_show_product_build ? string_attribute( $tpl_bug->build ) : '';
$tpl_show_target_version = $tpl_show_versions && in_array( 'target_version', $t_fields ) && access_has_bug_level( config_get( 'roadmap_update_threshold' ), $tpl_bug_id );
$tpl_show_fixed_in_version = $tpl_show_versions && in_array( 'fixed_in_version', $t_fields );
$tpl_show_due_date = in_array( 'due_date', $t_fields ) && access_has_bug_level( config_get( 'due_date_view_threshold' ), $tpl_bug_id );
$tpl_show_summary = in_array( 'summary', $t_fields );
$tpl_summary_attribute = $tpl_show_summary ? string_attribute( $tpl_bug->summary ) : '';
$tpl_show_description = in_array( 'description', $t_fields );
$tpl_description_textarea = $tpl_show_description ? string_textarea( $tpl_bug->description ) : '';
$tpl_show_additional_information = in_array( 'additional_info', $t_fields );
$tpl_additional_information_textarea = $tpl_show_additional_information ? string_textarea( $tpl_bug->additional_information ) : '';
$tpl_show_steps_to_reproduce = in_array( 'steps_to_reproduce', $t_fields );
$tpl_steps_to_reproduce_textarea = $tpl_show_steps_to_reproduce ? string_textarea( $tpl_bug->steps_to_reproduce ) : '';
$tpl_handler_name = string_display_line( user_get_name( $tpl_bug->handler_id ) );

$tpl_can_change_view_state = $tpl_show_view_state && access_has_project_level( config_get( 'change_view_status_threshold' ) );

if ( $tpl_show_product_version ) {
	$tpl_product_version_released_mask = VERSION_RELEASED;

	if ( access_has_project_level( config_get( 'report_issues_for_unreleased_versions_threshold' ) ) ) {
		$tpl_product_version_released_mask = VERSION_ALL;
	}
}

$tpl_formatted_bug_id = $tpl_show_id ? bug_format_id( $f_bug_id ) : '';
$tpl_project_name = $tpl_show_project ? string_display_line( project_get_name( $tpl_bug->project_id ) ) : '';











print_bracket_link( string_get_bug_view_url( $tpl_bug_id ), lang_get( 'back_to_bug_link' ) );



if ( $tpl_top_buttons_enabled ) {
        
        
        
}


event_signal( 'EVENT_UPDATE_BUG_FORM_TOP', array( $tpl_bug_id, true ) );

if ( $tpl_show_id || $tpl_show_project || $tpl_show_category || $tpl_show_view_state || $tpl_show_date_submitted | $tpl_show_last_updated ) {
	
	
	

	
	
	
	
	
	
	
	

	
	
	

	

	
	

	
	

	
	

	if ( $tpl_show_category ) {
		
		print_category_option_list( $tpl_bug->category_id, $tpl_bug->project_id );
		
	}

	

	
	

	if ( $tpl_can_change_view_state ) {
		
		print_enum_string_option_list( 'view_state', $tpl_bug->view_state);
		
	} else if ( $tpl_show_view_state ) {
		
	}

	

	
	

	
	

	

	
	
}





if ( $tpl_show_reporter ) {
	
	
	$t_spacer = 4;

	if ( $tpl_show_reporter ) {
		
		
		

		if ( ON == config_get( 'use_javascript' ) ) {
			$t_username = prepare_user_name( $tpl_bug->reporter_id );
			
		} else {
			
			print_reporter_option_list( $tpl_bug->reporter_id, $tpl_bug->project_id );
			
		}

		
	} else {
		$t_spacer += 2;
	}

	
	
}





if ( $tpl_show_handler || $tpl_show_due_date ) {
	
	
	$t_spacer = 2;

	
	
	

	if ( access_has_project_level( config_get( 'update_bug_assign_threshold', config_get( 'update_bug_threshold' ) ) ) ) {
		
		
		print_assign_to_option_list( $tpl_bug->handler_id, $tpl_bug->project_id );
		
	} else {
		
	}

	

	if ( $tpl_show_due_date ) {
		
		

		if ( bug_is_overdue( $tpl_bug_id ) ) {
			
		} else {
			
		}

		if ( access_has_bug_level( config_get( 'due_date_update_threshold' ), $tpl_bug_id ) ) {
			$t_date_to_display = '';

			if ( !date_is_null( $tpl_bug->due_date ) ) {
				$t_date_to_display = date( config_get( 'calendar_date_format' ), $tpl_bug->due_date );
			}

			
			date_print_calendar();
			date_finish_calendar( 'due_date', 'trigger');
		} else {
			if ( !date_is_null( $tpl_bug->due_date ) ) {
				
			}
		}

		
	} else {
		$t_spacer += 2;
	}
	
	
	
}





if ( $tpl_show_priority || $tpl_show_severity || $tpl_show_reproducibility ) {
	
	
	$t_spacer = 0;

	if ( $tpl_show_priority ) {
		
		
		
		print_enum_string_option_list( 'priority', $tpl_bug->priority );
		
	} else {
		$t_spacer += 2;
	}

	if ( $tpl_show_severity ) {
		
		
		
		print_enum_string_option_list( 'severity', $tpl_bug->severity );
		
	} else {
		$t_spacer += 2;
	}

	if ( $tpl_show_reproducibility ) {
		
		
		
		print_enum_string_option_list( 'reproducibility', $tpl_bug->reproducibility );
		
	} else {
		$t_spacer += 2;
	}

	
	if ( $t_spacer > 0 ) {
		
}





if ( $tpl_show_status || $tpl_show_resolution ) {
	

	$t_spacer = 2;

	if ( $tpl_show_status ) {
		
		
		
		print_status_option_list( 'status', $tpl_bug->status,
							( $tpl_bug->reporter_id == auth_get_current_user_id() &&
									( ON == config_get( 'allow_reporter_close' ) ) ), $tpl_bug->project_id );
		
	} else {
		$t_spacer += 2;
	}

	if ( $tpl_show_resolution ) {
		
		
		
		print_enum_string_option_list( "resolution", $tpl_bug->resolution );
		
	} else {
		$t_spacer += 2;
	}

	
	if ( $t_spacer > 0 ) {
		
}





if ( $tpl_show_projection || $tpl_show_eta ) {
	

	$t_spacer = 2;

	if ( $tpl_show_projection ) {
		
		
		
		
		
		print_enum_string_option_list( 'projection', $tpl_bug->projection );
		
	} else {
		$t_spacer += 2;
	}

	
	if ( $tpl_show_eta ) {
		

		
		print_enum_string_option_list( 'eta', $tpl_bug->eta );
		
	} else {
		$t_spacer += 2;
	}

	
	
}





if ( $tpl_show_platform || $tpl_show_os || $tpl_show_os_version ) {
	

	$t_spacer = 0;

	if ( $tpl_show_platform ) {
		
		
		

		if ( config_get( 'allow_freetext_in_profile_fields' ) == OFF ) {
			
			print_platform_option_list( $tpl_bug->platform );
			
		} else {
			projax_autocomplete( 'platform_get_with_prefix', 'platform', array( 'value' => string_attribute( $tpl_bug->platform ), 'size' => '16', 'maxlength' => '32', 'tabindex' => helper_get_tab_index_value() ) );
		}

		
	} else {
		$t_spacer += 2;
	}

	if ( $tpl_show_os ) {
		
		
		

		if ( config_get( 'allow_freetext_in_profile_fields' ) == OFF ) {
			
			print_os_option_list( $tpl_bug->os );
			
		} else {
			projax_autocomplete( 'os_get_with_prefix', 'os', array( 'value' => string_attribute( $tpl_bug->os ), 'size' => '16', 'maxlength' => '32', 'tabindex' => helper_get_tab_index_value() ) );
		}

		
	} else {
		$t_spacer += 2;
	}

	if ( $tpl_show_os_version ) {
		
		
		

		if ( config_get( 'allow_freetext_in_profile_fields' ) == OFF ) {
			
			print_os_build_option_list( $tpl_bug->os_build );
			
		} else {
			projax_autocomplete( 'os_build_get_with_prefix', 'os_build', array( 'value' => string_attribute( $tpl_bug->os_build ), 'size' => '16', 'maxlength' => '16', 'tabindex' => helper_get_tab_index_value() ) );
		}

		
	} else {
		$t_spacer += 2;
	}

	
	if ( $t_spacer > 0 ) {
		
}





if ( $tpl_show_product_version || $tpl_show_product_build ) {
	

	$t_spacer = 2;

	
	if ( $tpl_show_product_version ) {
		
		
		print_version_option_list( $tpl_bug->version, $tpl_bug->project_id, $tpl_product_version_released_mask );
		
	} else {
		$t_spacer += 2;
	}

	if ( $tpl_show_product_build ) {
		
		
		
		
	} else {
		$t_spacer += 2;
	}

	
	
}





if ( $tpl_show_target_version || $tpl_show_fixed_in_version ) {
	

	$t_spacer = 2;

	
	if ( $tpl_show_target_version ) {
		
		
		print_version_option_list( $tpl_bug->target_version, $tpl_bug->project_id, VERSION_ALL );
		
	} else {
		$t_spacer += 2;
	}

	
	if ( $tpl_show_fixed_in_version ) {
		
		
		

		
		
		print_version_option_list( $tpl_bug->fixed_in_version, $tpl_bug->project_id, VERSION_ALL );
		
		
	} else {
		$t_spacer += 2;
	}

	
	
}

event_signal( 'EVENT_UPDATE_BUG_FORM', array( $tpl_bug_id, true ) );





if ( $tpl_show_summary ) {
	
	
	
	
}


if ( $tpl_show_description ) {
	
	
	
	
	
}


if ( $tpl_show_steps_to_reproduce ) {
	
	
	
	
	
}


if ( $tpl_show_additional_information ) {
	
	
	
	
	
}




$t_custom_fields_found = false;
$t_related_custom_field_ids = custom_field_get_linked_ids( $tpl_bug->project_id );

foreach ( $t_related_custom_field_ids as $t_id ) {
	$t_def = custom_field_get_definition( $t_id );
	if ( ( $t_def['display_update'] || $t_def['require_update'] ) && custom_field_has_write_access( $t_id, $tpl_bug_id ) ) {
		$t_custom_fields_found = true;

		
		
		if ( $t_def['require_update'] ) {
			
		}

		
		
		print_custom_field_input( $t_def, $tpl_bug_id );
		
	}
} 

if ( $t_custom_fields_found ) {
	
	
} 







if ( access_has_bug_level( config_get( 'private_bugnote_threshold' ), $tpl_bug_id ) ) {
	
	
	

	$t_default_bugnote_view_status = config_get( 'default_bugnote_view_status' );
	if ( access_has_bug_level( config_get( 'set_view_status_threshold' ), $tpl_bug_id ) ) {
		
		
	} else {
		
	}

	
}


if ( config_get('time_tracking_enabled') ) {
	if ( access_has_bug_level( config_get( 'time_tracking_edit_threshold' ), $tpl_bug_id ) ) {
		
		
		
	}
}

event_signal( 'EVENT_BUGNOTE_ADD_FORM', array( $tpl_bug_id ) );


if ( $tpl_bottom_buttons_enabled ) {
       
       
       
}



html_page_bottom();

last_visited_issue( $tpl_bug_id );
