<?php


class ProductCommentsReportCommentModuleFrontController extends ModuleFrontController
{
    public function display()
    {
        header('Content-Type: application/json');

        $customerId = (int) $this->context->cookie->id_customer;
        if (!$customerId) {
            $this->ajaxRender(
                json_encode(
                    [
                        'success' => false,
                        'error' => $this->trans('You need to be logged in to report a review.', [], 'Modules.Productcomments.Shop'),
                    ]
                )
            );

            return false;
        }

        $id_product_comment = (int) Tools::getValue('id_product_comment');

        
        $entityManager = $this->container->get('doctrine.orm.entity_manager');
        $productCommentEntityRepository = $entityManager->getRepository(PrestaShop\Module\ProductComment\Entity\ProductComment::class);

        $productComment = $productCommentEntityRepository->findOneById($id_product_comment);
        if (!$productComment) {
            $this->ajaxRender(
                json_encode(
                    [
                        'success' => false,
                        'error' => $this->trans('Cannot find the requested product review.', [], 'Modules.Productcomments.Shop'),
                    ]
                )
            );

            return false;
        }

        $productCommentAbuseRepository = $entityManager->getRepository(PrestaShop\Module\ProductComment\Entity\ProductCommentReport::class);
        
        $productCommentAbuse = $productCommentAbuseRepository->findOneBy([
            'comment' => $id_product_comment,
            'customerId' => $customerId,
        ]);

        if ($productCommentAbuse) {
            $this->ajaxRender(
                json_encode(
                    [
                        'success' => false,
                        'error' => $this->trans('You already reported this review as abusive.', [], 'Modules.Productcomments.Shop'),
                    ]
                )
            );

            return false;
        }

        $productCommentAbuse = new ProductCommentReport(
            $productComment,
            $customerId
        );
        $entityManager->persist($productCommentAbuse);
        $entityManager->flush();

        $this->ajaxRender(
            json_encode(
                [
                    'success' => true,
                    'id_product_comment' => $id_product_comment,
                ]
            )
        );
    }
}
