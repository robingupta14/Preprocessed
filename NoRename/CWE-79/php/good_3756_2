<?php





class PubSubHubbub
{
    
    const VERIFICATION_MODE_SYNC  = 'sync';
    const VERIFICATION_MODE_ASYNC = 'async';

    
    const SUBSCRIPTION_VERIFIED    = 'verified';
    const SUBSCRIPTION_NOTVERIFIED = 'not_verified';
    const SUBSCRIPTION_TODELETE    = 'to_delete';

    
    protected static $escaper;

    
    protected static $httpClient = null;

    
    public static function detectHubs($source)
    {
        if (is_string($source)) {
            $feed = Reader\Zend\Feed\Reader::import($source);
        } elseif ($source instanceof Reader\Feed\AbstractFeed) {
            $feed = $source;
        } else {
            throw new Exception\InvalidArgumentException('The source parameter was'
            . ' invalid, i.e. not a URL string or an instance of type'
            . ' Zend\Feed\Reader\Feed\AbstractFeed');
        }
        return $feed->getHubs();
    }

    
    public static function setHttpClient(Http\Client $httpClient)
    {
        self::$httpClient = $httpClient;
    }

    
    public static function getHttpClient()
    {
        if (!isset(self::$httpClient)) {
            self::$httpClient = new Http\Client;
        } else {
            self::$httpClient->resetParameters();
        }
        return self::$httpClient;
    }

    
    public static function clearHttpClient()
    {
        self::$httpClient = null;
    }

    
    public static function setEscaper(Escaper $escaper = null)
    {
        static::$escaper = $escaper;
    }

    
    public static function getEscaper()
    {
        if (null === static::$escaper) {
            static::setEscaper(new Escaper());
        }
        return static::$escaper;
    }

    
    public static function urlencode($string)
    {
        $escaper    = static::getEscaper();
        $rawencoded = $escaper->escapeUrl($string);
        $rfcencoded = str_replace('%7E', '~', $rawencoded);
        return $rfcencoded;
    }
}
