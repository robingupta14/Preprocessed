<?php




class DbQbe
{
    
    private $_db;
    
    private $_criteriaTables;
    
    private $_columnNames;
    
    private $_criteria_column_count;
    
    private $_criteria_row_count;
    
    private $_criteriaColumnInsert;
    
    private $_criteriaColumnDelete;
    
    private $_criteriaRowInsert;
    
    private $_criteriaRowDelete;
    
    private $_criteria;
    
    private $_prev_criteria;
    
    private $_criteriaAndOrColumn;
    
    private $_criteriaAndOrRow;
    
    private $_realwidth;
    
    private $_form_column_width;
    
    private $_formColumns;
    
    private $_formAliases;
    
    private $_formSorts;
    
    private $_formSortOrders;
    
    private $_formShows;
    
    private $_formCriterions;
    
    private $_formAndOrCols;
    
    private $_formAndOrRows;
    
    private $_new_column_count;
    
    private $_new_row_count;
    
    private $_savedSearchList = null;
    
    private $_currentSearch = null;

    
    private function _loadCriterias()
    {
        if (null === $this->_currentSearch
            || null === $this->_currentSearch->getCriterias()
        ) {
            return $this;
        }

        $criterias = $this->_currentSearch->getCriterias();
        $_REQUEST = $criterias + $_REQUEST;

        return $this;
    }

    
    private function _getCurrentSearch()
    {
        return $this->_currentSearch;
    }

    
    public function __construct(
        $dbname, $savedSearchList = array(), $currentSearch = null
    ) {
        $this->_db = $dbname;
        $this->_savedSearchList = $savedSearchList;
        $this->_currentSearch = $currentSearch;
        $this->_loadCriterias();
        
        $this->_setSearchParams();
        $this->_setCriteriaTablesAndColumns();
    }

    
    private function _setSearchParams()
    {
        $criteriaColumnCount = $this->_initializeCriteriasCount();

        $this->_criteriaColumnInsert = PMA_ifSetOr(
            $_REQUEST['criteriaColumnInsert'],
            null,
            'array'
        );
        $this->_criteriaColumnDelete = PMA_ifSetOr(
            $_REQUEST['criteriaColumnDelete'],
            null,
            'array'
        );

        $this->_prev_criteria = isset($_REQUEST['prev_criteria'])
            ? $_REQUEST['prev_criteria']
            : array();
        $this->_criteria = isset($_REQUEST['criteria'])
            ? $_REQUEST['criteria']
            : array_fill(0, $criteriaColumnCount, '');

        $this->_criteriaRowInsert = isset($_REQUEST['criteriaRowInsert'])
            ? $_REQUEST['criteriaRowInsert']
            : array_fill(0, $criteriaColumnCount, '');
        $this->_criteriaRowDelete = isset($_REQUEST['criteriaRowDelete'])
            ? $_REQUEST['criteriaRowDelete']
            : array_fill(0, $criteriaColumnCount, '');
        $this->_criteriaAndOrRow = isset($_REQUEST['criteriaAndOrRow'])
            ? $_REQUEST['criteriaAndOrRow']
            : array_fill(0, $criteriaColumnCount, '');
        $this->_criteriaAndOrColumn = isset($_REQUEST['criteriaAndOrColumn'])
            ? $_REQUEST['criteriaAndOrColumn']
            : array_fill(0, $criteriaColumnCount, '');
        
        $this->_form_column_width = 12;
        $this->_formColumns = array();
        $this->_formSorts = array();
        $this->_formShows = array();
        $this->_formCriterions = array();
        $this->_formAndOrRows = array();
        $this->_formAndOrCols = array();
    }

    
    private function _setCriteriaTablesAndColumns()
    {
        
        if (PMA_isValid($_REQUEST['TableList'], 'array')) {
            foreach ($_REQUEST['TableList'] as $each_table) {
                $this->_criteriaTables[$each_table] = ' selected="selected"';
            }
        } 
        $all_tables = $GLOBALS['dbi']->query(
            'SHOW TABLES FROM ' . Util::backquote($this->_db) . ';',
            null,
            DatabaseInterface::QUERY_STORE
        );
        $all_tables_count = $GLOBALS['dbi']->numRows($all_tables);
        if (0 == $all_tables_count) {
            Message::error(__('No tables found in database.'))->display();
            exit;
        }
        
        while (list($table) = $GLOBALS['dbi']->fetchRow($all_tables)) {
            $columns = $GLOBALS['dbi']->getColumns($this->_db, $table);

            if (empty($this->_criteriaTables[$table])
                && ! empty($_REQUEST['TableList'])
            ) {
                $this->_criteriaTables[$table] = '';
            } else {
                $this->_criteriaTables[$table] = ' selected="selected"';
            } 

            
            if ($this->_criteriaTables[$table] == ' selected="selected"') {
                $each_table = Util::backquote($table);
                $this->_columnNames[]  = $each_table . '.*';
                foreach ($columns as $each_column) {
                    $each_column = $each_table . '.'
                        . Util::backquote($each_column['Field']);
                    $this->_columnNames[] = $each_column;
                    
                    $this->_form_column_width = max(
                        mb_strlen($each_column),
                        $this->_form_column_width
                    );
                } 
            } 
        } 
        $GLOBALS['dbi']->freeResult($all_tables);

        
        $this->_realwidth = $this->_form_column_width . 'ex';
    }
    
    private function _showColumnSelectCell($column_number, $selected = '')
    {
        $html_output = '';
        $html_output .= '<td class="center">';
        $html_output .= '<select name="criteriaColumn[' . $column_number
            . ']" size="1">';
        $html_output .= '<option value="">&nbsp;</option>';
        foreach ($this->_columnNames as $column) {
            $html_output .= '<option value="' . htmlspecialchars($column) . '"'
                . (($column === $selected) ? ' selected="selected"' : '') . '>'
                . str_replace(' ', '&nbsp;', htmlspecialchars($column))
                . '</option>';
        }
        $html_output .= '</select>';
        $html_output .= '</td>';
        return $html_output;
    }

    
    private function _getSortSelectCell($column_number, $asc_selected = '',
        $desc_selected = ''
    ) {
        $html_output = '<td class="center">';
        $html_output .= '<select style="width: ' . $this->_realwidth
            . '" name="criteriaSort[' . $column_number . ']" size="1">';
        $html_output .= '<option value="">&nbsp;</option>';
        $html_output .= '<option value="ASC"' . $asc_selected . '>'
            . __('Ascending')
            . '</option>';
        $html_output .= '<option value="DESC"' . $desc_selected . '>'
            . __('Descending')
            . '</option>';
        $html_output .= '</select>';
        $html_output .= '</td>';
        return $html_output;
    }

    
    private function _getSortOrderSelectCell($columnNumber, $sortOrder)
    {
        $totalColumnCount = $this->_getNewColumnCount();
        $html_output  = '<td class="center">';
        $html_output .= '<select name="criteriaSortOrder[' . $columnNumber . ']">';
        $html_output .= '<option value="1000">'
            . '&nbsp;</option>';
        for ($a = 1; $a <= $totalColumnCount; $a++) {
            $html_output .= '<option value="' . $a . '"';
            if ($a == $sortOrder) {
                $html_output .= ' selected="selected"';
            }
            $html_output .= '>' . $a . '</option>';
        }
        $html_output .= '</select>';
        $html_output .= '</td>';
        return $html_output;
    }

    
    private function _getNewColumnCount()
    {
        $totalColumnCount = $this->_criteria_column_count;
        if (! empty($this->_criteriaColumnInsert)) {
            $totalColumnCount += count($this->_criteriaColumnInsert);
        }
        if (! empty($this->_criteriaColumnDelete)) {
            $totalColumnCount -= count($this->_criteriaColumnDelete);
        }
        return $totalColumnCount;
    }

    
    private function _getColumnNamesRow()
    {
        $html_output = '<tr class="odd noclick">';
        $html_output .= '<th>' . __('Column:') . '</th>';
        $new_column_count = 0;
        for (
            $column_index = 0;
            $column_index < $this->_criteria_column_count;
            $column_index++
        ) {
            if (isset($this->_criteriaColumnInsert[$column_index])
                && $this->_criteriaColumnInsert[$column_index] == 'on'
            ) {
                $html_output .= $this->_showColumnSelectCell(
                    $new_column_count
                );
                $new_column_count++;
            }
            if (! empty($this->_criteriaColumnDelete)
                && isset($this->_criteriaColumnDelete[$column_index])
                && $this->_criteriaColumnDelete[$column_index] == 'on'
            ) {
                continue;
            }
            $selected = '';
            if (isset($_REQUEST['criteriaColumn'][$column_index])) {
                $selected = $_REQUEST['criteriaColumn'][$column_index];
                $this->_formColumns[$new_column_count]
                    = $_REQUEST['criteriaColumn'][$column_index];
            }
            $html_output .= $this->_showColumnSelectCell(
                $new_column_count,
                $selected
            );
            $new_column_count++;
        } 
        $this->_new_column_count = $new_column_count;
        $html_output .= '</tr>';
        return $html_output;
    }

    
    private function _getColumnAliasRow()
    {
        $html_output = '<tr class="even noclick">';
        $html_output .= '<th>' . __('Alias:') . '</th>';
        $new_column_count = 0;

        for (
        $colInd = 0;
        $colInd < $this->_criteria_column_count;
        $colInd++
        ) {
            if (! empty($this->_criteriaColumnInsert)
                && isset($this->_criteriaColumnInsert[$colInd])
                && $this->_criteriaColumnInsert[$colInd] == 'on'
            ) {
                $html_output .= '<td class="center">';
                $html_output .= '<input type="text"'
                    . ' name="criteriaAlias[' . $new_column_count . ']"'
                    . ' value="" />';
                $html_output .= '</td>';
                $new_column_count++;
            } 

            if (! empty($this->_criteriaColumnDelete)
                && isset($this->_criteriaColumnDelete[$colInd])
                && $this->_criteriaColumnDelete[$colInd] == 'on'
            ) {
                continue;
            }

            $tmp_alias = '';
            if (! empty($_REQUEST['criteriaAlias'][$colInd])) {
                $tmp_alias
                    = $this->_formAliases[$new_column_count]
                        = $_REQUEST['criteriaAlias'][$colInd];
            }

            $html_output .= '<td class="center">';
            $html_output .= '<input type="text"'
                . ' name="criteriaAlias[' . $new_column_count . ']"'
                . ' value="' . htmlspecialchars($tmp_alias) . '" />';
            $html_output .= '</td>';
            $new_column_count++;
        } 
        $html_output .= '</tr>';
        return $html_output;
    }

    
    private function _getSortRow()
    {
        $html_output = '<tr class="even noclick">';
        $html_output .= '<th>' . __('Sort:') . '</th>';
        $new_column_count = 0;

        for (
            $colInd = 0;
            $colInd < $this->_criteria_column_count;
            $colInd++
        ) {
            if (! empty($this->_criteriaColumnInsert)
                && isset($this->_criteriaColumnInsert[$colInd])
                && $this->_criteriaColumnInsert[$colInd] == 'on'
            ) {
                $html_output .= $this->_getSortSelectCell($new_column_count);
                $new_column_count++;
            } 

            if (! empty($this->_criteriaColumnDelete)
                && isset($this->_criteriaColumnDelete[$colInd])
                && $this->_criteriaColumnDelete[$colInd] == 'on'
            ) {
                continue;
            }
            
            
            if (isset($_REQUEST['criteriaSort'][$colInd])
                && isset($_REQUEST['criteriaColumn'][$colInd])
                && mb_substr($_REQUEST['criteriaColumn'][$colInd], -2) == '.*'
            ) {
                $_REQUEST['criteriaSort'][$colInd] = '';
            } 

            $asc_selected = ''; $desc_selected = '';
            if (isset($_REQUEST['criteriaSort'][$colInd])) {
                $this->_formSorts[$new_column_count]
                    = $_REQUEST['criteriaSort'][$colInd];
                
                if ($_REQUEST['criteriaSort'][$colInd] == 'ASC') {
                    $asc_selected = ' selected="selected"';
                } 
                
                if ($_REQUEST['criteriaSort'][$colInd] == 'DESC') {
                    $desc_selected = ' selected="selected"';
                } 
            } else {
                $this->_formSorts[$new_column_count] = '';
            }

            $html_output .= $this->_getSortSelectCell(
                $new_column_count, $asc_selected, $desc_selected
            );
            $new_column_count++;
        } 
        $html_output .= '</tr>';
        return $html_output;
    }

    
    private function _getSortOrder()
    {
        $html_output = '<tr class="even noclick">';
        $html_output .= '<th>' . __('Sort order:') . '</th>';
        $new_column_count = 0;

        for (
        $colInd = 0;
        $colInd < $this->_criteria_column_count;
        $colInd++
        ) {
            if (! empty($this->_criteriaColumnInsert)
                && isset($this->_criteriaColumnInsert[$colInd])
                && $this->_criteriaColumnInsert[$colInd] == 'on'
            ) {
                $html_output .= $this->_getSortOrderSelectCell(
                    $new_column_count, null
                );
                $new_column_count++;
            } 

            if (! empty($this->_criteriaColumnDelete)
                && isset($this->_criteriaColumnDelete[$colInd])
                && $this->_criteriaColumnDelete[$colInd] == 'on'
            ) {
                continue;
            }

            $sortOrder = null;
            if (! empty($_REQUEST['criteriaSortOrder'][$colInd])) {
                $sortOrder
                    = $this->_formSortOrders[$new_column_count]
                        = $_REQUEST['criteriaSortOrder'][$colInd];
            }

            $html_output .= $this->_getSortOrderSelectCell(
                $new_column_count, $sortOrder
            );
            $new_column_count++;
        } 
        $html_output .= '</tr>';
        return $html_output;
    }

    
    private function _getShowRow()
    {
        $html_output = '<tr class="odd noclick">';
        $html_output .= '<th>' . __('Show:') . '</th>';
        $new_column_count = 0;
        for (
            $column_index = 0;
            $column_index < $this->_criteria_column_count;
            $column_index++
        ) {
            if (! empty($this->_criteriaColumnInsert)
                && isset($this->_criteriaColumnInsert[$column_index])
                && $this->_criteriaColumnInsert[$column_index] == 'on'
            ) {
                $html_output .= '<td class="center">';
                $html_output .= '<input type="checkbox"'
                    . ' name="criteriaShow[' . $new_column_count . ']" />';
                $html_output .= '</td>';
                $new_column_count++;
            } 
            if (! empty($this->_criteriaColumnDelete)
                && isset($this->_criteriaColumnDelete[$column_index])
                && $this->_criteriaColumnDelete[$column_index] == 'on'
            ) {
                continue;
            }
            if (isset($_REQUEST['criteriaShow'][$column_index])) {
                $checked_options = ' checked="checked"';
                $this->_formShows[$new_column_count]
                    = $_REQUEST['criteriaShow'][$column_index];
            } else {
                $checked_options = '';
            }
            $html_output .= '<td class="center">';
            $html_output .= '<input type="checkbox"'
                . ' name="criteriaShow[' . $new_column_count . ']"'
                . $checked_options . ' />';
            $html_output .= '</td>';
            $new_column_count++;
        } 
        $html_output .= '</tr>';
        return $html_output;
    }

    
    private function _getCriteriaInputboxRow()
    {
        $html_output = '<tr class="even noclick">';
        $html_output .= '<th>' . __('Criteria:') . '</th>';
        $new_column_count = 0;
        for (
            $column_index = 0;
            $column_index < $this->_criteria_column_count;
            $column_index++
        ) {
            if (! empty($this->_criteriaColumnInsert)
                && isset($this->_criteriaColumnInsert[$column_index])
                && $this->_criteriaColumnInsert[$column_index] == 'on'
            ) {
                $html_output .= '<td class="center">';
                $html_output .= '<input type="text"'
                    . ' name="criteria[' . $new_column_count . ']"'
                    . ' value=""'
                    . ' class="textfield"'
                    . ' style="width: ' . $this->_realwidth . '"'
                    . ' size="20" />';
                $html_output .= '</td>';
                $new_column_count++;
            } 
            if (! empty($this->_criteriaColumnDelete)
                && isset($this->_criteriaColumnDelete[$column_index])
                && $this->_criteriaColumnDelete[$column_index] == 'on'
            ) {
                continue;
            }
            if (isset($this->_criteria[$column_index])) {
                $tmp_criteria = $this->_criteria[$column_index];
            }
            if ((empty($this->_prev_criteria)
                || ! isset($this->_prev_criteria[$column_index]))
                || $this->_prev_criteria[$column_index] != htmlspecialchars($tmp_criteria)
            ) {
                $this->_formCriterions[$new_column_count] = $tmp_criteria;
            } else {
                $this->_formCriterions[$new_column_count]
                    = $this->_prev_criteria[$column_index];
            }
            $html_output .= '<td class="center">';
            $html_output .= '<input type="hidden"'
                . ' name="prev_criteria[' . $new_column_count . ']"'
                . ' value="'
                . htmlspecialchars($this->_formCriterions[$new_column_count])
                . '" />';
            $html_output .= '<input type="text"'
                . ' name="criteria[' . $new_column_count . ']"'
                . ' value="' . htmlspecialchars($tmp_criteria) . '"'
                . ' class="textfield"'
                . ' style="width: ' . $this->_realwidth . '"'
                . ' size="20" />';
            $html_output .= '</td>';
            $new_column_count++;
        } 
        $html_output .= '</tr>';
        return $html_output;
    }

    
    private function _getFootersOptions($type)
    {
        $html_output = '<div class="floatleft">';
        $html_output .= (($type == 'row')
            ? __('Add/Delete criteria rows') : __('Add/Delete columns'));
        $html_output .= ':<select size="1" name="'
            . (($type == 'row') ? 'criteriaRowAdd' : 'criteriaColumnAdd') . '">';
        $html_output .= '<option value="-3">-3</option>';
        $html_output .= '<option value="-2">-2</option>';
        $html_output .= '<option value="-1">-1</option>';
        $html_output .= '<option value="0" selected="selected">0</option>';
        $html_output .= '<option value="1">1</option>';
        $html_output .= '<option value="2">2</option>';
        $html_output .= '<option value="3">3</option>';
        $html_output .= '</select>';
        $html_output .= '</div>';
        return $html_output;
    }

    
    private function _getTableFooters()
    {
        $html_output = '<fieldset class="tblFooters">';
        $html_output .= $this->_getFootersOptions("row");
        $html_output .= $this->_getFootersOptions("column");
        $html_output .= '<div class="floatleft">';
        $html_output .= '<input type="submit" name="modify"'
            . 'value="' . __('Update Query') . '" />';
        $html_output .= '</div>';
        $html_output .= '</fieldset>';
        return $html_output;
    }

    
    private function _getTablesList()
    {
        $html_output = '<div class="floatleft">';
        $html_output .= '<fieldset>';
        $html_output .= '<legend>' . __('Use Tables') . '</legend>';
        
        $options = '';
        $numTableListOptions = 0;
        foreach ($this->_criteriaTables as $key => $val) {
            $options .= '<option value="' . htmlspecialchars($key) . '"' . $val . '>'
                . (str_replace(' ', '&nbsp;', htmlspecialchars($key))) . '</option>';
            $numTableListOptions++;
        }
        $html_output .= '<select name="TableList[]"'
            . ' multiple="multiple" id="listTable"'
            . ' size="' . (($numTableListOptions > 30) ? '15' : '7') . '">';
        $html_output .= $options;
        $html_output .= '</select>';
        $html_output .= '</fieldset>';
        $html_output .= '<fieldset class="tblFooters">';
        $html_output .= '<input type="submit" name="modify" value="'
            . __('Update Query') . '" />';
        $html_output .= '</fieldset>';
        $html_output .= '</div>';
        return $html_output;
    }

    
    private function _getAndOrColCell(
        $column_number, $selected = null, $last_column = false
    ) {
        $html_output = '<td class="center">';
        if (! $last_column) {
            $html_output .= '<strong>' . __('Or:') . '</strong>';
            $html_output .= '<input type="radio"'
                . ' name="criteriaAndOrColumn[' . $column_number . ']"'
                . ' value="or"' . $selected['or'] . ' />';
            $html_output .= '&nbsp;&nbsp;<strong>' . __('And:') . '</strong>';
            $html_output .= '<input type="radio"'
                . ' name="criteriaAndOrColumn[' . $column_number . ']"'
                . ' value="and"' . $selected['and'] . ' />';
        }
        $html_output .= '<br />' . __('Ins');
        $html_output .= '<input type="checkbox"'
            . ' name="criteriaColumnInsert[' . $column_number . ']" />';
        $html_output .= '&nbsp;&nbsp;' . __('Del');
        $html_output .= '<input type="checkbox"'
            . ' name="criteriaColumnDelete[' . $column_number . ']" />';
        $html_output .= '</td>';
        return $html_output;
    }

    
    private function _getModifyColumnsRow()
    {
        $html_output = '<tr class="even noclick">';
        $html_output .= '<th>' . __('Modify:') . '</th>';
        $new_column_count = 0;
        for (
        $column_index = 0;
        $column_index < $this->_criteria_column_count;
        $column_index++
        ) {
            if (! empty($this->_criteriaColumnInsert)
                && isset($this->_criteriaColumnInsert[$column_index])
                && $this->_criteriaColumnInsert[$column_index] == 'on'
            ) {
                $html_output .= $this->_getAndOrColCell($new_column_count);
                $new_column_count++;
            } 

            if (! empty($this->_criteriaColumnDelete)
                && isset($this->_criteriaColumnDelete[$column_index])
                && $this->_criteriaColumnDelete[$column_index] == 'on'
            ) {
                continue;
            }

            if (isset($this->_criteriaAndOrColumn[$column_index])) {
                $this->_formAndOrCols[$new_column_count]
                    = $this->_criteriaAndOrColumn[$column_index];
            }
            $checked_options = array();
            if (isset($this->_criteriaAndOrColumn[$column_index])
                && $this->_criteriaAndOrColumn[$column_index] == 'or'
            ) {
                $checked_options['or']  = ' checked="checked"';
                $checked_options['and'] = '';
            } else {
                $checked_options['and'] = ' checked="checked"';
                $checked_options['or']  = '';
            }
            $html_output .= $this->_getAndOrColCell(
                $new_column_count,
                $checked_options,
                ($column_index + 1 == $this->_criteria_column_count)
            );
            $new_column_count++;
        } 
        $html_output .= '</tr>';
        return $html_output;
    }

    
    private function _getInsDelAndOrCell($row_index, $checked_options)
    {
        $html_output = '<td class="' . $GLOBALS['cell_align_right'] . ' nowrap">';
        $html_output .= '<!-- Row controls -->';
        $html_output .= '<table class="nospacing nopadding">';
        $html_output .= '<tr>';
        $html_output .= '<td class="' . $GLOBALS['cell_align_right'] . ' nowrap">';
        $html_output .= '<small>' . __('Ins:') . '</small>';
        $html_output .= '<input type="checkbox"'
            . ' name="criteriaRowInsert[' . $row_index . ']" />';
        $html_output .= '</td>';
        $html_output .= '<td class="' . $GLOBALS['cell_align_right'] . '">';
        $html_output .= '<strong>' . __('And:') . '</strong>';
        $html_output .= '</td>';
        $html_output .= '<td>';
        $html_output .= '<input type="radio"'
            . ' name="criteriaAndOrRow[' . $row_index . ']" value="and"'
            . $checked_options['and'] . ' />';
        $html_output .= '</td>';
        $html_output .= '</tr>';
        $html_output .= '<tr>';
        $html_output .= '<td class="' . $GLOBALS['cell_align_right'] . ' nowrap">';
        $html_output .= '<small>' . __('Del:') . '</small>';
        $html_output .= '<input type="checkbox"'
            . ' name="criteriaRowDelete[' . $row_index . ']" />';
        $html_output .= '</td>';
        $html_output .= '<td class="' . $GLOBALS['cell_align_right'] . '">';
        $html_output .= '<strong>' . __('Or:') . '</strong>';
        $html_output .= '</td>';
        $html_output .= '<td>';
        $html_output .= '<input type="radio"'
            . ' name="criteriaAndOrRow[' . $row_index . ']"'
            . ' value="or"' . $checked_options['or'] . ' />';
        $html_output .= '</td>';
        $html_output .= '</tr>';
        $html_output .= '</table>';
        $html_output .= '</td>';
        return $html_output;
    }

    
    private function _getInputboxRow($new_row_index)
    {
        $html_output = '';
        $new_column_count = 0;
        for (
            $column_index = 0;
            $column_index < $this->_criteria_column_count;
            $column_index++
        ) {
            if (!empty($this->_criteriaColumnInsert)
                && isset($this->_criteriaColumnInsert[$column_index])
                && $this->_criteriaColumnInsert[$column_index] == 'on'
            ) {
                $orFieldName = 'Or' . $new_row_index . '[' . $new_column_count . ']';
                $html_output .= '<td class="center">';
                $html_output .= '<input type="text"'
                    . ' name="Or' . $orFieldName . '" class="textfield"'
                    . ' style="width: ' . $this->_realwidth . '" size="20" />';
                $html_output .= '</td>';
                $new_column_count++;
            } 
            if (!empty($this->_criteriaColumnDelete)
                && isset($this->_criteriaColumnDelete[$column_index])
                && $this->_criteriaColumnDelete[$column_index] == 'on'
            ) {
                continue;
            }
            $or = 'Or' . $new_row_index;
            if (! empty($_REQUEST[$or]) && isset($_REQUEST[$or][$column_index])) {
                $tmp_or = $_REQUEST[$or][$column_index];
            } else {
                $tmp_or     = '';
            }
            $html_output .= '<td class="center">';
            $html_output .= '<input type="text"'
                . ' name="Or' . $new_row_index . '[' . $new_column_count . ']' . '"'
                . ' value="' . htmlspecialchars($tmp_or) . '" class="textfield"'
                . ' style="width: ' . $this->_realwidth . '" size="20" />';
            $html_output .= '</td>';
            if (!empty(${$or}) && isset(${$or}[$column_index])) {
                $GLOBALS[${'cur' . $or}][$new_column_count]
                    = ${$or}[$column_index];
            }
            $new_column_count++;
        } 
        return $html_output;
    }

    
    private function _getInsDelAndOrCriteriaRows()
    {
        $html_output = '';
        $new_row_count = 0;
        $odd_row = true;
        $checked_options = array();
        for (
        $row_index = 0;
        $row_index <= $this->_criteria_row_count;
        $row_index++
        ) {
            if (isset($this->_criteriaRowInsert[$row_index])
                && $this->_criteriaRowInsert[$row_index] == 'on'
            ) {
                $checked_options['or']  = ' checked="checked"';
                $checked_options['and'] = '';
                $html_output .= '<tr class="' . ($odd_row ? 'odd' : 'even')
                    . ' noclick">';
                $html_output .= $this->_getInsDelAndOrCell(
                    $new_row_count, $checked_options
                );
                $html_output .= $this->_getInputboxRow(
                    $new_row_count
                );
                $new_row_count++;
                $html_output .= '</tr>';
                $odd_row =! $odd_row;
            } 
            if (isset($this->_criteriaRowDelete[$row_index])
                && $this->_criteriaRowDelete[$row_index] == 'on'
            ) {
                continue;
            }
            if (isset($this->_criteriaAndOrRow[$row_index])) {
                $this->_formAndOrRows[$new_row_count]
                    = $this->_criteriaAndOrRow[$row_index];
            }
            if (isset($this->_criteriaAndOrRow[$row_index])
                && $this->_criteriaAndOrRow[$row_index] == 'and'
            ) {
                $checked_options['and'] =  ' checked="checked"';
                $checked_options['or']  =  '';
            } else {
                $checked_options['or']  =  ' checked="checked"';
                $checked_options['and'] =  '';
            }
            $html_output .= '<tr class="' . ($odd_row ? 'odd' : 'even')
                . ' noclick">';
            $html_output .= $this->_getInsDelAndOrCell(
                $new_row_count, $checked_options
            );
            $html_output .= $this->_getInputboxRow(
                $new_row_count
            );
            $new_row_count++;
            $html_output .= '</tr>';
            $odd_row =! $odd_row;
        } 
        $this->_new_row_count = $new_row_count;
        return $html_output;
    }

    
    private function _getSelectClause()
    {
        $select_clause = '';
        $select_clauses = array();
        for (
            $column_index = 0;
            $column_index < $this->_criteria_column_count;
            $column_index++
        ) {
            if (! empty($this->_formColumns[$column_index])
                && isset($this->_formShows[$column_index])
                && $this->_formShows[$column_index] == 'on'
            ) {
                $select = $this->_formColumns[$column_index];
                if (! empty($this->_formAliases[$column_index])) {
                    $select .= " AS "
                        . Util::backquote($this->_formAliases[$column_index]);
                }
                $select_clauses[] = $select;
            }
        } 
        if (!empty($select_clauses)) {
            $select_clause = 'SELECT '
                . htmlspecialchars(implode(", ", $select_clauses)) . "\n";
        }
        return $select_clause;
    }

    
    private function _getWhereClause()
    {
        $where_clause = '';
        $criteria_cnt = 0;
        for (
        $column_index = 0;
        $column_index < $this->_criteria_column_count;
        $column_index++
        ) {
            if (! empty($this->_formColumns[$column_index])
                && ! empty($this->_formCriterions[$column_index])
                && $column_index
                && isset($last_where)
                && isset($this->_formAndOrCols)
            ) {
                $where_clause .= ' '
                    . mb_strtoupper($this->_formAndOrCols[$last_where])
                    . ' ';
            }
            if (! empty($this->_formColumns[$column_index])
                && ! empty($this->_formCriterions[$column_index])
            ) {
                $where_clause .= '(' . $this->_formColumns[$column_index] . ' '
                    . $this->_formCriterions[$column_index] . ')';
                $last_where = $column_index;
                $criteria_cnt++;
            }
        } 
        if ($criteria_cnt > 1) {
            $where_clause = '(' . $where_clause . ')';
        }
        
        if (! isset($this->_formAndOrRows)) {
            $this->_formAndOrRows = array();
        }
        for (
        $row_index = 0;
        $row_index <= $this->_criteria_row_count;
        $row_index++
        ) {
            $criteria_cnt = 0;
            $qry_orwhere = '';
            $last_orwhere = '';
            for (
            $column_index = 0;
            $column_index < $this->_criteria_column_count;
            $column_index++
            ) {
                if (! empty($this->_formColumns[$column_index])
                    && ! empty($_REQUEST['Or' . $row_index][$column_index])
                    && $column_index
                ) {
                    $qry_orwhere .= ' '
                        . mb_strtoupper(
                            $this->_formAndOrCols[$last_orwhere]
                        )
                        . ' ';
                }
                if (! empty($this->_formColumns[$column_index])
                    && ! empty($_REQUEST['Or' . $row_index][$column_index])
                ) {
                    $qry_orwhere .= '(' . $this->_formColumns[$column_index]
                        .  ' '
                        .  $_REQUEST['Or' . $row_index][$column_index]
                        .  ')';
                    $last_orwhere = $column_index;
                    $criteria_cnt++;
                }
            } 
            if ($criteria_cnt > 1) {
                $qry_orwhere      = '(' . $qry_orwhere . ')';
            }
            if (! empty($qry_orwhere)) {
                $where_clause .= "\n"
                    .  mb_strtoupper(
                        isset($this->_formAndOrRows[$row_index])
                        ? $this->_formAndOrRows[$row_index] . ' '
                        : ''
                    )
                    .  $qry_orwhere;
            } 
        } 

        if (! empty($where_clause) && $where_clause != '()') {
            $where_clause = 'WHERE ' . htmlspecialchars($where_clause) . "\n";
        } 
        return $where_clause;
    }

    
    private function _getOrderByClause()
    {
        $orderby_clause = '';
        $orderby_clauses = array();

        
        $columns = $this->_formColumns;
        $sort = $this->_formSorts;
        $sortOrder = $this->_formSortOrders;
        if (!empty($sortOrder)
            && count($sortOrder) == count($sort)
            && count($sortOrder) == count($columns)
        ) {
            
            array_multisort($sortOrder, $sort, $columns);
        }

        for (
            $column_index = 0;
            $column_index < $this->_criteria_column_count;
            $column_index++
        ) {
            
            
            
            if (empty($columns[$column_index])
                && empty($sort[$column_index])
            ) {
                continue;
            }

            if (mb_substr($columns[$column_index], -2) == '.*') {
                continue;
            }

            if (! empty($sort[$column_index])) {
                $orderby_clauses[] = $columns[$column_index] . ' '
                    . $sort[$column_index];
            }
        } 
        if (!empty($orderby_clauses)) {
            $orderby_clause = 'ORDER BY '
                . htmlspecialchars(implode(", ", $orderby_clauses)) . "\n";
        }
        return $orderby_clause;
    }

    
    private function _getIndexes($search_tables, $search_columns,
        $where_clause_columns
    ) {
        $unique_columns = array();
        $index_columns = array();

        foreach ($search_tables as $table) {
            $indexes = $GLOBALS['dbi']->getTableIndexes($this->_db, $table);
            foreach ($indexes as $index) {
                $column = $table . '.' . $index['Column_name'];
                if (isset($search_columns[$column])) {
                    if ($index['Non_unique'] == 0) {
                        if (isset($where_clause_columns[$column])) {
                            $unique_columns[$column] = 'Y';
                        } else {
                            $unique_columns[$column] = 'N';
                        }
                    } else {
                        if (isset($where_clause_columns[$column])) {
                            $index_columns[$column] = 'Y';
                        } else {
                            $index_columns[$column] = 'N';
                        }
                    }
                }
            } 
        } 

        return array(
            'unique' => $unique_columns,
            'index' => $index_columns
        );
    }

    
    private function _getLeftJoinColumnCandidates($search_tables, $search_columns,
        $where_clause_columns
    ) {
        $GLOBALS['dbi']->selectDb($this->_db);

        
        $indexes = $this->_getIndexes(
            $search_tables, $search_columns, $where_clause_columns
        );
        $unique_columns = $indexes['unique'];
        $index_columns = $indexes['index'];

        list($candidate_columns, $needsort)
            = $this->_getLeftJoinColumnCandidatesBest(
                $search_tables,
                $where_clause_columns,
                $unique_columns,
                $index_columns
            );

        
        
        
        
        if ($needsort != 1) {
            return $candidate_columns;
        }

        $very_good = array();
        $still_good = array();
        foreach ($candidate_columns as $column => $is_where) {
            $table = explode('.', $column);
            $table = $table[0];
            if ($is_where == 'Y') {
                $very_good[$column] = $table;
            } else {
                $still_good[$column] = $table;
            }
        }
        if (count($very_good) > 0) {
            $candidate_columns = $very_good;
            
        } else {
            $candidate_columns = $still_good;
            
        }

        return $candidate_columns;
    }

    
    private function _getMasterTable($search_tables, $search_columns,
        $where_clause_columns, $where_clause_tables
    ) {
        if (count($where_clause_tables) == 1) {
            
            
            $master = key($where_clause_tables);
            return $master;
        }

        
        
        
        
        $candidate_columns = $this->_getLeftJoinColumnCandidates(
            $search_tables, $search_columns, $where_clause_columns
        );

        
        
        
        $foreign_tables = array();
        foreach ($candidate_columns as $one_table) {
            $foreigners = PMA_getForeigners($this->_db, $one_table);
            foreach ($foreigners as $key => $foreigner) {
                if ($key != 'foreign_keys_data') {
                    if (in_array($foreigner['foreign_table'], $candidate_columns)) {
                        $foreign_tables[$foreigner['foreign_table']]
                            = $foreigner['foreign_table'];
                    }
                    continue;
                }
                foreach ($foreigner as $one_key) {
                    if (in_array($one_key['ref_table_name'], $candidate_columns)) {
                        $foreign_tables[$one_key['ref_table_name']]
                            = $one_key['ref_table_name'];
                    }
                }
            }
        }
        if (count($foreign_tables)) {
            $candidate_columns = $foreign_tables;
        }

        
        
        
        
        
        if (!(count($candidate_columns) > 1)) {
            
            return reset($candidate_columns);
        }

        
        $checked_tables = $candidate_columns;
        $tsize = array();
        $csize = array();
        foreach ($candidate_columns as $table) {
            if ($checked_tables[$table] != 1) {
                $_table = new Table($table, $this->_db);
                $tsize[$table] = $_table->countRecords();
                $checked_tables[$table] = 1;
            }
            $csize[$table] = $tsize[$table];
        }
        
        return array_search(max($csize), $csize);
    }

    
    private function _getWhereClauseTablesAndColumns()
    {
        $where_clause_columns = array();
        $where_clause_tables = array();

        
        for (
            $column_index = 0, $nb = count($this->_criteria);
            $column_index < $nb;
            $column_index++
        ) {
            $current_table = explode('.', $_POST['criteriaColumn'][$column_index]);
            if (empty($current_table[0]) || empty($current_table[1])) {
                continue;
            } 
            $table = str_replace('`', '', $current_table[0]);
            $column = str_replace('`', '', $current_table[1]);
            $column = $table . '.' . $column;
            
            
            if (! empty($this->_criteria[$column_index])) {
                if (mb_substr($this->_criteria[$column_index], 0, 1) == '='
                    || stristr($this->_criteria[$column_index], 'is')
                ) {
                    $where_clause_columns[$column] = $column;
                    $where_clause_tables[$table]  = $table;
                }
            } 
        } 
        return array(
            'where_clause_tables' => $where_clause_tables,
            'where_clause_columns' => $where_clause_columns
        );
    }

    
    private function _getFromClause($formColumns)
    {
        $from_clause = '';
        if (empty($formColumns)) {
            return $from_clause;
        }

        
        $search_tables = $search_columns = array();

        
        foreach ($formColumns as $value) {
            $parts = explode('.', $value);
            if (! empty($parts[0]) && ! empty($parts[1])) {
                $table = str_replace('`', '', $parts[0]);
                $search_tables[$table] = $table;
                $search_columns[] = $table . '.' . str_replace(
                    '`', '', $parts[1]
                );
            }
        } 

        
        $from_clause = $this->_getJoinForFromClause(
            $search_tables, $search_columns
        );

        
        
        if (empty($from_clause)) {
            
            $from_clause = implode(
                ", ", array_map('PMA\libraries\Util::backquote', $search_tables)
            );
        }

        return $from_clause;
    }

    
    private function _getJoinForFromClause($searchTables, $searchColumns)
    {
        
        $relations = array();

        
        foreach ($searchTables as $oneTable) {
            $this->_loadRelationsForTable($relations, $oneTable);
        }

        
        $validWhereClauses = $this->_getWhereClauseTablesAndColumns();
        $whereClauseTables = $validWhereClauses['where_clause_tables'];
        $whereClauseColumns = $validWhereClauses['where_clause_columns'];

        
        $master = $this->_getMasterTable(
            $searchTables, $searchColumns,
            $whereClauseColumns, $whereClauseTables
        );

        
        
        $finalized = array();
        if (mb_strlen($master) > 0) {
            
            $finalized[$master] = '';
        }
        
        $this->_fillJoinClauses($finalized, $relations, $searchTables);

        
        $join = '';

        
        
        $unfinalized = array_diff($searchTables, array_keys($finalized));
        if (count($unfinalized) > 0) {

            
            
            
            foreach ($unfinalized as $oneTable) {

                $references = PMA_getChildReferences($this->_db, $oneTable);
                foreach ($references as $column => $columnReferences) {
                    foreach ($columnReferences as $reference) {

                        
                        if ($reference['table_schema'] != $this->_db) {
                            continue;
                        }

                        $table = $reference['table_name'];

                        $this->_loadRelationsForTable($relations, $table);

                        
                        $tempFinalized = $finalized;
                        $tempSearchTables = $searchTables;
                        $tempSearchTables[] = $table;

                        
                        $this->_fillJoinClauses(
                            $tempFinalized, $relations, $tempSearchTables
                        );

                        $tempUnfinalized = array_diff(
                            $tempSearchTables, array_keys($tempFinalized)
                        );
                        
                        
                        
                        if (count($tempUnfinalized) < count($unfinalized)) {
                            $finalized = $tempFinalized;
                            $searchTables = $tempSearchTables;
                        }

                        
                        if (count($tempUnfinalized) == 0) {
                            break 3;
                        }
                    }
                }
            }

            $unfinalized = array_diff($searchTables, array_keys($finalized));
            
            if (count($unfinalized) > 0) {
                
                $join .= implode(
                    ', ', array_map('Util::backquote', $unfinalized)
                );
            }
        }

        $first = true;
        
        foreach ($finalized as $table => $clause) {
            if ($first) {
                if (! empty($join)) {
                    $join .= ", ";
                }
                $join .= Util::backquote($table);
                $first = false;
            } else {
                $join .= "\n    LEFT JOIN " . Util::backquote(
                    $table
                ) . " ON " . $clause;
            }
        }

        return $join;
    }

    
    private function _loadRelationsForTable(&$relations, $oneTable)
    {
        $relations[$oneTable] = array();

        $foreigners = PMA_getForeigners($GLOBALS['db'], $oneTable);
        foreach ($foreigners as $field => $foreigner) {
            
            if ($field == 'foreign_keys_data') {
                foreach ($foreigner as $oneKey) {
                    $clauses = array();
                    
                    foreach ($oneKey['index_list'] as $index => $oneField) {
                        $clauses[]
                            = Util::backquote($oneTable) . "."
                            . Util::backquote($oneField) . " = "
                            . Util::backquote($oneKey['ref_table_name']) . "."
                            . Util::backquote($oneKey['ref_index_list'][$index]);
                    }
                    
                    $relations[$oneTable][$oneKey['ref_table_name']]
                        = implode(" AND ", $clauses);
                }
            } else { 
                $relations[$oneTable][$foreigner['foreign_table']]
                    = Util::backquote($oneTable) . "."
                    . Util::backquote($field) . " = "
                    . Util::backquote($foreigner['foreign_table']) . "."
                    . Util::backquote($foreigner['foreign_field']);
            }
        }
    }

    
    private function _fillJoinClauses(&$finalized, $relations, $searchTables)
    {
        while (true) {
            $added = false;
            foreach ($searchTables as $masterTable) {
                $foreignData = $relations[$masterTable];
                foreach ($foreignData as $foreignTable => $clause) {
                    if (! isset($finalized[$masterTable])
                        && isset($finalized[$foreignTable])
                    ) {
                        $finalized[$masterTable] = $clause;
                        $added = true;
                    } elseif (! isset($finalized[$foreignTable])
                        && isset($finalized[$masterTable])
                        && in_array($foreignTable, $searchTables)
                    ) {
                        $finalized[$foreignTable] = $clause;
                        $added = true;
                    }
                    if ($added) {
                        
                        if (count($finalized) == count($searchTables)) {
                            return;
                        }
                    }
                }
            }
            
            if (! $added) {
                return;
            }
        }
    }

    
    private function _getSQLQuery($formColumns)
    {
        $sql_query = '';
        
        $sql_query .= $this->_getSelectClause();
        
        $from_clause = $this->_getFromClause($formColumns);
        if (! empty($from_clause)) {
            $sql_query .= 'FROM ' . htmlspecialchars($from_clause) . "\n";
        }
        
        $sql_query .= $this->_getWhereClause();
        
        $sql_query .= $this->_getOrderByClause();
        return $sql_query;
    }

    
    public function getSelectionForm()
    {
        $html_output = '<form action="db_qbe.php" method="post" id="formQBE" '
            . 'class="lock-page">';
        $html_output .= '<fieldset>';

        if ($GLOBALS['cfgRelation']['savedsearcheswork']) {
            $html_output .= $this->_getSavedSearchesField();
        }

        $html_output .= '<table class="data" style="width: 100%;">';
        
        $html_output .= $this->_getColumnNamesRow();
        $html_output .= $this->_getColumnAliasRow();
        $html_output .= $this->_getShowRow();
        $html_output .= $this->_getSortRow();
        $html_output .= $this->_getSortOrder();
        $html_output .= $this->_getCriteriaInputboxRow();
        $html_output .= $this->_getInsDelAndOrCriteriaRows();
        $html_output .= $this->_getModifyColumnsRow();
        $html_output .= '</table>';
        $this->_new_row_count--;
        $url_params = array();
        $url_params['db'] = $this->_db;
        $url_params['criteriaColumnCount'] = $this->_new_column_count;
        $url_params['rows'] = $this->_new_row_count;
        $html_output .= PMA_URL_getHiddenInputs($url_params);
        $html_output .= '</fieldset>';
        
        $html_output .= $this->_getTableFooters();
        
        $html_output .= $this->_getTablesList();
        $html_output .= '</form>';
        $html_output .= '<form action="db_qbe.php" method="post" class="lock-page">';
        $html_output .= PMA_URL_getHiddenInputs(array('db' => $this->_db));
        
        $html_output .= '<div class="floatleft" style="width:50%">';
        $html_output .= '<fieldset>';
        $html_output .= '<legend>'
            . sprintf(
                __('SQL query on database <b>%s</b>:'),
                Util::getDbLink($this->_db)
            );
        $html_output .= '</legend>';
        $text_dir = 'ltr';
        $html_output .= '<textarea cols="80" name="sql_query" id="textSqlquery"'
            . ' rows="' . ((count($this->_criteriaTables) > 30) ? '15' : '7') . '"'
            . ' dir="' . $text_dir . '">';

        if (empty($this->_formColumns)) {
            $this->_formColumns = array();
        }
        $html_output .= $this->_getSQLQuery($this->_formColumns);

        $html_output .= '</textarea>';
        $html_output .= '</fieldset>';
        
        $html_output .= '<fieldset class="tblFooters">';
        $html_output .= '<input type="hidden" name="submit_sql" value="1" />';
        $html_output .= '<input type="submit" value="' . __('Submit Query') . '" />';
        $html_output .= '</fieldset>';
        $html_output .= '</div>';
        $html_output .= '</form>';
        return $html_output;
    }

    
    private function _getSavedSearchesField()
    {
        $html_output = __('Saved bookmarked search:');
        $html_output .= ' <select name="searchId" id="searchId">';
        $html_output .= '<option value="">' . __('New bookmark') . '</option>';

        $currentSearch = $this->_getCurrentSearch();
        $currentSearchId = null;
        $currentSearchName = null;
        if (null != $currentSearch) {
            $currentSearchId = $currentSearch->getId();
            $currentSearchName = $currentSearch->getSearchName();
        }

        foreach ($this->_savedSearchList as $id => $name) {
            $html_output .= '<option value="' . htmlspecialchars($id)
                . '" ' . (
                $id == $currentSearchId
                    ? 'selected="selected" '
                    : ''
                )
                . '>'
                . htmlspecialchars($name)
                . '</option>';
        }
        $html_output .= '</select>';
        $html_output .= '<input type="text" name="searchName" id="searchName" '
            . 'value="' . htmlspecialchars($currentSearchName) . '" />';
        $html_output .= '<input type="hidden" name="action" id="action" value="" />';
        $html_output .= '<input type="submit" name="saveSearch" id="saveSearch" '
            . 'value="' . __('Create bookmark') . '" />';
        if (null !== $currentSearchId) {
            $html_output .= '<input type="submit" name="updateSearch" '
                . 'id="updateSearch" value="' . __('Update bookmark') . '" />';
            $html_output .= '<input type="submit" name="deleteSearch" '
                . 'id="deleteSearch" value="' . __('Delete bookmark') . '" />';
        }

        return $html_output;
    }

    
    private function _initializeCriteriasCount()
    {
        
        $criteriaColumnCount = PMA_ifSetOr(
            $_REQUEST['criteriaColumnCount'],
            3,
            'numeric'
        );
        $criteriaColumnAdd = PMA_ifSetOr(
            $_REQUEST['criteriaColumnAdd'],
            0,
            'numeric'
        );
        $this->_criteria_column_count = max(
            $criteriaColumnCount + $criteriaColumnAdd,
            0
        );

        
        $rows = PMA_ifSetOr($_REQUEST['rows'], 0, 'numeric');
        $criteriaRowAdd = PMA_ifSetOr($_REQUEST['criteriaRowAdd'], 0, 'numeric');
        $this->_criteria_row_count = max($rows + $criteriaRowAdd, 0);

        return $criteriaColumnCount;
    }

    
    private function _getLeftJoinColumnCandidatesBest(
        $search_tables, $where_clause_columns, $unique_columns, $index_columns
    ) {
        
        if (isset($unique_columns) && count($unique_columns) > 0) {
            $candidate_columns = $unique_columns;
            $needsort = 1;
            return array($candidate_columns, $needsort);
        } elseif (isset($index_columns) && count($index_columns) > 0) {
            $candidate_columns = $index_columns;
            $needsort = 1;
            return array($candidate_columns, $needsort);
        } elseif (isset($where_clause_columns) && count($where_clause_columns) > 0) {
            $candidate_columns = $where_clause_columns;
            $needsort = 0;
            return array($candidate_columns, $needsort);
        } else {
            $candidate_columns = $search_tables;
            $needsort = 0;
            return array($candidate_columns, $needsort);
        }
    }
}
