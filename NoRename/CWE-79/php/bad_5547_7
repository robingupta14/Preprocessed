<?php

class ElggSite extends ElggEntity {

	
	protected function initializeAttributes() {
		parent::initializeAttributes();

		$this->attributes['type'] = "site";
		$this->attributes['name'] = NULL;
		$this->attributes['description'] = NULL;
		$this->attributes['url'] = NULL;
		$this->attributes['tables_split'] = 2;
	}

	
	function __construct($guid = null) {
		$this->initializeAttributes();

		
		$this->initialise_attributes(false);

		if (!empty($guid)) {
			
			if ($guid instanceof stdClass) {
				
				if (!$this->load($guid)) {
					$msg = elgg_echo('IOException:FailedToLoadGUID', array(get_class(), $guid->guid));
					throw new IOException($msg);
				}

			
			} else if ($guid instanceof ElggSite) {
				elgg_deprecated_notice('This type of usage of the ElggSite constructor was deprecated. Please use the clone method.', 1.7);

				foreach ($guid->attributes as $key => $value) {
					$this->attributes[$key] = $value;
				}

			
			} else if ($guid instanceof ElggEntity) {
				throw new InvalidParameterException(elgg_echo('InvalidParameterException:NonElggSite'));

			
			} else if (strpos($guid, "http") !== false) {
				$guid = get_site_by_url($guid);
				foreach ($guid->attributes as $key => $value) {
					$this->attributes[$key] = $value;
				}

			
			} else if (is_numeric($guid)) {
				if (!$this->load($guid)) {
					throw new IOException(elgg_echo('IOException:FailedToLoadGUID', array(get_class(), $guid)));
				}
			} else {
				throw new InvalidParameterException(elgg_echo('InvalidParameterException:UnrecognisedValue'));
			}
		}
	}

	
	protected function load($guid) {
		$attr_loader = new ElggAttributeLoader(get_class(), 'site', $this->attributes);
		$attr_loader->requires_access_control = !($this instanceof ElggPlugin);
		$attr_loader->secondary_loader = 'get_site_entity_as_row';

		$attrs = $attr_loader->getRequiredAttributes($guid);
		if (!$attrs) {
			return false;
		}

		$this->attributes = $attrs;
		$this->attributes['tables_loaded'] = 2;
		cache_entity($this);

		return true;
	}

	
	protected function create() {
		global $CONFIG;
		
		$guid = parent::create();

		$name = sanitize_string($this->attributes['name']);
		$description = sanitize_string($this->attributes['description']);
		$url = sanitize_string($this->attributes['url']);

		$query = "INSERT into {$CONFIG->dbprefix}sites_entity
			(guid, name, description, url) values ($guid, '$name', '$description', '$url')";

		$result = $this->getDatabase()->insertData($query);
		if ($result === false) {
			
			return false;
		}

		return $guid;
	}

	
	protected function update() {
		global $CONFIG;
		
		if (!parent::update()) {
			return false;
		}
		
		$guid = (int)$this->guid;
		$name = sanitize_string($this->name);
		$description = sanitize_string($this->description);
		$url = sanitize_string($this->url);
		
		$query = "UPDATE {$CONFIG->dbprefix}sites_entity
			set name='$name', description='$description', url='$url' where guid=$guid";

		return $this->getDatabase()->updateData($query) !== false;
	}

	
	public function save() {
		global $CONFIG;

		
		$result = parent::save();
		if (!$result) {
			return false;
		}

		
		if (!$this->get('site_guid')) {
			$guid = (int)$this->get('guid');
			$this->getDatabase()->updateData("UPDATE {$CONFIG->dbprefix}entities SET site_guid=$guid WHERE guid=$guid");
		}
		
		return $result;
	}

	
	public function delete() {
		global $CONFIG;
		if ($CONFIG->site->getGUID() == $this->guid) {
			throw new SecurityException('SecurityException:deletedisablecurrentsite');
		}

		return parent::delete();
	}

	
	public function disable($reason = "", $recursive = true) {
		global $CONFIG;

		if ($CONFIG->site->getGUID() == $this->guid) {
			throw new SecurityException('SecurityException:deletedisablecurrentsite');
		}

		return parent::disable($reason, $recursive);
	}
	
	
	public function getDisplayName() {
		return $this->name;
	}

	
	public function setDisplayName($displayName) {
		$this->name = $displayName;
	}

	
	public function getMembers($options = array(), $offset = 0) {
		if (!is_array($options)) {
			elgg_deprecated_notice("ElggSite::getMembers uses different arguments!", 1.8);
			$options = array(
				'limit' => $options,
				'offset' => $offset,
			);
		}

		$defaults = array(
			'site_guids' => ELGG_ENTITIES_ANY_VALUE,
			'relationship' => 'member_of_site',
			'relationship_guid' => $this->getGUID(),
			'inverse_relationship' => TRUE,
			'type' => 'user',
		);

		$options = array_merge($defaults, $options);

		return elgg_get_entities_from_relationship($options);
	}

	
	public function listMembers($options = array()) {
		$defaults = array(
			'site_guids' => ELGG_ENTITIES_ANY_VALUE,
			'relationship' => 'member_of_site',
			'relationship_guid' => $this->getGUID(),
			'inverse_relationship' => TRUE,
			'type' => 'user',
		);

		$options = array_merge($defaults, $options);

		return elgg_list_entities_from_relationship($options);
	}

	
	public function addUser($user_guid) {
		return add_site_user($this->getGUID(), $user_guid);
	}

	
	public function removeUser($user_guid) {
		return remove_site_user($this->getGUID(), $user_guid);
	}

	
	public function getObjects($subtype = "", $limit = 10, $offset = 0) {
		return get_site_objects($this->getGUID(), $subtype, $limit, $offset);
	}

	
	public function addObject($object_guid) {
		return add_site_object($this->getGUID(), $object_guid);
	}

	
	public function removeObject($object_guid) {
		return remove_site_object($this->getGUID(), $object_guid);
	}

	
	public function getCollections($subtype = "", $limit = 10, $offset = 0) {
		elgg_deprecated_notice("ElggSite::getCollections() is deprecated", 1.8);
		get_site_collections($this->getGUID(), $subtype, $limit, $offset);
	}

	

	
	public function getExportableValues() {
		return array_merge(parent::getExportableValues(), array(
			'name',
			'description',
			'url',
		));
	}

	
	public function checkWalledGarden() {
		global $CONFIG;

		if ($CONFIG->walled_garden) {
			if ($CONFIG->default_access == ACCESS_PUBLIC) {
				$CONFIG->default_access = ACCESS_LOGGED_IN;
			}
			elgg_register_plugin_hook_handler(
					'access:collections:write',
					'user',
					'_elgg_walled_garden_remove_public_access');

			if (!elgg_is_logged_in()) {
				
				elgg_register_plugin_hook_handler('index', 'system', 'elgg_walled_garden_index', 1);

				if (!$this->isPublicPage()) {
					$_SESSION['last_forward_from'] = current_page_url();
					register_error(elgg_echo('loggedinrequired'));
					forward();
				}
			}
		}
	}

	
	public function isPublicPage($url = '') {
		global $CONFIG;

		if (empty($url)) {
			$url = current_page_url();

			
			if ($pos = strpos($url, '?')) {
				$url = substr($url, 0, $pos);
			}
		}

		
		if ($url == elgg_get_site_url($this->guid)) {
			return TRUE;
		}

		
		$defaults = array(
			'walled_garden/.*',
			'login',
			'action/login',
			'register',
			'action/register',
			'forgotpassword',
			'resetpassword',
			'action/user/requestnewpassword',
			'action/user/passwordreset',
			'action/security/refreshtoken',
			'ajax/view/js/languages',
			'upgrade\.php',
			'css/.*',
			'js/.*',
			'cache/css/.*',
			'cache/js/.*',
			'cron/.*',
			'services/.*',
		);

		
		$plugins = elgg_trigger_plugin_hook('public_pages', 'walled_garden', NULL, array());

		

		
		foreach (array_merge($defaults, $plugins) as $public) {
			$pattern = "`^{$CONFIG->url}$public/*$`i";
			if (preg_match($pattern, $url)) {
				return TRUE;
			}
		}

		
		return FALSE;
	}
}
