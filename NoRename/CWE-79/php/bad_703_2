<?php




$User->check_user_session();


$csrf = $User->Crypto->csrf_cookie ("create", "scan");





if ($User->settings->enableSNMP!="1")           { $Result->show("danger", _("SNMP module disbled"), true); }

$subnet = $Subnets->fetch_subnet ("id", $_POST['subnetId']);
if ($subnet===false)                            { $Result->show("danger", _("Invalid subnet Id"), true);  }


if($Subnets->check_permission ($User->user, $_POST['subnetId']) != 3) 	{ $Result->show("danger", _('You do not have permissions to modify hosts in this subnet')."!", true, true); }


$Snmp = new phpipamSNMP ();


$all_subnet_hosts = (array) $Addresses->fetch_subnet_addresses ($_POST['subnetId']);

if (sizeof($all_subnet_hosts)>0) {
    foreach ($all_subnet_hosts as $h) {
        $subnet_ip_addresses[] = $Subnets->transform_address($h->ip_addr, "dotted");
    }
}


$selected_ip_fields = $User->settings->IPfilter;
$selected_ip_fields = explode(";", $selected_ip_fields);


error_reporting(E_ERROR);


$devices_used = $Tools->fetch_multiple_objects ("devices", "snmp_queries", "%get_arp_table%", "id", true, true);


if ($devices_used !== false) {
    foreach ($devices_used as $d) {
        
        $permitted_sections = explode(";", $d->sections);
        
        if (in_array($subnet->sectionId, $permitted_sections)) {
            $permitted_devices[] = $d;
        }
    }
}


if (!isset($permitted_devices))                 { $Result->show("danger", _("No devices for SNMP ARP query available"), true); }


foreach ($permitted_devices as $d) {
    
    $Snmp->set_snmp_device ($d);
    
    try {
        $res = $Snmp->get_query("get_arp_table");
        
        if (sizeof($res)>0) {
           
           $debug[$d->hostname]["get_arp_table"] = $res;
           
           foreach ($res as $kr=>$r) {
               
               if ($Subnets->is_subnet_inside_subnet ($r['ip']."/32", $Subnets->transform_address($subnet->subnet, "dotted")."/".$subnet->mask)===false) { }
               
               elseif (in_array($r['ip'], $subnet_ip_addresses)) { }
               
               else {
                   $found[$d->id][] = $r;
               }
           }
        }
        
        $res = $Snmp->get_query("get_interfaces_ip");
        
        if (sizeof($res)>0) {
           
           $debug[$d->hostname]["get_interfaces_ip"] = $res;
           
           foreach ($res as $kr=>$r) {
               
               if ($Subnets->is_subnet_inside_subnet ($r['ip']."/32", $Subnets->transform_address($subnet->subnet, "dotted")."/".$subnet->mask)===false) { }
               
               elseif (in_array($r['ip'], $subnet_ip_addresses)) { }
               
               else {
                   $found[$d->id][] = $r;
               }
           }
        }
    } catch (Exception $e) {}
}


if(sizeof($found)==0 && isset($errors))          {
    $Result->show("info", _("No new hosts found"), false);
    $Result->show("warning", implode("<hr>", $errors), false);
}

elseif(sizeof($found)==0) 	                     { $Result->show("info", _("No new hosts found")."!", false); }

else {
	
	$nsid = $subnet===false ? false : $subnet->nameserverId;

    
    $Tools = new Tools ($Database);
    $required_fields = $Tools->fetch_custom_fields ('ipaddresses');
    if($required_fields!==false) {
        foreach ($required_fields as $k=>$f) {
            if ($f['Null']!="NO") {
                unset($required_fields[$k]);
            }
        }
    }

    
	$colspan = 5 + sizeof(@$required_fields);
	
	if(in_array('port', $selected_ip_fields)) { $colspan++; }


	
	
	

	
	
	
	
	
	
	
	if(in_array('port', $selected_ip_fields)) {
	
	}
    
	if (isset($required_fields)) {
		foreach ($required_fields as $field) {
            
		}
    }
	
	

	
	$m=0;
	foreach($found as $deviceid=>$device) {
    	foreach ($device as $ip ) {
            
    		
    		$hostname = $DNS->resolve_address($ip['ip'], false, true, $nsid);

    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		if(in_array('port', $selected_ip_fields)) {
    		
    		
    		
    		}
    		
    		if (isset($required_fields)) {
        		foreach ($required_fields as $field) {
        			
        			$field['nameNew'] = str_replace(" ", "___", $field['name']);

        			

        			
        			if(substr($field['type'], 0,3) == "set" || substr($field['type'], 0,4) == "enum") {
        				
        				$tmp = substr($field['type'], 0,3)=="set" ? explode(",", str_replace(array("set(", ")", "'"), "", $field['type'])) : explode(",", str_replace(array("enum(", ")", "'"), "", $field['type']));
        				
        				if($field['Null']!="NO") { array_unshift($tmp, ""); }

        				
        				foreach($tmp as $v) {
        					if($v==@$address[$field['name']])	{  }
        					else								{  }
        				}
        				
        			}
        			
        			elseif($field['type'] == "date" || $field['type'] == "datetime") {
        				
        				if($timeP==0) {
        					
        					
        					
        					
        					
        					';
        					
        					';

        					
        					
        				}
        				$timeP++;

        				
        				if($field['type'] == "date")	{ $size = 10; $class='datepicker';		$format = "yyyy-MM-dd"; }
        				else							{ $size = 19; $class='datetimepicker';	$format = "yyyy-MM-dd"; }

        				
        				if(!isset($address[$field['name']]))	{  }
        				else									{  }
        			}
        			
        			elseif($field['type'] == "tinyint(1)") {
        				
        				$tmp = array(0=>"No",1=>"Yes");
        				
        				if($field['Null']!="NO") { $tmp[2] = ""; }

        				foreach($tmp as $k=>$v) {
        					if(strlen(@$address[$field['name']])==0 && $k==2)	{  }
        					elseif($k==@$address[$field['name']])				{  }
        					else												{  }
        				}
        				
        			}
        			
        			else {
        				
        			}

                    
        		}
    		}
    		
    		
    		

    		$m++;
		}
	}

	
	
	
	
	
	
	

	
	

    
    if (isset($errors)) {
        
        foreach ($errors as $e) {
            
        }
    }
}


'>";



foreach ($debug as $k=>$d) {
     ".$k."<br>";
}




if($_POST['debug']==1) 				{  print_r($debug);  }