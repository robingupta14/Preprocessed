







static CONST char *pam_module_name = "pam_radius_auth";
static char conf_file[BUFFER_SIZE];
static int opt_debug = FALSE;





static radius_server_t *live_server = NULL;
static time_t session_time;


static void _pam_log(int err, CONST char *format, ...)
{
 va_list args;
 char buffer[BUFFER_SIZE];

 va_start(args, format);
 vsprintf(buffer, format, args);

 syslog(err, "%s: %s", pam_module_name, buffer);
 va_end(args);
}


static int _pam_parse(int argc, CONST char **argv, radius_conf_t *conf)
{
 int ctrl=0;

 memset(conf, 0, sizeof(radius_conf_t));

 strcpy(conf_file, CONF_FILE);


 snprintf(conf->prompt, MAXPROMPT, "%s: ", DEFAULT_PROMPT);




 if ((argc == 0) || (argv == NULL)) {
  return ctrl;
 }


 for (ctrl=0; argc-- > 0; ++argv) {


  if (!strncmp(*argv,"conf=",5)) {

   if (strlen(*argv+5) >= sizeof(conf_file)) {
    _pam_log(LOG_ERR, "conf= argument too long");
    conf_file[0] = 0;
    return 0;
   }
   strcpy(conf_file,*argv+5);

  } else if (!strcmp(*argv, "use_first_pass")) {
   ctrl |= PAM_USE_FIRST_PASS;

  } else if (!strcmp(*argv, "try_first_pass")) {
   ctrl |= PAM_TRY_FIRST_PASS;

  } else if (!strcmp(*argv, "skip_passwd")) {
   ctrl |= PAM_SKIP_PASSWD;

  } else if (!strncmp(*argv, "retry=", 6)) {
   conf->retries = atoi(*argv+6);

  } else if (!strcmp(*argv, "localifdown")) {
   conf->localifdown = 1;

  } else if (!strncmp(*argv, "client_id=", 10)) {
   if (conf->client_id) {
    _pam_log(LOG_WARNING, "ignoring duplicate '%s'", *argv);
   } else {
    conf->client_id = (char *) *argv+10;
   }
  } else if (!strcmp(*argv, "accounting_bug")) {
   conf->accounting_bug = TRUE;

  } else if (!strcmp(*argv, "ruser")) {
   ctrl |= PAM_RUSER_ARG;

  } else if (!strcmp(*argv, "debug")) {
   ctrl |= PAM_DEBUG_ARG;
   conf->debug = 1;
   opt_debug = TRUE;

  } else if (!strncmp(*argv, "prompt=", 7)) {
   if (!strncmp(conf->prompt, (char*)*argv+7, MAXPROMPT)) {
    _pam_log(LOG_WARNING, "ignoring duplicate '%s'", *argv);
   } else {

    if (strlen((char*)*argv+7) >= (MAXPROMPT - 3)) {
     *((char*)*argv+7 + (MAXPROMPT - 3)) = 0;
    }

    memset(conf->prompt, 0, sizeof(conf->prompt));
    snprintf(conf->prompt, MAXPROMPT, "%s: ", (char*)*argv+7);
   }

  } else if (!strcmp(*argv, "force_prompt")) {
   conf->force_prompt= TRUE;

  } else if (!strncmp(*argv, "max_challenge=", 14)) {
   conf->max_challenge = atoi(*argv+14);

  } else {
   _pam_log(LOG_WARNING, "unrecognized option '%s'", *argv);
  }
 }

 return ctrl;
}


void _int_free(pam_handle_t * pamh, void *x, int error_status)
{
  free(x);
}

static uint32_t ipstr2long(char *ip_str) {
 char buf[6];
 char *ptr;
 int i;
 int count;
 uint32_t ipaddr;
 int cur_byte;

 ipaddr = (uint32_t)0;

 for(i = 0;i < 4;i++) {
  ptr = buf;
  count = 0;
  *ptr = '\0';

  while(*ip_str != '.' && *ip_str != '\0' && count < 4) {
   if (!isdigit(*ip_str)) {
    return (uint32_t)0;
   }
   *ptr++ = *ip_str++;
   count++;
  }

  if (count >= 4 || count == 0) {
   return (uint32_t)0;
  }

  *ptr = '\0';
  cur_byte = atoi(buf);
  if (cur_byte < 0 || cur_byte > 255) {
   return (uint32_t)0;
  }

  ip_str++;
  ipaddr = ipaddr << 8 | (uint32_t)cur_byte;
 }
 return ipaddr;
}




static int good_ipaddr(char *addr) {
 int dot_count;
 int digit_count;

 dot_count = 0;
 digit_count = 0;
 while(*addr != '\0' && *addr != ' ') {
  if (*addr == '.') {
   dot_count++;
   digit_count = 0;
  } else if (!isdigit(*addr)) {
   dot_count = 5;
  } else {
   digit_count++;
   if (digit_count > 3) {
    dot_count = 5;
   }
  }
  addr++;
 }
 if (dot_count != 3) {
  return -1;
 } else {
  return 0;
 }
}





static uint32_t get_ipaddr(char *host) {
 struct hostent *hp;

 if (good_ipaddr(host) == 0) {
  return ipstr2long(host);
 } else if ((hp = gethostbyname(host)) == (struct hostent *)NULL) {
  return (uint32_t)0;
 }

 return ntohl(*(uint32_t *)hp->h_addr);
}




static int host2server(radius_server_t *server)
{
 char *p;

 if ((p = strchr(server->hostname, ':')) != NULL) {
  *(p++) = '\0';
 }

 if ((server->ip.s_addr = get_ipaddr(server->hostname)) == ((uint32_t)0)) {
  if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "DEBUG: get_ipaddr(%s) returned 0.\n", server->hostname);
  return PAM_AUTHINFO_UNAVAIL;
 }




 if (!server->port) {
  if (p && isdigit(*p)) {
   unsigned int i = atoi(p) & 0xffff;

   if (!server->accounting) {
    server->port = htons((uint16_t) i);
   } else {
    server->port = htons((uint16_t) (i + 1));
   }
  } else {
   struct servent *svp;

   if (p) {
    svp = getservbyname (p, "udp");

    if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "DEBUG: getservbyname('%s', udp) returned %p.\n", p, svp);
    *(--p) = ':';
   } else {
    if (!server->accounting) {
     svp = getservbyname ("radius", "udp");
     if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "DEBUG: getservbyname(radius, udp) returned %p.\n", svp);
    } else {
     svp = getservbyname ("radacct", "udp");
     if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "DEBUG: getservbyname(radacct, udp) returned %p.\n", svp);
    }
   }

   if (svp == (struct servent *) 0) {

    return PAM_AUTHINFO_UNAVAIL;
   }

   server->port = svp->s_port;
  }
 }

 return PAM_SUCCESS;
}




static unsigned char * xor(unsigned char *p, unsigned char *q, int length)
{
 int i;
 unsigned char *retval = p;

 for (i = 0; i < length; i++) {
  *(p++) ^= *(q++);
 }
 return retval;
}

static void get_random_vector(unsigned char *vector)
{

 int fd = open("/dev/urandom",O_RDONLY);
 int total = 0;
 if (fd >= 0) {
  while (total < AUTH_VECTOR_LEN) {
   int bytes = read(fd, vector + total, AUTH_VECTOR_LEN - total);
   if (bytes <= 0)
    break;
   total += bytes;
  }
  close(fd);
 }

 if (total != AUTH_VECTOR_LEN)

 {
  MD5_CTX my_md5;
  struct timeval tv;
  struct timezone tz;
  static unsigned int session = 0;



  gettimeofday(&tv,&tz);

  if (session == 0) {
   session = getppid();
  }

  tv.tv_sec ^= getpid() * session++;


  MD5Init(&my_md5);
  MD5Update(&my_md5, (unsigned char *) &tv, sizeof(tv));
  MD5Update(&my_md5, (unsigned char *) &tz, sizeof(tz));
  MD5Final(vector, &my_md5);
 }
}







static void get_accounting_vector(AUTH_HDR *request, radius_server_t *server)
{
 MD5_CTX my_md5;
 int secretlen = strlen(server->secret);
 int len = ntohs(request->length);

 memset(request->vector, 0, AUTH_VECTOR_LEN);
 MD5Init(&my_md5);
 memcpy(((char *)request) + len, server->secret, secretlen);

 MD5Update(&my_md5, (unsigned char *)request, len + secretlen);
 MD5Final(request->vector, &my_md5);
}




static int verify_packet(char *secret, AUTH_HDR *response, AUTH_HDR *request)
{
 MD5_CTX my_md5;
 unsigned char calculated[AUTH_VECTOR_LEN];
 unsigned char reply[AUTH_VECTOR_LEN];





 memcpy(reply, response->vector, AUTH_VECTOR_LEN);
 memcpy(response->vector, request->vector, AUTH_VECTOR_LEN);


 MD5Init(&my_md5);
 MD5Update(&my_md5, (unsigned char *) response, ntohs(response->length));

 if (*secret) {
  MD5Update(&my_md5, (unsigned char *) secret, strlen(secret));
 }

 MD5Final(calculated, &my_md5);


 if (memcmp(calculated, reply, AUTH_VECTOR_LEN) != 0) {
  return FALSE;
 }
 return TRUE;
}





static attribute_t *find_attribute(AUTH_HDR *response, unsigned char type)
{
 attribute_t *attr = (attribute_t *) &response->data;

 int len = ntohs(response->length) - AUTH_HDR_LEN;

 while (attr->attribute != type) {
  if ((len -= attr->length) <= 0) {
   return NULL;
  }
  attr = (attribute_t *) ((char *) attr + attr->length);
 }

 return attr;
}




static void add_attribute(AUTH_HDR *request, unsigned char type, CONST unsigned char *data, int length)
{
 attribute_t *p;

 p = (attribute_t *) ((unsigned char *)request + ntohs(request->length));
 p->attribute = type;
 p->length = length + 2;
 request->length = htons(ntohs(request->length) + p->length);
 memcpy(p->data, data, length);
}




static void add_int_attribute(AUTH_HDR *request, unsigned char type, int data)
{
 int value = htonl(data);

 add_attribute(request, type, (unsigned char *) &value, sizeof(int));
}

static void add_password(AUTH_HDR *request, unsigned char type, CONST char *password, char *secret)
{
 MD5_CTX md5_secret, my_md5;
 unsigned char misc[AUTH_VECTOR_LEN];
 int i;
 int length = strlen(password);
 unsigned char hashed[256 + AUTH_PASS_LEN];
 unsigned char *vector;
 attribute_t *attr;

 if (length > MAXPASS) {
  length = MAXPASS;
 }

 if (length == 0) {
  length = AUTH_PASS_LEN;
 } if ((length & (AUTH_PASS_LEN - 1)) != 0) {
  length += (AUTH_PASS_LEN - 1);
  length &= ~(AUTH_PASS_LEN - 1);
 }

 memset(hashed, 0, length);
 memcpy(hashed, password, strlen(password));

 attr = find_attribute(request, PW_PASSWORD);

 if (type == PW_PASSWORD) {
  vector = request->vector;
 } else {
  vector = attr->data;
 }




 MD5Init(&md5_secret);
 MD5Update(&md5_secret, (unsigned char *) secret, strlen(secret));
 my_md5 = md5_secret;
 MD5Update(&my_md5, vector, AUTH_VECTOR_LEN);
 MD5Final(misc, &my_md5);
 xor(hashed, misc, AUTH_PASS_LEN);


 for (i = 1; i < (length >> 4); i++) {
  my_md5 = md5_secret;
  MD5Update(&my_md5, &hashed[(i-1) * AUTH_PASS_LEN], AUTH_PASS_LEN);
  MD5Final(misc, &my_md5);
  xor(&hashed[i * AUTH_PASS_LEN], misc, AUTH_PASS_LEN);
 }

 if (type == PW_OLD_PASSWORD) {
  attr = find_attribute(request, PW_OLD_PASSWORD);
 }

 if (!attr) {
  add_attribute(request, type, hashed, length);
 } else {
  memcpy(attr->data, hashed, length);
 }
}

static void cleanup(radius_server_t *server)
{
 radius_server_t *next;

 while (server) {
  next = server->next;
  _pam_drop(server->hostname);
  _pam_forget(server->secret);
  _pam_drop(server);
  server = next;
 }
}





static int initialize(radius_conf_t *conf, int accounting)
{
 struct sockaddr salocal;
 char hostname[BUFFER_SIZE];
 char secret[BUFFER_SIZE];

 char buffer[BUFFER_SIZE];
 char *p;
 FILE *fserver;
 radius_server_t *server = NULL;
 struct sockaddr_in * s_in;
 int timeout;
 int line = 0;


 if ((fserver = fopen (conf_file, "r")) == (FILE*)NULL) {
  _pam_log(LOG_ERR, "Could not open configuration file %s: %s\n",
   conf_file, strerror(errno));
  return PAM_ABORT;
 }

 while (!feof(fserver) && (fgets (buffer, sizeof(buffer), fserver) != (char*) NULL) && (!ferror(fserver))) {
  line++;
  p = buffer;




  while (*p && ((*p == ' ') || (*p == '\t') || (*p == '\r') || (*p == '\n'))) {
   p++;
  }




  if ((!*p) || (*p == '#')) {
   continue;
  }

  timeout = 3;
  if (sscanf(p, "%s %s %d", hostname, secret, &timeout) < 2) {
   _pam_log(LOG_ERR, "ERROR reading %s, line %d: Could not read hostname or secret\n",
     conf_file, line);
   continue;
  } else {
   radius_server_t *tmp;

   tmp = malloc(sizeof(radius_server_t));
   if (server) {
    server->next = tmp;
    server = server->next;
   } else {
    conf->server = tmp;
    server= tmp;
   }


   server->hostname = strdup(hostname);
   server->secret = strdup(secret);
   server->accounting = accounting;
   server->port = 0;

   if ((timeout < 1) || (timeout > 60)) {
    server->timeout = 3;
   } else {
    server->timeout = timeout;
   }
   server->next = NULL;
  }
 }
 fclose(fserver);

 if (!server) {
  _pam_log(LOG_ERR, "No RADIUS server found in configuration file %s\n",
    conf_file);
  return PAM_AUTHINFO_UNAVAIL;
 }


 conf->sockfd = socket(AF_INET, SOCK_DGRAM, 0);
 if (conf->sockfd < 0) {
  _pam_log(LOG_ERR, "Failed to open RADIUS socket: %s\n", strerror(errno));
  return PAM_AUTHINFO_UNAVAIL;
 }


 s_in = (struct sockaddr_in *) &salocal;
 memset ((char *) s_in, '\0', sizeof(struct sockaddr));
 s_in->sin_family = AF_INET;
 s_in->sin_addr.s_addr = INADDR_ANY;
 s_in->sin_port = 0;


 if (bind(conf->sockfd, &salocal, sizeof (struct sockaddr_in)) < 0) {
  _pam_log(LOG_ERR, "Failed binding to port: %s", strerror(errno));
  close(conf->sockfd);
  return PAM_AUTHINFO_UNAVAIL;
 }

 return PAM_SUCCESS;
}





static void build_radius_packet(AUTH_HDR *request, CONST char *user, CONST char *password, radius_conf_t *conf)
{
 char hostname[256];
 uint32_t ipaddr;

 hostname[0] = '\0';
 gethostname(hostname, sizeof(hostname) - 1);

 request->length = htons(AUTH_HDR_LEN);

 if (password) {
  get_random_vector(request->vector);
 }

 add_attribute(request, PW_USER_NAME, (unsigned char *) user, strlen(user));




 if (password) {
  add_password(request, PW_PASSWORD, password, conf->server->secret);




 } else if (request->code != PW_ACCOUNTING_REQUEST) {
  add_password(request, PW_PASSWORD, "", conf->server->secret);
 }


 if ((conf->server->ip.s_addr == ntohl(0x7f000001)) || (!hostname[0])) {
  ipaddr = 0x7f000001;
 } else {
  struct hostent *hp;

  if ((hp = gethostbyname(hostname)) == (struct hostent *) NULL) {
   ipaddr = 0x00000000;
  } else {
   ipaddr = ntohl(*(uint32_t *) hp->h_addr);
  }
 }


 if (ipaddr) {
  add_int_attribute(request, PW_NAS_IP_ADDRESS, ipaddr);
 }


 if (conf->client_id && *conf->client_id) {
  add_attribute(request, PW_NAS_IDENTIFIER, (unsigned char *) conf->client_id, strlen(conf->client_id));
 }






 add_int_attribute(request, PW_NAS_PORT_ID, getpid());
 add_int_attribute(request, PW_NAS_PORT_TYPE, PW_NAS_PORT_TYPE_VIRTUAL);
}





static int talk_radius(radius_conf_t *conf, AUTH_HDR *request, AUTH_HDR *response,
         char *password, char *old_password, int tries)
{
 socklen_t salen;
 int total_length;
 fd_set set;
 struct timeval tv;
 time_t now, end;
 int rcode;
 struct sockaddr saremote;
 struct sockaddr_in *s_in = (struct sockaddr_in *) &saremote;
 radius_server_t *server = conf->server;
 int ok;
 int server_tries;
 int retval;

 while (server != NULL) {

  memset(response, 0, sizeof(AUTH_HDR));


  if ((retval = host2server(server)) != PAM_SUCCESS) {
   _pam_log(LOG_ERR,
     "Failed looking up IP address for RADIUS server %s (errcode=%d)",
     server->hostname, retval);
   ok = FALSE;
   goto next;
  }


  memset ((char *) s_in, '\0', sizeof(struct sockaddr));
  s_in->sin_family = AF_INET;
  s_in->sin_addr.s_addr = htonl(server->ip.s_addr);
  s_in->sin_port = server->port;
  total_length = ntohs(request->length);

  if (!password) {
   get_accounting_vector(request, server);
  }

  server_tries = tries;
 send:

  if (sendto(conf->sockfd, (char *) request, total_length, 0,
      &saremote, sizeof(struct sockaddr_in)) < 0) {
   _pam_log(LOG_ERR, "Error sending RADIUS packet to server %s: %s",
     server->hostname, strerror(errno));
   ok = FALSE;
   goto next;
  }



  salen = sizeof(struct sockaddr);
  tv.tv_sec = server->timeout;
  tv.tv_usec = 0;
  FD_ZERO(&set);
  FD_SET(conf->sockfd, &set);

  time(&now);
  end = now + tv.tv_sec;


  ok = TRUE;
  while (ok) {
   rcode = select(conf->sockfd + 1, &set, NULL, NULL, &tv);


   if (rcode == 0) {
    _pam_log(LOG_ERR, "RADIUS server %s failed to respond", server->hostname);
    if (--server_tries) {
     goto send;
    }
    ok = FALSE;
    break;
   } else if (rcode < 0) {


    if (errno == EINTR) {
     time(&now);

     if (now > end) {
      _pam_log(LOG_ERR, "RADIUS server %s failed to respond",
        server->hostname);
      if (--server_tries) goto send;
      ok = FALSE;
      break;
     }

     tv.tv_sec = end - now;
     if (tv.tv_sec == 0) {
      tv.tv_sec = 1;
     }

    } else {
     _pam_log(LOG_ERR, "Error waiting for response from RADIUS server %s: %s",
       server->hostname, strerror(errno));
     ok = FALSE;
     break;
    }


   } else if (FD_ISSET(conf->sockfd, &set)) {


    if ((total_length = recvfrom(conf->sockfd, (void *) response, BUFFER_SIZE,
                 0, &saremote, &salen)) < 0) {
     _pam_log(LOG_ERR, "error reading RADIUS packet from server %s: %s",
        server->hostname, strerror(errno));
     ok = FALSE;
     break;


    } else {
     char *p = server->secret;

     if ((ntohs(response->length) != total_length) ||
         (ntohs(response->length) > BUFFER_SIZE)) {
      _pam_log(LOG_ERR, "RADIUS packet from server %s is corrupted",
         server->hostname);
      ok = FALSE;
      break;
     }


     if (password) {
      if (old_password) {



       p = "";

      }




     } else {
      if (conf->accounting_bug) {
       p = "";
      }
     }

     if (!verify_packet(p, response, request)) {
      _pam_log(LOG_ERR, "packet from RADIUS server %s failed verification: "
        "The shared secret is probably incorrect.", server->hostname);
      ok = FALSE;
      break;
     }




     if (response->id != request->id) {
      _pam_log(LOG_WARNING, "Response packet ID %d does not match the "
        "request packet ID %d: verification of packet fails",
        response->id, request->id);
      ok = FALSE;
      break;
     }
    }







    break;
   }

  }


  next:
  if (!ok) {
   radius_server_t *old;

   old = server;
   server = server->next;
   conf->server = server;

   _pam_forget(old->secret);
   free(old->hostname);
   free(old);

   if (server) {

    get_random_vector(request->vector);
    request->id = request->vector[0];


    if (password) {
     get_random_vector(request->vector);
     if (old_password) {
      add_password(request, PW_PASSWORD, password, old_password);
      add_password(request, PW_OLD_PASSWORD, old_password, old_password);
     } else {
      add_password(request, PW_PASSWORD, password, server->secret);
     }
    }
   }
   continue;

  } else {

   cleanup(server->next);
   server->next = NULL;
   live_server = server;
   break;
  }
 }

 if (!server) {
  _pam_log(LOG_ERR, "All RADIUS servers failed to respond.");
  if (conf->localifdown)
   retval = PAM_IGNORE;
  else
   retval = PAM_AUTHINFO_UNAVAIL;
 } else {
  retval = PAM_SUCCESS;
 }

 return retval;
}

static int rad_converse(pam_handle_t *pamh, int msg_style, char *message, char **password)
{
 CONST struct pam_conv *conv;
 struct pam_message resp_msg;
 CONST struct pam_message *msg[1];
 struct pam_response *resp = NULL;
 int retval;

 resp_msg.msg_style = msg_style;
 resp_msg.msg = message;
 msg[0] = &resp_msg;


 retval = pam_get_item(pamh, PAM_CONV, (CONST void **) &conv);
 if (retval != PAM_SUCCESS) { return retval; };

 retval = conv->conv(1, msg, &resp,conv->appdata_ptr);
 if (retval != PAM_SUCCESS) { return retval; };

 if (password) {

  *password = resp->resp;
  free(resp);
 }

 return PAM_SUCCESS;
}

PAM_EXTERN int pam_sm_authenticate(pam_handle_t *pamh,int flags,int argc,CONST char **argv)
{
 CONST char *user;
 CONST char *userinfo;
 char *password = NULL;
 CONST char *rhost;
 char *resp2challenge = NULL;
 int ctrl;
 int retval = PAM_AUTH_ERR;
 int num_challenge = 0;

 char recv_buffer[4096];
 char send_buffer[4096];
 AUTH_HDR *request = (AUTH_HDR *) send_buffer;
 AUTH_HDR *response = (AUTH_HDR *) recv_buffer;
 radius_conf_t config;

 ctrl = _pam_parse(argc, argv, &config);


 retval = pam_get_user(pamh, &user, NULL);
 if (retval != PAM_SUCCESS) { int *pret = malloc(sizeof(int)); *pret = retval; pam_set_data(pamh, "rad_setcred_return", (void *) pret, _int_free); return retval; };


 if ((user == NULL) || (strlen(user) > MAXPWNAM)) {
  int *pret = malloc(sizeof(int));
  *pret = PAM_USER_UNKNOWN;
  pam_set_data(pamh, "rad_setcred_return", (void *) pret, _int_free);

  if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "User name was NULL, or too long");
  return PAM_USER_UNKNOWN;
 }
 if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "Got user name %s", user);

 if (ctrl & PAM_RUSER_ARG) {
  retval = pam_get_item(pamh, PAM_RUSER, (CONST void **) &userinfo);
  if (retval != PAM_SUCCESS) { int *pret = malloc(sizeof(int)); *pret = retval; pam_set_data(pamh, "rad_setcred_return", (void *) pret, _int_free); return retval; };
  if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "Got PAM_RUSER name %s", userinfo);

  if (!strcmp("root", user)) {
   user = userinfo;
   if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "Username now %s from ruser", user);
  } else {
   if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "Skipping ruser for non-root auth");
  }
 }





 retval = initialize(&config, FALSE);
 if (retval != PAM_SUCCESS) { int *pret = malloc(sizeof(int)); *pret = retval; pam_set_data(pamh, "rad_setcred_return", (void *) pret, _int_free); return retval; };





 if (!config.client_id) {
  retval = pam_get_item(pamh, PAM_SERVICE, (CONST void **) &config.client_id);
  if (retval != PAM_SUCCESS) { int *pret = malloc(sizeof(int)); *pret = retval; pam_set_data(pamh, "rad_setcred_return", (void *) pret, _int_free); return retval; };
 }






 request->code = PW_AUTHENTICATION_REQUEST;
 get_random_vector(request->vector);
 request->id = request->vector[0];


        if (!config.force_prompt) {
                if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "ignore last_pass, force_prompt set");
  retval = pam_get_item(pamh, PAM_AUTHTOK, (CONST void **) &password);
  if (retval != PAM_SUCCESS) {goto error; };
        }

 if (password) {
  password = strdup(password);
  if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "Got password %s", password);
 }


 if (!password) {
  if (ctrl & PAM_USE_FIRST_PASS) {
   retval = PAM_AUTH_ERR;
   goto error;
  }


  if (!(ctrl & PAM_SKIP_PASSWD)) {
   retval = rad_converse(pamh, PAM_PROMPT_ECHO_OFF, config.prompt, &password);
   if (retval != PAM_SUCCESS) {goto error; };

  }
 }

 build_radius_packet(request, user, password, &config);

 add_int_attribute(request, PW_USER_SERVICE_TYPE, PW_AUTHENTICATE_ONLY);







 retval = pam_get_item(pamh, PAM_RHOST, (CONST void **) &rhost);
 if (retval != PAM_SUCCESS) {goto error; };
 if (rhost) {
  add_attribute(request, PW_CALLING_STATION_ID, (unsigned char *) rhost,
   strlen(rhost));
 }

 if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "Sending RADIUS request code %d", request->code);

 retval = talk_radius(&config, request, response, password, NULL, config.retries + 1);
 if (retval != PAM_SUCCESS) {goto error; };

 if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "Got RADIUS response code %d", response->code);

 while (response->code == PW_ACCESS_CHALLENGE) {
  attribute_t *a_state, *a_reply;
  char challenge[BUFFER_SIZE];


  if (((a_state = find_attribute(response, PW_STATE)) == NULL) ||
      ((a_reply = find_attribute(response, PW_REPLY_MESSAGE)) == NULL)) {

   _pam_log(LOG_ERR, "RADIUS Access-Challenge received with State or Reply-Message missing");
   retval = PAM_AUTHINFO_UNAVAIL;
   goto error;
  }




  if ((a_state->length <= 2) || (a_reply->length <= 2)) {
   _pam_log(LOG_ERR, "RADIUS Access-Challenge received with invalid State or Reply-Message");
   retval = PAM_AUTHINFO_UNAVAIL;
   goto error;
  }

  memcpy(challenge, a_reply->data, a_reply->length - 2);
  challenge[a_reply->length - 2] = 0;


  retval = rad_converse(pamh, PAM_PROMPT_ECHO_ON, challenge, &resp2challenge);
  if (retval != PAM_SUCCESS) {goto error; };


  build_radius_packet(request, user, resp2challenge, &config);

  request->id++;

  if (rhost) {
   add_attribute(request, PW_CALLING_STATION_ID, (unsigned char *) rhost,
          strlen(rhost));
  }


  add_attribute(request, PW_STATE, a_state->data, a_state->length - 2);

  retval = talk_radius(&config, request, response, resp2challenge, NULL, 1);
  if (retval != PAM_SUCCESS) {goto error; };

  if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "Got response to challenge code %d", response->code);





  if (config.max_challenge > 0 && response->code == PW_ACCESS_CHALLENGE) {
   num_challenge++;
   if (num_challenge >= config.max_challenge) {
    if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "maximum number of challenges (%d) reached, failing", num_challenge);
    break;
   }
  }
 }


 if (response->code == PW_AUTHENTICATION_ACK) {
  retval = PAM_SUCCESS;
 } else {
  retval = PAM_AUTH_ERR;

error:

  if (password && *password) {
   pam_set_item(pamh, PAM_AUTHTOK, password);
  }
 }

 if (opt_debug & PAM_DEBUG_ARG) _pam_log(LOG_DEBUG, "authentication %s", retval==PAM_SUCCESS ? "succeeded":"failed");

 close(config.sockfd);
 cleanup(config.server);
 _pam_forget(password);
 _pam_forget(resp2challenge);
 {
  int *pret = malloc(sizeof(int));
  *pret = retval;
  pam_set_data(pamh, "rad_setcred_return", (void *) pret, _int_free);
 }
 return retval;
}







PAM_EXTERN int pam_sm_setcred(pam_handle_t *pamh,int flags,int argc,CONST char **argv)
{
 int retval, *pret;

 retval = PAM_SUCCESS;
 pret = &retval;
 pam_get_data(pamh, "rad_setcred_return", (CONST void **) &pret);
 return *pret;
}




static int pam_private_session(pam_handle_t *pamh, int flags, int argc, CONST char **argv, int status)
{
 CONST char *user;
 int ctrl;
 int retval = PAM_AUTH_ERR;

 char recv_buffer[4096];
 char send_buffer[4096];
 AUTH_HDR *request = (AUTH_HDR *) send_buffer;
 AUTH_HDR *response = (AUTH_HDR *) recv_buffer;
 radius_conf_t config;

 ctrl = _pam_parse(argc, argv, &config);


 retval = pam_get_user(pamh, &user, NULL);
 if (retval != PAM_SUCCESS) { return PAM_SESSION_ERR; };


 if ((user == NULL) || (strlen(user) > MAXPWNAM)) {
  return PAM_USER_UNKNOWN;
 }





 retval = initialize(&config, TRUE);
 if (retval != PAM_SUCCESS) { return PAM_SESSION_ERR; };





 if (!config.client_id) {
  retval = pam_get_item(pamh, PAM_SERVICE, (CONST void **) &config.client_id);
  if (retval != PAM_SUCCESS) { return PAM_SESSION_ERR; };
 }






 request->code = PW_ACCOUNTING_REQUEST;
 get_random_vector(request->vector);
 request->id = request->vector[0];

 build_radius_packet(request, user, NULL, &config);

 add_int_attribute(request, PW_ACCT_STATUS_TYPE, status);

 sprintf(recv_buffer, "%08d", (int) getpid());
 add_attribute(request, PW_ACCT_SESSION_ID, (unsigned char *) recv_buffer, strlen(recv_buffer));

 add_int_attribute(request, PW_ACCT_AUTHENTIC, PW_AUTH_RADIUS);

 if (status == PW_STATUS_START) {
  session_time = time(NULL);
 } else {
  add_int_attribute(request, PW_ACCT_SESSION_TIME, time(NULL) - session_time);
 }

 retval = talk_radius(&config, request, response, NULL, NULL, 1);
 if (retval != PAM_SUCCESS) {goto error; };


 if (response->code != PW_ACCOUNTING_RESPONSE) {
  retval = PAM_PERM_DENIED;
  goto error;
 }

 retval = PAM_SUCCESS;

error:

 close(config.sockfd);
 cleanup(config.server);

 return retval;
}

PAM_EXTERN int pam_sm_open_session(pam_handle_t *pamh, int flags, int argc, CONST char **argv)
{
 return pam_private_session(pamh, flags, argc, argv, PW_STATUS_START);
}

PAM_EXTERN int pam_sm_close_session(pam_handle_t *pamh, int flags, int argc, CONST char **argv)
{
 return pam_private_session(pamh, flags, argc, argv, PW_STATUS_STOP);
}





PAM_EXTERN int pam_sm_chauthtok(pam_handle_t *pamh, int flags, int argc, CONST char **argv)
{
 CONST char *user;
 char *password = NULL;
 char *new_password = NULL;
 char *check_password = NULL;
 int ctrl;
 int retval = PAM_AUTHTOK_ERR;
 int attempts;

 char recv_buffer[4096];
 char send_buffer[4096];
 AUTH_HDR *request = (AUTH_HDR *) send_buffer;
 AUTH_HDR *response = (AUTH_HDR *) recv_buffer;
 radius_conf_t config;

 ctrl = _pam_parse(argc, argv, &config);


 retval = pam_get_user(pamh, &user, NULL);
 if (retval != PAM_SUCCESS) {return retval; };


 if ((user == NULL) || (strlen(user) > MAXPWNAM)) {
  return PAM_USER_UNKNOWN;
 }





 retval = initialize(&config, FALSE);
 if (retval != PAM_SUCCESS) {return retval; };





 if (!config.client_id) {
  retval = pam_get_item(pamh, PAM_SERVICE, (CONST void **) &config.client_id);
  if (retval != PAM_SUCCESS) {return retval; };
 }






 retval = pam_get_item(pamh, PAM_OLDAUTHTOK, (CONST void **) &password);
 if (retval != PAM_SUCCESS) {goto error; };
 if (password) password = strdup(password);


 retval = pam_get_item(pamh, PAM_AUTHTOK, (CONST void **) &new_password);
 if (retval != PAM_SUCCESS) {goto error; };
 if (new_password) new_password = strdup(new_password);


 if (flags & PAM_PRELIM_CHECK) {
  if (!password) {
   retval = rad_converse(pamh, PAM_PROMPT_ECHO_OFF, config.prompt, &password);
   if (retval != PAM_SUCCESS) {goto error; };
  }

  request->code = PW_AUTHENTICATION_REQUEST;
  get_random_vector(request->vector);
  request->id = request->vector[0];

  build_radius_packet(request, user, password, &config);
  add_int_attribute(request, PW_USER_SERVICE_TYPE, PW_AUTHENTICATE_ONLY);

  retval = talk_radius(&config, request, response, password, NULL, 1);
  if (retval != PAM_SUCCESS) {goto error; };


  if (response->code != PW_AUTHENTICATION_ACK) {
   _pam_forget(password);
   retval = PAM_PERM_DENIED;
   goto error;
  }






  if (!new_password) {
   int new_attempts;
   attempts = 0;


   while (attempts++ < 3) {


    new_attempts = 0;
    while (new_attempts++ < 3) {
     retval = rad_converse(pamh, PAM_PROMPT_ECHO_OFF,
       "New password: ", &new_password);
     if (retval != PAM_SUCCESS) {goto error; };


     if (strcmp(password, new_password) == 0) {
      rad_converse(pamh, PAM_ERROR_MSG,
       "You must choose a new password.", NULL);
      _pam_forget(new_password);
      continue;
     } else if (strlen(new_password) < 6) {
      rad_converse(pamh, PAM_ERROR_MSG, "it's WAY too short", NULL);
      _pam_forget(new_password);
      continue;
     }



     break;
    }

    if (new_attempts >= 3) {
     retval = PAM_AUTHTOK_ERR;
     goto error;
    }


    retval = rad_converse(pamh, PAM_PROMPT_ECHO_OFF,
            "New password (again): ", &check_password);
    if (retval != PAM_SUCCESS) {goto error; };

    retval = strcmp(new_password, check_password);
    _pam_forget(check_password);


    if (retval != 0) {
     _pam_forget(new_password);
     rad_converse(pamh, PAM_ERROR_MSG,
         "You must enter the same password twice.", NULL);
     retval = PAM_AUTHTOK_ERR;
     goto error;
    }

    break;
   }

   if (attempts >= 3) {
    retval = PAM_AUTHTOK_ERR;
    goto error;
   }
  }







 } else if (flags & PAM_UPDATE_AUTHTOK) {


  if (!password || !new_password) {
   retval = PAM_AUTHTOK_ERR;
   goto error;
  }


  request->code = PW_PASSWORD_REQUEST;
  get_random_vector(request->vector);
  request->id = request->vector[0];


  _pam_forget(config.server->secret);
  config.server->secret = strdup(password);

  build_radius_packet(request, user, new_password, &config);
  add_password(request, PW_OLD_PASSWORD, password, password);

  retval = talk_radius(&config, request, response, new_password, password, 1);
  if (retval != PAM_SUCCESS) {goto error; };


  if (response->code != PW_PASSWORD_ACK) {
   retval = PAM_AUTHTOK_ERR;
   goto error;
  }
 }





 if ((flags & PAM_PRELIM_CHECK) || (retval != PAM_SUCCESS)) {
 error:


  if (password && *password) {
   pam_set_item(pamh, PAM_OLDAUTHTOK, password);
  }

  if (new_password && *new_password) {
   pam_set_item(pamh, PAM_AUTHTOK, new_password);
  }
 }

 if (ctrl & PAM_DEBUG_ARG) {
  _pam_log(LOG_DEBUG, "password change %s", retval==PAM_SUCCESS ? "succeeded" : "failed");
 }

 close(config.sockfd);
 cleanup(config.server);

 _pam_forget(password);
 _pam_forget(new_password);
 return retval;
}





PAM_EXTERN int pam_sm_acct_mgmt(pam_handle_t *pamh,int flags,int argc,CONST char **argv)
{
 int retval;
 retval = PAM_SUCCESS;
 return retval;
}
