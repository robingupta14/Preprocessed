







static const MessagesMap_t *MessagesMap = NULL;
static size_t map_size = 0;
static msg_failure_t msg_failure;






static bool msg_tiny_flag = false;
static CONFIDENTIAL uint8_t msg_tiny[MSG_TINY_BFR_SZ];
static uint16_t msg_tiny_id = MSG_TINY_TYPE_ERROR;





bool reset_msg_stack = false;

static const MessagesMap_t *message_map_entry(MessageMapType type,
        MessageType msg_id,
        MessageMapDirection dir)
{
    const MessagesMap_t *m = MessagesMap;

    if (map_size > msg_id && m[msg_id].msg_id == msg_id &&
        m[msg_id].type == type && m[msg_id].dir == dir)
    {
        return &m[msg_id];
    }

    return NULL;
}

const pb_field_t *message_fields(MessageMapType type, MessageType msg_id,
                                 MessageMapDirection dir)
{
    assert(MessagesMap != NULL);

    const MessagesMap_t *m = MessagesMap;

    if(map_size > msg_id && m[msg_id].msg_id == msg_id && m[msg_id].type == type &&
            m[msg_id].dir == dir)
    {
        return m[msg_id].fields;
    }

    return NULL;
}

static bool pb_parse(const MessagesMap_t *entry, uint8_t *msg, uint32_t msg_size,
                     uint8_t *buf)
{
    pb_istream_t stream = pb_istream_from_buffer(msg, msg_size);
    return pb_decode(&stream, entry->fields, buf);
}

static void dispatch(const MessagesMap_t *entry, uint8_t *msg, uint32_t msg_size)
{
    static uint8_t decode_buffer[MAX_DECODE_SIZE] __attribute__((aligned(4)));
    memset(decode_buffer, 0, sizeof(decode_buffer));

    if (!pb_parse(entry, msg, msg_size, decode_buffer)) {
        (*msg_failure)(FailureType_Failure_UnexpectedMessage,
                       "Could not parse protocol buffer message");
        return;
    }

    if (!entry->process_func) {
        (*msg_failure)(FailureType_Failure_UnexpectedMessage, "Unexpected message");
        return;
    }

    entry->process_func(decode_buffer);
}

static void tiny_dispatch(const MessagesMap_t *entry, uint8_t *msg, uint32_t msg_size)
{
    if (!pb_parse(entry, msg, msg_size, msg_tiny)) {
        call_msg_failure_handler(FailureType_Failure_UnexpectedMessage,
                                 "Could not parse tiny protocol buffer message");
        return;
    }

    msg_tiny_id = entry->msg_id;
}

static void raw_dispatch(const MessagesMap_t *entry, const uint8_t *msg, uint32_t msg_size,
                         uint32_t frame_length)
{
    static RawMessage raw_msg;
    raw_msg.buffer = msg;
    raw_msg.length = msg_size;

    if(entry->process_func)
    {
        ((raw_msg_handler_t)entry->process_func)(&raw_msg, frame_length);
    }
}

void usb_rx_helper(const uint8_t *buf, size_t length, MessageMapType type)
{
    static bool firstFrame = true;

    static uint16_t msgId;
    static uint32_t msgSize;
    static uint8_t msg[MAX_FRAME_SIZE];
    static size_t cursor;
    static const MessagesMap_t *entry;

    if (firstFrame) {
        msgId = 0xffff;
        msgSize = 0;
        memset(msg, 0, sizeof(msg));
        cursor = 0;
        entry = NULL;
    }

    assert(buf != NULL);

    if (length < 9) {
        (*msg_failure)(FailureType_Failure_UnexpectedMessage, "Buffer too small");
        goto reset;
    }

    if (buf[0] != '?') {
        (*msg_failure)(FailureType_Failure_UnexpectedMessage, "Malformed packet");
        goto reset;
    }

    if (firstFrame && (buf[1] != '#' || buf[2] != '#')) {
        (*msg_failure)(FailureType_Failure_UnexpectedMessage, "Malformed packet");
        goto reset;
    }


    const uint8_t *frame;
    size_t frameSize;

    if (firstFrame) {

        memset(msg, 0, sizeof(msg));



        msgId = buf[4] | ((uint16_t)buf[3]) << 8;
        msgSize = buf[8] |
          ((uint32_t)buf[7]) << 8 |
          ((uint32_t)buf[6]) << 16 |
          ((uint32_t)buf[5]) << 24;


        entry = message_map_entry(type, msgId, IN_MSG);


        cursor = 0;


        frame = &buf[9];
        frameSize = MIN(length - 9, msgSize);
    } else {

        frame = &buf[1];
        frameSize = length - 1;
    }


    if (!entry) {
        (*msg_failure)(FailureType_Failure_UnexpectedMessage, "Unknown message");
        goto reset;
    }

    if (entry->dispatch == RAW) {




        raw_dispatch(entry, frame, frameSize, msgSize);
        firstFrame = false;
        return;
    }

    size_t end;
    if (({ typeof(cursor) __a = (cursor); typeof(frameSize) __b = (frameSize); typeof(&end) __r = (&end); (void)(&__a == &__b && "types must match"); (void)(&__a == __r && "types must match"); _Static_assert(0 < (typeof(cursor))-1, "types must be unsigned"); __builtin_add_overflow((cursor), (frameSize), (&end)); }) || sizeof(msg) < end) {
        (*msg_failure)(FailureType_Failure_UnexpectedMessage, "Malformed message");
        goto reset;
    }


    memcpy(&msg[cursor], frame, frameSize);


    cursor = end;


    bool last_segment = cursor >= msgSize;
    if (!last_segment) {
        firstFrame = false;
        return;
    }

    dispatch(entry, msg, msgSize);

reset:
    msgId = 0xffff;
    msgSize = 0;
    memset(msg, 0, sizeof(msg));
    cursor = 0;
    firstFrame = true;
    entry = NULL;
}

void handle_usb_rx(const void *msg, size_t len)
{
    if (msg_tiny_flag) {
        uint8_t buf[64];
        memcpy(buf, msg, sizeof(buf));

        uint16_t msgId = buf[4] | ((uint16_t)buf[3]) << 8;
        uint32_t msgSize = buf[8] |
                ((uint32_t)buf[7]) << 8 |
                ((uint32_t)buf[6]) << 16 |
                ((uint32_t)buf[5]) << 24;

        if (msgSize > 55) {
            (*msg_failure)(FailureType_Failure_UnexpectedMessage, "Malformed tiny packet");
            return;
        }


        const MessagesMap_t *entry = message_map_entry(NORMAL_MSG, msgId, IN_MSG);
        if (!entry) {
            (*msg_failure)(FailureType_Failure_UnexpectedMessage, "Unknown message");
            return;
        }

        tiny_dispatch(entry, buf + 9, msgSize);
    } else {
        usb_rx_helper(msg, len, NORMAL_MSG);
    }
}

static MessageType tiny_msg_poll_and_buffer(bool block, uint8_t *buf)
{
    msg_tiny_id = MSG_TINY_TYPE_ERROR;
    msg_tiny_flag = true;

    while(msg_tiny_id == MSG_TINY_TYPE_ERROR)
    {
        usbPoll();

        if(!block)
        {
            break;
        }
    }

    msg_tiny_flag = false;

    if(msg_tiny_id != MSG_TINY_TYPE_ERROR)
    {
        memcpy(buf, msg_tiny, sizeof(msg_tiny));
    }

    return msg_tiny_id;
}

void msg_map_init(const void *map, const size_t size)
{
    assert(map != NULL);
    MessagesMap = map;
    map_size = size;
}

void set_msg_failure_handler(msg_failure_t failure_func)
{
    msg_failure = failure_func;
}

void call_msg_failure_handler(FailureType code, const char *text)
{
    if(msg_failure)
    {
        (*msg_failure)(code, text);
    }
}

void msg_init(void)
{
    usb_set_rx_callback(handle_usb_rx);



}

MessageType wait_for_tiny_msg(uint8_t *buf)
{
    return tiny_msg_poll_and_buffer(true, buf);
}

MessageType check_for_tiny_msg(uint8_t *buf)
{
    return tiny_msg_poll_and_buffer(false, buf);
}

uint32_t parse_pb_varint(RawMessage *msg, uint8_t varint_count)
{
    uint32_t skip;
    uint8_t i;
    uint64_t pb_varint;
    pb_istream_t stream;




    stream = pb_istream_from_buffer((uint8_t*)msg->buffer, msg->length);
    skip = stream.bytes_left;
    for(i = 0; i < varint_count; ++i)
    {
        pb_decode_varint(&stream, &pb_varint);
    }
    skip = skip - stream.bytes_left;




    msg->length -= skip;
    msg->buffer = (uint8_t *)(msg->buffer + skip);

    return skip;
}

int encode_pb(const void *source_ptr, const pb_field_t *fields, uint8_t *buffer, uint32_t len )
{
    pb_ostream_t os = pb_ostream_from_buffer(buffer, len);

    if (!pb_encode(&os, fields, source_ptr))
        return 0;

    return os.bytes_written;
}
