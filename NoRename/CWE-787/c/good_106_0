







static DEFINE_MUTEX(ebt_mutex);

static struct xt_target ebt_standard_target = {
 .name = "standard",
 .revision = 0,
 .family = NFPROTO_BRIDGE,
 .targetsize = sizeof(int),





};

static inline int
ebt_do_watcher(const struct ebt_entry_watcher *w, struct sk_buff *skb,
        struct xt_action_param *par)
{
 par->target = w->u.watcher;
 par->targinfo = w->data;
 w->u.watcher->target(skb, par);

 return 0;
}

static inline int
ebt_do_match(struct ebt_entry_match *m, const struct sk_buff *skb,
      struct xt_action_param *par)
{
 par->match = m->u.match;
 par->matchinfo = m->data;
 return m->u.match->match(skb, par) ? EBT_MATCH : EBT_NOMATCH;
}

static inline int
ebt_dev_check(const char *entry, const struct net_device *device)
{
 int i = 0;
 const char *devname;

 if (*entry == '\0')
  return 0;
 if (!device)
  return 1;
 devname = device->name;

 while (entry[i] != '\0' && entry[i] != 1 && entry[i] == devname[i])
  i++;
 return devname[i] != entry[i] && entry[i] != 1;
}


static inline int
ebt_basic_match(const struct ebt_entry *e, const struct sk_buff *skb,
  const struct net_device *in, const struct net_device *out)
{
 const struct ethhdr *h = eth_hdr(skb);
 const struct net_bridge_port *p;
 __be16 ethproto;

 if (skb_vlan_tag_present(skb))
  ethproto = htons(ETH_P_8021Q);
 else
  ethproto = h->h_proto;

 if (e->bitmask & EBT_802_3) {
  if (NF_INVF(e, EBT_IPROTO, eth_proto_is_802_3(ethproto)))
   return 1;
 } else if (!(e->bitmask & EBT_NOPROTO) &&
     NF_INVF(e, EBT_IPROTO, e->ethproto != ethproto))
  return 1;

 if (NF_INVF(e, EBT_IIN, ebt_dev_check(e->in, in)))
  return 1;
 if (NF_INVF(e, EBT_IOUT, ebt_dev_check(e->out, out)))
  return 1;

 if (in && (p = br_port_get_rcu(in)) != NULL &&
     NF_INVF(e, EBT_ILOGICALIN,
      ebt_dev_check(e->logical_in, p->br->dev)))
  return 1;
 if (out && (p = br_port_get_rcu(out)) != NULL &&
     NF_INVF(e, EBT_ILOGICALOUT,
      ebt_dev_check(e->logical_out, p->br->dev)))
  return 1;

 if (e->bitmask & EBT_SOURCEMAC) {
  if (NF_INVF(e, EBT_ISOURCE,
       !ether_addr_equal_masked(h->h_source, e->sourcemac,
           e->sourcemsk)))
   return 1;
 }
 if (e->bitmask & EBT_DESTMAC) {
  if (NF_INVF(e, EBT_IDEST,
       !ether_addr_equal_masked(h->h_dest, e->destmac,
           e->destmsk)))
   return 1;
 }
 return 0;
}

static inline
struct ebt_entry *ebt_next_entry(const struct ebt_entry *entry)
{
 return (void *)entry + entry->next_offset;
}


unsigned int ebt_do_table(struct sk_buff *skb,
     const struct nf_hook_state *state,
     struct ebt_table *table)
{
 unsigned int hook = state->hook;
 int i, nentries;
 struct ebt_entry *point;
 struct ebt_counter *counter_base, *cb_base;
 const struct ebt_entry_target *t;
 int verdict, sp = 0;
 struct ebt_chainstack *cs;
 struct ebt_entries *chaininfo;
 const char *base;
 const struct ebt_table_info *private;
 struct xt_action_param acpar;

 acpar.state = state;
 acpar.hotdrop = false;

 read_lock_bh(&table->lock);
 private = table->private;
 cb_base = ((struct ebt_counter *)(((char *)private->counters) + ((((private->nentries * sizeof(struct ebt_counter)) + SMP_CACHE_BYTES-1) & ~(SMP_CACHE_BYTES-1))) * smp_processor_id()));

 if (private->chainstack)
  cs = private->chainstack[smp_processor_id()];
 else
  cs = NULL;
 chaininfo = private->hook_entry[hook];
 nentries = private->hook_entry[hook]->nentries;
 point = (struct ebt_entry *)(private->hook_entry[hook]->data);
 counter_base = cb_base + private->hook_entry[hook]->counter_offset;

 base = private->entries;
 i = 0;
 while (i < nentries) {
  if (ebt_basic_match(point, skb, state->in, state->out))
   goto letscontinue;

  if (EBT_MATCH_ITERATE(point, ebt_do_match, skb, &acpar) != 0)
   goto letscontinue;
  if (acpar.hotdrop) {
   read_unlock_bh(&table->lock);
   return NF_DROP;
  }


  (*(counter_base + i)).pcnt++;
  (*(counter_base + i)).bcnt += skb->len;




  EBT_WATCHER_ITERATE(point, ebt_do_watcher, skb, &acpar);

  t = (struct ebt_entry_target *)
     (((char *)point) + point->target_offset);

  if (!t->u.target->target)
   verdict = ((struct ebt_standard_target *)t)->verdict;
  else {
   acpar.target = t->u.target;
   acpar.targinfo = t->data;
   verdict = t->u.target->target(skb, &acpar);
  }
  if (verdict == EBT_ACCEPT) {
   read_unlock_bh(&table->lock);
   return NF_ACCEPT;
  }
  if (verdict == EBT_DROP) {
   read_unlock_bh(&table->lock);
   return NF_DROP;
  }
  if (verdict == EBT_RETURN) {
letsreturn:
   if (WARN(sp == 0, "RETURN on base chain")) {

    goto letscontinue;
   }

   sp--;

   i = cs[sp].n;
   chaininfo = cs[sp].chaininfo;
   nentries = chaininfo->nentries;
   point = cs[sp].e;
   counter_base = cb_base +
      chaininfo->counter_offset;
   continue;
  }
  if (verdict == EBT_CONTINUE)
   goto letscontinue;

  if (WARN(verdict < 0, "bogus standard verdict\n")) {
   read_unlock_bh(&table->lock);
   return NF_DROP;
  }


  cs[sp].n = i + 1;
  cs[sp].chaininfo = chaininfo;
  cs[sp].e = ebt_next_entry(point);
  i = 0;
  chaininfo = (struct ebt_entries *) (base + verdict);

  if (WARN(chaininfo->distinguisher, "jump to non-chain\n")) {
   read_unlock_bh(&table->lock);
   return NF_DROP;
  }

  nentries = chaininfo->nentries;
  point = (struct ebt_entry *)chaininfo->data;
  counter_base = cb_base + chaininfo->counter_offset;
  sp++;
  continue;
letscontinue:
  point = ebt_next_entry(point);
  i++;
 }


 if (chaininfo->policy == EBT_RETURN)
  goto letsreturn;
 if (chaininfo->policy == EBT_ACCEPT) {
  read_unlock_bh(&table->lock);
  return NF_ACCEPT;
 }
 read_unlock_bh(&table->lock);
 return NF_DROP;
}


static inline void *
find_inlist_lock_noload(struct list_head *head, const char *name, int *error,
   struct mutex *mutex)
{
 struct {
  struct list_head list;
  char name[EBT_FUNCTION_MAXNAMELEN];
 } *e;

 mutex_lock(mutex);
 list_for_each_entry(e, head, list) {
  if (strcmp(e->name, name) == 0)
   return e;
 }
 *error = -ENOENT;
 mutex_unlock(mutex);
 return NULL;
}

static void *
find_inlist_lock(struct list_head *head, const char *name, const char *prefix,
   int *error, struct mutex *mutex)
{
 return try_then_request_module(
   find_inlist_lock_noload(head, name, error, mutex),
   "%s%s", prefix, name);
}

static inline struct ebt_table *
find_table_lock(struct net *net, const char *name, int *error,
  struct mutex *mutex)
{
 return find_inlist_lock(&net->xt.tables[NFPROTO_BRIDGE], name,
    "ebtable_", error, mutex);
}

static inline int
ebt_check_match(struct ebt_entry_match *m, struct xt_mtchk_param *par,
  unsigned int *cnt)
{
 const struct ebt_entry *e = par->entryinfo;
 struct xt_match *match;
 size_t left = ((char *)e + e->watchers_offset) - (char *)m;
 int ret;

 if (left < sizeof(struct ebt_entry_match) ||
     left - sizeof(struct ebt_entry_match) < m->match_size)
  return -EINVAL;

 match = xt_find_match(NFPROTO_BRIDGE, m->u.name, 0);
 if (IS_ERR(match) || match->family != NFPROTO_BRIDGE) {
  if (!IS_ERR(match))
   module_put(match->me);
  request_module("ebt_%s", m->u.name);
  match = xt_find_match(NFPROTO_BRIDGE, m->u.name, 0);
 }
 if (IS_ERR(match))
  return PTR_ERR(match);
 m->u.match = match;

 par->match = match;
 par->matchinfo = m->data;
 ret = xt_check_match(par, m->match_size,
       e->ethproto, e->invflags & EBT_IPROTO);
 if (ret < 0) {
  module_put(match->me);
  return ret;
 }

 (*cnt)++;
 return 0;
}

static inline int
ebt_check_watcher(struct ebt_entry_watcher *w, struct xt_tgchk_param *par,
    unsigned int *cnt)
{
 const struct ebt_entry *e = par->entryinfo;
 struct xt_target *watcher;
 size_t left = ((char *)e + e->target_offset) - (char *)w;
 int ret;

 if (left < sizeof(struct ebt_entry_watcher) ||
    left - sizeof(struct ebt_entry_watcher) < w->watcher_size)
  return -EINVAL;

 watcher = xt_request_find_target(NFPROTO_BRIDGE, w->u.name, 0);
 if (IS_ERR(watcher))
  return PTR_ERR(watcher);
 w->u.watcher = watcher;

 par->target = watcher;
 par->targinfo = w->data;
 ret = xt_check_target(par, w->watcher_size,
       e->ethproto, e->invflags & EBT_IPROTO);
 if (ret < 0) {
  module_put(watcher->me);
  return ret;
 }

 (*cnt)++;
 return 0;
}

static int ebt_verify_pointers(const struct ebt_replace *repl,
          struct ebt_table_info *newinfo)
{
 unsigned int limit = repl->entries_size;
 unsigned int valid_hooks = repl->valid_hooks;
 unsigned int offset = 0;
 int i;

 for (i = 0; i < NF_BR_NUMHOOKS; i++)
  newinfo->hook_entry[i] = NULL;

 newinfo->entries_size = repl->entries_size;
 newinfo->nentries = repl->nentries;

 while (offset < limit) {
  size_t left = limit - offset;
  struct ebt_entry *e = (void *)newinfo->entries + offset;

  if (left < sizeof(unsigned int))
   break;

  for (i = 0; i < NF_BR_NUMHOOKS; i++) {
   if ((valid_hooks & (1 << i)) == 0)
    continue;
   if ((char __user *)repl->hook_entry[i] ==
        repl->entries + offset)
    break;
  }

  if (i != NF_BR_NUMHOOKS || !(e->bitmask & EBT_ENTRY_OR_ENTRIES)) {
   if (e->bitmask != 0) {



    printk("kernel msg: ebtables bug: please " "report to author: ""EBT_ENTRY_OR_ENTRIES shouldn't be set " "in distinguisher\n");

    return -EINVAL;
   }
   if (i != NF_BR_NUMHOOKS)
    newinfo->hook_entry[i] = (struct ebt_entries *)e;
   if (left < sizeof(struct ebt_entries))
    break;
   offset += sizeof(struct ebt_entries);
  } else {
   if (left < sizeof(struct ebt_entry))
    break;
   if (left < e->next_offset)
    break;
   if (e->next_offset < sizeof(struct ebt_entry))
    return -EINVAL;
   offset += e->next_offset;
  }
 }
 if (offset != limit) {
  printk("kernel msg: ebtables bug: please " "report to author: ""entries_size too small\n");
  return -EINVAL;
 }


 for (i = 0; i < NF_BR_NUMHOOKS; i++) {
  if (!newinfo->hook_entry[i] &&
     (valid_hooks & (1 << i))) {
   printk("kernel msg: ebtables bug: please " "report to author: ""Valid hook without chain\n");
   return -EINVAL;
  }
 }
 return 0;
}




static inline int
ebt_check_entry_size_and_hooks(const struct ebt_entry *e,
          const struct ebt_table_info *newinfo,
          unsigned int *n, unsigned int *cnt,
          unsigned int *totalcnt, unsigned int *udc_cnt)
{
 int i;

 for (i = 0; i < NF_BR_NUMHOOKS; i++) {
  if ((void *)e == (void *)newinfo->hook_entry[i])
   break;
 }



 if (i != NF_BR_NUMHOOKS || !e->bitmask) {



  if (*n != *cnt) {
   printk("kernel msg: ebtables bug: please " "report to author: ""nentries does not equal the nr of entries " "in the chain\n");

   return -EINVAL;
  }
  if (((struct ebt_entries *)e)->policy != EBT_DROP &&
     ((struct ebt_entries *)e)->policy != EBT_ACCEPT) {

   if (i != NF_BR_NUMHOOKS ||
      ((struct ebt_entries *)e)->policy != EBT_RETURN) {
    printk("kernel msg: ebtables bug: please " "report to author: ""bad policy\n");
    return -EINVAL;
   }
  }
  if (i == NF_BR_NUMHOOKS)
   (*udc_cnt)++;
  if (((struct ebt_entries *)e)->counter_offset != *totalcnt) {
   printk("kernel msg: ebtables bug: please " "report to author: ""counter_offset != totalcnt");
   return -EINVAL;
  }
  *n = ((struct ebt_entries *)e)->nentries;
  *cnt = 0;
  return 0;
 }

 if (sizeof(struct ebt_entry) > e->watchers_offset ||
    e->watchers_offset > e->target_offset ||
    e->target_offset >= e->next_offset) {
  printk("kernel msg: ebtables bug: please " "report to author: ""entry offsets not in right order\n");
  return -EINVAL;
 }

 if (e->next_offset - e->target_offset < sizeof(struct ebt_entry_target)) {
  printk("kernel msg: ebtables bug: please " "report to author: ""target size too small\n");
  return -EINVAL;
 }
 (*cnt)++;
 (*totalcnt)++;
 return 0;
}

struct ebt_cl_stack {
 struct ebt_chainstack cs;
 int from;
 unsigned int hookmask;
};




static inline int
ebt_get_udc_positions(struct ebt_entry *e, struct ebt_table_info *newinfo,
        unsigned int *n, struct ebt_cl_stack *udc)
{
 int i;


 if (e->bitmask)
  return 0;
 for (i = 0; i < NF_BR_NUMHOOKS; i++) {
  if (newinfo->hook_entry[i] == (struct ebt_entries *)e)
   break;
 }

 if (i != NF_BR_NUMHOOKS)
  return 0;

 udc[*n].cs.chaininfo = (struct ebt_entries *)e;

 udc[*n].cs.n = 0;
 udc[*n].hookmask = 0;

 (*n)++;
 return 0;
}

static inline int
ebt_cleanup_match(struct ebt_entry_match *m, struct net *net, unsigned int *i)
{
 struct xt_mtdtor_param par;

 if (i && (*i)-- == 0)
  return 1;

 par.net = net;
 par.match = m->u.match;
 par.matchinfo = m->data;
 par.family = NFPROTO_BRIDGE;
 if (par.match->destroy != NULL)
  par.match->destroy(&par);
 module_put(par.match->me);
 return 0;
}

static inline int
ebt_cleanup_watcher(struct ebt_entry_watcher *w, struct net *net, unsigned int *i)
{
 struct xt_tgdtor_param par;

 if (i && (*i)-- == 0)
  return 1;

 par.net = net;
 par.target = w->u.watcher;
 par.targinfo = w->data;
 par.family = NFPROTO_BRIDGE;
 if (par.target->destroy != NULL)
  par.target->destroy(&par);
 module_put(par.target->me);
 return 0;
}

static inline int
ebt_cleanup_entry(struct ebt_entry *e, struct net *net, unsigned int *cnt)
{
 struct xt_tgdtor_param par;
 struct ebt_entry_target *t;

 if (e->bitmask == 0)
  return 0;

 if (cnt && (*cnt)-- == 0)
  return 1;
 EBT_WATCHER_ITERATE(e, ebt_cleanup_watcher, net, NULL);
 EBT_MATCH_ITERATE(e, ebt_cleanup_match, net, NULL);
 t = (struct ebt_entry_target *)(((char *)e) + e->target_offset);

 par.net = net;
 par.target = t->u.target;
 par.targinfo = t->data;
 par.family = NFPROTO_BRIDGE;
 if (par.target->destroy != NULL)
  par.target->destroy(&par);
 module_put(par.target->me);
 return 0;
}

static inline int
ebt_check_entry(struct ebt_entry *e, struct net *net,
  const struct ebt_table_info *newinfo,
  const char *name, unsigned int *cnt,
  struct ebt_cl_stack *cl_s, unsigned int udc_cnt)
{
 struct ebt_entry_target *t;
 struct xt_target *target;
 unsigned int i, j, hook = 0, hookmask = 0;
 size_t gap;
 int ret;
 struct xt_mtchk_param mtpar;
 struct xt_tgchk_param tgpar;


 if (e->bitmask == 0)
  return 0;

 if (e->bitmask & ~EBT_F_MASK) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Unknown flag for bitmask\n");
  return -EINVAL;
 }
 if (e->invflags & ~EBT_INV_MASK) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Unknown flag for inv bitmask\n");
  return -EINVAL;
 }
 if ((e->bitmask & EBT_NOPROTO) && (e->bitmask & EBT_802_3)) {
  printk("kernel msg: ebtables bug: please " "report to author: ""NOPROTO & 802_3 not allowed\n");
  return -EINVAL;
 }

 for (i = 0; i < NF_BR_NUMHOOKS; i++) {
  if (!newinfo->hook_entry[i])
   continue;
  if ((char *)newinfo->hook_entry[i] < (char *)e)
   hook = i;
  else
   break;
 }



 if (i < NF_BR_NUMHOOKS)
  hookmask = (1 << hook) | (1 << NF_BR_NUMHOOKS);
 else {
  for (i = 0; i < udc_cnt; i++)
   if ((char *)(cl_s[i].cs.chaininfo) > (char *)e)
    break;
  if (i == 0)
   hookmask = (1 << hook) | (1 << NF_BR_NUMHOOKS);
  else
   hookmask = cl_s[i - 1].hookmask;
 }
 i = 0;

 mtpar.net = tgpar.net = net;
 mtpar.table = tgpar.table = name;
 mtpar.entryinfo = tgpar.entryinfo = e;
 mtpar.hook_mask = tgpar.hook_mask = hookmask;
 mtpar.family = tgpar.family = NFPROTO_BRIDGE;
 ret = EBT_MATCH_ITERATE(e, ebt_check_match, &mtpar, &i);
 if (ret != 0)
  goto cleanup_matches;
 j = 0;
 ret = EBT_WATCHER_ITERATE(e, ebt_check_watcher, &tgpar, &j);
 if (ret != 0)
  goto cleanup_watchers;
 t = (struct ebt_entry_target *)(((char *)e) + e->target_offset);
 gap = e->next_offset - e->target_offset;

 target = xt_request_find_target(NFPROTO_BRIDGE, t->u.name, 0);
 if (IS_ERR(target)) {
  ret = PTR_ERR(target);
  goto cleanup_watchers;
 }

 t->u.target = target;
 if (t->u.target == &ebt_standard_target) {
  if (gap < sizeof(struct ebt_standard_target)) {
   printk("kernel msg: ebtables bug: please " "report to author: ""Standard target size too big\n");
   ret = -EFAULT;
   goto cleanup_watchers;
  }
  if (((struct ebt_standard_target *)t)->verdict <
     -NUM_STANDARD_TARGETS) {
   printk("kernel msg: ebtables bug: please " "report to author: ""Invalid standard target\n");
   ret = -EFAULT;
   goto cleanup_watchers;
  }
 } else if (t->target_size > gap - sizeof(struct ebt_entry_target)) {
  module_put(t->u.target->me);
  ret = -EFAULT;
  goto cleanup_watchers;
 }

 tgpar.target = target;
 tgpar.targinfo = t->data;
 ret = xt_check_target(&tgpar, t->target_size,
       e->ethproto, e->invflags & EBT_IPROTO);
 if (ret < 0) {
  module_put(target->me);
  goto cleanup_watchers;
 }
 (*cnt)++;
 return 0;
cleanup_watchers:
 EBT_WATCHER_ITERATE(e, ebt_cleanup_watcher, net, &j);
cleanup_matches:
 EBT_MATCH_ITERATE(e, ebt_cleanup_match, net, &i);
 return ret;
}





static int check_chainloops(const struct ebt_entries *chain, struct ebt_cl_stack *cl_s,
       unsigned int udc_cnt, unsigned int hooknr, char *base)
{
 int i, chain_nr = -1, pos = 0, nentries = chain->nentries, verdict;
 const struct ebt_entry *e = (struct ebt_entry *)chain->data;
 const struct ebt_entry_target *t;

 while (pos < nentries || chain_nr != -1) {

  if (pos == nentries) {

   e = cl_s[chain_nr].cs.e;
   if (cl_s[chain_nr].from != -1)
    nentries =
    cl_s[cl_s[chain_nr].from].cs.chaininfo->nentries;
   else
    nentries = chain->nentries;
   pos = cl_s[chain_nr].cs.n;

   cl_s[chain_nr].cs.n = 0;
   chain_nr = cl_s[chain_nr].from;
   if (pos == nentries)
    continue;
  }
  t = (struct ebt_entry_target *)
     (((char *)e) + e->target_offset);
  if (strcmp(t->u.name, EBT_STANDARD_TARGET))
   goto letscontinue;
  if (e->target_offset + sizeof(struct ebt_standard_target) >
     e->next_offset) {
   printk("kernel msg: ebtables bug: please " "report to author: ""Standard target size too big\n");
   return -1;
  }
  verdict = ((struct ebt_standard_target *)t)->verdict;
  if (verdict >= 0) {
   struct ebt_entries *hlp2 =
      (struct ebt_entries *)(base + verdict);
   for (i = 0; i < udc_cnt; i++)
    if (hlp2 == cl_s[i].cs.chaininfo)
     break;

   if (i == udc_cnt) {
    printk("kernel msg: ebtables bug: please " "report to author: ""bad destination\n");
    return -1;
   }
   if (cl_s[i].cs.n) {
    printk("kernel msg: ebtables bug: please " "report to author: ""loop\n");
    return -1;
   }
   if (cl_s[i].hookmask & (1 << hooknr))
    goto letscontinue;

   cl_s[i].cs.n = pos + 1;
   pos = 0;
   cl_s[i].cs.e = ebt_next_entry(e);
   e = (struct ebt_entry *)(hlp2->data);
   nentries = hlp2->nentries;
   cl_s[i].from = chain_nr;
   chain_nr = i;

   cl_s[i].hookmask |= (1 << hooknr);
   continue;
  }
letscontinue:
  e = ebt_next_entry(e);
  pos++;
 }
 return 0;
}


static int translate_table(struct net *net, const char *name,
      struct ebt_table_info *newinfo)
{
 unsigned int i, j, k, udc_cnt;
 int ret;
 struct ebt_cl_stack *cl_s = NULL;

 i = 0;
 while (i < NF_BR_NUMHOOKS && !newinfo->hook_entry[i])
  i++;
 if (i == NF_BR_NUMHOOKS) {
  printk("kernel msg: ebtables bug: please " "report to author: ""No valid hooks specified\n");
  return -EINVAL;
 }
 if (newinfo->hook_entry[i] != (struct ebt_entries *)newinfo->entries) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Chains don't start at beginning\n");
  return -EINVAL;
 }



 for (j = i + 1; j < NF_BR_NUMHOOKS; j++) {
  if (!newinfo->hook_entry[j])
   continue;
  if (newinfo->hook_entry[j] <= newinfo->hook_entry[i]) {
   printk("kernel msg: ebtables bug: please " "report to author: ""Hook order must be followed\n");
   return -EINVAL;
  }
  i = j;
 }


 i = 0;
 j = 0;
 k = 0;


 udc_cnt = 0;
 ret = EBT_ENTRY_ITERATE(newinfo->entries, newinfo->entries_size,
    ebt_check_entry_size_and_hooks, newinfo,
    &i, &j, &k, &udc_cnt);

 if (ret != 0)
  return ret;

 if (i != j) {
  printk("kernel msg: ebtables bug: please " "report to author: ""nentries does not equal the nr of entries in the " "(last) chain\n");

  return -EINVAL;
 }
 if (k != newinfo->nentries) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Total nentries is wrong\n");
  return -EINVAL;
 }




 if (udc_cnt) {



  newinfo->chainstack =
   vmalloc(nr_cpu_ids * sizeof(*(newinfo->chainstack)));
  if (!newinfo->chainstack)
   return -ENOMEM;
  for_each_possible_cpu(i) {
   newinfo->chainstack[i] =
     vmalloc(udc_cnt * sizeof(*(newinfo->chainstack[0])));
   if (!newinfo->chainstack[i]) {
    while (i)
     vfree(newinfo->chainstack[--i]);
    vfree(newinfo->chainstack);
    newinfo->chainstack = NULL;
    return -ENOMEM;
   }
  }

  cl_s = vmalloc(udc_cnt * sizeof(*cl_s));
  if (!cl_s)
   return -ENOMEM;
  i = 0;
  EBT_ENTRY_ITERATE(newinfo->entries, newinfo->entries_size,
     ebt_get_udc_positions, newinfo, &i, cl_s);

  if (i != udc_cnt) {
   printk("kernel msg: ebtables bug: please " "report to author: ""i != udc_cnt\n");
   vfree(cl_s);
   return -EFAULT;
  }
 }


 for (i = 0; i < NF_BR_NUMHOOKS; i++)
  if (newinfo->hook_entry[i])
   if (check_chainloops(newinfo->hook_entry[i],
      cl_s, udc_cnt, i, newinfo->entries)) {
    vfree(cl_s);
    return -EINVAL;
   }

 i = 0;
 ret = EBT_ENTRY_ITERATE(newinfo->entries, newinfo->entries_size,
    ebt_check_entry, net, newinfo, name, &i, cl_s, udc_cnt);
 if (ret != 0) {
  EBT_ENTRY_ITERATE(newinfo->entries, newinfo->entries_size,
      ebt_cleanup_entry, net, &i);
 }
 vfree(cl_s);
 return ret;
}


static void get_counters(const struct ebt_counter *oldcounters,
    struct ebt_counter *counters, unsigned int nentries)
{
 int i, cpu;
 struct ebt_counter *counter_base;


 memcpy(counters, oldcounters,
        sizeof(struct ebt_counter) * nentries);


 for_each_possible_cpu(cpu) {
  if (cpu == 0)
   continue;
  counter_base = ((struct ebt_counter *)(((char *)oldcounters) + ((((nentries * sizeof(struct ebt_counter)) + SMP_CACHE_BYTES-1) & ~(SMP_CACHE_BYTES-1))) * cpu));
  for (i = 0; i < nentries; i++) {
   counters[i].pcnt += counter_base[i].pcnt;
   counters[i].bcnt += counter_base[i].bcnt;
  }
 }
}

static int do_replace_finish(struct net *net, struct ebt_replace *repl,
         struct ebt_table_info *newinfo)
{
 int ret, i;
 struct ebt_counter *counterstmp = NULL;

 struct ebt_table_info *table;
 struct ebt_table *t;




 if (repl->num_counters) {
  unsigned long size = repl->num_counters * sizeof(*counterstmp);
  counterstmp = vmalloc(size);
  if (!counterstmp)
   return -ENOMEM;
 }

 newinfo->chainstack = NULL;
 ret = ebt_verify_pointers(repl, newinfo);
 if (ret != 0)
  goto free_counterstmp;

 ret = translate_table(net, repl->name, newinfo);

 if (ret != 0)
  goto free_counterstmp;

 t = find_table_lock(net, repl->name, &ret, &ebt_mutex);
 if (!t) {
  ret = -ENOENT;
  goto free_iterate;
 }


 if (t->check && (ret = t->check(newinfo, repl->valid_hooks)))
  goto free_unlock;

 if (repl->num_counters && repl->num_counters != t->private->nentries) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Wrong nr. of counters requested\n");
  ret = -EINVAL;
  goto free_unlock;
 }


 table = t->private;

 if (!table->nentries && newinfo->nentries && !try_module_get(t->me)) {
  ret = -ENOENT;
  goto free_unlock;
 } else if (table->nentries && !newinfo->nentries)
  module_put(t->me);

 write_lock_bh(&t->lock);
 if (repl->num_counters)
  get_counters(t->private->counters, counterstmp,
     t->private->nentries);

 t->private = newinfo;
 write_unlock_bh(&t->lock);
 mutex_unlock(&ebt_mutex);





 if (repl->num_counters &&
    copy_to_user(repl->counters, counterstmp,
    repl->num_counters * sizeof(struct ebt_counter))) {

  net_warn_ratelimited("ebtables: counters copy to user failed while replacing table\n");
 }


 EBT_ENTRY_ITERATE(table->entries, table->entries_size,
     ebt_cleanup_entry, net, NULL);

 vfree(table->entries);
 if (table->chainstack) {
  for_each_possible_cpu(i)
   vfree(table->chainstack[i]);
  vfree(table->chainstack);
 }
 vfree(table);

 vfree(counterstmp);

 return ret;

free_unlock:
 mutex_unlock(&ebt_mutex);
free_iterate:
 EBT_ENTRY_ITERATE(newinfo->entries, newinfo->entries_size,
     ebt_cleanup_entry, net, NULL);
free_counterstmp:
 vfree(counterstmp);

 if (newinfo->chainstack) {
  for_each_possible_cpu(i)
   vfree(newinfo->chainstack[i]);
  vfree(newinfo->chainstack);
 }
 return ret;
}


static int do_replace(struct net *net, const void __user *user,
        unsigned int len)
{
 int ret, countersize;
 struct ebt_table_info *newinfo;
 struct ebt_replace tmp;

 if (copy_from_user(&tmp, user, sizeof(tmp)) != 0)
  return -EFAULT;

 if (len != sizeof(tmp) + tmp.entries_size) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Wrong len argument\n");
  return -EINVAL;
 }

 if (tmp.entries_size == 0) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Entries_size never zero\n");
  return -EINVAL;
 }

 if (tmp.nentries >= ((INT_MAX - sizeof(struct ebt_table_info)) /
   NR_CPUS - SMP_CACHE_BYTES) / sizeof(struct ebt_counter))
  return -ENOMEM;
 if (tmp.num_counters >= INT_MAX / sizeof(struct ebt_counter))
  return -ENOMEM;

 tmp.name[sizeof(tmp.name) - 1] = 0;

 countersize = ((((tmp.nentries * sizeof(struct ebt_counter)) + SMP_CACHE_BYTES-1) & ~(SMP_CACHE_BYTES-1))) * nr_cpu_ids;
 newinfo = vmalloc(sizeof(*newinfo) + countersize);
 if (!newinfo)
  return -ENOMEM;

 if (countersize)
  memset(newinfo->counters, 0, countersize);

 newinfo->entries = vmalloc(tmp.entries_size);
 if (!newinfo->entries) {
  ret = -ENOMEM;
  goto free_newinfo;
 }
 if (copy_from_user(
    newinfo->entries, tmp.entries, tmp.entries_size) != 0) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Couldn't copy entries from userspace\n");
  ret = -EFAULT;
  goto free_entries;
 }

 ret = do_replace_finish(net, &tmp, newinfo);
 if (ret == 0)
  return ret;
free_entries:
 vfree(newinfo->entries);
free_newinfo:
 vfree(newinfo);
 return ret;
}

static void __ebt_unregister_table(struct net *net, struct ebt_table *table)
{
 int i;

 mutex_lock(&ebt_mutex);
 list_del(&table->list);
 mutex_unlock(&ebt_mutex);
 EBT_ENTRY_ITERATE(table->private->entries, table->private->entries_size,
     ebt_cleanup_entry, net, NULL);
 if (table->private->nentries)
  module_put(table->me);
 vfree(table->private->entries);
 if (table->private->chainstack) {
  for_each_possible_cpu(i)
   vfree(table->private->chainstack[i]);
  vfree(table->private->chainstack);
 }
 vfree(table->private);
 kfree(table);
}

int ebt_register_table(struct net *net, const struct ebt_table *input_table,
         const struct nf_hook_ops *ops, struct ebt_table **res)
{
 struct ebt_table_info *newinfo;
 struct ebt_table *t, *table;
 struct ebt_replace_kernel *repl;
 int ret, i, countersize;
 void *p;

 if (input_table == NULL || (repl = input_table->table) == NULL ||
     repl->entries == NULL || repl->entries_size == 0 ||
     repl->counters != NULL || input_table->private != NULL) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Bad table data for ebt_register_table!!!\n");
  return -EINVAL;
 }


 table = kmemdup(input_table, sizeof(struct ebt_table), GFP_KERNEL);
 if (!table) {
  ret = -ENOMEM;
  goto out;
 }

 countersize = ((((repl->nentries * sizeof(struct ebt_counter)) + SMP_CACHE_BYTES-1) & ~(SMP_CACHE_BYTES-1))) * nr_cpu_ids;
 newinfo = vmalloc(sizeof(*newinfo) + countersize);
 ret = -ENOMEM;
 if (!newinfo)
  goto free_table;

 p = vmalloc(repl->entries_size);
 if (!p)
  goto free_newinfo;

 memcpy(p, repl->entries, repl->entries_size);
 newinfo->entries = p;

 newinfo->entries_size = repl->entries_size;
 newinfo->nentries = repl->nentries;

 if (countersize)
  memset(newinfo->counters, 0, countersize);


 newinfo->chainstack = NULL;
 for (i = 0; i < NF_BR_NUMHOOKS; i++) {
  if ((repl->valid_hooks & (1 << i)) == 0)
   newinfo->hook_entry[i] = NULL;
  else
   newinfo->hook_entry[i] = p +
    ((char *)repl->hook_entry[i] - repl->entries);
 }
 ret = translate_table(net, repl->name, newinfo);
 if (ret != 0) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Translate_table failed\n");
  goto free_chainstack;
 }

 if (table->check && table->check(newinfo, table->valid_hooks)) {
  printk("kernel msg: ebtables bug: please " "report to author: ""The table doesn't like its own initial data, lol\n");
  ret = -EINVAL;
  goto free_chainstack;
 }

 table->private = newinfo;
 rwlock_init(&table->lock);
 mutex_lock(&ebt_mutex);
 list_for_each_entry(t, &net->xt.tables[NFPROTO_BRIDGE], list) {
  if (strcmp(t->name, table->name) == 0) {
   ret = -EEXIST;
   printk("kernel msg: ebtables bug: please " "report to author: ""Table name already exists\n");
   goto free_unlock;
  }
 }


 if (newinfo->nentries && !try_module_get(table->me)) {
  ret = -ENOENT;
  goto free_unlock;
 }
 list_add(&table->list, &net->xt.tables[NFPROTO_BRIDGE]);
 mutex_unlock(&ebt_mutex);

 WRITE_ONCE(*res, table);

 if (!ops)
  return 0;

 ret = nf_register_net_hooks(net, ops, hweight32(table->valid_hooks));
 if (ret) {
  __ebt_unregister_table(net, table);
  *res = NULL;
 }

 return ret;
free_unlock:
 mutex_unlock(&ebt_mutex);
free_chainstack:
 if (newinfo->chainstack) {
  for_each_possible_cpu(i)
   vfree(newinfo->chainstack[i]);
  vfree(newinfo->chainstack);
 }
 vfree(newinfo->entries);
free_newinfo:
 vfree(newinfo);
free_table:
 kfree(table);
out:
 return ret;
}

void ebt_unregister_table(struct net *net, struct ebt_table *table,
     const struct nf_hook_ops *ops)
{
 if (ops)
  nf_unregister_net_hooks(net, ops, hweight32(table->valid_hooks));
 __ebt_unregister_table(net, table);
}


static int do_update_counters(struct net *net, const char *name,
    struct ebt_counter __user *counters,
    unsigned int num_counters,
    const void __user *user, unsigned int len)
{
 int i, ret;
 struct ebt_counter *tmp;
 struct ebt_table *t;

 if (num_counters == 0)
  return -EINVAL;

 tmp = vmalloc(num_counters * sizeof(*tmp));
 if (!tmp)
  return -ENOMEM;

 t = find_table_lock(net, name, &ret, &ebt_mutex);
 if (!t)
  goto free_tmp;

 if (num_counters != t->private->nentries) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Wrong nr of counters\n");
  ret = -EINVAL;
  goto unlock_mutex;
 }

 if (copy_from_user(tmp, counters, num_counters * sizeof(*counters))) {
  ret = -EFAULT;
  goto unlock_mutex;
 }


 write_lock_bh(&t->lock);


 for (i = 0; i < num_counters; i++) {
  t->private->counters[i].pcnt += tmp[i].pcnt;
  t->private->counters[i].bcnt += tmp[i].bcnt;
 }

 write_unlock_bh(&t->lock);
 ret = 0;
unlock_mutex:
 mutex_unlock(&ebt_mutex);
free_tmp:
 vfree(tmp);
 return ret;
}

static int update_counters(struct net *net, const void __user *user,
       unsigned int len)
{
 struct ebt_replace hlp;

 if (copy_from_user(&hlp, user, sizeof(hlp)))
  return -EFAULT;

 if (len != sizeof(hlp) + hlp.num_counters * sizeof(struct ebt_counter))
  return -EINVAL;

 return do_update_counters(net, hlp.name, hlp.counters,
    hlp.num_counters, user, len);
}

static inline int ebt_obj_to_user(char __user *um, const char *_name,
      const char *data, int entrysize,
      int usersize, int datasize)
{
 char name[EBT_FUNCTION_MAXNAMELEN] = {0};




 strlcpy(name, _name, sizeof(name));
 if (copy_to_user(um, name, EBT_FUNCTION_MAXNAMELEN) ||
     put_user(datasize, (int __user *)(um + EBT_FUNCTION_MAXNAMELEN)) ||
     xt_data_to_user(um + entrysize, data, usersize, datasize,
       XT_ALIGN(datasize)))
  return -EFAULT;

 return 0;
}

static inline int ebt_match_to_user(const struct ebt_entry_match *m,
        const char *base, char __user *ubase)
{
 return ebt_obj_to_user(ubase + ((char *)m - base),
          m->u.match->name, m->data, sizeof(*m),
          m->u.match->usersize, m->match_size);
}

static inline int ebt_watcher_to_user(const struct ebt_entry_watcher *w,
          const char *base, char __user *ubase)
{
 return ebt_obj_to_user(ubase + ((char *)w - base),
          w->u.watcher->name, w->data, sizeof(*w),
          w->u.watcher->usersize, w->watcher_size);
}

static inline int ebt_entry_to_user(struct ebt_entry *e, const char *base,
        char __user *ubase)
{
 int ret;
 char __user *hlp;
 const struct ebt_entry_target *t;

 if (e->bitmask == 0) {

  if (copy_to_user(ubase + ((char *)e - base), e,
     sizeof(struct ebt_entries)))
   return -EFAULT;
  return 0;
 }

 if (copy_to_user(ubase + ((char *)e - base), e, sizeof(*e)))
  return -EFAULT;

 hlp = ubase + (((char *)e + e->target_offset) - base);
 t = (struct ebt_entry_target *)(((char *)e) + e->target_offset);

 ret = EBT_MATCH_ITERATE(e, ebt_match_to_user, base, ubase);
 if (ret != 0)
  return ret;
 ret = EBT_WATCHER_ITERATE(e, ebt_watcher_to_user, base, ubase);
 if (ret != 0)
  return ret;
 ret = ebt_obj_to_user(hlp, t->u.target->name, t->data, sizeof(*t),
         t->u.target->usersize, t->target_size);
 if (ret != 0)
  return ret;

 return 0;
}

static int copy_counters_to_user(struct ebt_table *t,
     const struct ebt_counter *oldcounters,
     void __user *user, unsigned int num_counters,
     unsigned int nentries)
{
 struct ebt_counter *counterstmp;
 int ret = 0;


 if (num_counters == 0)
  return 0;

 if (num_counters != nentries) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Num_counters wrong\n");
  return -EINVAL;
 }

 counterstmp = vmalloc(nentries * sizeof(*counterstmp));
 if (!counterstmp)
  return -ENOMEM;

 write_lock_bh(&t->lock);
 get_counters(oldcounters, counterstmp, nentries);
 write_unlock_bh(&t->lock);

 if (copy_to_user(user, counterstmp,
    nentries * sizeof(struct ebt_counter)))
  ret = -EFAULT;
 vfree(counterstmp);
 return ret;
}


static int copy_everything_to_user(struct ebt_table *t, void __user *user,
       const int *len, int cmd)
{
 struct ebt_replace tmp;
 const struct ebt_counter *oldcounters;
 unsigned int entries_size, nentries;
 int ret;
 char *entries;

 if (cmd == EBT_SO_GET_ENTRIES) {
  entries_size = t->private->entries_size;
  nentries = t->private->nentries;
  entries = t->private->entries;
  oldcounters = t->private->counters;
 } else {
  entries_size = t->table->entries_size;
  nentries = t->table->nentries;
  entries = t->table->entries;
  oldcounters = t->table->counters;
 }

 if (copy_from_user(&tmp, user, sizeof(tmp)))
  return -EFAULT;

 if (*len != sizeof(struct ebt_replace) + entries_size +
    (tmp.num_counters ? nentries * sizeof(struct ebt_counter) : 0))
  return -EINVAL;

 if (tmp.nentries != nentries) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Nentries wrong\n");
  return -EINVAL;
 }

 if (tmp.entries_size != entries_size) {
  printk("kernel msg: ebtables bug: please " "report to author: ""Wrong size\n");
  return -EINVAL;
 }

 ret = copy_counters_to_user(t, oldcounters, tmp.counters,
     tmp.num_counters, nentries);
 if (ret)
  return ret;


 return EBT_ENTRY_ITERATE(entries, entries_size,
    ebt_entry_to_user, entries, tmp.entries);
}

static int do_ebt_set_ctl(struct sock *sk,
 int cmd, void __user *user, unsigned int len)
{
 int ret;
 struct net *net = sock_net(sk);

 if (!ns_capable(net->user_ns, CAP_NET_ADMIN))
  return -EPERM;

 switch (cmd) {
 case EBT_SO_SET_ENTRIES:
  ret = do_replace(net, user, len);
  break;
 case EBT_SO_SET_COUNTERS:
  ret = update_counters(net, user, len);
  break;
 default:
  ret = -EINVAL;
 }
 return ret;
}

static int do_ebt_get_ctl(struct sock *sk, int cmd, void __user *user, int *len)
{
 int ret;
 struct ebt_replace tmp;
 struct ebt_table *t;
 struct net *net = sock_net(sk);

 if (!ns_capable(net->user_ns, CAP_NET_ADMIN))
  return -EPERM;

 if (copy_from_user(&tmp, user, sizeof(tmp)))
  return -EFAULT;

 tmp.name[sizeof(tmp.name) - 1] = '\0';

 t = find_table_lock(net, tmp.name, &ret, &ebt_mutex);
 if (!t)
  return ret;

 switch (cmd) {
 case EBT_SO_GET_INFO:
 case EBT_SO_GET_INIT_INFO:
  if (*len != sizeof(struct ebt_replace)) {
   ret = -EINVAL;
   mutex_unlock(&ebt_mutex);
   break;
  }
  if (cmd == EBT_SO_GET_INFO) {
   tmp.nentries = t->private->nentries;
   tmp.entries_size = t->private->entries_size;
   tmp.valid_hooks = t->valid_hooks;
  } else {
   tmp.nentries = t->table->nentries;
   tmp.entries_size = t->table->entries_size;
   tmp.valid_hooks = t->table->valid_hooks;
  }
  mutex_unlock(&ebt_mutex);
  if (copy_to_user(user, &tmp, *len) != 0) {
   printk("kernel msg: ebtables bug: please " "report to author: ""c2u Didn't work\n");
   ret = -EFAULT;
   break;
  }
  ret = 0;
  break;

 case EBT_SO_GET_ENTRIES:
 case EBT_SO_GET_INIT_ENTRIES:
  ret = copy_everything_to_user(t, user, len, cmd);
  mutex_unlock(&ebt_mutex);
  break;

 default:
  mutex_unlock(&ebt_mutex);
  ret = -EINVAL;
 }

 return ret;
}

static struct nf_sockopt_ops ebt_sockopts = {
 .pf = PF_INET,
 .set_optmin = EBT_BASE_CTL,
 .set_optmax = EBT_SO_SET_MAX + 1,
 .set = do_ebt_set_ctl,



 .get_optmin = EBT_BASE_CTL,
 .get_optmax = EBT_SO_GET_MAX + 1,
 .get = do_ebt_get_ctl,



 .owner = THIS_MODULE,
};

static int __init ebtables_init(void)
{
 int ret;

 ret = xt_register_target(&ebt_standard_target);
 if (ret < 0)
  return ret;
 ret = nf_register_sockopt(&ebt_sockopts);
 if (ret < 0) {
  xt_unregister_target(&ebt_standard_target);
  return ret;
 }

 return 0;
}

static void __exit ebtables_fini(void)
{
 nf_unregister_sockopt(&ebt_sockopts);
 xt_unregister_target(&ebt_standard_target);
}

EXPORT_SYMBOL(ebt_register_table);
EXPORT_SYMBOL(ebt_unregister_table);
EXPORT_SYMBOL(ebt_do_table);
module_init(ebtables_init);
module_exit(ebtables_fini);
MODULE_LICENSE("GPL");
