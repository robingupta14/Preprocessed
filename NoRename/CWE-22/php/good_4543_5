<?php



class GaufretteStorage extends StreamManager implements ChunkStorageInterface
{
    protected $unhandledChunk;
    protected $prefix;
    protected $streamWrapperPrefix;

    
    public function __construct($filesystem, $bufferSize, $streamWrapperPrefix, $prefix)
    {
        $base = interface_exists('Gaufrette\FilesystemInterface')
            ? 'Gaufrette\FilesystemInterface'
            : 'Gaufrette\Filesystem';

        if (!$filesystem instanceof $base) {
            throw new \InvalidArgumentException(sprintf('Expected an instance of "%s", got "%s".', $base, is_object($filesystem) ? get_class($filesystem) : gettype($filesystem)));
        }

        if (!($filesystem->getAdapter() instanceof StreamFactory)) {
            throw new \InvalidArgumentException('The filesystem used as chunk storage must implement StreamFactory');
        }
        $this->filesystem = $filesystem;
        $this->buffersize = $bufferSize;
        $this->prefix = $prefix;
        $this->streamWrapperPrefix = $streamWrapperPrefix;
    }

    
    public function clear($maxAge, $prefix = null)
    {
        $prefix = $prefix ?: $this->prefix;
        $matches = $this->filesystem->listKeys($prefix);

        $now = time();
        $toDelete = [];

        
        
        
        
        foreach ($matches['dirs'] as $key) {
            if ($maxAge <= $now - $this->filesystem->mtime($key)) {
                $toDelete[] = $key;
            }
        }
        
        array_unique($toDelete);
        foreach ($matches['keys'] as $key) {
            if ($maxAge <= $now - $this->filesystem->mtime($key)) {
                $this->filesystem->delete($key);
            }
        }

        foreach ($toDelete as $key) {
            
            
            try {
                $this->filesystem->delete($key);
            } catch (\Exception $e) {
                continue;
            }
        }
    }

    
    public function addChunk($uuid, $index, UploadedFile $chunk, $original)
    {
        
        $uuid = basename($uuid);

        $this->unhandledChunk = [
            'uuid' => $uuid,
            'index' => $index,
            'chunk' => $chunk,
            'original' => $original,
        ];
    }

    public function assembleChunks($chunks, $removeChunk, $renameChunk)
    {
        
        $path = $this->prefix.'/'.$this->unhandledChunk['uuid'].'/';
        $filename = $this->unhandledChunk['index'].'_'.$this->unhandledChunk['original'];

        if (empty($chunks)) {
            $target = $filename;
            $this->ensureRemotePathExists($path.$target);
        } else {
            
            sort($chunks, SORT_STRING | SORT_FLAG_CASE);
            $target = pathinfo($chunks[0], PATHINFO_BASENAME);
        }

        $dst = $this->filesystem->createStream($path.$target);
        if (0 === $this->unhandledChunk['index']) {
            
            
            $this->openStream($dst, 'w');
        } else {
            $this->openStream($dst, 'a');
        }

        
        $uploadedFile = new FilesystemFile($this->unhandledChunk['chunk']);

        $this->stream($uploadedFile, $dst);

        if ($renameChunk) {
            $name = preg_replace('/^(\d+)_/', '', $target);
            
            if ($this->filesystem->has($path.$name)) {
                $this->filesystem->delete($path.$name);
            }

            $this->filesystem->rename($path.$target, $path.$name);
            $target = $name;
        }
        $uploaded = $this->filesystem->get($path.$target);

        if (!$renameChunk) {
            return $uploaded;
        }

        return new GaufretteFile($uploaded, $this->filesystem, $this->streamWrapperPrefix);
    }

    public function cleanup($path)
    {
        $this->filesystem->delete($path);
    }

    public function getChunks($uuid)
    {
        
        $uuid = basename($uuid);

        $results = $this->filesystem->listKeys($this->prefix.'/'.$uuid);

        

        return preg_grep('/^.+\/(\d+)_/', $results['keys']);
    }

    public function getFilesystem()
    {
        return $this->filesystem;
    }

    public function getStreamWrapperPrefix()
    {
        return $this->streamWrapperPrefix;
    }
}
