







__FBSDID("$FreeBSD: src/usr.bin/cpio/cpio.c,v 1.15 2008/12/06 07:30:40 kientzle Exp $");

struct name_cache {
 int probes;
 int hits;
 size_t size;
 struct {
  id_t id;
  char *name;
 } cache[101];
};

static int extract_data(struct archive *, struct archive *);
const char * cpio_i64toa(int64_t);
static const char *cpio_rename(const char *name);
static int entry_to_archive(struct cpio *, struct archive_entry *);
static int file_to_archive(struct cpio *, const char *);
static void free_cache(struct name_cache *cache);
static void list_item_verbose(struct cpio *, struct archive_entry *);
static void long_help(void);
static const char *lookup_gname(struct cpio *, gid_t gid);
static int lookup_gname_helper(struct cpio *,
      const char **name, id_t gid);
static const char *lookup_uname(struct cpio *, uid_t uid);
static int lookup_uname_helper(struct cpio *,
      const char **name, id_t uid);
static void mode_in(struct cpio *);
static void mode_list(struct cpio *);
static void mode_out(struct cpio *);
static void mode_pass(struct cpio *, const char *);
static const char *remove_leading_slash(const char *);
static int restore_time(struct cpio *, struct archive_entry *,
      const char *, int fd);
static void usage(void);
static void version(void);
static const char * passphrase_callback(struct archive *, void *);
static void passphrase_free(char *);

int
main(int argc, char *argv[])
{
 static char buff[16384];
 struct cpio _cpio;
 struct cpio *cpio;
 const char *errmsg;
 int uid, gid;
 int opt;

 cpio = &_cpio;
 memset(cpio, 0, sizeof(*cpio));
 cpio->buff = buff;
 cpio->buff_size = sizeof(buff);

 lafe_setprogname(*argv, "bsdcpio");






 cpio->uid_override = -1;
 cpio->gid_override = -1;
 cpio->argv = argv;
 cpio->argc = argc;
 cpio->mode = '\0';
 cpio->verbose = 0;
 cpio->compress = '\0';
 cpio->extract_flags = ARCHIVE_EXTRACT_NO_AUTODIR;
 cpio->extract_flags |= ARCHIVE_EXTRACT_NO_OVERWRITE_NEWER;
 cpio->extract_flags |= ARCHIVE_EXTRACT_SECURE_SYMLINKS;
 cpio->extract_flags |= ARCHIVE_EXTRACT_SECURE_NODOTDOT;
 cpio->extract_flags |= ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS;
 cpio->extract_flags |= ARCHIVE_EXTRACT_PERM;
 cpio->extract_flags |= ARCHIVE_EXTRACT_FFLAGS;
 cpio->extract_flags |= ARCHIVE_EXTRACT_ACL;

 if (geteuid() == 0)
  cpio->extract_flags |= ARCHIVE_EXTRACT_OWNER;

 cpio->bytes_per_block = 512;
 cpio->filename = NULL;

 cpio->matching = archive_match_new();
 if (cpio->matching == NULL)
  lafe_errc(1, 0, "Out of memory");

 while ((opt = cpio_getopt(cpio)) != -1) {
  switch (opt) {
  case '0':
   cpio->option_null = 1;
   break;
  case 'A':
   cpio->option_append = 1;
   break;
  case 'a':
   cpio->option_atime_restore = 1;
   break;
  case 'B':
   cpio->bytes_per_block = 5120;
   break;
  case OPTION_B64ENCODE:
   cpio->add_filter = opt;
   break;
  case 'C':
   cpio->bytes_per_block = atoi(cpio->argument);
   if (cpio->bytes_per_block <= 0)
    lafe_errc(1, 0, "Invalid blocksize %s", cpio->argument);
   break;
  case 'c':
   cpio->format = "odc";
   break;
  case 'd':
   cpio->extract_flags &= ~ARCHIVE_EXTRACT_NO_AUTODIR;
   break;
  case 'E':
   if (archive_match_include_pattern_from_file(
       cpio->matching, cpio->argument,
       cpio->option_null) != ARCHIVE_OK)
    lafe_errc(1, 0, "Error : %s",
        archive_error_string(cpio->matching));
   break;
  case 'F':
   cpio->filename = cpio->argument;
   break;
  case 'f':
   if (archive_match_exclude_pattern(cpio->matching,
       cpio->argument) != ARCHIVE_OK)
    lafe_errc(1, 0, "Error : %s",
        archive_error_string(cpio->matching));
   break;
  case OPTION_GRZIP:
   cpio->compress = opt;
   break;
  case 'H':
   cpio->format = cpio->argument;
   break;
  case 'h':
   long_help();
   break;
  case 'I':
   cpio->filename = cpio->argument;
   break;
  case 'i':
   if (cpio->mode != '\0')
    lafe_errc(1, 0,
        "Cannot use both -i and -%c", cpio->mode);
   cpio->mode = opt;
   break;
  case 'J':
   cpio->compress = opt;
   break;
  case 'j':
   cpio->compress = opt;
   break;
  case OPTION_INSECURE:
   cpio->extract_flags &= ~ARCHIVE_EXTRACT_SECURE_SYMLINKS;
   cpio->extract_flags &= ~ARCHIVE_EXTRACT_SECURE_NODOTDOT;
   cpio->extract_flags &= ~ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS;
   break;
  case 'L':
   cpio->option_follow_links = 1;
   break;
  case 'l':
   cpio->option_link = 1;
   break;
  case OPTION_LRZIP:
  case OPTION_LZ4:
  case OPTION_LZMA:
  case OPTION_LZOP:
   cpio->compress = opt;
   break;
  case 'm':
   cpio->extract_flags |= ARCHIVE_EXTRACT_TIME;
   break;
  case 'n':
   cpio->option_numeric_uid_gid = 1;
   break;
  case OPTION_NO_PRESERVE_OWNER:
   cpio->extract_flags &= ~ARCHIVE_EXTRACT_OWNER;
   break;
  case 'O':
   cpio->filename = cpio->argument;
   break;
  case 'o':
   if (cpio->mode != '\0')
    lafe_errc(1, 0,
        "Cannot use both -o and -%c", cpio->mode);
   cpio->mode = opt;
   break;
  case 'p':
   if (cpio->mode != '\0')
    lafe_errc(1, 0,
        "Cannot use both -p and -%c", cpio->mode);
   cpio->mode = opt;
   cpio->extract_flags &= ~ARCHIVE_EXTRACT_SECURE_NODOTDOT;
   break;
  case OPTION_PASSPHRASE:
   cpio->passphrase = cpio->argument;
   break;
  case OPTION_PRESERVE_OWNER:
   cpio->extract_flags |= ARCHIVE_EXTRACT_OWNER;
   break;
  case OPTION_QUIET:
   cpio->quiet = 1;
   break;
  case 'R':


   errmsg = owner_parse(cpio->argument, &uid, &gid);
   if (errmsg) {
    lafe_warnc(-1, "%s", errmsg);
    usage();
   }
   if (uid != -1) {
    cpio->uid_override = uid;
    cpio->uname_override = NULL;
   }
   if (gid != -1) {
    cpio->gid_override = gid;
    cpio->gname_override = NULL;
   }
   break;
  case 'r':
   cpio->option_rename = 1;
   break;
  case 't':
   cpio->option_list = 1;
   break;
  case 'u':
   cpio->extract_flags
       &= ~ARCHIVE_EXTRACT_NO_OVERWRITE_NEWER;
   break;
  case OPTION_UUENCODE:
   cpio->add_filter = opt;
   break;
  case 'v':
   cpio->verbose++;
   break;
  case 'V':
   cpio->dot++;
   break;
  case OPTION_VERSION:
   version();
   break;

  case 'y':
   cpio->compress = opt;
   break;
  case 'Z':
   cpio->compress = opt;
   break;
  case 'z':
   cpio->compress = opt;
   break;
  default:
   usage();
  }
 }





 if (cpio->option_list && cpio->mode == '\0')
  cpio->mode = 'i';

 if (cpio->option_list && cpio->mode != 'i')
  lafe_errc(1, 0, "Option -t requires -i");

 if (cpio->option_numeric_uid_gid && !cpio->option_list)
  lafe_errc(1, 0, "Option -n requires -it");

 if (cpio->format != NULL && cpio->mode != 'o')
  lafe_errc(1, 0, "Option --format requires -o");

 if (cpio->option_link && cpio->mode != 'p')
  lafe_errc(1, 0, "Option -l requires -p");

 if (cpio->dot && cpio->verbose)
  cpio->dot = 0;


 switch (cpio->mode) {
 case 'o':


  if (cpio->format == NULL)
   cpio->format = "odc";

  mode_out(cpio);
  break;
 case 'i':
  while (*cpio->argv != NULL) {
   if (archive_match_include_pattern(cpio->matching,
       *cpio->argv) != ARCHIVE_OK)
    lafe_errc(1, 0, "Error : %s",
        archive_error_string(cpio->matching));
   --cpio->argc;
   ++cpio->argv;
  }
  if (cpio->option_list)
   mode_list(cpio);
  else
   mode_in(cpio);
  break;
 case 'p':
  if (*cpio->argv == NULL || **cpio->argv == '\0')
   lafe_errc(1, 0,
       "-p mode requires a target directory");
  mode_pass(cpio, *cpio->argv);
  break;
 default:
  lafe_errc(1, 0,
      "Must specify at least one of -i, -o, or -p");
 }

 archive_match_free(cpio->matching);
 free_cache(cpio->gname_cache);
 free_cache(cpio->uname_cache);
 free(cpio->destdir);
 passphrase_free(cpio->ppbuff);
 return (cpio->return_value);
}

static void
usage(void)
{
 const char *p;

 p = lafe_getprogname();

 fprintf(stderr, "Brief Usage:\n");
 fprintf(stderr, "  List:    %s -it < archive\n", p);
 fprintf(stderr, "  Extract: %s -i < archive\n", p);
 fprintf(stderr, "  Create:  %s -o < filenames > archive\n", p);
 fprintf(stderr, "  Help:    %s --help\n", p);
 exit(1);
}

static const char *long_help_msg =
 "First option must be a mode specifier:\n"
 "  -i Input  -o Output  -p Pass\n"
 "Common Options:\n"
 "  -v Verbose filenames     -V  one dot per file\n"
 "Create: %p -o [options]  < [list of files] > [archive]\n"
 "  -J,-y,-z,--lzma  Compress archive with xz/bzip2/gzip/lzma\n"
 "  --format {odc|newc|ustar}  Select archive format\n"
 "List: %p -it < [archive]\n"
 "Extract: %p -i [options] < [archive]\n";

static void
long_help(void)
{
 const char *prog;
 const char *p;

 prog = lafe_getprogname();

 fflush(stderr);

 p = (strcmp(prog,"bsdcpio") != 0) ? "(bsdcpio)" : "";
 printf("%s%s: manipulate archive files\n", prog, p);

 for (p = long_help_msg; *p != '\0'; p++) {
  if (*p == '%') {
   if (p[1] == 'p') {
    fputs(prog, stdout);
    p++;
   } else
    putchar('%');
  } else
   putchar(*p);
 }
 version();
}

static void
version(void)
{
 fprintf(stdout,"bsdcpio %s -- %s\n",
     BSDCPIO_VERSION_STRING,
     archive_version_details());
 exit(0);
}

static void
mode_out(struct cpio *cpio)
{
 struct archive_entry *entry, *spare;
 struct lafe_line_reader *lr;
 const char *p;
 int r;

 if (cpio->option_append)
  lafe_errc(1, 0, "Append mode not yet supported.");

 cpio->archive_read_disk = archive_read_disk_new();
 if (cpio->archive_read_disk == NULL)
  lafe_errc(1, 0, "Failed to allocate archive object");
 if (cpio->option_follow_links)
  archive_read_disk_set_symlink_logical(cpio->archive_read_disk);
 else
  archive_read_disk_set_symlink_physical(cpio->archive_read_disk);
 archive_read_disk_set_standard_lookup(cpio->archive_read_disk);

 cpio->archive = archive_write_new();
 if (cpio->archive == NULL)
  lafe_errc(1, 0, "Failed to allocate archive object");
 switch (cpio->compress) {
 case OPTION_GRZIP:
  r = archive_write_add_filter_grzip(cpio->archive);
  break;
 case 'J':
  r = archive_write_add_filter_xz(cpio->archive);
  break;
 case OPTION_LRZIP:
  r = archive_write_add_filter_lrzip(cpio->archive);
  break;
 case OPTION_LZ4:
  r = archive_write_add_filter_lz4(cpio->archive);
  break;
 case OPTION_LZMA:
  r = archive_write_add_filter_lzma(cpio->archive);
  break;
 case OPTION_LZOP:
  r = archive_write_add_filter_lzop(cpio->archive);
  break;
 case 'j': case 'y':
  r = archive_write_add_filter_bzip2(cpio->archive);
  break;
 case 'z':
  r = archive_write_add_filter_gzip(cpio->archive);
  break;
 case 'Z':
  r = archive_write_add_filter_compress(cpio->archive);
  break;
 default:
  r = archive_write_add_filter_none(cpio->archive);
  break;
 }
 if (r < ARCHIVE_WARN)
  lafe_errc(1, 0, "Requested compression not available");
 switch (cpio->add_filter) {
 case 0:
  r = ARCHIVE_OK;
  break;
 case OPTION_B64ENCODE:
  r = archive_write_add_filter_b64encode(cpio->archive);
  break;
 case OPTION_UUENCODE:
  r = archive_write_add_filter_uuencode(cpio->archive);
  break;
 }
 if (r < ARCHIVE_WARN)
  lafe_errc(1, 0, "Requested filter not available");
 r = archive_write_set_format_by_name(cpio->archive, cpio->format);
 if (r != ARCHIVE_OK)
  lafe_errc(1, 0, "%s", archive_error_string(cpio->archive));
 archive_write_set_bytes_per_block(cpio->archive, cpio->bytes_per_block);
 cpio->linkresolver = archive_entry_linkresolver_new();
 archive_entry_linkresolver_set_strategy(cpio->linkresolver,
     archive_format(cpio->archive));
 if (cpio->passphrase != NULL)
  r = archive_write_set_passphrase(cpio->archive,
   cpio->passphrase);
 else
  r = archive_write_set_passphrase_callback(cpio->archive, cpio,
   &passphrase_callback);
 if (r != ARCHIVE_OK)
  lafe_errc(1, 0, "%s", archive_error_string(cpio->archive));




 r = archive_write_open_filename(cpio->archive, cpio->filename);
 if (r != ARCHIVE_OK)
  lafe_errc(1, 0, "%s", archive_error_string(cpio->archive));
 lr = lafe_line_reader("-", cpio->option_null);
 while ((p = lafe_line_reader_next(lr)) != NULL)
  file_to_archive(cpio, p);
 lafe_line_reader_free(lr);





 entry = NULL;
 archive_entry_linkify(cpio->linkresolver, &entry, &spare);
 while (entry != NULL) {
  entry_to_archive(cpio, entry);
  archive_entry_free(entry);
  entry = NULL;
  archive_entry_linkify(cpio->linkresolver, &entry, &spare);
 }

 r = archive_write_close(cpio->archive);
 if (cpio->dot)
  fprintf(stderr, "\n");
 if (r != ARCHIVE_OK)
  lafe_errc(1, 0, "%s", archive_error_string(cpio->archive));

 if (!cpio->quiet) {
  int64_t blocks =
   (archive_filter_bytes(cpio->archive, 0) + 511)
   / 512;
  fprintf(stderr, "%lu %s\n", (unsigned long)blocks,
      blocks == 1 ? "block" : "blocks");
 }
 archive_write_free(cpio->archive);
}

static const char *
remove_leading_slash(const char *p)
{
 const char *rp;



 if ((p[0] == '/' || p[0] == '\\') &&
     (p[1] == '/' || p[1] == '\\') &&
     (p[2] == '.' || p[2] == '?') &&
     (p[3] == '/' || p[3] == '\\'))
 {
  if (p[2] == '?' &&
      (p[4] == 'U' || p[4] == 'u') &&
      (p[5] == 'N' || p[5] == 'n') &&
      (p[6] == 'C' || p[6] == 'c') &&
      (p[7] == '/' || p[7] == '\\'))
   p += 8;
  else
   p += 4;
 }
 do {
  rp = p;


  if (((p[0] >= 'a' && p[0] <= 'z') ||
       (p[0] >= 'A' && p[0] <= 'Z')) &&
    p[1] == ':') {
   p += 2;
  }

  while (p[0] == '/' || p[0] == '\\') {
   if (p[1] == '.' && p[2] == '.' &&
    (p[3] == '/' || p[3] == '\\')) {
    p += 3;

   } else
    p += 1;
  }
 } while (rp != p);
 return (p);
}






static int
file_to_archive(struct cpio *cpio, const char *srcpath)
{
 const char *destpath;
 struct archive_entry *entry, *spare;
 size_t len;
 int r;





 entry = archive_entry_new();
 if (entry == NULL)
  lafe_errc(1, 0, "Couldn't allocate entry");
 archive_entry_copy_sourcepath(entry, srcpath);
 r = archive_read_disk_entry_from_file(cpio->archive_read_disk,
     entry, -1, NULL);
 if (r < ARCHIVE_FAILED)
  lafe_errc(1, 0, "%s",
      archive_error_string(cpio->archive_read_disk));
 if (r < ARCHIVE_OK)
  lafe_warnc(0, "%s",
      archive_error_string(cpio->archive_read_disk));
 if (r <= ARCHIVE_FAILED) {
  cpio->return_value = 1;
  return (r);
 }

 if (cpio->uid_override >= 0) {
  archive_entry_set_uid(entry, cpio->uid_override);
  archive_entry_set_uname(entry, cpio->uname_override);
 }
 if (cpio->gid_override >= 0) {
  archive_entry_set_gid(entry, cpio->gid_override);
  archive_entry_set_gname(entry, cpio->gname_override);
 }







 destpath = srcpath;
 if (cpio->destdir) {
  len = strlen(cpio->destdir) + strlen(srcpath) + 8;
  if (len >= cpio->pass_destpath_alloc) {
   while (len >= cpio->pass_destpath_alloc) {
    cpio->pass_destpath_alloc += 512;
    cpio->pass_destpath_alloc *= 2;
   }
   free(cpio->pass_destpath);
   cpio->pass_destpath = malloc(cpio->pass_destpath_alloc);
   if (cpio->pass_destpath == NULL)
    lafe_errc(1, ENOMEM,
        "Can't allocate path buffer");
  }
  strcpy(cpio->pass_destpath, cpio->destdir);
  strcat(cpio->pass_destpath, remove_leading_slash(srcpath));
  destpath = cpio->pass_destpath;
 }
 if (cpio->option_rename)
  destpath = cpio_rename(destpath);
 if (destpath == NULL)
  return 0;
 archive_entry_copy_pathname(entry, destpath);




 spare = NULL;
 if (cpio->linkresolver != NULL
     && archive_entry_filetype(entry) != AE_IFDIR) {
  archive_entry_linkify(cpio->linkresolver, &entry, &spare);
 }

 if (entry != NULL) {
  r = entry_to_archive(cpio, entry);
  archive_entry_free(entry);
  if (spare != NULL) {
   if (r == 0)
    r = entry_to_archive(cpio, spare);
   archive_entry_free(spare);
  }
 }
 return (r);
}

static int
entry_to_archive(struct cpio *cpio, struct archive_entry *entry)
{
 const char *destpath = archive_entry_pathname(entry);
 const char *srcpath = archive_entry_sourcepath(entry);
 int fd = -1;
 ssize_t bytes_read;
 int r;


 if (cpio->verbose)
  fprintf(stderr,"%s", destpath);
 if (cpio->dot)
  fprintf(stderr, ".");

 if (cpio->option_link
     && archive_entry_filetype(entry) == AE_IFREG)
 {
  struct archive_entry *t;

  t = archive_entry_clone(entry);
  if (t == NULL)
   lafe_errc(1, ENOMEM, "Can't create link");



  archive_entry_set_hardlink(t, srcpath);

  archive_entry_set_size(t, 0);
  r = archive_write_header(cpio->archive, t);
  archive_entry_free(t);
  if (r != ARCHIVE_OK)
   lafe_warnc(archive_errno(cpio->archive),
       "%s", archive_error_string(cpio->archive));
  if (r == ARCHIVE_FATAL)
   exit(1);







  return 0;
 }





 if (archive_entry_filetype(entry) == AE_IFREG) {
  if (archive_entry_size(entry) > 0) {
   fd = open(srcpath, O_RDONLY | 0);
   if (fd < 0) {
    lafe_warnc(errno,
        "%s: could not open file", srcpath);
    goto cleanup;
   }
  }
 } else {
  archive_entry_set_size(entry, 0);
 }

 r = archive_write_header(cpio->archive, entry);

 if (r != ARCHIVE_OK)
  lafe_warnc(archive_errno(cpio->archive),
      "%s: %s",
      srcpath,
      archive_error_string(cpio->archive));

 if (r == ARCHIVE_FATAL)
  exit(1);

 if (r >= ARCHIVE_WARN && archive_entry_size(entry) > 0 && fd >= 0) {
  bytes_read = read(fd, cpio->buff, (unsigned)cpio->buff_size);
  while (bytes_read > 0) {
   ssize_t bytes_write;
   bytes_write = archive_write_data(cpio->archive,
       cpio->buff, bytes_read);
   if (bytes_write < 0)
    lafe_errc(1, archive_errno(cpio->archive),
        "%s", archive_error_string(cpio->archive));
   if (bytes_write < bytes_read) {
    lafe_warnc(0,
        "Truncated write; file may have "
        "grown while being archived.");
   }
   bytes_read = read(fd, cpio->buff,
       (unsigned)cpio->buff_size);
  }
 }

 fd = restore_time(cpio, entry, srcpath, fd);

cleanup:
 if (cpio->verbose)
  fprintf(stderr,"\n");
 if (fd >= 0)
  close(fd);
 return 0;
}

static int
restore_time(struct cpio *cpio, struct archive_entry *entry,
    const char *name, int fd)
{

 static int warned = 0;

 (void)cpio;
 (void)entry;
 (void)name;

 if (!warned)
  lafe_warnc(0, "Can't restore access times on this platform");
 warned = 1;
 return (fd);

 return (fd);
}


static void
mode_in(struct cpio *cpio)
{
 struct archive *a;
 struct archive_entry *entry;
 struct archive *ext;
 const char *destpath;
 int r;

 ext = archive_write_disk_new();
 if (ext == NULL)
  lafe_errc(1, 0, "Couldn't allocate restore object");
 r = archive_write_disk_set_options(ext, cpio->extract_flags);
 if (r != ARCHIVE_OK)
  lafe_errc(1, 0, "%s", archive_error_string(ext));
 a = archive_read_new();
 if (a == NULL)
  lafe_errc(1, 0, "Couldn't allocate archive object");
 archive_read_support_filter_all(a);
 archive_read_support_format_all(a);
 if (cpio->passphrase != NULL)
  r = archive_read_add_passphrase(a, cpio->passphrase);
 else
  r = archive_read_set_passphrase_callback(a, cpio,
   &passphrase_callback);
 if (r != ARCHIVE_OK)
  lafe_errc(1, 0, "%s", archive_error_string(a));

 if (archive_read_open_filename(a, cpio->filename,
     cpio->bytes_per_block))
  lafe_errc(1, archive_errno(a),
      "%s", archive_error_string(a));
 for (;;) {
  r = archive_read_next_header(a, &entry);
  if (r == ARCHIVE_EOF)
   break;
  if (r != ARCHIVE_OK) {
   lafe_errc(1, archive_errno(a),
       "%s", archive_error_string(a));
  }
  if (archive_match_path_excluded(cpio->matching, entry))
   continue;
  if (cpio->option_rename) {
   destpath = cpio_rename(archive_entry_pathname(entry));
   archive_entry_set_pathname(entry, destpath);
  } else
   destpath = archive_entry_pathname(entry);
  if (destpath == NULL)
   continue;
  if (cpio->verbose)
   fprintf(stderr, "%s\n", destpath);
  if (cpio->dot)
   fprintf(stderr, ".");
  if (cpio->uid_override >= 0)
   archive_entry_set_uid(entry, cpio->uid_override);
  if (cpio->gid_override >= 0)
   archive_entry_set_gid(entry, cpio->gid_override);
  r = archive_write_header(ext, entry);
  if (r != ARCHIVE_OK) {
   fprintf(stderr, "%s: %s\n",
       archive_entry_pathname(entry),
       archive_error_string(ext));
  } else if (!archive_entry_size_is_set(entry)
      || archive_entry_size(entry) > 0) {
   r = extract_data(a, ext);
   if (r != ARCHIVE_OK)
    cpio->return_value = 1;
  }
 }
 r = archive_read_close(a);
 if (cpio->dot)
  fprintf(stderr, "\n");
 if (r != ARCHIVE_OK)
  lafe_errc(1, 0, "%s", archive_error_string(a));
 r = archive_write_close(ext);
 if (r != ARCHIVE_OK)
  lafe_errc(1, 0, "%s", archive_error_string(ext));
 if (!cpio->quiet) {
  int64_t blocks = (archive_filter_bytes(a, 0) + 511)
         / 512;
  fprintf(stderr, "%lu %s\n", (unsigned long)blocks,
      blocks == 1 ? "block" : "blocks");
 }
 archive_read_free(a);
 archive_write_free(ext);
 exit(cpio->return_value);
}





static int
extract_data(struct archive *ar, struct archive *aw)
{
 int r;
 size_t size;
 const void *block;
 int64_t offset;

 for (;;) {
  r = archive_read_data_block(ar, &block, &size, &offset);
  if (r == ARCHIVE_EOF)
   return (ARCHIVE_OK);
  if (r != ARCHIVE_OK) {
   lafe_warnc(archive_errno(ar),
       "%s", archive_error_string(ar));
   exit(1);
  }
  r = (int)archive_write_data_block(aw, block, size, offset);
  if (r != ARCHIVE_OK) {
   lafe_warnc(archive_errno(aw),
       "%s", archive_error_string(aw));
   return (r);
  }
 }
}

static void
mode_list(struct cpio *cpio)
{
 struct archive *a;
 struct archive_entry *entry;
 int r;

 a = archive_read_new();
 if (a == NULL)
  lafe_errc(1, 0, "Couldn't allocate archive object");
 archive_read_support_filter_all(a);
 archive_read_support_format_all(a);
 if (cpio->passphrase != NULL)
  r = archive_read_add_passphrase(a, cpio->passphrase);
 else
  r = archive_read_set_passphrase_callback(a, cpio,
   &passphrase_callback);
 if (r != ARCHIVE_OK)
  lafe_errc(1, 0, "%s", archive_error_string(a));

 if (archive_read_open_filename(a, cpio->filename,
     cpio->bytes_per_block))
  lafe_errc(1, archive_errno(a),
      "%s", archive_error_string(a));
 for (;;) {
  r = archive_read_next_header(a, &entry);
  if (r == ARCHIVE_EOF)
   break;
  if (r != ARCHIVE_OK) {
   lafe_errc(1, archive_errno(a),
       "%s", archive_error_string(a));
  }
  if (archive_match_path_excluded(cpio->matching, entry))
   continue;
  if (cpio->verbose)
   list_item_verbose(cpio, entry);
  else
   fprintf(stdout, "%s\n", archive_entry_pathname(entry));
 }
 r = archive_read_close(a);
 if (r != ARCHIVE_OK)
  lafe_errc(1, 0, "%s", archive_error_string(a));
 if (!cpio->quiet) {
  int64_t blocks = (archive_filter_bytes(a, 0) + 511)
         / 512;
  fprintf(stderr, "%lu %s\n", (unsigned long)blocks,
      blocks == 1 ? "block" : "blocks");
 }
 archive_read_free(a);
 exit(0);
}

static void
list_item_verbose(struct cpio *cpio, struct archive_entry *entry)
{
 char size[32];
 char date[32];
 char uids[16], gids[16];
 const char *uname, *gname;
 FILE *out = stdout;
 const char *fmt;
 time_t mtime;
 static time_t now;

 if (!now)
  time(&now);

 if (cpio->option_numeric_uid_gid) {

  strcpy(uids, cpio_i64toa(archive_entry_uid(entry)));
  uname = uids;
  strcpy(gids, cpio_i64toa(archive_entry_gid(entry)));
  gname = gids;
 } else {

  uname = archive_entry_uname(entry);
  if (uname == NULL)
   uname = lookup_uname(cpio, (uid_t)archive_entry_uid(entry));

  gname = archive_entry_gname(entry);
  if (gname == NULL)
   gname = lookup_gname(cpio, (uid_t)archive_entry_gid(entry));
 }


 if (archive_entry_filetype(entry) == AE_IFCHR
     || archive_entry_filetype(entry) == AE_IFBLK) {
  snprintf(size, sizeof(size), "%lu,%lu",
      (unsigned long)archive_entry_rdevmajor(entry),
      (unsigned long)archive_entry_rdevminor(entry));
 } else {
  strcpy(size, cpio_i64toa(archive_entry_size(entry)));
 }


 mtime = archive_entry_mtime(entry);

 if (mtime - now > 15768000
  || mtime - now < -15768000)
  fmt = cpio->day_first ? "%e %b  %Y" : "%b %e  %Y";
 else
  fmt = cpio->day_first ? "%e %b %H:%M" : "%b %e %H:%M";

 strftime(date, sizeof(date), fmt, localtime(&mtime));

 fprintf(out, "%s%3d %-8s %-8s %8s %12s %s",
     archive_entry_strmode(entry),
     archive_entry_nlink(entry),
     uname, gname, size, date,
     archive_entry_pathname(entry));


 if (archive_entry_hardlink(entry))
  fprintf(out, " link to %s", archive_entry_hardlink(entry));
 else if (archive_entry_symlink(entry))
  fprintf(out, " -> %s", archive_entry_symlink(entry));
 fprintf(out, "\n");
}

static void
mode_pass(struct cpio *cpio, const char *destdir)
{
 struct lafe_line_reader *lr;
 const char *p;
 int r;


 cpio->destdir = malloc(strlen(destdir) + 8);
 strcpy(cpio->destdir, destdir);
 if (destdir[strlen(destdir) - 1] != '/')
  strcat(cpio->destdir, "/");

 cpio->archive = archive_write_disk_new();
 if (cpio->archive == NULL)
  lafe_errc(1, 0, "Failed to allocate archive object");
 r = archive_write_disk_set_options(cpio->archive, cpio->extract_flags);
 if (r != ARCHIVE_OK)
  lafe_errc(1, 0, "%s", archive_error_string(cpio->archive));
 cpio->linkresolver = archive_entry_linkresolver_new();
 archive_write_disk_set_standard_lookup(cpio->archive);

 cpio->archive_read_disk = archive_read_disk_new();
 if (cpio->archive_read_disk == NULL)
  lafe_errc(1, 0, "Failed to allocate archive object");
 if (cpio->option_follow_links)
  archive_read_disk_set_symlink_logical(cpio->archive_read_disk);
 else
  archive_read_disk_set_symlink_physical(cpio->archive_read_disk);
 archive_read_disk_set_standard_lookup(cpio->archive_read_disk);

 lr = lafe_line_reader("-", cpio->option_null);
 while ((p = lafe_line_reader_next(lr)) != NULL)
  file_to_archive(cpio, p);
 lafe_line_reader_free(lr);

 archive_entry_linkresolver_free(cpio->linkresolver);
 r = archive_write_close(cpio->archive);
 if (cpio->dot)
  fprintf(stderr, "\n");
 if (r != ARCHIVE_OK)
  lafe_errc(1, 0, "%s", archive_error_string(cpio->archive));

 if (!cpio->quiet) {
  int64_t blocks =
   (archive_filter_bytes(cpio->archive, 0) + 511)
   / 512;
  fprintf(stderr, "%lu %s\n", (unsigned long)blocks,
      blocks == 1 ? "block" : "blocks");
 }

 archive_write_free(cpio->archive);
}

static const char *
cpio_rename(const char *name)
{
 static char buff[1024];
 FILE *t;
 char *p, *ret;

 t = fopen("/dev/tty", "r+");
 if (t == NULL)
  return (name);
 fprintf(t, "%s (Enter/./(new name))? ", name);
 fflush(t);


 p = fgets(buff, sizeof(buff), t);
 fclose(t);
 if (p == NULL)

  return (NULL);

 while (*p == ' ' || *p == '\t')
  ++p;
 if (*p == '\n' || *p == '\0')

  return (NULL);
 if (*p == '.' && p[1] == '\n')

  return (name);
 ret = p;

 while (*p != '\0' && *p != '\n')
  ++p;

 *p = '\0';
 return (ret);
}

static void
free_cache(struct name_cache *cache)
{
 size_t i;

 if (cache != NULL) {
  for (i = 0; i < cache->size; i++)
   free(cache->cache[i].name);
  free(cache);
 }
}




static const char *
lookup_name(struct cpio *cpio, struct name_cache **name_cache_variable,
    int (*lookup_fn)(struct cpio *, const char **, id_t), id_t id)
{
 char asnum[16];
 struct name_cache *cache;
 const char *name;
 int slot;


 if (*name_cache_variable == NULL) {
  *name_cache_variable = malloc(sizeof(struct name_cache));
  if (*name_cache_variable == NULL)
   lafe_errc(1, ENOMEM, "No more memory");
  memset(*name_cache_variable, 0, sizeof(struct name_cache));
  (*name_cache_variable)->size = 101;
 }

 cache = *name_cache_variable;
 cache->probes++;

 slot = id % cache->size;
 if (cache->cache[slot].name != NULL) {
  if (cache->cache[slot].id == id) {
   cache->hits++;
   return (cache->cache[slot].name);
  }
  free(cache->cache[slot].name);
  cache->cache[slot].name = NULL;
 }

 if (lookup_fn(cpio, &name, id) == 0) {
  if (name == NULL || name[0] == '\0') {

   snprintf(asnum, sizeof(asnum), "%u", (unsigned)id);
   name = asnum;
  }
  cache->cache[slot].name = strdup(name);
  if (cache->cache[slot].name != NULL) {
   cache->cache[slot].id = id;
   return (cache->cache[slot].name);
  }





 }
 return (NULL);
}

static const char *
lookup_uname(struct cpio *cpio, uid_t uid)
{
 return (lookup_name(cpio, &cpio->uname_cache,
      &lookup_uname_helper, (id_t)uid));
}

static int
lookup_uname_helper(struct cpio *cpio, const char **name, id_t id)
{
 struct passwd *pwent;

 (void)cpio;

 errno = 0;
 pwent = getpwuid((uid_t)id);
 if (pwent == NULL) {
  *name = NULL;
  if (errno != 0 && errno != ENOENT)
   lafe_warnc(errno, "getpwuid(%s) failed",
       cpio_i64toa((int64_t)id));
  return (errno);
 }

 *name = pwent->pw_name;
 return 0;
}

static const char *
lookup_gname(struct cpio *cpio, gid_t gid)
{
 return (lookup_name(cpio, &cpio->gname_cache,
      &lookup_gname_helper, (id_t)gid));
}

static int
lookup_gname_helper(struct cpio *cpio, const char **name, id_t id)
{
 struct group *grent;

 (void)cpio;

 errno = 0;
 grent = getgrgid((gid_t)id);
 if (grent == NULL) {
  *name = NULL;
  if (errno != 0)
   lafe_warnc(errno, "getgrgid(%s) failed",
       cpio_i64toa((int64_t)id));
  return (errno);
 }

 *name = grent->gr_name;
 return 0;
}






const char *
cpio_i64toa(int64_t n0)
{



 static char buff[22];
 int64_t n = n0 < 0 ? -n0 : n0;
 char *p = buff + sizeof(buff);

 *--p = '\0';
 do {
  *--p = '0' + (int)(n % 10);
  n /= 10;
 } while (n > 0);
 if (n0 < 0)
  *--p = '-';
 return p;
}


static const char *
passphrase_callback(struct archive *a, void *_client_data)
{
 struct cpio *cpio = (struct cpio *)_client_data;
 (void)a;

 if (cpio->ppbuff == NULL) {
  cpio->ppbuff = malloc(1024);
  if (cpio->ppbuff == NULL)
   lafe_errc(1, errno, "Out of memory");
 }
 return lafe_readpassphrase("Enter passphrase:",
  cpio->ppbuff, 1024);
}

static void
passphrase_free(char *ppbuff)
{
 if (ppbuff != NULL) {
  memset(ppbuff, 0, 1024);
  free(ppbuff);
 }
}
