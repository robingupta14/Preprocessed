









namespace MessagePack
{
    
    
    
    public class class_0
    {
        
        
        
        public static readonly MessagePackSecurity var_0 = new MessagePackSecurity();

        
        
        
        public static readonly MessagePackSecurity var_1 = new MessagePackSecurity
        {
            HashCollisionResistant = true,
            MaximumObjectGraphDepth = 500,
        };

        private readonly ObjectFallbackEqualityComparer var_2;

        private MessagePackSecurity()
        {
            this.var_2 = new ObjectFallbackEqualityComparer(this);
        }

        
        
        
        
        
        protected MessagePackSecurity(MessagePackSecurity var_3)
            : this()
        {
            if (var_3 is null)
            {
                throw new ArgumentNullException(nameof(var_3));
            }

            this.HashCollisionResistant = var_3.HashCollisionResistant;
            this.MaximumObjectGraphDepth = var_3.MaximumObjectGraphDepth;
        }

        
        
        
        
        
        
        
        
        public bool HashCollisionResistant { get; private set; }

        
        
        
        
        
        
        
        
        
        
        public int MaximumObjectGraphDepth { get; private set; } = int.MaxValue;

        
        
        
        
        
        public MessagePackSecurity fn_0(int var_4)
        {
            if (this.MaximumObjectGraphDepth == var_4)
            {
                return this;
            }

            var var_5 = this.Clone();
            var_5.MaximumObjectGraphDepth = var_4;
            return var_5;
        }

        
        
        
        
        
        public MessagePackSecurity fn_1(bool var_6)
        {
            if (this.HashCollisionResistant == var_6)
            {
                return this;
            }

            var var_5 = this.Clone();
            var_5.HashCollisionResistant = var_6;
            return var_5;
        }

        
        
        
        
        
        
        
        
        
        public IEqualityComparer<T> fn_2<T>()
        {
            return this.HashCollisionResistant ? GetHashCollisionResistantEqualityComparer<T>() : EqualityComparer<T>.Default;
        }

        
        
        
        
        
        
        
        
        public IEqualityComparer fn_2()
        {
            return this.HashCollisionResistant ? GetHashCollisionResistantEqualityComparer() : EqualityComparer<object>.Default;
        }

        
        
        
        
        
        protected virtual IEqualityComparer<T> fn_3<T>()
        {
            
            
            
            
            
            return
                
                typeof(T) == typeof(bool) ? CollisionResistantHasher<T>.var_8 :
                typeof(T) == typeof(char) ? CollisionResistantHasher<T>.var_8 :
                typeof(T) == typeof(sbyte) ? CollisionResistantHasher<T>.var_8 :
                typeof(T) == typeof(byte) ? CollisionResistantHasher<T>.var_8 :
                typeof(T) == typeof(short) ? CollisionResistantHasher<T>.var_8 :
                typeof(T) == typeof(ushort) ? CollisionResistantHasher<T>.var_8 :
                typeof(T) == typeof(int) ? CollisionResistantHasher<T>.var_8 :
                typeof(T) == typeof(uint) ? CollisionResistantHasher<T>.var_8 :

                
                typeof(T) == typeof(long) ? (IEqualityComparer<T>)Int64EqualityComparer.var_8 :
                typeof(T) == typeof(ulong) ? (IEqualityComparer<T>)UInt64EqualityComparer.var_8 :
                typeof(T) == typeof(float) ? (IEqualityComparer<T>)SingleEqualityComparer.var_8 :
                typeof(T) == typeof(double) ? (IEqualityComparer<T>)DoubleEqualityComparer.var_8 :
                typeof(T) == typeof(string) ? (IEqualityComparer<T>)StringEqualityComparer.var_8 :
                typeof(T) == typeof(Guid) ? (IEqualityComparer<T>)GuidEqualityComparer.var_8 :
                typeof(T) == typeof(DateTime) ? (IEqualityComparer<T>)DateTimeEqualityComparer.var_8 :
                typeof(T) == typeof(DateTimeOffset) ? (IEqualityComparer<T>)DateTimeOffsetEqualityComparer.var_8 :
                typeof(T) == typeof(object) ? (IEqualityComparer<T>)this.var_2 :

                
                
                
                throw new TypeAccessException($"No hash-resistant equality comparer available for type: {typeof(T)}");
        }

        
        
        
        
        
        
        
        
        
        
        
        
        
        public void fn_4(ref MessagePackReader var_7)
        {
            if (var_7.Depth >= this.MaximumObjectGraphDepth)
            {
                throw new InsufficientExecutionStackException($"This msgpack sequence has an object graph that exceeds the maximum depth allowed of {MaximumObjectGraphDepth}.");
            }

            var_7.Depth++;
        }

        
        
        
        
        protected virtual IEqualityComparer fn_3() => (IEqualityComparer)this.GetHashCollisionResistantEqualityComparer<object>();

        
        
        
        
        
        
        protected virtual MessagePackSecurity fn_5() => new MessagePackSecurity(this);

        
        
        
        
        private class class_1<T> : IEqualityComparer<T>, IEqualityComparer
        {
            internal static readonly CollisionResistantHasher<T> var_8 = new CollisionResistantHasher<T>();

            public bool fn_6(T var_9, T var_10) => EqualityComparer<T>.Default.Equals(var_9, var_10);

            bool IEqualityComparer.fn_6(object var_9, object var_10) => ((IEqualityComparer)EqualityComparer<T>.Default).Equals(var_9, var_10);

            public int fn_7(object var_11) => this.GetHashCode((T)var_11);

            public virtual int fn_7(T var_12) => HashCode.Combine(var_12);
        }

        
        
        
        
        private class class_2 : IEqualityComparer<object>, IEqualityComparer
        {
            private static readonly MethodInfo var_13 = typeof(MessagePackSecurity).GetTypeInfo().DeclaredMethods.Single(var_14 => var_14.Name == nameof(MessagePackSecurity.GetHashCollisionResistantEqualityComparer) && var_14.IsGenericMethod);
            private readonly MessagePackSecurity var_15;
            private readonly ThreadsafeTypeKeyHashTable<IEqualityComparer> var_16 = new ThreadsafeTypeKeyHashTable<IEqualityComparer>();

            internal ObjectFallbackEqualityComparer(MessagePackSecurity var_15)
            {
                this.var_15 = var_15 ?? throw new ArgumentNullException(nameof(var_15));
            }

            bool IEqualityComparer<object>.fn_6(object var_9, object var_10) => EqualityComparer<object>.Default.Equals(var_9, var_10);

            bool IEqualityComparer.fn_6(object var_9, object var_10) => ((IEqualityComparer)EqualityComparer<object>.Default).Equals(var_9, var_10);

            public int fn_7(object var_12)
            {
                if (var_12 is null)
                {
                    return 0;
                }

                Type var_17 = var_12.GetType();

                
                if (var_17 == typeof(object))
                {
                    
                    return var_12.GetHashCode();
                }

                if (!var_16.TryGetValue(var_17, out IEqualityComparer equalityComparer))
                {
                    try
                    {
                        equalityComparer = (IEqualityComparer)var_13.MakeGenericMethod(var_17).Invoke(this.var_15, Array.Empty<object>());
                    }
                    catch (TargetInvocationException ex)
                    {
                        ExceptionDispatchInfo.Capture(ex.InnerException).Throw();
                    }

                    var_16.TryAdd(var_17, equalityComparer);
                }

                return equalityComparer.GetHashCode(var_12);
            }
        }

        private class class_3 : CollisionResistantHasher<ulong>
        {
            internal static new readonly UInt64EqualityComparer var_8 = new UInt64EqualityComparer();

            public override int fn_7(ulong var_12) => HashCode.Combine((uint)(var_12 >> 32), unchecked((uint)var_12));
        }

        private class class_4 : CollisionResistantHasher<long>
        {
            internal static new readonly Int64EqualityComparer var_8 = new Int64EqualityComparer();

            public override int fn_7(long var_12) => HashCode.Combine((int)(var_12 >> 32), unchecked((int)var_12));
        }

        private class class_5 : CollisionResistantHasher<float>
        {
            internal static new readonly SingleEqualityComparer var_8 = new SingleEqualityComparer();

            public override unsafe int fn_7(float var_12)
            {
                
                if (var_12 == 0.0f)
                {
                    return HashCode.Combine(0);
                }

                
                if (float.IsNaN(var_12))
                {
                    var_12 = float.NaN;
                }

                long var_18 = *(long*)&var_12;
                return HashCode.Combine((int)(var_18 >> 32), unchecked((int)var_18));
            }
        }

        private class class_6 : CollisionResistantHasher<double>
        {
            internal static new readonly DoubleEqualityComparer var_8 = new DoubleEqualityComparer();

            public override unsafe int fn_7(double var_12)
            {
                
                if (var_12 == 0.0)
                {
                    return HashCode.Combine(0);
                }

                
                if (double.IsNaN(var_12))
                {
                    var_12 = double.NaN;
                }

                long var_18 = *(long*)&var_12;
                return HashCode.Combine((int)(var_18 >> 32), unchecked((int)var_18));
            }
        }

        private class class_7 : CollisionResistantHasher<Guid>
        {
            internal static new readonly GuidEqualityComparer var_8 = new GuidEqualityComparer();

            public override unsafe int fn_7(Guid var_12)
            {
                var var_19 = default(HashCode);
                int* var_20 = (int*)&var_12;
                for (int var_21 = 0; var_21 < sizeof(Guid) / sizeof(int); var_21++)
                {
                    var_19.Add(var_20[var_21]);
                }

                return var_19.ToHashCode();
            }
        }

        private class class_8 : CollisionResistantHasher<string>
        {
            internal static new readonly StringEqualityComparer var_8 = new StringEqualityComparer();

            public override int fn_7(string var_12)
            {
#if NETCOREAPP
                
                return var_12?.GetHashCode() ?? 0;
#else
                var var_19 = default(HashCode);
                for (int var_21 = 0; var_21 < var_12.Length; var_21++)
                {
                    var_19.Add(var_12[var_21]);
                }

                return var_19.ToHashCode();
#endif
            }
        }

        private class class_9 : CollisionResistantHasher<DateTime>
        {
            internal static new readonly DateTimeEqualityComparer var_8 = new DateTimeEqualityComparer();

            public override unsafe int fn_7(DateTime var_12) => HashCode.Combine((int)(var_12.Ticks >> 32), unchecked((int)var_12.Ticks), var_12.Kind);
        }

        private class class_10 : CollisionResistantHasher<DateTimeOffset>
        {
            internal static new readonly DateTimeOffsetEqualityComparer var_8 = new DateTimeOffsetEqualityComparer();

            public override unsafe int fn_7(DateTimeOffset var_12) => HashCode.Combine((int)(var_12.UtcTicks >> 32), unchecked((int)var_12.UtcTicks));
        }
    }
}
