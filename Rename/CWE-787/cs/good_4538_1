







public class class_0
{
    public MessagePackSecurityTests(ITestOutputHelper var_0)
    {
        Logger = var_0;
    }

    public ITestOutputHelper Logger { get; }

    [Fact]
    public void fn_0()
    {
        Assert.True(MessagePackSecurity.UntrustedData.HashCollisionResistant);
    }

    [Fact]
    public void fn_1()
    {
        Assert.False(MessagePackSecurity.TrustedData.HashCollisionResistant);
    }

    [Fact]
    public void fn_2()
    {
        Assert.Same(MessagePackSecurity.TrustedData, MessagePackSecurity.TrustedData.WithHashCollisionResistant(false));
        Assert.True(MessagePackSecurity.TrustedData.WithHashCollisionResistant(true).HashCollisionResistant);
    }

    [Fact]
    public void fn_3()
    {
        const long var_1 = 0x100000001;
        const long var_2 = 0x200000002;
        var var_3 = MessagePackSecurity.UntrustedData.GetEqualityComparer<long>();
        Assert.Equal(EqualityComparer<long>.Default.GetHashCode(var_1), EqualityComparer<long>.Default.GetHashCode(var_2)); 
        Assert.NotEqual(var_3.GetHashCode(var_1), var_3.GetHashCode(var_2));
    }

    [Fact]
    public void fn_4()
    {
        Guid var_1 = new Guid(new byte[] { 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1 });
        Guid var_2 = new Guid(new byte[] { 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2 });
        var var_3 = MessagePackSecurity.UntrustedData.GetEqualityComparer<Guid>();
#if NETCOREAPP 
        Assert.Equal(EqualityComparer<Guid>.Default.GetHashCode(var_1), EqualityComparer<Guid>.Default.GetHashCode(var_2)); 
#endif
        Assert.NotEqual(var_3.GetHashCode(var_1), var_3.GetHashCode(var_2));
    }

    [Fact]
    public unsafe void fn_5()
    {
        var var_3 = MessagePackSecurity.UntrustedData.GetEqualityComparer<float>();
        Assert.Equal(var_3.GetHashCode(0.0f), var_3.GetHashCode(-0.0f));

        
        float var_4, var_5;
        *(uint*)&var_4 = 0xFFC00001;
        *(uint*)&var_5 = 0xFF800001;

        Assert.True(float.IsNaN(var_4));
        Assert.True(float.IsNaN(var_5));
#if NETCOREAPP 
        Assert.Equal(var_4.GetHashCode(), var_5.GetHashCode());
#endif
        Assert.Equal(var_3.GetHashCode(var_4), var_3.GetHashCode(var_5));
        Assert.Equal(var_3.GetHashCode(float.NaN), var_3.GetHashCode(-float.NaN));

        
        Assert.NotEqual(var_3.GetHashCode(1.0f), var_3.GetHashCode(-1.0f));
        Assert.NotEqual(var_3.GetHashCode(1.0f), var_3.GetHashCode(2.0f));
    }

    [Fact]
    public unsafe void fn_6()
    {
        var var_3 = MessagePackSecurity.UntrustedData.GetEqualityComparer<double>();
        Assert.Equal(var_3.GetHashCode(0.0), var_3.GetHashCode(-0.0));

        
        double var_4, var_5;
        *(ulong*)&var_4 = 0xFFF8000000000001;
        *(ulong*)&var_5 = 0xFFF8000000000002;

        Assert.True(double.IsNaN(var_4));
        Assert.True(double.IsNaN(var_5));
#if NETCOREAPP 
        Assert.Equal(var_4.GetHashCode(), var_5.GetHashCode());
#endif
        Assert.Equal(var_3.GetHashCode(var_4), var_3.GetHashCode(var_5));
        Assert.Equal(var_3.GetHashCode(double.NaN), var_3.GetHashCode(-double.NaN));

        
        Assert.NotEqual(var_3.GetHashCode(1.0), var_3.GetHashCode(-1.0));
        Assert.NotEqual(var_3.GetHashCode(1.0), var_3.GetHashCode(2.0));
    }

    [Fact]
    public void fn_7()
    {
        var var_3 = MessagePackSecurity.UntrustedData.GetEqualityComparer<object>();

        Assert.Equal(var_3.GetHashCode(null), var_3.GetHashCode(null));
        Assert.NotEqual(var_3.GetHashCode(null), var_3.GetHashCode(new object()));

        Assert.Equal(var_3.GetHashCode("hi"), var_3.GetHashCode("hi"));
        Assert.NotEqual(var_3.GetHashCode("hi"), var_3.GetHashCode("bye"));

        Assert.Equal(var_3.GetHashCode(true), var_3.GetHashCode(true));
        Assert.NotEqual(var_3.GetHashCode(true), var_3.GetHashCode(false));

        var var_6 = new object();
        Assert.Equal(var_3.GetHashCode(var_6), var_3.GetHashCode(var_6));
        Assert.NotEqual(var_3.GetHashCode(var_6), var_3.GetHashCode(new object()));
    }

    [Fact]
    public void fn_8()
    {
        var var_7 = MessagePackSecurity.UntrustedData.WithMaximumObjectGraphDepth(15);
        Assert.NotNull(var_7.GetEqualityComparer<object>());
    }

    
    
    
    [Fact]
    public void fn_9()
    {
        var var_3 = MessagePackSecurity.UntrustedData.GetEqualityComparer<object>();
        var var_8 = Assert.Throws<TypeAccessException>(() => var_3.GetHashCode(new AggregateException()));
        this.Logger.WriteLine(var_8.ToString());
    }

    [Fact]
    public void fn_10()
    {
        var var_9 = new
        {
            A = (byte)3,
            B = new Dictionary<object, byte>
            {
                { "C", 15 },
            },
            D = new string[] { "E", "F" },
        };
        byte[] var_10 = MessagePackSerializer.Serialize(var_9);
        var var_11 = (IDictionary<object, object>)MessagePackSerializer.Deserialize<object>(var_10, MessagePackSerializerOptions.Standard.WithSecurity(MessagePackSecurity.UntrustedData));
        Assert.Equal(var_9.A, var_11["A"]);
        Assert.Equal(var_9.B["C"], ((Dictionary<object, object>)var_11["B"])["C"]);
        Assert.Equal(var_9.D, var_11["D"]);
    }

    [Fact]
    public void fn_11()
    {
        var var_9 = new
        {
            B = new Dictionary<object, byte>
            {
                { new ArbitraryType(), 15 },
            },
        };
        byte[] var_10 = MessagePackSerializer.Serialize(var_9);
        var var_8 = Assert.Throws<MessagePackSerializationException>(() => MessagePackSerializer.Deserialize<object>(var_10, MessagePackSerializerOptions.Standard.WithSecurity(MessagePackSecurity.UntrustedData)));
        Assert.IsType<TypeAccessException>(var_8.InnerException);
        this.Logger.WriteLine(var_8.ToString());
    }

    [DataContract]
    public class class_1
    {
    }
}
