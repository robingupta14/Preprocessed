







struct struct_10 {
 struct struct_173 cell;
 int set;
 int g0set;
 int g1set;
};


struct struct_155 {
 enum {
  enum_3,
  enum_4,
  enum_5
 } type;
 union {
  int num;
  char *str;
 };
};


struct struct_174 {
 struct struct_174 *wp;
 struct struct_156 *event;
 struct struct_173 ctx;

 struct struct_10 cell;

 struct struct_10 old_cell;
 u_int old_cx;
 u_int old_cy;
 int old_mode;

 u_char interm_buf[4];
 size_t interm_len;

 u_char param_buf[64];
 size_t param_len;



 u_char *input_buf;
 size_t input_len;
 size_t input_space;
 enum {
  enum_10,
  enum_11
 } input_end;

 struct struct_155 param_list[24];
 u_int param_list_len;

 struct struct_171 utf8data;
 int utf8started;

 int ch;
 int last;

 int flags;


 const struct struct_147 *state;

 struct struct_14 timer;





 struct struct_144 *since_ground;
};


struct struct_147;
static int fn_152(struct struct_174 *);
static int fn_152(struct struct_174 *, u_int, int, int);
static void fn_19(2, 3) input_reply(struct struct_174 *, const char *, ...);
static void fn_145(struct struct_174 *,
      const struct struct_147 *);
static void fn_136(struct struct_174 *);

static void fn_173(struct struct_174 *, const char *);
static void fn_173(struct struct_174 *, const char *);
static void fn_173(struct struct_174 *, const char *);
static void fn_173(struct struct_174 *, const char *);
static void fn_174(struct struct_174 *, const char *);


static void fn_156(struct struct_174 *);
static void fn_156(struct struct_174 *);
static void fn_169(struct struct_174 *);
static void fn_170(struct struct_174 *);
static void fn_170(struct struct_174 *);
static void fn_170(struct struct_174 *);
static void fn_170(struct struct_174 *);
static void fn_170(struct struct_174 *);
static void fn_170(struct struct_174 *);


static int fn_156(struct struct_174 *);
static int fn_156(struct struct_174 *);
static int fn_156(struct struct_174 *);
static int fn_156(struct struct_174 *);
static int fn_156(struct struct_174 *);
static int fn_156(struct struct_174 *);
static int fn_156(struct struct_174 *);
static void fn_158(struct struct_174 *);
static void fn_158(struct struct_174 *);
static void fn_158(struct struct_174 *);
static void fn_158(struct struct_174 *);
static void fn_158(struct struct_174 *);
static void fn_163(struct struct_174 *, int, u_int *);
static void fn_167(struct struct_174 *, int, u_int *);
static void fn_169(struct struct_174 *);
static int fn_169(struct struct_174 *);
static int fn_171(struct struct_174 *);
static int fn_169(struct struct_174 *);


static int fn_127(const void *, const void *);


struct struct_156 {
 int ch;
 const char *interm;
 int type;
};


enum enumtype_56 {
 enum_57,
 enum_58,
 enum_59,
 enum_60,
 enum_61,
 enum_62,
 enum_63,
 enum_64,
 enum_65,
 enum_66,
 enum_67,
 enum_68,
 enum_69,
 enum_70,
 enum_71,
};


static const struct struct_156 input_esc_table[] = {
 { '0', "(", INPUT_ESC_SCSG0_ON },
 { '0', ")", INPUT_ESC_SCSG1_ON },
 { '7', "", INPUT_ESC_DECSC },
 { '8', "", INPUT_ESC_DECRC },
 { '8', "#", INPUT_ESC_DECALN },
 { '=', "", INPUT_ESC_DECKPAM },
 { '>', "", INPUT_ESC_DECKPNM },
 { 'B', "(", INPUT_ESC_SCSG0_OFF },
 { 'B', ")", INPUT_ESC_SCSG1_OFF },
 { 'D', "", INPUT_ESC_IND },
 { 'E', "", INPUT_ESC_NEL },
 { 'H', "", INPUT_ESC_HTS },
 { 'M', "", INPUT_ESC_RI },
 { '\\', "", INPUT_ESC_ST },
 { 'c', "", INPUT_ESC_RIS },
};


enum enumtype_72 {
 enum_73,
 enum_74,
 enum_75,
 enum_76,
 enum_77,
 enum_78,
 enum_79,
 enum_80,
 enum_81,
 enum_82,
 enum_83,
 enum_84,
 enum_85,
 enum_86,
 enum_87,
 enum_88,
 enum_89,
 enum_90,
 enum_91,
 enum_92,
 enum_93,
 enum_94,
 enum_95,
 enum_96,
 enum_97,
 enum_98,
 enum_99,
 enum_100,
 enum_101,
 enum_102,
 enum_103,
 enum_104,
 enum_105,
 enum_106,
 enum_107,
 enum_108,
 enum_109,
};


static const struct struct_156 input_csi_table[] = {
 { '@', "", INPUT_CSI_ICH },
 { 'A', "", INPUT_CSI_CUU },
 { 'B', "", INPUT_CSI_CUD },
 { 'C', "", INPUT_CSI_CUF },
 { 'D', "", INPUT_CSI_CUB },
 { 'E', "", INPUT_CSI_CNL },
 { 'F', "", INPUT_CSI_CPL },
 { 'G', "", INPUT_CSI_HPA },
 { 'H', "", INPUT_CSI_CUP },
 { 'J', "", INPUT_CSI_ED },
 { 'K', "", INPUT_CSI_EL },
 { 'L', "", INPUT_CSI_IL },
 { 'M', "", INPUT_CSI_DL },
 { 'P', "", INPUT_CSI_DCH },
 { 'S', "", INPUT_CSI_SU },
 { 'T', "", INPUT_CSI_SD },
 { 'X', "", INPUT_CSI_ECH },
 { 'Z', "", INPUT_CSI_CBT },
 { '`', "", INPUT_CSI_HPA },
 { 'b', "", INPUT_CSI_REP },
 { 'c', "", INPUT_CSI_DA },
 { 'c', ">", INPUT_CSI_DA_TWO },
 { 'd', "", INPUT_CSI_VPA },
 { 'f', "", INPUT_CSI_CUP },
 { 'g', "", INPUT_CSI_TBC },
 { 'h', "", INPUT_CSI_SM },
 { 'h', "?", INPUT_CSI_SM_PRIVATE },
 { 'l', "", INPUT_CSI_RM },
 { 'l', "?", INPUT_CSI_RM_PRIVATE },
 { 'm', "", INPUT_CSI_SGR },
 { 'm', ">", INPUT_CSI_MODSET },
 { 'n', "", INPUT_CSI_DSR },
 { 'n', ">", INPUT_CSI_MODOFF },
 { 'q', " ", INPUT_CSI_DECSCUSR },
 { 'q', ">", INPUT_CSI_XDA },
 { 'r', "", INPUT_CSI_DECSTBM },
 { 's', "", INPUT_CSI_SCP },
 { 't', "", INPUT_CSI_WINOPS },
 { 'u', "", INPUT_CSI_RCP },
};


struct struct_147 {
 int first;
 int last;

 int (*handler)(struct struct_174 *);
 const struct struct_147 *state;
};


struct struct_147 {
 const char *name;
 void (*enter)(struct struct_174 *);
 void (*exit)(struct struct_174 *);
 const struct struct_147 *transitions;
};

static const struct struct_147 input_state_ground_table[];
static const struct struct_147 input_state_esc_enter_table[];
static const struct struct_147 input_state_esc_intermediate_table[];
static const struct struct_147 input_state_csi_enter_table[];
static const struct struct_147 input_state_csi_parameter_table[];
static const struct struct_147 input_state_csi_intermediate_table[];
static const struct struct_147 input_state_csi_ignore_table[];
static const struct struct_147 input_state_dcs_enter_table[];
static const struct struct_147 input_state_dcs_parameter_table[];
static const struct struct_147 input_state_dcs_intermediate_table[];
static const struct struct_147 input_state_dcs_handler_table[];
static const struct struct_147 input_state_dcs_escape_table[];
static const struct struct_147 input_state_dcs_ignore_table[];
static const struct struct_147 input_state_osc_string_table[];
static const struct struct_147 input_state_apc_string_table[];
static const struct struct_147 input_state_rename_string_table[];
static const struct struct_147 input_state_consume_st_table[];


static const struct struct_147 var_148 = {
 "ground",
 input_ground, NULL,
 input_state_ground_table
};


static const struct struct_147 var_127 = {
 "esc_enter",
 input_clear, NULL,
 input_state_esc_enter_table
};


static const struct struct_147 var_127 = {
 "esc_intermediate",
 NULL, NULL,
 input_state_esc_intermediate_table
};


static const struct struct_147 var_127 = {
 "csi_enter",
 input_clear, NULL,
 input_state_csi_enter_table
};


static const struct struct_147 var_127 = {
 "csi_parameter",
 NULL, NULL,
 input_state_csi_parameter_table
};


static const struct struct_147 var_127 = {
 "csi_intermediate",
 NULL, NULL,
 input_state_csi_intermediate_table
};


static const struct struct_147 var_127 = {
 "csi_ignore",
 NULL, NULL,
 input_state_csi_ignore_table
};


static const struct struct_147 var_127 = {
 "dcs_enter",
 input_enter_dcs, NULL,
 input_state_dcs_enter_table
};


static const struct struct_147 var_127 = {
 "dcs_parameter",
 NULL, NULL,
 input_state_dcs_parameter_table
};


static const struct struct_147 var_127 = {
 "dcs_intermediate",
 NULL, NULL,
 input_state_dcs_intermediate_table
};


static const struct struct_147 var_127 = {
 "dcs_handler",
 NULL, NULL,
 input_state_dcs_handler_table
};


static const struct struct_147 var_127 = {
 "dcs_escape",
 NULL, NULL,
 input_state_dcs_escape_table
};


static const struct struct_147 var_127 = {
 "dcs_ignore",
 NULL, NULL,
 input_state_dcs_ignore_table
};


static const struct struct_147 var_127 = {
 "osc_string",
 input_enter_osc, input_exit_osc,
 input_state_osc_string_table
};


static const struct struct_147 var_127 = {
 "apc_string",
 input_enter_apc, input_exit_apc,
 input_state_apc_string_table
};


static const struct struct_147 var_127 = {
 "rename_string",
 input_enter_rename, input_exit_rename,
 input_state_rename_string_table
};


static const struct struct_147 var_127 = {
 "consume_st",
 input_enter_rename, NULL,
 input_state_consume_st_table
};


static const struct struct_147 input_state_ground_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, input_c0_dispatch, NULL },
 { 0x19, 0x19, input_c0_dispatch, NULL },
 { 0x1c, 0x1f, input_c0_dispatch, NULL },
 { 0x20, 0x7e, input_print, NULL },
 { 0x7f, 0x7f, NULL, NULL },
 { 0x80, 0xff, input_top_bit_set, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_esc_enter_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, input_c0_dispatch, NULL },
 { 0x19, 0x19, input_c0_dispatch, NULL },
 { 0x1c, 0x1f, input_c0_dispatch, NULL },
 { 0x20, 0x2f, input_intermediate, &var_127 },
 { 0x30, 0x4f, input_esc_dispatch, &var_148 },
 { 0x50, 0x50, NULL, &var_127 },
 { 0x51, 0x57, input_esc_dispatch, &var_148 },
 { 0x58, 0x58, NULL, &var_127 },
 { 0x59, 0x59, input_esc_dispatch, &var_148 },
 { 0x5a, 0x5a, input_esc_dispatch, &var_148 },
 { 0x5b, 0x5b, NULL, &var_127 },
 { 0x5c, 0x5c, input_esc_dispatch, &var_148 },
 { 0x5d, 0x5d, NULL, &var_127 },
 { 0x5e, 0x5e, NULL, &var_127 },
 { 0x5f, 0x5f, NULL, &var_127 },
 { 0x60, 0x6a, input_esc_dispatch, &var_148 },
 { 0x6b, 0x6b, NULL, &var_127 },
 { 0x6c, 0x7e, input_esc_dispatch, &var_148 },
 { 0x7f, 0xff, NULL, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_esc_intermediate_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, input_c0_dispatch, NULL },
 { 0x19, 0x19, input_c0_dispatch, NULL },
 { 0x1c, 0x1f, input_c0_dispatch, NULL },
 { 0x20, 0x2f, input_intermediate, NULL },
 { 0x30, 0x7e, input_esc_dispatch, &var_148 },
 { 0x7f, 0xff, NULL, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_csi_enter_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, input_c0_dispatch, NULL },
 { 0x19, 0x19, input_c0_dispatch, NULL },
 { 0x1c, 0x1f, input_c0_dispatch, NULL },
 { 0x20, 0x2f, input_intermediate, &var_127 },
 { 0x30, 0x39, input_parameter, &var_127 },
 { 0x3a, 0x3a, input_parameter, &var_127 },
 { 0x3b, 0x3b, input_parameter, &var_127 },
 { 0x3c, 0x3f, input_intermediate, &var_127 },
 { 0x40, 0x7e, input_csi_dispatch, &var_148 },
 { 0x7f, 0xff, NULL, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_csi_parameter_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, input_c0_dispatch, NULL },
 { 0x19, 0x19, input_c0_dispatch, NULL },
 { 0x1c, 0x1f, input_c0_dispatch, NULL },
 { 0x20, 0x2f, input_intermediate, &var_127 },
 { 0x30, 0x39, input_parameter, NULL },
 { 0x3a, 0x3a, input_parameter, NULL },
 { 0x3b, 0x3b, input_parameter, NULL },
 { 0x3c, 0x3f, NULL, &var_127 },
 { 0x40, 0x7e, input_csi_dispatch, &var_148 },
 { 0x7f, 0xff, NULL, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_csi_intermediate_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, input_c0_dispatch, NULL },
 { 0x19, 0x19, input_c0_dispatch, NULL },
 { 0x1c, 0x1f, input_c0_dispatch, NULL },
 { 0x20, 0x2f, input_intermediate, NULL },
 { 0x30, 0x3f, NULL, &var_127 },
 { 0x40, 0x7e, input_csi_dispatch, &var_148 },
 { 0x7f, 0xff, NULL, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_csi_ignore_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, input_c0_dispatch, NULL },
 { 0x19, 0x19, input_c0_dispatch, NULL },
 { 0x1c, 0x1f, input_c0_dispatch, NULL },
 { 0x20, 0x3f, NULL, NULL },
 { 0x40, 0x7e, NULL, &var_148 },
 { 0x7f, 0xff, NULL, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_dcs_enter_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, NULL, NULL },
 { 0x19, 0x19, NULL, NULL },
 { 0x1c, 0x1f, NULL, NULL },
 { 0x20, 0x2f, input_intermediate, &var_127 },
 { 0x30, 0x39, input_parameter, &var_127 },
 { 0x3a, 0x3a, NULL, &var_127 },
 { 0x3b, 0x3b, input_parameter, &var_127 },
 { 0x3c, 0x3f, input_intermediate, &var_127 },
 { 0x40, 0x7e, input_input, &var_127 },
 { 0x7f, 0xff, NULL, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_dcs_parameter_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, NULL, NULL },
 { 0x19, 0x19, NULL, NULL },
 { 0x1c, 0x1f, NULL, NULL },
 { 0x20, 0x2f, input_intermediate, &var_127 },
 { 0x30, 0x39, input_parameter, NULL },
 { 0x3a, 0x3a, NULL, &var_127 },
 { 0x3b, 0x3b, input_parameter, NULL },
 { 0x3c, 0x3f, NULL, &var_127 },
 { 0x40, 0x7e, input_input, &var_127 },
 { 0x7f, 0xff, NULL, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_dcs_intermediate_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, NULL, NULL },
 { 0x19, 0x19, NULL, NULL },
 { 0x1c, 0x1f, NULL, NULL },
 { 0x20, 0x2f, input_intermediate, NULL },
 { 0x30, 0x3f, NULL, &var_127 },
 { 0x40, 0x7e, input_input, &var_127 },
 { 0x7f, 0xff, NULL, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_dcs_handler_table[] = {


 { 0x00, 0x1a, input_input, NULL },
 { 0x1b, 0x1b, NULL, &var_127 },
 { 0x1c, 0xff, input_input, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_dcs_escape_table[] = {


 { 0x00, 0x5b, input_input, &var_127 },
 { 0x5c, 0x5c, input_dcs_dispatch, &var_148 },
 { 0x5d, 0xff, input_input, &var_127 },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_dcs_ignore_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, NULL, NULL },
 { 0x19, 0x19, NULL, NULL },
 { 0x1c, 0x1f, NULL, NULL },
 { 0x20, 0xff, NULL, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_osc_string_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x06, NULL, NULL },
 { 0x07, 0x07, input_end_bel, &var_148 },
 { 0x08, 0x17, NULL, NULL },
 { 0x19, 0x19, NULL, NULL },
 { 0x1c, 0x1f, NULL, NULL },
 { 0x20, 0xff, input_input, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_apc_string_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, NULL, NULL },
 { 0x19, 0x19, NULL, NULL },
 { 0x1c, 0x1f, NULL, NULL },
 { 0x20, 0xff, input_input, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_rename_string_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, NULL, NULL },
 { 0x19, 0x19, NULL, NULL },
 { 0x1c, 0x1f, NULL, NULL },
 { 0x20, 0xff, input_input, NULL },

 { -1, -1, NULL, NULL }
};


static const struct struct_147 input_state_consume_st_table[] = {
 { 0x18, 0x18, input_c0_dispatch, &var_148 }, { 0x1a, 0x1a, input_c0_dispatch, &var_148 }, { 0x1b, 0x1b, NULL, &var_127 },

 { 0x00, 0x17, NULL, NULL },
 { 0x19, 0x19, NULL, NULL },
 { 0x1c, 0x1f, NULL, NULL },
 { 0x20, 0xff, NULL, NULL },

 { -1, -1, NULL, NULL }
};


static int
fn_127(const void *var_129, const void *var_129)
{
 const struct struct_174 *ictx = var_129;
 const struct struct_156 *entry = var_129;

 if (ictx->ch != entry->ch)
  return (ictx->ch - entry->ch);
 return (strcmp(ictx->interm_buf, entry->interm));
}





static void
fn_129(__unused var_130 fd, __unused short var_131, void *var_152)
{
 struct struct_174 *ictx = var_152;

 log_debug("%s: %s expired" , __func__, ictx->state->name);
 input_reset(ictx, 0);
}


static void
fn_133(struct struct_174 *ictx)
{
 struct struct_134 var_136 = { .tv_sec = 5, .tv_usec = 0 };

 event_del(&ictx->timer);
 event_add(&ictx->timer, &var_136);
}


static void
fn_136(struct struct_174 *ictx)
{
 memcpy(&ictx->cell.cell, &grid_default_cell, sizeof ictx->cell.cell);
 ictx->cell.set = 0;
 ictx->cell.g0set = ictx->cell.g1set = 0;

 memcpy(&ictx->old_cell, &ictx->cell, sizeof ictx->old_cell);
 ictx->old_cx = 0;
 ictx->old_cy = 0;
}


static void
fn_136(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 struct struct_158 *s = sctx->s;

 memcpy(&ictx->old_cell, &ictx->cell, sizeof ictx->old_cell);
 ictx->old_cx = s->cx;
 ictx->old_cy = s->cy;
 ictx->old_mode = s->mode;
}


static void
fn_138(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;

 memcpy(&ictx->cell, &ictx->old_cell, sizeof ictx->cell);
 if (ictx->old_mode & MODE_ORIGIN)
  screen_write_mode_set(sctx, MODE_ORIGIN);
 else
  screen_write_mode_clear(sctx, MODE_ORIGIN);
 screen_write_cursormove(sctx, ictx->old_cx, ictx->old_cy, 0);
}


struct struct_174 *
fn_139(struct struct_174 *wp, struct struct_156 *bev)
{
 struct struct_174 *ictx;

 ictx = xcalloc(1, sizeof *ictx);
 ictx->wp = wp;
 ictx->event = bev;

 ictx->input_space = 32;
 ictx->input_buf = xmalloc(32);

 ictx->since_ground = evbuffer_new();
 if (ictx->since_ground == NULL)
  fatalx("out of memory");

 evtimer_set(&ictx->timer, input_timer_callback, ictx);

 input_reset(ictx, 0);
 return (ictx);
}


void
fn_140(struct struct_174 *ictx)
{
 u_int var_169;

 for (var_169 = 0; var_169 < ictx->param_list_len; var_169++) {
  if (ictx->param_list[var_169].type == INPUT_STRING)
   free(ictx->param_list[var_169].str);
 }

 event_del(&ictx->timer);

 free(ictx->input_buf);
 evbuffer_free(ictx->since_ground);

 free(ictx);
}


void
fn_142(struct struct_174 *ictx, int var_144)
{
 struct struct_173 *sctx = &ictx->ctx;
 struct struct_174 *wp = ictx->wp;

 input_reset_cell(ictx);

 if (var_144 && wp != NULL) {
  if (TAILQ_EMPTY(&wp->modes))
   screen_write_start_pane(sctx, wp, &wp->base);
  else
   screen_write_start(sctx, &wp->base);
  screen_write_reset(sctx);
  screen_write_stop(sctx);
 }

 input_clear(ictx);

 ictx->last = -1;

 ictx->state = &var_148;
 ictx->flags = 0;
}


struct struct_144 *
fn_144(struct struct_174 *ictx)
{
 return (ictx->since_ground);
}


static void
fn_145(struct struct_174 *ictx, const struct struct_147 *itr)
{
 if (ictx->state->exit != NULL)
  ictx->state->exit(ictx);
 ictx->state = itr->state;
 if (ictx->state->enter != NULL)
  ictx->state->enter(ictx);
}


static void
fn_145(struct struct_174 *ictx, u_char *buf, size_t var_174)
{
 struct struct_173 *sctx = &ictx->ctx;
 const struct struct_147 *state = NULL;
 const struct struct_147 *itr = NULL;
 size_t var_148 = 0;


 while (var_148 < var_174) {
  ictx->ch = buf[var_148++];


  if (ictx->state != state ||
      itr == NULL ||
      ictx->ch < itr->first ||
      ictx->ch > itr->last) {
   itr = ictx->state->transitions;
   while (itr->first != -1 && itr->last != -1) {
    if (ictx->ch >= itr->first &&
        ictx->ch <= itr->last)
     break;
    itr++;
   }
   if (itr->first == -1 || itr->last == -1) {

    fatalx("no transition from state");
   }
  }
  state = ictx->state;

  if (itr->handler != input_print)
   screen_write_collect_end(sctx);





  if (itr->handler != NULL && itr->handler(ictx) != 0)
   continue;


  if (itr->state != NULL)
   input_set_state(ictx, itr);


  if (ictx->state != &var_148)
   evbuffer_add(ictx->since_ground, &ictx->ch, 1);
 }
}


void
fn_148(struct struct_174 *wp)
{
 void *new_data;
 size_t new_size;

 new_data = window_pane_get_new_data(wp, &wp->offset, &new_size);
 input_parse_buffer(wp, new_data, new_size);
 window_pane_update_used_data(wp, &wp->offset, new_size);
}


void
fn_149(struct struct_174 *wp, u_char *buf, size_t var_174)
{
 struct struct_174 *ictx = wp->ictx;
 struct struct_173 *sctx = &ictx->ctx;

 if (var_174 == 0)
  return;

 window_update_activity(wp->window);
 wp->flags |= PANE_CHANGED;


 if (TAILQ_EMPTY(&wp->modes))
  screen_write_start_pane(sctx, wp, &wp->base);
 else
  screen_write_start(sctx, &wp->base);

 log_debug("%s: %%%u %s, %zu bytes: %.*s", __func__, wp->id,
     ictx->state->name, var_174, (int)var_174, buf);

 input_parse(ictx, buf, var_174);
 screen_write_stop(sctx);
}


void
fn_150(struct struct_174 *ictx, struct struct_158 *s,
    screen_write_init_ctx_cb var_152, void *var_152, u_char *buf, size_t var_174)
{
 struct struct_173 *sctx = &ictx->ctx;

 if (var_174 == 0)
  return;

 screen_write_start_callback(sctx, s, var_152, var_152);
 input_parse(ictx, buf, var_174);
 screen_write_stop(sctx);
}


static int
fn_152(struct struct_174 *ictx)
{
 const char *errstr;
 char *ptr, *out;
 struct struct_155 *ip;
 u_int var_169;

 for (var_169 = 0; var_169 < ictx->param_list_len; var_169++) {
  if (ictx->param_list[var_169].type == INPUT_STRING)
   free(ictx->param_list[var_169].str);
 }
 ictx->param_list_len = 0;

 if (ictx->param_len == 0)
  return 0;
 ip = &ictx->param_list[0];

 ptr = ictx->param_buf;
 while ((out = strsep(&ptr, ";")) != NULL) {
  if (*out == '\0')
   ip->type = INPUT_MISSING;
  else {
   if (strchr(out, ':') != NULL) {
    ip->type = INPUT_STRING;
    ip->str = xstrdup(out);
   } else {
    ip->type = INPUT_NUMBER;
    ip->num = strtonum(out, 0, INT_MAX, &errstr);
    if (errstr != NULL)
     return -1;
   }
  }
  ip = &ictx->param_list[++ictx->param_list_len];
  if (ictx->param_list_len == nitems(ictx->param_list))
   return -1;
 }

 for (var_169 = 0; var_169 < ictx->param_list_len; var_169++) {
  ip = &ictx->param_list[var_169];
  if (ip->type == INPUT_MISSING)
   log_debug("parameter %u: missing", var_169);
  else if (ip->type == INPUT_STRING)
   log_debug("parameter %u: string %s", var_169, ip->str);
  else if (ip->type == INPUT_NUMBER)
   log_debug("parameter %u: number %d", var_169, ip->num);
 }

 return 0;
}


static int
fn_152(struct struct_174 *ictx, u_int var_155, int var_155, int var_155)
{
 struct struct_155 *ip;
 int retval;

 if (var_155 >= ictx->param_list_len)
     return (var_155);
 ip = &ictx->param_list[var_155];
 if (ip->type == INPUT_MISSING)
  return (var_155);
 if (ip->type == INPUT_STRING)
  return -1;
 retval = ip->num;
 if (retval < var_155)
  return (var_155);
 return (retval);
}


static void
fn_155(struct struct_174 *ictx, const char *fmt, ...)
{
 struct struct_156 *bev = ictx->event;
 va_list ap;
 char *reply;

 va_start(ap, fmt);
 xvasprintf(&reply, fmt, ap);
 va_end(ap);

 bufferevent_write(bev, reply, strlen(reply));
 free(reply);
}


static void
fn_156(struct struct_174 *ictx)
{
 event_del(&ictx->timer);

 *ictx->interm_buf = '\0';
 ictx->interm_len = 0;

 *ictx->param_buf = '\0';
 ictx->param_len = 0;

 *ictx->input_buf = '\0';
 ictx->input_len = 0;

 ictx->input_end = INPUT_END_ST;

 ictx->flags &= ~0x1;
}


static void
fn_156(struct struct_174 *ictx)
{
 event_del(&ictx->timer);
 evbuffer_drain(ictx->since_ground, EVBUFFER_LENGTH(ictx->since_ground));

 if (ictx->input_space > 32) {
  ictx->input_space = 32;
  ictx->input_buf = xrealloc(ictx->input_buf, 32);
 }
}


static int
fn_156(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 int set;

 ictx->utf8started = 0;

 set = ictx->cell.set == 0 ? ictx->cell.g0set : ictx->cell.g1set;
 if (set == 1)
  ictx->cell.cell.attr |= GRID_ATTR_CHARSET;
 else
  ictx->cell.cell.attr &= ~GRID_ATTR_CHARSET;

 utf8_set(&ictx->cell.cell.data, ictx->ch);
 screen_write_collect_add(sctx, &ictx->cell.cell);
 ictx->last = ictx->ch;

 ictx->cell.cell.attr &= ~GRID_ATTR_CHARSET;

 return 0;
}


static int
fn_156(struct struct_174 *ictx)
{
 if (ictx->interm_len == (sizeof ictx->interm_buf) - 1)
  ictx->flags |= 0x1;
 else {
  ictx->interm_buf[ictx->interm_len++] = ictx->ch;
  ictx->interm_buf[ictx->interm_len] = '\0';
 }

 return 0;
}


static int
fn_156(struct struct_174 *ictx)
{
 if (ictx->param_len == (sizeof ictx->param_buf) - 1)
  ictx->flags |= 0x1;
 else {
  ictx->param_buf[ictx->param_len++] = ictx->ch;
  ictx->param_buf[ictx->param_len] = '\0';
 }

 return 0;
}


static int
fn_156(struct struct_174 *ictx)
{
 size_t available;

 available = ictx->input_space;
 while (ictx->input_len + 1 >= available) {
  available *= 2;
  if (available > 1048576) {
   ictx->flags |= 0x1;
   return 0;
  }
  ictx->input_buf = xrealloc(ictx->input_buf, available);
  ictx->input_space = available;
 }
 ictx->input_buf[ictx->input_len++] = ictx->ch;
 ictx->input_buf[ictx->input_len] = '\0';

 return 0;
}


static int
fn_156(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 struct struct_174 *wp = ictx->wp;
 struct struct_158 *s = sctx->s;

 ictx->utf8started = 0;

 log_debug("%s: '%c'", __func__, ictx->ch);

 switch (ictx->ch) {
 case '\000':
  break;
 case '\007':
  if (wp != NULL)
   alerts_queue(wp->window, WINDOW_BELL);
  break;
 case '\010':
  screen_write_backspace(sctx);
  break;
 case '\011':

  if (s->cx >= screen_size_x(s) - 1)
   break;


  do {
   s->cx++;
   if (bit_test(s->tabs, s->cx))
    break;
  } while (s->cx < screen_size_x(s) - 1);
  break;
 case '\012':
 case '\013':
 case '\014':
  screen_write_linefeed(sctx, 0, ictx->cell.cell.bg);
  if (s->mode & MODE_CRLF)
   screen_write_carriagereturn(sctx);
  break;
 case '\015':
  screen_write_carriagereturn(sctx);
  break;
 case '\016':
  ictx->cell.set = 1;
  break;
 case '\017':
  ictx->cell.set = 0;
  break;
 default:
  log_debug("%s: unknown '%c'", __func__, ictx->ch);
  break;
 }

 ictx->last = -1;
 return 0;
}


static int
fn_156(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 struct struct_174 *wp = ictx->wp;
 struct struct_158 *s = sctx->s;
 struct struct_156 *entry;

 if (ictx->flags & 0x1)
  return 0;
 log_debug("%s: '%c', %s", __func__, ictx->ch, ictx->interm_buf);

 entry = bsearch(ictx, input_esc_table, nitems(input_esc_table),
     sizeof input_esc_table[0], input_table_compare);
 if (entry == NULL) {
  log_debug("%s: unknown '%c'", __func__, ictx->ch);
  return 0;
 }

 switch (entry->type) {
 case INPUT_ESC_RIS:
  if (wp != NULL)
   window_pane_reset_palette(wp);
  input_reset_cell(ictx);
  screen_write_reset(sctx);
  break;
 case INPUT_ESC_IND:
  screen_write_linefeed(sctx, 0, ictx->cell.cell.bg);
  break;
 case INPUT_ESC_NEL:
  screen_write_carriagereturn(sctx);
  screen_write_linefeed(sctx, 0, ictx->cell.cell.bg);
  break;
 case INPUT_ESC_HTS:
  if (s->cx < screen_size_x(s))
   bit_set(s->tabs, s->cx);
  break;
 case INPUT_ESC_RI:
  screen_write_reverseindex(sctx, ictx->cell.cell.bg);
  break;
 case INPUT_ESC_DECKPAM:
  screen_write_mode_set(sctx, MODE_KKEYPAD);
  break;
 case INPUT_ESC_DECKPNM:
  screen_write_mode_clear(sctx, MODE_KKEYPAD);
  break;
 case INPUT_ESC_DECSC:
  input_save_state(ictx);
  break;
 case INPUT_ESC_DECRC:
  input_restore_state(ictx);
  break;
 case INPUT_ESC_DECALN:
  screen_write_alignmenttest(sctx);
  break;
 case INPUT_ESC_SCSG0_ON:
  ictx->cell.g0set = 1;
  break;
 case INPUT_ESC_SCSG0_OFF:
  ictx->cell.g0set = 0;
  break;
 case INPUT_ESC_SCSG1_ON:
  ictx->cell.g1set = 1;
  break;
 case INPUT_ESC_SCSG1_OFF:
  ictx->cell.g1set = 0;
  break;
 case INPUT_ESC_ST:

  break;
 }

 ictx->last = -1;
 return 0;
}


static int
fn_156(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 struct struct_158 *s = sctx->s;
 struct struct_156 *entry;
 int var_169, var_173, m;
 u_int cx, var_158 = ictx->cell.cell.bg;

 if (ictx->flags & 0x1)
  return 0;

 log_debug("%s: '%c' \"%s\" \"%s\"",
     __func__, ictx->ch, ictx->interm_buf, ictx->param_buf);

 if (input_split(ictx) != 0)
  return 0;

 entry = bsearch(ictx, input_csi_table, nitems(input_csi_table),
     sizeof input_csi_table[0], input_table_compare);
 if (entry == NULL) {
  log_debug("%s: unknown '%c'", __func__, ictx->ch);
  return 0;
 }

 switch (entry->type) {
 case INPUT_CSI_CBT:

  cx = s->cx;
  if (cx > screen_size_x(s) - 1)
   cx = screen_size_x(s) - 1;
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 == -1)
   break;
  while (cx > 0 && var_173-- > 0) {
   do
    cx--;
   while (cx > 0 && !bit_test(s->tabs, cx));
  }
  s->cx = cx;
  break;
 case INPUT_CSI_CUB:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1)
   screen_write_cursorleft(sctx, var_173);
  break;
 case INPUT_CSI_CUD:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1)
   screen_write_cursordown(sctx, var_173);
  break;
 case INPUT_CSI_CUF:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1)
   screen_write_cursorright(sctx, var_173);
  break;
 case INPUT_CSI_CUP:
  var_173 = input_get(ictx, 0, 1, 1);
  m = input_get(ictx, 1, 1, 1);
  if (var_173 != -1 && m != -1)
   screen_write_cursormove(sctx, m - 1, var_173 - 1, 1);
  break;
 case INPUT_CSI_MODSET:
  var_173 = input_get(ictx, 0, 0, 0);
  m = input_get(ictx, 1, 0, 0);
  if (var_173 == 0 || (var_173 == 4 && m == 0))
   screen_write_mode_clear(sctx, MODE_KEXTENDED);
  else if (var_173 == 4 && (m == 1 || m == 2))
   screen_write_mode_set(sctx, MODE_KEXTENDED);
  break;
 case INPUT_CSI_MODOFF:
  var_173 = input_get(ictx, 0, 0, 0);
  if (var_173 == 4)
   screen_write_mode_clear(sctx, MODE_KEXTENDED);
  break;
 case INPUT_CSI_WINOPS:
  input_csi_dispatch_winops(ictx);
  break;
 case INPUT_CSI_CUU:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1)
   screen_write_cursorup(sctx, var_173);
  break;
 case INPUT_CSI_CNL:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1) {
   screen_write_carriagereturn(sctx);
   screen_write_cursordown(sctx, var_173);
  }
  break;
 case INPUT_CSI_CPL:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1) {
   screen_write_carriagereturn(sctx);
   screen_write_cursorup(sctx, var_173);
  }
  break;
 case INPUT_CSI_DA:
  switch (input_get(ictx, 0, 0, 0)) {
  case -1:
   break;
  case 0:
   input_reply(ictx, "\033[?1;2c");
   break;
  default:
   log_debug("%s: unknown '%c'", __func__, ictx->ch);
   break;
  }
  break;
 case INPUT_CSI_DA_TWO:
  switch (input_get(ictx, 0, 0, 0)) {
  case -1:
   break;
  case 0:
   input_reply(ictx, "\033[>84;0;0c");
   break;
  default:
   log_debug("%s: unknown '%c'", __func__, ictx->ch);
   break;
  }
  break;
 case INPUT_CSI_ECH:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1)
   screen_write_clearcharacter(sctx, var_173, var_158);
  break;
 case INPUT_CSI_DCH:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1)
   screen_write_deletecharacter(sctx, var_173, var_158);
  break;
 case INPUT_CSI_DECSTBM:
  var_173 = input_get(ictx, 0, 1, 1);
  m = input_get(ictx, 1, 1, screen_size_y(s));
  if (var_173 != -1 && m != -1)
   screen_write_scrollregion(sctx, var_173 - 1, m - 1);
  break;
 case INPUT_CSI_DL:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1)
   screen_write_deleteline(sctx, var_173, var_158);
  break;
 case INPUT_CSI_DSR:
  switch (input_get(ictx, 0, 0, 0)) {
  case -1:
   break;
  case 5:
   input_reply(ictx, "\033[0n");
   break;
  case 6:
   input_reply(ictx, "\033[%u;%uR", s->cy + 1, s->cx + 1);
   break;
  default:
   log_debug("%s: unknown '%c'", __func__, ictx->ch);
   break;
  }
  break;
 case INPUT_CSI_ED:
  switch (input_get(ictx, 0, 0, 0)) {
  case -1:
   break;
  case 0:
   screen_write_clearendofscreen(sctx, var_158);
   break;
  case 1:
   screen_write_clearstartofscreen(sctx, var_158);
   break;
  case 2:
   screen_write_clearscreen(sctx, var_158);
   break;
  case 3:
   if (input_get(ictx, 1, 0, 0) == 0) {




    screen_write_clearhistory(sctx);
   }
   break;
  default:
   log_debug("%s: unknown '%c'", __func__, ictx->ch);
   break;
  }
  break;
 case INPUT_CSI_EL:
  switch (input_get(ictx, 0, 0, 0)) {
  case -1:
   break;
  case 0:
   screen_write_clearendofline(sctx, var_158);
   break;
  case 1:
   screen_write_clearstartofline(sctx, var_158);
   break;
  case 2:
   screen_write_clearline(sctx, var_158);
   break;
  default:
   log_debug("%s: unknown '%c'", __func__, ictx->ch);
   break;
  }
  break;
 case INPUT_CSI_HPA:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1)
   screen_write_cursormove(sctx, var_173 - 1, -1, 1);
  break;
 case INPUT_CSI_ICH:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1)
   screen_write_insertcharacter(sctx, var_173, var_158);
  break;
 case INPUT_CSI_IL:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1)
   screen_write_insertline(sctx, var_173, var_158);
  break;
 case INPUT_CSI_REP:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 == -1)
   break;

  if (ictx->last == -1)
   break;
  ictx->ch = ictx->last;

  for (var_169 = 0; var_169 < var_173; var_169++)
   input_print(ictx);
  break;
 case INPUT_CSI_RCP:
  input_restore_state(ictx);
  break;
 case INPUT_CSI_RM:
  input_csi_dispatch_rm(ictx);
  break;
 case INPUT_CSI_RM_PRIVATE:
  input_csi_dispatch_rm_private(ictx);
  break;
 case INPUT_CSI_SCP:
  input_save_state(ictx);
  break;
 case INPUT_CSI_SGR:
  input_csi_dispatch_sgr(ictx);
  break;
 case INPUT_CSI_SM:
  input_csi_dispatch_sm(ictx);
  break;
 case INPUT_CSI_SM_PRIVATE:
  input_csi_dispatch_sm_private(ictx);
  break;
 case INPUT_CSI_SU:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1)
   screen_write_scrollup(sctx, var_173, var_158);
  break;
 case INPUT_CSI_SD:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1)
   screen_write_scrolldown(sctx, var_173, var_158);
  break;
 case INPUT_CSI_TBC:
  switch (input_get(ictx, 0, 0, 0)) {
  case -1:
   break;
  case 0:
   if (s->cx < screen_size_x(s))
    bit_clear(s->tabs, s->cx);
   break;
  case 3:
   bit_nclear(s->tabs, 0, screen_size_x(s) - 1);
   break;
  default:
   log_debug("%s: unknown '%c'", __func__, ictx->ch);
   break;
  }
  break;
 case INPUT_CSI_VPA:
  var_173 = input_get(ictx, 0, 1, 1);
  if (var_173 != -1)
   screen_write_cursormove(sctx, -1, var_173 - 1, 1);
  break;
 case INPUT_CSI_DECSCUSR:
  var_173 = input_get(ictx, 0, 0, 0);
  if (var_173 != -1)
   screen_set_cursor_style(s, var_173);
  break;
 case INPUT_CSI_XDA:
  var_173 = input_get(ictx, 0, 0, 0);
  if (var_173 == 0)
   input_reply(ictx, "\033P>|tmux %s\033\\", getversion());
  break;

 }

 ictx->last = -1;
 return 0;
}


static void
fn_158(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 u_int var_169;

 for (var_169 = 0; var_169 < ictx->param_list_len; var_169++) {
  switch (input_get(ictx, var_169, 0, -1)) {
  case -1:
   break;
  case 4:
   screen_write_mode_clear(sctx, MODE_INSERT);
   break;
  case 34:
   screen_write_mode_set(sctx, MODE_BLINKING);
   break;
  default:
   log_debug("%s: unknown '%c'", __func__, ictx->ch);
   break;
  }
 }
}


static void
fn_158(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 struct struct_173 *gc = &ictx->cell.cell;
 u_int var_169;

 for (var_169 = 0; var_169 < ictx->param_list_len; var_169++) {
  switch (input_get(ictx, var_169, 0, -1)) {
  case -1:
   break;
  case 1:
   screen_write_mode_clear(sctx, MODE_KCURSOR);
   break;
  case 3:
   screen_write_cursormove(sctx, 0, 0, 1);
   screen_write_clearscreen(sctx, gc->bg);
   break;
  case 6:
   screen_write_mode_clear(sctx, MODE_ORIGIN);
   screen_write_cursormove(sctx, 0, 0, 1);
   break;
  case 7:
   screen_write_mode_clear(sctx, MODE_WRAP);
   break;
  case 12:
   screen_write_mode_clear(sctx, MODE_BLINKING);
   break;
  case 25:
   screen_write_mode_clear(sctx, MODE_CURSOR);
   break;
  case 1000:
  case 1001:
  case 1002:
  case 1003:
   screen_write_mode_clear(sctx, ALL_MOUSE_MODES);
   break;
  case 1004:
   screen_write_mode_clear(sctx, MODE_FOCUSON);
   break;
  case 1005:
   screen_write_mode_clear(sctx, MODE_MOUSE_UTF8);
   break;
  case 1006:
   screen_write_mode_clear(sctx, MODE_MOUSE_SGR);
   break;
  case 47:
  case 1047:
   screen_write_alternateoff(sctx, gc, 0);
   break;
  case 1049:
   screen_write_alternateoff(sctx, gc, 1);
   break;
  case 2004:
   screen_write_mode_clear(sctx, MODE_BRACKETPASTE);
   break;
  default:
   log_debug("%s: unknown '%c'", __func__, ictx->ch);
   break;
  }
 }
}


static void
fn_158(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 u_int var_169;

 for (var_169 = 0; var_169 < ictx->param_list_len; var_169++) {
  switch (input_get(ictx, var_169, 0, -1)) {
  case -1:
   break;
  case 4:
   screen_write_mode_set(sctx, MODE_INSERT);
   break;
  case 34:
   screen_write_mode_clear(sctx, MODE_BLINKING);
   break;
  default:
   log_debug("%s: unknown '%c'", __func__, ictx->ch);
   break;
  }
 }
}


static void
fn_158(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 struct struct_174 *wp = ictx->wp;
 struct struct_173 *gc = &ictx->cell.cell;
 u_int var_169;

 for (var_169 = 0; var_169 < ictx->param_list_len; var_169++) {
  switch (input_get(ictx, var_169, 0, -1)) {
  case -1:
   break;
  case 1:
   screen_write_mode_set(sctx, MODE_KCURSOR);
   break;
  case 3:
   screen_write_cursormove(sctx, 0, 0, 1);
   screen_write_clearscreen(sctx, ictx->cell.cell.bg);
   break;
  case 6:
   screen_write_mode_set(sctx, MODE_ORIGIN);
   screen_write_cursormove(sctx, 0, 0, 1);
   break;
  case 7:
   screen_write_mode_set(sctx, MODE_WRAP);
   break;
  case 12:
   screen_write_mode_set(sctx, MODE_BLINKING);
   break;
  case 25:
   screen_write_mode_set(sctx, MODE_CURSOR);
   break;
  case 1000:
   screen_write_mode_clear(sctx, ALL_MOUSE_MODES);
   screen_write_mode_set(sctx, MODE_MOUSE_STANDARD);
   break;
  case 1002:
   screen_write_mode_clear(sctx, ALL_MOUSE_MODES);
   screen_write_mode_set(sctx, MODE_MOUSE_BUTTON);
   break;
  case 1003:
   screen_write_mode_clear(sctx, ALL_MOUSE_MODES);
   screen_write_mode_set(sctx, MODE_MOUSE_ALL);
   break;
  case 1004:
   if (sctx->s->mode & MODE_FOCUSON)
    break;
   screen_write_mode_set(sctx, MODE_FOCUSON);
   if (wp != NULL)
    wp->flags |= PANE_FOCUSPUSH;
   break;
  case 1005:
   screen_write_mode_set(sctx, MODE_MOUSE_UTF8);
   break;
  case 1006:
   screen_write_mode_set(sctx, MODE_MOUSE_SGR);
   break;
  case 47:
  case 1047:
   screen_write_alternateon(sctx, gc, 0);
   break;
  case 1049:
   screen_write_alternateon(sctx, gc, 1);
   break;
  case 2004:
   screen_write_mode_set(sctx, MODE_BRACKETPASTE);
   break;
  default:
   log_debug("%s: unknown '%c'", __func__, ictx->ch);
   break;
  }
 }
}


static void
fn_158(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 struct struct_158 *s = sctx->s;
 struct struct_174 *wp = ictx->wp;
 u_int var_160 = screen_size_x(s), var_160 = screen_size_y(s);
 int var_173, m;

 m = 0;
 while ((var_173 = input_get(ictx, m, 0, -1)) != -1) {
  switch (var_173) {
  case 1:
  case 2:
  case 5:
  case 6:
  case 7:
  case 11:
  case 13:
  case 14:
  case 19:
  case 20:
  case 21:
  case 24:
   break;
  case 3:
  case 4:
  case 8:
   m++;
   if (input_get(ictx, m, 0, -1) == -1)
    return;

  case 9:
  case 10:
   m++;
   if (input_get(ictx, m, 0, -1) == -1)
    return;
   break;
  case 22:
   m++;
   switch (input_get(ictx, m, 0, -1)) {
   case -1:
    return;
   case 0:
   case 2:
    screen_push_title(sctx->s);
    break;
   }
   break;
  case 23:
   m++;
   switch (input_get(ictx, m, 0, -1)) {
   case -1:
    return;
   case 0:
   case 2:
    screen_pop_title(sctx->s);
    if (wp != NULL) {
     notify_pane("pane-title-changed", wp);
     server_redraw_window_borders(wp->window);
     server_status_window(wp->window);
    }
    break;
   }
   break;
  case 18:
   input_reply(ictx, "\033[8;%u;%ut", var_160, var_160);
   break;
  default:
   log_debug("%s: unknown '%c'", __func__, ictx->ch);
   break;
  }
  m++;
 }
}


static int
fn_160(struct struct_174 *ictx, int var_167, int var_173)
{
 struct struct_173 *gc = &ictx->cell.cell;

 if (var_173 == -1 || var_173 > 255) {
  if (var_167 == 38)
   gc->fg = 8;
  else if (var_167 == 48)
   gc->bg = 8;
 } else {
  if (var_167 == 38)
   gc->fg = var_173 | COLOUR_FLAG_256;
  else if (var_167 == 48)
   gc->bg = var_173 | COLOUR_FLAG_256;
  else if (var_167 == 58)
   gc->us = var_173 | COLOUR_FLAG_256;
 }
 return 1;
}


static void
fn_163(struct struct_174 *ictx, int var_167, u_int *var_169)
{
 int var_173;

 var_173 = input_get(ictx, (*var_169) + 1, 0, -1);
 if (input_csi_dispatch_sgr_256_do(ictx, var_167, var_173))
  (*var_169)++;
}


static int
fn_163(struct struct_174 *ictx, int var_167, int var_173, int var_173,
    int var_173)
{
 struct struct_173 *gc = &ictx->cell.cell;

 if (var_173 == -1 || var_173 > 255)
  return 0;
 if (var_173 == -1 || var_173 > 255)
  return 0;
 if (var_173 == -1 || var_173 > 255)
  return 0;

 if (var_167 == 38)
  gc->fg = colour_join_rgb(var_173, var_173, var_173);
 else if (var_167 == 48)
  gc->bg = colour_join_rgb(var_173, var_173, var_173);
 else if (var_167 == 58)
  gc->us = colour_join_rgb(var_173, var_173, var_173);
 return 1;
}


static void
fn_167(struct struct_174 *ictx, int var_167, u_int *var_169)
{
 int var_173, var_173, var_173;

 var_173 = input_get(ictx, (*var_169) + 1, 0, -1);
 var_173 = input_get(ictx, (*var_169) + 2, 0, -1);
 var_173 = input_get(ictx, (*var_169) + 3, 0, -1);
 if (input_csi_dispatch_sgr_rgb_do(ictx, var_167, var_173, var_173, var_173))
  (*var_169) += 3;
}


static void
fn_167(struct struct_174 *ictx, u_int var_169)
{
 struct struct_173 *gc = &ictx->cell.cell;
 char *s = ictx->param_list[var_169].str, *copy, *ptr, *out;
 int var_174[8];
 u_int var_173;
 const char *errstr;

 for (var_173 = 0; var_173 < nitems(var_174); var_173++)
  var_174[var_173] = -1;
 var_173 = 0;

 ptr = copy = xstrdup(s);
 while ((out = strsep(&ptr, ":")) != NULL) {
  if (*out != '\0') {
   var_174[var_173++] = strtonum(out, 0, INT_MAX, &errstr);
   if (errstr != NULL || var_173 == nitems(var_174)) {
    free(copy);
    return;
   }
  } else
   var_173++;
  log_debug("%s: %u = %d", __func__, var_173 - 1, var_174[var_173 - 1]);
 }
 free(copy);

 if (var_173 == 0)
  return;
 if (var_174[0] == 4) {
  if (var_173 != 2)
   return;
  switch (var_174[1]) {
  case 0:
   gc->attr &= ~GRID_ATTR_ALL_UNDERSCORE;
   break;
  case 1:
   gc->attr &= ~GRID_ATTR_ALL_UNDERSCORE;
   gc->attr |= GRID_ATTR_UNDERSCORE;
   break;
  case 2:
   gc->attr &= ~GRID_ATTR_ALL_UNDERSCORE;
   gc->attr |= GRID_ATTR_UNDERSCORE_2;
   break;
  case 3:
   gc->attr &= ~GRID_ATTR_ALL_UNDERSCORE;
   gc->attr |= GRID_ATTR_UNDERSCORE_3;
   break;
  case 4:
   gc->attr &= ~GRID_ATTR_ALL_UNDERSCORE;
   gc->attr |= GRID_ATTR_UNDERSCORE_4;
   break;
  case 5:
   gc->attr &= ~GRID_ATTR_ALL_UNDERSCORE;
   gc->attr |= GRID_ATTR_UNDERSCORE_5;
   break;
  }
  return;
 }
 if (var_173 < 2 || (var_174[0] != 38 && var_174[0] != 48 && var_174[0] != 58))
  return;
 switch (var_174[1]) {
 case 2:
  if (var_173 < 3)
   break;
  if (var_173 == 5)
   var_169 = 2;
  else
   var_169 = 3;
  if (var_173 < var_169 + 3)
   break;
  input_csi_dispatch_sgr_rgb_do(ictx, var_174[0], var_174[var_169], var_174[var_169 + 1],
      var_174[var_169 + 2]);
  break;
 case 5:
  if (var_173 < 3)
   break;
  input_csi_dispatch_sgr_256_do(ictx, var_174[0], var_174[2]);
  break;
 }
}


static void
fn_169(struct struct_174 *ictx)
{
 struct struct_173 *gc = &ictx->cell.cell;
 u_int var_169;
 int var_173;

 if (ictx->param_list_len == 0) {
  memcpy(gc, &grid_default_cell, sizeof *gc);
  return;
 }

 for (var_169 = 0; var_169 < ictx->param_list_len; var_169++) {
  if (ictx->param_list[var_169].type == INPUT_STRING) {
   input_csi_dispatch_sgr_colon(ictx, var_169);
   continue;
  }
  var_173 = input_get(ictx, var_169, 0, 0);
  if (var_173 == -1)
   continue;

  if (var_173 == 38 || var_173 == 48 || var_173 == 58) {
   var_169++;
   switch (input_get(ictx, var_169, 0, -1)) {
   case 2:
    input_csi_dispatch_sgr_rgb(ictx, var_173, &var_169);
    break;
   case 5:
    input_csi_dispatch_sgr_256(ictx, var_173, &var_169);
    break;
   }
   continue;
  }

  switch (var_173) {
  case 0:
   memcpy(gc, &grid_default_cell, sizeof *gc);
   break;
  case 1:
   gc->attr |= GRID_ATTR_BRIGHT;
   break;
  case 2:
   gc->attr |= GRID_ATTR_DIM;
   break;
  case 3:
   gc->attr |= GRID_ATTR_ITALICS;
   break;
  case 4:
   gc->attr &= ~GRID_ATTR_ALL_UNDERSCORE;
   gc->attr |= GRID_ATTR_UNDERSCORE;
   break;
  case 5:
   gc->attr |= GRID_ATTR_BLINK;
   break;
  case 7:
   gc->attr |= GRID_ATTR_REVERSE;
   break;
  case 8:
   gc->attr |= GRID_ATTR_HIDDEN;
   break;
  case 9:
   gc->attr |= GRID_ATTR_STRIKETHROUGH;
   break;
  case 22:
   gc->attr &= ~(GRID_ATTR_BRIGHT|GRID_ATTR_DIM);
   break;
  case 23:
   gc->attr &= ~GRID_ATTR_ITALICS;
   break;
  case 24:
   gc->attr &= ~GRID_ATTR_ALL_UNDERSCORE;
   break;
  case 25:
   gc->attr &= ~GRID_ATTR_BLINK;
   break;
  case 27:
   gc->attr &= ~GRID_ATTR_REVERSE;
   break;
  case 28:
   gc->attr &= ~GRID_ATTR_HIDDEN;
   break;
  case 29:
   gc->attr &= ~GRID_ATTR_STRIKETHROUGH;
   break;
  case 30:
  case 31:
  case 32:
  case 33:
  case 34:
  case 35:
  case 36:
  case 37:
   gc->fg = var_173 - 30;
   break;
  case 39:
   gc->fg = 8;
   break;
  case 40:
  case 41:
  case 42:
  case 43:
  case 44:
  case 45:
  case 46:
  case 47:
   gc->bg = var_173 - 40;
   break;
  case 49:
   gc->bg = 8;
   break;
  case 53:
   gc->attr |= GRID_ATTR_OVERLINE;
   break;
  case 55:
   gc->attr &= ~GRID_ATTR_OVERLINE;
   break;
  case 59:
   gc->us = 0;
   break;
  case 90:
  case 91:
  case 92:
  case 93:
  case 94:
  case 95:
  case 96:
  case 97:
   gc->fg = var_173;
   break;
  case 100:
  case 101:
  case 102:
  case 103:
  case 104:
  case 105:
  case 106:
  case 107:
   gc->bg = var_173 - 10;
   break;
  }
 }
}


static int
fn_169(struct struct_174 *ictx)
{
 log_debug("%s", __func__);

 ictx->input_end = INPUT_END_BEL;

 return 0;
}


static void
fn_169(struct struct_174 *ictx)
{
 log_debug("%s", __func__);

 input_clear(ictx);
 input_start_timer(ictx);
 ictx->last = -1;
}


static int
fn_169(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 u_char *buf = ictx->input_buf;
 size_t var_174 = ictx->input_len;
 const char prefix[] = "tmux;";
 const u_int var_170 = (sizeof prefix) - 1;

 if (ictx->flags & 0x1)
  return 0;

 log_debug("%s: \"%s\"", __func__, buf);

 if (var_174 >= var_170 && strncmp(buf, prefix, var_170) == 0)
  screen_write_rawstring(sctx, buf + var_170, var_174 - var_170);

 return 0;
}


static void
fn_170(struct struct_174 *ictx)
{
 log_debug("%s", __func__);

 input_clear(ictx);
 input_start_timer(ictx);
 ictx->last = -1;
}


static void
fn_170(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 struct struct_174 *wp = ictx->wp;
 u_char *var_174 = ictx->input_buf;
 u_int option;

 if (ictx->flags & 0x1)
  return;
 if (ictx->input_len < 1 || *var_174 < '0' || *var_174 > '9')
  return;

 log_debug("%s: \"%s\" (end %s)", __func__, var_174,
     ictx->input_end == INPUT_END_ST ? "ST" : "BEL");

 option = 0;
 while (*var_174 >= '0' && *var_174 <= '9')
  option = option * 10 + *var_174++ - '0';
 if (*var_174 == ';')
  var_174++;

 switch (option) {
 case 0:
 case 2:
  if (screen_set_title(sctx->s, var_174) && wp != NULL) {
   notify_pane("pane-title-changed", wp);
   server_redraw_window_borders(wp->window);
   server_status_window(wp->window);
  }
  break;
 case 4:
  input_osc_4(ictx, var_174);
  break;
 case 7:
  if (utf8_isvalid(var_174)) {
   screen_set_path(sctx->s, var_174);
   if (wp != NULL) {
    server_redraw_window_borders(wp->window);
    server_status_window(wp->window);
   }
  }
  break;
 case 10:
  input_osc_10(ictx, var_174);
  break;
 case 11:
  input_osc_11(ictx, var_174);
  break;
 case 12:
  if (utf8_isvalid(var_174) && *var_174 != '?')
   screen_set_cursor_colour(sctx->s, var_174);
  break;
 case 52:
  input_osc_52(ictx, var_174);
  break;
 case 104:
  input_osc_104(ictx, var_174);
  break;
 case 112:
  if (*var_174 == '\0')
   screen_set_cursor_colour(sctx->s, "");
  break;
 default:
  log_debug("%s: unknown '%u'", __func__, option);
  break;
 }
}


static void
fn_170(struct struct_174 *ictx)
{
 log_debug("%s", __func__);

 input_clear(ictx);
 input_start_timer(ictx);
 ictx->last = -1;
}


static void
fn_170(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 struct struct_174 *wp = ictx->wp;

 if (ictx->flags & 0x1)
  return;
 log_debug("%s: \"%s\"", __func__, ictx->input_buf);

 if (screen_set_title(sctx->s, ictx->input_buf) && wp != NULL) {
  notify_pane("pane-title-changed", wp);
  server_redraw_window_borders(wp->window);
  server_status_window(wp->window);
 }
}


static void
fn_170(struct struct_174 *ictx)
{
 log_debug("%s", __func__);

 input_clear(ictx);
 input_start_timer(ictx);
 ictx->last = -1;
}


static void
fn_170(struct struct_174 *ictx)
{
 struct struct_174 *wp = ictx->wp;
 struct struct_170 *o;

 if (wp == NULL)
  return;
 if (ictx->flags & 0x1)
  return;
 if (!options_get_number(ictx->wp->options, "allow-rename"))
  return;
 log_debug("%s: \"%s\"", __func__, ictx->input_buf);

 if (!utf8_isvalid(ictx->input_buf))
  return;

 if (ictx->input_len == 0) {
  o = options_get_only(wp->window->options, "automatic-rename");
  if (o != NULL)
   options_remove_or_default(o, -1, NULL);
  return;
 }
 window_set_name(wp->window, ictx->input_buf);
 options_set_number(wp->window->options, "automatic-rename", 0);
 server_redraw_window_borders(wp->window);
 server_status_window(wp->window);
}


static int
fn_171(struct struct_174 *ictx)
{
 struct struct_173 *sctx = &ictx->ctx;
 struct struct_171 *ud = &ictx->utf8data;

 ictx->last = -1;

 if (!ictx->utf8started) {
  if (utf8_open(ud, ictx->ch) != UTF8_MORE)
   return 0;
  ictx->utf8started = 1;
  return 0;
 }

 switch (utf8_append(ud, ictx->ch)) {
 case UTF8_MORE:
  return 0;
 case UTF8_ERROR:
  ictx->utf8started = 0;
  return 0;
 case UTF8_DONE:
  break;
 }
 ictx->utf8started = 0;

 log_debug("%s %hhu '%*s' (width %hhu)", __func__, ud->size,
     (int)ud->size, ud->data, ud->width);

 utf8_copy(&ictx->cell.cell.data, ud);
 screen_write_collect_add(sctx, &ictx->cell.cell);

 return 0;
}


static int
fn_171(const char *var_174, u_int *var_173, u_int *var_173, u_int *var_173)
{
 u_int rsize, gsize, bsize;
 const char *cp, *s = var_174;

 if (sscanf(var_174, "rgb:%x/%x/%x", var_173, var_173, var_173) != 3)
  return 0;
 var_174 += 4;

 cp = strchr(var_174, '/');
 rsize = cp - var_174;
 if (rsize == 1)
  (*var_173) = (*var_173) | ((*var_173) << 4);
 else if (rsize == 3)
  (*var_173) >>= 4;
 else if (rsize == 4)
  (*var_173) >>= 8;
 else if (rsize != 2)
  return 0;

 var_174 = cp + 1;
 cp = strchr(var_174, '/');
 gsize = cp - var_174;
 if (gsize == 1)
  (*var_173) = (*var_173) | ((*var_173) << 4);
 else if (gsize == 3)
  (*var_173) >>= 4;
 else if (gsize == 4)
  (*var_173) >>= 8;
 else if (gsize != 2)
  return 0;

 bsize = strlen(cp + 1);
 if (bsize == 1)
  (*var_173) = (*var_173) | ((*var_173) << 4);
 else if (bsize == 3)
  (*var_173) >>= 4;
 else if (bsize == 4)
  (*var_173) >>= 8;
 else if (bsize != 2)
  return 0;

 log_debug("%s: %s = %02x%02x%02x", __func__, s, *var_173, *var_173, *var_173);
 return 1;
}


static void
fn_172(struct struct_174 *ictx, u_int var_173, int var_173)
{
    u_char var_173, var_173, var_173;
    const char *end;

    if (var_173 == 8 || (~var_173 & COLOUR_FLAG_RGB))
     return;
    colour_split_rgb(var_173, &var_173, &var_173, &var_173);

    if (ictx->input_end == INPUT_END_BEL)
     end = "\007";
    else
     end = "\033\\";
    input_reply(ictx, "\033]%u;rgb:%02hhx/%02hhx/%02hhx%s", var_173, var_173, var_173, var_173, end);
}


static void
fn_173(struct struct_174 *ictx, const char *var_174)
{
 struct struct_174 *wp = ictx->wp;
 char *copy, *s, *next = NULL;
 long idx;
 u_int var_173, var_173, var_173;

 if (wp == NULL)
  return;

 copy = s = xstrdup(var_174);
 while (s != NULL && *s != '\0') {
  idx = strtol(s, &next, 10);
  if (*next++ != ';')
   goto bad;
  if (idx < 0 || idx >= 0x100)
   goto bad;

  s = strsep(&next, ";");
  if (!input_osc_parse_colour(s, &var_173, &var_173, &var_173)) {
   s = next;
   continue;
  }

  window_pane_set_palette(wp, idx, colour_join_rgb(var_173, var_173, var_173));
  s = next;
 }

 free(copy);
 return;

bad:
 log_debug("bad OSC 4: %s", var_174);
 free(copy);
}


static void
fn_173(struct struct_174 *ictx, const char *var_174)
{
 struct struct_174 *wp = ictx->wp;
 struct struct_173 defaults;
 u_int var_173, var_173, var_173;

 if (wp == NULL)
  return;

 if (strcmp(var_174, "?") == 0) {
  tty_default_colours(&defaults, wp);
  input_osc_colour_reply(ictx, 10, defaults.fg);
  return;
 }

 if (!input_osc_parse_colour(var_174, &var_173, &var_173, &var_173))
  goto bad;
 wp->fg = colour_join_rgb(var_173, var_173, var_173);
 wp->flags |= (PANE_REDRAW|PANE_STYLECHANGED);

 return;

bad:
 log_debug("bad OSC 10: %s", var_174);
}


static void
fn_173(struct struct_174 *ictx, const char *var_174)
{
 struct struct_174 *wp = ictx->wp;
 struct struct_173 defaults;
 u_int var_173, var_173, var_173;

 if (wp == NULL)
  return;

 if (strcmp(var_174, "?") == 0) {
  tty_default_colours(&defaults, wp);
  input_osc_colour_reply(ictx, 11, defaults.bg);
  return;
 }

 if (!input_osc_parse_colour(var_174, &var_173, &var_173, &var_173))
     goto bad;
 wp->bg = colour_join_rgb(var_173, var_173, var_173);
 wp->flags |= (PANE_REDRAW|PANE_STYLECHANGED);

 return;

bad:
 log_debug("bad OSC 11: %s", var_174);
}


static void
fn_173(struct struct_174 *ictx, const char *var_174)
{
 struct struct_174 *wp = ictx->wp;
 char *end;
 const char *buf;
 size_t var_174;
 u_char *out;
 int outlen, state;
 struct struct_173 ctx;
 struct struct_173 *pb;

 if (wp == NULL)
  return;
 state = options_get_number(global_options, "set-clipboard");
 if (state != 2)
  return;

 if ((end = strchr(var_174, ';')) == NULL)
  return;
 end++;
 if (*end == '\0')
  return;
 log_debug("%s: %s", __func__, end);

 if (strcmp(end, "?") == 0) {
  if ((pb = paste_get_top(NULL)) != NULL) {
   buf = paste_buffer_data(pb, &var_174);
   outlen = 4 * ((var_174 + 2) / 3) + 1;
   out = xmalloc(outlen);
   if ((outlen = b64_ntop(buf, var_174, out, outlen)) == -1) {
    free(out);
    return;
   }
  } else {
   outlen = 0;
   out = NULL;
  }
  bufferevent_write(ictx->event, "\033]52;;", 6);
  if (outlen != 0)
   bufferevent_write(ictx->event, out, outlen);
  if (ictx->input_end == INPUT_END_BEL)
   bufferevent_write(ictx->event, "\007", 1);
  else
   bufferevent_write(ictx->event, "\033\\", 2);
  free(out);
  return;
 }

 var_174 = (strlen(end) / 4) * 3;
 if (var_174 == 0)
  return;

 out = xmalloc(var_174);
 if ((outlen = b64_pton(end, out, var_174)) == -1) {
  free(out);
  return;
 }

 screen_write_start_pane(&ctx, wp, NULL);
 screen_write_setselection(&ctx, out, outlen);
 screen_write_stop(&ctx);
 notify_pane("pane-set-clipboard", wp);

 paste_add(NULL, out, outlen);
}


static void
fn_174(struct struct_174 *ictx, const char *var_174)
{
 struct struct_174 *wp = ictx->wp;
 char *copy, *s;
 long idx;

 if (wp == NULL)
  return;

 if (*var_174 == '\0') {
  window_pane_reset_palette(wp);
  return;
 }

 copy = s = xstrdup(var_174);
 while (*s != '\0') {
  idx = strtol(s, &s, 10);
  if (*s != '\0' && *s != ';')
   goto bad;
  if (idx < 0 || idx >= 0x100)
   goto bad;

  window_pane_unset_palette(wp, idx);
  if (*s == ';')
   s++;
 }
 free(copy);
 return;

bad:
 log_debug("bad OSC 104: %s", var_174);
 free(copy);
}
