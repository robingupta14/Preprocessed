







JsLex *var_79;

JsLex *fn_1(JsLex *var_65) {
  JsLex *old = var_79;
  var_79 = var_65;
  return old;
}

void fn_3(JslCharPos *pos) {
  jsvStringIteratorFree(&pos->it);
}

JslCharPos fn_4(JslCharPos *pos) {
  JslCharPos var_49;
  var_49.it = jsvStringIteratorClone(&pos->it);
  var_49.currCh = pos->currCh;
  return var_49;
}


static ALWAYS_INLINE char fn_6() {
  return (char)(var_79->it.ptr ? READ_FLASH_UINT8(&var_79->it.ptr[var_79->it.charIdx]) : 0);
}


static void NO_INLINE fn_7() {
  var_79->currCh = jslNextCh();





  var_79->it.charIdx++;
  if (var_79->it.charIdx >= var_79->it.charsInVar) {
    var_79->it.charIdx -= var_79->it.charsInVar;
    if (var_79->it.var && jsvGetLastChild(var_79->it.var)) {
      var_79->it.var = _jsvGetAddressOf(jsvGetLastChild(var_79->it.var));
      var_79->it.ptr = &var_79->it.var->varData.str[0];
      var_79->it.varIndex += var_79->it.charsInVar;
      var_79->it.charsInVar = jsvGetCharactersInVar(var_79->it.var);
    } else {
      var_79->it.var = 0;
      var_79->it.ptr = 0;
      var_79->it.varIndex += var_79->it.charsInVar;
      var_79->it.charsInVar = 0;
    }
  }
}

static ALWAYS_INLINE void fn_8(char var_79) {


  if (var_79->tokenl < JSLEX_MAX_TOKEN_LENGTH-1) {
    var_79->token[var_79->tokenl++] = var_79;
  }
}

static bool fn_10(const char *var_49, int var_13) {
  int i;
  for (i=var_13;i<var_79->tokenl;i++) {
    if (var_79->token[i]!=var_49[i]) return false;


  }
  return var_49[var_79->tokenl] == 0;
}

typedef enum {
  enum_13,
  enum_14,
  enum_15,
  enum_16,

  enum_17,
  enum_18,
  enum_19,
  enum_20,
  enum_21,
  enum_22,
  enum_23,
  enum_24,
  enum_25,
  enum_26,
  enum_27,
  enum_28,
} PACKED_FLAGS jslJumpTableEnum;



const jslJumpTableEnum jslJumpTable[92] = {

    JSLJT_EXCLAMATION,
    JSLJT_STRING,
    JSLJT_SINGLECHAR,
    JSLJT_ID,
    JSLJT_PERCENT,
    JSLJT_AND,
    JSLJT_STRING,
    JSLJT_SINGLECHAR,
    JSLJT_SINGLECHAR,
    JSLJT_STAR,
    JSLJT_PLUS,
    JSLJT_SINGLECHAR,
    JSLJT_MINUS,
    JSLJT_NUMBER,
    JSLJT_FORWARDSLASH,

    JSLJT_NUMBER,
    JSLJT_NUMBER,
    JSLJT_NUMBER,
    JSLJT_NUMBER,
    JSLJT_NUMBER,
    JSLJT_NUMBER,
    JSLJT_NUMBER,
    JSLJT_NUMBER,
    JSLJT_NUMBER,
    JSLJT_NUMBER,
    JSLJT_SINGLECHAR,
    JSLJT_SINGLECHAR,
    JSLJT_LESSTHAN,
    JSLJT_EQUAL,
    JSLJT_GREATERTHAN,
    JSLJT_SINGLECHAR,

    JSLJT_SINGLECHAR,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_SINGLECHAR,
    JSLJT_SINGLECHAR,
    JSLJT_SINGLECHAR,
    JSLJT_TOPHAT,
    JSLJT_ID,

    JSLJT_STRING,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_ID,
    JSLJT_SINGLECHAR,
    JSLJT_OR,



};


static ALWAYS_INLINE void fn_29() {
  var_79->tk = (unsigned char)var_79->currCh;
  jslGetNextCh();
}

static void fn_30() {
  char var_35 = var_79->currCh;
  var_79->tokenValue = jsvNewFromEmptyString();
  if (!var_79->tokenValue) {
    var_79->tk = var_62;
    return;
  }
  JsvStringIterator var_79;
  jsvStringIteratorNew(&var_79, var_79->tokenValue, 0);

  jslGetNextCh();
  while (var_79->currCh && var_79->currCh!=var_35) {
    if (var_79->currCh == '\\') {
      jslGetNextCh();
      char var_79 = var_79->currCh;
      switch (var_79->currCh) {
      case 'n' : var_79 = 0x0A; jslGetNextCh(); break;
      case 'b' : var_79 = 0x08; jslGetNextCh(); break;
      case 'f' : var_79 = 0x0C; jslGetNextCh(); break;
      case 'r' : var_79 = 0x0D; jslGetNextCh(); break;
      case 't' : var_79 = 0x09; jslGetNextCh(); break;
      case 'v' : var_79 = 0x0B; jslGetNextCh(); break;
      case 'u' :
      case 'x' : {
        char buf[5] = "0x??";
        if (var_79->currCh == 'u') {


          jslGetNextCh();
          jslGetNextCh();
        }
        jslGetNextCh();
        buf[2] = var_79->currCh; jslGetNextCh();
        buf[3] = var_79->currCh; jslGetNextCh();
        var_79 = (char)stringToInt(buf);
      } break;
      default:
        if (var_79->currCh>='0' && var_79->currCh<='7') {

          char buf[5] = "0";
          buf[1] = var_79->currCh;
          int var_49=2;
          jslGetNextCh();
          if (var_79->currCh>='0' && var_79->currCh<='7') {
            buf[var_49++] = var_79->currCh; jslGetNextCh();
            if (var_79->currCh>='0' && var_79->currCh<='7') {
              buf[var_49++] = var_79->currCh; jslGetNextCh();
            }
          }
          buf[var_49]=0;
          var_79 = (char)stringToInt(buf);
        } else {

          jslGetNextCh();
        }
        break;
      }
      jslTokenAppendChar(var_79);
      jsvStringIteratorAppend(&var_79, var_79);
    } else if (var_79->currCh=='\n' && var_35!='`') {


      break;
    } else {
      jslTokenAppendChar(var_79->currCh);
      jsvStringIteratorAppend(&var_79, var_79->currCh);
      jslGetNextCh();
    }
  }
  jsvStringIteratorFree(&var_79);
  if (var_35=='`')
    var_79->tk = LEX_TEMPLATE_LITERAL;
  else var_79->tk = LEX_STR;

  if (var_79->currCh!=var_35)
    var_79->tk++;
  jslGetNextCh();
}

static void fn_35() {
  var_79->tokenValue = jsvNewFromEmptyString();
  if (!var_79->tokenValue) {
    var_79->tk = var_62;
    return;
  }
  JsvStringIterator var_79;
  jsvStringIteratorNew(&var_79, var_79->tokenValue, 0);
  jsvStringIteratorAppend(&var_79, '/');

  jslGetNextCh();
  while (var_79->currCh && var_79->currCh!='/') {
    if (var_79->currCh == '\\') {
      jsvStringIteratorAppend(&var_79, var_79->currCh);
      jslGetNextCh();
    } else if (var_79->currCh=='\n') {


      break;
    }
    jsvStringIteratorAppend(&var_79, var_79->currCh);
    jslGetNextCh();
  }
  var_79->tk = LEX_REGEX;
  if (var_79->currCh!='/') {
    var_79->tk++;
  } else {
    jsvStringIteratorAppend(&var_79, '/');
    jslGetNextCh();

    while (var_79->currCh=='g' ||
        var_79->currCh=='i' ||
        var_79->currCh=='m' ||
        var_79->currCh=='y' ||
        var_79->currCh=='u') {
      jslTokenAppendChar(var_79->currCh);
      jsvStringIteratorAppend(&var_79, var_79->currCh);
      jslGetNextCh();
    }
  }
  jsvStringIteratorFree(&var_79);
}

void fn_36() {
  jslGetNextToken_start:

  while (isWhitespace(var_79->currCh))
    jslGetNextCh();

  if (var_79->currCh=='/') {

    if (jslNextCh()=='/') {
      while (var_79->currCh && var_79->currCh!='\n') jslGetNextCh();
      jslGetNextCh();
      goto jslGetNextToken_start;
    }

    if (jslNextCh()=='*') {
      jslGetNextCh();
      jslGetNextCh();
      while (var_79->currCh && !(var_79->currCh=='*' && jslNextCh()=='/'))
        jslGetNextCh();
      if (!var_79->currCh) {
        var_79->tk = LEX_UNFINISHED_COMMENT;
        return;

      }
      jslGetNextCh();
      jslGetNextCh();
      goto jslGetNextToken_start;
    }
  }
  int var_39 = var_79->tk;
  var_79->tk = var_62;
  var_79->tokenl = 0;
  if (var_79->tokenValue) {
    jsvUnLock(var_79->tokenValue);
    var_79->tokenValue = 0;
  }

  var_79->tokenLastStart = jsvStringIteratorGetIndex(&var_79->tokenStart.it) - 1;


  var_79->tokenStart.it = var_79->it;
  var_79->tokenStart.currCh = var_79->currCh;

  if (((unsigned char)var_79->currCh) < 33 ||
      ((unsigned char)var_79->currCh) > 124) {

    jslSingleChar();
  } else {
    switch(jslJumpTable[((unsigned char)var_79->currCh) - 33]) {
    case JSLJT_ID: {
      while (isAlpha(var_79->currCh) || isNumeric(var_79->currCh) || var_79->currCh=='$') {
        jslTokenAppendChar(var_79->currCh);
        jslGetNextCh();
      }
      var_79->tk = LEX_ID;

      switch (var_79->token[0]) {
      case 'b': if (jslIsToken("break", 1)) var_79->tk = LEX_R_BREAK;
      break;
      case 'c': if (jslIsToken("case", 1)) var_79->tk = LEX_R_CASE;
      else if (jslIsToken("catch", 1)) var_79->tk = LEX_R_CATCH;
      else if (jslIsToken("class", 1)) var_79->tk = LEX_R_CLASS;
      else if (jslIsToken("const", 1)) var_79->tk = LEX_R_CONST;
      else if (jslIsToken("continue", 1)) var_79->tk = LEX_R_CONTINUE;
      break;
      case 'd': if (jslIsToken("default", 1)) var_79->tk = LEX_R_DEFAULT;
      else if (jslIsToken("delete", 1)) var_79->tk = LEX_R_DELETE;
      else if (jslIsToken("do", 1)) var_79->tk = LEX_R_DO;
      else if (jslIsToken("debugger", 1)) var_79->tk = LEX_R_DEBUGGER;
      break;
      case 'e': if (jslIsToken("else", 1)) var_79->tk = LEX_R_ELSE;
      else if (jslIsToken("extends", 1)) var_79->tk = LEX_R_EXTENDS;
      break;
      case 'f': if (jslIsToken("false", 1)) var_79->tk = LEX_R_FALSE;
      else if (jslIsToken("finally", 1)) var_79->tk = LEX_R_FINALLY;
      else if (jslIsToken("for", 1)) var_79->tk = LEX_R_FOR;
      else if (jslIsToken("function", 1)) var_79->tk = LEX_R_FUNCTION;
      break;
      case 'i': if (jslIsToken("if", 1)) var_79->tk = LEX_R_IF;
      else if (jslIsToken("in", 1)) var_79->tk = LEX_R_IN;
      else if (jslIsToken("instanceof", 1)) var_79->tk = LEX_R_INSTANCEOF;
      break;
      case 'l': if (jslIsToken("let", 1)) var_79->tk = LEX_R_LET;
      break;
      case 'n': if (jslIsToken("new", 1)) var_79->tk = LEX_R_NEW;
      else if (jslIsToken("null", 1)) var_79->tk = LEX_R_NULL;
      break;
      case 'r': if (jslIsToken("return", 1)) var_79->tk = LEX_R_RETURN;
      break;
      case 's': if (jslIsToken("static", 1)) var_79->tk = LEX_R_STATIC;
      else if (jslIsToken("super", 1)) var_79->tk = LEX_R_SUPER;
      else if (jslIsToken("switch", 1)) var_79->tk = LEX_R_SWITCH;
      break;
      case 't': if (jslIsToken("this", 1)) var_79->tk = LEX_R_THIS;
      else if (jslIsToken("throw", 1)) var_79->tk = LEX_R_THROW;
      else if (jslIsToken("true", 1)) var_79->tk = LEX_R_TRUE;
      else if (jslIsToken("try", 1)) var_79->tk = LEX_R_TRY;
      else if (jslIsToken("typeof", 1)) var_79->tk = LEX_R_TYPEOF;
      break;
      case 'u': if (jslIsToken("undefined", 1)) var_79->tk = LEX_R_UNDEFINED;
      break;
      case 'w': if (jslIsToken("while", 1)) var_79->tk = LEX_R_WHILE;
      break;
      case 'v': if (jslIsToken("var", 1)) var_79->tk = LEX_R_VAR;
      else if (jslIsToken("void", 1)) var_79->tk = LEX_R_VOID;
      break;
      default: break;
      } break;
      case JSLJT_NUMBER: {

        bool var_39 = true;
        if (var_79->currCh=='.') {
          jslGetNextCh();
          if (isNumeric(var_79->currCh)) {

            var_79->tk = LEX_FLOAT;
            jslTokenAppendChar('.');
          } else {

            var_79->tk = '.';
            break;
          }
        } else {
          if (var_79->currCh=='0') {
            jslTokenAppendChar(var_79->currCh);
            jslGetNextCh();
            if ((var_79->currCh=='x' || var_79->currCh=='X') ||
                (var_79->currCh=='b' || var_79->currCh=='B') ||
                (var_79->currCh=='o' || var_79->currCh=='O')) {
              var_39 = false;
              jslTokenAppendChar(var_79->currCh); jslGetNextCh();
            }
          }
          var_79->tk = LEX_INT;
          while (isNumeric(var_79->currCh) || (!var_39 && isHexadecimal(var_79->currCh))) {
            jslTokenAppendChar(var_79->currCh);
            jslGetNextCh();
          }
          if (var_39 && var_79->currCh=='.') {
            var_79->tk = LEX_FLOAT;
            jslTokenAppendChar('.');
            jslGetNextCh();
          }
        }

        if (var_79->tk == LEX_FLOAT) {
          while (isNumeric(var_79->currCh)) {
            jslTokenAppendChar(var_79->currCh);
            jslGetNextCh();
          }
        }

        if (var_39 && (var_79->currCh=='e'||var_79->currCh=='E')) {
          var_79->tk = LEX_FLOAT;
          jslTokenAppendChar(var_79->currCh); jslGetNextCh();
          if (var_79->currCh=='-' || var_79->currCh=='+') { jslTokenAppendChar(var_79->currCh); jslGetNextCh(); }
          while (isNumeric(var_79->currCh)) {
            jslTokenAppendChar(var_79->currCh); jslGetNextCh();
          }
        }
      } break;
      case JSLJT_STRING: jslLexString(); break;
      case JSLJT_EXCLAMATION: jslSingleChar();
      if (var_79->currCh=='=') {
        var_79->tk = LEX_NEQUAL;
        jslGetNextCh();
        if (var_79->currCh=='=') {
          var_79->tk = LEX_NTYPEEQUAL;
          jslGetNextCh();
        }
      } break;
      case JSLJT_PLUS: jslSingleChar();
      if (var_79->currCh=='=') {
        var_79->tk = LEX_PLUSEQUAL;
        jslGetNextCh();
      } else if (var_79->currCh=='+') {
        var_79->tk = LEX_PLUSPLUS;
        jslGetNextCh();
      } break;
      case JSLJT_MINUS: jslSingleChar();
      if (var_79->currCh=='=') {
        var_79->tk = LEX_MINUSEQUAL;
        jslGetNextCh();
      } else if (var_79->currCh=='-') {
        var_79->tk = LEX_MINUSMINUS;
        jslGetNextCh();
      } break;
      case JSLJT_AND: jslSingleChar();
      if (var_79->currCh=='=') {
        var_79->tk = LEX_ANDEQUAL;
        jslGetNextCh();
      } else if (var_79->currCh=='&') {
        var_79->tk = LEX_ANDAND;
        jslGetNextCh();
      } break;
      case JSLJT_OR: jslSingleChar();
      if (var_79->currCh=='=') {
        var_79->tk = LEX_OREQUAL;
        jslGetNextCh();
      } else if (var_79->currCh=='|') {
        var_79->tk = LEX_OROR;
        jslGetNextCh();
      } break;
      case JSLJT_TOPHAT: jslSingleChar();
      if (var_79->currCh=='=') {
        var_79->tk = LEX_XOREQUAL;
        jslGetNextCh();
      } break;
      case JSLJT_STAR: jslSingleChar();
      if (var_79->currCh=='=') {
        var_79->tk = LEX_MULEQUAL;
        jslGetNextCh();
      } break;
      case JSLJT_FORWARDSLASH:

      if (var_39==var_62 ||
          var_39=='!' ||
          var_39=='%' ||
          var_39=='&' ||
          var_39=='*' ||
          var_39=='+' ||
          var_39=='-' ||
          var_39=='/' ||
          var_39=='<' ||
          var_39=='=' ||
          var_39=='>' ||
          var_39=='?' ||
          (var_39>=_LEX_OPERATOR_START && var_39<=_LEX_OPERATOR_END) ||
          (var_39>=_LEX_R_LIST_START && var_39<=_LEX_R_LIST_END) ||
          var_39==LEX_R_CASE ||
          var_39==LEX_R_NEW ||
          var_39=='[' ||
          var_39=='{' ||
          var_39=='}' ||
          var_39=='(' ||
          var_39==',' ||
          var_39==';' ||
          var_39==':' ||
          var_39==LEX_ARROW_FUNCTION) {


        jslLexRegex();
      } else {
        jslSingleChar();
        if (var_79->currCh=='=') {
          var_79->tk = LEX_DIVEQUAL;
          jslGetNextCh();
        }
      } break;
      case JSLJT_PERCENT: jslSingleChar();
      if (var_79->currCh=='=') {
        var_79->tk = LEX_MODEQUAL;
        jslGetNextCh();
      } break;
      case JSLJT_EQUAL: jslSingleChar();
      if (var_79->currCh=='=') {
        var_79->tk = LEX_EQUAL;
        jslGetNextCh();
        if (var_79->currCh=='=') {
          var_79->tk = LEX_TYPEEQUAL;
          jslGetNextCh();
        }
      } else if (var_79->currCh=='>') {
        var_79->tk = LEX_ARROW_FUNCTION;
        jslGetNextCh();
      } break;
      case JSLJT_LESSTHAN: jslSingleChar();
      if (var_79->currCh=='=') {
        var_79->tk = LEX_LEQUAL;
        jslGetNextCh();
      } else if (var_79->currCh=='<') {
        var_79->tk = LEX_LSHIFT;
        jslGetNextCh();
        if (var_79->currCh=='=') {
          var_79->tk = LEX_LSHIFTEQUAL;
          jslGetNextCh();
        }
      } break;
      case JSLJT_GREATERTHAN: jslSingleChar();
      if (var_79->currCh=='=') {
        var_79->tk = LEX_GEQUAL;
        jslGetNextCh();
      } else if (var_79->currCh=='>') {
        var_79->tk = LEX_RSHIFT;
        jslGetNextCh();
        if (var_79->currCh=='=') {
          var_79->tk = LEX_RSHIFTEQUAL;
          jslGetNextCh();
        } else if (var_79->currCh=='>') {
          jslGetNextCh();
          if (var_79->currCh=='=') {
            var_79->tk = LEX_RSHIFTUNSIGNEDEQUAL;
            jslGetNextCh();
          } else {
            var_79->tk = LEX_RSHIFTUNSIGNED;
          }
        }
      } break;

      case JSLJT_SINGLECHAR: jslSingleChar(); break;
      default: assert(0);break;
    }
    }
  }
}

static ALWAYS_INLINE void fn_39() {

  jslGetNextCh();
  jslGetNextToken();
}

void fn_40(JsVar *var) {
  var_79->sourceVar = jsvLockAgain(var);

  var_79->tk = 0;
  var_79->tokenStart.it.var = 0;
  var_79->tokenStart.currCh = 0;
  var_79->tokenLastStart = 0;
  var_79->tokenl = 0;
  var_79->tokenValue = 0;
  var_79->lineNumberOffset = 0;

  jsvStringIteratorNew(&var_79->it, var_79->sourceVar, 0);
  jsvUnLock(var_79->it.var);
  jslPreload();
}

void fn_41() {
  var_79->tk = var_62;
  if (var_79->it.var) jsvLockAgain(var_79->it.var);
  jsvStringIteratorFree(&var_79->it);
  if (var_79->tokenValue) {
    jsvUnLock(var_79->tokenValue);
    var_79->tokenValue = 0;
  }
  jsvUnLock(var_79->sourceVar);
  var_79->tokenStart.it.var = 0;
  var_79->tokenStart.currCh = 0;
}

void fn_42(size_t var_45) {
  if (var_79->it.var) jsvLockAgain(var_79->it.var);
  jsvStringIteratorFree(&var_79->it);
  jsvStringIteratorNew(&var_79->it, var_79->sourceVar, var_45);
  jsvUnLock(var_79->it.var);
  var_79->tokenStart.it.var = 0;
  var_79->tokenStart.currCh = 0;
  jslPreload();
}

void fn_44(JslCharPos *var_45) {
  if (var_79->it.var) jsvLockAgain(var_79->it.var);
  jsvStringIteratorFree(&var_79->it);
  var_79->it = jsvStringIteratorClone(&var_45->it);
  jsvUnLock(var_79->it.var);
  var_79->currCh = var_45->currCh;
  var_79->tokenStart.it.var = 0;
  var_79->tokenStart.currCh = 0;
  jslGetNextToken();
}

void fn_45() {
  jslSeekTo(0);
}






void fn_46(unsigned char var_79, char *str, size_t var_79) {
  if (var_79 >= LEX_TOKEN_START) {
    jslTokenAsString(var_79, str, var_79);
  } else {
    str[0] = (char)var_79;
    str[1] = 0;
  }
}

void fn_48(int var_49, char *str, size_t var_79) {
  assert(var_79>28);

  if (var_49>32 && var_49<128) {
    assert(var_79>=4);
    str[0] = '\'';
    str[1] = (char)var_49;
    str[2] = '\'';
    str[3] = 0;
    return;
  }


  switch (var_49) {
  case var_62 : strcpy(str, "EOF"); return;
  case LEX_ID : strcpy(str, "ID"); return;
  case LEX_INT : strcpy(str, "INT"); return;
  case LEX_FLOAT : strcpy(str, "FLOAT"); return;
  case LEX_STR : strcpy(str, "STRING"); return;
  case LEX_UNFINISHED_STR : strcpy(str, "UNFINISHED STRING"); return;
  case LEX_TEMPLATE_LITERAL : strcpy(str, "TEMPLATE LITERAL"); return;
  case LEX_UNFINISHED_TEMPLATE_LITERAL : strcpy(str, "UNFINISHED TEMPLATE LITERAL"); return;
  case LEX_REGEX : strcpy(str, "REGEX"); return;
  case LEX_UNFINISHED_REGEX : strcpy(str, "UNFINISHED REGEX"); return;
  case LEX_UNFINISHED_COMMENT : strcpy(str, "UNFINISHED COMMENT"); return;
  }
  if (var_49>=_LEX_OPERATOR_START && var_49<_LEX_R_LIST_END) {
    const char tokenNames[] =
                                 "==\0"
                                 "===\0"
                                 "!=\0"
                                 "!==\0"
                                 "<=\0"
                                 "<<\0"
                                 "<<=\0"
                                 ">=\0"
                                 ">>\0"
                                 ">>>\0"
                                 ">>=\0"
                                      ">>>=\0"
                                 "+=\0"
                                 "-=\0"
                                 "++\0"
                                 "--\0"
                                 "*=\0"
                                 "/=\0"
                                 "%=\0"
                                 "&=\0"
                                 "&&\0"
                                 "|=\0"
                                 "||\0"
                                 "^=\0"
                                 "=>\0"


                              "if\0"
                              "else\0"
                              "do\0"
                              "while\0"
                              "for\0"
                              "return\0"
                              "continue\0"
                              "function\0"
                              "return\0"
                              "var\0"
                              "let\0"
                              "const\0"
                              "this\0"
                              "throw\0"
                              "try\0"
                              "catch\0"
                              "finally\0"
                              "true\0"
                              "false\0"
                              "null\0"
                              "undefined\0"
                              "new\0"
                              "in\0"
                              "instanceof\0"
                              "switch\0"
                              "case\0"
                              "default\0"
                              "delete\0"
                              "typeof\0"
                              "void\0"
                              "debugger\0"
                              "class\0"
                              "extends\0"
                              "super\0"
                              "static\0"
        ;
    unsigned int var_49 = 0;
    int var_49 = var_49-_LEX_OPERATOR_START;
    while (var_49>0 && var_49<sizeof(tokenNames)) {
      while (tokenNames[var_49] && var_49<sizeof(tokenNames)) var_49++;
      var_49++;
      var_49--;
    }
    assert(var_49==0);
    strcpy(str, &tokenNames[var_49]);
    return;
  }

  espruino_snprintf(str, var_79, "?[%d]", var_49);
}

void fn_49(char *str, size_t var_79) {
  if (var_79->tk == LEX_ID) {
    espruino_snprintf(str, var_79, "ID:%s", jslGetTokenValueAsString());
  } else if (var_79->tk == LEX_STR) {
    espruino_snprintf(str, var_79, "String:'%s'", jslGetTokenValueAsString());
  } else
    jslTokenAsString(var_79->tk, str, var_79);
}

char *fn_50() {
  assert(var_79->tokenl < JSLEX_MAX_TOKEN_LENGTH);
  var_79->token[var_79->tokenl] = 0;
  return var_79->token;
}

int fn_51() {
  return var_79->tokenl;
}

JsVar *fn_52() {
  if (var_79->tokenValue) {
    return jsvLockAgain(var_79->tokenValue);
  } else {
    assert(var_79->tokenl < JSLEX_MAX_TOKEN_LENGTH);
    var_79->token[var_79->tokenl] = 0;
    return jsvNewFromString(var_79->token);
  }
}

bool fn_53() {
  return var_79->tk == LEX_ID ||
         (var_79->tk >= _LEX_R_LIST_START && var_79->tk <= _LEX_R_LIST_END);
}


static void fn_54(int var_58) {
  char gotStr[30];
  char expStr[30];
  jslGetTokenString(gotStr, sizeof(gotStr));
  jslTokenAsString(var_58, expStr, sizeof(expStr));

  size_t var_57 = var_79->tokenLastStart;
  var_79->tokenLastStart = jsvStringIteratorGetIndex(&var_79->tokenStart.it)-1;
  jsExceptionHere(JSET_SYNTAXERROR, "Got %s expected %s", gotStr, expStr);
  var_79->tokenLastStart = var_57;

  jslGetNextToken();
}


bool fn_57(int var_58) {
  if (var_79->tk != var_58) {
    jslMatchError(var_58);
    return false;
  }
  jslGetNextToken();
  return true;
}

JsVar *fn_58(JslCharPos *charFrom, size_t var_64) {


  JsLex *oldLex = var_79;
  JsLex newLex;
  var_79 = &newLex;

  size_t var_62 = 0;
  jslInit(oldLex->sourceVar);
  jslSeekToP(charFrom);
  int var_62 = var_62;
  while (var_79->tk!=var_62 && jsvStringIteratorGetIndex(&var_79->it)<=var_64+1) {
    if ((var_79->tk==LEX_ID || var_79->tk==LEX_FLOAT || var_79->tk==LEX_INT) &&
        ( var_62==LEX_ID || var_62==LEX_FLOAT || var_62==LEX_INT)) {
      jsExceptionHere(JSET_SYNTAXERROR, "ID/number following ID/number isn't valid JS");
      var_62 = 0;
      break;
    }
    if (var_79->tk==LEX_ID ||
        var_79->tk==LEX_INT ||
        var_79->tk==LEX_FLOAT ||
        var_79->tk==LEX_STR ||
        var_79->tk==LEX_TEMPLATE_LITERAL) {
      var_62 += jsvStringIteratorGetIndex(&var_79->it)-jsvStringIteratorGetIndex(&var_79->tokenStart.it);
    } else {
      var_62++;
    }
    var_62 = var_79->tk;
    jslGetNextToken();
  }


  JsVar *var = jsvNewStringOfLength((unsigned int)var_62, NULL);
  if (var) {
    JsvStringIterator dstit;
    jsvStringIteratorNew(&dstit, var, 0);

    jslSeekToP(charFrom);
    while (var_79->tk!=var_62 && jsvStringIteratorGetIndex(&var_79->it)<=var_64+1) {
      if (var_79->tk==LEX_ID ||
          var_79->tk==LEX_INT ||
          var_79->tk==LEX_FLOAT ||
          var_79->tk==LEX_STR ||
          var_79->tk==LEX_TEMPLATE_LITERAL) {
        jsvStringIteratorSetCharAndNext(&dstit, var_79->tokenStart.currCh);
        JsvStringIterator var_79 = jsvStringIteratorClone(&var_79->tokenStart.it);
        while (jsvStringIteratorGetIndex(&var_79)+1 < jsvStringIteratorGetIndex(&var_79->it)) {
          jsvStringIteratorSetCharAndNext(&dstit, jsvStringIteratorGetChar(&var_79));
          jsvStringIteratorNext(&var_79);
        }
        jsvStringIteratorFree(&var_79);
      } else {
        jsvStringIteratorSetCharAndNext(&dstit, (char)var_79->tk);
      }
      var_62 = var_79->tk;
      jslGetNextToken();
    }
    jsvStringIteratorFree(&dstit);
  }

  jslKill();
  var_79 = oldLex;

  return var;
}

JsVar *fn_62(JslCharPos *charFrom, size_t var_64) {

  size_t var_65 = var_64 + 1 - jsvStringIteratorGetIndex(&charFrom->it);
  assert(var_65>0);

  JsVar *var = 0;
  if (var_65 > JSV_FLAT_STRING_BREAK_EVEN) {
    var = jsvNewFlatStringOfLength((unsigned int)var_65);
    if (var) {

      char *flatPtr = jsvGetFlatStringPointer(var);
      *(flatPtr++) = charFrom->currCh;
      JsvStringIterator var_79 = jsvStringIteratorClone(&charFrom->it);
      while (jsvStringIteratorHasChar(&var_79) && (--var_65>0)) {
        *(flatPtr++) = jsvStringIteratorGetChar(&var_79);
        jsvStringIteratorNext(&var_79);
      }
      jsvStringIteratorFree(&var_79);
      return var;
    }
  }

  var = jsvNewFromEmptyString();
  if (!var) {
    return 0;
  }


  JsVar *block = jsvLockAgain(var);
  block->varData.str[0] = charFrom->currCh;
  size_t var_65 = 1;

  size_t var_65 = var_65;

  JsvStringIterator var_79 = jsvStringIteratorClone(&charFrom->it);
  while (jsvStringIteratorHasChar(&var_79) && (--var_65>0)) {
    char var_79 = jsvStringIteratorGetChar(&var_79);
    if (var_65 >= jsvGetMaxCharactersInVar(block)) {
      jsvSetCharactersInVar(block, var_65);
      JsVar *next = jsvNewWithFlags(JSV_STRING_EXT_0);
      if (!next) break;

      jsvSetLastChild(block, jsvGetRef(next));
      jsvUnLock(block);
      block = next;
      var_65=0;
    }
    block->varData.str[var_65++] = var_79;
    jsvStringIteratorNext(&var_79);
  }
  jsvSetCharactersInVar(block, var_65);
  jsvUnLock(block);

  assert((var_65 == jsvGetStringLength(var)) || (jsErrorFlags&JSERR_MEMORY) || !jsvStringIteratorHasChar(&var_79));
  jsvStringIteratorFree(&var_79);


  return var;
}


unsigned int fn_65() {
  size_t var_76;
  size_t var_79;
  jsvGetLineAndCol(var_79->sourceVar, jsvStringIteratorGetIndex(&var_79->tokenStart.it)-1, &var_76, &var_79);
  return (unsigned int)var_76;
}


bool fn_68(unsigned char var_79, unsigned char var_79) {
  return (var_79>=_LEX_R_LIST_START || var_79>=_LEX_R_LIST_START) &&
         (var_79>=_LEX_R_LIST_START || isAlpha((char)var_79) || isNumeric((char)var_79)) &&
         (var_79>=_LEX_R_LIST_START || isAlpha((char)var_79) || isNumeric((char)var_79));
}

void fn_70(vcbprintf_callback var_79, void *user_data, size_t var_78) {
  size_t var_76,var_79;
  jsvGetLineAndCol(var_79->sourceVar, var_78, &var_76, &var_79);
  if (var_79->lineNumberOffset)
    var_76 += (size_t)var_79->lineNumberOffset - 1;
  cbprintf(var_79, user_data, "line %d col %d\n", var_76, var_79);
}

void fn_73(vcbprintf_callback var_79, void *user_data, size_t var_78, char *prefix) {
  size_t var_76 = 1,var_79 = 1;
  jsvGetLineAndCol(var_79->sourceVar, var_78, &var_76, &var_79);
  size_t var_79 = jsvGetIndexFromLineAndCol(var_79->sourceVar, var_76, 1);
  size_t var_79 = jsvGetCharsOnLine(var_79->sourceVar, var_76);
  size_t var_79 = 0;

  if (prefix) {
    var_79(prefix, user_data);
    var_79 = strlen(prefix);
  }

  if (var_79>60 && var_78-var_79>30) {
    cbprintf(var_79, user_data, "...");
    size_t var_78 = var_78-30 - var_79;
    var_79 += 3+var_78;
    if (var_78<=var_79)
      var_79 -= var_78;
    else
      var_79 = 0;
    var_79 -= var_78;
  }


  int var_79 = 0;
  JsvStringIterator var_79;
  jsvStringIteratorNew(&var_79, var_79->sourceVar, var_79);
  unsigned char var_79 = 0;
  while (jsvStringIteratorHasChar(&var_79) && var_79<60) {
    unsigned char var_79 = (unsigned char)jsvStringIteratorGetChar(&var_79);
    if (var_79 == '\n') break;
    if (jslNeedSpaceBetween(var_79, var_79)) {
      var_79++;
      var_79(" ", user_data);
    }
    char buf[32];
    jslFunctionCharAsString(var_79, buf, sizeof(buf));
    size_t var_79 = strlen(buf);
    var_79 += var_79-1;
    var_79(buf, user_data);
    var_79++;
    var_79 = var_79;
    jsvStringIteratorNext(&var_79);
  }
  jsvStringIteratorFree(&var_79);

  if (var_79 > 60)
    var_79("...", user_data);
  var_79("\n", user_data);
  var_79 += var_79;
  while (var_79-- > 1) var_79(" ", user_data);
  var_79("^\n", user_data);
}
