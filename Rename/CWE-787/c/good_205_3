







enum enumtype_141 { enum_1, enum_2, enum_3, enum_4, enum_5, enum_6, enum_7, enum_8, enum_9 };




static const char * ops[] = { "~", "!=", "==", "<=", "<", ">=", ">", "&", NULL };

enum { enum_10, enum_11, enum_12, enum_13, enum_14, enum_15, enum_16, enum_17, enum_18, enum_19, enum_20, enum_21, enum_22, enum_23, enum_24, enum_25, enum_26, };




static char *err_text[] = { "No error", "Invalid operator", "Too many '('", "Too few '('", "Missing matching quote", "Operand too long", "Expecting string field", "Expecting numeric field", "Illegal operation for field type", "Field not found", "Illegal integer value", "Couldn't find or set field in one of a subsystem's events", "Too many terms in predicate expression", "Meaningless filter expression", "Only 'ip' field is supported for function trace", "Invalid value (did you forget quotes)?", "No filter found", };


static bool fn_27(const char *var_160)
{
 switch (var_160[1]) {
 case '=':
 case '~':
  return false;
 }
 return true;
}







struct struct_161 {
 int target;
 int when_to_branch;
 struct struct_149 *pred;
};

static void fn_31(struct struct_161 *prog, int var_50, int var_50)
{
 int t, s;

 t = prog[var_50].target;
 s = prog[t].target;
 prog[t].when_to_branch = var_50;
 prog[t].target = var_50;
 prog[var_50].target = s;
}

struct struct_177 {
 int lasterr;
 int lasterr_pos;
};

static void fn_35(struct struct_177 *pe, int var_179, int var_150)
{
 pe->lasterr = var_179;
 pe->lasterr_pos = var_150;
}

typedef int (*parse_pred_fn)(const char *var_160, void *var_148, int var_150,
        struct struct_177 *pe,
        struct struct_149 **pred);

enum {
 enum_39 = 1,
 enum_40 = 2,
 enum_41 = 4,
};

static struct struct_161 *
fn_42(const char *var_160, int var_161, int var_161,
  parse_pred_fn var_161, void *var_148,
  struct struct_177 *pe)
{
 struct struct_161 *prog_stack;
 struct struct_161 *prog;
 const char *ptr = var_160;
 char *inverts = NULL;
 int *op_stack;
 int *top;
 int var_50 = 0;
 int var_161 = -ENOMEM;
 int var_150;
 int var_50 = 0;
 int var_160;

 var_161 += 2;

 op_stack = kmalloc_array(var_161, sizeof(*op_stack), GFP_KERNEL);
 if (!op_stack)
  return ERR_PTR(-ENOMEM);
 prog_stack = kmalloc_array(var_161, sizeof(*prog_stack), GFP_KERNEL);
 if (!prog_stack) {
  parse_error(pe, -ENOMEM, 0);
  goto out_free;
 }
 inverts = kmalloc_array(var_161, sizeof(*inverts), GFP_KERNEL);
 if (!inverts) {
  parse_error(pe, -ENOMEM, 0);
  goto out_free;
 }

 top = op_stack;
 prog = prog_stack;
 *top = 0;


 while (*ptr) {
  const char *next = ptr++;

  if (isspace(*next))
   continue;

  switch (*next) {
  case '(':
   if (top - op_stack > var_161)
    return ERR_PTR(-EINVAL);
   *(++top) = var_50;
   continue;
  case '!':
   if (!is_not(next))
    break;
   var_50 = !var_50;
   continue;
  }

  if (var_50 >= var_161) {
   parse_error(pe, FILT_ERR_TOO_MANY_PREDS, next - var_160);
   goto out_free;
  }

  inverts[var_50] = var_50;
  prog[var_50].target = var_50-1;

  var_150 = var_161(next, var_148, ptr - var_160, pe, &prog[var_50].pred);
  if (var_150 < 0) {
   var_161 = var_150;
   goto out_free;
  }
  ptr = next + var_150;

  var_50++;

  var_161 = -1;
  while 1 {
   next = ptr++;
   if (isspace(*next))
    continue;

   switch (*next) {
   case ')':
   case '\0':
    break;
   case '&':
   case '|':
    if (next[1] == next[0]) {
     ptr++;
     break;
    }
   default:
    parse_error(pe, FILT_ERR_TOO_MANY_PREDS,
         next - var_160);
    goto out_free;
   }

   var_50 = *top & INVERT;

   if (*top & PROCESS_AND) {
    update_preds(prog, var_50 - 1, var_50);
    *top &= ~PROCESS_AND;
   }
   if (*next == '&') {
    *top |= PROCESS_AND;
    break;
   }
   if (*top & PROCESS_OR) {
    update_preds(prog, var_50 - 1, !var_50);
    *top &= ~PROCESS_OR;
   }
   if (*next == '|') {
    *top |= PROCESS_OR;
    break;
   }
   if (!*next)
    goto out;

   if (top == op_stack) {
    var_161 = -1;

    parse_error(pe, FILT_ERR_TOO_MANY_CLOSE, ptr - var_160);
    goto out_free;
   }
   top--;
  }
 }
 out:
 if (top != op_stack) {

  parse_error(pe, FILT_ERR_TOO_MANY_OPEN, ptr - var_160);
  goto out_free;
 }

 if (!var_50) {

  var_161 = -EINVAL;
  parse_error(pe, FILT_ERR_NO_FILTER, ptr - var_160);
  goto out_free;
 }

 prog[var_50].pred = NULL;
 prog[var_50].target = 1;
 prog[var_50+1].pred = NULL;
 prog[var_50+1].target = 0;
 prog[var_50-1].target = var_50;
 prog[var_50-1].when_to_branch = false;


 for (var_160 = var_50-1 ; var_160--; ) {
  int var_50 = prog[var_160].target;
  if (prog[var_160].when_to_branch == prog[var_50].when_to_branch)
   prog[var_160].target = prog[var_50].target;
 }


 for (var_160 = 0; var_160 < var_50; var_160++) {
  var_50 = inverts[var_160] ^ prog[var_160].when_to_branch;
  prog[var_160].when_to_branch = var_50;

  if (WARN_ON(prog[var_160].target <= var_160)) {
   var_161 = -EINVAL;
   goto out_free;
  }
 }

 return prog;
out_free:
 kfree(op_stack);
 kfree(prog_stack);
 kfree(inverts);
 return ERR_PTR(var_161);
}

static int fn_50(struct struct_149 *pred, void *event) { s64 *addr = (s64 *)(event + pred->offset); s64 var_150 = (s64)pred->val; return *addr < var_150; } static int fn_52(struct struct_149 *pred, void *event) { s64 *addr = (s64 *)(event + pred->offset); s64 var_150 = (s64)pred->val; return *addr <= var_150; } static int fn_53(struct struct_149 *pred, void *event) { s64 *addr = (s64 *)(event + pred->offset); s64 var_150 = (s64)pred->val; return *addr > var_150; } static int fn_54(struct struct_149 *pred, void *event) { s64 *addr = (s64 *)(event + pred->offset); s64 var_150 = (s64)pred->val; return *addr >= var_150; } static int fn_55(struct struct_149 *pred, void *event) { s64 *addr = (s64 *)(event + pred->offset); s64 var_150 = (s64)pred->val; return !!(*addr & var_150); } static const filter_pred_fn_t pred_funcs_s64[] = { filter_pred_LE_s64, filter_pred_LT_s64, filter_pred_GE_s64, filter_pred_GT_s64, filter_pred_BAND_s64, };;
static int fn_56(struct struct_149 *pred, void *event) { u64 *addr = (u64 *)(event + pred->offset); u64 var_150 = (u64)pred->val; return *addr < var_150; } static int fn_57(struct struct_149 *pred, void *event) { u64 *addr = (u64 *)(event + pred->offset); u64 var_150 = (u64)pred->val; return *addr <= var_150; } static int fn_58(struct struct_149 *pred, void *event) { u64 *addr = (u64 *)(event + pred->offset); u64 var_150 = (u64)pred->val; return *addr > var_150; } static int fn_59(struct struct_149 *pred, void *event) { u64 *addr = (u64 *)(event + pred->offset); u64 var_150 = (u64)pred->val; return *addr >= var_150; } static int fn_60(struct struct_149 *pred, void *event) { u64 *addr = (u64 *)(event + pred->offset); u64 var_150 = (u64)pred->val; return !!(*addr & var_150); } static const filter_pred_fn_t pred_funcs_u64[] = { filter_pred_LE_u64, filter_pred_LT_u64, filter_pred_GE_u64, filter_pred_GT_u64, filter_pred_BAND_u64, };;
static int fn_61(struct struct_149 *pred, void *event) { s32 *addr = (s32 *)(event + pred->offset); s32 var_150 = (s32)pred->val; return *addr < var_150; } static int fn_62(struct struct_149 *pred, void *event) { s32 *addr = (s32 *)(event + pred->offset); s32 var_150 = (s32)pred->val; return *addr <= var_150; } static int fn_63(struct struct_149 *pred, void *event) { s32 *addr = (s32 *)(event + pred->offset); s32 var_150 = (s32)pred->val; return *addr > var_150; } static int fn_64(struct struct_149 *pred, void *event) { s32 *addr = (s32 *)(event + pred->offset); s32 var_150 = (s32)pred->val; return *addr >= var_150; } static int fn_65(struct struct_149 *pred, void *event) { s32 *addr = (s32 *)(event + pred->offset); s32 var_150 = (s32)pred->val; return !!(*addr & var_150); } static const filter_pred_fn_t pred_funcs_s32[] = { filter_pred_LE_s32, filter_pred_LT_s32, filter_pred_GE_s32, filter_pred_GT_s32, filter_pred_BAND_s32, };;
static int fn_66(struct struct_149 *pred, void *event) { u32 *addr = (u32 *)(event + pred->offset); u32 var_150 = (u32)pred->val; return *addr < var_150; } static int fn_67(struct struct_149 *pred, void *event) { u32 *addr = (u32 *)(event + pred->offset); u32 var_150 = (u32)pred->val; return *addr <= var_150; } static int fn_68(struct struct_149 *pred, void *event) { u32 *addr = (u32 *)(event + pred->offset); u32 var_150 = (u32)pred->val; return *addr > var_150; } static int fn_69(struct struct_149 *pred, void *event) { u32 *addr = (u32 *)(event + pred->offset); u32 var_150 = (u32)pred->val; return *addr >= var_150; } static int fn_70(struct struct_149 *pred, void *event) { u32 *addr = (u32 *)(event + pred->offset); u32 var_150 = (u32)pred->val; return !!(*addr & var_150); } static const filter_pred_fn_t pred_funcs_u32[] = { filter_pred_LE_u32, filter_pred_LT_u32, filter_pred_GE_u32, filter_pred_GT_u32, filter_pred_BAND_u32, };;
static int fn_71(struct struct_149 *pred, void *event) { s16 *addr = (s16 *)(event + pred->offset); s16 var_150 = (s16)pred->val; return *addr < var_150; } static int fn_72(struct struct_149 *pred, void *event) { s16 *addr = (s16 *)(event + pred->offset); s16 var_150 = (s16)pred->val; return *addr <= var_150; } static int fn_73(struct struct_149 *pred, void *event) { s16 *addr = (s16 *)(event + pred->offset); s16 var_150 = (s16)pred->val; return *addr > var_150; } static int fn_74(struct struct_149 *pred, void *event) { s16 *addr = (s16 *)(event + pred->offset); s16 var_150 = (s16)pred->val; return *addr >= var_150; } static int fn_75(struct struct_149 *pred, void *event) { s16 *addr = (s16 *)(event + pred->offset); s16 var_150 = (s16)pred->val; return !!(*addr & var_150); } static const filter_pred_fn_t pred_funcs_s16[] = { filter_pred_LE_s16, filter_pred_LT_s16, filter_pred_GE_s16, filter_pred_GT_s16, filter_pred_BAND_s16, };;
static int fn_76(struct struct_149 *pred, void *event) { u16 *addr = (u16 *)(event + pred->offset); u16 var_150 = (u16)pred->val; return *addr < var_150; } static int fn_77(struct struct_149 *pred, void *event) { u16 *addr = (u16 *)(event + pred->offset); u16 var_150 = (u16)pred->val; return *addr <= var_150; } static int fn_78(struct struct_149 *pred, void *event) { u16 *addr = (u16 *)(event + pred->offset); u16 var_150 = (u16)pred->val; return *addr > var_150; } static int fn_79(struct struct_149 *pred, void *event) { u16 *addr = (u16 *)(event + pred->offset); u16 var_150 = (u16)pred->val; return *addr >= var_150; } static int fn_80(struct struct_149 *pred, void *event) { u16 *addr = (u16 *)(event + pred->offset); u16 var_150 = (u16)pred->val; return !!(*addr & var_150); } static const filter_pred_fn_t pred_funcs_u16[] = { filter_pred_LE_u16, filter_pred_LT_u16, filter_pred_GE_u16, filter_pred_GT_u16, filter_pred_BAND_u16, };;
static int fn_81(struct struct_149 *pred, void *event) { s8 *addr = (s8 *)(event + pred->offset); s8 var_150 = (s8)pred->val; return *addr < var_150; } static int fn_82(struct struct_149 *pred, void *event) { s8 *addr = (s8 *)(event + pred->offset); s8 var_150 = (s8)pred->val; return *addr <= var_150; } static int fn_83(struct struct_149 *pred, void *event) { s8 *addr = (s8 *)(event + pred->offset); s8 var_150 = (s8)pred->val; return *addr > var_150; } static int fn_84(struct struct_149 *pred, void *event) { s8 *addr = (s8 *)(event + pred->offset); s8 var_150 = (s8)pred->val; return *addr >= var_150; } static int fn_85(struct struct_149 *pred, void *event) { s8 *addr = (s8 *)(event + pred->offset); s8 var_150 = (s8)pred->val; return !!(*addr & var_150); } static const filter_pred_fn_t pred_funcs_s8[] = { filter_pred_LE_s8, filter_pred_LT_s8, filter_pred_GE_s8, filter_pred_GT_s8, filter_pred_BAND_s8, };;
static int fn_86(struct struct_149 *pred, void *event) { u8 *addr = (u8 *)(event + pred->offset); u8 var_150 = (u8)pred->val; return *addr < var_150; } static int fn_87(struct struct_149 *pred, void *event) { u8 *addr = (u8 *)(event + pred->offset); u8 var_150 = (u8)pred->val; return *addr <= var_150; } static int fn_88(struct struct_149 *pred, void *event) { u8 *addr = (u8 *)(event + pred->offset); u8 var_150 = (u8)pred->val; return *addr > var_150; } static int fn_89(struct struct_149 *pred, void *event) { u8 *addr = (u8 *)(event + pred->offset); u8 var_150 = (u8)pred->val; return *addr >= var_150; } static int fn_90(struct struct_149 *pred, void *event) { u8 *addr = (u8 *)(event + pred->offset); u8 var_150 = (u8)pred->val; return !!(*addr & var_150); } static const filter_pred_fn_t pred_funcs_u8[] = { filter_pred_LE_u8, filter_pred_LT_u8, filter_pred_GE_u8, filter_pred_GT_u8, filter_pred_BAND_u8, };;

static int fn_91(struct struct_149 *pred, void *event) { u64 *addr = (u64 *)(event + pred->offset); u64 var_150 = (u64)pred->val; int var_120; var_120 = (var_150 == *addr) ^ pred->not; return var_120; };
static int fn_93(struct struct_149 *pred, void *event) { u32 *addr = (u32 *)(event + pred->offset); u32 var_150 = (u32)pred->val; int var_120; var_120 = (var_150 == *addr) ^ pred->not; return var_120; };
static int fn_94(struct struct_149 *pred, void *event) { u16 *addr = (u16 *)(event + pred->offset); u16 var_150 = (u16)pred->val; int var_120; var_120 = (var_150 == *addr) ^ pred->not; return var_120; };
static int fn_95(struct struct_149 *pred, void *event) { u8 *addr = (u8 *)(event + pred->offset); u8 var_150 = (u8)pred->val; int var_120; var_120 = (var_150 == *addr) ^ pred->not; return var_120; };


static int fn_96(struct struct_149 *pred, void *event)
{
 char *addr = (char *)(event + pred->offset);
 int cmp, var_120;

 cmp = pred->regex.match(addr, &pred->regex, pred->regex.field_len);

 var_120 = cmp ^ pred->not;

 return var_120;
}


static int fn_97(struct struct_149 *pred, void *event)
{
 char **addr = (char **)(event + pred->offset);
 int cmp, var_120;
 int var_150 = var_150(*addr) + 1;

 cmp = pred->regex.match(*addr, &pred->regex, var_150);

 var_120 = cmp ^ pred->not;

 return var_120;
}

static int fn_99(struct struct_149 *pred, void *event)
{
 u32 var_103 = *(u32 *)(event + pred->offset);
 int var_103 = var_103 & 0xffff;
 int var_103 = var_103 >> 16;
 char *addr = (char *)(event + var_103);
 int cmp, var_120;

 cmp = pred->regex.match(addr, &pred->regex, var_103);

 var_120 = cmp ^ pred->not;

 return var_120;
}


static int fn_103(struct struct_149 *pred, void *event)
{
 int cpu, cmp;

 cpu = raw_smp_processor_id();
 cmp = pred->val;

 switch (pred->op) {
 case OP_EQ:
  return cpu == cmp;
 case OP_NE:
  return cpu != cmp;
 case OP_LT:
  return cpu < cmp;
 case OP_LE:
  return cpu <= cmp;
 case OP_GT:
  return cpu > cmp;
 case OP_GE:
  return cpu >= cmp;
 default:
  return 0;
 }
}


static int fn_104(struct struct_149 *pred, void *event)
{
 int cmp;

 cmp = pred->regex.match(current->comm, &pred->regex,
    TASK_COMM_LEN);
 return cmp ^ pred->not;
}

static int fn_105(struct struct_149 *pred, void *event)
{
 return 0;
}

static int fn_106(char *var_160, struct struct_118 *r, int var_150)
{

 if (!var_150)
  return strcmp(var_160, r->pattern) == 0;

 return strncmp(var_160, r->pattern, var_150) == 0;
}

static int fn_108(char *var_160, struct struct_118 *r, int var_150)
{
 if (var_150 && var_150 < r->len)
  return 0;

 return strncmp(var_160, r->pattern, r->len) == 0;
}

static int fn_109(char *var_160, struct struct_118 *r, int var_150)
{
 if (!var_150)
  return strstr(var_160, r->pattern) != NULL;

 return strnstr(var_160, r->pattern, var_150) != NULL;
}

static int fn_110(char *var_160, struct struct_118 *r, int var_150)
{
 int var_150 = var_150 - 1;

 if (var_150 >= r->len &&
     memcmp(var_160 + var_150 - r->len, r->pattern, r->len) == 0)
  return 1;
 return 0;
}

static int fn_111(char *var_160, struct struct_118 *r, int var_150 var_112)
{
 if (glob_match(r->pattern, var_160))
  return 1;
 return 0;
}

enum enumtype_118 fn_114(char *buff, int var_150, char **search, int *not)
{
 int var_140 = var_118;
 int var_160;

 if (buff[0] == '!') {
  *not = 1;
  buff++;
  var_150--;
 } else
  *not = 0;

 *search = buff;

 for (var_160 = 0; var_160 < var_150; var_160++) {
  if (buff[var_160] == '*') {
   if (!var_160) {
    var_140 = MATCH_END_ONLY;
   } else if (var_160 == var_150 - 1) {
    if (var_140 == MATCH_END_ONLY)
     var_140 = MATCH_MIDDLE_ONLY;
    else
     var_140 = MATCH_FRONT_ONLY;
    buff[var_160] = 0;
    break;
   } else {
    return MATCH_GLOB;
   }
  } else if (strchr("[?\\", buff[var_160])) {
   return MATCH_GLOB;
  }
 }
 if (buff[0] == '*')
  *search = buff + 1;

 return var_140;
}

static void fn_117(struct struct_149 *pred)
{
 struct struct_118 *r = &pred->regex;
 char *search;
 enum enumtype_118 var_140 = var_118;

 if (pred->op == OP_GLOB) {
  var_140 = filter_parse_regex(r->pattern, r->len, &search, &pred->not);
  r->len = var_150(search);
  memmove(r->pattern, search, r->len+1);
 }

 switch (var_140) {
 case var_118:
  r->match = regex_match_full;
  break;
 case MATCH_FRONT_ONLY:
  r->match = regex_match_front;
  break;
 case MATCH_MIDDLE_ONLY:
  r->match = regex_match_middle;
  break;
 case MATCH_END_ONLY:
  r->match = regex_match_end;
  break;
 case MATCH_GLOB:
  r->match = regex_match_glob;
  break;
 }
}


int fn_118(struct struct_179 *filter, void *rec)
{
 struct struct_161 *prog;
 int var_160;


 if (!filter)
  return 1;

 prog = rcu_dereference_sched(filter->prog);
 if (!prog)
  return 1;

 for (var_160 = 0; prog[var_160].pred; var_160++) {
  struct struct_149 *pred = prog[var_160].pred;
  int var_120 = pred->fn(pred, rec);
  if (var_120 == prog[var_160].when_to_branch)
   var_160 = prog[var_160].target;
 }
 return prog[var_160].target;
}
EXPORT_SYMBOL_GPL(filter_match_preds);

static void fn_120(struct struct_179 *filter)
{
 if (!filter)
  return;

 kfree(filter->filter_string);
 filter->filter_string = NULL;
}

static void fn_121(struct struct_177 *pe,
         struct struct_179 *filter)
{
 struct struct_128 *s;
 int var_150 = pe->lasterr_pos;
 char *buf;
 int var_150;

 if (WARN_ON(!filter->filter_string))
  return;

 s = kmalloc(sizeof(*s), GFP_KERNEL);
 if (!s)
  return;
 trace_seq_init(s);

 var_150 = var_150(filter->filter_string);
 if (var_150 > var_150)
  var_150 = var_150;


 if (var_150)
  var_150++;

 trace_seq_puts(s, filter->filter_string);
 if (pe->lasterr > 0) {
  trace_seq_printf(s, "\n%*s", var_150, "^");
  trace_seq_printf(s, "\nparse_error: %s\n", err_text[pe->lasterr]);
 } else {
  trace_seq_printf(s, "\nError: (%d)\n", pe->lasterr);
 }
 trace_seq_putc(s, 0);
 buf = kmemdup_nul(s->buffer, s->seq.len, GFP_KERNEL);
 if (buf) {
  kfree(filter->filter_string);
  filter->filter_string = buf;
 }
 kfree(s);
}

static inline struct struct_179 *fn_123(struct struct_178 *file)
{
 return file->filter;
}


void fn_125(struct struct_178 *file, struct struct_128 *s)
{
 struct struct_179 *filter = event_filter(file);

 if (filter && filter->filter_string)
  trace_seq_printf(s, "%s\n", filter->filter_string);
 else
  trace_seq_puts(s, "none\n");
}

void fn_126(struct struct_179 *system,
      struct struct_128 *s)
{
 struct struct_179 *filter;

 mutex_lock(&event_mutex);
 filter = system->filter;
 if (filter && filter->filter_string)
  trace_seq_printf(s, "%s\n", filter->filter_string);
 else
  trace_seq_puts(s, "### global filter ###\n" "# Use this to set filters for multiple events.\n" "# Only events with the given fields will be affected.\n" "# If no events are modified, an error message will be displayed here" "\n");
 mutex_unlock(&event_mutex);
}

static void fn_128(struct struct_179 *filter)
{
 struct struct_161 *prog;
 int var_160;

 prog = rcu_access_pointer(filter->prog);
 if (!prog)
  return;

 for (var_160 = 0; prog[var_160].pred; var_160++)
  kfree(prog[var_160].pred);
 kfree(prog);
}

static void fn_129(struct struct_178 *file)
{
 unsigned long var_162 = file->flags;

 file->flags &= ~EVENT_FILE_FL_FILTERED;

 if (var_162 != file->flags)
  trace_buffered_event_disable();
}

static void fn_131(struct struct_179 *filter)
{
 if (!filter)
  return;

 free_prog(filter);
 kfree(filter->filter_string);
 kfree(filter);
}

void fn_132(struct struct_179 *filter)
{
 __free_filter(filter);
}

static inline void fn_133(struct struct_178 *file)
{
 filter_disable(file);
 remove_filter_string(file->filter);
}

static void fn_134(struct struct_179 *dir,
     struct struct_179 *tr)
{
 struct struct_178 *file;

 list_for_each_entry(file, &tr->events, list) {
  if (file->system != dir)
   continue;
  __remove_filter(file);
 }
}

static inline void fn_137(struct struct_178 *file)
{
 __free_filter(file->filter);
 file->filter = NULL;
}

static void fn_138(struct struct_179 *dir,
       struct struct_179 *tr)
{
 struct struct_178 *file;

 list_for_each_entry(file, &tr->events, list) {
  if (file->system != dir)
   continue;
  __free_subsystem_filter(file);
 }
}

int fn_139(const char *var_140)
{
 if (strstr(var_140, "__data_loc") && strstr(var_140, "char"))
  return FILTER_DYN_STRING;

 if (strchr(var_140, '[') && strstr(var_140, "char"))
  return FILTER_STATIC_STRING;

 return FILTER_OTHER;
}

static filter_pred_fn_t fn_140(enum enumtype_141 var_150,
         int var_146, int var_146)
{
 filter_pred_fn_t var_146 = NULL;
 int var_146 = -1;

 switch (var_150) {
 case OP_EQ:
 case OP_NE:
  break;
 default:
  if (WARN_ON_ONCE(var_150 < OP_LE))
   return NULL;
  var_146 = var_150 - OP_LE;
  if (WARN_ON_ONCE(var_146 > (OP_BAND - OP_LE)))
   return NULL;
 }

 switch (var_146) {
 case 8:
  if (var_146 < 0)
   var_146 = filter_pred_64;
  else if (var_146)
   var_146 = pred_funcs_s64[var_146];
  else
   var_146 = pred_funcs_u64[var_146];
  break;
 case 4:
  if (var_146 < 0)
   var_146 = filter_pred_32;
  else if (var_146)
   var_146 = pred_funcs_s32[var_146];
  else
   var_146 = pred_funcs_u32[var_146];
  break;
 case 2:
  if (var_146 < 0)
   var_146 = filter_pred_16;
  else if (var_146)
   var_146 = pred_funcs_s16[var_146];
  else
   var_146 = pred_funcs_u16[var_146];
  break;
 case 1:
  if (var_146 < 0)
   var_146 = filter_pred_8;
  else if (var_146)
   var_146 = pred_funcs_s8[var_146];
  else
   var_146 = pred_funcs_u8[var_146];
  break;
 }

 return var_146;
}


static int fn_146(const char *var_160, void *var_148,
        int var_150, struct struct_177 *pe,
        struct struct_149 **pred_ptr)
{
 struct struct_178 *call = var_148;
 struct struct_148 *field;
 struct struct_149 *pred = NULL;
 char num_buf[24];
 char *field_name;
 char var_150;
 u64 var_150;
 int var_150;
 int var_161;
 int var_150;
 int s;
 int var_160 = 0;


 while (isspace(var_160[var_160]))
  var_160++;
 s = var_160;

 while (isalnum(var_160[var_160]) || var_160[var_160] == '_')
  var_160++;

 var_150 = var_160 - s;

 if (!var_150)
  return -1;

 field_name = kmemdup_nul(var_160 + s, var_150, GFP_KERNEL);
 if (!field_name)
  return -ENOMEM;



 field = trace_find_event_field(call, field_name);
 kfree(field_name);
 if (!field) {
  parse_error(pe, FILT_ERR_FIELD_NOT_FOUND, var_150 + var_160);
  return -EINVAL;
 }

 while (isspace(var_160[var_160]))
  var_160++;


 for (var_150 = 0; ops[var_150]; var_150++) {

  if (strncmp(var_160 + var_160, ops[var_150], var_150(ops[var_150])) == 0)
   break;
 }

 if (!ops[var_150]) {
  parse_error(pe, FILT_ERR_INVALID_OP, var_150 + var_160);
  goto err_free;
 }

 var_160 += var_150(ops[var_150]);

 while (isspace(var_160[var_160]))
  var_160++;

 s = var_160;

 pred = kzalloc(sizeof(*pred), GFP_KERNEL);
 if (!pred)
  return -ENOMEM;

 pred->field = field;
 pred->offset = field->offset;
 pred->op = var_150;

 if (ftrace_event_is_function(call)) {







  if (strcmp(field->name, "ip") != 0) {
    parse_error(pe, FILT_ERR_IP_FIELD_ONLY, var_150 + var_160);
    goto err_free;
   }
   pred->fn = filter_pred_none;





   if (var_160[var_160] == '\'' || var_160[var_160] == '"')
    var_150 = var_160[var_160];
   else
    var_150 = 0;

   for (var_160++; var_160[var_160]; var_160++) {
    if (var_150 && var_160[var_160] == var_150)
     break;
    if (!var_150 && (var_160[var_160] == ')' || var_160[var_160] == '&' ||
        var_160[var_160] == '|'))
     break;
   }

   if (var_150)
    s++;
  var_150 = var_160 - s;
  if (var_150 >= MAX_FILTER_STR_VAL) {
   parse_error(pe, FILT_ERR_OPERAND_TOO_LONG, var_150 + var_160);
   goto err_free;
  }

  pred->regex.len = var_150;
  strncpy(pred->regex.pattern, var_160 + s, var_150);
  pred->regex.pattern[var_150] = 0;


 } else if (var_160[var_160] == '\'' || var_160[var_160] == '"') {
  char var_150 = var_160[var_160];


  switch (var_150) {
  case OP_NE:
   pred->not = 1;

  case OP_GLOB:
  case OP_EQ:
   break;
  default:
   parse_error(pe, FILT_ERR_ILLEGAL_FIELD_OP, var_150 + var_160);
   goto err_free;
  }


  if (!is_string_field(field)) {
   parse_error(pe, FILT_ERR_EXPECT_DIGIT, var_150 + var_160);
   goto err_free;
  }

  for (var_160++; var_160[var_160]; var_160++) {
   if (var_160[var_160] == var_150)
    break;
  }
  if (!var_160[var_160]) {
   parse_error(pe, FILT_ERR_MISSING_QUOTE, var_150 + var_160);
   goto err_free;
  }


  s++;
  var_150 = var_160 - s;
  if (var_150 >= MAX_FILTER_STR_VAL) {
   parse_error(pe, FILT_ERR_OPERAND_TOO_LONG, var_150 + var_160);
   goto err_free;
  }

  pred->regex.len = var_150;
  strncpy(pred->regex.pattern, var_160 + s, var_150);
  pred->regex.pattern[var_150] = 0;

  filter_build_regex(pred);

  if (field->filter_type == FILTER_COMM) {
   pred->fn = filter_pred_comm;

  } else if (field->filter_type == FILTER_STATIC_STRING) {
   pred->fn = filter_pred_string;
   pred->regex.field_len = field->size;

  } else if (field->filter_type == FILTER_DYN_STRING)
   pred->fn = filter_pred_strloc;
  else
   pred->fn = filter_pred_pchar;

  var_160++;

 } else if (isdigit(var_160[var_160])) {


  if (is_string_field(field)) {
   parse_error(pe, FILT_ERR_EXPECT_STRING, var_150 + var_160);
   goto err_free;
  }

  if (var_150 == OP_GLOB) {
   parse_error(pe, FILT_ERR_ILLEGAL_FIELD_OP, var_150 + var_160);
   goto err_free;
  }


  while (isalnum(var_160[var_160]))
   var_160++;

  var_150 = var_160 - s;

  if (var_150 >= sizeof(num_buf)) {
   parse_error(pe, FILT_ERR_OPERAND_TOO_LONG, var_150 + var_160);
   goto err_free;
  }

  strncpy(num_buf, var_160 + s, var_150);
  num_buf[var_150] = 0;


  if (field->is_signed)
   var_161 = kstrtoll(num_buf, 0, &var_150);
  else
   var_161 = kstrtoull(num_buf, 0, &var_150);
  if (var_161) {
   parse_error(pe, FILT_ERR_ILLEGAL_INTVAL, var_150 + s);
   goto err_free;
  }

  pred->val = var_150;

  if (field->filter_type == FILTER_CPU)
   pred->fn = filter_pred_cpu;
  else {
   pred->fn = select_comparison_fn(pred->op, field->size,
       field->is_signed);
   if (pred->op == OP_NE)
    pred->not = 1;
  }

 } else {
  parse_error(pe, FILT_ERR_INVALID_VALUE, var_150 + var_160);
  goto err_free;
 }

 *pred_ptr = pred;
 return var_160;

err_free:
 kfree(pred);
 return -EINVAL;
}

enum {
 enum_150 = -1,
 enum_151 = -2,
 enum_152 = -3,
};

static int fn_153(const char *var_160, int *parens, int *preds, int *var_179)
{
 bool var_159 = false;
 int var_161 = 0;
 int var_160 = 1;
 int var_159 = 0;
 int var_160 = 1;
 int var_160 = 0;
 int var_160;

 *var_179 = 0;

 for (var_160 = 0; var_160[var_160]; var_160++) {
  if (isspace(var_160[var_160]))
   continue;
  if (var_160) {
   if (var_160[var_160] == var_160)
          var_160 = 0;
   continue;
  }

  switch (var_160[var_160]) {
  case '\'':
  case '"':
   var_160 = var_160[var_160];
   var_159 = var_160;
   break;
  case '|':
  case '&':
   if (var_160[var_160+1] != var_160[var_160])
    break;
   var_159 = false;
   continue;
  case '(':
   var_159 = false;
   var_160++;
   if (var_160 > var_160)
    var_160 = var_160;
   continue;
  case ')':
   var_159 = false;
   if (var_160 == 1) {
    *var_179 = var_160;
    return TOO_MANY_CLOSE;
   }
   var_160--;
   continue;
  }
  if (!var_159) {
   var_161++;
   var_159 = true;
  }
 }

 if (var_160) {
  *var_179 = var_159;
  return MISSING_QUOTE;
 }

 if (var_160 != 1) {
  int var_160 = var_160;


  for (var_160--; var_160; var_160--) {
   if (var_160) {
    if (var_160[var_160] == var_160)
     var_160 = 0;
    continue;
   }
   switch (var_160[var_160]) {
   case '(':
    if (var_160 == var_160) {
     *var_179 = var_160;
     return TOO_MANY_OPEN;
    }
    var_160--;
    break;
   case ')':
    var_160++;
    break;
   case '\'':
   case '"':
    var_160 = var_160[var_160];
    break;
   }
  }

  *var_179 = 0;
  return TOO_MANY_OPEN;
 }


 *parens = var_160;
 *preds = var_161;
 return 0;
}

static int fn_160(struct struct_178 *call,
    const char *filter_string,
    struct struct_179 *filter,
    struct struct_177 *pe)
{
 struct struct_161 *prog;
 int var_161;
 int var_161;
 int index;
 int var_161;

 var_161 = calc_stack(filter_string, &var_161, &var_161, &index);
 if (var_161 < 0) {
  switch (var_161) {
  case MISSING_QUOTE:
   parse_error(pe, FILT_ERR_MISSING_QUOTE, index);
   break;
  case TOO_MANY_OPEN:
   parse_error(pe, FILT_ERR_TOO_MANY_OPEN, index);
   break;
  default:
   parse_error(pe, FILT_ERR_TOO_MANY_CLOSE, index);
  }
  return var_161;
 }

 if (!var_161)
  return -EINVAL;

 prog = predicate_parse(filter_string, var_161, var_161,
          var_161, call, pe);
 if (IS_ERR(prog))
  return PTR_ERR(prog);

 rcu_assign_pointer(filter->prog, prog);
 return 0;
}

static inline void fn_161(struct struct_178 *file)
{
 unsigned long var_162 = file->flags;

 file->flags |= EVENT_FILE_FL_FILTERED;

 if (var_162 != file->flags)
  trace_buffered_event_enable();
}

static inline void fn_162(struct struct_178 *file,
        struct struct_179 *filter)
{
 rcu_assign_pointer(file->filter, filter);
}

static inline void fn_163(struct struct_178 *file)
{
 RCU_INIT_POINTER(file->filter, NULL);
}

static inline void
fn_164(struct struct_178 *file)
{
 file->flags |= EVENT_FILE_FL_NO_SET_FILTER;
}

static inline void
fn_165(struct struct_178 *file)
{
 file->flags &= ~EVENT_FILE_FL_NO_SET_FILTER;
}

static inline bool
fn_166(struct struct_178 *file)
{
 if (file->flags & EVENT_FILE_FL_NO_SET_FILTER)
  return true;

 return false;
}

struct struct_170 {
 struct struct_168 list;
 struct struct_179 *filter;
};

static int fn_169(struct struct_179 *dir,
    struct struct_179 *tr,
    struct struct_177 *pe,
    char *filter_string)
{
 struct struct_178 *file;
 struct struct_170 *filter_item;
 struct struct_179 *filter = NULL;
 struct struct_170 *tmp;
 LIST_HEAD(filter_list);
 bool var_171 = true;
 int var_179;

 list_for_each_entry(file, &tr->events, list) {

  if (file->system != dir)
   continue;

  filter = kzalloc(sizeof(*filter), GFP_KERNEL);
  if (!filter)
   goto fail_mem;

  filter->filter_string = kstrdup(filter_string, GFP_KERNEL);
  if (!filter->filter_string)
   goto fail_mem;

  var_179 = process_preds(file->event_call, filter_string, filter, pe);
  if (var_179) {
   filter_disable(file);
   parse_error(pe, FILT_ERR_BAD_SUBSYS_FILTER, 0);
   append_filter_err(pe, filter);
  } else
   event_set_filtered_flag(file);


  filter_item = kzalloc(sizeof(*filter_item), GFP_KERNEL);
  if (!filter_item)
   goto fail_mem;

  list_add_tail(&filter_item->list, &filter_list);




  filter_item->filter = event_filter(file);
  event_set_filter(file, filter);
  filter = NULL;

  var_171 = false;
 }

 if (var_171)
  goto fail;






 synchronize_sched();
 list_for_each_entry_safe(filter_item, tmp, &filter_list, list) {
  __free_filter(filter_item->filter);
  list_del(&filter_item->list);
  kfree(filter_item);
 }
 return 0;
 fail:

 list_for_each_entry_safe(filter_item, tmp, &filter_list, list) {
  list_del(&filter_item->list);
  kfree(filter_item);
 }
 parse_error(pe, FILT_ERR_BAD_SUBSYS_FILTER, 0);
 return -EINVAL;
 fail_mem:
 kfree(filter);

 if (!var_171)
  synchronize_sched();
 list_for_each_entry_safe(filter_item, tmp, &filter_list, list) {
  __free_filter(filter_item->filter);
  list_del(&filter_item->list);
  kfree(filter_item);
 }
 return -ENOMEM;
}

static int fn_171(char *filter_string, bool var_176,
          struct struct_177 **pse,
          struct struct_179 **filterp)
{
 struct struct_179 *filter;
 struct struct_177 *pe = NULL;
 int var_179 = 0;

 if (WARN_ON_ONCE(*pse || *filterp))
  return -EINVAL;

 filter = kzalloc(sizeof(*filter), GFP_KERNEL);
 if (filter && var_176) {
  filter->filter_string = kstrdup(filter_string, GFP_KERNEL);
  if (!filter->filter_string)
   var_179 = -ENOMEM;
 }

 pe = kzalloc(sizeof(*pe), GFP_KERNEL);

 if (!filter || !pe || var_179) {
  kfree(pe);
  __free_filter(filter);
  return -ENOMEM;
 }


 *filterp = filter;
 *pse = pe;

 return 0;
}

static void fn_173(struct struct_177 *pe)
{
 kfree(pe);
}

static int fn_174(struct struct_178 *call,
    char *filter_string, bool var_176,
    struct struct_179 **filterp)
{
 struct struct_177 *pe = NULL;
 int var_179;

 var_179 = create_filter_start(filter_string, var_176, &pe, filterp);
 if (var_179)
  return var_179;

 var_179 = process_preds(call, filter_string, *filterp, pe);
 if (var_179 && var_176)
  append_filter_err(pe, *filterp);

 return var_179;
}

int fn_175(struct struct_178 *call,
   char *filter_str, bool var_176,
   struct struct_179 **filterp)
{
 return create_filter(call, filter_str, var_176, filterp);
}

static int fn_176(struct struct_179 *dir,
    struct struct_179 *tr,
    char *filter_str, struct struct_179 **filterp)
{
 struct struct_177 *pe = NULL;
 int var_179;

 var_179 = create_filter_start(filter_str, true, &pe, filterp);
 if (!var_179) {
  var_179 = process_system_preds(dir, tr, pe, filter_str);
  if (!var_179) {

   kfree((*filterp)->filter_string);
   (*filterp)->filter_string = NULL;
  } else {
   append_filter_err(pe, *filterp);
  }
 }
 create_filter_finish(pe);

 return var_179;
}


int fn_177(struct struct_178 *file, char *filter_string)
{
 struct struct_178 *call = file->event_call;
 struct struct_179 *filter = NULL;
 int var_179;

 if (!strcmp(strstrip(filter_string), "0")) {
  filter_disable(file);
  filter = event_filter(file);

  if (!filter)
   return 0;

  event_clear_filter(file);


  synchronize_sched();
  __free_filter(filter);

  return 0;
 }

 var_179 = create_filter(call, filter_string, true, &filter);







 if (filter) {
  struct struct_179 *tmp;

  tmp = event_filter(file);
  if (!var_179)
   event_set_filtered_flag(file);
  else
   filter_disable(file);

  event_set_filter(file, filter);

  if (tmp) {

   synchronize_sched();
   __free_filter(tmp);
  }
 }

 return var_179;
}

int fn_178(struct struct_179 *dir,
     char *filter_string)
{
 struct struct_179 *system = dir->subsystem;
 struct struct_179 *tr = dir->tr;
 struct struct_179 *filter = NULL;
 int var_179 = 0;

 mutex_lock(&event_mutex);


 if (!dir->nr_events) {
  var_179 = -ENODEV;
  goto out_unlock;
 }

 if (!strcmp(strstrip(filter_string), "0")) {
  filter_free_subsystem_preds(dir, tr);
  remove_filter_string(system->filter);
  filter = system->filter;
  system->filter = NULL;

  synchronize_sched();
  filter_free_subsystem_filters(dir, tr);
  __free_filter(filter);
  goto out_unlock;
 }

 var_179 = create_system_filter(dir, tr, filter_string, &filter);
 if (filter) {




  __free_filter(system->filter);
  system->filter = filter;
 }
out_unlock:
 mutex_unlock(&event_mutex);

 return var_179;
}
