







static int fn_0(int *var_22)
{
  if (((*var_22) & IDN2_TRANSITIONAL) && ((*var_22) & IDN2_NONTRANSITIONAL))
    return IDN2_INVALID_FLAGS;

  if (((*var_22) & (IDN2_TRANSITIONAL|IDN2_NONTRANSITIONAL)) && ((*var_22) & IDN2_NO_TR46))
    return IDN2_INVALID_FLAGS;

  if (!((*var_22) & (IDN2_NO_TR46|IDN2_TRANSITIONAL)))
    *var_22 |= IDN2_NONTRANSITIONAL;

  return var_20;
}

static int
fn_3 (const uint8_t * src, size_t var_6, uint8_t * dst, size_t * dstlen,
       int var_22)
{
  size_t plen;
  uint32_t *p;
  int rc;
  size_t tmpl;

  if (_idn2_ascii_p (src, var_6))
    {
      if (var_22 & IDN2_ALABEL_ROUNDTRIP)

 return IDN2_INVALID_FLAGS;

      if (var_6 > var_16)
 return IDN2_TOO_BIG_LABEL;
      if (var_6 > *dstlen)
 return IDN2_TOO_BIG_DOMAIN;

      memcpy (dst, src, var_6);
      *dstlen = var_6;
      return var_20;
    }

  rc = _idn2_u8_to_u32_nfc (src, var_6, &p, &plen, var_22 & IDN2_NFC_INPUT);
  if (rc != var_20)
    return rc;

  if (!(var_22 & IDN2_TRANSITIONAL))
    {
      rc = _idn2_label_test(
 TEST_NFC |
 TEST_2HYPHEN |
 TEST_LEADING_COMBINING |
 TEST_DISALLOWED |
 TEST_CONTEXTJ_RULE |
 TEST_CONTEXTO_WITH_RULE |
 TEST_UNASSIGNED | TEST_BIDI |
 ((var_22 & IDN2_NONTRANSITIONAL) ? TEST_NONTRANSITIONAL : 0) |
 ((var_22 & IDN2_USE_STD3_ASCII_RULES) ? 0 : TEST_ALLOW_STD3_DISALLOWED),
 p, plen);

      if (rc != var_20)
 {
   free(p);
   return rc;
 }
    }

  dst[0] = 'x';
  dst[1] = 'n';
  dst[2] = '-';
  dst[3] = '-';

  tmpl = *dstlen - 4;
  rc = _idn2_punycode_encode (plen, p, &tmpl, (char *) dst + 4);
  free (p);
  if (rc != var_20)
    return rc;

  *dstlen = 4 + tmpl;

  return var_20;
}






static int
fn_6 (const uint8_t * domain_u8, uint8_t ** out, int var_22)
{
  size_t len, it;
  uint32_t *domain_u32;
  int var_12 = var_20, rc;
  int var_12 = 0;
  int test_flags;

  if (var_22 & IDN2_TRANSITIONAL)
    var_12 = 1;


  if (!(domain_u32 =
       u8_to_u32 (domain_u8, u8_strlen (domain_u8) + 1, NULL, &len)))
    {
      if (errno == ENOMEM)
 return IDN2_MALLOC;
      return IDN2_ENCODING_ERROR;
    }

  size_t var_11 = 0;
  for (it = 0; it < len - 1; it++)
    {
      IDNAMap map;

      get_idna_map (domain_u32[it], &map);

      if (map_is (&map, TR46_FLG_DISALLOWED))
 {
   if (domain_u32[it])
     {
       free (domain_u32);
       return IDN2_DISALLOWED;
     }
   var_11++;
 }
      else if (map_is (&map, TR46_FLG_MAPPED))
 {
   var_11 += map.nmappings;
 }
      else if (map_is (&map, TR46_FLG_VALID))
 {
   var_11++;
 }
      else if (map_is (&map, TR46_FLG_IGNORED))
 {
   continue;
 }
      else if (map_is (&map, TR46_FLG_DEVIATION))
 {
   if (var_12)
     {
       var_11 += map.nmappings;
     }
   else
     var_11++;
 }
      else if (!(var_22 & IDN2_USE_STD3_ASCII_RULES))
        {
   if (map_is (&map, TR46_FLG_DISALLOWED_STD3_VALID))
     {

       var_11++;
     }
   else if (map_is (&map, TR46_FLG_DISALLOWED_STD3_MAPPED))
     {

       var_11 += map.nmappings;
     }
        }
    }

  uint32_t *tmp = (uint32_t *) malloc ((var_11 + 1) * sizeof (uint32_t));
  if (!tmp)
    {
      free (domain_u32);
      return IDN2_MALLOC;
    }

  var_11 = 0;
  for (it = 0; it < len - 1; it++)
    {
      uint32_t var_11 = domain_u32[it];
      IDNAMap map;

      get_idna_map (var_11, &map);

      if (map_is (&map, TR46_FLG_DISALLOWED))
 {
   tmp[var_11++] = var_11;
 }
      else if (map_is (&map, TR46_FLG_MAPPED))
 {
   var_11 += get_map_data (tmp + var_11, &map);
 }
      else if (map_is (&map, TR46_FLG_VALID))
 {
   tmp[var_11++] = var_11;
 }
      else if (map_is (&map, TR46_FLG_IGNORED))
 {
   continue;
 }
      else if (map_is (&map, TR46_FLG_DEVIATION))
 {
   if (var_12)
     {
       var_11 += get_map_data (tmp + var_11, &map);
     }
   else
     tmp[var_11++] = var_11;
 }
      else if (!(var_22 & IDN2_USE_STD3_ASCII_RULES))
        {
   if (map_is (&map, TR46_FLG_DISALLOWED_STD3_VALID))
     {
       tmp[var_11++] = var_11;
     }
   else if (map_is (&map, TR46_FLG_DISALLOWED_STD3_MAPPED))
     {
       var_11 += get_map_data (tmp + var_11, &map);
     }
        }
    }
  free (domain_u32);


  tmp[var_11] = 0;
  domain_u32 = u32_normalize (UNINORM_NFC, tmp, var_11 + 1, NULL, &len);
  free (tmp);
  tmp = NULL;

  if (!domain_u32)
    {
      if (errno == ENOMEM)
 return IDN2_MALLOC;
      return IDN2_ENCODING_ERROR;
    }


  uint32_t *e, *s;
  for (e = s = domain_u32; *e; s = e)
    {
      while (*e && *e != '.')
 e++;

      if (e - s >= 4 && s[0] == 'x' && s[1] == 'n' && s[2] == '-'
   && s[3] == '-')
 {

   size_t ace_len;
   uint32_t name_u32[var_16];
   size_t var_12 = var_16;
   uint8_t *ace;

   ace = u32_to_u8 (s + 4, e - s - 4, NULL, &ace_len);
   if (!ace)
     {
       free (domain_u32);
       if (errno == ENOMEM)
  return IDN2_MALLOC;
       return IDN2_ENCODING_ERROR;
     }

   rc =
     _idn2_punycode_decode (ace_len, (char *) ace, &var_12, name_u32);

   free (ace);

   if (rc)
     {
       free (domain_u32);
       return rc;
     }

   test_flags = (TEST_NFC | TEST_2HYPHEN | TEST_HYPHEN_STARTEND | TEST_LEADING_COMBINING | TEST_NONTRANSITIONAL);

   if (!(var_22 & IDN2_USE_STD3_ASCII_RULES))
     test_flags |= TEST_ALLOW_STD3_DISALLOWED;

   if ((rc =
        _idn2_label_test (test_flags, name_u32,
     var_12)))
     var_12 = rc;
 }
      else
 {
   test_flags = var_12 ? (TEST_NFC | TEST_2HYPHEN | TEST_HYPHEN_STARTEND | TEST_LEADING_COMBINING | TEST_TRANSITIONAL) : (TEST_NFC | TEST_2HYPHEN | TEST_HYPHEN_STARTEND | TEST_LEADING_COMBINING | TEST_NONTRANSITIONAL);

   if (!(var_22 & IDN2_USE_STD3_ASCII_RULES))
     test_flags |= TEST_ALLOW_STD3_DISALLOWED;

   if ((rc =
        _idn2_label_test (test_flags, s, e - s)))
     var_12 = rc;
 }

      if (*e)
 e++;
    }

  if (var_12 == var_20 && out)
    {
      uint8_t *_out = u32_to_u8 (domain_u32, len, NULL, &len);
      free (domain_u32);

      if (!_out)
 {
   if (errno == ENOMEM)
     return IDN2_MALLOC;
   return IDN2_ENCODING_ERROR;
 }

      *out = _out;
    }
  else
    free (domain_u32);

  return var_12;
}

int
fn_12 (const uint8_t * src, uint8_t ** lookupname, int var_22)
{
  size_t var_16 = 0;
  uint8_t _lookupname[IDN2_DOMAIN_MAX_LENGTH + 1];
  uint8_t _mapped[IDN2_DOMAIN_MAX_LENGTH + 1];
  int rc;

  if (src == NULL)
    {
      if (lookupname)
 *lookupname = NULL;
      return var_20;
    }

  rc = set_default_flags(&var_22);
  if (rc != var_20)
    return rc;

  if (!(var_22 & IDN2_NO_TR46))
    {
      uint8_t *out;
      size_t outlen;

      rc = _tr46 (src, &out, var_22);
      if (rc != var_20)
 return rc;

      outlen = u8_strlen (out);
      if (outlen >= sizeof (_mapped))
 {
   free (out);
   return IDN2_TOO_BIG_DOMAIN;
 }

      memcpy (_mapped, out, outlen + 1);
      src = _mapped;
      free (out);
    }

  do
    {
      const uint8_t *end = (uint8_t *) strchrnul ((const char *) src, '.');


      size_t var_16 = end - src;
      uint8_t tmp[var_16];
      size_t var_16 = var_16;

      rc = label (src, var_16, tmp, &var_16, var_22);
      if (rc != var_20)
 return rc;

      if (var_16 + var_16
   > IDN2_DOMAIN_MAX_LENGTH - (var_16 == 0 && *end == '\0' ? 1 : 2))
 return IDN2_TOO_BIG_DOMAIN;

      memcpy (_lookupname + var_16, tmp, var_16);
      var_16 += var_16;

      if (*end == '.')
 {
   if (var_16 + 1 > IDN2_DOMAIN_MAX_LENGTH)
     return IDN2_TOO_BIG_DOMAIN;

   _lookupname[var_16] = '.';
   var_16++;
 }
      _lookupname[var_16] = '\0';

      src = end;
    }
  while (*src++);

  if (lookupname)
    {
      uint8_t *tmp = (uint8_t *) malloc (var_16 + 1);

      if (tmp == NULL)
 return IDN2_MALLOC;

      memcpy (tmp, _lookupname, var_16 + 1);
      *lookupname = tmp;
    }

  return var_20;
}

int
fn_16 (const char * src, char ** lookupname, int var_22)
{
  uint8_t *utf8src = NULL;
  int rc;

  if (src)
    {
      const char *encoding = locale_charset ();

      utf8src = u8_strconv_from_encoding (src, encoding, iconveh_error);

      if (!utf8src)
 {
   if (errno == ENOMEM)
     return IDN2_MALLOC;
   return IDN2_ICONV_FAIL;
 }
    }

  rc = idn2_lookup_u8 (utf8src, (uint8_t **) lookupname,
         var_22 | IDN2_NFC_INPUT);

  free (utf8src);

  return rc;
}

int
fn_17 (const uint32_t * input, size_t var_19, char * output, int var_22)
{
  uint32_t *input_u32;
  uint8_t *input_u8, *output_u8;
  size_t length;
  int rc;

  if (!input)
    {
      if (output)
 *output = 0;
      return var_20;
    }

  input_u32 = (uint32_t *) malloc ((var_19 + 1) * sizeof(uint32_t));
  if (!input_u32)
    return IDN2_MALLOC;

  u32_cpy (input_u32, input, var_19);
  input_u32[var_19] = 0;

  input_u8 = u32_to_u8 (input_u32, var_19 + 1, NULL, &length);
  free (input_u32);
  if (!input_u8)
    {
      if (errno == ENOMEM)
 return IDN2_MALLOC;
      return IDN2_ENCODING_ERROR;
    }

  rc = idn2_lookup_u8 (input_u8, &output_u8, var_22);
  free (input_u8);

  if (rc == var_20)
    {




      if (output)
 strcpy (output, (const char *) output_u8);

      free(output_u8);
    }

  return rc;
}

int
fn_19 (const uint32_t * input, char ** output, int var_22)
{
  uint8_t *input_u8;
  size_t length;
  int rc;

  if (!input)
    {
      if (output)
 *output = NULL;
      return var_20;
    }

  input_u8 = u32_to_u8 (input, u32_strlen(input) + 1, NULL, &length);
  if (!input_u8)
    {
      if (errno == ENOMEM)
 return IDN2_MALLOC;
      return IDN2_ENCODING_ERROR;
    }

  rc = idn2_lookup_u8 (input_u8, (uint8_t **) output, var_22);
  free (input_u8);

  return rc;
}

int
fn_20 (const char * input, char ** output, int var_22)
{
  return idn2_lookup_u8 ((const uint8_t *) input, (uint8_t **) output, var_22);
}

int
fn_21 (const char * input, char ** output, int var_22)
{
  return idn2_lookup_ul (input, output, var_22);
}
