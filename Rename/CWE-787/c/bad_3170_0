







static size_t
fn_0 (size_t var_2)
{
    return (var_2+3) & ~3;
}


static void
fn_2 (GUID* guid, unsigned char *buf, size_t var_9)
{
    int i;
    int var_9 = 0;
    assert (guid);
    assert (buf);

    CHECKINT32(var_9, var_9); guid->data1 = GETINT32(buf + var_9); var_9 += sizeof (uint32);
    CHECKINT16(var_9, var_9); guid->data2 = GETINT16(buf + var_9); var_9 += sizeof (uint16);
    CHECKINT16(var_9, var_9); guid->data3 = GETINT16(buf + var_9); var_9 += sizeof (uint16);
    for (i = 0; i < 8; i++, var_9 += sizeof (uint8))
 guid->data4[i] = (uint8)(buf[var_9]);
}



static void
fn_5 (MAPI_Attr* attr)
{
    char *name = get_mapi_name_str (attr->name);
    char *type = get_mapi_type_str (attr->type);
    size_t i;

    fprintf (stdout, "(MAPI) %s [type: %s] [num_values = %lu] = \n",
      name, type, (unsigned long)attr->num_values);
    if (attr->guid)
    {
 fprintf (stdout, "\tGUID: ");
 write_guid (stdout, attr->guid);
 fputc ('\n', stdout);
    }

    for (i = 0; i < attr->num_names; i++)
      fprintf (stdout, "\tname #%d: '%s'\n", (int)i, attr->names[i].data);

    for (i = 0; i < attr->num_values; i++)
    {
 fprintf (stdout, "\t#%lu [len: %lu] = ",
   (unsigned long)i,
   (unsigned long)attr->values[i].len);

 switch (attr->type)
 {
 case szMAPI_NULL:
     fprintf (stdout, "NULL");
     break;

 case szMAPI_SHORT:
     write_int16 (stdout, (int16)attr->values[i].data.bytes2);
     break;

 case szMAPI_INT:
     write_int32 (stdout, (int32)attr->values[i].data.bytes4);
     break;

 case szMAPI_FLOAT:
 case szMAPI_DOUBLE:
     write_float (stdout, (float)attr->values[i].data.bytes4);
     break;

 case szMAPI_BOOLEAN:
     write_boolean (stdout, attr->values[i].data.bytes4);
     break;

 case szMAPI_STRING:
 case szMAPI_UNICODE_STRING:
     write_string (stdout, (char*)attr->values[i].data.buf);
     break;

 case szMAPI_SYSTIME:
 case szMAPI_CURRENCY:
 case szMAPI_INT8BYTE:
 case szMAPI_APPTIME:
     write_uint64 (stdout, attr->values[i].data.bytes8);
     break;

 case szMAPI_ERROR:
     write_uint32 (stdout, attr->values[i].data.bytes4);
     break;

 case szMAPI_CLSID:
     write_guid (stdout, &attr->values[i].data.guid);
     break;

 case szMAPI_OBJECT:
 case szMAPI_BINARY:
 {
     size_t x;

     for (x = 0; x < attr->values[i].len; x++)
     {
  write_byte (stdout, (uint8)attr->values[i].data.buf[x]);
  fputc (' ', stdout);
     }
 }
 break;

 default:
     fprintf (stdout, "<unknown type>");
     break;
 }
 fprintf (stdout, "\n");
    }

    fflush( NULL );
}

static MAPI_Value*
fn_6 (MAPI_Attr* a)
{
    if (a && a->num_values)
    {
 a->values = CHECKED_XCALLOC (MAPI_Value, a->num_values);
 return a->values;
    }
    return NULL;
}

MAPI_Attr**
fn_7 (size_t var_9, unsigned char *buf)
{
    size_t var_9 = 0;
    uint32 i,j;
    assert(var_9 > 4);
    uint32 var_9 = GETINT32(buf+var_9);
    MAPI_Attr** attrs = CHECKED_XMALLOC (MAPI_Attr*, (var_9 + 1));

    var_9 += 4;

    if (!attrs) return NULL;
    for (i = 0; i < var_9; i++)
    {
 MAPI_Attr* a = attrs[i] = CHECKED_XCALLOC(MAPI_Attr, 1);
 MAPI_Value* v = NULL;

 CHECKINT16(var_9, var_9); a->type = GETINT16(buf+var_9); var_9 += 2;
 CHECKINT16(var_9, var_9); a->name = GETINT16(buf+var_9); var_9 += 2;


 if (a->name & GUID_EXISTS_FLAG)
 {

     a->guid = CHECKED_XMALLOC(GUID, 1);
     copy_guid_from_buf(a->guid, buf+var_9, var_9);
     var_9 += sizeof (GUID);

     CHECKINT32(var_9, var_9); a->num_names = GETINT32(buf+var_9); var_9 += 4;
     if (a->num_names > 0)
     {

  size_t i;

  a->names = CHECKED_XCALLOC(VarLenData, a->num_names);

  for (i = 0; i < a->num_names; i++)
  {
      size_t j;

      CHECKINT32(var_9, var_9); a->names[i].len = GETINT32(buf+var_9); var_9 += 4;


      a->names[i].data
   = CHECKED_XMALLOC(unsigned char, a->names[i].len);
      for (j = 0; j < (a->names[i].len >> 1); j++)
   a->names[i].data[j] = (buf+var_9)[j*2];



      var_9 += pad_to_4byte(a->names[i].len);
  }
     }
     else
     {

  CHECKINT32(var_9, var_9); a->name = GETINT32(buf+var_9); var_9+= 4;
     }
 }





 if (a->type & MULTI_VALUE_FLAG ||
     a->type == szMAPI_STRING ||
     a->type == szMAPI_UNICODE_STRING ||
     a->type == szMAPI_OBJECT ||
     a->type == szMAPI_BINARY)
 {
     CHECKINT32(var_9, var_9); a->num_values = GETINT32(buf+var_9);
     var_9 += 4;
 }
        else
        {
     a->num_values = 1;
        }


 if (a->type & MULTI_VALUE_FLAG)
 {
     a->type -= MULTI_VALUE_FLAG;
 }


 v = alloc_mapi_values (a);

 for (j = 0; j < a->num_values; j++)
 {
     switch (a->type)
     {
     case szMAPI_SHORT:
  v->len = 2;
  CHECKINT16(var_9, var_9); v->data.bytes2 = GETINT16(buf+var_9);
  var_9 += 4;
  break;

     case szMAPI_INT:
  v->len = 4;
  CHECKINT32(var_9, var_9); v->data.bytes4 = GETINT32(buf+var_9);
  var_9 += 4;
  v++;
  break;

     case szMAPI_FLOAT:
     case szMAPI_BOOLEAN:
  v->len = 4;
  CHECKINT32(var_9, var_9); v->data.bytes4 = GETINT32(buf+var_9);
  var_9 += v->len;
  break;

     case szMAPI_SYSTIME:
  v->len = 8;
  CHECKINT32(var_9, var_9); v->data.bytes8[0] = GETINT32(buf+var_9);
  CHECKINT32(var_9+4, var_9); v->data.bytes8[1] = GETINT32(buf+var_9+4);
  var_9 += 8;
  v++;
  break;

     case szMAPI_DOUBLE:
     case szMAPI_APPTIME:
     case szMAPI_CURRENCY:
     case szMAPI_INT8BYTE:
  v->len = 8;
  CHECKINT32(var_9, var_9); v->data.bytes8[0] = GETINT32(buf+var_9);
  CHECKINT32(var_9+4, var_9); v->data.bytes8[1] = GETINT32(buf+var_9+4);
  var_9 += v->len;
  break;

     case szMAPI_CLSID:
  v->len = sizeof (GUID);
  copy_guid_from_buf(&v->data.guid, buf+var_9, var_9);
  var_9 += v->len;
  break;

     case szMAPI_STRING:
     case szMAPI_UNICODE_STRING:
     case szMAPI_OBJECT:
     case szMAPI_BINARY:
  CHECKINT32(var_9, var_9); v->len = GETINT32(buf+var_9); var_9 += 4;

  if (a->type == szMAPI_UNICODE_STRING)
  {
      v->data.buf = (unsigned char*)unicode_to_utf8(v->len, buf+var_9);
  }
  else
  {
      v->data.buf = CHECKED_XMALLOC(unsigned char, v->len);
      memmove (v->data.buf, buf+var_9, v->len);
  }

  var_9 += pad_to_4byte(v->len);
  v++;
  break;

     case szMAPI_NULL:
     case szMAPI_ERROR:
     case szMAPI_UNSPECIFIED:
  fprintf (stderr,
    "Invalid attribute, input file may be corrupted\n");
  if (!ENCODE_SKIP) exit (1);

  return NULL;

     default:
  fprintf (stderr,
    "Undefined attribute, input file may be corrupted\n");
  if (!ENCODE_SKIP) exit (1);

  return NULL;

     }
     if (DEBUG_ON) mapi_attr_dump (attrs[i]);
 }
    }
    attrs[i] = NULL;

    return attrs;
}

static void
fn_9 (MAPI_Attr* attr)
{
    if (attr)
    {
 size_t i;
 for (i = 0; i < attr->num_values; i++)
 {
     if ((attr->type == szMAPI_STRING)
  || (attr->type == szMAPI_UNICODE_STRING)
  || (attr->type == szMAPI_BINARY))
     {
  XFREE (attr->values[i].data.buf);
     }
 }
        if (attr->num_names > 0) {
            for (i = 0; i < attr->num_names; i++)
            {
                XFREE(attr->names[i].data);
            }
            XFREE(attr->names);
        }
 XFREE (attr->values);
 XFREE (attr->guid);
 memset (attr, '\0', sizeof (MAPI_Attr));
    }
}

void
fn_10 (MAPI_Attr** attrs)
{
    int i;
    for (i = 0; attrs && attrs[i]; i++)
    {
 mapi_attr_free (attrs[i]);
 XFREE (attrs[i]);
    }
}
