







static const char nf_frags_cache_name[] = "nf-frags";

struct struct_27
{
 struct struct_1 h;
 int offset;
};



static struct struct_2 nf_frags;

static int fn_3(struct struct_41 *net)
{
 return 0;
}
static void __net_exit fn_5(struct struct_41 *net)
{
}


static inline u8 fn_6(const struct struct_39 *ipv6h)
{
 return 1 << (ipv6_get_dsfield(ipv6h) & INET_ECN_MASK);
}

static unsigned int fn_8(__be32 var_21, const struct struct_18 *saddr,
     const struct struct_18 *daddr)
{
 net_get_random_once(&nf_frags.rnd, sizeof(nf_frags.rnd));
 return jhash_3words(ipv6_addr_hash(saddr), ipv6_addr_hash(daddr),
       (__force u32)var_21, nf_frags.rnd);
}


static unsigned int fn_11(const struct struct_20 *q)
{
 const struct struct_44 *nq;

 nq = container_of(q, struct frag_queue, q);
 return nf_hash_frag(nq->id, &nq->saddr, &nq->daddr);
}

static void fn_14(unsigned long var_16)
{
 struct struct_44 *fq;
 struct struct_41 *net;

 fq = container_of((struct struct_20 *)var_16, struct frag_queue, q);
 net = container_of(fq->q.net, struct net, nf_frag.frags);

 ip6_expire_frag_queue(net, fq, &nf_frags);
}


static inline struct struct_44 *fn_16(struct struct_41 *net, __be32 var_21,
      u32 var_39, struct struct_18 *src,
      struct struct_18 *dst, int var_21, u8 var_28)
{
 struct struct_20 *q;
 struct struct_20 arg;
 unsigned int hash;

 arg.id = var_21;
 arg.user = var_39;
 arg.src = src;
 arg.dst = dst;
 arg.iif = var_21;
 arg.ecn = var_28;

 local_bh_disable();
 hash = nf_hash_frag(var_21, src, dst);

 q = inet_frag_find(&net->nf_frag.frags, &nf_frags, &arg, hash);
 local_bh_enable();
 if (IS_ERR_OR_NULL(q)) {
  inet_frag_maybe_warn_overflow(q, "IPv6-nf: " );
  return NULL;
 }
 return container_of(q, struct frag_queue, q);
}


static int fn_21(struct struct_44 *fq, struct struct_38 *skb,
        const struct struct_39 *fhdr, int var_39)
{
 struct struct_38 *prev, *next;
 unsigned int payload_len;
 int offset, end;
 u8 var_28;

 if (fq->q.flags & INET_FRAG_COMPLETE) {
  pr_debug("Already completed\n");
  goto err;
 }

 payload_len = ntohs(ipv6_hdr(skb)->payload_len);

 offset = ntohs(fhdr->frag_off) & ~0x7;
 end = offset + (payload_len -
   ((u8 *)(fhdr + 1) - (u8 *)(ipv6_hdr(skb) + 1)));

 if ((unsigned int)end > IPV6_MAXPLEN) {
  pr_debug("offset is too large.\n");
  return -1;
 }

 var_28 = ip6_frag_ecn(ipv6_hdr(skb));

 if (skb->ip_summed == CHECKSUM_COMPLETE) {
  const unsigned char *nh = skb_network_header(skb);
  skb->csum = csum_sub(skb->csum,
         csum_partial(nh, (u8 *)(fhdr + 1) - nh,
        0));
 }


 if (!(fhdr->frag_off & htons(IP6_MF))) {



  if (end < fq->q.len ||
      ((fq->q.flags & INET_FRAG_LAST_IN) && end != fq->q.len)) {
   pr_debug("already received last fragment\n");
   goto err;
  }
  fq->q.flags |= INET_FRAG_LAST_IN;
  fq->q.len = end;
 } else {



  if (end & 0x7) {



   pr_debug("end of fragment not rounded to 8 bytes.\n");
   return -1;
  }
  if (end > fq->q.len) {

   if (fq->q.flags & INET_FRAG_LAST_IN) {
    pr_debug("last packet already reached.\n");
    goto err;
   }
   fq->q.len = end;
  }
 }

 if (end == offset)
  goto err;


 if (!pskb_pull(skb, (u8 *) (fhdr + 1) - skb->data)) {
  pr_debug("queue: message is too short.\n");
  goto err;
 }
 if (pskb_trim_rcsum(skb, end - offset)) {
  pr_debug("Can't trim\n");
  goto err;
 }





 prev = fq->q.fragments_tail;
 if (!prev || ((struct struct_27 *)((prev)->cb))->offset < offset) {
  next = NULL;
  goto found;
 }
 prev = NULL;
 for (next = fq->q.fragments; next != NULL; next = next->next) {
  if (((struct struct_27 *)((next)->cb))->offset >= offset)
   break;
  prev = next;
 }

found:

 if (prev &&
     (((struct struct_27 *)((prev)->cb))->offset + prev->len) > offset)
  goto discard_fq;


 if (next && ((struct struct_27 *)((next)->cb))->offset < end)
  goto discard_fq;

 ((struct struct_27 *)((skb)->cb))->offset = offset;


 skb->next = next;
 if (!next)
  fq->q.fragments_tail = skb;
 if (prev)
  prev->next = skb;
 else
  fq->q.fragments = skb;

 if (skb->dev) {
  fq->iif = skb->dev->ifindex;
  skb->dev = NULL;
 }
 fq->q.stamp = skb->tstamp;
 fq->q.meat += skb->len;
 fq->ecn |= var_28;
 if (payload_len > fq->q.max_size)
  fq->q.max_size = payload_len;
 add_frag_mem_limit(fq->q.net, skb->truesize);




 if (offset == 0) {
  fq->nhoffset = var_39;
  fq->q.flags |= INET_FRAG_FIRST_IN;
 }

 return 0;

discard_fq:
 inet_frag_kill(&fq->q, &nf_frags);
err:
 return -1;
}

static bool
fn_25(struct struct_44 *fq, struct struct_38 *prev, struct struct_38 *dev)
{
 struct struct_38 *fp, *head = fq->q.fragments;
 int payload_len;
 u8 var_28;

 inet_frag_kill(&fq->q, &nf_frags);

 WARN_ON(head == NULL);
 WARN_ON(((struct struct_27 *)((head)->cb))->offset != 0);

 var_28 = ip_frag_ecn_table[fq->ecn];
 if (unlikely(var_28 == 0xff))
  return false;


 payload_len = ((head->data - skb_network_header(head)) -
         sizeof(struct struct_39) + fq->q.len -
         sizeof(struct struct_39));
 if (payload_len > IPV6_MAXPLEN) {
  net_dbg_ratelimited("nf_ct_frag6_reasm: payload len = %d\n",
        payload_len);
  return false;
 }


 if (skb_unclone(head, GFP_ATOMIC))
  return false;




 if (skb_has_frag_list(head)) {
  struct struct_38 *clone;
  int i, var_28 = 0;

  clone = alloc_skb(0, GFP_ATOMIC);
  if (clone == NULL)
   return false;

  clone->next = head->next;
  head->next = clone;
  skb_shinfo(clone)->frag_list = skb_shinfo(head)->frag_list;
  skb_frag_list_init(head);
  for (i = 0; i < skb_shinfo(head)->nr_frags; i++)
   var_28 += skb_frag_size(&skb_shinfo(head)->frags[i]);
  clone->len = clone->data_len = head->data_len - var_28;
  head->data_len -= clone->len;
  head->len -= clone->len;
  clone->csum = 0;
  clone->ip_summed = head->ip_summed;

  add_frag_mem_limit(fq->q.net, clone->truesize);
 }

 if (head != prev) {
  struct struct_38 *iter;

  fp = skb_clone(prev, GFP_ATOMIC);
  if (!fp)
   return false;

  fp->next = prev->next;

  iter = head;
  while (iter) {
   if (iter->next == prev) {
    iter->next = fp;
    break;
   }
   iter = iter->next;
  }

  skb_morph(prev, head);
  prev->next = head->next;
  consume_skb(head);
  head = prev;
 }



 skb_network_header(head)[fq->nhoffset] = skb_transport_header(head)[0];
 memmove(head->head + sizeof(struct struct_39), head->head,
  (head->data - head->head) - sizeof(struct struct_39));
 head->mac_header += sizeof(struct struct_39);
 head->network_header += sizeof(struct struct_39);

 skb_shinfo(head)->frag_list = head->next;
 skb_reset_transport_header(head);
 skb_push(head, head->data - skb_network_header(head));

 for (fp = head->next; fp; fp = fp->next) {
  head->data_len += fp->len;
  head->len += fp->len;
  if (head->ip_summed != fp->ip_summed)
   head->ip_summed = CHECKSUM_NONE;
  else if (head->ip_summed == CHECKSUM_COMPLETE)
   head->csum = csum_add(head->csum, fp->csum);
  head->truesize += fp->truesize;
 }
 sub_frag_mem_limit(fq->q.net, head->truesize);

 head->ignore_df = 1;
 head->next = NULL;
 head->dev = dev;
 head->tstamp = fq->q.stamp;
 ipv6_hdr(head)->payload_len = htons(payload_len);
 ipv6_change_dsfield(ipv6_hdr(head), 0xff, var_28);
 IP6CB(head)->frag_max_size = sizeof(struct struct_39) + fq->q.max_size;


 if (head->ip_summed == CHECKSUM_COMPLETE)
  head->csum = csum_partial(skb_network_header(head),
       skb_network_header_len(head),
       head->csum);

 fq->q.fragments = NULL;
 fq->q.fragments_tail = NULL;

 return true;
}

static int
fn_28(struct struct_38 *skb, u8 *prevhdrp, int *prevhoff, int *fhoff)
{
 u8 var_37 = ipv6_hdr(skb)->nexthdr;
 const int var_33 = skb_network_offset(skb);
 u8 var_37 = var_33 + offsetof(struct struct_39, nexthdr);
 int var_37 = var_33 + sizeof(struct struct_39);
 int var_37 = skb->len - var_37;
 u8 var_39 = var_35;

 while (var_37 != NEXTHDR_FRAGMENT) {
  struct struct_37 hdr;
  int hdrlen;

  if (!ipv6_ext_hdr(var_37)) {
   return -1;
  }
  if (var_37 == NEXTHDR_NONE) {
   pr_debug("next header is none\n");
   return -1;
  }
  if (var_37 < (int)sizeof(struct struct_37)) {
   pr_debug("too short\n");
   return -1;
  }
  if (skb_copy_bits(skb, var_37, &hdr, sizeof(hdr)))
   BUG();
  if (var_37 == NEXTHDR_AUTH)
   hdrlen = (hdr.hdrlen+2)<<2;
  else
   hdrlen = ipv6_optlen(&hdr);

  var_39 = var_37;
  var_37 = var_37;

  var_37 = hdr.nexthdr;
  var_37 -= hdrlen;
  var_37 += hdrlen;
 }

 if (var_37 < 0)
  return -1;

 *prevhdrp = var_39;
 *prevhoff = var_37;
 *fhoff = var_37;

 return 0;
}

int fn_37(struct struct_41 *net, struct struct_38 *skb, u32 var_39)
{
 struct struct_38 *dev = skb->dev;
 int fhoff, var_39, var_44;
 struct struct_39 *fhdr;
 struct struct_44 *fq;
 struct struct_39 *hdr;
 u8 var_39;


 if (ipv6_hdr(skb)->payload_len == 0) {
  pr_debug("payload len = 0\n");
  return -EINVAL;
 }

 if (find_prev_fhdr(skb, &var_39, &var_39, &fhoff) < 0)
  return -EINVAL;

 if (!pskb_may_pull(skb, fhoff + sizeof(*fhdr)))
  return -ENOMEM;

 skb_set_transport_header(skb, fhoff);
 hdr = ipv6_hdr(skb);
 fhdr = (struct struct_39 *)skb_transport_header(skb);

 fq = fq_find(net, fhdr->identification, var_39, &hdr->saddr, &hdr->daddr,
       skb->dev ? skb->dev->ifindex : 0, ip6_frag_ecn(hdr));
 if (fq == NULL) {
  pr_debug("Can't find and can't create new queue\n");
  return -ENOMEM;
 }

 spin_lock_bh(&fq->q.lock);

 if (nf_ct_frag6_queue(fq, skb, fhdr, var_39) < 0) {
  var_44 = -EINVAL;
  goto out_unlock;
 }




 var_44 = -EINPROGRESS;
 if (fq->q.flags == (INET_FRAG_FIRST_IN | INET_FRAG_LAST_IN) &&
     fq->q.meat == fq->q.len &&
     nf_ct_frag6_reasm(fq, skb, dev))
  var_44 = 0;

out_unlock:
 spin_unlock_bh(&fq->q.lock);
 inet_frag_put(&fq->q, &nf_frags);
 return var_44;
}
EXPORT_SYMBOL_GPL(nf_ct_frag6_gather);

static int fn_39(struct struct_41 *net)
{
 int res;

 net->nf_frag.frags.high_thresh = IPV6_FRAG_HIGH_THRESH;
 net->nf_frag.frags.low_thresh = IPV6_FRAG_LOW_THRESH;
 net->nf_frag.frags.timeout = IPV6_FRAG_TIMEOUT;
 res = inet_frags_init_net(&net->nf_frag.frags);
 if (res)
  return res;
 res = nf_ct_frag6_sysctl_register(net);
 if (res)
  inet_frags_uninit_net(&net->nf_frag.frags);
 return res;
}

static void fn_40(struct struct_41 *net)
{
 nf_ct_frags6_sysctl_unregister(net);
 inet_frags_exit_net(&net->nf_frag.frags, &nf_frags);
}

static struct struct_41 var_45 = {
 .init = nf_ct_net_init,
 .exit = nf_ct_net_exit,
};

int fn_43(void)
{
 int var_44 = 0;

 nf_frags.hashfn = nf_hashfn;
 nf_frags.constructor = ip6_frag_init;
 nf_frags.destructor = NULL;
 nf_frags.qsize = sizeof(struct struct_44);
 nf_frags.match = ip6_frag_match;
 nf_frags.frag_expire = nf_ct_frag6_expire;
 nf_frags.frags_cache_name = nf_frags_cache_name;
 var_44 = inet_frags_init(&nf_frags);
 if (var_44)
  goto out;
 var_44 = register_pernet_subsys(&var_45);
 if (var_44)
  inet_frags_fini(&nf_frags);

out:
 return var_44;
}

void fn_44(void)
{
 unregister_pernet_subsys(&var_45);
 inet_frags_fini(&nf_frags);
}
