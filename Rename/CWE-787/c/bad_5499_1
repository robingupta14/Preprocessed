







static enum enumtype_0 fn_1(unsigned int var_6,
      struct struct_7 *skb)
{
 u16 var_6 = var_5;

 if (nf_bridge_in_prerouting(skb))
  return IP6_DEFRAG_CONNTRACK_BRIDGE_IN + var_6;

 if (var_6 == NF_INET_PRE_ROUTING)
  return IP6_DEFRAG_CONNTRACK_IN + var_6;
 else
  return IP6_DEFRAG_CONNTRACK_OUT + var_6;
}

static unsigned int fn_6(void *priv,
    struct struct_7 *skb,
    const struct struct_7 *state)
{
 int err;







 err = nf_ct_frag6_gather(state->net, skb,
     nf_ct6_defrag_user(state->hook, skb));

 if (err == -EINPROGRESS)
  return NF_STOLEN;

 return NF_ACCEPT;
}

static struct struct_8 ipv6_defrag_ops[] = {
 {
  .hook = ipv6_defrag,
  .pf = NFPROTO_IPV6,
  .hooknum = NF_INET_PRE_ROUTING,
  .priority = NF_IP6_PRI_CONNTRACK_DEFRAG,
 },
 {
  .hook = ipv6_defrag,
  .pf = NFPROTO_IPV6,
  .hooknum = NF_INET_LOCAL_OUT,
  .priority = NF_IP6_PRI_CONNTRACK_DEFRAG,
 },
};

static int __init fn_9(void)
{
 int var_11 = 0;

 var_11 = nf_ct_frag6_init();
 if (var_11 < 0) {
  pr_err("nf_defrag_ipv6: can't initialize frag6.\n");
  return var_11;
 }
 var_11 = nf_register_hooks(ipv6_defrag_ops, ARRAY_SIZE(ipv6_defrag_ops));
 if (var_11 < 0) {
  pr_err("nf_defrag_ipv6: can't register hooks\n");
  goto cleanup_frag6;
 }
 return var_11;

cleanup_frag6:
 nf_ct_frag6_cleanup();
 return var_11;

}

static void __exit fn_11(void)
{
 nf_unregister_hooks(ipv6_defrag_ops, ARRAY_SIZE(ipv6_defrag_ops));
 nf_ct_frag6_cleanup();
}

void fn_12(void)
{
}
EXPORT_SYMBOL_GPL(nf_defrag_ipv6_enable);

module_init(nf_defrag_init);
module_exit(nf_defrag_fini);

MODULE_LICENSE("GPL");
