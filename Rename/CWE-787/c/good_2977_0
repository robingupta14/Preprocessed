







struct struct_29 {
 struct struct_20 *hash;
};

static inline void *fn_2(void *p, unsigned int var_4)
{
 return (void *)ALIGN((unsigned long)p, var_4);
}

static inline struct struct_29 *fn_4(struct struct_20 *tfm)
{
 return align_ptr(crypto_shash_ctx_aligned(tfm) +
    crypto_shash_statesize(tfm) * 2,
    crypto_tfm_ctx_alignment());
}

static int fn_5(struct struct_20 *parent,
         const u8 *inkey, unsigned int var_10)
{
 int var_10 = crypto_shash_blocksize(parent);
 int var_29 = crypto_shash_digestsize(parent);
 int var_29 = crypto_shash_statesize(parent);
 char *ipad = crypto_shash_ctx_aligned(parent);
 char *opad = ipad + var_29;
 struct struct_29 *ctx = align_ptr(opad + var_29,
      crypto_tfm_ctx_alignment());
 struct struct_20 *hash = ctx->hash;
 SHASH_DESC_ON_STACK(shash, hash);
 unsigned int i;

 shash->tfm = hash;
 shash->flags = crypto_shash_get_flags(parent)
  & CRYPTO_TFM_REQ_MAY_SLEEP;

 if (var_10 > var_10) {
  int err;

  err = crypto_shash_digest(shash, inkey, var_10, ipad);
  if (err)
   return err;

  var_10 = var_29;
 } else
  memcpy(ipad, inkey, var_10);

 memset(ipad + var_10, 0, var_10 - var_10);
 memcpy(opad, ipad, var_10);

 for (i = 0; i < var_10; i++) {
  ipad[i] ^= HMAC_IPAD_VALUE;
  opad[i] ^= HMAC_OPAD_VALUE;
 }

 return crypto_shash_init(shash) ?:
        crypto_shash_update(shash, ipad, var_10) ?:
        crypto_shash_export(shash, ipad) ?:
        crypto_shash_init(shash) ?:
        crypto_shash_update(shash, opad, var_10) ?:
        crypto_shash_export(shash, opad);
}

static int fn_10(struct struct_22 *pdesc, void *out)
{
 struct struct_22 *desc = shash_desc_ctx(pdesc);

 desc->flags = pdesc->flags & CRYPTO_TFM_REQ_MAY_SLEEP;

 return crypto_shash_export(desc, out);
}

static int fn_12(struct struct_22 *pdesc, const void *in)
{
 struct struct_22 *desc = shash_desc_ctx(pdesc);
 struct struct_29 *ctx = hmac_ctx(pdesc->tfm);

 desc->tfm = ctx->hash;
 desc->flags = pdesc->flags & CRYPTO_TFM_REQ_MAY_SLEEP;

 return crypto_shash_import(desc, in);
}

static int fn_13(struct struct_22 *pdesc)
{
 return hmac_import(pdesc, crypto_shash_ctx_aligned(pdesc->tfm));
}

static int fn_14(struct struct_22 *pdesc,
         const u8 *data, unsigned int var_18)
{
 struct struct_22 *desc = shash_desc_ctx(pdesc);

 desc->flags = pdesc->flags & CRYPTO_TFM_REQ_MAY_SLEEP;

 return crypto_shash_update(desc, data, var_18);
}

static int fn_16(struct struct_22 *pdesc, u8 *out)
{
 struct struct_20 *parent = pdesc->tfm;
 int var_29 = crypto_shash_digestsize(parent);
 int var_29 = crypto_shash_statesize(parent);
 char *opad = crypto_shash_ctx_aligned(parent) + var_29;
 struct struct_22 *desc = shash_desc_ctx(pdesc);

 desc->flags = pdesc->flags & CRYPTO_TFM_REQ_MAY_SLEEP;

 return crypto_shash_final(desc, out) ?:
        crypto_shash_import(desc, opad) ?:
        crypto_shash_finup(desc, out, var_29, out);
}

static int fn_17(struct struct_22 *pdesc, const u8 *data,
        unsigned int var_18, u8 *out)
{

 struct struct_20 *parent = pdesc->tfm;
 int var_29 = crypto_shash_digestsize(parent);
 int var_29 = crypto_shash_statesize(parent);
 char *opad = crypto_shash_ctx_aligned(parent) + var_29;
 struct struct_22 *desc = shash_desc_ctx(pdesc);

 desc->flags = pdesc->flags & CRYPTO_TFM_REQ_MAY_SLEEP;

 return crypto_shash_finup(desc, data, var_18, out) ?:
        crypto_shash_import(desc, opad) ?:
        crypto_shash_finup(desc, out, var_29, out);
}

static int fn_18(struct struct_23 *tfm)
{
 struct struct_20 *parent = __crypto_shash_cast(tfm);
 struct struct_20 *hash;
 struct struct_20 *inst = (void *)tfm->__crt_alg;
 struct struct_21 *spawn = crypto_instance_ctx(inst);
 struct struct_29 *ctx = hmac_ctx(parent);

 hash = crypto_spawn_shash(spawn);
 if (IS_ERR(hash))
  return PTR_ERR(hash);

 parent->descsize = sizeof(struct struct_22) +
      crypto_shash_descsize(hash);

 ctx->hash = hash;
 return 0;
}

static void fn_22(struct struct_23 *tfm)
{
 struct struct_29 *ctx = hmac_ctx(__crypto_shash_cast(tfm));
 crypto_free_shash(ctx->hash);
}

static int fn_23(struct struct_29 *tmpl, struct struct_25 **tb)
{
 struct struct_26 *inst;
 struct struct_27 *alg;
 struct struct_28 *salg;
 int err;
 int var_29;
 int var_29;

 err = crypto_check_attr_type(tb, CRYPTO_ALG_TYPE_SHASH);
 if (err)
  return err;

 salg = shash_attr_alg(tb[1], 0, 0);
 if (IS_ERR(salg))
  return PTR_ERR(salg);
 alg = &salg->base;


 err = -EINVAL;
 if (crypto_shash_alg_has_setkey(salg))
  goto out_put_alg;

 var_29 = salg->digestsize;
 var_29 = salg->statesize;
 if (var_29 > alg->cra_blocksize ||
     var_29 < alg->cra_blocksize)
  goto out_put_alg;

 inst = shash_alloc_instance("hmac", alg);
 err = PTR_ERR(inst);
 if (IS_ERR(inst))
  goto out_put_alg;

 err = crypto_init_shash_spawn(shash_instance_ctx(inst), salg,
          shash_crypto_instance(inst));
 if (err)
  goto out_free_inst;

 inst->alg.base.cra_priority = alg->cra_priority;
 inst->alg.base.cra_blocksize = alg->cra_blocksize;
 inst->alg.base.cra_alignmask = alg->cra_alignmask;

 var_29 = ALIGN(var_29, alg->cra_alignmask + 1);
 inst->alg.digestsize = var_29;
 inst->alg.statesize = var_29;

 inst->alg.base.cra_ctxsize = sizeof(struct struct_29) +
         ALIGN(var_29 * 2, crypto_tfm_ctx_alignment());

 inst->alg.base.cra_init = hmac_init_tfm;
 inst->alg.base.cra_exit = hmac_exit_tfm;

 inst->alg.init = hmac_init;
 inst->alg.update = hmac_update;
 inst->alg.final = hmac_final;
 inst->alg.finup = hmac_finup;
 inst->alg.export = hmac_export;
 inst->alg.import = hmac_import;
 inst->alg.setkey = hmac_setkey;

 err = shash_register_instance(tmpl, inst);
 if (err) {
out_free_inst:
  shash_free_instance(shash_crypto_instance(inst));
 }

out_put_alg:
 crypto_mod_put(alg);
 return err;
}

static struct struct_29 var_32 = {
 .name = "hmac",
 .create = hmac_create,
 .free = shash_free_instance,
 .module = THIS_MODULE,
};

static int __init fn_30(void)
{
 return crypto_register_template(&var_32);
}

static void __exit fn_31(void)
{
 crypto_unregister_template(&var_32);
}

module_init(hmac_module_init);
module_exit(hmac_module_exit);

MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("HMAC hash algorithm");
MODULE_ALIAS_CRYPTO("hmac");
