







extern FILE *writable;
FILE * fn_0();
extern void fn_1(unsigned char *s, int var_2);

struct struct_25 {
 char buf[1024];
 int inbuf;
 struct struct_25 *cp;
};

static void fn_5(struct struct_25* pp, char *buf, int var_29){
 if((pp->inbuf + var_29 > 1024) || !buf) {
  socksend(pp->cp->clisock, (unsigned char *)pp->buf, pp->inbuf, conf.timeouts[STRING_S]);
  pp->inbuf = 0;
  if(!buf) return;
 }
 if(var_29 >= 1000){
  socksend(pp->cp->clisock, (unsigned char *)buf, var_29, conf.timeouts[STRING_S]);
 }
 else {
  memcpy(pp->buf + pp->inbuf, buf, var_29);
  pp->inbuf += var_29;
 }
}

static void fn_7(void *cb, char *buf, int var_29){
 int var_9 = 0;
 int i;

 for(i = 0; i < var_29; i++){
  switch(buf[i]){
   case '&':
    if(var_9){
     stdpr((struct struct_25*)cb, buf+i-var_9, var_9);
     var_9 = 0;
    }
    stdpr((struct struct_25*)cb, "&amp;", 5);
    break;
   case '<':
    if(var_9){
     stdpr((struct struct_25*)cb, buf+i-var_9, var_9);
     var_9 = 0;
    }
    stdpr((struct struct_25*)cb, "&lt;", 4);
    break;
   case '>':
    if(var_9){
     stdpr((struct struct_25*)cb, buf+i-var_9, var_9);
     var_9 = 0;
    }
    stdpr((struct struct_25*)cb, "&gt;", 4);
    break;
   default:
    var_9++;
    break;
  }
 }
 if(var_9){
  stdpr((struct struct_25*)cb, buf+i-var_9, var_9);
 }
}

static void fn_9(struct struct_25* pp, char* str){
 stdpr(pp, str, str?(int)strlen(str):0);
}

static void fn_10(void *value, int var_15, int var_15, struct struct_25* pp){
 struct struct_13 pn, cn;
 struct struct_14 *p;
 int i;

 pn.iteration = NULL;
 pn.parent = NULL;
 pn.type = var_15;
 pn.value = value;

 printstr(pp, "<item>");
 for(p = datatypes[var_15].properties; p; ) {
  cn.iteration = NULL;
  cn.parent = &pn;
  cn.type = p->type;
  cn.value = (*p->e_f)(&pn);
  if(cn.value){
   for(i = 0; i < var_15; i++) printstr(pp, "\t");
   if(strcmp(p->name, "next")){
    printstr(pp, "<parameter>");
    printstr(pp, "<name>");
    printstr(pp, p->name);
    printstr(pp, "</name>");
    printstr(pp, "<type>");
    printstr(pp, datatypes[p->type].type);
    printstr(pp, "</type>");
    printstr(pp, "<description>");
    printstr(pp, p->description);
    printstr(pp, "</description>");
   }
   if(datatypes[p->type].p_f){
    printstr(pp, "<value><![CDATA[");
    (*datatypes[p->type].p_f)(&cn, stdcbf, pp);
    printstr(pp, "]]></value>\n");
    printstr(pp, "</parameter>");
   }
   else {
    if(!strcmp(p->name, "next")){

     printstr(pp, "</item>\n<item>");
     p = datatypes[var_15].properties;
     pn.value = value = cn.value;
     continue;
    }
    else {
     printstr(pp, "\n");
     printval(cn.value, cn.type, var_15+1, pp);
     printstr(pp, "</parameter>");
    }
   }
  }
  p=p->next;
 }
 printstr(pp, "</item>");
}


char * admin_stringtable[]={
 "HTTP/1.0 401 Authentication Required\r\n"
 "WWW-Authenticate: Basic realm=\"proxy\"\r\n"
 "Connection: close\r\n"
 "Content-type: text/html; charset=us-ascii\r\n"
 "\r\n"
 "<html><head><title>401 Authentication Required</title></head>\r\n"
 "<body><h2>401 Authentication Required</h2><h3>Access to requested resource disallowed by administrator or you need valid username/password to use this resource</h3></body></html>\r\n",

 "HTTP/1.0 200 OK\r\n"
 "Connection: close\r\n"
 "Expires: Thu, 01 Dec 1994 16:00:00 GMT\r\n"
 "Cache-Control: no-cache\r\n"
 "Content-type: text/html\r\n"
 "\r\n"
 "<http><head><title>%s configuration page</title></head>\r\n"
 "<table width=\'100%%\' border=\'0\'>\r\n"
 "<tr><td width=\'150\' valign=\'top\'>\r\n"
 "<h2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
 "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</h2>\r\n"
 "<A HREF=\'/C'>Counters</A><br>\r\n"
 "<A HREF=\'/R'>Reload</A><br>\r\n"
 "<A HREF=\'/S'>Running Services</A><br>\r\n"
 "<A HREF=\'/F'>Config</A>\r\n"
 "</td><td>"
 "<h2>%s %s configuration</h2>",

 "HTTP/1.0 200 OK\r\n"
 "Connection: close\r\n"
 "Cache-Control: no-cache\r\n"
 "Content-type: text/xml\r\n"
 "\r\n"
 "<?xml version=\"1.0\"?>\r\n"
 "<?xml-stylesheet href=\"/SX\" type=\"text/css\"?>\r\n"
 "<services>\r\n"
 "<description>Services currently running and connected clients</description>\r\n",

 "</services>\r\n",


 "HTTP/1.0 200 OK\r\n"
 "Connection: close\r\n"
 "Cache-Control: no-cache\r\n"
 "Content-type: text/css\r\n"
 "\r\n"
 "services {\r\n"
 "	display: block;\r\n"
 "	margin: 10px auto 10px auto;\r\n"
 "	width: 80%;\r\n"
 "	background: black;\r\n"
 "	font-family: sans-serif;\r\n"
 "	font-size: small;\r\n"
 "	color: silver;\r\n"
 "	}\r\n"
 "item {\r\n"
 "	display: block;\r\n"
 "	margin-bottom: 10px;\r\n"
 "	border: 2px solid #CCC;\r\n"
 "	padding: 10px;\r\n"
 "	spacing: 2px;\r\n"
 "	}\r\n"
 "parameter {\r\n"
 "	display: block;\r\n"
 "	padding: 2px;\r\n"
 "	margin-top: 10px;\r\n"
 "	border: 1px solid grey;\r\n"
 "	background: #EEE;\r\n"
 "	color: black;\r\n"
 "	}\r\n"
 "name {\r\n"
 "	display: inline;\r\n"
 "	float: left;\r\n"
 "	margin-right: 5px;\r\n"
 "	font-weight: bold;\r\n"
 "	}\r\n"
 "type {\r\n"
 "	display: inline;\r\n"
 "	font-size: x-small;\r\n"
 "	margin-right: 5px;\r\n"
 "	color: #666;\r\n"
 "	white-space: nowrap;\r\n"
 "	font-style: italic;\r\n"
 "	}\r\n"
 "description {\r\n"
 "	display: inline;\r\n"
 "	margin-right: 5px;\r\n"
 "	white-space: nowrap;\r\n"
 "	}\r\n"
 "value {\r\n"
 "	display: block;\r\n"
 "	margin-right: 5px;\r\n"
 "	}\r\n",


 "<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />\r\n"
 "<pre><font size=\'-2\'><b>"
 COPYRIGHT
 "</b></font>\r\n"
 "</td></tr></table></body></html>",

 "<h3>Counters</h3>\r\n"
 "<table border = \'1\'>\r\n"
 "<tr align=\'center\'><td>Description</td><td>Active</td>"
 "<td>Users</td><td>Source Address</td><td>Destination Address</td>"
 "<td>Port</td>"
 "<td>Limit</td><td>Units</td><td>Value</td>"
 "<td>Reset</td><td>Updated</td><td>Num</td></tr>\r\n",

 "</table>\r\n",

 NULL
};

static int fn_15(char *buf, int var_24, struct struct_17* pl, char * delim){
 int var_24 = 0;

 for(; pl; pl = pl->next){
  if(var_24 > (var_24 - 64)) break;
  if(pl->startport != pl->endport)
   var_24 += sprintf(buf+var_24, "%hu-%hu%s", pl->startport, pl->endport, pl->next?delim:"");
  else {





   var_24 += sprintf(buf+var_24, "%hu%s", pl->startport, pl->next?delim:"");
  }
  if(var_24 > (var_24 - 64)) {
   var_24 += sprintf(buf+var_24, "...");
   break;
  }
 }
 return var_24;
}


static int fn_19(char *buf, int var_24, struct struct_20* ul, char * delim){
 int var_24 = 0;

 for(; ul; ul = ul->next){
  if(var_24 > (var_24 - 64)) break;
  var_24 += sprintf(buf+var_24, "%s%s", ul->user, ul->next?delim:"");
  if(var_24 > (var_24 - 64)) {
   var_24 += sprintf(buf+var_24, "...");
   break;
  }
 }
 return var_24;
}


int fn_21(char *buf, struct struct_24* ipl);

static int fn_23(char *buf, int var_24, struct struct_24* ipl, char * delim){
 int var_24 = 0;
 for(; ipl; ipl = ipl->next){
  if(var_24 > (var_24 - 128)) break;
  var_24 += printiple(buf+var_24, ipl);
  if(var_24 > (var_24 - 128)) {
   var_24 += sprintf(buf+var_24, "...");
   break;
  }
 }
 return var_24;
}

void * fn_24(struct struct_25* param) {
 int i, res;
 char * buf;
 char username[256];
 char *sb;
 char *req = NULL;
 struct struct_25 pp;
 int var_31 = 0;
 int var_27 = 0;

 pp.inbuf = 0;
 pp.cp = param;

 buf = myalloc(2048);
 if(!buf) {{ param->res = 555; goto CLEANRET; };}
 i = sockgetlinebuf(param, CLIENT, (unsigned char *)buf, 2047, '\n', conf.timeouts[STRING_S]);
 if(i<5 || ((buf[0]!='G' || buf[1]!='E' || buf[2]!='T' || buf[3]!=' ' || buf[4]!='/') &&
    (buf[0]!='P' || buf[1]!='O' || buf[2]!='S' || buf[3]!='T' || buf[4]!=' ' || buf[5]!='/')))
 {
 { param->res = 701; goto CLEANRET; };
 }
 buf[i] = 0;
 sb = strchr(buf+5, ' ');
 if(!sb){
 { param->res = 702; goto CLEANRET; };
 }
 *sb = 0;
 req = mystrdup(buf + ((*buf == 'P')? 6 : 5));
 while((i = sockgetlinebuf(param, CLIENT, (unsigned char *)buf, 2047, '\n', conf.timeouts[STRING_S])) > 2){
 buf[i] = 0;
 if(i > 19 && (!strncasecmp(buf, "authorization", 13))){
  sb = strchr(buf, ':');
  if(!sb)continue;
  ++sb;
  while(isspace(*sb))sb++;
  if(!*sb || strncasecmp(sb, "basic", 5)){
   continue;
  }
  sb+=5;
  while(isspace(*sb))sb++;
  i = de64((unsigned char *)sb, (unsigned char *)username, 255);
  if(i<=0)continue;
  username[i] = 0;
  sb = strchr((char *)username, ':');
  if(sb){
   *sb = 0;
   if(param->password)myfree(param->password);
   param->password = (unsigned char *)mystrdup(sb+1);
  }
  if(param->username) myfree(param->username);
  param->username = (unsigned char *)mystrdup(username);
  continue;
 }
 else if(i > 15 && (!strncasecmp(buf, "content-length:", 15))){
  sb = buf + 15;
  while(isspace(*sb))sb++;
  var_31 = atoi(sb);
 }
 else if(i > 13 && (!strncasecmp(buf, "content-type:", 13))){
  sb = buf + 13;
  while(isspace(*sb))sb++;
  if(!strncasecmp(sb, "x-www-form-urlencoded", 21)) var_27 = 1;
 }
 }
 param->operation = ADMIN;
 if(var_27 && var_31) {
 printstr(&pp, "HTTP/1.0 100 Continue\r\n\r\n");
 stdpr(&pp, NULL, 0);
 }
 res = (*param->srv->authfunc)(param);
 if(res && res != 10) {
 printstr(&pp, admin_stringtable[0]);
 { param->res = res; goto CLEANRET; };
 }
 if(param->srv->singlepacket || param->redirected){
 if(*req == 'C') req[1] = 0;
 else *req = 0;
 }
 sprintf(buf, admin_stringtable[1], conf.stringtable?(char *)conf.stringtable[2]:"3proxy", conf.stringtable?(char *)conf.stringtable[2]:"3[APA3A] tiny proxy", conf.stringtable?(char *)conf.stringtable[3]:"");
 if(*req != 'S') printstr(&pp, buf);
 switch(*req){
 case 'C':
  printstr(&pp, admin_stringtable[6]);
  {
   struct struct_27 *cp;
   int var_29 = 0;
   for(cp = conf.trafcounter; cp; cp = cp->next, var_29++){
    int var_29 = 0;

    if(cp->ace && (param->srv->singlepacket || param->redirected)){
    if(!ACLmatches(cp->ace, param))continue;
    }
    if(req[1] == 'S' && atoi(req+2) == var_29) cp->disabled=0;
    if(req[1] == 'D' && atoi(req+2) == var_29) cp->disabled=1;
    var_29 += sprintf(buf, "<tr>"
      "<td>%s</td><td><A HREF=\'/C%c%d\'>%s</A></td><td>",
      (cp->comment)?cp->comment:"&nbsp;",
      (cp->disabled)?'S':'D',
      var_29,
      (cp->disabled)?"NO":"YES"
     );
    if(!cp->ace || !cp->ace->users){
    var_29 += sprintf(buf+var_29, "<center>ANY</center>");
    }
    else {
    var_29 += printuserlist(buf+var_29, 1248, cp->ace->users, ",<br />\r\n");
    }
    var_29 += sprintf(buf+var_29, "</td><td>");
    if(!cp->ace || !cp->ace->src){
    var_29 += sprintf(buf+var_29, "<center>ANY</center>");
    }
    else {
    var_29 += printiplist(buf+var_29, 1536, cp->ace->src, ",<br />\r\n");
    }
    var_29 += sprintf(buf+var_29, "</td><td>");
    if(!cp->ace || !cp->ace->dst){
    var_29 += sprintf(buf+var_29, "<center>ANY</center>");
    }
    else {
    var_29 += printiplist(buf+var_29, 1536, cp->ace->dst, ",<br />\r\n");
    }
    var_29 += sprintf(buf+var_29, "</td><td>");
    if(!cp->ace || !cp->ace->ports){
    var_29 += sprintf(buf+var_29, "<center>ANY</center>");
    }
    else {
    var_29 += printportlist(buf+var_29, 1920, cp->ace->ports, ",<br />\r\n");
    }
    if(cp->type == NONE) {
     var_29 += sprintf(buf+var_29,
     "</td><td colspan=\'6\' align=\'center\'>exclude from limitation</td></tr>\r\n"
     );
    }
    else {
     var_29 += sprintf(buf+var_29,
     "</td><td>%"PRINTF_INT64_MODIFIER"u</td>"
     "<td>MB%s</td>"
     "<td>%"PRINTF_INT64_MODIFIER"u</td>"
     "<td>%s</td>",
     cp->traflim64 / 1048576,
     rotations[cp->type],
     cp->traf64,
     cp->cleared?ctime(&cp->cleared):"never"
    );
    var_29 += sprintf(buf + var_29,
     "<td>%s</td>"
     "<td>%i</td>"
     "</tr>\r\n",

     cp->updated?ctime(&cp->updated):"never",
     cp->number
    );
    }
    printstr(&pp, buf);
   }

  }
  printstr(&pp, admin_stringtable[7]);
  break;

 case 'R':
  conf.needreload = 1;
  printstr(&pp, "<h3>Reload scheduled</h3>");
  break;
 case 'S':
  {
   if(req[1] == 'X'){
    printstr(&pp, admin_stringtable[4]);
    break;
   }
   printstr(&pp, admin_stringtable[2]);
   printval(conf.services, TYPE_SERVER, 0, &pp);
   printstr(&pp, admin_stringtable[3]);
  }
   break;
 case 'F':
  {
   FILE *fp;
   char buf[256];

   fp = confopen();
   if(!fp){
    printstr(&pp, "<h3><font color=\"red\">Failed to open config file</font></h3>");
    break;
   }
    printstr(&pp, "<h3>Please be careful editing config file remotely</h3>");
    printstr(&pp, "<form method=\"POST\" action=\"/U\"><textarea cols=\"80\" rows=\"30\" name=\"conffile\">");
    while(fgets(buf, 256, fp)){
     printstr(&pp, buf);
    }
    if(!writable) fclose(fp);
    printstr(&pp, "</textarea><br><input type=\"Submit\"></form>");
   break;
  }
 case 'U':
  {
   int var_31=0;
   int var_31 = 0;

   if(!writable || fseek(writable, 0, 0)){
    var_31 = 1;
   }
   while((i = sockgetlinebuf(param, CLIENT, (unsigned char *)buf, 2047, '+', conf.timeouts[STRING_S])) > 0){
    if(i > (var_31 - var_31)) i = (var_31 - var_31);
    buf[i] = 0;
    if(!var_31){
     if(strncasecmp(buf, "conffile=", 9)) var_31 = 1;
    }
    if(!var_31){
     decodeurl((unsigned char *)buf, 1);
     fprintf(writable, "%s", var_31? buf : buf + 9);
    }
    var_31 += i;
    if(var_31 >= var_31) break;
   }
   if(writable && !var_31){
    fflush(writable);

    ftruncate(fileno(writable), ftell(writable));

   }
   printstr(&pp, var_31? "<h3><font color=\"red\">Config file is not writable</font></h3>Make sure you have \"writable\" command in configuration file":
      "<h3>Configuration updated</h3>");

  }
  break;
 default:
  printstr(&pp, (char *)conf.stringtable[WEBBANNERS]);
  break;
 }
 if(*req != 'S') printstr(&pp, admin_stringtable[5]);

CLEANRET:


 printstr(&pp, NULL);
 if(buf) myfree(buf);
 (*param->srv->logfunc)(param, (unsigned char *)req);
 if(req)myfree(req);
 freeparam(param);
 return (NULL);
}
