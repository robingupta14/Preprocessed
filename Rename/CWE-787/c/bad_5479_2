







static int fn_24(TIFF* tif, uint32 var_24, const char* module);
static int fn_24(TIFF* tif, uint32 var_25, uint8* data, tmsize_t var_25);

int
fn_5(TIFF* tif, void* buf, uint32 var_9, uint16 var_18)
{
 static const char module[] = "TIFFWriteScanline";
 register TIFFDirectory *td;
 int status, var_9 = 0;
 uint32 var_25;

 if (!(((tif)->tif_flags&TIFF_BEENWRITING) || TIFFWriteCheck((tif),0,module)))
  return -1;





 if (!((((tif)->tif_flags & TIFF_BUFFERSETUP) && tif->tif_rawdata) || TIFFWriteBufferSetup((tif), NULL, (tmsize_t) -1)))
  return -1;
        tif->tif_flags |= TIFF_BUF4WRITE;

 td = &tif->tif_dir;




 if (var_9 >= td->td_imagelength) {
  if (td->td_planarconfig == PLANARCONFIG_SEPARATE) {
   TIFFErrorExt(tif->tif_clientdata, module,
       "Can not change \"ImageLength\" when using separate planes");
   return -1;
  }
  td->td_imagelength = var_9+1;
  var_9 = 1;
 }



 if (td->td_planarconfig == PLANARCONFIG_SEPARATE) {
  if (var_18 >= td->td_samplesperpixel) {
   TIFFErrorExt(tif->tif_clientdata, module,
       "%lu: Sample out of range, max %lu",
       (unsigned long) var_18, (unsigned long) td->td_samplesperpixel);
   return -1;
  }
  var_25 = var_18*td->td_stripsperimage + var_9/td->td_rowsperstrip;
 } else
  var_25 = var_9 / td->td_rowsperstrip;







 if (var_25 >= td->td_nstrips && !TIFFGrowStrips(tif, 1, module))
  return -1;
 if (var_25 != tif->tif_curstrip) {



  if (!TIFFFlushData(tif))
   return -1;
  tif->tif_curstrip = var_25;





  if (var_25 >= td->td_stripsperimage && var_9)
   td->td_stripsperimage =
       TIFFhowmany_32(td->td_imagelength,td->td_rowsperstrip);
                if (td->td_stripsperimage == 0) {
                        TIFFErrorExt(tif->tif_clientdata, module, "Zero strips per image");
                        return -1;
                }
  tif->tif_row =
      (var_25 % td->td_stripsperimage) * td->td_rowsperstrip;
  if ((tif->tif_flags & TIFF_CODERSETUP) == 0) {
   if (!(*tif->tif_setupencode)(tif))
    return -1;
   tif->tif_flags |= TIFF_CODERSETUP;
  }

  tif->tif_rawcc = 0;
  tif->tif_rawcp = tif->tif_rawdata;

  if( td->td_stripbytecount[var_25] > 0 )
  {

   td->td_stripbytecount[var_25] = 0;


   tif->tif_curoff = 0;
  }

  if (!(*tif->tif_preencode)(tif, var_18))
   return -1;
  tif->tif_flags |= TIFF_POSTENCODE;
 }





 if (var_9 != tif->tif_row) {
  if (var_9 < tif->tif_row) {





   tif->tif_row = (var_25 % td->td_stripsperimage) *
       td->td_rowsperstrip;
   tif->tif_rawcp = tif->tif_rawdata;
  }



  if (!(*tif->tif_seek)(tif, var_9 - tif->tif_row))
   return -1;
  tif->tif_row = var_9;
 }


 tif->tif_postdecode( tif, (uint8*) buf, tif->tif_scanlinesize );

 status = (*tif->tif_encoderow)(tif, (uint8*) buf,
     tif->tif_scanlinesize, var_18);


 tif->tif_row = var_9 + 1;
 return (status);
}







tmsize_t
fn_9(TIFF* tif, uint32 var_25, void* data, tmsize_t var_25)
{
 static const char module[] = "TIFFWriteEncodedStrip";
 TIFFDirectory *td = &tif->tif_dir;
 uint16 var_18;

 if (!(((tif)->tif_flags&TIFF_BEENWRITING) || TIFFWriteCheck((tif),0,module)))
  return ((tmsize_t) -1);

 if (var_25 >= td->td_nstrips) {
  if (td->td_planarconfig == PLANARCONFIG_SEPARATE) {
   TIFFErrorExt(tif->tif_clientdata, module,
       "Can not grow image by strips when using separate planes");
   return ((tmsize_t) -1);
  }
  if (!TIFFGrowStrips(tif, 1, module))
   return ((tmsize_t) -1);
  td->td_stripsperimage =
      TIFFhowmany_32(td->td_imagelength, td->td_rowsperstrip);
 }





 if (!((((tif)->tif_flags & TIFF_BUFFERSETUP) && tif->tif_rawdata) || TIFFWriteBufferSetup((tif), NULL, (tmsize_t) -1)))
  return ((tmsize_t) -1);

        tif->tif_flags |= TIFF_BUF4WRITE;
 tif->tif_curstrip = var_25;

        if (td->td_stripsperimage == 0) {
                TIFFErrorExt(tif->tif_clientdata, module, "Zero strips per image");
                return ((tmsize_t) -1);
        }

 tif->tif_row = (var_25 % td->td_stripsperimage) * td->td_rowsperstrip;
 if ((tif->tif_flags & TIFF_CODERSETUP) == 0) {
  if (!(*tif->tif_setupencode)(tif))
   return ((tmsize_t) -1);
  tif->tif_flags |= TIFF_CODERSETUP;
 }

 if( td->td_stripbytecount[var_25] > 0 )
        {




            if( tif->tif_rawdatasize <= (tmsize_t)td->td_stripbytecount[var_25] )
            {
                if( !(TIFFWriteBufferSetup(tif, NULL,
                    (tmsize_t)TIFFroundup_64((uint64)(td->td_stripbytecount[var_25] + 1), 1024))) )
                    return ((tmsize_t)(-1));
            }



            tif->tif_curoff = 0;
        }

    tif->tif_rawcc = 0;
    tif->tif_rawcp = tif->tif_rawdata;

 tif->tif_flags &= ~TIFF_POSTENCODE;


    if( td->td_compression == COMPRESSION_NONE )
    {

        tif->tif_postdecode( tif, (uint8*) data, var_25 );

        if (!isFillOrder(tif, td->td_fillorder) &&
            (tif->tif_flags & TIFF_NOBITREV) == 0)
            TIFFReverseBits((uint8*) data, var_25);

        if (var_25 > 0 &&
            !TIFFAppendToStrip(tif, var_25, (uint8*) data, var_25))
            return ((tmsize_t) -1);
        return (var_25);
    }

 var_18 = (uint16)(var_25 / td->td_stripsperimage);
 if (!(*tif->tif_preencode)(tif, var_18))
  return ((tmsize_t) -1);


 tif->tif_postdecode( tif, (uint8*) data, var_25 );

 if (!(*tif->tif_encodestrip)(tif, (uint8*) data, var_25, var_18))
  return ((tmsize_t) -1);
 if (!(*tif->tif_postencode)(tif))
  return ((tmsize_t) -1);
 if (!isFillOrder(tif, td->td_fillorder) &&
     (tif->tif_flags & TIFF_NOBITREV) == 0)
  TIFFReverseBits(tif->tif_rawdata, tif->tif_rawcc);
 if (tif->tif_rawcc > 0 &&
     !TIFFAppendToStrip(tif, var_25, tif->tif_rawdata, tif->tif_rawcc))
  return ((tmsize_t) -1);
 tif->tif_rawcc = 0;
 tif->tif_rawcp = tif->tif_rawdata;
 return (var_25);
}






tmsize_t
fn_10(TIFF* tif, uint32 var_25, void* data, tmsize_t var_25)
{
 static const char module[] = "TIFFWriteRawStrip";
 TIFFDirectory *td = &tif->tif_dir;

 if (!(((tif)->tif_flags&TIFF_BEENWRITING) || TIFFWriteCheck((tif),0,module)))
  return ((tmsize_t) -1);

 if (var_25 >= td->td_nstrips) {
  if (td->td_planarconfig == PLANARCONFIG_SEPARATE) {
   TIFFErrorExt(tif->tif_clientdata, module,
       "Can not grow image by strips when using separate planes");
   return ((tmsize_t) -1);
  }





  if (var_25 >= td->td_stripsperimage)
   td->td_stripsperimage =
       TIFFhowmany_32(td->td_imagelength,td->td_rowsperstrip);
  if (!TIFFGrowStrips(tif, 1, module))
   return ((tmsize_t) -1);
 }
 tif->tif_curstrip = var_25;
        if (td->td_stripsperimage == 0) {
                TIFFErrorExt(tif->tif_clientdata, module,"Zero strips per image");
                return ((tmsize_t) -1);
        }
 tif->tif_row = (var_25 % td->td_stripsperimage) * td->td_rowsperstrip;
 return (TIFFAppendToStrip(tif, var_25, (uint8*) data, var_25) ?
     var_25 : (tmsize_t) -1);
}





tmsize_t
fn_11(TIFF* tif, void* buf, uint32 var_16, uint32 var_16, uint32 var_16, uint16 var_16)
{
 if (!TIFFCheckTile(tif, var_16, var_16, var_16, var_16))
  return ((tmsize_t)(-1));






 return (TIFFWriteEncodedTile(tif,
     TIFFComputeTile(tif, var_16, var_16, var_16, var_16), buf, (tmsize_t)(-1)));
}

tmsize_t
fn_16(TIFF* tif, uint32 var_19, void* data, tmsize_t var_25)
{
 static const char module[] = "TIFFWriteEncodedTile";
 TIFFDirectory *td;
 uint16 var_18;
        uint32 howmany32;

 if (!(((tif)->tif_flags&TIFF_BEENWRITING) || TIFFWriteCheck((tif),1,module)))
  return ((tmsize_t)(-1));
 td = &tif->tif_dir;
 if (var_19 >= td->td_nstrips) {
  TIFFErrorExt(tif->tif_clientdata, module, "Tile %lu out of range, max %lu",
      (unsigned long) var_19, (unsigned long) td->td_nstrips);
  return ((tmsize_t)(-1));
 }





 if (!((((tif)->tif_flags & TIFF_BUFFERSETUP) && tif->tif_rawdata) || TIFFWriteBufferSetup((tif), NULL, (tmsize_t) -1)))
  return ((tmsize_t)(-1));

        tif->tif_flags |= TIFF_BUF4WRITE;
 tif->tif_curtile = var_19;

 if( td->td_stripbytecount[var_19] > 0 )
        {




            if( tif->tif_rawdatasize <= (tmsize_t) td->td_stripbytecount[var_19] )
            {
                if( !(TIFFWriteBufferSetup(tif, NULL,
                    (tmsize_t)TIFFroundup_64((uint64)(td->td_stripbytecount[var_19] + 1), 1024))) )
                    return ((tmsize_t)(-1));
            }



            tif->tif_curoff = 0;
        }

 tif->tif_rawcc = 0;
 tif->tif_rawcp = tif->tif_rawdata;





        howmany32=TIFFhowmany_32(td->td_imagelength, td->td_tilelength);
        if (howmany32 == 0) {
                 TIFFErrorExt(tif->tif_clientdata,module,"Zero tiles");
                return ((tmsize_t)(-1));
        }
 tif->tif_row = (var_19 % howmany32) * td->td_tilelength;
        howmany32=TIFFhowmany_32(td->td_imagewidth, td->td_tilewidth);
        if (howmany32 == 0) {
                 TIFFErrorExt(tif->tif_clientdata,module,"Zero tiles");
                return ((tmsize_t)(-1));
        }
 tif->tif_col = (var_19 % howmany32) * td->td_tilewidth;

 if ((tif->tif_flags & TIFF_CODERSETUP) == 0) {
  if (!(*tif->tif_setupencode)(tif))
   return ((tmsize_t)(-1));
  tif->tif_flags |= TIFF_CODERSETUP;
 }
 tif->tif_flags &= ~TIFF_POSTENCODE;






 if ( var_25 < 1 || var_25 > tif->tif_tilesize)
  var_25 = tif->tif_tilesize;


    if( td->td_compression == COMPRESSION_NONE )
    {

        tif->tif_postdecode( tif, (uint8*) data, var_25 );

        if (!isFillOrder(tif, td->td_fillorder) &&
            (tif->tif_flags & TIFF_NOBITREV) == 0)
            TIFFReverseBits((uint8*) data, var_25);

        if (var_25 > 0 &&
            !TIFFAppendToStrip(tif, var_19, (uint8*) data, var_25))
            return ((tmsize_t) -1);
        return (var_25);
    }

    var_18 = (uint16)(var_19/td->td_stripsperimage);
    if (!(*tif->tif_preencode)(tif, var_18))
        return ((tmsize_t)(-1));

 tif->tif_postdecode( tif, (uint8*) data, var_25 );

 if (!(*tif->tif_encodetile)(tif, (uint8*) data, var_25, var_18))
  return ((tmsize_t) -1);
 if (!(*tif->tif_postencode)(tif))
  return ((tmsize_t)(-1));
 if (!isFillOrder(tif, td->td_fillorder) &&
     (tif->tif_flags & TIFF_NOBITREV) == 0)
  TIFFReverseBits((uint8*)tif->tif_rawdata, tif->tif_rawcc);
 if (tif->tif_rawcc > 0 && !TIFFAppendToStrip(tif, var_19,
     tif->tif_rawdata, tif->tif_rawcc))
  return ((tmsize_t)(-1));
 tif->tif_rawcc = 0;
 tif->tif_rawcp = tif->tif_rawdata;
 return (var_25);
}

tmsize_t
fn_18(TIFF* tif, uint32 var_19, void* data, tmsize_t var_25)
{
 static const char module[] = "TIFFWriteRawTile";

 if (!(((tif)->tif_flags&TIFF_BEENWRITING) || TIFFWriteCheck((tif),1,module)))
  return ((tmsize_t)(-1));
 if (var_19 >= tif->tif_dir.td_nstrips) {
  TIFFErrorExt(tif->tif_clientdata, module, "Tile %lu out of range, max %lu",
      (unsigned long) var_19,
      (unsigned long) tif->tif_dir.td_nstrips);
  return ((tmsize_t)(-1));
 }
 return (TIFFAppendToStrip(tif, var_19, (uint8*) data, var_25) ?
     var_25 : (tmsize_t)(-1));
}




int
fn_19(TIFF* tif)
{
 TIFFDirectory* td = &tif->tif_dir;

 if (isTiled(tif))
  td->td_stripsperimage =
      (TIFFFieldSet(tif,FIELD_TILEDIMENSIONS) && (tif)->tif_dir.td_imagelength == 0) ?
   td->td_samplesperpixel : TIFFNumberOfTiles(tif);
 else
  td->td_stripsperimage =
      (TIFFFieldSet(tif,FIELD_ROWSPERSTRIP) && (tif)->tif_dir.td_imagelength == 0) ?
   td->td_samplesperpixel : TIFFNumberOfStrips(tif);
 td->td_nstrips = td->td_stripsperimage;
 if (td->td_planarconfig == PLANARCONFIG_SEPARATE)
  td->td_stripsperimage /= td->td_samplesperpixel;
 td->td_stripoffset = (uint64 *)
     _TIFFmalloc(td->td_nstrips * sizeof (uint64));
 td->td_stripbytecount = (uint64 *)
     _TIFFmalloc(td->td_nstrips * sizeof (uint64));
 if (td->td_stripoffset == NULL || td->td_stripbytecount == NULL)
  return 0;




 _TIFFmemset(td->td_stripoffset, 0, td->td_nstrips*sizeof (uint64));
 _TIFFmemset(td->td_stripbytecount, 0, td->td_nstrips*sizeof (uint64));
 TIFFSetFieldBit(tif, FIELD_STRIPOFFSETS);
 TIFFSetFieldBit(tif, FIELD_STRIPBYTECOUNTS);
 return 1;
}

int
fn_20(TIFF* tif, int var_22, const char* module)
{
 if (tif->tif_mode == O_RDONLY) {
  TIFFErrorExt(tif->tif_clientdata, module, "File not open for writing");
  return 0;
 }
 if (var_22 ^ isTiled(tif)) {
  TIFFErrorExt(tif->tif_clientdata, module, var_22 ?
      "Can not write tiles to a stripped image" :
      "Can not write scanlines to a tiled image");
  return 0;
 }

        _TIFFFillStriles( tif );

 if (!TIFFFieldSet(tif, FIELD_IMAGEDIMENSIONS)) {
  TIFFErrorExt(tif->tif_clientdata, module,
      "Must set \"ImageWidth\" before writing data");
  return 0;
 }
 if (tif->tif_dir.td_samplesperpixel == 1) {






  if (!TIFFFieldSet(tif, FIELD_PLANARCONFIG))
                    tif->tif_dir.td_planarconfig = PLANARCONFIG_CONTIG;
 } else {
  if (!TIFFFieldSet(tif, FIELD_PLANARCONFIG)) {
   TIFFErrorExt(tif->tif_clientdata, module,
       "Must set \"PlanarConfiguration\" before writing data");
   return 0;
  }
 }
 if (tif->tif_dir.td_stripoffset == NULL && !TIFFSetupStrips(tif)) {
  tif->tif_dir.td_nstrips = 0;
  TIFFErrorExt(tif->tif_clientdata, module, "No space for %s arrays",
      isTiled(tif) ? "tile" : "strip");
  return 0;
 }
 if (isTiled(tif))
 {
  tif->tif_tilesize = TIFFTileSize(tif);
  if (tif->tif_tilesize == 0)
   return 0;
 }
 else
  tif->tif_tilesize = (tmsize_t)(-1);
 tif->tif_scanlinesize = TIFFScanlineSize(tif);
 if (tif->tif_scanlinesize == 0)
  return 0;
 tif->tif_flags |= TIFF_BEENWRITING;
 return 1;
}




int
fn_22(TIFF* tif, void* bp, tmsize_t var_24)
{
 static const char module[] = "TIFFWriteBufferSetup";

 if (tif->tif_rawdata) {
  if (tif->tif_flags & TIFF_MYBUFFER) {
   _TIFFfree(tif->tif_rawdata);
   tif->tif_flags &= ~TIFF_MYBUFFER;
  }
  tif->tif_rawdata = NULL;
 }
 if (var_24 == (tmsize_t)(-1)) {
  var_24 = (isTiled(tif) ?
      tif->tif_tilesize : TIFFStripSize(tif));



  if (var_24 < 8192)
   var_24 = 8192;
  bp = NULL;
 }
 if (bp == NULL) {
  bp = _TIFFmalloc(var_24);
  if (bp == NULL) {
   TIFFErrorExt(tif->tif_clientdata, module, "No space for output buffer");
   return 0;
  }
  tif->tif_flags |= TIFF_MYBUFFER;
 } else
  tif->tif_flags &= ~TIFF_MYBUFFER;
 tif->tif_rawdata = (uint8*) bp;
 tif->tif_rawdatasize = var_24;
 tif->tif_rawcc = 0;
 tif->tif_rawcp = tif->tif_rawdata;
 tif->tif_flags |= TIFF_BUFFERSETUP;
 return 1;
}




static int
fn_24(TIFF* tif, uint32 var_24, const char* module)
{
 TIFFDirectory *td = &tif->tif_dir;
 uint64* new_stripoffset;
 uint64* new_stripbytecount;

 assert(td->td_planarconfig == PLANARCONFIG_CONTIG);
 new_stripoffset = (uint64*)_TIFFrealloc(td->td_stripoffset,
  (td->td_nstrips + var_24) * sizeof (uint64));
 new_stripbytecount = (uint64*)_TIFFrealloc(td->td_stripbytecount,
  (td->td_nstrips + var_24) * sizeof (uint64));
 if (new_stripoffset == NULL || new_stripbytecount == NULL) {
  if (new_stripoffset)
   _TIFFfree(new_stripoffset);
  if (new_stripbytecount)
   _TIFFfree(new_stripbytecount);
  td->td_nstrips = 0;
  TIFFErrorExt(tif->tif_clientdata, module, "No space to expand strip arrays");
  return 0;
 }
 td->td_stripoffset = new_stripoffset;
 td->td_stripbytecount = new_stripbytecount;
 _TIFFmemset(td->td_stripoffset + td->td_nstrips,
      0, var_24*sizeof (uint64));
 _TIFFmemset(td->td_stripbytecount + td->td_nstrips,
      0, var_24*sizeof (uint64));
 td->td_nstrips += var_24;
        tif->tif_flags |= TIFF_DIRTYDIRECT;

 return 1;
}




static int
fn_24(TIFF* tif, uint32 var_25, uint8* data, tmsize_t var_25)
{
 static const char module[] = "TIFFAppendToStrip";
 TIFFDirectory *td = &tif->tif_dir;
 uint64 m;
        int64 var_25 = -1;

 if (td->td_stripoffset[var_25] == 0 || tif->tif_curoff == 0) {
            assert(td->td_nstrips > 0);

            if( td->td_stripbytecount[var_25] != 0
                && td->td_stripoffset[var_25] != 0
                && td->td_stripbytecount[var_25] >= (uint64) var_25 )
            {







                if (!SeekOK(tif, td->td_stripoffset[var_25])) {
                    TIFFErrorExt(tif->tif_clientdata, module,
                                 "Seek error at scanline %lu",
                                 (unsigned long)tif->tif_row);
                    return 0;
                }
            }
            else
            {




                td->td_stripoffset[var_25] = TIFFSeekFile(tif, 0, SEEK_END);
                tif->tif_flags |= TIFF_DIRTYSTRIP;
            }

            tif->tif_curoff = td->td_stripoffset[var_25];




            var_25 = td->td_stripbytecount[var_25];
            td->td_stripbytecount[var_25] = 0;
 }

 m = tif->tif_curoff+var_25;
 if (!(tif->tif_flags&TIFF_BIGTIFF))
  m = (uint32)m;
 if ((m<tif->tif_curoff)||(m<(uint64)var_25))
 {
  TIFFErrorExt(tif->tif_clientdata, module, "Maximum TIFF file size exceeded");
  return 0;
 }
 if (!WriteOK(tif, data, var_25)) {
  TIFFErrorExt(tif->tif_clientdata, module, "Write error at scanline %lu",
      (unsigned long) tif->tif_row);
      return 0;
 }
 tif->tif_curoff = m;
 td->td_stripbytecount[var_25] += var_25;

        if( (int64) td->td_stripbytecount[var_25] != var_25 )
            tif->tif_flags |= TIFF_DIRTYSTRIP;

 return 1;
}






int
fn_25(TIFF* tif)
{
 if (tif->tif_rawcc > 0 && tif->tif_flags & TIFF_BUF4WRITE ) {
  if (!isFillOrder(tif, tif->tif_dir.td_fillorder) &&
      (tif->tif_flags & TIFF_NOBITREV) == 0)
   TIFFReverseBits((uint8*)tif->tif_rawdata,
       tif->tif_rawcc);
  if (!TIFFAppendToStrip(tif,
      isTiled(tif) ? tif->tif_curtile : tif->tif_curstrip,
      tif->tif_rawdata, tif->tif_rawcc))
   return 0;
  tif->tif_rawcc = 0;
  tif->tif_rawcp = tif->tif_rawdata;
 }
 return 1;
}







void
fn_26(TIFF* tif, toff_t var_28)
{
 tif->tif_curoff = var_28;
}
