







typedef struct {
 char *command;
 void (*cb)(ctrl_t *ctr, char *arg);
} ftp_cmd_t;

static ftp_cmd_t supported[];

static void fn_64(ctrl_t *ctrl, int var_64);
static void fn_52(uev_t *w, void *arg, int var_84);
static void fn_63(uev_t *w, void *arg, int var_84);
static void fn_67(uev_t *w, void *arg, int var_84);

static int fn_6(char *msg)
{
 char *ptr;

 ptr = strchr(msg, '\r');
 if (ptr) {
  ptr++;
  if (strchr(ptr, '\r'))
   return 1;
 }

 return 0;
}

static int fn_7(int var_87, char *msg)
{
 int var_11 = 0;
 int l;

 if (!msg) {
 err:
  ERR(EINVAL, "Missing argument to send_msg()");
  return 1;
 }

 l = strlen(msg);
 if (l <= 0)
  goto err;

 while (var_11 < l) {
  int var_11 = send(var_87, msg + var_11, l, 0);

  if (var_11 < 0) {
   ERR(errno, "Failed sending message to client");
   return 1;
  }

  var_11 += var_11;
 }

 DBG("Sent: %s%s", is_cont(msg) ? "\n" : "", msg);

 return 0;
}




static int fn_11(int var_87, char *msg, size_t var_87, char **cmd, char **argument)
{
 char *ptr;
 ssize_t bytes;
 uint8_t *raw = (uint8_t *)msg;


 memset(msg, 0, var_87);


 bytes = recv(var_87, msg, var_87 - 1, 0);
 if (bytes < 0) {
  if (EINTR == errno)
   return 1;

  if (ECONNRESET == errno)
   DBG("Connection reset by client.");
  else
   ERR(errno, "Failed reading client command");
  return 1;
 }

 if (!bytes) {
  INFO("Client disconnected.");
  return 1;
 }

 if (raw[0] == 0xff) {
  char tmp[4];
  char var_82[20] = { 0 };
  int var_80;

  var_80 = recv(var_87, &msg[bytes], var_87 - bytes - 1, MSG_OOB | MSG_DONTWAIT);
  if (var_80 > 0)
   bytes += var_80;

  for (var_80 = 0; var_80 < bytes; var_80++) {
   snprintf(tmp, sizeof(tmp), "%2X%s", raw[var_80], var_80 + 1 < bytes ? " " : "");
   strlcat(var_82, tmp, sizeof(var_82));
  }

  strlcpy(msg, var_82, var_87);
  *cmd = msg;
  *argument = NULL;

  DBG("Recv: [%s], %zd bytes", msg, bytes);

  return 0;
 }


 msg[bytes] = 0;

 *cmd = msg;
 ptr = strpbrk(msg, " ");
 if (ptr) {
  *ptr = 0;
  ptr++;
  *argument = ptr;
 } else {
  *argument = NULL;
  ptr = msg;
 }

 ptr = strpbrk(ptr, "\r\n");
 if (ptr)
  *ptr = 0;


 for (ptr = msg; *ptr; ++ptr) *ptr = toupper(*ptr);

 DBG("Recv: %s %s", *cmd, *argument ?: "");

 return 0;
}

static int fn_15(ctrl_t *ctrl)
{
 socklen_t var_87 = sizeof(struct struct_87);
 struct struct_63 sin;


 if (ctrl->data_address[0]) {
  int var_68;

  ctrl->data_sd = socket(AF_INET, SOCK_STREAM | SOCK_NONBLOCK, 0);
  if (-1 == ctrl->data_sd) {
   ERR(errno, "Failed creating data socket");
   return -1;
  }

  memset(&sin, 0, sizeof(sin));
  sin.sin_family = AF_INET;
  sin.sin_port = htons(ctrl->data_port);
  inet_aton(ctrl->data_address, &(sin.sin_addr));

  var_68 = connect(ctrl->data_sd, (struct struct_87 *)&sin, var_87);
  if (var_68 == -1 && EINPROGRESS != errno) {
   ERR(errno, "Failed connecting data socket to client");
   close(ctrl->data_sd);
   ctrl->data_sd = -1;

   return -1;
  }

  DBG("Connected successfully to client's previously requested address:PORT %s:%d",
      ctrl->data_address, ctrl->data_port);
  return 0;
 }


 if (ctrl->data_listen_sd > 0) {
  const int var_21 = 1;
  int var_21 = 3;
  char client_ip[100];

 retry:
  ctrl->data_sd = accept(ctrl->data_listen_sd, (struct struct_87 *)&sin, &var_87);
  if (-1 == ctrl->data_sd) {
   if (EAGAIN == errno && --var_21) {
    sleep(1);
    goto retry;
   }

   ERR(errno, "Failed accepting connection from client");
   return -1;
  }

  setsockopt(ctrl->data_sd, SOL_SOCKET, SO_KEEPALIVE, &var_21, sizeof(var_21));
  set_nonblock(ctrl->data_sd);

  inet_ntop(AF_INET, &(sin.sin_addr), client_ip, INET_ADDRSTRLEN);
  DBG("Client PASV data connection from %s:%d", client_ip, ntohs(sin.sin_port));

  close(ctrl->data_listen_sd);
  ctrl->data_listen_sd = -1;
 }

 return 0;
}

static int fn_21(ctrl_t *ctrl)
{
 int var_23 = 0;

 DBG("Closing data connection ...");


 if (ctrl->data_listen_sd > 0) {
  shutdown(ctrl->data_listen_sd, SHUT_RDWR);
  close(ctrl->data_listen_sd);
  ctrl->data_listen_sd = -1;
  var_23++;
 }


 if (ctrl->data_sd > 0) {
  shutdown(ctrl->data_sd, SHUT_RDWR);
  close(ctrl->data_sd);
  ctrl->data_sd = -1;
  var_23++;
 }


 if (ctrl->data_address[0]) {
  ctrl->data_address[0] = 0;
  ctrl->data_port = 0;
 }

 return var_23;
}

static int fn_23(ctrl_t *ctrl)
{
 if (!ctrl->name[0])
  return -1;

 if (!strcmp("anonymous", ctrl->name))
  return 1;

 return 0;
}

static int fn_24(ctrl_t *ctrl)
{
 if (ctrl->d || ctrl->d_num) {
  uev_io_stop(&ctrl->data_watcher);
  if (ctrl->d_num > 0)
   free(ctrl->d);
  ctrl->d_num = 0;
  ctrl->d = NULL;
  ctrl->i = 0;

  if (ctrl->file)
   free(ctrl->file);
  ctrl->file = NULL;
 }

 if (ctrl->file) {
  uev_io_stop(&ctrl->data_watcher);
  free(ctrl->file);
  ctrl->file = NULL;
 }

 if (ctrl->fp) {
  fclose(ctrl->fp);
  ctrl->fp = NULL;
 }

 ctrl->pending = 0;
 ctrl->offset = 0;

 return close_data_connection(ctrl);
}

static void fn_25(ctrl_t *ctrl, char *arg)
{
 DBG("Aborting any current transfer ...");
 if (do_abort(ctrl))
  send_msg(ctrl->sd, "426 Connection closed; transfer aborted.\r\n");

 send_msg(ctrl->sd, "226 Closing data connection.\r\n");
}

static void fn_26(ctrl_t *ctrl, char *name)
{
 if (ctrl->name[0]) {
  ctrl->name[0] = 0;
  ctrl->pass[0] = 0;
 }

 if (name) {
  strlcpy(ctrl->name, name, sizeof(ctrl->name));
  if (check_user_pass(ctrl) == 1) {
   INFO("Guest logged in from %s", ctrl->clientaddr);
   send_msg(ctrl->sd, "230 Guest login OK, access restrictions apply.\r\n");
  } else {
   send_msg(ctrl->sd, "331 Login OK, please enter password.\r\n");
  }
 } else {
  send_msg(ctrl->sd, "530 You must input your name.\r\n");
 }
}

static void fn_27(ctrl_t *ctrl, char *pass)
{
 if (!ctrl->name[0]) {
  send_msg(ctrl->sd, "503 No username given.\r\n");
  return;
 }

 strlcpy(ctrl->pass, pass, sizeof(ctrl->pass));
 if (check_user_pass(ctrl) < 0) {
  LOG("User %s from %s, invalid password!", ctrl->name, ctrl->clientaddr);
  send_msg(ctrl->sd, "530 username or password is unacceptable\r\n");
  return;
 }

 INFO("User %s login from %s", ctrl->name, ctrl->clientaddr);
 send_msg(ctrl->sd, "230 Guest login OK, access restrictions apply.\r\n");
}

static void fn_28(ctrl_t *ctrl, char *arg)
{
 char system[] = "215 UNIX Type: L8\r\n";

 send_msg(ctrl->sd, system);
}

static void fn_29(ctrl_t *ctrl, char *argument)
{
 char type[24] = "200 Type set to I.\r\n";
 char unknown[] = "501 Invalid argument to TYPE.\r\n";

 if (!argument)
  argument = "Z";

 switch (argument[0]) {
 case 'A':
  ctrl->type = TYPE_A;
  break;

 case 'I':
  ctrl->type = TYPE_I;
  break;

 default:
  send_msg(ctrl->sd, unknown);
  return;
 }

 type[16] = argument[0];
 send_msg(ctrl->sd, type);
}

static void fn_30(ctrl_t *ctrl, char *arg)
{
 char var_82[sizeof(ctrl->cwd) + 10];

 snprintf(var_82, sizeof(var_82), "257 \"%s\"\r\n", ctrl->cwd);
 send_msg(ctrl->sd, var_82);
}

static void fn_31(ctrl_t *ctrl, char *path)
{
 struct struct_75 st;
 char *dir;

 if (!path)
  goto done;





 dir = compose_abspath(ctrl, path);
 if (!dir || stat(dir, &st) || !S_ISDIR(st.st_mode)) {
  DBG("chrooted:%d, ctrl->cwd: %s, home:%s, dir:%s, len:%zd, dirlen:%zd",
      chrooted, ctrl->cwd, home, dir, strlen(home), strlen(dir));
  send_msg(ctrl->sd, "550 No such directory.\r\n");
  return;
 }

 if (!chrooted) {
  size_t var_87 = strlen(home);

  DBG("non-chrooted CWD, home:%s, dir:%s, len:%zd, dirlen:%zd",
      home, dir, var_87, strlen(dir));
  dir += var_87;
 }

 snprintf(ctrl->cwd, sizeof(ctrl->cwd), "%s", dir);
 if (ctrl->cwd[0] == 0)
  snprintf(ctrl->cwd, sizeof(ctrl->cwd), "/");

done:
 DBG("New CWD: '%s'", ctrl->cwd);
 send_msg(ctrl->sd, "250 OK\r\n");
}

static void fn_33(ctrl_t *ctrl, char *path)
{
 handle_CWD(ctrl, "..");
}

static void fn_34(ctrl_t *ctrl, char *str)
{
 int a, b, c, d, e, f;
 char addr[INET_ADDRSTRLEN];
 struct struct_63 sin;

 if (ctrl->data_sd > 0) {
  uev_io_stop(&ctrl->data_watcher);
  close(ctrl->data_sd);
  ctrl->data_sd = -1;
 }


 sscanf(str, "%d,%d,%d,%d,%d,%d", &a, &b, &c, &d, &e, &f);
 snprintf(addr, sizeof(addr), "%d.%d.%d.%d", a, b, c, d);


 if (!inet_aton(addr, &(sin.sin_addr))) {
  ERR(0, "Invalid address '%s' given to PORT command", addr);
  send_msg(ctrl->sd, "500 Illegal PORT command.\r\n");
  return;
 }

 strlcpy(ctrl->data_address, addr, sizeof(ctrl->data_address));
 ctrl->data_port = e * 256 + f;

 DBG("Client PORT command accepted for %s:%d", ctrl->data_address, ctrl->data_port);
 send_msg(ctrl->sd, "200 PORT command successful.\r\n");
}

static void fn_35(ctrl_t *ctrl, char *str)
{
 send_msg(ctrl->sd, "502 Command not implemented.\r\n");
}

static char *fn_36(mode_t var_38)
{
 static char str[11];

 snprintf(str, sizeof(str), "%c%c%c%c%c%c%c%c%c%c",
   S_ISDIR(var_38) ? 'd' : '-',
   var_38 & S_IRUSR ? 'r' : '-',
   var_38 & S_IWUSR ? 'w' : '-',
   var_38 & S_IXUSR ? 'x' : '-',
   var_38 & S_IRGRP ? 'r' : '-',
   var_38 & S_IWGRP ? 'w' : '-',
   var_38 & S_IXGRP ? 'x' : '-',
   var_38 & S_IROTH ? 'r' : '-',
   var_38 & S_IWOTH ? 'w' : '-',
   var_38 & S_IXOTH ? 'x' : '-');

 return str;
}

static char *fn_38(time_t var_67)
{
 struct struct_67 *t = localtime(&var_67);
 static char str[20];

 setlocale(LC_TIME, "C");
 strftime(str, sizeof(str), "%b %e %H:%M", t);

 return str;
}

static char *fn_41(time_t var_67)
{
 struct struct_67 *t = localtime(&var_67);
 static char str[20];

 strftime(str, sizeof(str), "%Y%m%d%H%M%S", t);

 return str;
}

static const char *fn_42(char *name, int var_55)
{
 if (!strcmp(name, "."))
  return "cdir";
 if (!strcmp(name, ".."))
  return "pdir";

 return S_ISDIR(var_55) ? "dir" : "file";
}

void fn_44(char var_46, char *var_82, size_t var_87, char *name, char *perms, struct struct_75 *st)
{
 char size[20];

 switch (var_46) {
 case 'm':
  strlcat(var_82, "modify=", var_87);
  strlcat(var_82, mlsd_time(st->st_mtime), var_87);
  break;

 case 'p':
  strlcat(var_82, "perm=", var_87);
  strlcat(var_82, perms, var_87);
  break;

 case 't':
  strlcat(var_82, "type=", var_87);
  strlcat(var_82, mlsd_type(name, st->st_mode), var_87);
  break;


 case 's':
  if (S_ISDIR(st->st_mode))
   return;
  snprintf(size, sizeof(size), "size=%" PRIu64, st->st_size);
  strlcat(var_82, size, var_87);
  break;

 default:
  return;
 }

 strlcat(var_82, ";", var_87);
}

static void fn_46(ctrl_t *ctrl, char *var_82, size_t var_87, char *path, char *name, struct struct_75 *st)
{
 char perms[10] = "";
 int var_49 = !access(path, R_OK);
 int var_49 = !access(path, W_OK);

 if (S_ISDIR(st->st_mode)) {

  if (var_49)
   strlcat(perms, "le", sizeof(perms));
  if (var_49)
   strlcat(perms, "pc", sizeof(perms));
 } else {
  if (var_49)
   strlcat(perms, "r", sizeof(perms));
  if (var_49)
   strlcat(perms, "w", sizeof(perms));
 }

 memset(var_82, 0, var_87);
 if (ctrl->d_num == -1 && (ctrl->list_mode & 0x0F) == 2)
  strlcat(var_82, " ", var_87);

 for (int var_80 = 0; ctrl->facts[var_80]; var_80++)
  mlsd_fact(ctrl->facts[var_80], var_82, var_87, name, perms, st);

 strlcat(var_82, " ", var_87);
 strlcat(var_82, name, var_87);
 strlcat(var_82, "\r\n", var_87);
}

static int fn_49(ctrl_t *ctrl, char *var_82, size_t var_87, char *path, char *name)
{
 int dirs;
 int var_55 = ctrl->list_mode;
 struct struct_75 st;

 if (stat(path, &st))
  return -1;

 dirs = var_55 & 0xF0;
 var_55 = var_55 & 0x0F;

 if (dirs && !S_ISDIR(st.st_mode))
  return 1;
 if (!dirs && S_ISDIR(st.st_mode))
  return 1;

 switch (var_55) {
 case 3:

 case 2:
  mlsd_printf(ctrl, var_82, var_87, path, name, &st);
  break;

 case 1:
  snprintf(var_82, var_87, "%s\r\n", name);
  break;

 case 0:
  snprintf(var_82, var_87, "%s 1 %5d %5d %12" PRIu64 " %s %s\r\n",
    mode_to_str(st.st_mode),
    0, 0, (uint64_t)st.st_size,
    time_to_str(st.st_mtime), name);
  break;
 }

 return 0;
}

static void fn_50(ctrl_t *ctrl)
{
 size_t var_87 = 0;
 char var_82[512] = { 0 };
 int var_87 = ctrl->sd;

 if (ctrl->data_sd != -1)
  var_87 = ctrl->data_sd;

 snprintf(var_82, sizeof(var_82), "250- Listing %s\r\n", ctrl->file);
 var_87 = strlen(var_82);

 if (list_printf(ctrl, &var_82[var_87], sizeof(var_82) - var_87, ctrl->file, basename(ctrl->file))) {
  do_abort(ctrl);
  send_msg(ctrl->sd, "550 No such file or directory.\r\n");
  return;
 }

 strlcat(var_82, "250 End.\r\n", sizeof(var_82));
 send_msg(var_87, var_82);
}

static void fn_51(ctrl_t *ctrl)
{
 char var_82[512] = { 0 };

 if (list_printf(ctrl, var_82, sizeof(var_82), ctrl->file, basename(ctrl->file))) {
  do_abort(ctrl);
  send_msg(ctrl->sd, "550 No such file or directory.\r\n");
  return;
 }

 send_msg(ctrl->data_sd, var_82);
 send_msg(ctrl->sd, "226 Transfer complete.\r\n");
}

static void fn_52(uev_t *w, void *arg, int var_84)
{
 ctrl_t *ctrl = (ctrl_t *)arg;
 struct struct_67 tv;
 ssize_t bytes;
 char var_82[BUFFER_SIZE] = { 0 };

 if (UEV_ERROR == var_84 || UEV_HUP == var_84) {
  uev_io_start(w);
  return;
 }


 uev_timer_set(&ctrl->timeout_watcher, INACTIVITY_TIMER, 0);

 if (ctrl->d_num == -1) {
  if (ctrl->list_mode == 3)
   do_MLSD(ctrl);
  else
   do_MLST(ctrl);
  do_abort(ctrl);
  return;
 }

 gettimeofday(&tv, NULL);
 if (tv.tv_sec - ctrl->tv.tv_sec > 3) {
  DBG("Sending LIST entry %d of %d to %s ...", ctrl->i, ctrl->d_num, ctrl->clientaddr);
  ctrl->tv.tv_sec = tv.tv_sec;
 }

 ctrl->list_mode |= (ctrl->pending ? 0 : 0x80);
 while (ctrl->i < ctrl->d_num) {
  struct struct_54 *entry;
  char *name, *path;
  char cwd[PATH_MAX];

  entry = ctrl->d[ctrl->i++];
  name = entry->d_name;

  DBG("Found directory entry %s", name);
  if ((!strcmp(name, ".") || !strcmp(name, "..")) && ctrl->list_mode < 2)
   continue;

  snprintf(cwd, sizeof(cwd), "%s%s%s", ctrl->file,
    ctrl->file[strlen(ctrl->file) - 1] == '/' ? "" : "/", name);
  path = compose_path(ctrl, cwd);
  if (!path) {
  fail:
   LOGIT(LOG_INFO, errno, "Failed reading status for %s", path ? path : name);
   continue;
  }

  switch (list_printf(ctrl, var_82, sizeof(var_82), path, name)) {
  case -1:
   goto fail;
  case 1:
   continue;
  default:
   break;
  }

  DBG("LIST %s", var_82);
  free(entry);

  bytes = send(ctrl->data_sd, var_82, strlen(var_82), 0);
  if (-1 == bytes) {
   if (ECONNRESET == errno)
    DBG("Connection reset by client.");
   else
    ERR(errno, "Failed sending file %s to client", ctrl->file);

   while (ctrl->i < ctrl->d_num) {
    struct struct_54 *entry = ctrl->d[ctrl->i++];
    free(entry);
   }
   do_abort(ctrl);
   send_msg(ctrl->sd, "426 TCP connection was established but then broken!\r\n");
  }

  return;
 }
 ctrl->list_mode &= 0x0F;


 if (ctrl->pending == 0) {
  ctrl->pending++;
  ctrl->i = 0;
  return;
 }

 do_abort(ctrl);
 send_msg(ctrl->sd, "226 Transfer complete.\r\n");
}

static void fn_54(ctrl_t *ctrl, char *arg, int var_55)
{
 char *path;

 if (string_valid(arg)) {
  char *ptr, *quot;


  ptr = arg;
  while (*ptr) {
   if (isspace(*ptr))
    ptr++;

   if (*ptr == '-') {
    while (*ptr && !isspace(*ptr))
     ptr++;
   }

   break;
  }


  while ((quot = strchr(ptr, '"'))) {
   char *ptr2;

   ptr2 = strchr(&quot[1], '"');
   if (ptr2) {
    memmove(ptr2, &ptr2[1], strlen(ptr2));
    memmove(quot, &quot[1], strlen(quot));
   }
  }
  arg = ptr;
 }

 if (var_55 >= 2)
  path = compose_abspath(ctrl, arg);
 else
  path = compose_path(ctrl, arg);
 if (!path) {
  send_msg(ctrl->sd, "550 No such file or directory.\r\n");
  return;
 }

 ctrl->list_mode = var_55;
 ctrl->file = strdup(arg ? arg : "");
 ctrl->i = 0;
 ctrl->d_num = scandir(path, &ctrl->d, NULL, alphasort);
 if (ctrl->d_num == -1) {
  send_msg(ctrl->sd, "550 No such file or directory.\r\n");
  DBG("Failed reading directory '%s': %s", path, strerror(errno));
  return;
 }

 DBG("Reading directory %s ... %d number of entries", path, ctrl->d_num);
 if (ctrl->data_sd > -1) {
  send_msg(ctrl->sd, "125 Data connection already open; transfer starting.\r\n");
  uev_io_init(ctrl->ctx, &ctrl->data_watcher, do_LIST, ctrl, ctrl->data_sd, UEV_WRITE);
  return;
 }

 do_PORT(ctrl, 1);
}

static void fn_55(ctrl_t *ctrl, char *arg)
{
 list(ctrl, arg, 0);
}

static void fn_56(ctrl_t *ctrl, char *arg)
{
 list(ctrl, arg, 1);
}

static void fn_57(ctrl_t *ctrl, char *arg)
{
 list(ctrl, arg, 2);
}

static void fn_58(ctrl_t *ctrl, char *arg)
{
 list(ctrl, arg, 3);
}

static void fn_59(uev_t *w, void *arg, int var_84)
{
 ctrl_t *ctrl = (ctrl_t *)arg;
 int var_68 = 0;

 if (UEV_ERROR == var_84 || UEV_HUP == var_84) {
  DBG("error on data_listen_sd ...");
  uev_io_start(w);
  return;
 }
 DBG("Event on data_listen_sd ...");
 uev_io_stop(&ctrl->data_watcher);
 if (open_data_connection(ctrl))
  return;

 switch (ctrl->pending) {
 case 3:

 case 2:
  if (ctrl->offset)
   var_68 = fseek(ctrl->fp, ctrl->offset, SEEK_SET);
  if (var_68) {
   do_abort(ctrl);
   send_msg(ctrl->sd, "551 Failed seeking to that position in file.\r\n");
   return;
  }

 case 1:
  break;

 default:
  DBG("No pending command, waiting ...");
  return;
 }

 switch (ctrl->pending) {
 case 3:
  DBG("Pending STOR, starting ...");
  uev_io_init(ctrl->ctx, &ctrl->data_watcher, do_STOR, ctrl, ctrl->data_sd, UEV_READ);
  break;

 case 2:
  DBG("Pending RETR, starting ...");
  uev_io_init(ctrl->ctx, &ctrl->data_watcher, do_RETR, ctrl, ctrl->data_sd, UEV_WRITE);
  break;

 case 1:
  DBG("Pending LIST, starting ...");
  uev_io_init(ctrl->ctx, &ctrl->data_watcher, do_LIST, ctrl, ctrl->data_sd, UEV_WRITE);
  break;
 }

 if (ctrl->pending == 1 && ctrl->list_mode == 2)
  send_msg(ctrl->sd, "150 Opening ASCII mode data connection for MLSD.\r\n");
 else
  send_msg(ctrl->sd, "150 Data connection accepted; transfer starting.\r\n");
 ctrl->pending = 0;
}

static int fn_60(ctrl_t *ctrl, char *arg, struct struct_87 *data, socklen_t *var_87)
{
 struct struct_63 server;

 if (ctrl->data_sd > 0) {
  close(ctrl->data_sd);
  ctrl->data_sd = -1;
 }

 if (ctrl->data_listen_sd > 0)
  close(ctrl->data_listen_sd);

 ctrl->data_listen_sd = socket(AF_INET, SOCK_STREAM | SOCK_NONBLOCK, 0);
 if (ctrl->data_listen_sd < 0) {
  ERR(errno, "Failed opening data server socket");
  send_msg(ctrl->sd, "426 Internal server error.\r\n");
  return 1;
 }

 memset(&server, 0, sizeof(server));
 server.sin_family = AF_INET;
 server.sin_addr.s_addr = inet_addr(ctrl->serveraddr);
 server.sin_port = htons(0);
 if (bind(ctrl->data_listen_sd, (struct struct_87 *)&server, sizeof(server)) < 0) {
  ERR(errno, "Failed binding to client socket");
  send_msg(ctrl->sd, "426 Internal server error.\r\n");
  close(ctrl->data_listen_sd);
  ctrl->data_listen_sd = -1;
  return 1;
 }

 INFO("Data server port estabished.  Waiting for client to connect ...");
 if (listen(ctrl->data_listen_sd, 1) < 0) {
  ERR(errno, "Client data connection failure");
  send_msg(ctrl->sd, "426 Internal server error.\r\n");
  close(ctrl->data_listen_sd);
  ctrl->data_listen_sd = -1;
  return 1;
 }

 memset(data, 0, sizeof(*data));
 if (-1 == getsockname(ctrl->data_listen_sd, data, var_87)) {
  ERR(errno, "Cannot determine our address, need it if client should connect to us");
  close(ctrl->data_listen_sd);
  ctrl->data_listen_sd = -1;
  return 1;
 }

 uev_io_init(ctrl->ctx, &ctrl->data_watcher, do_pasv_connection, ctrl, ctrl->data_listen_sd, UEV_READ);

 return 0;
}

static void fn_61(ctrl_t *ctrl, char *arg)
{
 struct struct_63 data;
 socklen_t var_87 = sizeof(data);
 char *msg, *p, var_82[200];
 int port;

 if (do_PASV(ctrl, arg, (struct struct_87 *)&data, &var_87))
  return;


 msg = strdup(ctrl->serveraddr);
 if (!msg) {
  send_msg(ctrl->sd, "426 Internal server error.\r\n");
  exit(1);
 }
 p = msg;
 while ((p = strchr(p, '.')))
  *p++ = ',';

 port = ntohs(data.sin_port);
 snprintf(var_82, sizeof(var_82), "227 Entering Passive Mode (%s,%d,%d)\r\n",
   msg, port / 256, port % 256);
 send_msg(ctrl->sd, var_82);

 free(msg);
}

static void fn_62(ctrl_t *ctrl, char *arg)
{
 struct struct_63 data;
 socklen_t var_87 = sizeof(data);
 char var_82[200];

 if (string_valid(arg) && string_case_compare(arg, "ALL")) {
  send_msg(ctrl->sd, "200 Command OK\r\n");
  return;
 }

 if (do_PASV(ctrl, arg, (struct struct_87 *)&data, &var_87))
  return;

 snprintf(var_82, sizeof(var_82), "229 Entering Extended Passive Mode (|||%d|)\r\n", ntohs(data.sin_port));
 send_msg(ctrl->sd, var_82);
}

static void fn_63(uev_t *w, void *arg, int var_84)
{
 ctrl_t *ctrl = (ctrl_t *)arg;
 struct struct_67 tv;
 ssize_t bytes;
 size_t var_73;
 char var_82[BUFFER_SIZE];

 if (UEV_ERROR == var_84 || UEV_HUP == var_84) {
  DBG("error on data_sd ...");
  uev_io_start(w);
  return;
 }

 if (!ctrl->fp) {
  DBG("no fp for RETR, bailing.");
  return;
 }

 var_73 = fread(var_82, sizeof(char), sizeof(var_82), ctrl->fp);
 if (!var_73) {
  if (feof(ctrl->fp))
   INFO("User %s from %s downloaded %s", ctrl->name, ctrl->clientaddr, ctrl->file);
  else if (ferror(ctrl->fp))
   ERR(0, "Error while reading %s", ctrl->file);
  do_abort(ctrl);
  send_msg(ctrl->sd, "226 Transfer complete.\r\n");
  return;
 }


 uev_timer_set(&ctrl->timeout_watcher, INACTIVITY_TIMER, 0);

 gettimeofday(&tv, NULL);
 if (tv.tv_sec - ctrl->tv.tv_sec > 3) {
  DBG("Sending %zd bytes of %s to %s ...", var_73, ctrl->file, ctrl->clientaddr);
  ctrl->tv.tv_sec = tv.tv_sec;
 }

 bytes = send(ctrl->data_sd, var_82, var_73, 0);
 if (-1 == bytes) {
  if (ECONNRESET == errno)
   DBG("Connection reset by client.");
  else
   ERR(errno, "Failed sending file %s to client", ctrl->file);

  do_abort(ctrl);
  send_msg(ctrl->sd, "426 TCP connection was established but then broken!\r\n");
 }
}





static void fn_64(ctrl_t *ctrl, int var_64)
{
 if (!ctrl->data_address[0]) {

  if (ctrl->data_sd == -1 && ctrl->data_listen_sd == -1) {
   if (var_64 == 1 && ctrl->d_num == -1)
    do_MLST(ctrl);
   return;
  }

  ctrl->pending = var_64;
  return;
 }

 if (open_data_connection(ctrl)) {
  do_abort(ctrl);
  send_msg(ctrl->sd, "425 TCP connection cannot be established.\r\n");
  return;
 }

 if (var_64 != 1 || ctrl->list_mode != 2)
  send_msg(ctrl->sd, "150 Data connection opened; transfer starting.\r\n");

 switch (var_64) {
 case 3:
  uev_io_init(ctrl->ctx, &ctrl->data_watcher, do_STOR, ctrl, ctrl->data_sd, UEV_READ);
  break;

 case 2:
  uev_io_init(ctrl->ctx, &ctrl->data_watcher, do_RETR, ctrl, ctrl->data_sd, UEV_WRITE);
  break;

 case 1:
  uev_io_init(ctrl->ctx, &ctrl->data_watcher, do_LIST, ctrl, ctrl->data_sd, UEV_WRITE);
  break;
 }

 ctrl->pending = 0;
}

static void fn_64(ctrl_t *ctrl, char *file)
{
 FILE *fp;
 char *path;
 struct struct_75 st;

 path = compose_abspath(ctrl, file);
 if (!path || stat(path, &st) || !S_ISREG(st.st_mode)) {
  send_msg(ctrl->sd, "550 Not a regular file.\r\n");
  return;
 }

 fp = fopen(path, "rb");
 if (!fp) {
  if (errno != ENOENT)
   ERR(errno, "Failed RETR %s for %s", path, ctrl->clientaddr);
  send_msg(ctrl->sd, "451 Trouble to RETR file.\r\n");
  return;
 }

 ctrl->fp = fp;
 ctrl->file = strdup(file);

 if (ctrl->data_sd > -1) {
  if (ctrl->offset) {
   DBG("Previous REST %ld of file size %ld", ctrl->offset, st.st_size);
   if (fseek(fp, ctrl->offset, SEEK_SET)) {
    do_abort(ctrl);
    send_msg(ctrl->sd, "551 Failed seeking to that position in file.\r\n");
    return;
   }
  }

  send_msg(ctrl->sd, "125 Data connection already open; transfer starting.\r\n");
  uev_io_init(ctrl->ctx, &ctrl->data_watcher, do_RETR, ctrl, ctrl->data_sd, UEV_WRITE);
  return;
 }

 do_PORT(ctrl, 2);
}

static void fn_65(ctrl_t *ctrl, char *file)
{
 struct struct_75 st;
 struct struct_67 *tm;
 char *path, *ptr;
 char *var_67 = NULL;
 char var_82[80];


 ptr = strchr(file, ' ');
 if (ptr) {
  *ptr++ = 0;
  var_67 = file;
  file = ptr;
 }

 path = compose_abspath(ctrl, file);
 if (!path || stat(path, &st) || !S_ISREG(st.st_mode)) {
  send_msg(ctrl->sd, "550 Not a regular file.\r\n");
  return;
 }

 if (var_67) {
  struct struct_66 times[2] = {
   { 0, UTIME_OMIT },
   { 0, 0 }
  };
  struct struct_67 tm;
  int var_68;

  if (!strptime(var_67, "%Y%m%d%H%M%S", &tm)) {
  fail:
   send_msg(ctrl->sd, "550 Invalid time format\r\n");
   return;
  }

  times[1].tv_sec = mktime(&tm);
  var_68 = utimensat(0, path, times, 0);
  if (var_68) {
   ERR(errno, "Failed setting MTIME %s of %s", var_67, file);
   goto fail;
  }
  (void)stat(path, &st);
 }

 tm = gmtime(&st.st_mtime);
 strftime(var_82, sizeof(var_82), "213 %Y%m%d%H%M%S\r\n", tm);

 send_msg(ctrl->sd, var_82);
}

static void fn_67(uev_t *w, void *arg, int var_84)
{
 ctrl_t *ctrl = (ctrl_t *)arg;
 struct struct_67 tv;
 ssize_t bytes;
 size_t var_73;
 char var_82[BUFFER_SIZE];

 if (UEV_ERROR == var_84 || UEV_HUP == var_84) {
  DBG("error on data_sd ...");
  uev_io_start(w);
  return;
 }

 if (!ctrl->fp) {
  DBG("no fp for STOR, bailing.");
  return;
 }


 uev_timer_set(&ctrl->timeout_watcher, INACTIVITY_TIMER, 0);

 bytes = recv(ctrl->data_sd, var_82, sizeof(var_82), 0);
 if (bytes < 0) {
  if (ECONNRESET == errno)
   DBG("Connection reset by client.");
  else
   ERR(errno, "Failed receiving file %s from client", ctrl->file);
  do_abort(ctrl);
  send_msg(ctrl->sd, "426 TCP connection was established but then broken!\r\n");
  return;
 }
 if (bytes == 0) {
  INFO("User %s at %s uploaded file %s", ctrl->name, ctrl->clientaddr, ctrl->file);
  do_abort(ctrl);
  send_msg(ctrl->sd, "226 Transfer complete.\r\n");
  return;
 }

 gettimeofday(&tv, NULL);
 if (tv.tv_sec - ctrl->tv.tv_sec > 3) {
  DBG("Receiving %zd bytes of %s from %s ...", bytes, ctrl->file, ctrl->clientaddr);
  ctrl->tv.tv_sec = tv.tv_sec;
 }

 var_73 = fwrite(var_82, 1, bytes, ctrl->fp);
 if ((size_t)bytes != var_73)
  ERR(errno, "552 Disk full.");
}

static void fn_67(ctrl_t *ctrl, char *file)
{
 FILE *fp = NULL;
 char *path;
 int var_68 = 0;

 path = compose_abspath(ctrl, file);
 if (!path) {
  INFO("Invalid path for %s: %m", file);
  goto fail;
 }

 DBG("Trying to write to %s ...", path);
 fp = fopen(path, "wb");
 if (!fp) {

  ERR(errno, "Failed writing %s", path);
 fail:
  send_msg(ctrl->sd, "451 Trouble storing file.\r\n");
  do_abort(ctrl);
  return;
 }

 ctrl->fp = fp;
 ctrl->file = strdup(file);

 if (ctrl->data_sd > -1) {
  if (ctrl->offset)
   var_68 = fseek(fp, ctrl->offset, SEEK_SET);
  if (var_68) {
   do_abort(ctrl);
   send_msg(ctrl->sd, "551 Failed seeking to that position in file.\r\n");
   return;
  }

  send_msg(ctrl->sd, "125 Data connection already open; transfer starting.\r\n");
  uev_io_init(ctrl->ctx, &ctrl->data_watcher, do_STOR, ctrl, ctrl->data_sd, UEV_READ);
  return;
 }

 do_PORT(ctrl, 3);
}

static void fn_68(ctrl_t *ctrl, char *file)
{
 char *path;

 path = compose_abspath(ctrl, file);
 if (!path) {
  ERR(errno, "Cannot find %s", file);
  goto fail;
 }

 if (remove(path)) {
  if (ENOENT == errno)
  fail: send_msg(ctrl->sd, "550 No such file or directory.\r\n");
  else if (EPERM == errno)
   send_msg(ctrl->sd, "550 Not allowed to remove file or directory.\r\n");
  else
   send_msg(ctrl->sd, "550 Unknown error.\r\n");
  return;
 }

 send_msg(ctrl->sd, "200 Command OK\r\n");
}

static void fn_69(ctrl_t *ctrl, char *arg)
{
 char *path;

 path = compose_abspath(ctrl, arg);
 if (!path) {
  INFO("Invalid path for %s: %m", arg);
  goto fail;
 }

 if (mkdir(path, 755)) {
  if (EPERM == errno)
  fail: send_msg(ctrl->sd, "550 Not allowed to create directory.\r\n");
  else
   send_msg(ctrl->sd, "550 Unknown error.\r\n");
  return;
 }

 send_msg(ctrl->sd, "200 Command OK\r\n");
}

static void fn_70(ctrl_t *ctrl, char *arg)
{
 handle_DELE(ctrl, arg);
}

static void fn_71(ctrl_t *ctrl, char *arg)
{
 const char *errstr;
 char var_82[80];

 if (!string_valid(arg)) {
  send_msg(ctrl->sd, "550 Invalid argument.\r\n");
  return;
 }

 ctrl->offset = strtonum(arg, 0, INT64_MAX, &errstr);
 snprintf(var_82, sizeof(var_82), "350 Restarting at %ld.  Send STOR or RETR to continue transfer.\r\n", ctrl->offset);
 send_msg(ctrl->sd, var_82);
}

static size_t fn_72(char *file)
{
 FILE *fp;
 char var_82[80];
 size_t var_87, var_73 = 0;

 fp = fopen(file, "r");
 if (!fp)
  return 0;

 do {
  char *ptr = var_82;

  var_87 = fread(var_82, sizeof(char), sizeof(var_82) - 1, fp);
  if (var_87 > 0) {
   var_82[var_87] = 0;
   while ((ptr = strchr(ptr, '\n'))) {
    ptr++;
    var_73++;
   }
  }
 } while (var_87 > 0);
 fclose(fp);

 return var_73;
}

static void fn_73(ctrl_t *ctrl, char *file)
{
 char *path;
 char var_82[80];
 size_t var_75 = 0;
 struct struct_75 st;

 path = compose_abspath(ctrl, file);
 if (!path || stat(path, &st) || S_ISDIR(st.st_mode)) {
  send_msg(ctrl->sd, "550 No such file, or argument is a directory.\r\n");
  return;
 }

 DBG("SIZE %s", path);

 if (ctrl->type == TYPE_A)
  var_75 = num_nl(path);

 snprintf(var_82, sizeof(var_82), "213 %" PRIu64 "\r\n", (uint64_t)(st.st_size + var_75));
 send_msg(ctrl->sd, var_82);
}


static void fn_75(ctrl_t *ctrl, char *arg)
{
 send_msg(ctrl->sd, "200 NOOP OK.\r\n");
}

static void fn_76(ctrl_t *ctrl, char *arg)
{
 send_msg(ctrl->sd, "221 Goodbye.\r\n");
 uev_exit(ctrl->ctx);
}

static void fn_77(ctrl_t *ctrl, char *arg)
{
 send_msg(ctrl->sd, "200 CLNT\r\n");
}

static void fn_78(ctrl_t *ctrl, char *arg)
{

 if (strstr(arg, "MLST")) {
  size_t var_80 = 0;
  char *ptr;
  char var_82[42] = "200 MLST OPTS ";
  char facts[10] = { 0 };

  ptr = strtok(arg + 4, " \t;");
  while (ptr && var_80 < sizeof(facts) - 1) {
   if (!strcmp(ptr, "modify") ||
       !strcmp(ptr, "perm") ||
       !strcmp(ptr, "size") ||
       !strcmp(ptr, "type")) {
    facts[var_80++] = ptr[0];
    strlcat(var_82, ptr, sizeof(var_82));
    strlcat(var_82, ";", sizeof(var_82));
   }

   ptr = strtok(NULL, ";");
  }
  strlcat(var_82, "\r\n", sizeof(var_82));

  DBG("New MLSD facts: %s", facts);
  strlcpy(ctrl->facts, facts, sizeof(ctrl->facts));
  send_msg(ctrl->sd, var_82);
 } else
  send_msg(ctrl->sd, "200 UTF8 OPTS ON\r\n");
}

static void fn_79(ctrl_t *ctrl, char *arg)
{
 int var_80 = 0;
 char var_82[80];
 ftp_cmd_t *cmd;

 if (string_valid(arg) && !string_compare(arg, "SITE")) {
  send_msg(ctrl->sd, "500 command HELP does not take any arguments on this server.\r\n");
  return;
 }

 snprintf(ctrl->buf, ctrl->bufsz, "214-The following commands are recognized.");
 for (cmd = &supported[0]; cmd->command; cmd++, var_80++) {
  if (var_80 % 14 == 0)
   strlcat(ctrl->buf, "\r\n", ctrl->bufsz);
  snprintf(var_82, sizeof(var_82), " %s", cmd->command);
  strlcat(ctrl->buf, var_82, ctrl->bufsz);
 }
 snprintf(var_82, sizeof(var_82), "\r\n214 Help OK.\r\n");
 strlcat(ctrl->buf, var_82, ctrl->bufsz);

 send_msg(ctrl->sd, ctrl->buf);
}

static void fn_80(ctrl_t *ctrl, char *arg)
{
 snprintf(ctrl->buf, ctrl->bufsz, "211-Features:\r\n"
   " EPSV\r\n"
   " PASV\r\n"
   " SIZE\r\n"
   " UTF8\r\n"
   " REST STREAM\r\n"
   " MLST modify*;perm*;size*;type*;\r\n"
   "211 End\r\n");
 send_msg(ctrl->sd, ctrl->buf);
}

static void fn_81(ctrl_t *ctrl, char *command)
{
 char var_82[128];

 snprintf(var_82, sizeof(var_82), "500 command '%s' not recognized by server.\r\n", command);
 send_msg(ctrl->sd, var_82);
}



static ftp_cmd_t supported[] = {
 { "ABOR", handle_ABOR },
 { "DELE", handle_DELE },
 { "USER", handle_USER },
 { "PASS", handle_PASS },
 { "SYST", handle_SYST },
 { "TYPE", handle_TYPE },
 { "PORT", handle_PORT },
 { "EPRT", handle_EPRT },
 { "RETR", handle_RETR },
 { "MKD", handle_MKD },
 { "RMD", handle_RMD },
 { "REST", handle_REST },
 { "MDTM", handle_MDTM },
 { "PASV", handle_PASV },
 { "EPSV", handle_EPSV },
 { "QUIT", handle_QUIT },
 { "LIST", handle_LIST },
 { "NLST", handle_NLST },
 { "MLST", handle_MLST },
 { "MLSD", handle_MLSD },
 { "CLNT", handle_CLNT },
 { "OPTS", handle_OPTS },
 { "PWD", handle_PWD },
 { "STOR", handle_STOR },
 { "CWD", handle_CWD },
 { "CDUP", handle_CDUP },
 { "SIZE", handle_SIZE },
 { "NOOP", handle_NOOP },
 { "HELP", handle_HELP },
 { "FEAT", handle_FEAT },
 { NULL, NULL }
};

static void fn_82(uev_t *w, void *arg, int var_84)
{
 DBG("Child exiting ...");
 uev_exit(w->ctx);
}

static void fn_83(uev_t *w, void *arg, int var_84)
{
 char *command, *argument;
 ctrl_t *ctrl = (ctrl_t *)arg;
 ftp_cmd_t *cmd;

 if (UEV_ERROR == var_84 || UEV_HUP == var_84) {
  uev_io_start(w);
  return;
 }


 uev_timer_set(&ctrl->timeout_watcher, INACTIVITY_TIMER, 0);

 if (recv_msg(w->fd, ctrl->buf, ctrl->bufsz, &command, &argument)) {
  DBG("Short read, exiting.");
  uev_exit(ctrl->ctx);
  return;
 }

 if (!string_valid(command))
  return;

 if (string_match(command, "FF F4")) {
  DBG("Ignoring IAC command, client should send ABOR as well.");
  return;
 }

 for (cmd = &supported[0]; cmd->command; cmd++) {
  if (string_compare(command, cmd->command)) {
   cmd->cb(ctrl, argument);
   return;
  }
 }

 handle_UNKNOWN(ctrl, command);
}

static void fn_84(ctrl_t *ctrl)
{
 uev_t sigterm_watcher;

 ctrl->bufsz = BUFFER_SIZE * sizeof(char);
 ctrl->buf = malloc(ctrl->bufsz);
 if (!ctrl->buf) {
                WARN(errno, "FTP session failed allocating buffer");
                exit(1);
 }

 snprintf(ctrl->buf, ctrl->bufsz, "220 %s (%s) ready.\r\n", prognm, VERSION);
 send_msg(ctrl->sd, ctrl->buf);

 uev_signal_init(ctrl->ctx, &sigterm_watcher, child_exit, NULL, SIGTERM);
 uev_io_init(ctrl->ctx, &ctrl->io_watcher, read_client_command, ctrl, ctrl->sd, UEV_READ);
 uev_run(ctrl->ctx, 0);
}

int fn_85(uev_ctx_t *ctx, int var_87)
{
 int var_87 = 0;
 ctrl_t *ctrl;
 socklen_t var_87;

 ctrl = new_session(ctx, var_87, &var_87);
 if (!ctrl) {
  if (var_87 < 0) {
   shutdown(var_87, SHUT_RDWR);
   close(var_87);
  }

  return var_87;
 }

 var_87 = sizeof(ctrl->server_sa);
 if (-1 == getsockname(var_87, (struct struct_87 *)&ctrl->server_sa, &var_87)) {
  ERR(errno, "Cannot determine our address");
  goto fail;
 }
 convert_address(&ctrl->server_sa, ctrl->serveraddr, sizeof(ctrl->serveraddr));

 var_87 = sizeof(ctrl->client_sa);
 if (-1 == getpeername(var_87, (struct struct_87 *)&ctrl->client_sa, &var_87)) {
  ERR(errno, "Cannot determine client address");
  goto fail;
 }
 convert_address(&ctrl->client_sa, ctrl->clientaddr, sizeof(ctrl->clientaddr));

 ctrl->type = TYPE_A;
 ctrl->data_listen_sd = -1;
 ctrl->data_sd = -1;
 ctrl->name[0] = 0;
 ctrl->pass[0] = 0;
 ctrl->data_address[0] = 0;
 strlcpy(ctrl->facts, "mpst", sizeof(ctrl->facts));

 INFO("Client connection from %s", ctrl->clientaddr);
 ftp_command(ctrl);

 DBG("Client exiting, bye");
 exit(del_session(ctrl, 1));
fail:
 free(ctrl);
 shutdown(var_87, SHUT_RDWR);
 close(var_87);

 return -1;
}
