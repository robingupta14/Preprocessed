







Jbig2Image *
fn_0(Jbig2Ctx *ctx, uint32_t var_9, uint32_t var_9)
{
    Jbig2Image *image;
    uint32_t stride;

    if (var_9 == 0 || var_9 == 0) {
        jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, "failed to create zero sized image");
        return NULL;
    }

    image = jbig2_new(ctx, Jbig2Image, 1);
    if (image == NULL) {
        jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, "failed to allocate image");
        return NULL;
    }

    stride = ((var_9 - 1) >> 3) + 1;


    if (var_9 > (0x7fffffff / stride)) {
        jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, "integer multiplication overflow (stride=%u, height=%u)", stride, var_9);
        jbig2_free(ctx->allocator, image);
        return NULL;
    }
    image->data = jbig2_new(ctx, uint8_t, (size_t) var_9 * stride);
    if (image->data == NULL) {
        jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, "failed to allocate image data buffer (stride=%u, height=%u)", stride, var_9);
        jbig2_free(ctx->allocator, image);
        return NULL;
    }

    image->width = var_9;
    image->height = var_9;
    image->stride = stride;
    image->refcount = 1;

    return image;
}


Jbig2Image *
fn_3(Jbig2Ctx *ctx, Jbig2Image *image)
{
    if (image)
        image->refcount++;
    return image;
}


void
fn_4(Jbig2Ctx *ctx, Jbig2Image *image)
{
    if (image == NULL)
        return;
    image->refcount--;
    if (image->refcount == 0)
        jbig2_image_free(ctx, image);
}


void
fn_5(Jbig2Ctx *ctx, Jbig2Image *image)
{
    if (image != NULL) {
        jbig2_free(ctx->allocator, image->data);
        jbig2_free(ctx->allocator, image);
    }
}


Jbig2Image *
fn_6(Jbig2Ctx *ctx, Jbig2Image *image, uint32_t var_9, uint32_t var_9, int var_40)
{
    if (var_9 == image->width) {
        uint8_t *data;


        if (image->height > (0x7fffffff / image->stride)) {
            jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, "integer multiplication overflow during resize (stride=%u, height=%u)", image->stride, var_9);
            return NULL;
        }

        data = jbig2_renew(ctx, image->data, uint8_t, (size_t) var_9 * image->stride);
        if (data == NULL) {
            jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1, "failed to reallocate image");
            return NULL;
        }
        image->data = data;
        if (var_9 > image->height) {
            const uint8_t var_36 = var_40 ? 0xFF : 0x00;
            memset(image->data + (size_t) image->height * image->stride, var_36, ((size_t) var_9 - image->height) * image->stride);
        }
        image->height = var_9;

    } else {
        Jbig2Image *newimage;
        int code;



        newimage = jbig2_image_new(ctx, var_9, var_9);
        if (newimage == NULL) {
            jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, "failed to allocate resized image");
            return NULL;
        }
        jbig2_image_clear(ctx, newimage, var_40);

        code = jbig2_image_compose(ctx, newimage, image, 0, 0, JBIG2_COMPOSE_REPLACE);
        if (code < 0) {
            jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1, "failed to compose image buffers when resizing");
            jbig2_image_release(ctx, newimage);
            return NULL;
        }




        jbig2_free(ctx->allocator, image->data);
        image->width = newimage->width;
        image->height = newimage->height;
        image->stride = newimage->stride;
        image->data = newimage->data;
        jbig2_free(ctx->allocator, newimage);
    }

    return image;
}

static inline void
fn_9(const uint8_t * JBIG2_RESTRICT var_35, uint8_t * JBIG2_RESTRICT var_35, int var_35, int var_35, uint8_t var_35, uint8_t var_35, uint32_t var_23, uint32_t var_40, uint32_t var_35, uint32_t var_30, uint32_t var_30, Jbig2ComposeOp var_35)
{
    int i;
    uint32_t j;
    int var_35 = (int)var_23;

    if (var_35 == 1) {
        for (j = 0; j < var_40; j++) {

            uint8_t var_24 = (((var_35 ? 0 : var_35[0]<<8) | (var_35 ? 0 : var_35[1]))>>var_35);
            if (var_35 == JBIG2_COMPOSE_OR)
                *var_35 |= var_24 & var_35;
            else if (var_35 == JBIG2_COMPOSE_AND)
                *var_35 &= (var_24 & var_35) | ~var_35;
            else if (var_35 == JBIG2_COMPOSE_XOR)
                *var_35 ^= var_24 & var_35;
            else if (var_35 == JBIG2_COMPOSE_XNOR)
                *var_35 ^= (~var_24) & var_35;
            else
                *var_35 = (var_24 & var_35) | (*var_35 & ~var_35);
            var_35 += var_30;
            var_35 += var_30;
        }
        return;
    }
    var_35 -= 2;
    if (var_35 == 0) {
        var_35++;
        for (j = 0; j < var_40; j++) {

            const uint8_t * JBIG2_RESTRICT s = var_35;
            uint8_t * JBIG2_RESTRICT d = var_35;
            if (var_35 == JBIG2_COMPOSE_OR)
                *d++ |= *s++ & var_35;
            else if (var_35 == JBIG2_COMPOSE_AND)
                *d++ &= (*s++ & var_35) | ~var_35;
            else if (var_35 == JBIG2_COMPOSE_XOR)
                *d++ ^= *s++ & var_35;
            else if (var_35 == JBIG2_COMPOSE_XNOR)
                *d++ ^= (~*s++) & var_35;
            else
                *d = (*s++ & var_35) | (*d & ~var_35), d++;

            for (i = var_35; i != 0; i--) {
                if (var_35 == JBIG2_COMPOSE_OR)
                    *d++ |= *s++;
                else if (var_35 == JBIG2_COMPOSE_AND)
                    *d++ &= *s++;
                else if (var_35 == JBIG2_COMPOSE_XOR)
                    *d++ ^= *s++;
                else if (var_35 == JBIG2_COMPOSE_XNOR)
                    *d++ ^= ~*s++;
                else
                    *d++ = *s++;
            }

            if (var_35 == JBIG2_COMPOSE_OR)
                *d |= *s & var_35;
            else if (var_35 == JBIG2_COMPOSE_AND)
                *d &= (*s & var_35) | ~var_35;
            else if (var_35 == JBIG2_COMPOSE_XOR)
                *d ^= *s & var_35;
            else if (var_35 == JBIG2_COMPOSE_XNOR)
                *d ^= (~*s) & var_35;
            else
                *d = (*s & var_35) | (*d & ~var_35);
            var_35 += var_30;
            var_35 += var_30;
        }
    } else {
        for (j = 0; j < var_40; j++) {

            const uint8_t * JBIG2_RESTRICT s = var_35;
            uint8_t * JBIG2_RESTRICT d = var_35;
            uint8_t s0, s1, var_24;
            s0 = var_35 ? 0 : *s;
            s++;
            s1 = *s++;
            var_24 = ((s0<<8) | s1)>>var_35;
            if (var_35 == JBIG2_COMPOSE_OR)
                *d++ |= var_24 & var_35;
            else if (var_35 == JBIG2_COMPOSE_AND)
                *d++ &= (var_24 & var_35) | ~var_35;
            else if (var_35 == JBIG2_COMPOSE_XOR)
                *d++ ^= var_24 & var_35;
            else if (var_35 == JBIG2_COMPOSE_XNOR)
                *d++ ^= (~var_24) & var_35;
            else
                *d = (var_24 & var_35) | (*d & ~var_35), d++;

            for (i = var_35; i > 0; i--) {
                s0 = s1; s1 = *s++;
                var_24 = ((s0<<8) | s1)>>var_35;
                if (var_35 == JBIG2_COMPOSE_OR)
                    *d++ |= var_24;
                else if (var_35 == JBIG2_COMPOSE_AND)
                    *d++ &= var_24;
                else if (var_35 == JBIG2_COMPOSE_XOR)
                    *d++ ^= var_24;
                else if (var_35 == JBIG2_COMPOSE_XNOR)
                    *d++ ^= ~var_24;
                else
                    *d++ = var_24;
            }

            s0 = s1; s1 = (var_35 ? 0 : *s);
            var_24 = (((s0<<8) | s1)>>var_35);
            if (var_35 == JBIG2_COMPOSE_OR)
                *d |= var_24 & var_35;
            else if (var_35 == JBIG2_COMPOSE_AND)
                *d &= (var_24 & var_35) | ~var_35;
            else if (var_35 == JBIG2_COMPOSE_XOR)
                *d ^= var_24 & var_35;
            else if (var_35 == JBIG2_COMPOSE_XNOR)
                *d ^= ~var_24 & var_35;
            else
                *d = (var_24 & var_35) | (*d & ~var_35);
            var_35 += var_30;
            var_35 += var_30;
        }
    }
}

static void
fn_24(const uint8_t *s, uint8_t *d, int var_35, int var_35, uint8_t var_40, uint8_t var_35, uint32_t var_35, uint32_t var_40, uint32_t var_35, uint32_t var_30, uint32_t var_30)
{
    if (var_35 || var_35)
        template_image_compose_opt(s, d, var_35, var_35, var_40, var_35, var_35, var_40, var_35, var_30, var_30, JBIG2_COMPOSE_OR);
    else
        template_image_compose_opt(s, d, 0, 0, var_40, var_35, var_35, var_40, var_35, var_30, var_30, JBIG2_COMPOSE_OR);
}

static void
fn_26(const uint8_t *s, uint8_t *d, int var_35, int var_35, uint8_t var_40, uint8_t var_35, uint32_t var_35, uint32_t var_40, uint32_t var_35, uint32_t var_30, uint32_t var_30)
{
    if (var_35 || var_35)
        template_image_compose_opt(s, d, var_35, var_35, var_40, var_35, var_35, var_40, var_35, var_30, var_30, JBIG2_COMPOSE_AND);
    else
        template_image_compose_opt(s, d, 0, 0, var_40, var_35, var_35, var_40, var_35, var_30, var_30, JBIG2_COMPOSE_AND);
}

static void
fn_27(const uint8_t *s, uint8_t *d, int var_35, int var_35, uint8_t var_40, uint8_t var_35, uint32_t var_35, uint32_t var_40, uint32_t var_35, uint32_t var_30, uint32_t var_30)
{
    if (var_35 || var_35)
        template_image_compose_opt(s, d, var_35, var_35, var_40, var_35, var_35, var_40, var_35, var_30, var_30, JBIG2_COMPOSE_XOR);
    else
        template_image_compose_opt(s, d, 0, 0, var_40, var_35, var_35, var_40, var_35, var_30, var_30, JBIG2_COMPOSE_XOR);
}

static void
fn_28(const uint8_t *s, uint8_t *d, int var_35, int var_35, uint8_t var_40, uint8_t var_35, uint32_t var_35, uint32_t var_40, uint32_t var_35, uint32_t var_30, uint32_t var_30)
{
    if (var_35 || var_35)
        template_image_compose_opt(s, d, var_35, var_35, var_40, var_35, var_35, var_40, var_35, var_30, var_30, JBIG2_COMPOSE_XNOR);
    else
        template_image_compose_opt(s, d, 0, 0, var_40, var_35, var_35, var_40, var_35, var_30, var_30, JBIG2_COMPOSE_XNOR);
}

static void
fn_29(const uint8_t *s, uint8_t *d, int var_35, int var_35, uint8_t var_40, uint8_t var_35, uint32_t var_35, uint32_t var_40, uint32_t var_35, uint32_t var_30, uint32_t var_30)
{
    if (var_35 || var_35)
        template_image_compose_opt(s, d, var_35, var_35, var_40, var_35, var_35, var_40, var_35, var_30, var_30, JBIG2_COMPOSE_REPLACE);
    else
        template_image_compose_opt(s, d, 0, 0, var_40, var_35, var_35, var_40, var_35, var_30, var_30, JBIG2_COMPOSE_REPLACE);
}


int
fn_30(Jbig2Ctx *ctx, Jbig2Image *dst, Jbig2Image *src, int var_40, int var_40, Jbig2ComposeOp var_35)
{
    uint32_t var_40, var_40;
    uint32_t var_35;
    uint32_t leftbyte;
    uint8_t *var_35;
    uint8_t *var_35;
    uint8_t var_35, var_35;
    int var_35 = var_40 >= 0;
    int var_35;
    uint32_t var_35;
    uint32_t var_35 = 0;

    if (src == NULL)
        return 0;

    var_40 = src->width;
    var_40 = src->height;
    var_35 = (var_40 & 7);
    var_35 = src->data - var_35;

    if (var_40 < 0) {
        if (var_40 < (uint32_t) -var_40)
            var_40 = 0;
        else
            var_40 += var_40;
        var_35 += (-var_40-1)>>3;
        var_40 = 0;
    }
    if (var_40 < 0) {
        if (var_40 < (uint32_t) -var_40)
            var_40 = 0;
        else
            var_40 += var_40;
        var_35 = -var_40 * src->stride;
        var_40 = 0;
    }
    if ((uint32_t)var_40 + var_40 > dst->width)
    {
        if (dst->width < (uint32_t)var_40)
            var_40 = 0;
        else
            var_40 = dst->width - var_40;
    }
    if ((uint32_t)var_40 + var_40 > dst->height)
    {
        if (dst->height < (uint32_t)var_40)
            var_40 = 0;
        else
            var_40 = dst->height - var_40;
    }





    if ((var_40 <= 0) || (var_40 <= 0)) {



        return 0;
    }

    leftbyte = (uint32_t) var_40 >> 3;
    var_35 = dst->data + var_40 * dst->stride + leftbyte;
    var_35 = (((uint32_t) var_40 + var_40 - 1) >> 3) - leftbyte + 1;
    var_35 = 255>>(var_40&7);
    var_35 = (((var_40+var_40)&7) == 0) ? 255 : ~(255>>((var_40+var_40)&7));
    if (var_35 == 1)
        var_35 &= var_35;
    var_35 = (var_35 + var_35 >= src->data + ((src->width+7)>>3));
    var_35 += var_35;

    switch(var_35)
    {
    case JBIG2_COMPOSE_OR:
        jbig2_image_compose_opt_OR(var_35, var_35, var_35, var_35, var_35, var_35, var_35, var_40, var_35, dst->stride, src->stride);
        break;
    case JBIG2_COMPOSE_AND:
        jbig2_image_compose_opt_AND(var_35, var_35, var_35, var_35, var_35, var_35, var_35, var_40, var_35, dst->stride, src->stride);
        break;
    case JBIG2_COMPOSE_XOR:
        jbig2_image_compose_opt_XOR(var_35, var_35, var_35, var_35, var_35, var_35, var_35, var_40, var_35, dst->stride, src->stride);
        break;
    case JBIG2_COMPOSE_XNOR:
        jbig2_image_compose_opt_XNOR(var_35, var_35, var_35, var_35, var_35, var_35, var_35, var_40, var_35, dst->stride, src->stride);
        break;
    case JBIG2_COMPOSE_REPLACE:
        jbig2_image_compose_opt_REPLACE(var_35, var_35, var_35, var_35, var_35, var_35, var_35, var_40, var_35, dst->stride, src->stride);
        break;
    }

    return 0;
}


void
fn_35(Jbig2Ctx *ctx, Jbig2Image *image, int var_40)
{
    const uint8_t var_36 = var_40 ? 0xFF : 0x00;

    memset(image->data, var_36, image->stride * image->height);
}





int
fn_36(Jbig2Image *image, int var_40, int var_40)
{
    const int var_40 = image->width;
    const int var_40 = image->height;
    const int var_40 = (var_40 >> 3) + var_40 * image->stride;
    const int var_40 = 7 - (var_40 & 7);

    if ((var_40 < 0) || (var_40 >= var_40))
        return 0;
    if ((var_40 < 0) || (var_40 >= var_40))
        return 0;

    return ((image->data[var_40] >> var_40) & 1);
}


void
fn_39(Jbig2Image *image, int var_40, int var_40, bool var_40)
{
    const int var_40 = image->width;
    const int var_40 = image->height;
    int scratch, var_40;
    int var_40, var_40;

    if ((var_40 < 0) || (var_40 >= var_40))
        return;
    if ((var_40 < 0) || (var_40 >= var_40))
        return;

    var_40 = (var_40 >> 3) + var_40 * image->stride;
    var_40 = 7 - (var_40 & 7);
    var_40 = (1 << var_40) ^ 0xff;

    scratch = image->data[var_40] & var_40;
    image->data[var_40] = scratch | (var_40 << var_40);
}
