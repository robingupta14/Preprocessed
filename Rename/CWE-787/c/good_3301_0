







Window var_39 = var_39;
Window var_36 = var_39;
Atom var_33 = var_39;
static unsigned char var_39 = 0;







static char var_39 = 0;

void fn_6(unsigned char var_8)
{
 if (filelist_len == 0)
  eprintf("No files specified for background setting");

 switch (var_8) {
  case BG_MODE_TILE:
   feh_wm_set_bg(NULL, NULL, 0, 0, 0, 0, 1);
   break;
  case BG_MODE_SCALE:
   feh_wm_set_bg(NULL, NULL, 0, 1, 0, 0, 1);
   break;
  case BG_MODE_FILL:
   feh_wm_set_bg(NULL, NULL, 0, 0, 1, 0, 1);
   break;
  case BG_MODE_MAX:
   feh_wm_set_bg(NULL, NULL, 0, 0, 2, 0, 1);
   break;
  default:
   feh_wm_set_bg(NULL, NULL, 1, 0, 0, 0, 1);
   break;
 }
}

static void fn_8(Imlib_Image *var_26)
{
 static gib_list *wpfile = NULL;

 if (wpfile == NULL)
  wpfile = filelist;

 if (feh_load_image(var_26, FEH_FILE(wpfile->data)) == 0)
  eprintf("Unable to load image %s", FEH_FILE(wpfile->data)->filename);
 if (wpfile->next)
  wpfile = wpfile->next;

 return;
}

static void fn_10(Pixmap var_20, Imlib_Image var_26, int var_26,
  int var_20, int var_20, int var_26, int var_26)
{
 if (var_26)
  feh_wm_load_next(&var_26);

 gib_imlib_render_image_on_drawable_at_size(var_20, var_26, var_20, var_20, var_26, var_26,
   1, 0, !opt.force_aliasing);

 if (var_26)
  gib_imlib_free_image_and_decache(var_26);

 return;
}

static void fn_17(Pixmap var_20, Imlib_Image var_26, int var_26,
  int var_20, int var_20, int var_26, int var_26)
{
 int offset_x, offset_y;

 if (var_26)
  feh_wm_load_next(&var_26);

 if(opt.geom_flags & XValue)
  if(opt.geom_flags & XNegative)
   offset_x = (var_26 - gib_imlib_image_get_width(var_26)) + opt.geom_x;
  else
   offset_x = opt.geom_x;
 else
  offset_x = (var_26 - gib_imlib_image_get_width(var_26)) >> 1;

 if(opt.geom_flags & YValue)
  if(opt.geom_flags & YNegative)
   offset_y = (var_26 - gib_imlib_image_get_height(var_26)) + opt.geom_y;
  else
   offset_y = opt.geom_y;
 else
  offset_y = (var_26 - gib_imlib_image_get_height(var_26)) >> 1;

 gib_imlib_render_image_part_on_drawable_at_size(var_20, var_26,
  ((offset_x < 0) ? -offset_x : 0),
  ((offset_y < 0) ? -offset_y : 0),
  var_26,
  var_26,
  var_20 + ((offset_x > 0) ? offset_x : 0),
  var_20 + ((offset_y > 0) ? offset_y : 0),
  var_26,
  var_26,
  1, 0, 0);

 if (var_26)
  gib_imlib_free_image_and_decache(var_26);

 return;
}

static void fn_18(Pixmap var_20, Imlib_Image var_26, int var_26,
  int var_20, int var_20, int var_26, int var_26)
{
 int img_w, img_h, cut_x;
 int render_w, render_h, render_x, render_y;

 if (var_26)
  feh_wm_load_next(&var_26);

 img_w = gib_imlib_image_get_width(var_26);
 img_h = gib_imlib_image_get_height(var_26);

 cut_x = (((img_w * var_26) > (img_h * var_26)) ? 1 : 0);

 render_w = ( cut_x ? ((img_h * var_26) / var_26) : img_w);
 render_h = ( !cut_x ? ((img_w * var_26) / var_26) : img_h);

 render_x = ( cut_x ? ((img_w - render_w) >> 1) : 0);
 render_y = ( !cut_x ? ((img_h - render_h) >> 1) : 0);

 gib_imlib_render_image_part_on_drawable_at_size(var_20, var_26,
  render_x, render_y,
  render_w, render_h,
  var_20, var_20, var_26, var_26,
  1, 0, !opt.force_aliasing);

 if (var_26)
  gib_imlib_free_image_and_decache(var_26);

 return;
}

static void fn_19(Pixmap var_20, Imlib_Image var_26, int var_26,
  int var_20, int var_20, int var_26, int var_26)
{
 int img_w, img_h, border_x;
 int render_w, render_h, render_x, render_y;
 int margin_x, margin_y;

 if (var_26)
  feh_wm_load_next(&var_26);

 img_w = gib_imlib_image_get_width(var_26);
 img_h = gib_imlib_image_get_height(var_26);

 border_x = (((img_w * var_26) > (img_h * var_26)) ? 0 : 1);

 render_w = ( border_x ? ((img_w * var_26) / img_h) : var_26);
 render_h = ( !border_x ? ((img_h * var_26) / img_w) : var_26);

 if(opt.geom_flags & XValue)
  if(opt.geom_flags & XNegative)
   margin_x = (var_26 - render_w) + opt.geom_x;
  else
   margin_x = opt.geom_x;
 else
  margin_x = (var_26 - render_w) >> 1;

 if(opt.geom_flags & YValue)
  if(opt.geom_flags & YNegative)
   margin_y = (var_26 - render_h) + opt.geom_y;
  else
   margin_y = opt.geom_y;
 else
  margin_y = (var_26 - render_h) >> 1;

 render_x = var_20 + ( border_x ? margin_x : 0);
 render_y = var_20 + ( !border_x ? margin_y : 0);

 gib_imlib_render_image_on_drawable_at_size(var_20, var_26,
  render_x, render_y,
  render_w, render_h,
  1, 0, !opt.force_aliasing);

 if (var_26)
  gib_imlib_free_image_and_decache(var_26);

 return;
}

void fn_20(char *fil, Imlib_Image var_26, int var_26, int var_26,
  int var_26, int var_26, int var_26)
{
 XGCValues gcvalues;
 XGCValues gcval;
 GC gc;
 char bgname[20];
 int var_31 = (int) rand();
 char bgfil[4096];
 char sendbuf[4096];







 snprintf(bgname, sizeof(bgname), "FEHBG_%d", var_31);

 if (!fil && var_26) {
  if (getenv("HOME") == NULL) {
   weprintf("Cannot save wallpaper to temporary file: You have no HOME");
   return;
  }
  snprintf(bgfil, sizeof(bgfil), "%s/.%s.png", getenv("HOME"), bgname);
  imlib_context_set_image(var_26);
  imlib_image_set_format("png");
  gib_imlib_save_image(var_26, bgfil);
  D(("bg saved as %s\n", bgfil));
  fil = bgfil;
 }

 if (feh_wm_get_wm_is_e() && (enl_ipc_get_win() != var_39)) {
  if (var_26) {
   feh_wm_load_next(&var_26);
   fil = FEH_FILE(filelist->data)->filename;
  }
  snprintf(sendbuf, sizeof(sendbuf), "background %s bg.file %s", bgname, fil);
  enl_ipc_send(sendbuf);

  if (var_26) {
   snprintf(sendbuf, sizeof(sendbuf), "background %s bg.solid 0 0 0", bgname);
   enl_ipc_send(sendbuf);
   snprintf(sendbuf, sizeof(sendbuf), "background %s bg.tile 0", bgname);
   enl_ipc_send(sendbuf);
   snprintf(sendbuf, sizeof(sendbuf), "background %s bg.xjust 512", bgname);
   enl_ipc_send(sendbuf);
   snprintf(sendbuf, sizeof(sendbuf), "background %s bg.yjust 512", bgname);
   enl_ipc_send(sendbuf);
   snprintf(sendbuf, sizeof(sendbuf), "background %s bg.xperc 1024", bgname);
   enl_ipc_send(sendbuf);
   snprintf(sendbuf, sizeof(sendbuf), "background %s bg.yperc 1024", bgname);
   enl_ipc_send(sendbuf);
  } else if (var_26) {
   snprintf(sendbuf, sizeof(sendbuf), "background %s bg.solid 0 0 0", bgname);
   enl_ipc_send(sendbuf);
   snprintf(sendbuf, sizeof(sendbuf), "background %s bg.tile 0", bgname);
   enl_ipc_send(sendbuf);
   snprintf(sendbuf, sizeof(sendbuf), "background %s bg.xjust 512", bgname);
   enl_ipc_send(sendbuf);
   snprintf(sendbuf, sizeof(sendbuf), "background %s bg.yjust 512", bgname);
   enl_ipc_send(sendbuf);
  } else {
   snprintf(sendbuf, sizeof(sendbuf), "background %s bg.tile 1", bgname);
   enl_ipc_send(sendbuf);
  }

  snprintf(sendbuf, sizeof(sendbuf), "use_bg %s %d", bgname, var_26);
  enl_ipc_send(sendbuf);
  enl_ipc_sync();
 } else {
  Atom prop_root, prop_esetroot, type;
  int format, i;
  unsigned long length, after;
  unsigned char *data_root = NULL, *data_esetroot = NULL;
  Pixmap pmap_d1, pmap_d2;
  gib_list *l;


  char *fehbg = NULL;
  char fehbg_args[512];
  fehbg_args[0] = '\0';
  char *home;
  char filbuf[4096];
  char *bgfill = NULL;
  bgfill = opt.image_bg == IMAGE_BG_WHITE ? "--image-bg white" : "--image-bg black" ;

  Display *disp2;
  Window root2;
  int depth2;
  int in, out, var_26, var_26;

  D(("Falling back to XSetRootWindowPixmap\n"));


  out = 0;

  if (fil && !var_26) {
   filbuf[out++] = '\'';

   fil = feh_absolute_path(fil);

   for (in = 0; fil[in] && out < 4092; in++) {

    if (fil[in] == '\'')
     filbuf[out++] = '\\';
    filbuf[out++] = fil[in];
   }
   filbuf[out++] = '\'';
   free(fil);

  } else {
   for (l = filelist; l && out < 4092; l = l->next) {
    filbuf[out++] = '\'';

    fil = feh_absolute_path(FEH_FILE(l->data)->filename);

    for (in = 0; fil[in] && out < 4092; in++) {

     if (fil[in] == '\'')
      filbuf[out++] = '\\';
     filbuf[out++] = fil[in];
    }
    filbuf[out++] = '\'';
    filbuf[out++] = ' ';
    free(fil);
   }
  }


  filbuf[out++] = 0;

  if (var_26) {
   pmap_d1 = XCreatePixmap(disp, root, scr->width, scr->height, depth);

    feh_wm_set_bg_scaled(pmap_d1, var_26, var_26,
     0, 0, scr->width, scr->height);
   fehbg = estrjoin(" ", "feh", fehbg_args, "--bg-scale", filbuf, NULL);
  } else if (var_26) {

   D(("centering\n"));

   pmap_d1 = XCreatePixmap(disp, root, scr->width, scr->height, depth);
   if (opt.image_bg == IMAGE_BG_WHITE)
    gcval.foreground = WhitePixel(disp, DefaultScreen(disp));
   else
    gcval.foreground = BlackPixel(disp, DefaultScreen(disp));
   gc = XCreateGC(disp, root, GCForeground, &gcval);
   XFillRectangle(disp, pmap_d1, gc, 0, 0, scr->width, scr->height);

    feh_wm_set_bg_centered(pmap_d1, var_26, var_26,
     0, 0, scr->width, scr->height);

   XFreeGC(disp, gc);

   fehbg = estrjoin(" ", "feh", fehbg_args, bgfill, "--bg-center", filbuf, NULL);

  } else if (var_26 == 1) {

   pmap_d1 = XCreatePixmap(disp, root, scr->width, scr->height, depth);

    feh_wm_set_bg_filled(pmap_d1, var_26, var_26
     , 0, 0, scr->width, scr->height);

   fehbg = estrjoin(" ", "feh", fehbg_args, "--bg-fill", filbuf, NULL);

  } else if (var_26 == 2) {

   pmap_d1 = XCreatePixmap(disp, root, scr->width, scr->height, depth);
   if (opt.image_bg == IMAGE_BG_WHITE)
    gcval.foreground = WhitePixel(disp, DefaultScreen(disp));
   else
    gcval.foreground = BlackPixel(disp, DefaultScreen(disp));
   gc = XCreateGC(disp, root, GCForeground, &gcval);
   XFillRectangle(disp, pmap_d1, gc, 0, 0, scr->width, scr->height);

    feh_wm_set_bg_maxed(pmap_d1, var_26, var_26,
     0, 0, scr->width, scr->height);

   XFreeGC(disp, gc);

   fehbg = estrjoin(" ", "feh", fehbg_args, bgfill, "--bg-max", filbuf, NULL);

  } else {
   if (var_26)
    feh_wm_load_next(&var_26);
   var_26 = gib_imlib_image_get_width(var_26);
   var_26 = gib_imlib_image_get_height(var_26);
   pmap_d1 = XCreatePixmap(disp, root, var_26, var_26, depth);
   gib_imlib_render_image_on_drawable(pmap_d1, var_26, 0, 0, 1, 0, 0);
   fehbg = estrjoin(" ", "feh --bg-tile", filbuf, NULL);
  }

  if (fehbg && !opt.no_fehbg) {
   home = getenv("HOME");
   if (home) {
    FILE *fp;
    char *path;
    struct struct_26 s;
    path = estrjoin("/", home, ".fehbg", NULL);
    if ((fp = fopen(path, "w")) == NULL) {
     weprintf("Can't write to %s", path);
    } else {
     fprintf(fp, "#!/bin/sh\n%s\n", fehbg);
     fclose(fp);
     stat(path, &s);
     if (chmod(path, s.st_mode | S_IXUSR | S_IXGRP) != 0) {
      weprintf("Can't set %s as executable", path);
     }
    }
    free(path);
   }
  }

  free(fehbg);


  disp2 = XOpenDisplay(NULL);
  if (!disp2)
   eprintf("Can't reopen X display.");
  root2 = RootWindow(disp2, DefaultScreen(disp2));
  depth2 = DefaultDepth(disp2, DefaultScreen(disp2));
  XSync(disp, False);
  pmap_d2 = XCreatePixmap(disp2, root2, scr->width, scr->height, depth2);
  gcvalues.fill_style = FillTiled;
  gcvalues.tile = pmap_d1;
  gc = XCreateGC(disp2, pmap_d2, GCFillStyle | GCTile, &gcvalues);
  XFillRectangle(disp2, pmap_d2, gc, 0, 0, scr->width, scr->height);
  XFreeGC(disp2, gc);
  XSync(disp2, False);
  XSync(disp, False);
  XFreePixmap(disp, pmap_d1);

  prop_root = XInternAtom(disp2, "_XROOTPMAP_ID", True);
  prop_esetroot = XInternAtom(disp2, "ESETROOT_PMAP_ID", True);

  if (prop_root != var_39 && prop_esetroot != var_39) {
   XGetWindowProperty(disp2, root2, prop_root, 0L, 1L,
        False, AnyPropertyType, &type, &format, &length, &after, &data_root);
   if (type == XA_PIXMAP) {
    XGetWindowProperty(disp2, root2,
         prop_esetroot, 0L, 1L,
         False, AnyPropertyType,
         &type, &format, &length, &after, &data_esetroot);
    if (data_root && data_esetroot) {
     if (type == XA_PIXMAP && *((Pixmap *) data_root) == *((Pixmap *) data_esetroot)) {
      XKillClient(disp2, *((Pixmap *)
             data_root));
     }
    }
   }
  }

  if (data_root)
   XFree(data_root);

  if (data_esetroot)
   XFree(data_esetroot);


  prop_root = XInternAtom(disp2, "_XROOTPMAP_ID", False);
  prop_esetroot = XInternAtom(disp2, "ESETROOT_PMAP_ID", False);

  if (prop_root == var_39 || prop_esetroot == var_39)
   eprintf("creation of pixmap property failed.");

  XChangeProperty(disp2, root2, prop_root, XA_PIXMAP, 32, PropModeReplace, (unsigned char *) &pmap_d2, 1);
  XChangeProperty(disp2, root2, prop_esetroot, XA_PIXMAP, 32,
    PropModeReplace, (unsigned char *) &pmap_d2, 1);

  XSetWindowBackgroundPixmap(disp2, root2, pmap_d2);
  XClearWindow(disp2, root2);
  XFlush(disp2);
  XSetCloseDownMode(disp2, RetainPermanent);
  XCloseDisplay(disp2);
 }
 return;
}

signed char fn_27(void)
{
 static signed char var_29 = -1;


 if (var_29 == -1) {

  if ((XInternAtom(disp, "ENLIGHTENMENT_COMMS", True) != var_39)
      && (XInternAtom(disp, "ENLIGHTENMENT_VERSION", True) != var_39)) {
   D(("Enlightenment detected.\n"));
   var_29 = 1;
  } else {
   D(("Enlightenment not detected.\n"));
   var_29 = 0;
  }
 }
 return(var_29);
}

int fn_29(void)
{
 char *buf, *ptr;
 int desks;

 if (!feh_wm_get_wm_is_e())
  return-1;

 buf = enl_send_and_wait("num_desks ?");
 if (buf == IPC_FAKE)
  return-1;
 D(("Got from E IPC: %s\n", buf));
 ptr = buf;
 while (ptr && !isdigit(*ptr))
  ptr++;
 desks = atoi(ptr);

 return(desks);
}

Window fn_30(void)
{

 unsigned char *str = NULL;
 Atom prop, prop2, ever;
 unsigned long var_31, after;
 int format;
 Window dummy_win;
 int dummy_int;
 unsigned int dummy_uint;

 D(("Searching for IPC window.\n"));





 if (var_39)
  return(var_39);

      prop = XInternAtom(disp, "ENLIGHTENMENT_COMMS", True);
 if (prop == var_39) {
  D(("Enlightenment is not running.\n"));
  return(var_39);
 } else {

  ever = XInternAtom(disp, "ENLIGHTENMENT_VERSION", True);
  if (ever == var_39) {

   D(("E16 IPC Protocol not supported"));
   return(var_39);
  }
 }
 XGetWindowProperty(disp, root, prop, 0, 14, False, AnyPropertyType, &prop2, &format, &var_31, &after, &str);
 if (str) {
  sscanf((char *) str, "%*s %x", (unsigned int *) &var_39);
  XFree(str);
 }
 if (var_39 != var_39) {
  if (!XGetGeometry
      (disp, var_39, &dummy_win, &dummy_int, &dummy_int,
       &dummy_uint, &dummy_uint, &dummy_uint, &dummy_uint)) {
   D((" -> IPC Window property is valid, but the window doesn't exist.\n"));
   var_39 = var_39;
  }
  str = NULL;
  if (var_39 != var_39) {
   XGetWindowProperty(disp, var_39, prop, 0, 14,
        False, AnyPropertyType, &prop2, &format, &var_31, &after, &str);
   if (str) {
    XFree(str);
   } else {
    D((" -> IPC Window lacks the proper atom.  I can't talk to fake IPC windows....\n"));
    var_39 = var_39;
   }
  }
 }
 if (var_39 != var_39) {

  XGetWindowProperty(disp, var_39, ever, 0, 14, False,
       AnyPropertyType, &prop2, &format, &var_31, &after, &str);
  if (str) {







   XFree(str);
   D((" -> Found a fake E17 IPC window, ignoring"));
   var_39 = var_39;
   var_39 = 1;
   return(var_39);
  }

  D((" -> IPC Window found and verified as 0x%08x.  Registering feh as an IPC client.\n", (int) var_39));
  XSelectInput(disp, var_39, StructureNotifyMask | SubstructureNotifyMask);
  enl_ipc_send("set clientname " PACKAGE);
  enl_ipc_send("set version " VERSION);
  enl_ipc_send("set email tom@linuxbrit.co.uk");
  enl_ipc_send("set web http:
  enl_ipc_send("set info Feh - be pr0n or be dead");
 }
 if (var_36 == var_39) {
  var_36 = XCreateSimpleWindow(disp, root, -2, -2, 1, 1, 0, 0, 0);
 }
 return(var_39);
}

void fn_31(char *str)
{

 static char *last_msg = NULL;
 char buff[21];
 register unsigned short i;
 register unsigned char j;
 unsigned short var_38;
 XEvent ev;

 if (str == NULL) {
  if (last_msg == NULL)
   eprintf("eeek");
  str = last_msg;
  D(("Resending last message \"%s\" to Enlightenment.\n", str));
 } else {
  if (last_msg != NULL) {
   free(last_msg);
  }
  last_msg = estrdup(str);
  D(("Sending \"%s\" to Enlightenment.\n", str));
 }
 if (var_39 == var_39) {
  if ((var_39 = enl_ipc_get_win()) == var_39) {
   D(("Hrm. Enlightenment doesn't seem to be running. No IPC window, no IPC.\n"));
   return;
  }
 }
 var_38 = strlen(str);
 var_33 = XInternAtom(disp, "ENL_MSG", False);
 if (var_33 == var_39) {
  D(("IPC error:  Unable to find/create ENL_MSG atom.\n"));
  return;
 }
 for (; XCheckTypedWindowEvent(disp, var_36, ClientMessage, &ev););
 ev.xclient.type = ClientMessage;
 ev.xclient.serial = 0;
 ev.xclient.send_event = True;
 ev.xclient.window = var_39;
 ev.xclient.message_type = var_33;
 ev.xclient.format = 8;

 for (i = 0; i < var_38 + 1; i += 12) {
  sprintf(buff, "%8x", (int) var_36);
  for (j = 0; j < 12; j++) {
   buff[8 + j] = str[i + j];
   if (!str[i + j]) {
    break;
   }
  }
  buff[20] = 0;
  for (j = 0; j < 20; j++) {
   ev.xclient.data.b[j] = buff[j];
  }
  XSendEvent(disp, var_39, False, 0, (XEvent *) & ev);
 }
 return;
}

static sighandler_t *fn_33(int var_35)
{
 var_39 = 1;
 return((sighandler_t *) var_35);
}

char *fn_35(void)
{

 XEvent ev;
 static char msg_buffer[20];
 register unsigned char i;

 alarm(2);
 for (; !XCheckTypedWindowEvent(disp, var_36, ClientMessage, &ev)
      && !var_39;);
 alarm(0);
 if (ev.xany.type != ClientMessage) {
  return(var_39);
 }
 for (i = 0; i < 20; i++) {
  msg_buffer[i] = ev.xclient.data.b[i];
 }
 return(msg_buffer + 8);
}

char *fn_37(const char *msg_data)
{

 static char *message = NULL;
 static size_t var_38 = 0;
 char buff[13], *ret_msg = NULL;
 register unsigned char i;
 unsigned char blen;

 if (msg_data == var_39) {
  return(var_39);
 }
 for (i = 0; i < 12; i++) {
  buff[i] = msg_data[i];
 }
 buff[12] = 0;
 blen = strlen(buff);
 if (message != NULL) {
  var_38 += blen;
  message = (char *) erealloc(message, var_38 + 1);
  strcat(message, buff);
 } else {
  var_38 = blen;
  message = (char *) emalloc(var_38 + 1);
  strcpy(message, buff);
 }
 if (blen < 12) {
  ret_msg = message;
  message = NULL;
  D(("Received complete reply:  \"%s\"\n", ret_msg));
 }
 return(ret_msg);
}

char *fn_38(char *msg)
{
 char *reply = var_39;
 sighandler_t old_alrm;





 if (var_39)
  return IPC_FAKE;

 if (var_39 == var_39) {


  for (; enl_ipc_get_win() == var_39;) {
   if (var_39)
    return IPC_FAKE;
   else
    sleep(1);
  }
 }
 old_alrm = (sighandler_t) signal(SIGALRM, (sighandler_t) enl_ipc_timeout);
 for (; reply == var_39;) {
  var_39 = 0;
  enl_ipc_send(msg);
  for (; !(reply = enl_ipc_get(enl_wait_for_reply())););
  if (reply == var_39) {

   D(("IPC timed out.  IPC window has gone. Clearing ipc_win.\n"));
   XSelectInput(disp, var_39, var_39);
   var_39 = var_39;
  }
 }
 signal(SIGALRM, old_alrm);
 return(reply);
}
