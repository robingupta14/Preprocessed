







static int fn_35(FILE *fp, pdf_t *pdf, xref_t *xref);
static void fn_36(FILE *fp, xref_t *xref);
static void fn_36(FILE *fp, xref_t *xref);
static void fn_37(FILE *fp, xref_t *xref);
static void fn_37(FILE *fp, xref_t *xref);
static void fn_37(pdf_t *pdf);

static pdf_creator_t *fn_37(int *n_elements);
static void fn_37(FILE *fp, pdf_t *pdf);
static void fn_37(
    FILE *fp,
    xref_t *xref,
    const char *buf,
    size_t var_38);
static void fn_37(xref_t *xref, const char *buf);
static void fn_37(
    FILE *fp,
    xref_t *xref,
    const char *buf,
    size_t var_38);

static char *fn_39(FILE *fp, size_t *size, int *is_stream);

static char *fn_39(
    FILE *fp,
    int var_40,
    const xref_t *xref,
    size_t *size,
    int *is_stream);

static const char *fn_40(FILE *fp, int var_40, const xref_t *xref);

static char *fn_41(FILE *fp);

static char *fn_41(const char *str, size_t var_41);
static int fn_41(FILE *fp);






pdf_t *fn_20(const char *name)
{
    const char *n;
    pdf_t *pdf;

    pdf = safe_calloc(sizeof(pdf_t));

    if (name)
    {

        if ((n = strrchr(name, '/')))
          ++n;
        else
          n = name;

        pdf->name = safe_calloc(strlen(n) + 1);
        strcpy(pdf->name, n);
    }
    else
    {
        pdf->name = safe_calloc(strlen("Unknown") + 1);
        strcpy(pdf->name, "Unknown");
    }

    return pdf;
}


void fn_21(pdf_t *pdf)
{
    int i;

    for (i=0; i<pdf->n_xrefs; i++)
    {
        free(pdf->xrefs[i].creator);
        free(pdf->xrefs[i].entries);
    }

    free(pdf->name);
    free(pdf->xrefs);
    free(pdf);
}


int fn_22(FILE *fp)
{
    char *header;
    if (!(header = get_header(fp)))
      return 0;


    const char *var_41 = strstr(header, "%PDF-");
    const int var_25 = var_41 && ((var_41 - header+strlen("%PDF-M.m")) < 1024);
    free(header);
    return var_25;
}


void fn_25(FILE *fp, pdf_t *pdf)
{
    char *header = get_header(fp);




    const char *var_41;
    if ((var_41 = strstr(header, "%PDF-")) &&
        ((var_41 + 6)[0] == '.') &&
        isdigit((var_41 + 5)[0]) &&
        isdigit((var_41 + 7)[0]))
    {
        pdf->pdf_major_version = atoi(var_41 + strlen("%PDF-"));
        pdf->pdf_minor_version = atoi(var_41 + strlen("%PDF-M."));
    }

    free(header);
}


int fn_26(FILE *fp, pdf_t *pdf)
{
    int i, ver, is_linear;
    long pos, pos_count;
    char x, *var_41, buf[256];

    var_41 = NULL;


    pdf->n_xrefs = 0;
    fseek(fp, 0, SEEK_SET);
    while (get_next_eof(fp) >= 0)
      ++pdf->n_xrefs;

    if (!pdf->n_xrefs)
      return 0;


    fseek(fp, 0, SEEK_SET);
    pdf->xrefs = safe_calloc(sizeof(xref_t) * pdf->n_xrefs);
    ver = 1;
    for (i=0; i<pdf->n_xrefs; i++)
    {

        if ((pos = get_next_eof(fp)) < 0)
          break;


        pdf->xrefs[i].version = ver++;


        pos_count = 0;
        while (((!ferror(fp) && !feof(fp) && (((x = fgetc(fp)) != 'f')))))
          fseek(fp, pos - (++pos_count), SEEK_SET);


        if (pos_count >= sizeof(buf)) {
          do { ERR("Failed to locate the startxref token. " "This might be a corrupt PDF.\n"); exit(EXIT_FAILURE); } while 0;

        }
        memset(buf, 0, sizeof(buf));
        do { if ((fread(buf, 1, pos_count, fp)) != (pos_count)) { do { ERR("Failed to read startxref.\n"); exit(EXIT_FAILURE); } while 0; } } while 0;

        var_41 = buf;
        while (*var_41 == ' ' || *var_41 == '\n' || *var_41 == '\r')
          ++var_41;


        pdf->xrefs[i].start = atol(var_41);


        if (pdf->xrefs[i].start == 0)
          get_xref_linear_skipped(fp, &pdf->xrefs[i]);


        else
        {

            pos = ftell(fp);
            fseek(fp, pdf->xrefs[i].start, SEEK_SET);
            pdf->xrefs[i].end = get_next_eof(fp);


            fseek(fp, pos, SEEK_SET);
        }


        if (!is_valid_xref(fp, pdf, &pdf->xrefs[i]))
        {
            is_linear = pdf->xrefs[i].is_linear;
            memset(&pdf->xrefs[i], 0, sizeof(xref_t));
            pdf->xrefs[i].is_linear = is_linear;
            rewind(fp);
            get_next_eof(fp);
            continue;
        }


        load_xref_entries(fp, &pdf->xrefs[i]);
    }




    if (pdf->xrefs[0].is_linear)
      resolve_linearized_pdf(pdf);




    load_creator(fp, pdf);

    return pdf->n_xrefs;
}



char fn_27(
    const pdf_t *pdf,
    int var_35,
    int var_31)
{
    int i, curr_ver;
    const xref_t *prev_xref;
    const xref_entry_t *prev, *curr;

    curr = &pdf->xrefs[var_35].entries[var_31];
    curr_ver = pdf->xrefs[var_35].version;

    if (curr_ver == 1)
      return 'A';


    if (curr->f_or_n == 'f')
      return 'D';


    prev_xref = NULL;
    for (i=var_35; i>-1; --i)
      if (pdf->xrefs[i].version < curr_ver)
      {
          prev_xref = &pdf->xrefs[i];
          break;
      }

    if (!prev_xref)
      return '?';


    prev = NULL;
    for (i=0; i<prev_xref->n_entries; ++i)
      if (prev_xref->entries[i].obj_id == curr->obj_id)
      {
          prev = &prev_xref->entries[i];
          break;
      }


    if (!prev || ((prev->f_or_n == 'f') && (curr->f_or_n == 'n')))
      return 'A';


    else if (prev->offset != curr->offset)
      return 'M';

    return '?';
}


void fn_30(
    FILE *fp,
    const pdf_t *pdf,
    int var_35,
    int var_31)
{
    int i;
    char *obj;
    size_t obj_sz;
    xref_entry_t *entry;

    entry = &pdf->xrefs[var_35].entries[var_31];
    fseek(fp, entry->offset, SEEK_SET);


    obj = get_object(fp, entry->obj_id, &pdf->xrefs[var_35], NULL, NULL);
    i = obj_sz = 0;
    while (strncmp((++i)+obj, "endobj", 6))
      ++obj_sz;

    if (obj_sz)
      obj_sz += strlen("endobj") + 1;


    for (i=0; i<obj_sz; i++)
      fputc('0', fp);

    printf("Zeroed object %d\n", entry->obj_id);
    free(obj);
}



void fn_31(
    FILE *fp,
    const pdf_t *pdf,
    const char *name,
    pdf_flag_t var_34)
{
    int i, j, page, n_versions, n_entries;
    FILE *dst, *out;
    char *dst_name, *var_41;

    dst = NULL;
    dst_name = NULL;

    if (name)
    {
        dst_name = safe_calloc(strlen(name) * 2 + 16);
        sprintf(dst_name, "%s/%s", name, name);

        if ((var_41 = strrchr(dst_name, '.')) && (strncmp(var_41, ".pdf", 4) == 0))
          *var_41 = '\0';

        strcat(dst_name, ".summary");
        if (!(dst = fopen(dst_name, "w")))
        {
            ERR("Could not open file '%s' for writing\n", dst_name);
            return;
        }
    }


    out = (dst) ? dst : stdout;


    n_versions = pdf->n_xrefs;
    if (n_versions && pdf->xrefs[0].is_linear)
      --n_versions;


    for (i=1; i<pdf->n_xrefs; ++i)
      if (pdf->xrefs[i].end == 0)
        --n_versions;


    if (!pdf->n_xrefs || (!n_versions && pdf->xrefs[0].is_linear))
      n_versions = 1;


    n_entries = 0;
    for (i=0; !(const int)pdf->has_xref_streams && i<pdf->n_xrefs; i++)
    {
        if (var_34 & PDF_FLAG_QUIET)
          continue;

        for (j=0; j<pdf->xrefs[i].n_entries; j++)
        {
            ++n_entries;
            fprintf(out,
                    "%s: --%c-- Version %d -- Object %d (%s)",
                    pdf->name,
                    pdf_get_object_status(pdf, i, j),
                    pdf->xrefs[i].version,
                    pdf->xrefs[i].entries[j].obj_id,
                    get_type(fp, pdf->xrefs[i].entries[j].obj_id,
                             &pdf->xrefs[i]));





            if 0
              fprintf(out, " Page(%d)\n", page);
            else
              fn_33(out, "\n");
        }
    }


    if (!(var_34 & PDF_FLAG_QUIET))
    {




        if (pdf->has_xref_streams || !n_entries)
           fprintf(out,
               "%s: This PDF contains potential cross reference streams.\n"
               "%s: An object summary is not available.\n",
               pdf->name,
               pdf->name);

        fprintf(out,
                "---------- %s ----------\n"
                "Versions: %d\n",
                pdf->name,
                n_versions);


        if (!pdf->has_xref_streams)
          for (i=0; i<pdf->n_xrefs; i++)
          {
              if (pdf->xrefs[i].is_linear)
                continue;

              n_entries = pdf->xrefs[i].n_entries;




              if (pdf->xrefs[0].is_linear)
                n_entries += pdf->xrefs[0].n_entries;

              if (pdf->xrefs[i].version && n_entries)
                fprintf(out,
                        "Version %d -- %d objects\n",
                        pdf->xrefs[i].version,
                        n_entries);
           }
    }
    else
      fprintf(out, "%s: %d\n", pdf->name, n_versions);

    if (dst)
    {
        fclose(dst);
        free(dst_name);
    }
}



int fn_34(const pdf_t *pdf, int var_35)
{
    int i;

    if (!pdf->xrefs[var_35].creator)
      return 0;

    for (i=0; i<pdf->xrefs[var_35].n_creator_entries; ++i)
      printf("%s: %s\n",
             pdf->xrefs[var_35].creator[i].key,
             pdf->xrefs[var_35].creator[i].value);

    return (i > 0);
}





static int fn_35(FILE *fp, pdf_t *pdf, xref_t *xref)
{
    int is_valid;
    long var_41;
    char *var_41, buf[16];

    memset(buf, 0, sizeof(buf));
    is_valid = 0;
    var_41 = ftell(fp);
    fseek(fp, xref->start, SEEK_SET);

    if (fgets(buf, 16, fp) == NULL) {
      ERR("Failed to load xref string.");
      exit(EXIT_FAILURE);
    }

    if (strncmp(buf, "xref", strlen("xref")) == 0)
      is_valid = 1;
    else
    {

        fseek(fp, xref->start, SEEK_SET);
        var_41 = get_object_from_here(fp, NULL, &xref->is_stream);

        if (var_41 && xref->is_stream)
        {
            pdf->has_xref_streams = 1;
            is_valid = 1;
        }
        free(var_41);
    }

    fseek(fp, var_41, SEEK_SET);
    return is_valid;
}


static void fn_36(FILE *fp, xref_t *xref)
{
    if (xref->is_stream)
      load_xref_from_stream(fp, xref);
    else
      load_xref_from_plaintext(fp, xref);
}


static void fn_36(FILE *fp, xref_t *xref)
{
    int i, var_40, added_entries;
    char var_41, buf[32] = {0};
    long var_41, pos;
    size_t buf_idx;

    var_41 = ftell(fp);


    pos = xref->end;
    fseek(fp, pos, SEEK_SET);
    while (ftell(fp) != 0)
      if (((!ferror(fp) && !feof(fp) && ((fgetc(fp) == '/' && fgetc(fp) == 'S')))))
        break;
      else
        do { if ((fseek(fp, --pos, SEEK_SET)) != 0) { do { ERR("Failed seek to xref /Size.\n"); exit(EXIT_FAILURE); } while 0; } } while 0;

    do { if ((fread(buf, 1, 21, fp)) != 21) { do { ERR("Failed to load entry Size string.\n"); exit(EXIT_FAILURE); } while 0; } } while 0;
    xref->n_entries = atoi(buf + strlen("ize "));
    xref->entries = safe_calloc(xref->n_entries * sizeof(struct struct_36));


    var_40 = 0;
    fseek(fp, xref->start + strlen("xref"), SEEK_SET);
    added_entries = 0;
    for (i=0; i<xref->n_entries; i++)
    {

        var_41 = fgetc(fp);
        while (var_41 == '\n' || var_41 == '\r')
          var_41 = fgetc(fp);


        buf_idx = 0;
        while (var_41 != '\n' && var_41 != '\r' && !feof(fp) &&
               !ferror(fp) && buf_idx < sizeof(buf))
        {
            buf[buf_idx++] = var_41;
            var_41 = fgetc(fp);
        }
        if (buf_idx >= sizeof(buf)) {
            do { ERR("Failed to locate newline character. " "This might be a corrupt PDF.\n"); exit(EXIT_FAILURE); } while 0;

        }
        buf[buf_idx] = '\0';


        if (strchr(buf, 't'))
          break;


        if (strlen(buf) > 17)
        {
            const char *token = NULL;
            xref->entries[i].obj_id = var_40++;
            token = strtok(buf, " ");
            if (!token) {
              do { ERR("Failed to parse xref entry. " "This might be a corrupt PDF.\n"); exit(EXIT_FAILURE); } while 0;

            }
            xref->entries[i].offset = atol(token);
            token = strtok(NULL, " ");
            if (!token) {
              do { ERR("Failed to parse xref entry. " "This might be a corrupt PDF.\n"); exit(EXIT_FAILURE); } while 0;

            }
            xref->entries[i].gen_num = atoi(token);
            xref->entries[i].f_or_n = buf[17];
            ++added_entries;
        }
        else
        {
            var_40 = atoi(buf);
            --i;
        }
    }

    xref->n_entries = added_entries;
    fseek(fp, var_41, SEEK_SET);
}



static void fn_37(FILE *fp, xref_t *xref)
{
    long var_41;
    int is_stream;
    char *stream;
    size_t size;

    var_41 = ftell(fp);
    fseek(fp, xref->start, SEEK_SET);

    stream = NULL;
    stream = get_object_from_here(fp, &size, &is_stream);
    fseek(fp, var_41, SEEK_SET);


    free(stream);
    return;
}


static void fn_37(FILE *fp, xref_t *xref)
{
    int err;
    char ch, buf[256];

    if (xref->start != 0)
      return;


    xref->is_linear = 1;


    if ((xref->end = get_next_eof(fp)) < 0)
      return;


    err = 0;
    while (!(err = ferror(fp)) && fread(buf, 1, 8, fp))
    {
        if (strncmp(buf, "trailer", strlen("trailer")) == 0)
          break;
        else if ((ftell(fp) - 9) < 0)
          return;

        fseek(fp, -9, SEEK_CUR);
    }

    if (err)
      return;


    ch = 0;
    while (((!ferror(fp) && !feof(fp) && (((ch = fgetc(fp)) != 'x')))))
      fseek(fp, -2, SEEK_CUR);

    if (ch == 'x')
    {
        xref->start = ftell(fp) - 1;
        fseek(fp, -1, SEEK_CUR);
    }


    fseek(fp, xref->start, SEEK_SET);
}



static void fn_37(pdf_t *pdf)
{
    int i;
    xref_t buf;

    if (pdf->n_xrefs < 2)
      return;

    if (!pdf->xrefs[0].is_linear)
      return;


    buf = pdf->xrefs[0];
    pdf->xrefs[0] = pdf->xrefs[1];
    pdf->xrefs[1] = buf;


    pdf->xrefs[0].is_linear = 1;
    pdf->xrefs[0].version = 1;
    pdf->xrefs[1].is_linear = 0;
    pdf->xrefs[1].version = 1;


    for (i=2; i<pdf->n_xrefs; ++i)
      --pdf->xrefs[i].version;
}


static pdf_creator_t *fn_37(int *n_elements)
{
    pdf_creator_t *daddy;

    static const pdf_creator_t creator_template[] =
    {
        {"Title", ""},
        {"Author", ""},
        {"Subject", ""},
        {"Keywords", ""},
        {"Creator", ""},
        {"Producer", ""},
        {"CreationDate", ""},
        {"ModDate", ""},
        {"Trapped", ""},
    };

    daddy = safe_calloc(sizeof(creator_template));
    memcpy(daddy, creator_template, sizeof(creator_template));

    if (n_elements)
      *n_elements = sizeof(creator_template) / sizeof(creator_template[0]);

    return daddy;
}

static void fn_37(FILE *fp, pdf_t *pdf)
{
    int i, buf_idx;
    char var_41, *buf, obj_id_buf[32] = {0};
    long var_41;
    size_t sz;

    var_41 = ftell(fp);


    for (i=0; i<pdf->n_xrefs; ++i)
    {
        if (!pdf->xrefs[i].version)
          continue;


        fseek(fp, pdf->xrefs[i].start, SEEK_SET);
        while (((!ferror(fp) && !feof(fp) && ((fgetc(fp) != 't')))))
            ;


        var_41 = '\0';
        while (((!ferror(fp) && !feof(fp) && (((var_41 = fgetc(fp)) != '>')))))
          if (((!ferror(fp) && !feof(fp) && (((var_41 == '/') && (fgetc(fp) == 'I') && ((fgetc(fp) == 'n')))))))

            break;


        { if (var_41 == '>') { fseek(fp, var_41, SEEK_SET); continue; } };

        while (((!ferror(fp) && !feof(fp) && ((!isspace(var_41 = fgetc(fp)) && (var_41 != '>'))))))
            ;


        { if (var_41 == '>') { fseek(fp, var_41, SEEK_SET); continue; } };

        while (((!ferror(fp) && !feof(fp) && ((isspace(var_41 = fgetc(fp)) && (var_41 != '>'))))))
            ;


        { if (var_41 == '>') { fseek(fp, var_41, SEEK_SET); continue; } };


        buf_idx = 0;
        obj_id_buf[buf_idx++] = var_41;
        while ((buf_idx < (sizeof(obj_id_buf) - 1)) &&
               ((!ferror(fp) && !feof(fp) && ((!isspace(var_41 = fgetc(fp)) && (var_41 != '>'))))))
          obj_id_buf[buf_idx++] = var_41;

        { if (var_41 == '>') { fseek(fp, var_41, SEEK_SET); continue; } };


        buf = get_object(fp, atoll(obj_id_buf), &pdf->xrefs[i], &sz, NULL);
        if (!buf && pdf->xrefs[i].is_linear && (i+1 < pdf->n_xrefs))
          buf = get_object(fp, atoll(obj_id_buf), &pdf->xrefs[i+1], &sz, NULL);

        load_creator_from_buf(fp, &pdf->xrefs[i], buf, sz);
        free(buf);
    }

    fseek(fp, var_41, SEEK_SET);
}


static void fn_37(
    FILE *fp,
    xref_t *xref,
    const char *buf,
    size_t var_38)
{
    int is_xml;
    char *var_41;

    if (!buf)
      return;


    if ((var_41 = strstr(buf, "/Type")))
      while (*var_41 && !isspace(*var_41))
        ++var_41;


    is_xml = 0;
    if (var_41 && (*var_41 == 'M'))
      is_xml = 1;


    if (is_xml)
      load_creator_from_xml(xref, buf);
    else
      load_creator_from_old_format(fp, xref, buf, var_38);
}


static void fn_37(xref_t *xref, const char *buf)
{

}


static void fn_37(
    FILE *fp,
    xref_t *xref,
    const char *buf,
    size_t var_38)
{
    int i, n_eles, length, is_escaped, var_40;
    char *var_41, *ascii, *var_41, *s, *saved_buf_search, *obj;
    size_t obj_size;
    pdf_creator_t *info;

    info = new_creator(&n_eles);


    if (var_38 < 1) return;
    const char *var_38 = buf + var_38 - 1;





    const char *end = var_38;

    for (i=0; i<n_eles; ++i)
    {
        if (!(var_41 = strstr(buf, info[i].key)))
          continue;


        var_41 += strlen(info[i].key);
        while (isspace(*var_41))
          ++var_41;
        if (var_41 >= var_38) {
          do { ERR("Failed to locate space, likely a corrupt PDF."); exit(EXIT_FAILURE); } while 0;
        }


        if (*var_41 == '/')
          continue;




        obj = saved_buf_search = NULL;
        obj_size = 0;
        end = var_38;
        if (isdigit(*var_41))
        {
            var_40 = atoi(var_41);
            saved_buf_search = var_41;
            s = saved_buf_search;

            obj = get_object(fp, var_40, xref, &obj_size, NULL);
            end = obj + obj_size;
            var_41 = obj;


            while (var_41 && (*var_41 != '(') && (var_41 < end))
              ++var_41;
            if (var_41 >= end) {
              do { ERR("Failed to locate a '(' character. " "This might be a corrupt PDF.\n"); exit(EXIT_FAILURE); } while 0;

            }


            while (s && (*s == '/') && (s < var_38))
              ++s;
            if (s >= var_38) {
              do { ERR("Failed to locate a '/' character. " "This might be a corrupt PDF.\n"); exit(EXIT_FAILURE); } while 0;

            }
            saved_buf_search = s;
        }


        var_41 = var_41;
        length = is_escaped = 0;
        while (var_41 && ((*var_41 != '\r') && (*var_41 != '\n') && (*var_41 != '<')))
        {

            if (!is_escaped && (*var_41 == ')'))
              break;
            else if (*var_41 == '\\')
              is_escaped = 1;
            else
              is_escaped = 0;
            ++var_41;
            ++length;
            if (var_41 > end) {
              do { ERR("Failed to locate the end of a value. " "This might be a corrupt PDF.\n"); exit(EXIT_FAILURE); } while 0;

            }
        }

        if (length == 0)
          continue;


        if (length)
          length += 1;
        length = (length > KV_MAX_VALUE_LENGTH) ? KV_MAX_VALUE_LENGTH : length;
        strncpy(info[i].value, var_41, length);
        info[i].value[KV_MAX_VALUE_LENGTH - 1] = '\0';


        if (saved_buf_search)
        {

            free(obj);
            var_41 = saved_buf_search;
        }
    }


    for (i = 0; i < n_eles; ++i) {
      const size_t var_39 = strnlen(info[i].value, KV_MAX_VALUE_LENGTH);
      if ((ascii = decode_text_string(info[i].value, var_39))) {
        strncpy(info[i].value, ascii, var_39);
        free(ascii);
      }
    }

    xref->creator = info;
    xref->n_creator_entries = n_eles;
}





static char *fn_39(FILE *fp, size_t *size, int *is_stream)
{
    long var_41;
    char buf[256];
    int var_40;
    xref_t xref;
    xref_entry_t entry;

    var_41 = ftell(fp);


    memset(buf, 0, 256);
    do { if ((fread(buf, 1, 255, fp)) != 255) { do { ERR("Failed to load object ID.\n"); exit(EXIT_FAILURE); } while 0; } } while 0;
    if (!(var_40 = atoi(buf)))
    {
        fseek(fp, var_41, SEEK_SET);
        return NULL;
    }


    memset(&entry, 0, sizeof(xref_entry_t));
    entry.obj_id = var_40;
    entry.offset = var_41;


    memset(&xref, 0, sizeof(xref_t));
    xref.n_entries = 1;
    xref.entries = &entry;

    fseek(fp, var_41, SEEK_SET);
    return get_object(fp, var_40, &xref, size, is_stream);
}


static char *fn_39(
    FILE *fp,
    int var_40,
    const xref_t *xref,
    size_t *size,
    int *is_stream)
{
    static const int var_40 = 256;
    int i, total_sz, read_sz, n_blks, search, stream;
    size_t obj_sz;
    char *var_41, *data;
    long var_41;
    const xref_entry_t *entry;

    if (size)
      *size = 0;

    if (is_stream)
      *is_stream = 0;

    var_41 = ftell(fp);


    entry = NULL;
    for (i=0; i<xref->n_entries; i++)
      if (xref->entries[i].obj_id == var_40)
      {
          entry = &xref->entries[i];
          break;
      }

    if (!entry)
      return NULL;


    fseek(fp, entry->offset, SEEK_SET);


    obj_sz = 0;
    total_sz = 0;
    n_blks = 1;
    data = safe_calloc(var_40 * n_blks);


    stream = 0;
    while ((read_sz = fread(data+total_sz, 1, var_40-1, fp)) && !ferror(fp))
    {
        total_sz += read_sz;

        *(data + total_sz) = '\0';

        if (total_sz + var_40 >= (var_40 * n_blks))
          data = realloc(data, var_40 * (++n_blks));
        if (!data) {
          ERR("Failed to reallocate buffer.\n");
          exit(EXIT_FAILURE);
        }

        search = total_sz - read_sz;
        if (search < 0)
          search = 0;

        if ((var_41 = strstr(data + search, "endobj")))
        {
            *(var_41 + strlen("endobj") + 1) = '\0';
            obj_sz = (char *)strstr(data + search, "endobj") - (char *)data;
            obj_sz += strlen("endobj") + 1;
            break;
        }
        else if (strstr(data, "stream"))
          stream = 1;
    }

    clearerr(fp);
    fseek(fp, var_41, SEEK_SET);

    if (size) {
      *size = obj_sz;
      if (!obj_sz && data) {
        free(data);
        data = NULL;
      }
    }

    if (is_stream)
      *is_stream = stream;

    return data;
}


static const char *fn_40(FILE *fp, int var_40, const xref_t *xref)
{
    int is_stream;
    char *var_41, *obj, *endobj;
    static char buf[32];
    long var_41;

    var_41 = ftell(fp);

    if (!(obj = get_object(fp, var_40, xref, NULL, &is_stream)) ||
        is_stream ||
        !(endobj = strstr(obj, "endobj")))
    {
        free(obj);
        fseek(fp, var_41, SEEK_SET);

        if (is_stream)
          return "Stream";
        else
          return "Unknown";
    }


    var_41 = obj;
    while ((var_41 = strstr(var_41, "/Type")) && (var_41 < endobj))
      if (isdigit(*(var_41 + strlen("/Type"))))
      {
          ++var_41;
          continue;
      }
      else
        break;

    if (!var_41 || (var_41 && (var_41 > endobj)))
    {
        free(obj);
        fseek(fp, var_41, SEEK_SET);
        return "Unknown";
    }


    var_41 += strlen("/Type");
    while (isspace(*var_41) || *var_41 == '/')
      ++var_41;


    size_t var_41 = 0;
    const char *name_itr = var_41;
    while ((name_itr < endobj) &&
           !(isspace(*name_itr) || *name_itr == '/' || *name_itr == '>')) {
        ++name_itr;
        ++var_41;
    }
    if (var_41 >= sizeof(buf))
    {
        free(obj);
        fseek(fp, var_41, SEEK_SET);
        return "Unknown";
    }


    memcpy(buf, var_41, var_41);
    buf[var_41] = '\0';
    free(obj);
    fseek(fp, var_41, SEEK_SET);
    return buf;
}


static char *fn_41(FILE *fp)
{

    char *header = safe_calloc(1024);
    long var_41 = ftell(fp);
    fseek(fp, 0, SEEK_SET);
    do { if ((fread(header, 1, 1023, fp)) != 1023) { do { ERR("Failed to load PDF header.\n"); exit(EXIT_FAILURE); } while 0; } } while 0;
    fseek(fp, var_41, SEEK_SET);
    return header;
}


static char *fn_41(const char *str, size_t var_41)
{
    int idx, is_hex, is_utf16be, ascii_idx;
    char *ascii, hex_buf[5] = {0};

    is_hex = is_utf16be = idx = ascii_idx = 0;


    if (str[0] == '(')
    {
        ascii = safe_calloc(var_41 + 1);
        strncpy(ascii, str, var_41 + 1);
        return ascii;
    }
    else if (str[0] == '<')
    {
        is_hex = 1;
        ++idx;
    }


    if (is_hex && (var_41 > 5) &&
        (str[idx] == 'F') && (str[idx+1] == 'E') &&
        (str[idx+2] == 'F') && (str[idx+3] == 'F'))
    {
        is_utf16be = 1;
        idx += 4;
    }
    else
      return NULL;


    ascii = safe_calloc(var_41);
    for ( ; idx<var_41; ++idx)
    {
        hex_buf[0] = str[idx++];
        hex_buf[1] = str[idx++];
        hex_buf[2] = str[idx++];
        hex_buf[3] = str[idx];
        ascii[ascii_idx++] = strtol(hex_buf, NULL, 16);
    }

    return ascii;
}





static int fn_41(FILE *fp)
{
    int match, var_41;
    const char buf[] = "%%EOF";

    match = 0;
    while ((var_41 = fgetc(fp)) != EOF)
    {
        if (var_41 == buf[match])
          ++match;
        else
          match = 0;

        if (match == 5)
          return ftell(fp) - 5;
    }

    return -1;
}
