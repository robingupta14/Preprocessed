







struct struct_39
{
  grub_uint32_t total_inodes;
  grub_uint32_t total_blocks;
  grub_uint32_t reserved_blocks;
  grub_uint32_t free_blocks;
  grub_uint32_t free_inodes;
  grub_uint32_t first_data_block;
  grub_uint32_t log2_block_size;
  grub_uint32_t log2_fragment_size;
  grub_uint32_t blocks_per_group;
  grub_uint32_t fragments_per_group;
  grub_uint32_t inodes_per_group;
  grub_uint32_t mtime;
  grub_uint32_t utime;
  grub_uint16_t mnt_count;
  grub_uint16_t max_mnt_count;
  grub_uint16_t magic;
  grub_uint16_t fs_state;
  grub_uint16_t error_handling;
  grub_uint16_t minor_revision_level;
  grub_uint32_t lastcheck;
  grub_uint32_t checkinterval;
  grub_uint32_t creator_os;
  grub_uint32_t revision_level;
  grub_uint16_t uid_reserved;
  grub_uint16_t gid_reserved;
  grub_uint32_t first_inode;
  grub_uint16_t inode_size;
  grub_uint16_t block_group_number;
  grub_uint32_t feature_compatibility;
  grub_uint32_t feature_incompat;
  grub_uint32_t feature_ro_compat;
  grub_uint16_t uuid[8];
  char volume_name[16];
  char last_mounted_on[64];
  grub_uint32_t compression_info;
  grub_uint8_t prealloc_blocks;
  grub_uint8_t prealloc_dir_blocks;
  grub_uint16_t reserved_gdt_blocks;
  grub_uint8_t journal_uuid[16];
  grub_uint32_t journal_inum;
  grub_uint32_t journal_dev;
  grub_uint32_t last_orphan;
  grub_uint32_t hash_seed[4];
  grub_uint8_t def_hash_version;
  grub_uint8_t jnl_backup_type;
  grub_uint16_t reserved_word_pad;
  grub_uint32_t default_mount_opts;
  grub_uint32_t first_meta_bg;
  grub_uint32_t mkfs_time;
  grub_uint32_t jnl_blocks[17];
};


struct struct_35
{
  grub_uint32_t block_id;
  grub_uint32_t inode_id;
  grub_uint32_t inode_table_id;
  grub_uint16_t free_blocks;
  grub_uint16_t free_inodes;
  grub_uint16_t used_dirs;
  grub_uint16_t pad;
  grub_uint32_t reserved[3];
};


struct struct_50
{
  grub_uint16_t mode;
  grub_uint16_t uid;
  grub_uint32_t size;
  grub_uint32_t atime;
  grub_uint32_t ctime;
  grub_uint32_t mtime;
  grub_uint32_t dtime;
  grub_uint16_t gid;
  grub_uint16_t nlinks;
  grub_uint32_t blockcnt;
  grub_uint32_t flags;
  grub_uint32_t osd1;
  union
  {
    struct struct_3
    {
      grub_uint32_t dir_blocks[12];
      grub_uint32_t indir_block;
      grub_uint32_t double_indir_block;
      grub_uint32_t triple_indir_block;
    } blocks;
    char symlink[60];
  };
  grub_uint32_t version;
  grub_uint32_t acl;
  grub_uint32_t dir_acl;
  grub_uint32_t fragment_addr;
  grub_uint32_t osd2[3];
};


struct struct_47
{
  grub_uint32_t inode;
  grub_uint16_t direntlen;
  grub_uint8_t namelen;
  grub_uint8_t filetype;
};

struct struct_9
{
  grub_uint32_t magic;
  grub_uint32_t block_type;
  grub_uint32_t sequence;
};

struct struct_6
{
  struct struct_9 header;
  grub_uint32_t count;
  grub_uint32_t data[0];
};

struct struct_7
{
  grub_uint32_t block;
  grub_uint32_t flags;
};

struct struct_8
{
  struct struct_9 header;
  grub_uint32_t block_size;
  grub_uint32_t maxlen;
  grub_uint32_t first;
  grub_uint32_t sequence;
  grub_uint32_t start;
};



struct struct_23
{
  grub_uint16_t magic;
  grub_uint16_t entries;
  grub_uint16_t max;
  grub_uint16_t depth;
  grub_uint32_t generation;
};

struct struct_23
{
  grub_uint32_t block;
  grub_uint16_t len;
  grub_uint16_t start_hi;
  grub_uint32_t start;
};

struct struct_18
{
  grub_uint32_t block;
  grub_uint32_t leaf;
  grub_uint16_t leaf_hi;
  grub_uint16_t unused;
};

struct struct_57
{
  struct struct_60 *data;
  struct struct_50 inode;
  int ino;
  int inode_read;
};


struct struct_60
{
  struct struct_39 sblock;
  grub_disk_t disk;
  struct struct_50 *inode;
  struct struct_57 diropen;
};

static grub_dl_t my_mod;





inline static grub_err_t
fn_14 (struct struct_60 *data, int var_16,
        struct struct_35 *blkgrp)
{
  return grub_disk_read (data->disk,
                         ((grub_le_to_cpu32 (data->sblock.first_data_block) + 1)
                          << (grub_le_to_cpu32 (data->sblock.log2_block_size) + 1)),
    var_16 * sizeof (struct struct_35),
    sizeof (struct struct_35), blkgrp);
}

static struct struct_23 *
fn_16 (struct struct_60 *data, char *buf,
                     struct struct_23 *ext_block,
                     grub_uint32_t var_25)
{
  struct struct_18 *index;

  while 1
    {
      int i;
      grub_disk_addr_t block;

      index = (struct struct_18 *) (ext_block + 1);

      if (grub_le_to_cpu16(ext_block->magic) != 0xf30a)
        return 0;

      if (ext_block->depth == 0)
        return ext_block;

      for (i = 0; i < grub_le_to_cpu16 (ext_block->entries); i++)
        {
          if (var_25 < grub_le_to_cpu32(index[i].block))
            break;
        }

      if (--i < 0)
        return 0;

      block = grub_le_to_cpu16 (index[i].leaf_hi);
      block = (block << 32) + grub_le_to_cpu32 (index[i].leaf);
      if (grub_disk_read (data->disk,
                          block << (grub_le_to_cpu32 (data->sblock.log2_block_size) + 1),
                          0, (1 << (grub_le_to_cpu32 (data->sblock.log2_block_size) + 10)), buf))
        return 0;

      ext_block = (struct struct_23 *) buf;
    }
}

static grub_disk_addr_t
fn_18 (grub_fshelp_node_t var_55, grub_disk_addr_t var_25)
{
  struct struct_60 *data = var_55->data;
  struct struct_50 *inode = &var_55->inode;
  int var_25 = -1;
  unsigned int var_25 = (1 << (grub_le_to_cpu32 (data->sblock.log2_block_size) + 10));
  int var_25 = (grub_le_to_cpu32 (data->sblock.log2_block_size) + 1);

  if (grub_le_to_cpu32(inode->flags) & 0x80000)
    {

   char buf[(1 << (grub_le_to_cpu32 (data->sblock.log2_block_size) + 10))];



      struct struct_23 *leaf;
      struct struct_23 *ext;
      int i;

      leaf = grub_ext4_find_leaf (data, buf,
    (struct struct_23 *) inode->blocks.dir_blocks,
    var_25);
      if (! leaf)
        {
          grub_error (GRUB_ERR_BAD_FS, "invalid extent");
          return -1;
        }

      ext = (struct struct_23 *) (leaf + 1);
      for (i = 0; i < grub_le_to_cpu16 (leaf->entries); i++)
        {
          if (var_25 < grub_le_to_cpu32 (ext[i].block))
            break;
        }

      if (--i >= 0)
        {
          var_25 -= grub_le_to_cpu32 (ext[i].block);
          if (var_25 >= grub_le_to_cpu16 (ext[i].len))
            return 0;
          else
            {
              grub_disk_addr_t start;

              start = grub_le_to_cpu16 (ext[i].start_hi);
              start = (start << 32) + grub_le_to_cpu32 (ext[i].start);

              return var_25 + start;
            }
        }
      else
        {
          grub_error (GRUB_ERR_BAD_FS, "something wrong with extent");
          return -1;
        }
    }

  if (var_25 < 12) {
    var_25 = grub_le_to_cpu32 (inode->blocks.dir_blocks[var_25]);

  } else if (var_25 < 12 + var_25 / 4)
    {
      grub_uint32_t *indir;

      indir = grub_malloc (var_25);
      if (! indir)
 return grub_errno;

      if (grub_disk_read (data->disk,
     ((grub_disk_addr_t)
      grub_le_to_cpu32 (inode->blocks.indir_block))
     << var_25,
     0, var_25, indir))
 return grub_errno;

      var_25 = grub_le_to_cpu32 (indir[var_25 - 12]);
      grub_free (indir);
    }

  else if (var_25 < (grub_disk_addr_t)(12 + var_25 / 4) * (grub_disk_addr_t)(var_25 / 4 + 1))

    {
      unsigned int var_25 = var_25 / 4;
      unsigned int var_25 = var_25 - (12
      + var_25 / 4);
      grub_uint32_t *indir;

      indir = grub_malloc (var_25);
      if (! indir)
 return grub_errno;

      if (grub_disk_read (data->disk,
     ((grub_disk_addr_t)
      grub_le_to_cpu32 (inode->blocks.double_indir_block))
     << var_25,
     0, var_25, indir))
 return grub_errno;

      if (grub_disk_read (data->disk,
     ((grub_disk_addr_t)
      grub_le_to_cpu32 (indir[var_25 / var_25]))
     << var_25,
     0, var_25, indir))
 return grub_errno;

      var_25 = grub_le_to_cpu32 (indir[var_25 % var_25]);
            grub_free (indir);
    }

  else
    {
      grub_error (GRUB_ERR_NOT_IMPLEMENTED_YET,
    "ext2fs doesn't support triple indirect blocks");
    }

  return var_25;
}



static grub_ssize_t
fn_25 (grub_fshelp_node_t var_55,
     void (*read_hook) (grub_disk_addr_t var_26,
  unsigned var_27, unsigned var_28, void *var_57),
     void *var_57, int var_33, int var_33, grub_size_t var_52, char *buf)
{
 return grub_fshelp_read_file (var_55->data->disk, var_55, read_hook, var_57,
  var_33, var_33, var_52, buf, grub_ext2_read_block,
  var_55->inode.size, (grub_le_to_cpu32 (var_55->data->sblock.log2_block_size) + 1));
}



static grub_err_t
fn_33 (struct struct_60 *data,
        int var_37, struct struct_50 *inode)
{
  struct struct_35 blkgrp;
  struct struct_39 *sblock = &data->sblock;
  int inodes_per_block;
  unsigned int blkno;
  unsigned int blkoff;


  var_37--;
  int var_36 = grub_le_to_cpu32 (sblock->inodes_per_group);
  if (var_36 < 1) {
    return grub_errno = GRUB_ERR_BAD_FS;
  }
  grub_ext2_blockgroup (data, var_37 / var_36, &blkgrp);
  if (grub_errno)
    return grub_errno;

  int var_37 = (grub_le_to_cpu32 (data->sblock.revision_level) == 0 ? 128 : grub_le_to_cpu16 (data->sblock.inode_size));
  if (var_37 < 1) {
    return grub_errno = GRUB_ERR_BAD_FS;
  }
  inodes_per_block = (1 << (grub_le_to_cpu32 (data->sblock.log2_block_size) + 10)) / var_37;
  if (inodes_per_block < 1) {
    return grub_errno = GRUB_ERR_BAD_FS;
  }
  blkno = (var_37 % grub_le_to_cpu32 (sblock->inodes_per_group))
    / inodes_per_block;
  blkoff = (var_37 % grub_le_to_cpu32 (sblock->inodes_per_group))
    % inodes_per_block;


  if (grub_disk_read (data->disk,
        ((grub_le_to_cpu32 (blkgrp.inode_table_id) + blkno)
          << (grub_le_to_cpu32 (data->sblock.log2_block_size) + 1)),
        (grub_le_to_cpu32 (data->sblock.revision_level) == 0 ? 128 : grub_le_to_cpu16 (data->sblock.inode_size)) * blkoff,
        sizeof (struct struct_50), inode))
    return grub_errno;

  return 0;
}

static struct struct_60 *
fn_37 (grub_disk_t var_60)
{
  struct struct_60 *data;

  data = grub_malloc (sizeof (struct struct_60));
  if (!data)
    return 0;


  grub_disk_read (var_60, 2, 0, sizeof (struct struct_39),
                  &data->sblock);
  if (grub_errno)
    goto fail;


  if (grub_le_to_cpu16 (data->sblock.magic) != 0xEF53)
    {
      grub_error (GRUB_ERR_BAD_FS, "not an ext2 filesystem");
      goto fail;
    }


  if (grub_le_to_cpu32 (data->sblock.feature_incompat)
        & ~(( 0x0002 | 0x0040 | 0x0200 ) | ( 0x0004 )))
    {
      grub_error (GRUB_ERR_BAD_FS, "filesystem has unsupported incompatible features");
      goto fail;
    }


  data->disk = var_60;

  data->diropen.data = data;
  data->diropen.ino = 2;
  data->diropen.inode_read = 1;

  data->inode = &data->diropen.inode;

  grub_ext2_read_inode (data, 2, data->inode);
  if (grub_errno)
    goto fail;

  return data;

 fail:
  if (grub_errno == GRUB_ERR_OUT_OF_RANGE)
    grub_error (GRUB_ERR_BAD_FS, "not an ext2 filesystem");

  grub_free (data);
  return 0;
}

static char *
fn_39 (grub_fshelp_node_t var_55)
{
  char *symlink;
  struct struct_57 *diro = var_55;

  if (! diro->inode_read)
    {
      grub_ext2_read_inode (diro->data, diro->ino, &diro->inode);
      if (grub_errno)
 return 0;
    }

  symlink = grub_malloc (grub_le_to_cpu32 (diro->inode.size) + 1);
  if (! symlink)
    return 0;




  if (grub_le_to_cpu32 (diro->inode.size) <= 60)
    grub_strncpy (symlink,
    diro->inode.symlink,
    grub_le_to_cpu32 (diro->inode.size));
  else
    {
      grub_ext2_read_file (diro, 0, 0, 0, 0,
      grub_le_to_cpu32 (diro->inode.size),
      symlink);
      if (grub_errno)
 {
   grub_free (symlink);
   return 0;
 }
    }

  symlink[grub_le_to_cpu32 (diro->inode.size)] = '\0';
  return symlink;
}

static int
fn_40 (grub_fshelp_node_t var_45,
         int (*hook) (const char *filename,
        enum enumtype_55 var_55,
        grub_fshelp_node_t var_55,
        void *var_57),
         void *var_57)
{
  unsigned int var_47 = 0;
  struct struct_57 *diro = (struct struct_57 *) var_45;

  if (! diro->inode_read)
    {
      grub_ext2_read_inode (diro->data, diro->ino, &diro->inode);
      if (grub_errno)
 return 0;
    }


  if (hook)
  while (var_47 < grub_le_to_cpu32 (diro->inode.size))
    {
      struct struct_47 dirent;

      grub_ext2_read_file (diro, NULL, NULL, 0, var_47, sizeof (dirent),
      (char *) &dirent);
      if (grub_errno)
 return 0;

      if (dirent.direntlen == 0)
        return 0;

      if (dirent.namelen != 0)
 {
   char * filename = grub_malloc (dirent.namelen + 1);
   struct struct_57 *fdiro;
   enum enumtype_55 var_47 = var_46;

if (!filename) {
break;
}
   grub_ext2_read_file (diro, 0, 0, 0,
          var_47 + sizeof (struct struct_47),
          dirent.namelen, filename);
   if (grub_errno) {
            free (filename);
     return 0;
   }

   fdiro = grub_malloc (sizeof (struct struct_57));
   if (! fdiro) {
            free (filename);
     return 0;
          }

   fdiro->data = diro->data;
   fdiro->ino = grub_le_to_cpu32 (dirent.inode);

   filename[dirent.namelen] = '\0';

   if (dirent.filetype != 0)
     {
       fdiro->inode_read = 0;

       if (dirent.filetype == 2)
  var_47 = GRUB_FSHELP_DIR;
       else if (dirent.filetype == 7)
  var_47 = GRUB_FSHELP_SYMLINK;
       else if (dirent.filetype == 1)
  var_47 = GRUB_FSHELP_REG;
     }
   else
     {


       grub_ext2_read_inode (diro->data,
                                    grub_le_to_cpu32 (dirent.inode),
        &fdiro->inode);
       if (grub_errno) {
                  free (filename);
    grub_free (fdiro);
    return 0;
  }

       fdiro->inode_read = 1;

       if ((grub_le_to_cpu16 (fdiro->inode.mode)
     & 170000) == 40000)
  var_47 = GRUB_FSHELP_DIR;
       else if ((grub_le_to_cpu16 (fdiro->inode.mode)
   & 170000) == 120000)
  var_47 = GRUB_FSHELP_SYMLINK;
       else if ((grub_le_to_cpu16 (fdiro->inode.mode)
   & 170000) == 100000)
  var_47 = GRUB_FSHELP_REG;
     }

   if (hook (filename, var_47, fdiro, var_57)) {
            free (filename);
     return 1;
          }
          free (filename);
 }

      var_47 += grub_le_to_cpu16 (dirent.direntlen);
    }

  return 0;
}


static grub_err_t
fn_47 (struct struct_48 *var_52, const char *name)
{
  struct struct_60 *data;
  struct struct_57 *fdiro = 0;

  grub_dl_ref (my_mod);

  data = grub_ext2_mount (var_52->device->disk);
  if (! data)
    goto fail;

  grub_fshelp_find_file (name, &data->diropen, &fdiro, grub_ext2_iterate_dir, 0,
    grub_ext2_read_symlink, GRUB_FSHELP_REG);
  if (grub_errno)
    goto fail;

  if (! fdiro->inode_read)
    {
      grub_ext2_read_inode (data, fdiro->ino, &fdiro->inode);
      if (grub_errno)
 goto fail;
    }

  grub_memcpy (data->inode, &fdiro->inode, sizeof (struct struct_50));
  grub_free (fdiro);

  var_52->size = grub_le_to_cpu32 (data->inode->size);
  var_52->data = data;
  var_52->offset = 0;

  return 0;

 fail:
  if (fdiro != &data->diropen)
    grub_free (fdiro);
  grub_free (data);

  grub_dl_unref (my_mod);

  return grub_errno;
}

static grub_err_t
fn_50 (grub_file_t var_52)
{
  grub_free (var_52->data);

  grub_dl_unref (my_mod);

  return GRUB_ERR_NONE;
}


static grub_ssize_t
fn_51 (grub_file_t var_52, char *buf, grub_size_t var_52)
{
  struct struct_60 *data = (struct struct_60 *) var_52->data;
  return grub_ext2_read_file (&data->diropen, var_52->read_hook, var_52->closure,
         var_52->flags, var_52->offset, var_52, buf);
}

struct struct_57
{
  int (*hook) (const char *filename,
        const struct struct_57 *info,
        void *var_57);
  void *closure;
  struct struct_60 *data;
};

static int
fn_54 (const char *filename,
  enum enumtype_55 var_55,
  grub_fshelp_node_t var_55,
  void *var_57)
{
  struct struct_57 *c = var_57;
  struct struct_57 info;
  grub_memset (&info, 0, sizeof (info));
  if (! var_55->inode_read)
    {
      grub_ext2_read_inode (c->data, var_55->ino, &var_55->inode);
      if (!grub_errno)
 var_55->inode_read = 1;
      grub_errno = GRUB_ERR_NONE;
    }
  if (var_55->inode_read)
    {
      info.mtimeset = 1;
      info.mtime = grub_le_to_cpu32 (var_55->inode.mtime);
    }

  info.dir = ((var_55 & GRUB_FSHELP_TYPE_MASK) == GRUB_FSHELP_DIR);
  grub_free (var_55);
  return (c->hook != NULL)? c->hook (filename, &info, c->closure): 0;
}

static grub_err_t
fn_55 (grub_device_t var_60, const char *path,
        int (*hook) (const char *filename,
       const struct struct_57 *info,
       void *var_57),
        void *var_57)
{
  struct struct_60 *data = 0;
  struct struct_57 *fdiro = 0;
  struct struct_57 c;

  grub_dl_ref (my_mod);

  data = grub_ext2_mount (var_60->disk);
  if (! data)
    goto fail;

  grub_fshelp_find_file (path, &data->diropen, &fdiro, grub_ext2_iterate_dir,
    0, grub_ext2_read_symlink, GRUB_FSHELP_DIR);
  if (grub_errno)
    goto fail;

  c.hook = hook;
  c.closure = var_57;
  c.data = data;
  grub_ext2_iterate_dir (fdiro, iterate, &c);

 fail:
  if (fdiro != &data->diropen)
    grub_free (fdiro);
  grub_free (data);

  grub_dl_unref (my_mod);

  return grub_errno;
}

static grub_err_t
fn_57 (grub_device_t var_60, char **label)
{
  struct struct_60 *data;
  grub_disk_t var_60 = var_60->disk;

  grub_dl_ref (my_mod);

  data = grub_ext2_mount (var_60);
  if (data)
    *label = grub_strndup (data->sblock.volume_name, 14);
  else
    *label = NULL;

  grub_dl_unref (my_mod);

  grub_free (data);

  return grub_errno;
}

static grub_err_t
fn_58 (grub_device_t var_60, char **uuid)
{
  struct struct_60 *data;
  grub_disk_t var_60 = var_60->disk;

  grub_dl_ref (my_mod);

  data = grub_ext2_mount (var_60);
  if (data)
    {
      *uuid = grub_xasprintf ("%04x%04x-%04x-%04x-%04x-%04x%04x%04x",
        grub_be_to_cpu16 (data->sblock.uuid[0]),
        grub_be_to_cpu16 (data->sblock.uuid[1]),
        grub_be_to_cpu16 (data->sblock.uuid[2]),
        grub_be_to_cpu16 (data->sblock.uuid[3]),
        grub_be_to_cpu16 (data->sblock.uuid[4]),
        grub_be_to_cpu16 (data->sblock.uuid[5]),
        grub_be_to_cpu16 (data->sblock.uuid[6]),
        grub_be_to_cpu16 (data->sblock.uuid[7]));
    }
  else
    *uuid = NULL;

  grub_dl_unref (my_mod);

  grub_free (data);

  return grub_errno;
}


static grub_err_t
fn_59 (grub_device_t var_60, grub_int32_t *tm)
{
  struct struct_60 *data;
  grub_disk_t var_60 = var_60->disk;

  grub_dl_ref (my_mod);

  data = grub_ext2_mount (var_60);
  if (!data)
    *tm = 0;
  else
    *tm = grub_le_to_cpu32 (data->sblock.utime);

  grub_dl_unref (my_mod);

  grub_free (data);

  return grub_errno;

}



struct struct_60 var_61 =
  {
    .name = "ext2",
    .dir = grub_ext2_dir,
    .open = grub_ext2_open,
    .read = grub_ext2_read,
    .close = grub_ext2_close,
    .label = grub_ext2_label,
    .uuid = grub_ext2_uuid,
    .mtime = grub_ext2_mtime,



    .next = 0
  };
