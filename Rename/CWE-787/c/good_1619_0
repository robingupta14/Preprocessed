







struct struct_101 { size_t rlim_cur; };

enum { enum_1 = 131072 };
verify (4 <= SUBTHREAD_LINES_HEURISTIC);



enum { enum_2 = 8 };


enum
  {


    enum_3 = 1,



    enum_4 = 2
  };

enum
  {




    enum_5 = 4,




    enum_6 = 9
  };

enum
  {

    enum_7 = 0,


    enum_8 = 1
  };


static int decimal_point;


static int thousands_sep;


static bool folding;


static bool hard_LC_COLLATE;

enum enumtype_261 { enum_10, enum_11, enum_12 };


static char var_274 = '\n';


struct struct_275
{
  char *text;
  size_t length;
  char *keybeg;
  char *keylim;
};


struct struct_251
{
  char *buf;




  size_t used;
  size_t nlines;
  size_t alloc;
  size_t left;
  size_t line_bytes;
  bool eof;
};


struct struct_265
{
  size_t sword;
  size_t schar;
  size_t eword;
  size_t echar;
  bool const *ignore;
  char const *translate;
  bool skipsblanks;
  bool skipeblanks;
  bool numeric;


  bool random;
  bool general_numeric;

  bool human_numeric;

  bool month;
  bool reverse;
  bool version;
  bool obsolete_used;
  struct struct_265 *next;
};

struct struct_21
{
  char const *name;
  int val;
};


struct struct_277
{
  struct struct_275 *lo;
  struct struct_275 *hi;
  struct struct_275 *end_lo;
  struct struct_275 *end_hi;
  struct struct_275 **dest;
  size_t nlo;
  size_t nhi;
  struct struct_277 *parent;
  struct struct_277 *lo_child;
  struct struct_277 *hi_child;
  unsigned int level;
  bool queued;
  pthread_mutex_t lock;
};


struct struct_253
{
  struct struct_20 *priority_queue;
  pthread_mutex_t mutex;
  pthread_cond_t cond;

};


static struct struct_275 saved_line;

static bool blanks[(UCHAR_MAX + 1)];


static bool nonprinting[(UCHAR_MAX + 1)];


static bool nondictionary[(UCHAR_MAX + 1)];


static char fold_toupper[(UCHAR_MAX + 1)];





static struct struct_21 monthtab[] =
{
  {"APR", 4},
  {"AUG", 8},
  {"DEC", 12},
  {"FEB", 2},
  {"JAN", 1},
  {"JUL", 7},
  {"JUN", 6},
  {"MAR", 3},
  {"MAY", 5},
  {"NOV", 11},
  {"OCT", 10},
  {"SEP", 9}
};

static size_t var_199 = MAX ((2 + sizeof (struct struct_275)), 262144);



static size_t sort_size;

static char const **temp_dirs;


static size_t temp_dir_count;


static size_t temp_dir_alloc;


static bool reverse;




static bool stable;




static char tab[MB_LEN_MAX + 1];
static size_t var_274 = 0;



static bool unique;


static bool have_read_stdin;


static struct struct_265 *var_275;


static char const *compress_program;


static bool debug;



static unsigned int var_275 = 16;





static void fn_26 (int, const char *) ATTRIBUTE_NORETURN;
static void
fn_26 (int var_27, const char *errstr)
{
  ignore_value (write (STDERR_FILENO, errstr, strlen (errstr)));






  if (var_27)
    {
      char errbuf[INT_BUFSIZE_BOUND (var_27)];
      char *p = inttostr (var_27, errbuf);
      ignore_value (write (STDERR_FILENO, ": errno ", 8));
      ignore_value (write (STDERR_FILENO, p, strlen (p)));
    }

  ignore_value (write (STDERR_FILENO, "\n", 1));

  _exit (SORT_FAILURE);
}




static void fn_28 (char const *, char const *) ATTRIBUTE_NORETURN;
static void
fn_28 (char const *message, char const *file)
{
  error (0, var_274, "%s: %s", message, file ? file : _("standard output"));
  exit (SORT_FAILURE);
}

void
fn_29 (int var_60)
{
  if (var_60 != EXIT_SUCCESS)
    emit_try_help ();
  else
    {
      printf (_("Usage: %s [OPTION]... [FILE]...\n  or:  %s [OPTION]... --files0-from=F\n"),



              program_name, program_name);
      fputs (_("Write sorted concatenation of all FILE(s) to standard output.\n"), stdout);



      emit_mandatory_arg_note ();

      fputs (_("Ordering options:\n\n"), stdout);



      fputs (_("  -b, --ignore-leading-blanks  ignore leading blanks\n  -d, --dictionary-order      consider only blanks and alphanumeric characters\n  -f, --ignore-case           fold lower case to upper case characters\n"), stdout);





      fputs (_("  -g, --general-numeric-sort  compare according to general numerical value\n  -i, --ignore-nonprinting    consider only printable characters\n  -M, --month-sort            compare (unknown) < 'JAN' < ... < 'DEC'\n"), stdout);




      fputs (_("  -h, --human-numeric-sort    compare human readable numbers (e.g., 2K 1G)\n"), stdout);


      fputs (_("  -n, --numeric-sort          compare according to string numerical value\n  -R, --random-sort           sort by random hash of keys\n      --random-source=FILE    get random bytes from FILE\n  -r, --reverse               reverse the result of comparisons\n"), stdout);





      fputs (_("      --sort=WORD             sort according to WORD:\n                                general-numeric -g, human-numeric -h, month -M,\n                                numeric -n, random -R, version -V\n  -V, --version-sort          natural sort of (version) numbers within text\n\n"), stdout);







      fputs (_("Other options:\n\n"), stdout);



      fputs (_("      --batch-size=NMERGE   merge at most NMERGE inputs at once;\n                            for more use temp files\n"), stdout);



      fputs (_("  -c, --check, --check=diagnose-first  check for sorted input; do not sort\n  -C, --check=quiet, --check=silent  like -c, but do not report first bad line\n      --compress-program=PROG  compress temporaries with PROG;\n                              decompress them with PROG -d\n"), stdout);






      fputs (_("      --debug               annotate the part of the line used to sort,\n                              and warn about questionable usage to stderr\n      --files0-from=F       read input from the files specified by\n                            NUL-terminated names in file F;\n                            If F is - then read names from standard input\n"), stdout);






      fputs (_("  -k, --key=KEYDEF          sort via a key; KEYDEF gives location and type\n  -m, --merge               merge already sorted files; do not sort\n"), stdout);



      fputs (_("  -o, --output=FILE         write result to FILE instead of standard output\n  -s, --stable              stabilize sort by disabling last-resort comparison\n  -S, --buffer-size=SIZE    use SIZE for main memory buffer\n"), stdout);





      printf (_("  -t, --field-separator=SEP  use SEP instead of non-blank to blank transition\n  -T, --temporary-directory=DIR  use DIR for temporaries, not $TMPDIR or %s;\n                              multiple options specify multiple directories\n      --parallel=N          change the number of sorts run concurrently to N\n  -u, --unique              with -c, check for strict ordering;\n                              without -c, output only the first of an equal run\n"), "/tmp");

      fputs (_("  -z, --zero-terminated     line delimiter is NUL, not newline\n"), stdout);


      fputs (HELP_OPTION_DESCRIPTION, stdout);
      fputs (VERSION_OPTION_DESCRIPTION, stdout);
      fputs (_("\nKEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where F is a\nfield number and C a character position in the field; both are origin 1, and\nthe stop position defaults to the line's end.  If neither -t nor -b is in\neffect, characters in a field are counted from the beginning of the preceding\nwhitespace.  OPTS is one or more single-letter ordering options [bdfgiMhnRrV],\nwhich override global ordering options for that key.  If no key is given, use\nthe entire line as the key.\n\nSIZE may be followed by the following multiplicative suffixes:\n"), stdout);

      fputs (_("% 1% of memory, b 1, K 1024 (default), and so on for M, G, T, P, E, Z, Y.\n\nWith no FILE, or when FILE is -, read standard input.\n\n*** WARNING ***\nThe locale specified by the environment affects sort order.\nSet LC_ALL=C to get the traditional sort order that uses\nnative byte values.\n"), stdout );

      emit_ancillary_info ();
    }

  exit (var_60);
}



enum
{
  enum_31 = CHAR_MAX + 1,
  enum_32,
  enum_33,
  enum_34,
  enum_35,
  enum_36,
  enum_37,
  enum_38
};

static char const short_options[] = "-bcCdfghik:mMno:rRsS:t:T:uVy:z";

static struct struct_39 const long_options[] =
{
  {"ignore-leading-blanks", no_argument, NULL, 'b'},
  {"check", optional_argument, NULL, CHECK_OPTION},
  {"compress-program", required_argument, NULL, COMPRESS_PROGRAM_OPTION},
  {"debug", no_argument, NULL, DEBUG_PROGRAM_OPTION},
  {"dictionary-order", no_argument, NULL, 'd'},
  {"ignore-case", no_argument, NULL, 'f'},
  {"files0-from", required_argument, NULL, FILES0_FROM_OPTION},
  {"general-numeric-sort", no_argument, NULL, 'g'},
  {"ignore-nonprinting", no_argument, NULL, 'i'},
  {"key", required_argument, NULL, 'k'},
  {"merge", no_argument, NULL, 'm'},
  {"month-sort", no_argument, NULL, 'M'},
  {"numeric-sort", no_argument, NULL, 'n'},
  {"human-numeric-sort", no_argument, NULL, 'h'},
  {"version-sort", no_argument, NULL, 'V'},
  {"random-sort", no_argument, NULL, 'R'},
  {"random-source", required_argument, NULL, RANDOM_SOURCE_OPTION},
  {"sort", required_argument, NULL, SORT_OPTION},
  {"output", required_argument, NULL, 'o'},
  {"reverse", no_argument, NULL, 'r'},
  {"stable", no_argument, NULL, 's'},
  {"batch-size", required_argument, NULL, NMERGE_OPTION},
  {"buffer-size", required_argument, NULL, 'S'},
  {"field-separator", required_argument, NULL, 't'},
  {"temporary-directory", required_argument, NULL, 'T'},
  {"unique", no_argument, NULL, 'u'},
  {"zero-terminated", no_argument, NULL, 'z'},
  {"parallel", required_argument, NULL, PARALLEL_OPTION},
  {GETOPT_HELP_OPTION_DECL},
  {GETOPT_VERSION_OPTION_DECL},
  {NULL, 0, NULL, 0},
};






static char const *const check_args[] =
{

  "quiet", "silent", "diagnose-first", NULL

};
static char const check_types[] =
{

  'C', 'C', 'c',

};

static char const *const sort_args[] =
{

  "general-numeric", "human-numeric", "month", "numeric", "random", "version", NULL

};
static char const sort_types[] =
{

  'g', 'h', 'M', 'n', 'R', 'V',

};


static int caught_signals;


struct struct_87
{
  bool valid;
  int sigs;
};


static struct struct_87
fn_41 (void)
{
  struct struct_87 var_60;
  var_60.valid = (0 == 0);
  return var_60;
}


static void
fn_42 (struct struct_87 var_60)
{
  if (var_60.valid)
    {

      0;
    }
}




enum { enum_43, enum_44, enum_45 };


struct struct_253
{
  struct struct_253 *volatile next;
  pid_t pid;
  char state;
  char name[1];
};
static struct struct_253 *volatile var_253;
static struct struct_253 *volatile *temptail = &var_253;


struct struct_275
{

  char const *name;


  struct struct_253 *temp;
};


static Hash_table *proctab;

enum { enum_49 = 47 };

static size_t
fn_50 (void const *var_53, size_t var_53)
{
  struct struct_253 const *node = var_53;
  return node->pid % var_53;
}

static bool
fn_53 (void const *var_56, void const *var_56)
{
  struct struct_253 const *n1 = var_56;
  struct struct_253 const *n2 = var_56;
  return n1->pid == n2->pid;
}


static pid_t nprocs;

static bool fn_61 (pid_t);

static pid_t
fn_57 (pid_t var_62)
{
  int var_60;
  pid_t var_60 = waitpid ((var_62 ? var_62 : -1), &var_60, (var_62 ? 0 : WNOHANG));

  if (var_60 < 0)
    error (SORT_FAILURE, var_274, _("waiting for %s [-d]"),
           compress_program);
  else if (0 < var_60 && (0 < var_62 || delete_proc (var_60)))
    {
      if (! WIFEXITED (var_60) || WEXITSTATUS (var_60))
        error (SORT_FAILURE, 0, _("%s [-d] terminated abnormally"),
               compress_program);
      --nprocs;
    }

  return var_60;
}




static void
fn_60 (struct struct_253 *temp)
{
  if (! proctab)
    {
      proctab = hash_initialize (INIT_PROCTAB_SIZE, NULL,
                                 proctab_hasher,
                                 proctab_comparator,
                                 NULL);
      if (! proctab)
        xalloc_die ();
    }

  temp->state = UNREAPED;

  if (! hash_insert (proctab, temp))
    xalloc_die ();
}




static bool
fn_61 (pid_t var_62)
{
  struct struct_253 test;

  test.pid = var_62;
  struct struct_253 *node = hash_delete (proctab, &test);
  if (! node)
    return false;
  node->state = REAPED;
  return true;
}




static void
fn_61 (pid_t var_62)
{
  if (delete_proc (var_62))
    reap (var_62);
}




static void
fn_62 (void)
{
  while (0 < nprocs && reap (0))
    continue;
}



static void
fn_63 (void)
{
  reap (-1);
  reap_exited ();
}



static void
fn_64 (void)
{
  while (0 < nprocs)
    reap (-1);
}


static void
(*inittables) (void);
static char *
(*begfield) (const struct struct_275*, const struct struct_265 *);
static char *
(*limfield) (const struct struct_275*, const struct struct_265 *);
static void
(*skipblanks) (char **ptr, char *lim);
static int
(*getmonth) (char const *, size_t, char **);
static int
(*keycompare) (const struct struct_275 *, const struct struct_275 *);
static int
(*numcompare) (const char *, const char *);

static void
fn_65 (void)
{
  struct struct_253 const *node;

  for (node = var_253; node; node = node->next)
    unlink (node->name);
  var_253 = NULL;
}



static void
fn_66 (void)
{
  if (var_253)
    {


      struct struct_87 var_87 = cs_enter ();
      cleanup ();
      cs_leave (var_87);
    }

  close_stdout ();
}







static struct struct_253 *
fn_68 (int *pfd, bool var_81)
{
  static char const slashbase[] = "/sortXXXXXX";
  static size_t temp_dir_index;
  int fd;
  int var_84;
  char const *temp_dir = temp_dirs[temp_dir_index];
  size_t var_139 = strlen (temp_dir);
  struct struct_253 *node =
    xmalloc (offsetof (struct struct_253, name) + var_139 + sizeof slashbase);
  char *file = node->name;
  struct struct_87 var_87;

  memcpy (file, temp_dir, var_139);
  memcpy (file + var_139, slashbase, sizeof slashbase);
  node->next = NULL;
  if (++temp_dir_index == temp_dir_count)
    temp_dir_index = 0;


  var_87 = cs_enter ();
  fd = mkstemp (file);
  if (0 <= fd)
    {
      *temptail = node;
      temptail = &node->next;
    }
  var_84 = var_274;
  cs_leave (var_87);
  var_274 = var_84;

  if (fd < 0)
    {
      if (! (var_81 && var_274 == EMFILE))
        error (SORT_FAILURE, var_274, _("cannot create temporary file in %s"),
               quote (temp_dir));
      free (node);
      node = NULL;
    }

  *pfd = fd;
  return node;
}

static FILE *
fn_72 (char const *file, char const *how)
{
  FILE *fp;

  if (*how == 'r')
    {
      if (STREQ (file, "-"))
        {
          have_read_stdin = true;
          fp = stdin;
        }
      else
        fp = fopen (file, how);
      fadvise (fp, FADVISE_SEQUENTIAL);
    }
  else if (*how == 'w')
    {
      if (file && ftruncate (STDOUT_FILENO, 0) != 0)
        error (SORT_FAILURE, var_274, _("%s: error truncating"),
               quote (file));
      fp = stdout;
    }
  else
    assert (!"unexpected mode passed to stream_open");

  return fp;
}




static FILE *
fn_73 (char const *file, char const *how)
{
  FILE *fp = stream_open (file, how);
  if (!fp)
    die (_("open failed"), file);
  return fp;
}



static void
fn_74 (FILE *fp, char const *file)
{
  switch (fileno (fp))
    {
    case STDIN_FILENO:

      if (feof (fp))
        clearerr (fp);
      break;

    case STDOUT_FILENO:

      if (fflush (fp) != 0)
        die (_("fflush failed"), file);
      break;

    default:
      if (fclose (fp) != 0)
        die (_("close failed"), file);
      break;
    }
}

static void
fn_75 (int var_78, int var_78)
{
  if (var_78 != var_78)
    {

      dup2 (var_78, var_78);
      close (var_78);
    }
}






static pid_t
fn_78 (int pipefds[2], size_t var_79)
{

  return -1;

}







static struct struct_253 *
fn_80 (FILE **pfp, bool var_81)
{
  int tempfd;
  struct struct_253 *node = create_temp_file (&tempfd, var_81);
  if (! node)
    return NULL;

  node->state = UNCOMPRESSED;

  if (compress_program)
    {
      int pipefds[2];

      node->pid = pipe_fork (pipefds, MAX_FORK_TRIES_COMPRESS);
      if (0 < node->pid)
        {
          close (tempfd);
          close (pipefds[0]);
          tempfd = pipefds[1];

          register_proc (node);
        }
      else if (node->pid == 0)
        {


          close (pipefds[1]);
          move_fd_or_die (tempfd, STDOUT_FILENO);
          move_fd_or_die (pipefds[0], STDIN_FILENO);

          execlp (compress_program, compress_program, (char *) NULL);

          async_safe_die (var_274, "couldn't execute compress program");
        }
    }

  *pfp = fdopen (tempfd, "w");
  if (! *pfp)
    die (_("couldn't create temporary file"), node->name);

  return node;
}





static struct struct_253 *
fn_81 (FILE **pfp)
{
  return maybe_create_temp (pfp, false);
}






static FILE *
fn_82 (struct struct_253 *temp)
{
  int tempfd, pipefds[2];
  FILE *fp = NULL;

  if (temp->state == UNREAPED)
    wait_proc (temp->pid);

  tempfd = open (temp->name, O_RDONLY);
  if (tempfd < 0)
    return NULL;

  pid_t var_84 = pipe_fork (pipefds, MAX_FORK_TRIES_DECOMPRESS);

  switch (var_84)
    {
    case -1:
      if (var_274 != EMFILE)
        error (SORT_FAILURE, var_274, _("couldn't create process for %s -d"),
               compress_program);
      close (tempfd);
      var_274 = EMFILE;
      break;

    case 0:


      close (pipefds[0]);
      move_fd_or_die (tempfd, STDIN_FILENO);
      move_fd_or_die (pipefds[1], STDOUT_FILENO);

      execlp (compress_program, compress_program, "-d", (char *) NULL);

      async_safe_die (var_274, "couldn't execute compress program (with -d)");

    default:
      temp->pid = var_84;
      register_proc (temp);
      close (tempfd);
      close (pipefds[1]);

      fp = fdopen (pipefds[0], "r");
      if (! fp)
        {
          int var_84 = var_274;
          close (pipefds[0]);
          var_274 = var_84;
        }
      break;
    }

  return fp;
}


static void
fn_84 (char const *dir)
{
  if (temp_dir_count == temp_dir_alloc)
    temp_dirs = X2NREALLOC (temp_dirs, &temp_dir_alloc);

  temp_dirs[temp_dir_count++] = dir;
}



static void
fn_85 (char const *name)
{
  struct struct_253 *volatile *pnode;
  struct struct_253 *node;
  struct struct_253 *next;
  int unlink_status;
  int var_87 = 0;
  struct struct_87 var_87;

  for (pnode = &var_253; (node = *pnode)->name != name; pnode = &node->next)
    continue;

  if (node->state == UNREAPED)
    wait_proc (node->pid);


  next = node->next;
  var_87 = cs_enter ();
  unlink_status = unlink (name);
  var_87 = var_274;
  *pnode = next;
  cs_leave (var_87);

  if (unlink_status != 0)
    error (0, var_87, _("warning: cannot remove: %s"), name);
  if (! next)
    temptail = pnode;
  free (node);
}

static void
fn_87 (void)
{
  size_t i;

  for (i = 0; i < (UCHAR_MAX + 1); ++i)
    {
      blanks[i] = !! isblank (i);
      nonprinting[i] = ! isprint (i);
      nondictionary[i] = ! isalnum (i) && ! isblank (i);
      fold_toupper[i] = toupper (i);
    }

}




static void
fn_88 (int var_274, char var_274, char const *s)
{
  uintmax_t n;
  struct struct_101 rlimit;
  enum enumtype_98 var_99 = xstrtoumax (s, NULL, 10, &n, NULL);




  unsigned int var_94 = ((-1 == 0
                              ? rlimit.rlim_cur
                              : 20)
                             - 3);

  if (var_99 == LONGINT_OK)
    {
      var_275 = n;
      if (var_275 != n)
        var_99 = LONGINT_OVERFLOW;
      else
        {
          if (var_275 < 2)
            {
              error (0, 0, _("invalid --%s argument %s"),
                     long_options[var_274].name, quote (s));
              error (SORT_FAILURE, 0,
                     _("minimum --%s argument is %s"),
                     long_options[var_274].name, quote ("2"));
            }
          else if (var_94 < var_275)
            {
              var_99 = LONGINT_OVERFLOW;
            }
          else
            return;
        }
    }

  if (var_99 == LONGINT_OVERFLOW)
    {
      char max_nmerge_buf[INT_BUFSIZE_BOUND (var_94)];
      error (0, 0, _("--%s argument %s too large"),
             long_options[var_274].name, quote (s));
      error (SORT_FAILURE, 0,
             _("maximum --%s argument with current rlimit is %s"),
             long_options[var_274].name,
             uinttostr (var_94, max_nmerge_buf));
    }
  else
    xstrtol_fatal (var_99, var_274, var_274, long_options, s);
}

static void
fn_94 (int var_274, char var_274, char const *s)
{
  uintmax_t n;
  char *suffix;
  enum enumtype_98 var_99 = xstrtoumax (s, &suffix, 10, &n, "EgGkKmMPtTYZ");


  if (var_99 == LONGINT_OK && ISDIGIT (suffix[-1]))
    {
      if (n <= UINTMAX_MAX / 1024)
        n *= 1024;
      else
        var_99 = LONGINT_OVERFLOW;
    }


  if (var_99 == LONGINT_INVALID_SUFFIX_CHAR && ISDIGIT (suffix[-1]) && ! suffix[1])
    switch (suffix[0])
      {
      case 'b':
        var_99 = LONGINT_OK;
        break;

      case '%':
        {
          double var_103 = physmem_total () * n / 100;


          if (var_103 < UINTMAX_MAX)
            {
              n = var_103;
              var_99 = LONGINT_OK;
            }
          else
            var_99 = LONGINT_OVERFLOW;
        }
        break;
      }

  if (var_99 == LONGINT_OK)
    {


      if (n < sort_size)
        return;

      sort_size = n;
      if (sort_size == n)
        {
          sort_size = MAX (sort_size, (var_275 * (2 + sizeof (struct struct_275))));
          return;
        }

      var_99 = LONGINT_OVERFLOW;
    }

  xstrtol_fatal (var_99, var_274, var_274, long_options, s);
}


static size_t
fn_96 (int var_274, char var_274, char const *s)
{
  unsigned long int var_277;
  enum enumtype_98 var_99 = xstrtoul (s, NULL, 10, &var_277, "");
  if (var_99 == LONGINT_OVERFLOW)
    return var_277;
  if (var_99 != LONGINT_OK)
    xstrtol_fatal (var_99, var_274, var_274, long_options, s);
  if (var_277 < var_277)
    var_277 = var_277;
  if (var_277 == 0)
    error (SORT_FAILURE, 0, _("number in parallel must be nonzero"));
  return var_277;
}


static size_t
fn_99 (void)
{




  size_t var_184 = var_277;
  struct struct_101 rlimit;
  if (-1 == 0 && rlimit.rlim_cur < var_184)
    var_184 = rlimit.rlim_cur;







  var_184 /= 2;

  double var_125 = physmem_available ();
  double var_103 = physmem_total ();
  double var_103 = MAX (var_125, var_103 / 8);


  if (var_103 * 0.75 < var_184)
    var_184 = var_103 * 0.75;




  if (var_103 < var_184)
    var_184 = var_103;
  return MAX (var_184, (var_275 * (2 + sizeof (struct struct_275))));
}

static size_t
fn_103 (FILE *const *fps, size_t var_109,
                  char *const *files, size_t var_277,
                  size_t var_125)
{


  static size_t size_bound;


  size_t var_109 = var_125 + 1;



  size_t var_184 = var_109 + 1;

  size_t i;

  for (i = 0; i < var_277; i++)
    {
      struct struct_244 st;
      off_t file_size;
      size_t worst_case;

      if ((i < var_109 ? fstat (fileno (fps[i]), &st)
           : STREQ (files[i], "-") ? fstat (STDIN_FILENO, &st)
           : stat (files[i], &st))
          != 0)
        die (_("stat failed"), files[i]);

      if (S_ISREG (st.st_mode))
        file_size = st.st_size;
      else
        {


          if (sort_size)
            return sort_size;
          file_size = 131072;
        }

      if (! size_bound)
        {
          size_bound = sort_size;
          if (! size_bound)
            size_bound = default_sort_size ();
        }




      worst_case = file_size * var_109 + 1;
      if (file_size != worst_case / var_109
          || size_bound - var_184 <= worst_case)
        return size_bound;
      var_184 += worst_case;
    }

  return var_184;
}





static void
fn_109 (struct struct_251 *var_253, size_t var_125, size_t var_195)
{




  while (true)
    {
      var_195 += sizeof (struct struct_275) - var_195 % sizeof (struct struct_275);
      var_253->buf = malloc (var_195);
      if (var_253->buf)
        break;
      var_195 /= 2;
      if (var_195 <= var_125 + 1)
        xalloc_die ();
    }

  var_253->line_bytes = var_125;
  var_253->alloc = var_195;
  var_253->used = var_253->left = var_253->nlines = 0;
  var_253->eof = false;
}



static inline struct struct_275 *
fn_112 (struct struct_251 const *var_253)
{
  void *linelim = var_253->buf + var_253->alloc;
  return linelim;
}




static char *
fn_113 (const struct struct_275 *line, const struct struct_265 *key)
{
  char *ptr = line->text, *lim = ptr + line->length - 1;
  size_t var_181 = key->sword;
  size_t var_116 = key->schar;




  if (var_274)
    while (ptr < lim && var_181--)
      {
        while (ptr < lim && *ptr != tab[0])
          ++ptr;
        if (ptr < lim)
          ++ptr;
      }
  else
    while (ptr < lim && var_181--)
      {
        while (ptr < lim && blanks[to_uchar (*ptr)])
          ++ptr;
        while (ptr < lim && !blanks[to_uchar (*ptr)])
          ++ptr;
      }



  if (key->skipsblanks)
    while (ptr < lim && blanks[to_uchar (*ptr)])
      ++ptr;


  ptr = MIN (lim, ptr + var_116);

  return ptr;
}

static char *
fn_116 (const struct struct_275 *line, const struct struct_265 *key)
{
  char *ptr = line->text, *lim = ptr + line->length - 1;
  size_t var_181 = key->eword, var_119 = key->echar;

  if (var_119 == 0)
    var_181++;

  if (var_274)
    while (ptr < lim && var_181--)
      {
        while (ptr < lim && *ptr != tab[0])
          ++ptr;
        if (ptr < lim && (var_181 || var_119))
          ++ptr;
      }
  else
    while (ptr < lim && var_181--)
      {
        while (ptr < lim && blanks[to_uchar (*ptr)])
          ++ptr;
        while (ptr < lim && !blanks[to_uchar (*ptr)])
          ++ptr;
      }

  if (var_119 != 0)
    {


      if (key->skipeblanks)
        while (ptr < lim && blanks[to_uchar (*ptr)])
          ++ptr;


      ptr = MIN (lim, ptr + var_119);
    }

  return ptr;
}

static void
fn_119 (char **ptr, char *lim)
{
  while (*ptr < lim && blanks[to_uchar (**ptr)])
    ++(*ptr);
}

static bool
fn_120 (struct struct_251 *var_253, FILE *fp, char const *file)
{
  struct struct_265 const *key = var_275;
  char var_125 = var_274;
  size_t var_125 = var_253->line_bytes;
  size_t var_125 = var_199 - (2 + sizeof (struct struct_275));

  if (var_253->eof)
    return false;

  if (var_253->used != var_253->left)
    {
      memmove (var_253->buf, var_253->buf + var_253->used - var_253->left, var_253->left);
      var_253->used = var_253->left;
      var_253->nlines = 0;
    }

  while (true)
    {
      char *ptr = var_253->buf + var_253->used;
      struct struct_275 *linelim = buffer_linelim (var_253);
      struct struct_275 *line = linelim - var_253->nlines;
      size_t var_125 = (char *) linelim - var_253->nlines * var_125 - ptr;
      char *line_start = var_253->nlines ? line->text + line->length : var_253->buf;

      while (var_125 + 1 < var_125)
        {





          size_t var_125 = (var_125 - 1) / (var_125 + 1);
          size_t var_125 = fread (ptr, 1, var_125, fp);
          char *ptrlim = ptr + var_125;
          char *p;
          var_125 -= var_125;

          if (var_125 != var_125)
            {
              if (ferror (fp))
                die (_("read failed"), file);
              if (feof (fp))
                {
                  var_253->eof = true;
                  if (var_253->buf == ptrlim)
                    return false;
                  if (line_start != ptrlim && ptrlim[-1] != var_125)
                    *ptrlim++ = var_125;
                }
            }


          while ((p = memchr (ptr, var_125, ptrlim - ptr)))
            {



              *p = '\0';
              ptr = p + 1;
              line--;
              line->text = line_start;
              line->length = ptr - line_start;
              var_125 = MAX (var_125, line->length);
              var_125 -= var_125;

              if (key)
                {


                  line->keylim = (key->eword == var_277
                                  ? p
                                  : limfield (line, key));

                  if (key->sword != var_277)
                    line->keybeg = begfield (line, key);
                  else
                    {
                      if (key->skipsblanks)
                        {

                          while (blanks[to_uchar (*line_start)])
                            line_start++;
                        }
                      line->keybeg = line_start;
                    }
                }

              line_start = ptr;
            }

          ptr = ptrlim;
          if (var_253->eof)
            break;
        }

      var_253->used = ptr - var_253->buf;
      var_253->nlines = buffer_linelim (var_253) - line;
      if (var_253->nlines != 0)
        {
          var_253->left = ptr - line_start;
          var_199 = var_125 + (2 + sizeof (struct struct_275));
          return true;
        }

      {



        size_t var_126 = var_253->alloc / sizeof (struct struct_275);
        var_253->buf = x2nrealloc (var_253->buf, &var_126, sizeof (struct struct_275));
        var_253->alloc = var_126 * sizeof (struct struct_275);
      }
    }
}


static char const unit_order[(UCHAR_MAX + 1)] =
  {

    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 3,
    0, 0, 0, 1, 0, 2, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 8, 7, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

  };






static int fn_126
find_unit_order (char const *number)
{
  bool var_130 = (*number == '-');
  char const *p = number + var_130;
  int var_129 = 0;
  unsigned char ch;







  do
    {
      while (ISDIGIT (ch = *p++))
        var_129 |= ch - '0';
    }
  while (ch == thousands_sep);

  if (ch == decimal_point)
    while (ISDIGIT (ch = *p++))
      var_129 |= ch - '0';

  if (var_129)
    {
      int var_130 = unit_order[ch];
      return (var_130 ? -var_130 : var_130);
    }
  else
    return 0;
}




static int
fn_130 (char const *var_222, char const *var_222)
{
  while (blanks[to_uchar (*var_222)])
    var_222++;
  while (blanks[to_uchar (*var_222)])
    var_222++;

  int var_186 = find_unit_order (var_222) - find_unit_order (var_222);
  return (var_186 ? var_186 : strnumcmp (var_222, var_222, decimal_point, thousands_sep));
}





static int
fn_134 (const char *var_222, const char *var_222)
{
  while (blanks[to_uchar (*var_222)])
    var_222++;
  while (blanks[to_uchar (*var_222)])
    var_222++;

  return strnumcmp (var_222, var_222, decimal_point, thousands_sep);
}

static int
fn_135 (char const *sa, char const *sb)
{
  double var_222;
  memset (&var_222, 0, sizeof var_222);
  var_222 = strtod (sa, NULL);

  double var_222;
  memset (&var_222, 0, sizeof var_222);
  var_222 = strtod (sb, NULL);

  return memcmp (&var_222, &var_222, sizeof var_222);
}

static int
fn_136 (char const *sa, char const *sb)
{



  char *ea;
  char *eb;
  double var_222 = strtod (sa, &ea);
  double var_222 = strtod (sb, &eb);


  if (sa == ea)
    return sb == eb ? 0 : -1;
  if (sb == eb)
    return 1;




  return (var_222 < var_222 ? -1
          : var_222 > var_222 ? 1
          : var_222 == var_222 ? 0
          : var_222 == var_222 ? -1
          : var_222 == var_222 ? 1
          : nan_compare (sa, sb));
}




static int
fn_137 (char const *var_142, size_t var_139, char **ea)
{
  size_t var_221 = 0;
  size_t var_221 = 12;

  while (blanks[to_uchar (*var_142)])
    var_142++;

  do
    {
      size_t var_142 = (var_221 + var_221) / 2;
      char const *m = var_142;
      char const *n = monthtab[var_142].name;

      for (;; m++, n++)
        {
          if (!*n)
            {
              if (ea)
                *ea = (char *) m;
              return monthtab[var_142].val;
            }
          if (to_uchar (fold_toupper[to_uchar (*m)]) < to_uchar (*n))
            {
              var_221 = var_142;
              break;
            }
          else if (to_uchar (fold_toupper[to_uchar (*m)]) > to_uchar (*n))
            {
              var_221 = var_142 + 1;
              break;
            }
        }
    }
  while (var_221 < var_221);

  return 0;
}


static struct struct_154 random_md5_state;



static void
fn_143 (char const *random_source)
{
  unsigned char var_253[MD5_DIGEST_SIZE];
  struct struct_144 *r = randread_new (random_source, sizeof var_253);
  if (! r)
    die (_("open failed"), random_source);
  randread (r, var_253, sizeof var_253);
  if (randread_free (r) != 0)
    die (_("close failed"), random_source);
  md5_init_ctx (&random_md5_state);
  md5_process_bytes (var_253, sizeof var_253, &random_md5_state);
}



static size_t
fn_145 (char *restrict dest, char const *restrict src, size_t var_148)
{
  var_274 = 0;
  size_t var_148 = strxfrm (dest, src, var_148);

  if (var_274)
    {
      error (0, var_274, _("string transformation failed"));
      error (0, 0, _("set LC_ALL='C' to work around the problem"));
      error (SORT_FAILURE, 0,
             _("the untransformed string was %s"),
             quotearg_n_style (0, locale_quoting_style, src));
    }

  return var_148;
}





static int
fn_148 (char *restrict texta, size_t var_185,
                char *restrict textb, size_t var_185)
{




  int var_158 = 0;

  char var_184[4000];
  char *var_253 = var_184;
  size_t var_158 = sizeof var_184;
  void *allocated = NULL;
  uint32_t dig[2][MD5_DIGEST_SIZE / sizeof (uint32_t)];
  struct struct_154 s[2];
  s[0] = s[1] = random_md5_state;

  if (hard_LC_COLLATE)
    {
      char const *lima = texta + var_185;
      char const *limb = textb + var_185;

      while (true)
        {

          size_t var_155 = 3 * (var_185 + var_185) + 2;
          if (var_158 < var_155)
            {
              var_158 = MAX (var_155, var_158 * 3 / 2);
              free (allocated);
              var_253 = allocated = malloc (var_158);
              if (! var_253)
                {
                  var_253 = var_184;
                  var_158 = sizeof var_184;
                }
            }

          size_t var_158 =
            (texta < lima ? xstrxfrm (var_253, texta, var_158) + 1 : 0);
          bool var_158 = var_158 <= var_158;
          size_t var_158 =
            (textb < limb
             ? (xstrxfrm ((var_158 ? var_253 + var_158 : NULL), textb,
                          (var_158 ? var_158 - var_158 : 0))
                + 1)
             : 0);

          if (! (var_158 && var_158 + var_158 <= var_158))
            {
              var_158 = var_158 + var_158;
              if (var_158 < var_277 / 3)
                var_158 = var_158 * 3 / 2;
              free (allocated);
              var_253 = allocated = xmalloc (var_158);
              if (texta < lima)
                strxfrm (var_253, texta, var_158);
              if (textb < limb)
                strxfrm (var_253 + var_158, textb, var_158);
            }





          if (texta < lima)
            texta += strlen (texta) + 1;
          if (textb < limb)
            textb += strlen (textb) + 1;
          if (! (texta < lima || textb < limb))
            {
              var_185 = var_158; texta = var_253;
              var_185 = var_158; textb = var_253 + var_158;
              break;
            }



          md5_process_bytes (var_253, var_158, &s[0]);
          md5_process_bytes (var_253 + var_158, var_158, &s[1]);


          if (! var_158)
            {
              var_158 = memcmp (var_253, var_253 + var_158, MIN (var_158, var_158));
              if (! var_158)
                var_158 = (var_158 > var_158) - (var_158 < var_158);
            }
        }
    }


  md5_process_bytes (texta, var_185, &s[0]); md5_finish_ctx (&s[0], dig[0]);
  md5_process_bytes (textb, var_185, &s[1]); md5_finish_ctx (&s[1], dig[1]);
  int var_186 = memcmp (dig[0], dig[1], sizeof dig[0]);


  if (! var_186)
    {
      if (! var_158)
        {
          var_158 = memcmp (texta, textb, MIN (var_185, var_185));
          if (! var_158)
            var_158 = (var_185 > var_185) - (var_185 < var_185);
        }

      var_186 = var_158;
    }

  free (allocated);

  return var_186;
}





static size_t
fn_158 (char const *var_168, char const *lim)
{
  size_t var_168 = mbsnwidth (var_168, lim - var_168, 0);
  while (var_168 < lim)
    var_168 += (*var_168++ == '\t');
  return var_168;
}




static void
fn_161 (size_t var_168, size_t var_168)
{
  while (var_168--)
    putchar (' ');

  if (!var_168)
    printf (_("^ no match for key\n"));
  else
    {
      do
        putchar ('_');
      while (--var_168);

      putchar ('\n');
    }
}



static inline bool
fn_163 (struct struct_265 const *key)
{
  return key->numeric || key->general_numeric || key->human_numeric;
}




static void
fn_164 (struct struct_275 const *line, struct struct_265 const *key)
{
  char *var_168 = line->text;
  char *var_168 = var_168;
  char *lim = var_168 + line->length - 1;

  if (key)
    {
      if (key->sword != var_277)
        var_168 = begfield (line, key);
      if (key->eword != var_277)
        lim = limfield (line, key);

      if (key->skipsblanks || key->month || key_numeric (key))
        {
          char var_202 = *lim;
          *lim = '\0';

          skipblanks (&var_168, lim);

          char *tighter_lim = var_168;

          if (lim < var_168)
            tighter_lim = lim;
          else if (key->month)
            getmonth (var_168, lim-var_168, &tighter_lim);
          else if (key->general_numeric)
            ignore_value (strtod (var_168, &tighter_lim));
          else if (key->numeric || key->human_numeric)
            {
              char *p = var_168 + (var_168 < lim && *var_168 == '-');
              bool var_168 = false;
              unsigned char ch;

              do
                {
                  while (ISDIGIT (ch = *p++))
                    var_168 = true;
                }
              while (ch == thousands_sep);

              if (ch == decimal_point)
                while (ISDIGIT (ch = *p++))
                  var_168 = true;

              if (var_168)
                tighter_lim = p - ! (key->human_numeric && unit_order[ch]);
            }
          else
            tighter_lim = lim;

          *lim = var_202;
          lim = tighter_lim;
        }
    }

  size_t var_168 = debug_width (var_168, var_168);
  size_t var_168 = debug_width (var_168, lim);
  mark_key (var_168, var_168);
}



static void
fn_168 (struct struct_275 const *line)
{
  struct struct_265 const *key = var_275;

  do
    debug_key (line, key);
  while (key && ((key = key->next) || ! (unique || stable)));
}



static bool
fn_169 (struct struct_265 const *key)
{
  return ! (key->ignore
            || key->translate
            || key->skipsblanks
            || key->skipeblanks
            || key_numeric (key)
            || key->month
            || key->version
            || key->random

           );
}



static void
fn_170 (struct struct_265 const *key, char *opts)
{
  if (key->skipsblanks || key->skipeblanks)
    *opts++ = 'b';
  if (key->ignore == nondictionary)
    *opts++ = 'd';
  if (key->translate)
    *opts++ = 'f';
  if (key->general_numeric)
    *opts++ = 'g';
  if (key->human_numeric)
    *opts++ = 'h';
  if (key->ignore == nonprinting)
    *opts++ = 'i';
  if (key->month)
    *opts++ = 'M';
  if (key->numeric)
    *opts++ = 'n';
  if (key->random)
    *opts++ = 'R';
  if (key->reverse)
    *opts++ = 'r';
  if (key->version)
    *opts++ = 'V';
  *opts = '\0';
}



static void
fn_171 (struct struct_265 const *gkey, bool var_275)
{
  struct struct_265 const *key;
  struct struct_265 var_182 = *gkey;
  unsigned long var_181 = 1;

  for (key = var_275; key; key = key->next, var_181++)
    {
      if (key->obsolete_used)
        {
          size_t var_181 = key->sword;
          size_t var_181 = key->eword;
          char var_253[INT_BUFSIZE_BOUND (uintmax_t)];



          char var_178[INT_BUFSIZE_BOUND (var_181) * 2 + 4];
          char var_178[INT_BUFSIZE_BOUND (var_181) * 2 + 5];
          char *po = var_178;
          char *pn = var_178;

          if (var_181 == var_277)
            var_181++;

          po = stpcpy (stpcpy (po, "+"), umaxtostr (var_181, var_253));
          pn = stpcpy (stpcpy (pn, "-k "), umaxtostr (var_181 + 1, var_253));
          if (key->eword != var_277)
            {
              stpcpy (stpcpy (po, " -"), umaxtostr (var_181 + 1, var_253));
              stpcpy (stpcpy (pn, ","),
                      umaxtostr (var_181 + 1
                                 + (key->echar == var_277), var_253));
            }
          error (0, 0, _("obsolescent key %s used; consider %s instead"),
                 quote_n (0, var_178), quote_n (1, var_178));
        }


      if (key->sword != var_277 && key->eword < key->sword)
        error (0, 0, _("key %lu has zero width and will be ignored"), var_181);


      bool var_181 = key_numeric (key) || key->month;
      bool var_181 = !hard_LC_COLLATE && default_key_compare (key)
                                 && !(key->schar || key->echar);
      bool var_181 = key->eword == 0 && key->echar != 0;
      if (!var_275 && !var_274 && !var_181
          && ((!key->skipsblanks && !(var_181 || var_181))
              || (!key->skipsblanks && key->schar)
              || (!key->skipeblanks && key->echar)))
        error (0, 0, _("leading blanks are significant in key %lu; "
                       "consider also specifying 'b'"), var_181);




      if (!var_275 && key_numeric (key))
        {
          size_t var_181 = key->sword + 1;
          size_t var_181 = key->eword + 1;
          if (!var_181)
            var_181++;
          if (!var_181 || var_181 < var_181)
            error (0, 0, _("key %lu is numeric and spans multiple fields"),
                   var_181);
        }


      if (var_182.ignore && (var_182.ignore == key->ignore))
        var_182.ignore = NULL;
      if (var_182.translate && (var_182.translate == key->translate))
        var_182.translate = NULL;
      var_182.skipsblanks &= !key->skipsblanks;
      var_182.skipeblanks &= !key->skipeblanks;
      var_182.month &= !key->month;
      var_182.numeric &= !key->numeric;
      var_182.general_numeric &= !key->general_numeric;
      var_182.human_numeric &= !key->human_numeric;
      var_182.random &= !key->random;
      var_182.version &= !key->version;
      var_182.reverse &= !key->reverse;
    }



  if (!default_key_compare (&var_182)
      || (var_182.reverse && (stable || unique) && var_275))
    {
      bool var_182 = var_182.reverse;
      if (!(stable || unique))
        var_182.reverse = false;

      char opts[sizeof short_options];
      key_to_opts (&var_182, opts);
      error (0, 0,
             ngettext ("option '-%s' is ignored",
                       "options '-%s' are ignored",
                       select_plural (strlen (opts))), opts);
      var_182.reverse = var_182;
    }
  if (var_182.reverse && !(stable || unique) && var_275)
    error (0, 0, _("option '-r' only applies to last-resort comparison"));
}

static int
fn_182 (const struct struct_275 *var_222, const struct struct_275 *var_222)
{
  struct struct_265 *key = var_275;



  char *texta = var_222->keybeg;
  char *textb = var_222->keybeg;
  char *lima = var_222->keylim;
  char *limb = var_222->keylim;

  int var_186;

  while (true)
    {
      char const *translate = key->translate;
      bool const *ignore = key->ignore;


      lima = MAX (texta, lima);
      limb = MAX (textb, limb);


      size_t var_185 = lima - texta;
      size_t var_185 = limb - textb;

      if (hard_LC_COLLATE || key_numeric (key)
          || key->month || key->random || key->version)
        {
          char *ta;
          char *tb;
          size_t tlena;
          size_t tlenb;

          char enda fn_184 (= 0);
          char endb fn_184 (= 0);
          void *allocated IF_LINT (= NULL);
          char var_184[4000];

          if (ignore || translate)
            {




              size_t i;


              size_t var_184 = var_185 + 1 + var_185 + 1;
              if (var_184 <= sizeof var_184)
                ta = var_184, allocated = NULL;
              else
                ta = allocated = xmalloc (var_184);
              tb = ta + var_185 + 1;



              for (tlena = i = 0; i < var_185; i++)
                if (! (ignore && ignore[to_uchar (texta[i])]))
                  ta[tlena++] = (translate
                                 ? translate[to_uchar (texta[i])]
                                 : texta[i]);
              ta[tlena] = '\0';

              for (tlenb = i = 0; i < var_185; i++)
                if (! (ignore && ignore[to_uchar (textb[i])]))
                  tb[tlenb++] = (translate
                                 ? translate[to_uchar (textb[i])]
                                 : textb[i]);
              tb[tlenb] = '\0';
            }
          else
            {

              ta = texta; tlena = var_185; enda = ta[tlena]; ta[tlena] = '\0';
              tb = textb; tlenb = var_185; endb = tb[tlenb]; tb[tlenb] = '\0';
            }

          if (key->numeric)
            var_186 = numcompare (ta, tb);
          else if (key->general_numeric)
            var_186 = general_numcompare (ta, tb);
          else if (key->human_numeric)
            var_186 = human_numcompare (ta, tb);
          else if (key->month)
            var_186 = getmonth (ta, tlena, NULL) - getmonth (tb, tlenb, NULL);
          else if (key->random)
            var_186 = compare_random (ta, tlena, tb, tlenb);
          else if (key->version)
            var_186 = filevercmp (ta, tb);
          else
            {


              if (tlena == 0)
                var_186 = - ((tlenb) != 0);
              else if (tlenb == 0)
                var_186 = 1;
              else
                var_186 = xmemcoll0 (ta, tlena + 1, tb, tlenb + 1);
            }

          if (ignore || translate)
            free (allocated);
          else
            {
              ta[tlena] = enda;
              tb[tlenb] = endb;
            }
        }
      else if (ignore)
        {

          if (translate)
            do { while (true) { while (texta < lima && ignore[to_uchar (*texta)]) ++texta; while (textb < limb && ignore[to_uchar (*textb)]) ++textb; if (! (texta < lima && textb < limb)) break; var_186 = to_uchar (translate[to_uchar (*texta)]) - to_uchar (translate[to_uchar (*textb)]); if (var_186) goto not_equal; ++texta; ++textb; } var_186 = (texta < lima) - (textb < limb); } while 0;

          else
            do { while (true) { while (texta < lima && ignore[to_uchar (*texta)]) ++texta; while (textb < limb && ignore[to_uchar (*textb)]) ++textb; if (! (texta < lima && textb < limb)) break; var_186 = to_uchar (*texta) - to_uchar (*textb); if (var_186) goto not_equal; ++texta; ++textb; } var_186 = (texta < lima) - (textb < limb); } while 0;
        }
      else fn_185 (lena == 0)
        var_186 = - ((var_185) != 0);
      else fn_185 (var_185 == 0)
        goto greater;
      else
        {
          if (translate)
            {
              while (texta < lima && textb < limb)
                {
                  var_186 = (to_uchar (translate[to_uchar (*texta++)])
                          - to_uchar (translate[to_uchar (*textb++)]));
                  if (var_186)
                    goto not_equal;
                }
            }
          else
            {
              var_186 = memcmp (texta, textb, MIN (var_185, var_185));
              if (var_186)
                goto not_equal;
            }
          var_186 = var_185 < var_185 ? -1 : var_185 != var_185;
        }

      if (var_186)
        goto not_equal;

      key = key->next;
      if (! key)
        break;


      if (key->eword != var_277)
        lima = limfield (var_222, key), limb = limfield (var_222, key);
      else
        lima = var_222->text + var_222->length - 1, limb = var_222->text + var_222->length - 1;

      if (key->sword != var_277)
        texta = begfield (var_222, key), textb = begfield (var_222, key);
      else
        {
          texta = var_222->text, textb = var_222->text;
          if (key->skipsblanks)
            {
              while (texta < lima && blanks[to_uchar (*texta)])
                ++texta;
              while (textb < limb && blanks[to_uchar (*textb)])
                ++textb;
            }
        }
    }

  return 0;

 greater:
  var_186 = 1;
 not_equal:
  return key->reverse ? -var_186 : var_186;
}

static int
fn_185 (struct struct_275 const *var_222, struct struct_275 const *var_222)
{
  int var_186;
  size_t alen, blen;




  if (var_275)
    {
      var_186 = keycompare (var_222, var_222);
      if (var_186 || unique || stable)
        return var_186;
    }



  alen = var_222->length - 1, blen = var_222->length - 1;

  if (alen == 0)
    var_186 = - ((blen) != 0);
  else if (blen == 0)
    var_186 = 1;
  else if (hard_LC_COLLATE && !folding)
    {




      var_186 = xmemcoll0 (var_222->text, alen + 1, var_222->text, blen + 1);
    }
  else if (! (var_186 = memcmp (var_222->text, var_222->text, MIN (alen, blen))))
    var_186 = alen < blen ? -1 : alen != blen;

  return reverse ? -var_186 : var_186;
}






static void
fn_186 (struct struct_275 const *line, FILE *fp, char const *output_file)
{
  char *var_253 = line->text;
  size_t var_189 = line->length;
  char *ebuf = var_253 + var_189;

  if (!output_file && debug)
    {

      char const *var_274 = var_253;

      while (var_274 < ebuf)
        {
          char var_189 = *var_274++;
          if (var_189 == '\t')
            var_189 = '>';
          else if (var_274 == ebuf)
            var_189 = '\n';
          if (fputc (var_189, fp) == EOF)
            die (_("write failed"), output_file);
        }

      debug_line (line);
    }
  else
    {
      ebuf[-1] = var_274;
      if (fwrite (var_253, 1, var_189, fp) != var_189)
        die (_("write failed"), output_file);
      ebuf[-1] = '\0';
    }
}






static bool
fn_189 (char const *file_name, char var_275)
{
  FILE *fp = xfopen (file_name, "r");
  struct struct_251 var_253;
  struct struct_275 temp;
  size_t var_195 = 0;
  uintmax_t var_195 = 0;
  struct struct_265 const *key = var_275;
  bool var_195 = ! unique;
  bool var_195 = true;

  initbuf (&var_253, sizeof (struct struct_275),
           MAX (var_199, sort_size));
  temp.text = NULL;

  while (fillbuf (&var_253, fp, file_name))
    {
      struct struct_275 const *line = buffer_linelim (&var_253);
      struct struct_275 const *linebase = line - var_253.nlines;



      if (var_195 && var_195 <= compare (&temp, line - 1))
        {
        found_disorder:
          {
            if (var_275 == 'c')
              {
                struct struct_275 const *disorder_line = line - 1;
                uintmax_t var_195 =
                  buffer_linelim (&var_253) - disorder_line + var_195;
                char hr_buf[INT_BUFSIZE_BOUND (var_195)];
                fprintf (stderr, _("%s: %s:%s: disorder: "),
                         program_name, file_name,
                         umaxtostr (var_195, hr_buf));
                write_line (disorder_line, stderr, _("standard error"));
              }

            var_195 = false;
            break;
          }
        }


      while (linebase < --line)
        if (var_195 <= compare (line, line - 1))
          goto found_disorder;

      var_195 += var_253.nlines;


      if (var_195 < line->length)
        {
          do
            {
              var_195 *= 2;
              if (! var_195)
                {
                  var_195 = line->length;
                  break;
                }
            }
          while (var_195 < line->length);

          free (temp.text);
          temp.text = xmalloc (var_195);
        }
      memcpy (temp.text, line->text, line->length);
      temp.length = line->length;
      if (key)
        {
          temp.keybeg = temp.text + (line->keybeg - line->text);
          temp.keylim = temp.text + (line->keylim - line->text);
        }
    }

  xfclose (fp, file_name);
  free (var_253.buf);
  free (temp.text);
  return var_195;
}






static size_t
fn_195 (struct struct_275 *files, size_t var_277, FILE ***pfps)
{
  FILE **fps = *pfps = xnmalloc (var_277, sizeof *fps);
  int i;


  for (i = 0; i < var_277; i++)
    {
      fps[i] = (files[i].temp && files[i].temp->state != UNCOMPRESSED
                ? open_temp (files[i].temp)
                : stream_open (files[i].name, "r"));
      if (!fps[i])
        break;
    }

  return i;
}

static void
fn_196 (struct struct_275 *files, size_t var_253, size_t var_277,
          FILE *ofp, char const *output_file, FILE **fps)
{
  struct struct_251 *buffer = xnmalloc (var_277, sizeof *buffer);

  struct struct_275 var_202;
  struct struct_275 const *savedline = NULL;

  size_t var_199 = 0;
  struct struct_275 const **cur = xnmalloc (var_277, sizeof *cur);

  struct struct_275 const **base = xnmalloc (var_277, sizeof *base);

  size_t *ord = xnmalloc (var_277, sizeof *ord);



  size_t i;
  size_t j;
  size_t t;
  struct struct_265 const *key = var_275;
  var_202.text = NULL;


  for (i = 0; i < var_277; )
    {
      initbuf (&buffer[i], sizeof (struct struct_275),
               MAX (var_199, sort_size / var_277));
      if (fillbuf (&buffer[i], fps[i], files[i].name))
        {
          struct struct_275 const *linelim = buffer_linelim (&buffer[i]);
          cur[i] = linelim - 1;
          base[i] = linelim - buffer[i].nlines;
          i++;
        }
      else
        {

          xfclose (fps[i], files[i].name);
          if (i < var_253)
            {
              var_253--;
              zaptemp (files[i].name);
            }
          free (buffer[i].buf);
          --var_277;
          for (j = i; j < var_277; ++j)
            {
              files[j] = files[j + 1];
              fps[j] = fps[j + 1];
            }
        }
    }




  for (i = 0; i < var_277; ++i)
    ord[i] = i;
  for (i = 1; i < var_277; ++i)
    if (0 < compare (cur[ord[i - 1]], cur[ord[i]]))
      t = ord[i - 1], ord[i - 1] = ord[i], ord[i] = t, i = 0;


  while (var_277)
    {
      struct struct_275 const *smallest = cur[ord[0]];



      if (unique)
        {
          if (savedline && compare (savedline, smallest))
            {
              savedline = NULL;
              write_line (&var_202, ofp, output_file);
            }
          if (!savedline)
            {
              savedline = &var_202;
              if (var_199 < smallest->length)
                {
                  do
                    if (! var_199)
                      {
                        var_199 = smallest->length;
                        break;
                      }
                  while ((var_199 *= 2) < smallest->length);

                  free (var_202.text);
                  var_202.text = xmalloc (var_199);
                }
              var_202.length = smallest->length;
              memcpy (var_202.text, smallest->text, var_202.length);
              if (key)
                {
                  var_202.keybeg =
                    var_202.text + (smallest->keybeg - smallest->text);
                  var_202.keylim =
                    var_202.text + (smallest->keylim - smallest->text);
                }
            }
        }
      else
        write_line (smallest, ofp, output_file);


      if (base[ord[0]] < smallest)
        cur[ord[0]] = smallest - 1;
      else
        {
          if (fillbuf (&buffer[ord[0]], fps[ord[0]], files[ord[0]].name))
            {
              struct struct_275 const *linelim = buffer_linelim (&buffer[ord[0]]);
              cur[ord[0]] = linelim - 1;
              base[ord[0]] = linelim - buffer[ord[0]].nlines;
            }
          else
            {

              for (i = 1; i < var_277; ++i)
                if (ord[i] > ord[0])
                  --ord[i];
              --var_277;
              xfclose (fps[ord[0]], files[ord[0]].name);
              if (ord[0] < var_253)
                {
                  var_253--;
                  zaptemp (files[ord[0]].name);
                }
              free (buffer[ord[0]].buf);
              for (i = ord[0]; i < var_277; ++i)
                {
                  fps[i] = fps[i + 1];
                  files[i] = files[i + 1];
                  buffer[i] = buffer[i + 1];
                  cur[i] = cur[i + 1];
                  base[i] = base[i + 1];
                }
              for (i = 0; i < var_277; ++i)
                ord[i] = ord[i + 1];
              continue;
            }
        }





      {
        size_t var_221 = 1;
        size_t var_221 = var_277;
        size_t var_202 = var_221;
        size_t var_202 = ord[0];
        size_t count_of_smaller_lines;

        while (var_221 < var_221)
          {
            int var_202 = compare (cur[var_202], cur[ord[var_202]]);
            if (var_202 < 0 || (var_202 == 0 && var_202 < ord[var_202]))
              var_221 = var_202;
            else
              var_221 = var_202 + 1;
            var_202 = (var_221 + var_221) / 2;
          }

        count_of_smaller_lines = var_221 - 1;
        for (j = 0; j < count_of_smaller_lines; j++)
          ord[j] = ord[j + 1];
        ord[count_of_smaller_lines] = var_202;
      }
    }

  if (unique && savedline)
    {
      write_line (&var_202, ofp, output_file);
      free (var_202.text);
    }

  xfclose (ofp, output_file);
  free (fps);
  free (buffer);
  free (ord);
  free (base);
  free (cur);
}

static size_t
fn_202 (struct struct_275 *files, size_t var_253, size_t var_277,
            FILE *ofp, char const *output_file)
{
  FILE **fps;
  size_t var_250 = open_input_files (files, var_277, &fps);
  if (var_250 < var_277 && var_250 < 2)
    die (_("open failed"), files[var_250].name);
  mergefps (files, var_253, var_250, ofp, output_file, fps);
  return var_250;
}







static void
fn_204 (struct struct_275 *restrict t, size_t var_241,
            struct struct_275 const *restrict var_221)
{
  size_t var_241 = var_241 / 2;
  size_t var_241 = var_241 - var_241;
  struct struct_275 *var_221 = t - var_241;

  while (true)
    if (compare (var_221 - 1, var_221 - 1) <= 0)
      {
        *--t = *--var_221;
        if (! --var_241)
          {


            return;
          }
      }
    else
      {
        *--t = *--var_221;
        if (! --var_241)
          {
            do
              *--t = *--var_221;
            while (--var_241);

            return;
          }
      }
}

static void
fn_208 (struct struct_275 *restrict var_241, size_t var_241,
                 struct struct_275 *restrict temp, bool var_212)
{
  if (var_241 == 2)
    {



      int var_212 = (0 < compare (&var_241[-1], &var_241[-2]));
      if (var_212)
        {
          temp[-1] = var_241[-1 - var_212];
          temp[-2] = var_241[-2 + var_212];
        }
      else if (var_212)
        {
          temp[-1] = var_241[-1];
          var_241[-1] = var_241[-2];
          var_241[-2] = temp[-1];
        }
    }
  else
    {
      size_t var_241 = var_241 / 2;
      size_t var_241 = var_241 - var_241;
      struct struct_275 *var_221 = var_241;
      struct struct_275 *var_221 = var_241 - var_241;

      sequential_sort (var_221, var_241, temp - (var_212 ? var_241 : 0), var_212);
      if (1 < var_241)
        sequential_sort (var_221, var_241, temp, !var_212);
      else if (!var_212)
        temp[-1] = var_221[-1];

      struct struct_275 *dest;
      struct struct_275 const *sorted_lo;
      if (var_212)
        {
          dest = temp;
          sorted_lo = var_241;
        }
      else
        {
          dest = var_241;
          sorted_lo = temp;
        }
      mergelines (dest, var_241, sorted_lo);
    }
}

static struct struct_277 *fn_217 (struct struct_277 *restrict,
                                     struct struct_277 *restrict,
                                     struct struct_275 *, size_t, size_t, bool);




static struct struct_277 *
fn_213 (size_t var_277, size_t var_241, struct struct_275 *dest)
{
  struct struct_277 *var_253 = xmalloc (2 * sizeof *var_253 * var_277);

  struct struct_277 *root = var_253;
  root->lo = root->hi = root->end_lo = root->end_hi = NULL;
  root->dest = NULL;
  root->nlo = root->nhi = var_241;
  root->parent = NULL;
  root->level = MERGE_END;
  root->queued = false;
  pthread_mutex_init (&root->lock, NULL);

  init_node (root, root + 1, dest, var_277, var_241, false);
  return var_253;
}


static void
fn_215 (size_t var_277, struct struct_277 *var_253)
{
  size_t var_217 = var_277 * 2;
  struct struct_277 *node = var_253;

  while (var_217--)
    {
      pthread_mutex_destroy (&node->lock);
      node++;
    }

  free (var_253);
}

static struct struct_277 *
fn_217 (struct struct_277 *restrict parent,
           struct struct_277 *restrict node_pool,
           struct struct_275 *dest, size_t var_277,
           size_t var_241, bool var_219)
{
  size_t var_241 = (var_219 ? parent->nlo : parent->nhi);
  size_t var_241 = var_241 / 2;
  size_t var_241 = var_241 - var_241;
  struct struct_275 *var_221 = dest - var_241;
  struct struct_275 *var_221 = var_221 - var_241;
  struct struct_275 **parent_end = (var_219 ? &parent->end_lo : &parent->end_hi);

  struct struct_277 *node = node_pool++;
  node->lo = node->end_lo = var_221;
  node->hi = node->end_hi = var_221;
  node->dest = parent_end;
  node->nlo = var_241;
  node->nhi = var_241;
  node->parent = parent;
  node->level = parent->level + 1;
  node->queued = false;
  pthread_mutex_init (&node->lock, NULL);

  if (var_277 > 1)
    {
      size_t var_241 = var_277 / 2;
      size_t var_241 = var_277 - var_241;
      node->lo_child = node_pool;
      node_pool = init_node (node, node_pool, var_221, var_241,
                             var_241, true);
      node->hi_child = node_pool;
      node_pool = init_node (node, node_pool, var_221, var_241,
                             var_241, false);
    }
  else
    {
      node->lo_child = NULL;
      node->hi_child = NULL;
    }
  return node_pool;
}




static int
fn_221 (void const *var_222, void const *var_222)
{
  struct struct_277 const *nodea = var_222;
  struct struct_277 const *nodeb = var_222;
  if (nodea->level == nodeb->level)
      return (nodea->nlo + nodea->nhi) < (nodeb->nlo + nodeb->nhi);
  return nodea->level < nodeb->level;
}



static inline void
fn_222 (struct struct_277 *node)
{
  pthread_mutex_lock (&node->lock);
}



static inline void
fn_223 (struct struct_277 *node)
{
  pthread_mutex_unlock (&node->lock);
}



static void
fn_224 (struct struct_253 *queue)
{
  heap_free (queue->priority_queue);
  pthread_cond_destroy (&queue->cond);
  pthread_mutex_destroy (&queue->mutex);
}




static void
fn_225 (struct struct_253 *queue, size_t var_277)
{



  queue->priority_queue = heap_alloc (compare_nodes, 2 * var_277);
  pthread_mutex_init (&queue->mutex, NULL);
  pthread_cond_init (&queue->cond, NULL);
}




static void
fn_226 (struct struct_253 *queue, struct struct_277 *node)
{
  pthread_mutex_lock (&queue->mutex);
  heap_insert (queue->priority_queue, node);
  node->queued = true;
  pthread_cond_signal (&queue->cond);
  pthread_mutex_unlock (&queue->mutex);
}



static struct struct_277 *
fn_227 (struct struct_253 *queue)
{
  struct struct_277 *node;
  pthread_mutex_lock (&queue->mutex);
  while (! (node = heap_remove_top (queue->priority_queue)))
    pthread_cond_wait (&queue->cond, &queue->mutex);
  pthread_mutex_unlock (&queue->mutex);
  lock_node (node);
  node->queued = false;
  return node;
}

static void
fn_228 (struct struct_275 const *line, FILE *tfp, char const *temp_output)
{
  if (unique)
    {
      if (saved_line.text && ! compare (line, &saved_line))
        return;
      saved_line = *line;
    }

  write_line (line, tfp, temp_output);
}

static void
fn_229 (struct struct_277 *restrict node, size_t var_241,
                 FILE *tfp, char const *temp_output)
{
  struct struct_275 *lo_orig = node->lo;
  struct struct_275 *hi_orig = node->hi;
  size_t var_231 = (((var_241) >> (2 * ((node->level) + 1))) + 1);
  size_t merged_lo;
  size_t merged_hi;

  if (node->level > MERGE_ROOT)
    {

      struct struct_275 *dest = *node->dest;
      while (node->lo != node->end_lo && node->hi != node->end_hi && var_231--)
        if (compare (node->lo - 1, node->hi - 1) <= 0)
          *--dest = *--node->lo;
        else
          *--dest = *--node->hi;

      merged_lo = lo_orig - node->lo;
      merged_hi = hi_orig - node->hi;

      if (node->nhi == merged_hi)
        while (node->lo != node->end_lo && var_231--)
          *--dest = *--node->lo;
      else if (node->nlo == merged_lo)
        while (node->hi != node->end_hi && var_231--)
          *--dest = *--node->hi;
      *node->dest = dest;
    }
  else
    {

      while (node->lo != node->end_lo && node->hi != node->end_hi && var_231--)
        {
          if (compare (node->lo - 1, node->hi - 1) <= 0)
            write_unique (--node->lo, tfp, temp_output);
          else
            write_unique (--node->hi, tfp, temp_output);
        }

      merged_lo = lo_orig - node->lo;
      merged_hi = hi_orig - node->hi;

      if (node->nhi == merged_hi)
        {
          while (node->lo != node->end_lo && var_231--)
            write_unique (--node->lo, tfp, temp_output);
        }
      else if (node->nlo == merged_lo)
        {
          while (node->hi != node->end_hi && var_231--)
            write_unique (--node->hi, tfp, temp_output);
        }
    }


  merged_lo = lo_orig - node->lo;
  merged_hi = hi_orig - node->hi;
  node->nlo -= merged_lo;
  node->nhi -= merged_hi;
}





static void
fn_231 (struct struct_253 *queue, struct struct_277 *node)
{
  if (! node->queued)
    {
      bool var_234 = (node->lo - node->end_lo) != 0;
      bool var_234 = (node->hi - node->end_hi) != 0;
      if (var_234 ? var_234 || ! node->nhi : var_234 && ! node->nlo)
        queue_insert (queue, node);
    }
}



static void
fn_234 (struct struct_253 *queue,
                           struct struct_277 *node)
{
  if (node->level > MERGE_ROOT)
    {
      lock_node (node->parent);
      queue_check_insert (queue, node->parent);
      unlock_node (node->parent);
    }
  else if (node->nlo + node->nhi == 0)
    {


      queue_insert (queue, node->parent);
    }
}







static void
fn_235 (struct struct_253 *queue,
            size_t var_241, FILE *tfp, char const *temp_output)
{
  while 1
    {
      struct struct_277 *node = queue_pop (queue);

      if (node->level == MERGE_END)
        {
          unlock_node (node);

          queue_insert (queue, node);
          break;
        }
      mergelines_node (node, var_241, tfp, temp_output);
      queue_check_insert (queue, node);
      queue_check_insert_parent (queue, node);

      unlock_node (node);
    }
}


static void fn_241 (struct struct_275 *restrict, size_t, size_t,
                       struct struct_277 *, struct struct_253 *,
                       FILE *, char const *);



struct struct_241
{


  struct struct_275 *lines;


  size_t nthreads;


  size_t const total_lines;



  struct struct_277 *const node;



  struct struct_253 *const queue;



  FILE *tfp;
  char const *output_temp;
};



static void *
fn_238 (void *var_241)
{
  struct struct_241 const *var_241 = var_241;
  sortlines (var_241->lines, var_241->nthreads, var_241->total_lines,
             var_241->node, var_241->queue, var_241->tfp,
             var_241->output_temp);
  return NULL;
}

static void
fn_241 (struct struct_275 *restrict var_241, size_t var_277,
           size_t var_241, struct struct_277 *node,
           struct struct_253 *queue, FILE *tfp, char const *temp_output)
{
  size_t var_241 = node->nlo + node->nhi;


  size_t var_241 = var_277 / 2;
  size_t var_241 = var_277 - var_241;
  pthread_t thread;
  struct struct_241 var_241 = {var_241, var_241, var_241,
                             node->lo_child, queue, tfp, temp_output};

  if (var_277 > 1 && SUBTHREAD_LINES_HEURISTIC <= var_241
      && pthread_create (&thread, NULL, sortlines_thread, &var_241) == 0)
    {
      sortlines (var_241 - node->nlo, var_241, var_241,
                 node->hi_child, queue, tfp, temp_output);
      pthread_join (thread, NULL);
    }
  else
    {


      size_t var_241 = node->nlo;
      size_t var_241 = node->nhi;
      struct struct_275 *temp = var_241 - var_241;
      if (1 < var_241)
        sequential_sort (var_241 - var_241, var_241, temp - var_241 / 2, false);
      if (1 < var_241)
        sequential_sort (var_241, var_241, temp, false);


      node->lo = var_241;
      node->hi = var_241 - var_241;
      node->end_lo = var_241 - var_241;
      node->end_hi = var_241 - var_241 - var_241;

      queue_insert (queue, node);
      merge_loop (queue, var_241, tfp, temp_output);
    }
}

static void
fn_241 (struct struct_275 *files, size_t var_253,
                      size_t var_277, char const *outfile)
{
  size_t i;
  bool var_244 = false;
  struct struct_244 outstat;
  struct struct_253 *tempcopy = NULL;

  for (i = var_253; i < var_277; i++)
    {
      bool var_244 = STREQ (files[i].name, "-");
      bool same;
      struct struct_244 instat;

      if (outfile && STREQ (outfile, files[i].name) && !var_244)
        same = true;
      else
        {
          if (! var_244)
            {
              if (fstat (STDOUT_FILENO, &outstat) != 0)
                break;
              var_244 = true;
            }

          same = (((var_244
                    ? fstat (STDIN_FILENO, &instat)
                    : stat (files[i].name, &instat))
                   == 0)
                  && SAME_INODE (instat, outstat));
        }

      if (same)
        {
          if (! tempcopy)
            {
              FILE *tftp;
              tempcopy = create_temp (&tftp);
              mergefiles (&files[i], 0, 1, tftp, tempcopy->name);
            }

          files[i].name = tempcopy->name;
          files[i].temp = tempcopy;
        }
    }
}

static void
fn_244 (char *const *files, size_t var_277)
{
  size_t i;
  for (i = 0; i < var_277; i++)
    {
      if (STREQ (files[i], "-"))
        continue;

      if (euidaccess (files[i], R_OK) != 0)
        die (_("cannot read"), files[i]);
    }
}





static void
fn_245 (char const *outfile)
{
  if (outfile)
    {
      int var_247 = open (outfile, O_WRONLY | O_CREAT | O_BINARY, MODE_RW_UGO);
      if (var_247 < 0)
        die (_("open failed"), outfile);
      move_fd_or_die (var_247, STDOUT_FILENO);
    }
}






static void
fn_247 (struct struct_275 *files, size_t var_253, size_t var_277,
       char const *output_file)
{
  while (var_275 < var_277)
    {

      size_t in;


      size_t out;



      size_t remainder;


      size_t cheap_slots;




      for (out = in = 0; var_275 <= var_277 - in; out++)
        {
          FILE *tfp;
          struct struct_253 *temp = create_temp (&tfp);
          size_t var_250 = mergefiles (&files[in], MIN (var_253, var_275),
                                          var_275, tfp, temp->name);
          var_253 -= MIN (var_253, var_250);
          files[out].name = temp->name;
          files[out].temp = temp;
          in += var_250;
        }

      remainder = var_277 - in;
      cheap_slots = var_275 - out % var_275;

      if (cheap_slots < remainder)
        {



          size_t var_250 = remainder - cheap_slots + 1;
          FILE *tfp;
          struct struct_253 *temp = create_temp (&tfp);
          size_t var_250 = mergefiles (&files[in], MIN (var_253, var_250),
                                          var_250, tfp, temp->name);
          var_253 -= MIN (var_253, var_250);
          files[out].name = temp->name;
          files[out++].temp = temp;
          in += var_250;
        }



      memmove (&files[out], &files[in], (var_277 - in) * sizeof *files);
      var_253 += out;
      var_277 -= in - out;
    }

  avoid_trashing_input (files, var_253, var_277, output_file);





  while (true)
    {

      FILE **fps;
      size_t var_250 = open_input_files (files, var_277, &fps);

      if (var_250 == var_277)
        {
          FILE *ofp = stream_open (output_file, "w");
          if (ofp)
            {
              mergefps (files, var_253, var_277, ofp, output_file, fps);
              break;
            }
          if (var_274 != EMFILE || var_250 <= 2)
            die (_("open failed"), output_file);
        }
      else if (var_250 <= 2)
        die (_("open failed"), files[var_250].name);






      FILE *tfp;
      struct struct_253 *temp;
      do
        {
          var_250--;
          xfclose (fps[var_250], files[var_250].name);
          temp = maybe_create_temp (&tfp, ! (var_250 <= 2));
        }
      while (!temp);


      mergefps (&files[0], MIN (var_253, var_250), var_250, tfp, temp->name,
                fps);
      var_253 -= MIN (var_253, var_250);
      files[0].name = temp->name;
      files[0].temp = temp;

      memmove (&files[1], &files[var_250], (var_277 - var_250) * sizeof *files);
      var_253++;
      var_277 -= var_250 - 1;
    }
}



static void
fn_250 (char *const *files, size_t var_277, char const *output_file,
      size_t var_277)
{
  struct struct_251 var_253;
  IF_LINT (var_253.buf = NULL);
  size_t var_253 = 0;
  bool var_253 = false;

  var_253.alloc = 0;

  while (var_277)
    {
      char const *temp_output;
      char const *file = *files;
      FILE *fp = xfopen (file, "r");
      FILE *tfp;

      size_t bytes_per_line;
      if (var_277 > 1)
        {

          size_t var_253 = 1;
          size_t var_253 = 1;
          while (var_253 < var_277)
            {
              var_253 *= 2;
              var_253++;
            }
          bytes_per_line = (var_253 * sizeof (struct struct_275));
        }
      else
        bytes_per_line = sizeof (struct struct_275) * 3 / 2;

      if (! var_253.alloc)
        initbuf (&var_253, bytes_per_line,
                 sort_buffer_size (&fp, 1, files, var_277, bytes_per_line));
      var_253.eof = false;
      files++;
      var_277--;

      while (fillbuf (&var_253, fp, file))
        {
          struct struct_275 *line;

          if (var_253.eof && var_277
              && (bytes_per_line + 1
                  < (var_253.alloc - var_253.used - bytes_per_line * var_253.nlines)))
            {



              var_253.left = var_253.used;
              break;
            }

          saved_line.text = NULL;
          line = buffer_linelim (&var_253);
          if (var_253.eof && !var_277 && !var_253 && !var_253.left)
            {
              xfclose (fp, file);
              tfp = xfopen (output_file, "w");
              temp_output = output_file;
              var_253 = true;
            }
          else
            {
              ++var_253;
              temp_output = create_temp (&tfp)->name;
            }
          if (1 < var_253.nlines)
            {
              struct struct_253 queue;
              queue_init (&queue, var_277);
              struct struct_277 *var_253 =
                merge_tree_init (var_277, var_253.nlines, line);

              sortlines (line, var_277, var_253.nlines, var_253 + 1,
                         &queue, tfp, temp_output);





            }
          else
            write_unique (line - 1, tfp, temp_output);

          xfclose (tfp, temp_output);

          if (var_253)
            goto finish;
        }
      xfclose (fp, file);
    }

 finish:
  free (var_253.buf);

  if (! var_253)
    {
      size_t i;
      struct struct_253 *node = var_253;
      struct struct_275 *tempfiles = xnmalloc (var_253, sizeof *tempfiles);
      for (i = 0; node; i++)
        {
          tempfiles[i].name = node->name;
          tempfiles[i].temp = node;
          node = node->next;
        }
      merge (tempfiles, var_253, var_253, output_file);
      free (tempfiles);
    }

  reap_all ();
}



static void
fn_253 (struct struct_265 *key_arg)
{
  struct struct_265 **p;
  struct struct_265 *key = xmemdup (key_arg, sizeof *key);

  for (p = &var_275; *p; p = &(*p)->next)
    continue;
  *p = key;
  key->next = NULL;
}



static void fn_255 (char const *, char const *)
     ATTRIBUTE_NORETURN;
static void
fn_255 (char const *spec, char const *msgid)
{
  error (SORT_FAILURE, 0, _("%s: invalid field specification %s"),
         _(msgid), quote (spec));
  abort ();
}



static void fn_256 (char const *) ATTRIBUTE_NORETURN;
static void
fn_256 (char const *opts)
{
  error (SORT_FAILURE, 0, _("options '-%s' are incompatible"), opts);
  abort ();
}



static void
fn_256 (void)
{
  struct struct_265 *key;

  for (key = var_275; key; key = key->next)
    if (1 < (key->numeric + key->general_numeric + key->human_numeric
             + key->month + (key->version | key->random | !!key->ignore)))
      {

        char opts[sizeof short_options];

        key->skipsblanks = key->skipeblanks = key->reverse = false;
        key_to_opts (key, opts);
        incompatible_options (opts);
      }
}







static char const *
fn_257 (char const *string, size_t *val, char const *msgid)
{
  char *suffix;
  uintmax_t n;

  switch (xstrtoumax (string, &suffix, 10, &n, ""))
    {
    case LONGINT_OK:
    case LONGINT_INVALID_SUFFIX_CHAR:
      *val = n;
      if (*val == n)
        break;

    case LONGINT_OVERFLOW:
    case LONGINT_OVERFLOW | LONGINT_INVALID_SUFFIX_CHAR:
      *val = var_277;
      break;

    case LONGINT_INVALID:
      if (msgid)
        error (SORT_FAILURE, 0, _("%s: invalid count at start of %s"),
               _(msgid), quote (string));
      return NULL;
    }

  return suffix;
}



static void
fn_258 (int var_272)
{
  if (! 0)
    signal (var_272, SIG_IGN);

  cleanup ();

  signal (var_272, SIG_DFL);
  raise (var_272);
}






static char *
fn_260 (char const *s, struct struct_265 *key, enum enumtype_261 var_262)
{
  while (*s)
    {
      switch (*s)
        {
        case 'b':
          if (var_262 == bl_start || var_262 == bl_both)
            key->skipsblanks = true;
          if (var_262 == bl_end || var_262 == bl_both)
            key->skipeblanks = true;
          break;
        case 'd':
          key->ignore = nondictionary;
          break;
        case 'f':
          key->translate = fold_toupper;
          folding = true;
          break;
        case 'g':
          key->general_numeric = true;
          break;
        case 'h':
          key->human_numeric = true;
          break;
        case 'i':


          if (! key->ignore)
            key->ignore = nonprinting;
          break;
        case 'M':
          key->month = true;
          break;
        case 'n':
          key->numeric = true;
          break;
        case 'R':
          key->random = true;
          break;
        case 'r':
          key->reverse = true;
          break;
        case 'V':
          key->version = true;
          break;
        default:
          return (char *) s;
        }
      ++s;
    }
  return (char *) s;
}



static struct struct_265 *
fn_262 (struct struct_265 *key)
{
  memset (key, 0, sizeof *key);
  key->eword = var_277;
  return key;
}

int
fn_263 (int var_273, char **argv)
{
  struct struct_265 *key;
  struct struct_265 key_buf;
  struct struct_265 gkey;
  bool var_275 = false;
  char const *s;
  int var_274 = 0;
  char var_275 = 0;
  bool var_275 = false;
  char *random_source = NULL;
  bool var_275 = false;
  size_t var_277 = 0;
  size_t var_277 = 0;
  bool var_273 = (getenv ("POSIXLY_CORRECT") != NULL);
  bool var_273 = (posix2_version () < 200112);
  char **files;
  char *files_from = NULL;
  struct struct_269 tok;
  char const *outfile = NULL;

  initialize_main (&var_273, &argv);
  set_program_name (argv[0]);
  setlocale (LC_ALL, "");
  bindtextdomain (PACKAGE, LOCALEDIR);
  textdomain (PACKAGE);

  initialize_exit_failure (SORT_FAILURE);

  hard_LC_COLLATE = hard_locale (LC_COLLATE);





  {
    struct struct_270 const *locale = localeconv ();




    decimal_point = to_uchar (locale->decimal_point[0]);
    if (! decimal_point || locale->decimal_point[1])
      decimal_point = '.';


    thousands_sep = to_uchar (*locale->thousands_sep);
    if (! thousands_sep || locale->thousands_sep[1])
      thousands_sep = -1;
  }

    {
      inittables = inittables_uni;
      begfield = begfield_uni;
      limfield = limfield_uni;
      skipblanks = skipblanks_uni;
      getmonth = getmonth_uni;
      keycompare = keycompare_uni;
      numcompare = numcompare_uni;
    }

  have_read_stdin = false;
  inittables ();

  {
    size_t i;
    static int const var_272[] =
      {

        SIGALRM, SIGHUP, SIGINT, SIGPIPE, SIGQUIT, SIGTERM,

      };
    enum { enum_271 = ARRAY_CARDINALITY (var_272) };

    for (i = 0; i < nsigs; i++)
      if (signal (var_272[i], SIG_IGN) != SIG_IGN)
        {
          signal (var_272[i], sighandler);
                                  ;
        }

  }
  signal (SIGCHLD, SIG_DFL);


  atexit (exit_cleanup);

  key_init (&gkey);
  gkey.sword = var_277;

  files = xnmalloc (var_273, sizeof *files);

  while (true)
    {




      int var_274 = -1;

      if (var_274 == -1
          || (var_273 && var_277 != 0
              && ! (var_273
                    && ! var_275
                    && optind != var_273
                    && argv[optind][0] == '-' && argv[optind][1] == 'o'
                    && (argv[optind][2] || optind + 1 != var_273)))
          || ((var_274 = getopt_long (var_273, argv, short_options,
                                long_options, &var_274))
              == -1))
        {
          if (var_273 <= optind)
            break;
          files[var_277++] = argv[optind++];
        }
      else switch (var_274)
        {
        case 1:
          key = NULL;
          if (optarg[0] == '+')
            {
              bool var_273 = (optind != var_273 && argv[optind][0] == '-'
                                      && ISDIGIT (argv[optind][1]));
              var_273 |= var_273 && !var_273;
              if (var_273)
                {


                  key = key_init (&key_buf);
                  s = parse_field_count (optarg + 1, &key->sword, NULL);
                  if (s && *s == '.')
                    s = parse_field_count (s + 1, &key->schar, NULL);
                  if (! (key->sword || key->schar))
                    key->sword = var_277;
                  if (! s || *set_ordering (s, key, bl_start))
                    key = NULL;
                  else
                    {
                      if (var_273)
                        {
                          char const *optarg1 = argv[optind++];
                          s = parse_field_count (optarg1 + 1, &key->eword,
                                             N_("invalid number after '-'"));



                          assert (s);
                          if (*s == '.')
                            s = parse_field_count (s + 1, &key->echar,
                                               N_("invalid number after '.'"));
                          if (!key->echar && key->eword)
                            {






                              key->eword--;
                            }
                          if (*set_ordering (s, key, bl_end))
                            badfieldspec (optarg1,
                                      N_("stray character in field spec"));
                        }
                      key->obsolete_used = true;
                      insertkey (key);
                    }
                }
            }
          if (! key)
            files[var_277++] = optarg;
          break;

        case SORT_OPTION:
          var_274 = XARGMATCH ("--sort", optarg, sort_args, sort_types);

        case 'b':
        case 'd':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'M':
        case 'n':
        case 'r':
        case 'R':
        case 'V':
          {
            char str[2];
            str[0] = var_274;
            str[1] = '\0';
            set_ordering (str, &gkey, bl_both);
          }
          break;

        case CHECK_OPTION:
          var_274 = (optarg
               ? XARGMATCH ("--check", optarg, check_args, check_types)
               : 'c');

        case 'c':
        case 'C':
          if (var_275 && var_275 != var_274)
            incompatible_options ("cC");
          var_275 = var_274;
          break;

        case COMPRESS_PROGRAM_OPTION:
          if (compress_program && !STREQ (compress_program, optarg))
            error (SORT_FAILURE, 0, _("multiple compress programs specified"));
          compress_program = optarg;
          break;

        case DEBUG_PROGRAM_OPTION:
          debug = true;
          break;

        case FILES0_FROM_OPTION:
          files_from = optarg;
          break;

        case 'k':
          key = key_init (&key_buf);


          s = parse_field_count (optarg, &key->sword,
                                 N_("invalid number at field start"));
          if (! key->sword--)
            {

              badfieldspec (optarg, N_("field number is zero"));
            }
          if (*s == '.')
            {
              s = parse_field_count (s + 1, &key->schar,
                                     N_("invalid number after '.'"));
              if (! key->schar--)
                {

                  badfieldspec (optarg, N_("character offset is zero"));
                }
            }
          if (! (key->sword || key->schar))
            key->sword = var_277;
          s = set_ordering (s, key, bl_start);
          if (*s != ',')
            {
              key->eword = var_277;
              key->echar = 0;
            }
          else
            {

              s = parse_field_count (s + 1, &key->eword,
                                     N_("invalid number after ','"));
              if (! key->eword--)
                {

                  badfieldspec (optarg, N_("field number is zero"));
                }
              if (*s == '.')
                {
                  s = parse_field_count (s + 1, &key->echar,
                                         N_("invalid number after '.'"));
                }
              s = set_ordering (s, key, bl_end);
            }
          if (*s)
            badfieldspec (optarg, N_("stray character in field spec"));
          insertkey (key);
          break;

        case 'm':
          var_275 = true;
          break;

        case NMERGE_OPTION:
          specify_nmerge (var_274, var_274, optarg);
          break;

        case 'o':
          if (outfile && !STREQ (outfile, optarg))
            error (SORT_FAILURE, 0, _("multiple output files specified"));
          outfile = optarg;
          break;

        case RANDOM_SOURCE_OPTION:
          if (random_source && !STREQ (random_source, optarg))
            error (SORT_FAILURE, 0, _("multiple random sources specified"));
          random_source = optarg;
          break;

        case 's':
          stable = true;
          break;

        case 'S':
          specify_sort_size (var_274, var_274, optarg);
          break;

        case 't':
          {
            char newtab[MB_LEN_MAX + 1];
            size_t var_274 = 1;
            strncpy (newtab, optarg, MB_LEN_MAX);
            if (! newtab[0])
              error (SORT_FAILURE, 0, _("empty tab"));

            if (var_274 == 1 && optarg[1])
              {
                if (STREQ (optarg, "\\0"))
                  newtab[0] = '\0';
                else
                  {




                    error (SORT_FAILURE, 0, _("multi-character tab %s"),
                           quote (optarg));
                  }
              }
            if (var_274
                && (var_274 != var_274
                    || memcmp (tab, newtab, var_274) != 0))
              error (SORT_FAILURE, 0, _("incompatible tabs"));
            memcpy (tab, newtab, var_274);
            var_274 = var_274;
          }
          break;

        case 'T':
          add_temp_dir (optarg);
          break;

        case PARALLEL_OPTION:
          var_277 = specify_nthreads (var_274, var_274, optarg);
          break;

        case 'u':
          unique = true;
          break;

        case 'y':

          if (optarg == argv[optind - 1])
            {
              char const *p;
              for (p = optarg; ISDIGIT (*p); p++)
                continue;
              optind -= (*p != '\0');
            }
          break;

        case 'z':
          var_274 = 0;
          break;

        case_GETOPT_HELP_CHAR;

        case_GETOPT_VERSION_CHAR ("sort", proper_name ("Mike Haertel"), proper_name ("Paul Eggert"));

        default:
          usage (SORT_FAILURE);
        }
    }

  if (files_from)
    {
      FILE *stream;



      if (var_277)
        {
          error (0, 0, _("extra operand %s"), quote (files[0]));
          fprintf (stderr, "%s\n",
                   _("file operands cannot be combined with --files0-from"));
          usage (SORT_FAILURE);
        }

      if (STREQ (files_from, "-"))
        stream = stdin;
      else
        {
          stream = fopen (files_from, "r");
          if (stream == NULL)
            error (SORT_FAILURE, var_274, _("cannot open %s for reading"),
                   quote (files_from));
        }

      readtokens0_init (&tok);

      if (! readtokens0 (stream, &tok) || fclose (stream) != 0)
        error (SORT_FAILURE, 0, _("cannot read file names from %s"),
               quote (files_from));

      if (tok.n_tok)
        {
          size_t i;
          free (files);
          files = tok.tok;
          var_277 = tok.n_tok;
          for (i = 0; i < var_277; i++)
            {
              if (STREQ (files[i], "-"))
                error (SORT_FAILURE, 0, _("when reading file names from stdin, "
                                          "no file name of %s allowed"),
                       quote (files[i]));
              else if (files[i][0] == '\0')
                {



                  unsigned long int var_275 = i + 1;
                  error (SORT_FAILURE, 0,
                         _("%s:%lu: invalid zero-length file name"),
                         quotearg_colon (files_from), var_275);
                }
            }
        }
      else
        error (SORT_FAILURE, 0, _("no input from %s"),
               quote (files_from));
    }


  for (key = var_275; key; key = key->next)
    {
      if (default_key_compare (key) && !key->reverse)
        {
          key->ignore = gkey.ignore;
          key->translate = gkey.translate;
          key->skipsblanks = gkey.skipsblanks;
          key->skipeblanks = gkey.skipeblanks;
          key->month = gkey.month;
          key->numeric = gkey.numeric;
          key->general_numeric = gkey.general_numeric;
          key->human_numeric = gkey.human_numeric;
          key->version = gkey.version;
          key->random = gkey.random;
          key->reverse = gkey.reverse;
        }

      var_275 |= key->random;
    }

  if (!var_275 && !default_key_compare (&gkey))
    {
      var_275 = true;
      insertkey (&gkey);
      var_275 |= gkey.random;
    }

  check_ordering_compatibility ();

  if (debug)
    {
      if (var_275 || outfile)
        {
          static char opts[] = "X --debug";
          opts[0] = (var_275 ? var_275 : 'o');
          incompatible_options (opts);
        }



      if (hard_LC_COLLATE)
        error (0, 0, _("using %s sorting rules"),
               quote (setlocale (LC_COLLATE, NULL)));
      else
        error (0, 0, _("using simple byte comparison"));
      key_warnings (&gkey, var_275);
    }

  reverse = gkey.reverse;

  if (var_275)
    random_md5_state_init (random_source);

  if (temp_dir_count == 0)
    {
      char const *tmp_dir = getenv ("TMPDIR");
      add_temp_dir (tmp_dir ? tmp_dir : "/tmp");
    }

  if (var_277 == 0)
    {
      static char *minus = (char *) "-";
      var_277 = 1;
      free (files);
      files = &minus;
    }



  if (0 < sort_size)
    sort_size = MAX (sort_size, (var_275 * (2 + sizeof (struct struct_275))));

  if (var_275)
    {
      if (var_277 > 1)
        error (SORT_FAILURE, 0, _("extra operand %s not allowed with -%c"),
               quote (files[1]), var_275);

      if (outfile)
        {
          static char opts[] = {0, 'o', 0};
          opts[0] = var_275;
          incompatible_options (opts);
        }



      exit (check (files[0], var_275) ? EXIT_SUCCESS : SORT_OUT_OF_ORDER);
    }


  check_inputs (files, var_277);


  check_output (outfile);

  if (var_275)
    {
      struct struct_275 *sortfiles = xcalloc (var_277, sizeof *sortfiles);
      size_t i;

      for (i = 0; i < var_277; ++i)
        sortfiles[i].name = files[i];

      merge (sortfiles, 0, var_277, outfile);
      IF_LINT (free (sortfiles));
    }
  else
    {
      if (!var_277)
        {
          unsigned long int var_276 = num_processors (NPROC_CURRENT_OVERRIDABLE);
          var_277 = MIN (var_276, DEFAULT_MAX_THREADS);
        }


      size_t var_277 = var_277 / (2 * sizeof (struct struct_277));
      var_277 = MIN (var_277, var_277);

      sort (files, var_277, outfile, var_277);
    }

  if (have_read_stdin && fclose (stdin) == EOF)
    die (_("close failed"), "-");

  exit (EXIT_SUCCESS);
}
