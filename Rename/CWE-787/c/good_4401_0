







const unsigned char PinDomainID[3] = {0x53, 0x43, 0x4D};

static int fn_42(struct struct_50 *, unsigned, unsigned);
static int fn_39(struct struct_50 *, unsigned, unsigned);
static int fn_41(struct struct_50 *, unsigned);
static int fn_43(struct struct_50 *, unsigned, unsigned, int);

static int fn_33 (struct struct_50 *, unsigned char *, size_t, int);
static int fn_35 (struct struct_50 *, unsigned char *, size_t, int);
static int fn_35 (struct struct_50 *, unsigned char *, size_t, int);
static int fn_37 (struct struct_50 *, unsigned char *, size_t, int);

static int fn_50(struct struct_50 *, struct struct_50 *);
static void fn_50(struct struct_50 *);

struct struct_43 {
 unsigned id_pub;
 unsigned id_prv;
 unsigned id_cert;
};

struct struct_35 {
 char uuid[37];
 struct struct_43 exchange;
 struct struct_43 sign;

 struct struct_35 *next;
 struct struct_35 *prev;
};

struct struct_35 *Containers = NULL;

static struct {
 const char *name;
 const char *path;
 unsigned char *content;
 size_t len;
 int (*parser)(struct struct_50 *, unsigned char *, size_t, int);
 int postpone_allowed;
} oberthur_infos[] = {

 { "Token info", "3F0050111000", NULL, 0, sc_oberthur_parse_tokeninfo, 0},
 { "Containers MS", "3F0050113000", NULL, 0, sc_oberthur_parse_containers, 0},
 { "Public objects list", "3F0050114000", NULL, 0, sc_oberthur_parse_publicinfo, 0},
 { "Private objects list", "3F0050115000", NULL, 0, sc_oberthur_parse_privateinfo, 1},
 { NULL, NULL, NULL, 0, NULL, 0}
};


static unsigned
fn_14(unsigned var_45)
{
 unsigned var_17 = 0;

 if (var_45 & 0x0008)
  var_17 |= SC_PKCS15_PRKEY_USAGE_ENCRYPT;
 if (var_45 & 0x0010)
  var_17 |= SC_PKCS15_PRKEY_USAGE_DECRYPT;
 if (var_45 & 0x0020)
  var_17 |= SC_PKCS15_PRKEY_USAGE_SIGN;
 if (var_45 & 0x0080)
  var_17 |= SC_PKCS15_PRKEY_USAGE_SIGNRECOVER;
 if (var_45 & 0x0200)
  var_17 |= SC_PKCS15_PRKEY_USAGE_WRAP;
 if (var_45 & 0x0400)
  var_17 |= SC_PKCS15_PRKEY_USAGE_UNWRAP;
 if (var_45 & 0x0040)
  var_17 |= SC_PKCS15_PRKEY_USAGE_VERIFY;
 if (var_45 & 0x0100)
  var_17 |= SC_PKCS15_PRKEY_USAGE_VERIFYRECOVER;
 if (var_45 & 0x0800)
  var_17 |= SC_PKCS15_PRKEY_USAGE_DERIVE;
 return var_17;
}


static int
fn_17 (unsigned int var_43, struct struct_43 *ccont)
{
 struct struct_35 *cont;

 for (cont = Containers; cont; cont = cont->next) {
  if (cont->exchange.id_pub == var_43 || cont->exchange.id_prv == var_43 || cont->exchange.id_cert == var_43) {
   if (ccont)
    memcpy(ccont, &cont->exchange, sizeof(struct struct_43));
   break;
  }

  if (cont->sign.id_pub == var_43 || cont->sign.id_prv == var_43 || cont->sign.id_cert == var_43) {
   if (ccont)
    memcpy(ccont, &cont->sign, sizeof(struct struct_43));
   break;
  }
 }

 return cont ? 0 : SC_ERROR_TEMPLATE_NOT_FOUND;
}


static int
fn_19(struct struct_20 *der, int *out_authority)
{

 return SC_ERROR_NOT_SUPPORTED;

}


static int
fn_21(struct struct_50 *p15card, const char *in_path,
  unsigned char **out, size_t *out_len,
  int var_30)
{
 struct struct_50 *ctx = p15card->card->ctx;
 struct struct_48 *card = p15card->card;
 struct struct_25 *file = NULL;
 struct struct_46 var_47;
 size_t sz;
 int rv;

 LOG_FUNC_CALLED(ctx);
 if (!in_path || !out || !out_len)
  LOG_TEST_RET(ctx, SC_ERROR_INVALID_ARGUMENTS, "Cannot read oberthur file");

 sc_log(ctx, "read file '%s'; verify_pin:%i", in_path, var_30);

 *out = NULL;
 *out_len = 0;

 sc_format_path(in_path, &var_47);
 rv = sc_select_file(card, &var_47, &file);
 if (rv != SC_SUCCESS) {
  sc_file_free(file);
  LOG_TEST_RET(ctx, rv, "Cannot select oberthur file to read");
 }

 if (file->ef_structure == SC_FILE_EF_TRANSPARENT)
  sz = file->size;
 else
  sz = (file->record_length + 2) * file->record_count;

 *out = calloc(sz, 1);
 if (*out == NULL) {
  sc_file_free(file);
  LOG_TEST_RET(ctx, SC_ERROR_OUT_OF_MEMORY, "Cannot read oberthur file");
 }

 if (file->ef_structure == SC_FILE_EF_TRANSPARENT) {
  rv = sc_read_binary(card, 0, *out, sz, 0);
 }
 else {
  size_t rec;
  size_t var_45 = 0;
  size_t var_30 = file->record_length;

  for (rec = 1; ; rec++) {
   if (rec > file->record_count) {
    rv = 0;
    break;
   }
   rv = sc_read_record(card, rec, *out + var_45 + 2, var_30, SC_RECORD_BY_REC_NR);
   if (rv == SC_ERROR_RECORD_NOT_FOUND) {
    rv = 0;
    break;
   }
   else if (rv < 0) {
    break;
   }

   var_30 = rv;

   *(*out + var_45) = 'R';
   *(*out + var_45 + 1) = rv;

   var_45 += rv + 2;
  }

  sz = var_45;
 }

 sc_log(ctx, "read oberthur file result %i", rv);
 if (var_30 && rv == SC_ERROR_SECURITY_STATUS_NOT_SATISFIED) {
  struct struct_46 *objs[0x10], *pin_obj = NULL;
  const struct struct_31 *acl = sc_file_get_acl_entry(file, SC_AC_OP_READ);
  int ii;

  rv = sc_pkcs15_get_objects(p15card, SC_PKCS15_TYPE_AUTH_PIN, objs, 0x10);
  if (rv != SC_SUCCESS) {
   sc_file_free(file);
   LOG_TEST_RET(ctx, rv, "Cannot read oberthur file: get AUTH objects error");
  }

  for (ii=0; ii<rv; ii++) {
   struct struct_46 *auth_info = (struct struct_46 *) objs[ii]->data;
   sc_log(ctx, "compare PIN/ACL refs:%i/%i, method:%i/%i",
     auth_info->attrs.pin.reference, acl->key_ref, auth_info->auth_method, acl->method);
   if (auth_info->attrs.pin.reference == (int)acl->key_ref && auth_info->auth_method == (unsigned)acl->method) {
    pin_obj = objs[ii];
    break;
   }
  }

  if (!pin_obj || !pin_obj->content.value) {
   rv = SC_ERROR_SECURITY_STATUS_NOT_SATISFIED;
  }
  else {
   rv = sc_pkcs15_verify_pin(p15card, pin_obj, pin_obj->content.value, pin_obj->content.len);
   if (!rv)
    rv = sc_oberthur_read_file(p15card, in_path, out, out_len, 0);
  }
 };

 sc_file_free(file);

 if (rv < 0) {
  free(*out);
  *out = NULL;
  *out_len = 0;
 }

 *out_len = sz;

 LOG_FUNC_RETURN(ctx, rv);
}


static int
fn_33 (struct struct_50 *p15card,
  unsigned char *buff, size_t var_43, int var_39)
{
 struct struct_50 *ctx = p15card->card->ctx;
 char label[0x21];
 unsigned var_45;
 int ii;

 LOG_FUNC_CALLED(ctx);
 if (!buff || var_43 < 0x24)
  LOG_TEST_RET(ctx, SC_ERROR_INVALID_ARGUMENTS, "Cannot parse token info");

 memset(label, 0, sizeof(label));

 memcpy(label, buff, 0x20);
 ii = 0x20;
 while (*(label + --ii)==' ' && ii)
  ;
 *(label + ii + 1) = '\0';

 var_45 = *(buff + 0x22) * 0x100 + *(buff + 0x23);

 set_string(&p15card->tokeninfo->label, label);
 set_string(&p15card->tokeninfo->manufacturer_id, "Oberthur/OpenSC");

 if (var_45 & 0x01)
  p15card->tokeninfo->flags |= SC_PKCS15_TOKEN_PRN_GENERATION;

 sc_log(ctx, "label %s", p15card->tokeninfo->label);
 sc_log(ctx, "manufacturer_id %s", p15card->tokeninfo->manufacturer_id);

 LOG_FUNC_RETURN(ctx, SC_SUCCESS);
}


static int
fn_35 (struct struct_50 *p15card,
  unsigned char *buff, size_t var_43, int var_39)
{
 struct struct_50 *ctx = p15card->card->ctx;
 size_t var_45;

 LOG_FUNC_CALLED(ctx);

 while (Containers) {
  struct struct_35 *next = Containers->next;

  free (Containers);
  Containers = next;
 }

 for (var_45=0; var_45 < var_43;) {
  struct struct_35 *cont;
  unsigned char *ptr = buff + var_45 + 2;

  sc_log(ctx,
         "parse contaniers offs:%"SC_FORMAT_LEN_SIZE_T"u, len:%"SC_FORMAT_LEN_SIZE_T"u",
         var_45, var_43);
  if (*(buff + var_45) != 'R')
   return SC_ERROR_INVALID_DATA;

  cont = (struct struct_35 *)calloc(sizeof(struct struct_35), 1);
  if (!cont)
   return SC_ERROR_OUT_OF_MEMORY;

  cont->exchange.id_pub = *ptr * 0x100 + *(ptr + 1); ptr += 2;
  cont->exchange.id_prv = *ptr * 0x100 + *(ptr + 1); ptr += 2;
  cont->exchange.id_cert = *ptr * 0x100 + *(ptr + 1); ptr += 2;

  cont->sign.id_pub = *ptr * 0x100 + *(ptr + 1); ptr += 2;
  cont->sign.id_prv = *ptr * 0x100 + *(ptr + 1); ptr += 2;
  cont->sign.id_cert = *ptr * 0x100 + *(ptr + 1); ptr += 2;

  memcpy(cont->uuid, ptr + 2, 36);
  sc_log(ctx, "UUID: %s; 0x%X, 0x%X, 0x%X", cont->uuid,
    cont->exchange.id_pub, cont->exchange.id_prv, cont->exchange.id_cert);

  if (!Containers) {
   Containers = cont;
  }
  else {
   cont->next = Containers;
   Containers->prev = (void *)cont;
   Containers = cont;
  }

  var_45 += *(buff + var_45 + 1) + 2;
 }

 LOG_FUNC_RETURN(ctx, SC_SUCCESS);
}


static int
fn_35 (struct struct_50 *p15card,
  unsigned char *buff, size_t var_43, int var_39)
{
 struct struct_50 *ctx = p15card->card->ctx;
 size_t ii;
 int rv;

 LOG_FUNC_CALLED(ctx);
 for (ii=0; ii<var_43; ii+=5) {
  unsigned int var_45, var_45;

  if(*(buff+ii) != 0xFF)
   continue;

  var_45 = 0x100 * *(buff+ii + 1) + *(buff+ii + 2);
  var_45 = 0x100 * *(buff+ii + 3) + *(buff+ii + 4);
  sc_log(ctx, "add public object(file-id:%04X,size:%X)", var_45, var_45);

  switch (*(buff+ii + 1)) {
  case 0x10 :
   rv = sc_pkcs15emu_oberthur_add_pubkey(p15card, var_45, var_45);
   LOG_TEST_RET(ctx, rv, "Cannot parse public key info");
   break;
  case 0x20 :
   rv = sc_pkcs15emu_oberthur_add_cert(p15card, var_45);
   LOG_TEST_RET(ctx, rv, "Cannot parse certificate info");
   break;
  case 0x70 :
   break;
  case 0x50 :
   rv = sc_pkcs15emu_oberthur_add_data(p15card, var_45, var_45, 0);
   LOG_TEST_RET(ctx, rv, "Cannot parse data info");
   break;
  default:
   LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Public object parse error");
  }
 }

 LOG_FUNC_RETURN(ctx, SC_SUCCESS);
}


static int
fn_37 (struct struct_50 *p15card,
  unsigned char *buff, size_t var_43, int var_39)
{
 struct struct_50 *ctx = p15card->card->ctx;
 size_t ii;
 int rv;
 int var_39 = 0, var_39 = 0;

 LOG_FUNC_CALLED(ctx);

 for (ii=0; ii<var_43; ii+=5) {
  unsigned int var_45, var_45;

  if(*(buff+ii) != 0xFF)
   continue;

  var_45 = 0x100 * *(buff+ii + 1) + *(buff+ii + 2);
  var_45 = 0x100 * *(buff+ii + 3) + *(buff+ii + 4);
  sc_log(ctx, "add private object (file-id:%04X, size:%X)", var_45, var_45);

  switch (*(buff+ii + 1)) {
  case 0x30 :
   if (var_39)
    break;

   rv = sc_pkcs15emu_oberthur_add_prvkey(p15card, var_45, var_45);
   if (rv == SC_ERROR_SECURITY_STATUS_NOT_SATISFIED && var_39) {
    struct struct_46 var_47;

    sc_log(ctx, "postpone adding of the private keys");
    sc_format_path("5011A5A5", &var_47);
    rv = sc_pkcs15_add_df(p15card, SC_PKCS15_PRKDF, &var_47);
    LOG_TEST_RET(ctx, rv, "Add PrkDF error");
    var_39 = 1;
   }
   LOG_TEST_RET(ctx, rv, "Cannot parse private key info");
   break;
  case 0x40 :
   break;
  case 0x60 :
   sc_log(ctx, "*(buff+ii + 1):%X", *(buff+ii + 1));
   if (var_39)
    break;

   rv = sc_pkcs15emu_oberthur_add_data(p15card, var_45, var_45, 1);
   if (rv == SC_ERROR_SECURITY_STATUS_NOT_SATISFIED && var_39) {
    struct struct_46 var_47;

    sc_log(ctx, "postpone adding of the private data");
    sc_format_path("5011A6A6", &var_47);
    rv = sc_pkcs15_add_df(p15card, SC_PKCS15_DODF, &var_47);
    LOG_TEST_RET(ctx, rv, "Add DODF error");
    var_39 = 1;
   }
   LOG_TEST_RET(ctx, rv, "Cannot parse private data info");
   break;
  default:
   LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Private object parse error");
  }
 }

 LOG_FUNC_RETURN(ctx, SC_SUCCESS);
}

static int
fn_39(struct struct_50 *p15card,
  unsigned int var_45, unsigned int var_45)
{
 struct struct_50 *ctx = p15card->card->ctx;
 struct struct_39 key_info;
 struct struct_46 key_obj;
 char ch_tmp[0x100];
 unsigned char *info_blob;
 size_t var_43, var_45, var_45;
 unsigned var_45;
 int rv;

 LOG_FUNC_CALLED(ctx);
 sc_log(ctx, "public key(file-id:%04X,size:%X)", var_45, var_45);

 memset(&key_info, 0, sizeof(key_info));
 memset(&key_obj, 0, sizeof(key_obj));

 snprintf(ch_tmp, sizeof(ch_tmp), "%s%04X", "3F0050119001", var_45 | 0x100);
 rv = sc_oberthur_read_file(p15card, ch_tmp, &info_blob, &var_45, 1);
 LOG_TEST_RET(ctx, rv, "Failed to add public key: read oberthur file error");


 var_45 = 2;
 if (var_45 > var_45)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add public key: no 'tag'");
 var_45 = *(info_blob + 0) * 0x100 + *(info_blob + 1);
 key_info.usage = sc_oberthur_decode_usage(var_45);
 if (var_45 & 0x0001)
  key_obj.flags = SC_PKCS15_CO_FLAG_MODIFIABLE;
 sc_log(ctx, "Public key key-usage:%04X", key_info.usage);


 if (var_45 + 2 > var_45)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add public key: no 'Label'");
 var_43 = *(info_blob + var_45 + 1) + *(info_blob + var_45) * 0x100;
 if (var_43) {
  if (var_43 > sizeof(key_obj.label) - 1)
   var_43 = sizeof(key_obj.label) - 1;
  memcpy(key_obj.label, info_blob + var_45 + 2, var_43);
 }
 var_45 += 2 + var_43;


 if (var_45 > var_45)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add public key: no 'ID'");
 var_43 = *(info_blob + var_45 + 1) + *(info_blob + var_45) * 0x100;
 if (!var_43 || var_43 > sizeof(key_info.id.value))
  LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "Failed to add public key: invalid 'ID' length");
 memcpy(key_info.id.value, info_blob + var_45 + 2, var_43);
 key_info.id.len = var_43;



 snprintf(ch_tmp, sizeof(ch_tmp), "%s%04X", "3F0050119001", var_45);
 sc_format_path(ch_tmp, &key_info.path);

 key_info.native = 1;
 key_info.key_reference = var_45 & 0xFF;
 key_info.modulus_length = var_45;

 rv = sc_pkcs15emu_add_rsa_pubkey(p15card, &key_obj, &key_info);

 LOG_FUNC_RETURN(ctx, rv);
}

static int
fn_41(struct struct_50 *p15card, unsigned int var_45)
{
 struct struct_50 *ctx = p15card->card->ctx;
 struct struct_43 cinfo;
 struct struct_46 cobj;
 unsigned char *info_blob, *cert_blob;
 size_t var_45, cert_len, var_43, var_45;
 unsigned var_45;
 int rv;
 char ch_tmp[0x20];

 LOG_FUNC_CALLED(ctx);
 sc_log(ctx, "add certificate(file-id:%04X)", var_45);

 memset(&cinfo, 0, sizeof(cinfo));
 memset(&cobj, 0, sizeof(cobj));

 snprintf(ch_tmp, sizeof(ch_tmp), "%s%04X", "3F0050119001", var_45 | 0x100);
 rv = sc_oberthur_read_file(p15card, ch_tmp, &info_blob, &var_45, 1);
 LOG_TEST_RET(ctx, rv, "Failed to add certificate: read oberthur file error");

 if (var_45 < 2)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add certificate: no 'tag'");
 var_45 = *(info_blob + 0) * 0x100 + *(info_blob + 1);
 var_45 = 2;


 if (var_45 + 2 > var_45)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add certificate: no 'CN'");
 var_43 = *(info_blob + var_45 + 1) + *(info_blob + var_45) * 0x100;
 if (var_43) {
  if (var_43 > sizeof(cobj.label) - 1)
   var_43 = sizeof(cobj.label) - 1;
  memcpy(cobj.label, info_blob + var_45 + 2, var_43);
 }
 var_45 += 2 + var_43;


 if (var_45 > var_45)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add certificate: no 'ID'");
 var_43 = *(info_blob + var_45 + 1) + *(info_blob + var_45) * 0x100;
 if (var_43 > sizeof(cinfo.id.value))
  LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "Failed to add certificate: invalid 'ID' length");
 memcpy(cinfo.id.value, info_blob + var_45 + 2, var_43);
 cinfo.id.len = var_43;



 snprintf(ch_tmp, sizeof(ch_tmp), "%s%04X", "3F0050119001", var_45);
 sc_format_path(ch_tmp, &cinfo.path);
 rv = sc_oberthur_read_file(p15card, ch_tmp, &cert_blob, &cert_len, 1);
 LOG_TEST_RET(ctx, rv, "Failed to add certificate: read certificate error");

 cinfo.value.value = cert_blob;
 cinfo.value.len = cert_len;

 rv = sc_oberthur_get_certificate_authority(&cinfo.value, &cinfo.authority);
 LOG_TEST_RET(ctx, rv, "Failed to add certificate: get certificate attributes error");

 if (var_45 & 0x0001)
  cobj.flags |= SC_PKCS15_CO_FLAG_MODIFIABLE;

 rv = sc_pkcs15emu_add_x509_cert(p15card, &cobj, &cinfo);

 LOG_FUNC_RETURN(p15card->card->ctx, rv);
}

static int
fn_42(struct struct_50 *p15card,
  unsigned int var_45, unsigned int var_45)
{
 struct struct_50 *ctx = p15card->card->ctx;
 struct struct_42 kinfo;
 struct struct_46 kobj;
 struct struct_43 ccont;
 unsigned char *info_blob = NULL;
 size_t var_45 = 0;
 unsigned var_45;
 size_t var_45, var_43;
 char ch_tmp[0x100];
 int rv;

 LOG_FUNC_CALLED(ctx);
 sc_log(ctx, "add private key(file-id:%04X,size:%04X)", var_45, var_45);

 memset(&kinfo, 0, sizeof(kinfo));
 memset(&kobj, 0, sizeof(kobj));
 memset(&ccont, 0, sizeof(ccont));

 rv = sc_oberthur_get_friends (var_45, &ccont);
 LOG_TEST_RET(ctx, rv, "Failed to add private key: get friends error");

 if (ccont.id_cert) {
  struct struct_46 *objs[32];
  int ii;

  sc_log(ctx, "friend certificate %04X", ccont.id_cert);
  rv = sc_pkcs15_get_objects(p15card, SC_PKCS15_TYPE_CERT_X509, objs, 32);
  LOG_TEST_RET(ctx, rv, "Failed to add private key: get certificates error");

  for (ii=0; ii<rv; ii++) {
   struct struct_43 *cert = (struct struct_43 *)objs[ii]->data;
   struct struct_46 var_47 = cert->path;
   unsigned int var_43 = var_47.value[var_47.len - 2] * 0x100 + var_47.value[var_47.len - 1];

   if (var_43 == ccont.id_cert) {
    strlcpy(kobj.label, objs[ii]->label, sizeof(kobj.label));
    break;
   }
  }

  if (ii == rv)
   LOG_TEST_RET(ctx, SC_ERROR_INCONSISTENT_PROFILE, "Failed to add private key: friend not found");
 }

 snprintf(ch_tmp, sizeof(ch_tmp), "%s%04X", "3F0050119002", var_45 | 0x100);
 rv = sc_oberthur_read_file(p15card, ch_tmp, &info_blob, &var_45, 1);
 LOG_TEST_RET(ctx, rv, "Failed to add private key: read oberthur file error");

 if (var_45 < 2)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add private key: no 'tag'");
 var_45 = *(info_blob + 0) * 0x100 + *(info_blob + 1);
 var_45 = 2;


 if (var_45 > var_45)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add private key: no 'CN'");
 var_43 = *(info_blob + var_45 + 1) + *(info_blob + var_45) * 0x100;
 if (var_43 && !strlen(kobj.label)) {
  if (var_43 > sizeof(kobj.label) - 1)
   var_43 = sizeof(kobj.label) - 1;
  strncpy(kobj.label, (char *)(info_blob + var_45 + 2), var_43);
 }
 var_45 += 2 + var_43;


 if (var_45 > var_45)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add private key: no 'ID'");
 var_43 = *(info_blob + var_45 + 1) + *(info_blob + var_45) * 0x100;
 if (!var_43)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add private key: zero length ID");
 else if (var_43 > sizeof(kinfo.id.value))
  LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "Failed to add private key: invalid ID length");
 memcpy(kinfo.id.value, info_blob + var_45 + 2, var_43);
 kinfo.id.len = var_43;
 var_45 += 2 + var_43;


 var_45 += 16;


 if (var_45 > var_45)
  return SC_ERROR_UNKNOWN_DATA_RECEIVED;
 var_43 = *(info_blob + var_45 + 1) + *(info_blob + var_45) * 0x100;
 if (var_43) {
  kinfo.subject.value = malloc(var_43);
  if (!kinfo.subject.value)
   LOG_TEST_RET(ctx, SC_ERROR_OUT_OF_MEMORY, "Failed to add private key: memory allocation error");
  kinfo.subject.len = var_43;
  memcpy(kinfo.subject.value, info_blob + var_45 + 2, var_43);
 }



 snprintf(ch_tmp, sizeof(ch_tmp), "%s%04X", "3F0050119002", var_45);
 sc_format_path(ch_tmp, &kinfo.path);
 sc_log(ctx, "Private key info path %s", ch_tmp);

 kinfo.modulus_length = var_45;
 kinfo.native = 1;
 kinfo.key_reference = var_45 & 0xFF;

 kinfo.usage = sc_oberthur_decode_usage(var_45);
 kobj.flags = SC_PKCS15_CO_FLAG_PRIVATE;
 if (var_45 & 0x0001)
  kobj.flags |= SC_PKCS15_CO_FLAG_MODIFIABLE;

 kobj.auth_id.len = sizeof(PinDomainID) > sizeof(kobj.auth_id.value)
   ? sizeof(kobj.auth_id.value) : sizeof(PinDomainID);
 memcpy(kobj.auth_id.value, PinDomainID, kobj.auth_id.len);

 sc_log(ctx, "Parsed private key(reference:%i,usage:%X,flags:%X)", kinfo.key_reference, kinfo.usage, kobj.flags);

 rv = sc_pkcs15emu_add_rsa_prkey(p15card, &kobj, &kinfo);
 LOG_FUNC_RETURN(ctx, rv);
}


static int
fn_43(struct struct_50 *p15card,
  unsigned int var_45, unsigned int var_45, int var_45)
{
 struct struct_50 *ctx = p15card->card->ctx;
 struct struct_44 dinfo;
 struct struct_46 dobj;
 unsigned var_45;
 unsigned char *info_blob = NULL, *label = NULL, *app = NULL, *oid = NULL;
 size_t var_45, label_len, app_len, oid_len, var_45;
 char ch_tmp[0x100];
 int rv;

 SC_FUNC_CALLED(ctx, SC_LOG_DEBUG_VERBOSE);
 sc_log(ctx, "Add data(file-id:%04X,size:%i,is-private:%i)", var_45, var_45, var_45);
 memset(&dinfo, 0, sizeof(dinfo));
 memset(&dobj, 0, sizeof(dobj));

 snprintf(ch_tmp, sizeof(ch_tmp), "%s%04X", var_45 ? "3F0050119002" : "3F0050119001", var_45 | 0x100);

 rv = sc_oberthur_read_file(p15card, ch_tmp, &info_blob, &var_45, 1);
 LOG_TEST_RET(ctx, rv, "Failed to add data: read oberthur file error");

 if (var_45 < 2)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add certificate: no 'tag'");
 var_45 = *(info_blob + 0) * 0x100 + *(info_blob + 1);
 var_45 = 2;


 if (var_45 > var_45)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add data: no 'label'");
 label = info_blob + var_45 + 2;
 label_len = *(info_blob + var_45 + 1) + *(info_blob + var_45) * 0x100;
 if (label_len > sizeof(dobj.label) - 1)
  label_len = sizeof(dobj.label) - 1;
 var_45 += 2 + *(info_blob + var_45 + 1);


 if (var_45 > var_45)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add data: no 'application'");
 app = info_blob + var_45 + 2;
 app_len = *(info_blob + var_45 + 1) + *(info_blob + var_45) * 0x100;
 if (app_len > sizeof(dinfo.app_label) - 1)
  app_len = sizeof(dinfo.app_label) - 1;
 var_45 += 2 + app_len;


 if (var_45 > var_45)
  LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add data: no 'OID'");
 oid_len = *(info_blob + var_45 + 1) + *(info_blob + var_45) * 0x100;
 if (oid_len) {
  oid = info_blob + var_45 + 2;
  if (*oid != 0x06 || (*(oid + 1) != oid_len - 2))
   LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Failed to add data: invalid 'OID' format");
  oid += 2;
  oid_len -= 2;
 }

 snprintf(ch_tmp, sizeof(ch_tmp), "%s%04X", var_45 ? "3F0050119002" : "3F0050119001", var_45);

 sc_format_path(ch_tmp, &dinfo.path);

 memcpy(dobj.label, label, label_len);
 memcpy(dinfo.app_label, app, app_len);
 if (oid_len)
  sc_asn1_decode_object_id(oid, oid_len, &dinfo.app_oid);

 if (var_45 & 0x0001)
  dobj.flags |= SC_PKCS15_CO_FLAG_MODIFIABLE;

 if (var_45) {
  dobj.auth_id.len = sizeof(PinDomainID) > sizeof(dobj.auth_id.value)
    ? sizeof(dobj.auth_id.value) : sizeof(PinDomainID);
  memcpy(dobj.auth_id.value, PinDomainID, dobj.auth_id.len);

  dobj.flags |= SC_PKCS15_CO_FLAG_PRIVATE;
 }

 rv = sc_pkcs15emu_add_data_object(p15card, &dobj, &dinfo);

 LOG_FUNC_RETURN(p15card->card->ctx, rv);
}


static int
fn_45(struct struct_50 * p15card)
{
 struct struct_50 *ctx = p15card->card->ctx;
 struct struct_46 auth_info;
 struct struct_46 obj;
 struct struct_48 *card = p15card->card;
 struct struct_46 var_47;
 int rv, ii, tries_left;
 char serial[0x10];
 unsigned char var_47 = 0x04;

 SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);
 sc_bin_to_hex(card->serialnr.value, card->serialnr.len, serial, sizeof(serial), 0);
 set_string(&p15card->tokeninfo->serial_number, serial);

 p15card->ops.parse_df = sc_awp_parse_df;
 p15card->ops.clear = sc_awp_clear;

 sc_log(ctx, "Oberthur init: serial %s", p15card->tokeninfo->serial_number);

 sc_format_path("3F005011", &var_47);
 rv = sc_select_file(card, &var_47, NULL);
 LOG_TEST_RET(ctx, rv, "Oberthur init failed: cannot select PIN dir");

 tries_left = -1;
 rv = sc_verify(card, SC_AC_CHV, var_47, (unsigned char *)"", 0, &tries_left);
 if (rv && rv != SC_ERROR_PIN_CODE_INCORRECT) {
  var_47 = 0x84;
  rv = sc_verify(card, SC_AC_CHV, var_47, (unsigned char *)"", 0, &tries_left);
 }
 if (rv && rv != SC_ERROR_PIN_CODE_INCORRECT)
  LOG_TEST_RET(ctx, rv, "Invalid state of SO-PIN");


 memset(&auth_info, 0, sizeof(auth_info));
 memset(&obj, 0, sizeof(obj));

 auth_info.auth_type = SC_PKCS15_PIN_AUTH_TYPE_PIN;
 auth_info.auth_method = SC_AC_CHV;
 auth_info.auth_id.len = 1;
 auth_info.auth_id.value[0] = 0xFF;
 auth_info.attrs.pin.min_length = 4;
 auth_info.attrs.pin.max_length = 64;
 auth_info.attrs.pin.stored_length = 64;
 auth_info.attrs.pin.type = SC_PKCS15_PIN_TYPE_ASCII_NUMERIC;
 auth_info.attrs.pin.reference = var_47;
 auth_info.attrs.pin.pad_char = 0xFF;
 auth_info.attrs.pin.flags = SC_PKCS15_PIN_FLAG_CASE_SENSITIVE
    | SC_PKCS15_PIN_FLAG_INITIALIZED
    | SC_PKCS15_PIN_FLAG_NEEDS_PADDING
    | SC_PKCS15_PIN_FLAG_SO_PIN;
 auth_info.tries_left = tries_left;
 auth_info.logged_in = SC_PIN_STATE_UNKNOWN;

 strncpy(obj.label, "SO PIN", SC_PKCS15_MAX_LABEL_SIZE-1);
 obj.flags = SC_PKCS15_CO_FLAG_MODIFIABLE | SC_PKCS15_CO_FLAG_PRIVATE;

 sc_log(ctx, "Add PIN(%s,auth_id:%s,reference:%i)", obj.label,
   sc_pkcs15_print_id(&auth_info.auth_id), auth_info.attrs.pin.reference);
 rv = sc_pkcs15emu_add_pin_obj(p15card, &obj, &auth_info);
 LOG_TEST_RET(ctx, rv, "Oberthur init failed: cannot add PIN object");

 tries_left = -1;
 rv = sc_verify(card, SC_AC_CHV, 0x81, (unsigned char *)"", 0, &tries_left);
 if (rv == SC_ERROR_PIN_CODE_INCORRECT) {

  memset(&auth_info, 0, sizeof(auth_info));
  memset(&obj, 0, sizeof(obj));

  auth_info.auth_id.len = sizeof(PinDomainID) > sizeof(auth_info.auth_id.value)
    ? sizeof(auth_info.auth_id.value) : sizeof(PinDomainID);
  memcpy(auth_info.auth_id.value, PinDomainID, auth_info.auth_id.len);
  auth_info.auth_method = SC_AC_CHV;

  auth_info.attrs.pin.min_length = 4;
  auth_info.attrs.pin.max_length = 64;
  auth_info.attrs.pin.stored_length = 64;
  auth_info.attrs.pin.type = SC_PKCS15_PIN_TYPE_ASCII_NUMERIC;
  auth_info.attrs.pin.reference = 0x81;
  auth_info.attrs.pin.pad_char = 0xFF;
  auth_info.attrs.pin.flags = SC_PKCS15_PIN_FLAG_CASE_SENSITIVE
     | SC_PKCS15_PIN_FLAG_INITIALIZED
     | SC_PKCS15_PIN_FLAG_NEEDS_PADDING
     | SC_PKCS15_PIN_FLAG_LOCAL;
  auth_info.tries_left = tries_left;

  strncpy(obj.label, "SCM", SC_PKCS15_MAX_LABEL_SIZE-1);
  obj.flags = SC_PKCS15_CO_FLAG_MODIFIABLE | SC_PKCS15_CO_FLAG_PRIVATE;
  if (var_47 == 0x84) {





   obj.auth_id.len = 1;
   obj.auth_id.value[0] = 0xFF;
  }

  sc_format_path("3F005011", &auth_info.path);
  auth_info.path.type = SC_PATH_TYPE_PATH;

  sc_log(ctx, "Add PIN(%s,auth_id:%s,reference:%i)", obj.label,
    sc_pkcs15_print_id(&auth_info.auth_id), auth_info.attrs.pin.reference);
  rv = sc_pkcs15emu_add_pin_obj(p15card, &obj, &auth_info);
  LOG_TEST_RET(ctx, rv, "Oberthur init failed: cannot add PIN object");
 }
 else if (rv != SC_ERROR_DATA_OBJECT_NOT_FOUND) {
  LOG_TEST_RET(ctx, rv, "Oberthur init failed: cannot verify PIN");
 }

 for (ii=0; oberthur_infos[ii].name; ii++) {
  sc_log(ctx, "Oberthur init: read %s file", oberthur_infos[ii].name);
  rv = sc_oberthur_read_file(p15card, oberthur_infos[ii].path,
    &oberthur_infos[ii].content, &oberthur_infos[ii].len, 1);
  LOG_TEST_RET(ctx, rv, "Oberthur init failed: read oberthur file error");

  sc_log(ctx,
         "Oberthur init: parse %s file, content length %"SC_FORMAT_LEN_SIZE_T"u",
         oberthur_infos[ii].name, oberthur_infos[ii].len);
  rv = oberthur_infos[ii].parser(p15card, oberthur_infos[ii].content, oberthur_infos[ii].len,
    oberthur_infos[ii].postpone_allowed);
  LOG_TEST_RET(ctx, rv, "Oberthur init failed: parse error");
 }

 LOG_FUNC_RETURN(ctx, SC_SUCCESS);
}


static int
fn_47(struct struct_50 * p15card)
{
 struct struct_48 *card = p15card->card;

 SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);
 if (p15card->card->type != SC_CARD_TYPE_OBERTHUR_64K)
  LOG_FUNC_RETURN(p15card->card->ctx, SC_ERROR_WRONG_CARD);
 LOG_FUNC_RETURN(p15card->card->ctx, SC_SUCCESS);
}


int
fn_48(struct struct_50 * p15card, struct struct_49 *aid)
{
 int rv;

 LOG_FUNC_CALLED(p15card->card->ctx);
 rv = oberthur_detect_card(p15card);
 if (!rv)
  rv = sc_pkcs15emu_oberthur_init(p15card);

 LOG_FUNC_RETURN(p15card->card->ctx, rv);
}


static int
fn_50(struct struct_50 *p15card, struct struct_50 *df)
{
 struct struct_50 *ctx = p15card->card->ctx;
 unsigned char *buf = NULL;
 size_t buf_len;
 int rv;

 LOG_FUNC_CALLED(ctx);
 if (df->type != SC_PKCS15_PRKDF && df->type != SC_PKCS15_DODF)
  LOG_FUNC_RETURN(ctx, SC_ERROR_NOT_SUPPORTED);

 if (df->enumerated)
  LOG_FUNC_RETURN(ctx, SC_SUCCESS);

 rv = sc_oberthur_read_file(p15card, "3F0050115000", &buf, &buf_len, 1);
 LOG_TEST_RET(ctx, rv, "Parse DF: read private objects info failed");

 rv = sc_oberthur_parse_privateinfo(p15card, buf, buf_len, 0);

 if (buf)
  free(buf);

 if (rv == SC_ERROR_SECURITY_STATUS_NOT_SATISFIED)
  LOG_FUNC_RETURN(ctx, SC_SUCCESS);

 LOG_TEST_RET(ctx, rv, "Parse DF: private info parse error");
 df->enumerated = 1;

 LOG_FUNC_RETURN(ctx, rv);
}


static void
fn_50(struct struct_50 *p15card)
{
 LOG_FUNC_CALLED(p15card->card->ctx);
}
