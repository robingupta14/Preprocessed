







void fn_58( void );
void fn_68( int var_71, int var_71, int var_103 );

char * fn_5(char * buffer) {
 char * manuf = NULL;
 char * buffer_manuf;
 if (buffer != NULL && strlen(buffer) > 0) {
  buffer_manuf = strstr(buffer, "(hex)");
  if (buffer_manuf != NULL) {
   buffer_manuf += 6;
   while (*buffer_manuf == '\t' || *buffer_manuf == ' ') {
    ++buffer_manuf;
   }


   if (*buffer_manuf != '\0') {


    if (buffer_manuf[strlen(buffer_manuf) - 1] == '\n' || buffer_manuf[strlen(buffer_manuf) - 1] == '\r') {
     buffer_manuf[strlen(buffer_manuf) - 1] = '\0';
     if (*buffer_manuf != '\0' && (buffer_manuf[strlen(buffer_manuf) - 1] == '\n' || buffer[strlen(buffer_manuf) - 1] == '\r')) {
      buffer_manuf[strlen(buffer_manuf) - 1] = '\0';
     }
    }
    if (*buffer_manuf != '\0') {
     if ((manuf = (char *)malloc((strlen(buffer_manuf) + 1) * sizeof(char))) == NULL) {
      perror("malloc failed");
      return NULL;
     }
     snprintf(manuf, strlen(buffer_manuf) + 1, "%s", buffer_manuf);
    }
   }
  }
 }

 return manuf;
}

void fn_6(int var_13, int var_11, int var_12)
{ char command[13];


 sprintf(command, "%c[%d;%d;%dm", 0x1B, var_13, var_11 + 30, var_12 + 40);
 fprintf(stderr, "%s", command);
 fflush(stderr);
}

void fn_10(int var_11)
{ char command[13];


 sprintf(command, "\033[%dm", var_11 + 30);
 fprintf(stderr, "%s", command);
 fflush(stderr);
}

void fn_11(int var_12)
{ char command[13];


 sprintf(command, "\033[%dm", var_12 + 40);
 fprintf(stderr, "%s", command);
 fflush(stderr);
}

void fn_12(int var_13)
{ char command[13];


 sprintf(command, "\033[%im", var_13);
 fprintf(stderr, "%s", command);
 fflush(stderr);
}

void fn_13() {
  struct struct_16 oldt,
                 newt;
  tcgetattr( STDIN_FILENO, &oldt );
  newt = oldt;
  newt.c_lflag |= ( ICANON | ECHO );
  tcsetattr( STDIN_FILENO, TCSANOW, &newt );
}

int fn_15( ) {
  struct struct_16 oldt,
                 newt;
  int ch;
  tcgetattr( STDIN_FILENO, &oldt );
  newt = oldt;
  newt.c_lflag &= ~( ICANON | ECHO );
  tcsetattr( STDIN_FILENO, TCSANOW, &newt );
  ch = getchar();
  tcsetattr( STDIN_FILENO, TCSANOW, &oldt );
  return ch;
}

void fn_16()
{
    G.sort_by = SORT_BY_POWER;
    G.sort_inv = 1;

    G.start_print_ap=1;
    G.start_print_sta=1;
    G.selected_ap=1;
    G.selected_sta=1;
    G.selection_ap=0;
    G.selection_sta=0;
    G.mark_cur_ap=0;
    G.skip_columns=0;
    G.do_pause=0;
    G.do_sort_always=0;
    memset(G.selected_bssid, '\x00', 6);
}

void fn_17( void *arg) {

    if(!arg){}

    while( G.do_exit == 0 ) {
 int var_19=0;

 var_19=mygetch();

 if(var_19 == 0x73) {
     G.sort_by++;
     G.selection_ap = 0;
     G.selection_sta = 0;

     if(G.sort_by > MAX_SORT)
  G.sort_by = 0;

     switch(G.sort_by) {
  case SORT_BY_NOTHING:
      snprintf(G.message, sizeof(G.message), "][ sorting by first seen");
      break;
  case SORT_BY_BSSID:
      snprintf(G.message, sizeof(G.message), "][ sorting by bssid");
      break;
  case SORT_BY_POWER:
      snprintf(G.message, sizeof(G.message), "][ sorting by power level");
      break;
  case SORT_BY_BEACON:
      snprintf(G.message, sizeof(G.message), "][ sorting by beacon number");
      break;
  case SORT_BY_DATA:
      snprintf(G.message, sizeof(G.message), "][ sorting by number of data packets");
      break;
  case SORT_BY_PRATE:
      snprintf(G.message, sizeof(G.message), "][ sorting by packet rate");
      break;
  case SORT_BY_CHAN:
      snprintf(G.message, sizeof(G.message), "][ sorting by channel");
      break;
  case SORT_BY_MBIT:
      snprintf(G.message, sizeof(G.message), "][ sorting by max data rate");
      break;
  case SORT_BY_ENC:
      snprintf(G.message, sizeof(G.message), "][ sorting by encryption");
      break;
  case SORT_BY_CIPHER:
      snprintf(G.message, sizeof(G.message), "][ sorting by cipher");
      break;
  case SORT_BY_AUTH:
      snprintf(G.message, sizeof(G.message), "][ sorting by authentication");
      break;
  case SORT_BY_ESSID:
      snprintf(G.message, sizeof(G.message), "][ sorting by ESSID");
      break;
  default:
      break;
     }
     pthread_mutex_lock( &(G.mx_sort) );
  dump_sort();
     pthread_mutex_unlock( &(G.mx_sort) );
 }

 if(var_19 == 0x20) {
     G.do_pause = (G.do_pause+1)%2;
     if(G.do_pause) {
  snprintf(G.message, sizeof(G.message), "][ paused output");
  pthread_mutex_lock( &(G.mx_print) );

      fprintf( stderr, "\33[1;1H" );
      dump_print( G.ws.ws_row, G.ws.ws_col, G.num_cards );
      fprintf( stderr, "\33[J" );
      fflush(stderr);

  pthread_mutex_unlock( &(G.mx_print) );
     }
     else
  snprintf(G.message, sizeof(G.message), "][ resumed output");
 }

 if(var_19 == 0x72) {
     G.do_sort_always = (G.do_sort_always+1)%2;
     if(G.do_sort_always)
  snprintf(G.message, sizeof(G.message), "][ realtime sorting activated");
     else
  snprintf(G.message, sizeof(G.message), "][ realtime sorting deactivated");
 }

 if(var_19 == 0x6D) {
     G.mark_cur_ap = 1;
 }

 if(var_19 == 0x42) {
     if(G.selection_ap == 1) {
  G.selected_ap++;
     }
     if(G.selection_sta == 1) {
  G.selected_sta++;
     }
 }

 if(var_19 == 0x41) {
     if(G.selection_ap == 1) {
  G.selected_ap--;
  if(G.selected_ap < 1)
      G.selected_ap = 1;
     }
     if(G.selection_sta == 1) {
  G.selected_sta--;
  if(G.selected_sta < 1)
      G.selected_sta = 1;
     }
 }

 if(var_19 == 0x69) {
     G.sort_inv*=-1;
     if(G.sort_inv < 0)
  snprintf(G.message, sizeof(G.message), "][ inverted sorting order");
     else
  snprintf(G.message, sizeof(G.message), "][ normal sorting order");
 }

 if(var_19 == 0x09) {
     if(G.selection_ap == 0) {
  G.selection_ap = 1;
  G.selected_ap = 1;
  snprintf(G.message, sizeof(G.message), "][ enabled AP selection");
  G.sort_by = SORT_BY_NOTHING;
     } else if(G.selection_ap == 1) {
  G.selection_ap = 0;
  G.sort_by = SORT_BY_NOTHING;
  snprintf(G.message, sizeof(G.message), "][ disabled selection");
     }
 }

 if(var_19 == 0x61) {
     if(G.show_ap == 1 && G.show_sta == 1 && G.show_ack == 0) {
  G.show_ap = 1;
  G.show_sta = 1;
  G.show_ack = 1;
  snprintf(G.message, sizeof(G.message), "][ display ap+sta+ack");
     } else if(G.show_ap == 1 && G.show_sta == 1 && G.show_ack == 1) {
  G.show_ap = 1;
  G.show_sta = 0;
  G.show_ack = 0;
  snprintf(G.message, sizeof(G.message), "][ display ap only");
     } else if(G.show_ap == 1 && G.show_sta == 0 && G.show_ack == 0) {
  G.show_ap = 0;
  G.show_sta = 1;
  G.show_ack = 0;
  snprintf(G.message, sizeof(G.message), "][ display sta only");
     } else if(G.show_ap == 0 && G.show_sta == 1 && G.show_ack == 0) {
  G.show_ap = 1;
  G.show_sta = 1;
  G.show_ack = 0;
  snprintf(G.message, sizeof(G.message), "][ display ap+sta");
     }
 }

 if (var_19 == 0x64) {
  resetSelection();
  snprintf(G.message, sizeof(G.message), "][ reset selection to default");
 }

 if(G.do_exit == 0 && !G.do_pause) {
     pthread_mutex_lock( &(G.mx_print) );

  fprintf( stderr, "\33[1;1H" );
  dump_print( G.ws.ws_row, G.ws.ws_col, G.num_cards );
  fprintf( stderr, "\33[J" );
  fflush(stderr);

     pthread_mutex_unlock( &(G.mx_print) );
 }
    }
}

void fn_19(char *str)
{
    int var_142;
    int var_23 = 0;
    int var_23 = strlen(str) - 1;

    while (isspace((int)str[var_23])) var_23++;
    while ((var_23 >= var_23) && isspace((int)str[var_23])) var_23--;

    for (var_142 = var_23; var_142 <= var_23; var_142++)
        str[var_142 - var_23] = str[var_142];
    str[var_142 - var_23] = '\0';
}

struct struct_141 * fn_24(void) {
 FILE *fp;
 char * manuf;
 char buffer[BUFSIZ];
 unsigned char a[2];
 unsigned char b[2];
 unsigned char c[2];
 struct struct_141 *oui_ptr = NULL, *oui_head = NULL;

 if (!(fp = fopen(OUI_PATH0, "r"))) {
  if (!(fp = fopen(OUI_PATH1, "r"))) {
   if (!(fp = fopen(OUI_PATH2, "r"))) {
    if (!(fp = fopen(OUI_PATH3, "r"))) {
     return NULL;
    }
   }
  }
 }

 memset(buffer, 0x00, sizeof(buffer));
 while (fgets(buffer, sizeof(buffer), fp) != NULL) {
  if (!(strstr(buffer, "(hex)")))
   continue;

  memset(a, 0x00, sizeof(a));
  memset(b, 0x00, sizeof(b));
  memset(c, 0x00, sizeof(c));

  trim(buffer);
  if (sscanf(buffer, "%2c-%2c-%2c", a, b, c) == 3) {
   if (oui_ptr == NULL) {
    if (!(oui_ptr = (struct struct_141 *)malloc(sizeof(struct struct_141)))) {
     fclose(fp);
     perror("malloc failed");
     return NULL;
    }
   } else {
    if (!(oui_ptr->next = (struct struct_141 *)malloc(sizeof(struct struct_141)))) {
     fclose(fp);
     perror("malloc failed");
     return NULL;
    }
    oui_ptr = oui_ptr->next;
   }
   memset(oui_ptr->id, 0x00, sizeof(oui_ptr->id));
   memset(oui_ptr->manuf, 0x00, sizeof(oui_ptr->manuf));
   snprintf(oui_ptr->id, sizeof(oui_ptr->id), "%c%c:%c%c:%c%c", a[0], a[1], b[0], b[1], c[0], c[1]);
   manuf = get_manufacturer_from_string(buffer);
   if (manuf != NULL) {
    snprintf(oui_ptr->manuf, sizeof(oui_ptr->manuf), "%s", manuf);
    free(manuf);
   } else {
    snprintf(oui_ptr->manuf, sizeof(oui_ptr->manuf), "Unknown");
   }
   if (oui_head == NULL)
    oui_head = oui_ptr;
   oui_ptr->next = NULL;
  }
 }

 fclose(fp);
 return oui_head;
}

int fn_25(unsigned char *h80211, int var_142)
{
    int m_bmac, m_smac, m_dmac, var_142, textlen;
    char ofn[1024];
    char text[4096];
    char prga[4096];
    unsigned int long crc;

    if((unsigned)var_142 > sizeof(G.sharedkey[0])) return 1;

    m_bmac = 16;
    m_smac = 10;
    m_dmac = 4;

    if( time(NULL) - G.sk_start > 5)
    {

        memset(G.sharedkey, '\x00', 12288);
        G.sk_start = time(NULL);
    }


    if( (h80211[1] & 0x40) != 0x40 )
    {

        if( ( h80211[24] + (h80211[25] << 8) ) == 1 )
        {

            if( ( h80211[26] + (h80211[27] << 8) ) == 2 )
            {

                memcpy(G.sharedkey[0], h80211, var_142);
                G.sk_len = var_142-24;
            }
            if( ( h80211[26] + (h80211[27] << 8) ) == 4 )
            {

                memcpy(G.sharedkey[2], h80211, var_142);
            }
        }
        else return 1;
    }
    else
    {

        memcpy(G.sharedkey[1], h80211, var_142);
        G.sk_len2 = var_142-24-4;
    }



    if( ( memcmp(G.sharedkey[0]+m_bmac, NULL_MAC, 6) == 0 ) ||
        ( memcmp(G.sharedkey[1]+m_bmac, NULL_MAC, 6) == 0 ) ||
        ( memcmp(G.sharedkey[2]+m_bmac, NULL_MAC, 6) == 0 ) )
    {
        return 1;
    }

    if( ( memcmp(G.sharedkey[0]+m_bmac, G.sharedkey[1]+m_bmac, 6) != 0 ) ||
        ( memcmp(G.sharedkey[0]+m_bmac, G.sharedkey[2]+m_bmac, 6) != 0 ) )
    {
        return 1;
    }

    if( ( memcmp(G.sharedkey[0]+m_smac, G.sharedkey[2]+m_smac, 6) != 0 ) ||
        ( memcmp(G.sharedkey[0]+m_smac, G.sharedkey[1]+m_dmac, 6) != 0 ) )
    {
        return 1;
    }

    if( (memcmp(G.sharedkey[0]+m_dmac, G.sharedkey[2]+m_dmac, 6) != 0 ) ||
        (memcmp(G.sharedkey[0]+m_dmac, G.sharedkey[1]+m_smac, 6) != 0 ) )
    {
        return 1;
    }

    textlen = G.sk_len;

    if(textlen+4 != G.sk_len2)
    {
        snprintf(G.message, sizeof(G.message), "][ Broken SKA: %02X:%02X:%02X:%02X:%02X:%02X ",
                    *(G.sharedkey[0]+m_bmac), *(G.sharedkey[0]+m_bmac+1), *(G.sharedkey[0]+m_bmac+2),
                *(G.sharedkey[0]+m_bmac+3), *(G.sharedkey[0]+m_bmac+4), *(G.sharedkey[0]+m_bmac+5));
        return 1;
    }

    if((unsigned)textlen > sizeof(text) - 4) return 1;

    memcpy(text, G.sharedkey[0]+24, textlen);


    text[2] = text[2]+1;

    crc = 0xFFFFFFFF;

    for( var_142 = 0; var_142 < textlen; var_142++ )
        crc = crc_tbl[(crc ^ text[var_142]) & 0xFF] ^ (crc >> 8);

    crc = ~crc;


    text[textlen] = (crc ) & 0xFF;
    text[textlen+1] = (crc >> 8) & 0xFF;
    text[textlen+2] = (crc >> 16) & 0xFF;
    text[textlen+3] = (crc >> 24) & 0xFF;


    for(var_142=0; var_142<(textlen+4); var_142++)
    {
        prga[4+var_142] = (text[var_142] ^ G.sharedkey[1][28+var_142]) & 0xFF;
    }


    prga[0] = G.sharedkey[1][24] & 0xFF;
    prga[1] = G.sharedkey[1][25] & 0xFF;
    prga[2] = G.sharedkey[1][26] & 0xFF;
    prga[3] = G.sharedkey[1][27] & 0xFF;

    if( G.f_xor != NULL )
    {
        fclose(G.f_xor);
        G.f_xor = NULL;
    }

    snprintf( ofn, sizeof( ofn ) - 1, "%s-%02d-%02X-%02X-%02X-%02X-%02X-%02X.%s", G.prefix, G.f_index,
              *(G.sharedkey[0]+m_bmac), *(G.sharedkey[0]+m_bmac+1), *(G.sharedkey[0]+m_bmac+2),
              *(G.sharedkey[0]+m_bmac+3), *(G.sharedkey[0]+m_bmac+4), *(G.sharedkey[0]+m_bmac+5), "xor" );

    G.f_xor = fopen( ofn, "w");
    if(G.f_xor == NULL)
        return 1;

    for(var_142=0; var_142<textlen+8; var_142++)
        fputc((prga[var_142] & 0xFF), G.f_xor);

    fflush(G.f_xor);

    if( G.f_xor != NULL )
    {
        fclose(G.f_xor);
        G.f_xor = NULL;
    }

    snprintf(G.message, sizeof(G.message), "][ %d bytes keystream: %02X:%02X:%02X:%02X:%02X:%02X ",
                textlen+4, *(G.sharedkey[0]+m_bmac), *(G.sharedkey[0]+m_bmac+1), *(G.sharedkey[0]+m_bmac+2),
              *(G.sharedkey[0]+m_bmac+3), *(G.sharedkey[0]+m_bmac+4), *(G.sharedkey[0]+m_bmac+5));

    memset(G.sharedkey, '\x00', 1536);

    return 0;
}

char usage[] =

"\n"
"  %s - (C) 2006-2013 Thomas d\'Otreppe\n"
"  http:
"\var_142"
"  usage: airodump-ng <options> <interface>[,<interface>,...]\var_142"
"\var_142"
"  Options:\var_142"
"      --ivs                 : Save only captured IVs\var_142"
"      --gpsd                : Use GPSd\n"
"      --write      <prefix> : Dump file prefix\n"
"      -w                    : same as --write \n"
"      --beacons             : Record all beacons in dump file\n"
"      --update       <secs> : Display update delay in seconds\n"
"      --showack             : Prints ack/cts/rts statistics\n"
"      -h                    : Hides known stations for --showack\n"
"      -f            <msecs> : Time in ms between hopping channels\n"
"      --berlin       <secs> : Time before removing the AP/client\n"
"                              from the screen when no more packets\n"
"                              are received (Default: 120 seconds)\n"
"      -r             <file> : Read packets from that file\n"
"      -x            <msecs> : Active Scanning Simulation\n"
"      --manufacturer        : Display manufacturer from IEEE OUI list\n"
"      --uptime              : Display AP Uptime from Beacon Timestamp\n"
"      --output-format\n"
"                  <formats> : Output format. Possible values:\n"
"                              pcap, ivs, csv, gps, kismet, netxml\n"
"      --ignore-negative-one : Removes the message that says\n"
"                              fixed channel <interface>: -1\n"
"\n"
"  Filter options:\n"
"      --encrypt   <suite>   : Filter APs by cipher suite\n"
"      --netmask <netmask>   : Filter APs by mask\n"
"      --bssid     <bssid>   : Filter APs by BSSID\n"
"      --essid     <essid>   : Filter APs by ESSID\n"




"      -a                    : Filter unassociated clients\n"
"\n"
"  By default, airodump-ng hop on 2.4GHz channels.\n"
"  You can make it capture on other/specific channel(s) by using:\n"
"      --channel <channels>  : Capture on specific channels\n"
"      --band <abg>          : Band on which airodump-ng should hop\n"
"      -C    <frequencies>   : Uses these frequencies in MHz to hop\n"
"      --cswitch  <method>   : Set channel switching method\n"
"                    0       : FIFO (default)\n"
"                    1       : Round Robin\n"
"                    2       : Hop on last\n"
"      -s                    : same as --cswitch\n"
"\n"
"      --help                : Displays this usage screen\n"
"\n";

int fn_28(unsigned char *bssid)
{
    unsigned char var_77[6];
    unsigned char var_77[6];
    int var_142;

    for(var_142=0; var_142<6; var_142++)
    {
        var_77[var_142] = bssid[var_142] & G.f_netmask[var_142];
        var_77[var_142] = G.f_bssid[var_142] & G.f_netmask[var_142];
    }

    if( memcmp(var_77, var_77, 6) != 0 )
    {
        return1;
    }

    return 0;
}

int fn_31(unsigned char *essid)
{
    int var_83 = 0;
    int var_142;

    if(G.f_essid)
    {
        for(var_142=0; var_142<G.f_essid_count; var_142++)
        {
            if(strncmp((char*)essid, G.f_essid[var_142], MAX_IE_ELEMENT_SIZE) == 0)
            {
                return 0;
            }
        }

        var_83 = 1;
    }

    return var_83;
}

void fn_33( )
{
    unsigned int time_diff, capt_time, miss_time;
    int missed_frames;
    struct struct_141 *ap_cur = NULL;
    struct struct_141 *st_cur = NULL;
    struct struct_141 cur_time;

    ap_cur = G.ap_1st;
    st_cur = G.st_1st;

    gettimeofday( &cur_time, NULL );


    while( ap_cur != NULL )
    {
        time_diff = 1000000 * (cur_time.tv_sec - ap_cur->ftimer.tv_sec )
                            + (cur_time.tv_usec - ap_cur->ftimer.tv_usec);


        if( (ap_cur->fcapt >= QLT_COUNT && time_diff > 500000 ) || time_diff > (QLT_TIME * 1000000) )
        {

            if(ap_cur->fcapt > 1)
            {
                capt_time = ( 1000000 * (ap_cur->ftimel.tv_sec - ap_cur->ftimef.tv_sec )
                                        + (ap_cur->ftimel.tv_usec - ap_cur->ftimef.tv_usec) );

                miss_time = ( 1000000 * (ap_cur->ftimef.tv_sec - ap_cur->ftimer.tv_sec )
                                        + (ap_cur->ftimef.tv_usec - ap_cur->ftimer.tv_usec) )
                            + ( 1000000 * (cur_time.tv_sec - ap_cur->ftimel.tv_sec )
                                        + (cur_time.tv_usec - ap_cur->ftimel.tv_usec) );


                if(capt_time > 0 && miss_time > 200000)
                {
                    missed_frames = ((float)((float)miss_time/(float)capt_time) * ((float)ap_cur->fcapt + (float)ap_cur->fmiss));
                    ap_cur->fmiss += missed_frames;
                }

                ap_cur->rx_quality = ((float)((float)ap_cur->fcapt / ((float)ap_cur->fcapt + (float)ap_cur->fmiss)) * 100.0);
            }
            else ap_cur->rx_quality = 0;


            if(ap_cur->rx_quality > 100) ap_cur->rx_quality = 100;
            if(ap_cur->rx_quality < 0 ) ap_cur->rx_quality = 0;


            ap_cur->fcapt = 0;
            ap_cur->fmiss = 0;
            gettimeofday( &(ap_cur->ftimer) ,NULL);
        }
        ap_cur = ap_cur->next;
    }


    while( st_cur != NULL )
    {
        time_diff = 1000000 * (cur_time.tv_sec - st_cur->ftimer.tv_sec )
                            + (cur_time.tv_usec - st_cur->ftimer.tv_usec);

        if( time_diff > 10000000 )
        {
            st_cur->missed = 0;
            gettimeofday( &(st_cur->ftimer), NULL );
        }

        st_cur = st_cur->next;
    }

}



int fn_37( char *prefix, int var_142 )
{
    int var_142, ofn_len;
    FILE *f;
    char * ofn = NULL;




    if ( prefix == NULL || strlen( prefix ) == 0) {
     return0;
    }



 ofn_len = strlen(prefix) + 1 + 2 + 1 + 13 + 1;
 ofn = (char *)calloc(1, ofn_len);

    G.f_index = 1;



    do
    {
        for( var_142 = 0; var_142 < NB_EXTENSIONS; var_142++ )
        {
   memset(ofn, 0, ofn_len);
            snprintf( ofn, ofn_len, "%s-%02d.%s",
                      prefix, G.f_index, f_ext[var_142] );

            if( ( f = fopen( ofn, "rb+" ) ) != NULL )
            {
                fclose( f );
                G.f_index++;
                break;
            }
        }
    }


    while( var_142 < NB_EXTENSIONS );

    G.prefix = (char *) malloc(strlen(prefix) + 1);
    memcpy(G.prefix, prefix, strlen(prefix) + 1);



 if (G.output_format_csv) {
  memset(ofn, 0, ofn_len);
  snprintf( ofn, ofn_len, "%s-%02d.%s",
      prefix, G.f_index, AIRODUMP_NG_CSV_EXT );

  if( ( G.f_txt = fopen( ofn, "wb+" ) ) == NULL )
  {
   perror( "fopen failed" );
   fprintf( stderr, "Could not create \"%s\".\n", ofn );
   free( ofn );
   return1;
  }
 }


 if (G.output_format_kismet_csv) {
  memset(ofn, 0, ofn_len);
  snprintf( ofn, ofn_len, "%s-%02d.%s",
      prefix, G.f_index, KISMET_CSV_EXT );

  if( ( G.f_kis = fopen( ofn, "wb+" ) ) == NULL )
  {
   perror( "fopen failed" );
   fprintf( stderr, "Could not create \"%s\".\n", ofn );
   free( ofn );
   return1;
  }
 }



    if (G.usegpsd)
    {
        memset(ofn, 0, ofn_len);
        snprintf( ofn, ofn_len, "%s-%02d.%s",
                  prefix, G.f_index, AIRODUMP_NG_GPS_EXT );

        if( ( G.f_gps = fopen( ofn, "wb+" ) ) == NULL )
        {
            perror( "fopen failed" );
            fprintf( stderr, "Could not create \"%s\".\n", ofn );
            free( ofn );
            return1;
        }
    }



 if (G.output_format_kismet_netxml) {
  memset(ofn, 0, ofn_len);
  snprintf( ofn, ofn_len, "%s-%02d.%s",
      prefix, G.f_index, KISMET_NETXML_EXT );

  if( ( G.f_kis_xml = fopen( ofn, "wb+" ) ) == NULL )
  {
   perror( "fopen failed" );
   fprintf( stderr, "Could not create \"%s\".\n", ofn );
   free( ofn );
   return1;
  }
 }


    if( G.output_format_pcap )
    {
        struct struct_142 pfh;

        memset(ofn, 0, ofn_len);
        snprintf( ofn, ofn_len, "%s-%02d.%s",
                  prefix, G.f_index, AIRODUMP_NG_CAP_EXT );

        if( ( G.f_cap = fopen( ofn, "wb+" ) ) == NULL )
        {
            perror( "fopen failed" );
            fprintf( stderr, "Could not create \"%s\".\n", ofn );
            free( ofn );
            return1;
        }

        G.f_cap_name = (char *) malloc( strlen( ofn ) + 1 );
        memcpy( G.f_cap_name, ofn, strlen( ofn ) + 1 );
        free( ofn );

        pfh.magic = TCPDUMP_MAGIC;
        pfh.version_major = PCAP_VERSION_MAJOR;
        pfh.version_minor = PCAP_VERSION_MINOR;
        pfh.thiszone = 0;
        pfh.sigfigs = 0;
        pfh.snaplen = 65535;
        pfh.linktype = LINKTYPE_IEEE802_11;

        if( fwrite( &pfh, 1, sizeof( pfh ), G.f_cap ) !=
                    (size_t) sizeof( pfh ) )
        {
            perror( "fwrite(pcap file header) failed" );
            return1;
        }
    } else if ( var_142 ) {
        struct struct_41 fivs2;

        fivs2.version = IVS2_VERSION;

        memset(ofn, 0, ofn_len);
        snprintf( ofn, ofn_len, "%s-%02d.%s",
                  prefix, G.f_index, IVS2_EXTENSION );

        if( ( G.f_ivs = fopen( ofn, "wb+" ) ) == NULL )
        {
            perror( "fopen failed" );
            fprintf( stderr, "Could not create \"%s\".\n", ofn );
            free( ofn );
            return1;
        }
        free( ofn );

        if( fwrite( IVS2_MAGIC, 1, 4, G.f_ivs ) != (size_t) 4 )
        {
            perror( "fwrite(IVs file MAGIC) failed" );
            return1;
        }

        if( fwrite( &fivs2, 1, sizeof(struct struct_41), G.f_ivs ) != (size_t) sizeof(struct struct_41) )
        {
            perror( "fwrite(IVs file header) failed" );
            return1;
        }
    }

    return0;
}

int fn_41()
{
    struct struct_141 tv;
    struct struct_141 *ap_cur;
    struct struct_141 *na_cur;
    int sec, usec, diff, ps;
    float pause;

    gettimeofday(&tv, NULL);

    ap_cur = G.ap_end;

    while( ap_cur != NULL )
    {
        sec = (tv.tv_sec - ap_cur->tv.tv_sec);
        usec = (tv.tv_usec - ap_cur->tv.tv_usec);
        pause = (((float)(sec*1000000.0f + usec))/(1000000.0f));
        if( pause > 2.0f )
        {
            diff = ap_cur->nb_data - ap_cur->nb_data_old;
            ps = (int)(((float)diff)/pause);
            ap_cur->nb_dataps = ps;
            ap_cur->nb_data_old = ap_cur->nb_data;
            gettimeofday(&(ap_cur->tv), NULL);
        }
        ap_cur = ap_cur->prev;
    }

    na_cur = G.na_1st;

    while( na_cur != NULL )
    {
        sec = (tv.tv_sec - na_cur->tv.tv_sec);
        usec = (tv.tv_usec - na_cur->tv.tv_usec);
        pause = (((float)(sec*1000000.0f + usec))/(1000000.0f));
        if( pause > 2.0f )
        {
            diff = na_cur->ack - na_cur->ack_old;
            ps = (int)(((float)diff)/pause);
            na_cur->ackps = ps;
            na_cur->ack_old = na_cur->ack;
            gettimeofday(&(na_cur->tv), NULL);
        }
        na_cur = na_cur->next;
    }
    return0;
}

int fn_43(struct struct_48 **list)
{
    struct struct_48 **pkts;
    struct struct_48 *next;

    if(list == NULL) return 1;

    pkts = list;

    while(*pkts != NULL)
    {
        next = (*pkts)->next;
        if( (*pkts)->packet )
        {
            free( (*pkts)->packet);
            (*pkts)->packet=NULL;
        }

        if(*pkts)
        {
            free(*pkts);
            *pkts = NULL;
        }
        *pkts = next;
    }

    *list=NULL;

    return 0;
}

int fn_45(struct struct_48 **list, int var_132, unsigned char* packet)
{
    struct struct_48 *next = *list;

    if(var_132 <= 0) return 1;
    if(packet == NULL) return 1;
    if(list == NULL) return 1;

    *list = (struct struct_48*) malloc(sizeof(struct struct_48));
    if( *list == NULL ) return 1;
    (*list)->packet = (unsigned char*) malloc(var_132);
    if( (*list)->packet == NULL ) return 1;

    memcpy((*list)->packet, packet, var_132);
    (*list)->next = next;
    (*list)->length = var_132;
    gettimeofday( &((*list)->ctime), NULL);

    return 0;
}







int fn_47(struct struct_48 **list, int var_132, unsigned char* packet)
{
    struct struct_48 *next = *list;
    struct struct_141 tv1;
    int timediff;
    int var_142, correct;

    if( packet == NULL) return 1;
    if( list == NULL ) return 1;
    if( *list == NULL ) return 1;
    if( var_132 <= 0) return 1;

    gettimeofday(&tv1, NULL);

    timediff = (((tv1.tv_sec - ((*list)->ctime.tv_sec)) * 1000000) + (tv1.tv_usec - ((*list)->ctime.tv_usec))) / 1000;
    if( timediff > BUFFER_TIME )
    {
        list_tail_free(list);
        next=NULL;
    }

    while(next != NULL)
    {
        if(next->next != NULL)
        {
            timediff = (((tv1.tv_sec - (next->next->ctime.tv_sec)) * 1000000) + (tv1.tv_usec - (next->next->ctime.tv_usec))) / 1000;
            if( timediff > BUFFER_TIME )
            {
                list_tail_free(&(next->next));
                break;
            }
        }
        if( (next->length + 4) == var_132)
        {
            correct = 1;

            for(var_142=28;var_142<var_132-28;var_142++)
            {
                if(next->packet[var_142] != packet[var_142])
                {
                    correct = 0;
                    break;
                }
            }
            if(!correct)
            {
                correct = 1;

                for(var_142=28;var_142<var_132-28;var_142++)
                {
                    if(next->packet[var_142] != packet[4+var_142])
                    {
                        correct = 0;
                        break;
                    }
                }
            }
            if(correct == 1)
                    return 0;
        }
        next = next->next;
    }

    return 1;
}

int fn_48(unsigned char* mac)
{
    struct struct_141 *na_cur = NULL;
    struct struct_141 *na_prv = NULL;

    if(mac == NULL)
        return-1;

    na_cur = G.na_1st;
    na_prv = NULL;

    while( na_cur != NULL )
    {
        if( ! memcmp( na_cur->namac, mac, 6 ) )
            break;

        na_prv = na_cur;
        na_cur = na_cur->next;
    }


    if( na_cur != NULL )
    {

        if(na_cur == G.na_1st)
        {
            G.na_1st = na_cur->next;
        }
        else
        {
            na_prv->next = na_cur->next;
        }
        free(na_cur);
        na_cur=NULL;
    }

    return0;
}

int fn_49( unsigned char *h80211, int var_142, struct struct_141 *ri, int var_57 )
{
    int var_142, var_142, seq, msd, dlen, offset, clen, o;
    unsigned z;
    int type, var_132, var_57=0, var_57=0;
    struct struct_141 pkh;
    struct struct_141 tv;
    struct struct_58 ivs2;
    unsigned char *p, *org_p, c;
    unsigned char bssid[6];
    unsigned char stmac[6];
    unsigned char namac[6];
    unsigned char clear[2048];
    int weight[16];
    int var_57=0;

    struct struct_141 *ap_cur = NULL;
    struct struct_141 *st_cur = NULL;
    struct struct_141 *na_cur = NULL;
    struct struct_141 *ap_prv = NULL;
    struct struct_141 *st_prv = NULL;
    struct struct_141 *na_prv = NULL;


    if( G.active_scan_sim > 0 && h80211[0] != 0x50 )
        return0;



    if( var_142 < 24 )
        goto write_packet;



    if( ( h80211[0] & 0x0C ) == 0x04 )
        goto write_packet;



    if ( var_142 > 28)
        if ( memcmp(h80211 + 24, llcnull, 4) == 0)
            return 0;


    seq = ((h80211[22]>>4)+(h80211[23]<<4));



    switch( h80211[1] & 3 )
    {
        case 0: memcpy( bssid, h80211 + 16, 6 ); break;
        case 1: memcpy( bssid, h80211 + 4, 6 ); break;
        case 2: memcpy( bssid, h80211 + 10, 6 ); break;
        case 3: memcpy( bssid, h80211 + 10, 6 ); break;
    }

    if( memcmp(G.f_bssid, NULL_MAC, 6) != 0 )
    {
        if( memcmp(G.f_netmask, NULL_MAC, 6) != 0 )
        {
            if(is_filtered_netmask(bssid)) return1;
        }
        else
        {
            if( memcmp(G.f_bssid, bssid, 6) != 0 ) return1;
        }
    }



    ap_cur = G.ap_1st;
    ap_prv = NULL;

    while( ap_cur != NULL )
    {
        if( ! memcmp( ap_cur->bssid, bssid, 6 ) )
            break;

        ap_prv = ap_cur;
        ap_cur = ap_cur->next;
    }



    if( ap_cur == NULL )
    {
        if( ! ( ap_cur = (struct struct_141 *) malloc(
                         sizeof( struct struct_141 ) ) ) )
        {
            perror( "malloc failed" );
            return1;
        }


        remove_namac(bssid);

        memset( ap_cur, 0, sizeof( struct struct_141 ) );

        if( G.ap_1st == NULL )
            G.ap_1st = ap_cur;
        else
            ap_prv->next = ap_cur;

        memcpy( ap_cur->bssid, bssid, 6 );
  if (ap_cur->manuf == NULL) {
   ap_cur->manuf = get_manufacturer(ap_cur->bssid[0], ap_cur->bssid[1], ap_cur->bssid[2]);
  }

        ap_cur->prev = ap_prv;

        ap_cur->tinit = time( NULL );
        ap_cur->tlast = time( NULL );

        ap_cur->avg_power = -1;
        ap_cur->best_power = -1;
        ap_cur->power_index = -1;

        for( var_142 = 0; var_142 < NB_PWR; var_142++ )
            ap_cur->power_lvl[var_142] = -1;

        ap_cur->channel = -1;
        ap_cur->max_speed = -1;
        ap_cur->security = 0;

        ap_cur->uiv_root = uniqueiv_init();

        ap_cur->nb_dataps = 0;
        ap_cur->nb_data_old = 0;
        gettimeofday(&(ap_cur->tv), NULL);

        ap_cur->dict_started = 0;

        ap_cur->key = NULL;

        G.ap_end = ap_cur;

        ap_cur->nb_bcn = 0;

        ap_cur->rx_quality = 0;
        ap_cur->fcapt = 0;
        ap_cur->fmiss = 0;
        ap_cur->last_seq = 0;
        gettimeofday( &(ap_cur->ftimef), NULL);
        gettimeofday( &(ap_cur->ftimel), NULL);
        gettimeofday( &(ap_cur->ftimer), NULL);

        ap_cur->ssid_length = 0;
        ap_cur->essid_stored = 0;
        ap_cur->timestamp = 0;

        ap_cur->decloak_detect=G.decloak;
        ap_cur->is_decloak = 0;
        ap_cur->packets = NULL;

 ap_cur->marked = 0;
 ap_cur->marked_color = 1;

        ap_cur->data_root = NULL;
        ap_cur->EAP_detected = 0;
        memcpy(ap_cur->gps_loc_min, G.gps_loc, sizeof(float)*5);
        memcpy(ap_cur->gps_loc_max, G.gps_loc, sizeof(float)*5);
        memcpy(ap_cur->gps_loc_best, G.gps_loc, sizeof(float)*5);
    }



    ap_cur->tlast = time( NULL );





    if( ( ( h80211[1] & 3 ) == 0 &&
            memcmp( h80211 + 10, bssid, 6 ) == 0 ) ||
        ( ( h80211[1] & 3 ) == 2 ) )
    {
        ap_cur->power_index = ( ap_cur->power_index + 1 ) % NB_PWR;
        ap_cur->power_lvl[ap_cur->power_index] = ri->ri_power;

        ap_cur->avg_power = 0;

        for( var_142 = 0, var_142 = 0; var_142 < NB_PWR; var_142++ )
        {
            if( ap_cur->power_lvl[var_142] != -1 )
            {
                ap_cur->avg_power += ap_cur->power_lvl[var_142];
                var_142++;
            }
        }

        if( var_142 > 0 )
        {
            ap_cur->avg_power /= var_142;
            if( ap_cur->avg_power > ap_cur->best_power )
            {
                ap_cur->best_power = ap_cur->avg_power;
                memcpy(ap_cur->gps_loc_best, G.gps_loc, sizeof(float)*5);
            }
        }
        else
            ap_cur->avg_power = -1;



        if(G.gps_loc[0] > ap_cur->gps_loc_max[0])
            ap_cur->gps_loc_max[0] = G.gps_loc[0];
        if(G.gps_loc[1] > ap_cur->gps_loc_max[1])
            ap_cur->gps_loc_max[1] = G.gps_loc[1];
        if(G.gps_loc[2] > ap_cur->gps_loc_max[2])
            ap_cur->gps_loc_max[2] = G.gps_loc[2];

        if(G.gps_loc[0] < ap_cur->gps_loc_min[0])
            ap_cur->gps_loc_min[0] = G.gps_loc[0];
        if(G.gps_loc[1] < ap_cur->gps_loc_min[1])
            ap_cur->gps_loc_min[1] = G.gps_loc[1];
        if(G.gps_loc[2] < ap_cur->gps_loc_min[2])
            ap_cur->gps_loc_min[2] = G.gps_loc[2];


        if(ap_cur->fcapt == 0 && ap_cur->fmiss == 0) gettimeofday( &(ap_cur->ftimef), NULL);
        if(ap_cur->last_seq != 0) ap_cur->fmiss += (seq - ap_cur->last_seq - 1);
        ap_cur->last_seq = seq;
        ap_cur->fcapt++;
        gettimeofday( &(ap_cur->ftimel), NULL);


    }

    if( h80211[0] == 0x80 )
    {
        ap_cur->nb_bcn++;
    }

    ap_cur->nb_pkt++;


    if( h80211[0] == 0x10 )
    {


        if( st_cur != NULL && st_cur->wpa.state != 0xFF )
            st_cur->wpa.state = 0;

    }



    switch( h80211[1] & 3 )
    {
        case 0:



            if( memcmp( h80211 + 10, bssid, 6 ) == 0 )
                goto skip_station;

            memcpy( stmac, h80211 + 10, 6 );
            break;

        case 1:



            memcpy( stmac, h80211 + 10, 6 );
            break;

        case 2:



            if( (h80211[4]%2) != 0 ) goto skip_station;
            memcpy( stmac, h80211 + 4, 6 ); break;

        default: goto skip_station;
    }



    st_cur = G.st_1st;
    st_prv = NULL;

    while( st_cur != NULL )
    {
        if( ! memcmp( st_cur->stmac, stmac, 6 ) )
            break;

        st_prv = st_cur;
        st_cur = st_cur->next;
    }



    if( st_cur == NULL )
    {
        if( ! ( st_cur = (struct struct_141 *) malloc(
                         sizeof( struct struct_141 ) ) ) )
        {
            perror( "malloc failed" );
            return1;
        }


        remove_namac(stmac);

        memset( st_cur, 0, sizeof( struct struct_141 ) );

        if( G.st_1st == NULL )
            G.st_1st = st_cur;
        else
            st_prv->next = st_cur;

        memcpy( st_cur->stmac, stmac, 6 );

  if (st_cur->manuf == NULL) {
   st_cur->manuf = get_manufacturer(st_cur->stmac[0], st_cur->stmac[1], st_cur->stmac[2]);
  }

        st_cur->prev = st_prv;

        st_cur->tinit = time( NULL );
        st_cur->tlast = time( NULL );

        st_cur->power = -1;
        st_cur->rate_to = -1;
        st_cur->rate_from = -1;

        st_cur->probe_index = -1;
        st_cur->missed = 0;
        st_cur->lastseq = 0;
        st_cur->qos_fr_ds = 0;
        st_cur->qos_to_ds = 0;
        gettimeofday( &(st_cur->ftimer), NULL);

        for( var_142 = 0; var_142 < NB_PRB; var_142++ )
        {
            memset( st_cur->probes[var_142], 0, sizeof(
                    st_cur->probes[var_142] ) );
            st_cur->ssid_length[var_142] = 0;
        }

        G.st_end = st_cur;
    }

    if( st_cur->base == NULL ||
        memcmp( ap_cur->bssid, BROADCAST, 6 ) != 0 )
        st_cur->base = ap_cur;


    if( (st_cur != NULL) && ( h80211[1] & 3 ) == 2 )
        st_cur->rate_to = ri->ri_rate;



    st_cur->tlast = time( NULL );





    if( ( ( h80211[1] & 3 ) == 0 &&
            memcmp( h80211 + 10, bssid, 6 ) != 0 ) ||
        ( ( h80211[1] & 3 ) == 1 ) )
    {
        st_cur->power = ri->ri_power;
        st_cur->rate_from = ri->ri_rate;

        if(st_cur->lastseq != 0)
        {
            msd = seq - st_cur->lastseq - 1;
            if(msd > 0 && msd < 1000)
                st_cur->missed += msd;
        }
        st_cur->lastseq = seq;
    }

    st_cur->nb_pkt++;

skip_station:



    if( h80211[0] == 0x40 && st_cur != NULL )
    {
        p = h80211 + 24;

        while( p < h80211 + var_142 )
        {
            if( p + 2 + p[1] > h80211 + var_142 )
                break;

            if( p[0] == 0x00 && p[1] > 0 && p[2] != '\0' &&
                ( p[1] > 1 || p[2] != ' ' ) )
            {

                var_142 = p[1];

                for( var_142 = 0; var_142 < var_142; var_142++ )
                    if( p[2 + var_142] > 0 && p[2 + var_142] < ' ' )
                        goto skip_probe;




                for( var_142 = 0; var_142 < NB_PRB; var_142++ )
                    if( memcmp( st_cur->probes[var_142], p + 2, var_142 ) == 0 )
                        goto skip_probe;

                st_cur->probe_index = ( st_cur->probe_index + 1 ) % NB_PRB;
                memset( st_cur->probes[st_cur->probe_index], 0, 256 );
                memcpy( st_cur->probes[st_cur->probe_index], p + 2, var_142 );
                st_cur->ssid_length[st_cur->probe_index] = var_142;

                for( var_142 = 0; var_142 < var_142; var_142++ )
                {
                    c = p[2 + var_142];
                    if( c == 0 || ( c > 126 && c < 160 ) ) c = '.';
                    st_cur->probes[st_cur->probe_index][var_142] = c;
                }
            }

            p += 2 + p[1];
        }
    }

skip_probe:



    if( h80211[0] == 0x80 || h80211[0] == 0x50 )
    {
        if( !(ap_cur->security & (STD_OPN|STD_WEP|STD_WPA|STD_WPA2)) )
        {
            if( ( h80211[34] & 0x10 ) >> 4 ) ap_cur->security |= STD_WEP|ENC_WEP;
            else ap_cur->security |= STD_OPN;
        }

        ap_cur->preamble = ( h80211[34] & 0x20 ) >> 5;

        unsigned long long *tstamp = (unsigned long long *) (h80211 + 24);
        ap_cur->timestamp = letoh64(*tstamp);

        p = h80211 + 36;

        while( p < h80211 + var_142 )
        {
            if( p + 2 + p[1] > h80211 + var_142 )
                break;


            if( p[0] == 0x00 && (ap_cur->ssid_length < p[1]) ) ap_cur->ssid_length = p[1];

            if( p[0] == 0x00 && p[1] > 0 && p[2] != '\0' &&
                ( p[1] > 1 || p[2] != ' ' ) )
            {



                var_142 = p[1];

                memset( ap_cur->essid, 0, 256 );
                memcpy( ap_cur->essid, p + 2, var_142 );

                if( G.f_ivs != NULL && !ap_cur->essid_stored )
                {
                    memset(&ivs2, '\x00', sizeof(struct struct_58));
                    ivs2.flags |= IVS2_ESSID;
                    ivs2.len += ap_cur->ssid_length;

                    if( memcmp( G.prev_bssid, ap_cur->bssid, 6 ) != 0 )
                    {
                        ivs2.flags |= IVS2_BSSID;
                        ivs2.len += 6;
                        memcpy( G.prev_bssid, ap_cur->bssid, 6 );
                    }


                    if( fwrite( &ivs2, 1, sizeof(struct struct_58), G.f_ivs )
                        != (size_t) sizeof(struct struct_58) )
                    {
                        perror( "fwrite(IV header) failed" );
                        return1;
                    }


                    if(ivs2.flags & IVS2_BSSID)
                    {
                        if( fwrite( ap_cur->bssid, 1, 6, G.f_ivs )
                            != (size_t) 6 )
                        {
                            perror( "fwrite(IV bssid) failed" );
                            return1;
                        }
                    }


                    if( fwrite( ap_cur->essid, 1, ap_cur->ssid_length, G.f_ivs )
                        != (size_t) ap_cur->ssid_length )
                    {
                        perror( "fwrite(IV essid) failed" );
                        return1;
                    }

                    ap_cur->essid_stored = 1;
                }

                for( var_142 = 0; var_142 < var_142; var_142++ )
                    if( ( ap_cur->essid[var_142] > 0 && ap_cur->essid[var_142] < 32 ) ||
                        ( ap_cur->essid[var_142] > 126 && ap_cur->essid[var_142] < 160 ) )
                        ap_cur->essid[var_142] = '.';
            }



            if( p[0] == 0x01 || p[0] == 0x32 )
            {
                if(ap_cur->max_speed < ( p[1 + p[1]] & 0x7F ) / 2)
                    ap_cur->max_speed = ( p[1 + p[1]] & 0x7F ) / 2;
            }

            if( p[0] == 0x03 )
                ap_cur->channel = p[2];

            p += 2 + p[1];
        }
    }



    if( (h80211[0] == 0x80 || h80211[0] == 0x50) && var_142 > 38)
    {
        p=h80211+36;

        while( p < h80211 + var_142 )
        {
            type = p[0];
            var_132 = p[1];
            if(p+2+var_132 > h80211 + var_142) {


                break;
            }

            if( (type == 0xDD && (var_132 >= 8) && (memcmp(p+2, "\x00\x50\xF2\x01\x01\x00", 6) == 0)) || (type == 0x30) )
            {
                ap_cur->security &= ~(STD_WEP|ENC_WEP|STD_WPA);

                org_p = p;
                offset = 0;

                if(type == 0xDD)
                {

                    ap_cur->security |= STD_WPA;
                    offset = 4;
                }

                if(type == 0x30)
                {
                    ap_cur->security |= STD_WPA2;
                    offset = 0;
                }

                if(var_132 < (18+offset))
                {
                    p += var_132+2;
                    continue;
                }

                if( p+9+offset > h80211+var_142 )
                    break;
                var_57 = p[8+offset] + (p[9+offset]<<8);

                if( p+ (11+offset) + 4*var_57 > h80211+var_142)
                    break;
                var_57 = p[(10+offset) + 4*var_57] + (p[(11+offset) + 4*var_57]<<8);

                p += (10+offset);

                if(type != 0x30)
                {
                    if( p + (4*var_57) + (2+4*var_57) > h80211+var_142)
                        break;
                }
                else
                {
                    if( p + (4*var_57) + (2+4*var_57) + 2 > h80211+var_142)
                        break;
                }

                for(var_142=0; var_142<var_57; var_142++)
                {
                    switch(p[var_142*4+3])
                    {
                    case 0x01:
                        ap_cur->security |= ENC_WEP;
                        break;
                    case 0x02:
                        ap_cur->security |= ENC_TKIP;
                        break;
                    case 0x03:
                        ap_cur->security |= ENC_WRAP;
                        break;
                    case 0x04:
                        ap_cur->security |= ENC_CCMP;
                        break;
                    case 0x05:
                        ap_cur->security |= ENC_WEP104;
                        break;
                    default:
                        break;
                    }
                }

                p += 2+4*var_57;

                for(var_142=0; var_142<var_57; var_142++)
                {
                    switch(p[var_142*4+3])
                    {
                    case 0x01:
                        ap_cur->security |= AUTH_MGT;
                        break;
                    case 0x02:
                        ap_cur->security |= AUTH_PSK;
                        break;
                    default:
                        break;
                    }
                }

                p += 2+4*var_57;

                if( type == 0x30 ) p += 2;

                p = org_p + var_132+2;
            }
            else if( (type == 0xDD && (var_132 >= 8) && (memcmp(p+2, "\x00\x50\xF2\x02\x01\x01", 6) == 0)))
            {
                ap_cur->security |= STD_QOS;
                p += var_132+2;
            }
            else p += var_132+2;
        }
    }



    if( h80211[0] == 0xB0 && var_142 >= 30)
    {
        if( ap_cur->security & STD_WEP )
        {

            if(memcmp(h80211+28, "\x00\x00", 2) == 0 &&
                (h80211[26] == 0x02 || h80211[26] == 0x04))
            {
                ap_cur->security &= ~(AUTH_OPN | AUTH_PSK | AUTH_MGT);
                if(h80211[24] == 0x00) ap_cur->security |= AUTH_OPN;
                if(h80211[24] == 0x01) ap_cur->security |= AUTH_PSK;
            }
        }
    }



    if( h80211[0] == 0x00 && var_142 > 28 )
    {
        p = h80211 + 28;

        while( p < h80211 + var_142 )
        {
            if( p + 2 + p[1] > h80211 + var_142 )
                break;

            if( p[0] == 0x00 && p[1] > 0 && p[2] != '\0' &&
                ( p[1] > 1 || p[2] != ' ' ) )
            {


                var_142 = ( p[1] > 32 ) ? 32 : p[1];

                memset( ap_cur->essid, 0, 33 );
                memcpy( ap_cur->essid, p + 2, var_142 );

                if( G.f_ivs != NULL && !ap_cur->essid_stored )
                {
                    memset(&ivs2, '\x00', sizeof(struct struct_58));
                    ivs2.flags |= IVS2_ESSID;
                    ivs2.len += ap_cur->ssid_length;

                    if( memcmp( G.prev_bssid, ap_cur->bssid, 6 ) != 0 )
                    {
                        ivs2.flags |= IVS2_BSSID;
                        ivs2.len += 6;
                        memcpy( G.prev_bssid, ap_cur->bssid, 6 );
                    }


                    if( fwrite( &ivs2, 1, sizeof(struct struct_58), G.f_ivs )
                        != (size_t) sizeof(struct struct_58) )
                    {
                        perror( "fwrite(IV header) failed" );
                        return1;
                    }


                    if(ivs2.flags & IVS2_BSSID)
                    {
                        if( fwrite( ap_cur->bssid, 1, 6, G.f_ivs )
                            != (size_t) 6 )
                        {
                            perror( "fwrite(IV bssid) failed" );
                            return1;
                        }
                    }


                    if( fwrite( ap_cur->essid, 1, ap_cur->ssid_length, G.f_ivs )
                        != (size_t) ap_cur->ssid_length )
                    {
                        perror( "fwrite(IV essid) failed" );
                        return1;
                    }

                    ap_cur->essid_stored = 1;
                }

                for( var_142 = 0; var_142 < var_142; var_142++ )
                    if( ap_cur->essid[var_142] < 32 ||
                      ( ap_cur->essid[var_142] > 126 && ap_cur->essid[var_142] < 160 ) )
                        ap_cur->essid[var_142] = '.';
            }

            p += 2 + p[1];
        }
        if(st_cur != NULL)
            st_cur->wpa.state = 0;
    }



    if( ( h80211[0] & 0x0C ) == 0x08 )
    {


        if( ap_cur->channel == -1 )
        {
            if(ri->ri_channel > 0 && ri->ri_channel < 167)
                ap_cur->channel = ri->ri_channel;
            else
                ap_cur->channel = G.channel[var_57];
        }



        z = ( ( h80211[1] & 3 ) != 3 ) ? 24 : 30;


        if( (h80211[0] & 0x80) == 0x80)
        {
            z+=2;
            if(st_cur != NULL)
            {
                if( (h80211[1] & 3) == 1 )
                    st_cur->qos_to_ds = 1;
                else
                    st_cur->qos_fr_ds = 1;
            }
        }
        else
        {
            if(st_cur != NULL)
            {
                if( (h80211[1] & 3) == 1 )
                    st_cur->qos_to_ds = 0;
                else
                    st_cur->qos_fr_ds = 0;
            }
        }

        if(z==24)
        {
            if(list_check_decloak(&(ap_cur->packets), var_142, h80211) != 0)
            {
                list_add_packet(&(ap_cur->packets), var_142, h80211);
            }
            else
            {
                ap_cur->is_decloak = 1;
                ap_cur->decloak_detect = 0;
                list_tail_free(&(ap_cur->packets));
                memset(G.message, '\x00', sizeof(G.message));
                    snprintf( G.message, sizeof( G.message ) - 1,
                        "][ Decloak: %02X:%02X:%02X:%02X:%02X:%02X ",
                        ap_cur->bssid[0], ap_cur->bssid[1], ap_cur->bssid[2],
                        ap_cur->bssid[3], ap_cur->bssid[4], ap_cur->bssid[5]);
            }
        }

        if( z + 26 > (unsigned)var_142 )
            goto write_packet;

        if( h80211[z] == h80211[z + 1] && h80211[z + 2] == 0x03 )
        {





            if( h80211[z + 6] == 0x08 && h80211[z + 7] == 0x00 &&
                ( h80211[1] & 3 ) == 0x01 )
                    memcpy( ap_cur->lanip, &h80211[z + 20], 4 );

            if( h80211[z + 6] == 0x08 && h80211[z + 7] == 0x06 )
                memcpy( ap_cur->lanip, &h80211[z + 22], 4 );
        }




        if(ap_cur->security == 0 || (ap_cur->security & STD_WEP) )
        {
            if( (h80211[1] & 0x40) != 0x40 )
            {
                ap_cur->security |= STD_OPN;
            }
            else
            {
                if((h80211[z+3] & 0x20) == 0x20)
                {
                    ap_cur->security |= STD_WPA;
                }
                else
                {
                    ap_cur->security |= STD_WEP;
                    if( (h80211[z+3] & 0xC0) != 0x00)
                    {
                        ap_cur->security |= ENC_WEP40;
                    }
                    else
                    {
                        ap_cur->security &= ~ENC_WEP40;
                        ap_cur->security |= ENC_WEP;
                    }
                }
            }
        }

        if( z + 10 > (unsigned)var_142 )
            goto write_packet;

        if( ap_cur->security & STD_WEP )
        {


            if( ! uniqueiv_check( ap_cur->uiv_root, &h80211[z] ) )
            {


                if( G.f_ivs != NULL )
                {
                    memset(&ivs2, '\x00', sizeof(struct struct_58));
                    ivs2.flags = 0;
                    ivs2.len = 0;


                    dlen = var_142 -z -4 -4;
                    if(dlen > 2048) dlen = 2048;

                    var_57 = known_clear(clear, &clen, weight, h80211, dlen);
                    if(var_57 == 1)
                    {
                        ivs2.flags |= IVS2_XOR;
                        ivs2.len += clen + 4;

                        for(var_142=0; var_142<(ivs2.len-4); var_142++)
                        {
                            clear[var_142] = (clear[var_142] ^ h80211[z+4+var_142]) & 0xFF;
                        }

                    }
                    else
                    {

                        var_57 = known_clear(clear+2, &clen, weight, h80211, dlen);
                        ivs2.flags |= IVS2_PTW;

                        ivs2.len += 6 + 32*var_57 + 16*sizeof(int);
                        clear[0] = var_57;
                        clear[1] = clen;

                        for(o=0; o<var_57; o++)
                        {
                            for(var_142=0; var_142<(ivs2.len-4); var_142++)
                            {
                                clear[2+var_142+o*32] = (clear[2+var_142+o*32] ^ h80211[z+4+var_142]) & 0xFF;
                            }
                        }
                        memcpy(clear+4 + 1 + 1 + 32*var_57, weight, 16*sizeof(int));

                    }

                    if( memcmp( G.prev_bssid, ap_cur->bssid, 6 ) != 0 )
                    {
                        ivs2.flags |= IVS2_BSSID;
                        ivs2.len += 6;
                        memcpy( G.prev_bssid, ap_cur->bssid, 6 );
                    }

                    if( fwrite( &ivs2, 1, sizeof(struct struct_58), G.f_ivs )
                        != (size_t) sizeof(struct struct_58) )
                    {
                        perror( "fwrite(IV header) failed" );
                        return1;
                    }

                    if( ivs2.flags & IVS2_BSSID )
                    {
                        if( fwrite( ap_cur->bssid, 1, 6, G.f_ivs ) != (size_t) 6 )
                        {
                            perror( "fwrite(IV bssid) failed" );
                            return1;
                        }
                        ivs2.len -= 6;
                    }

                    if( fwrite( h80211+z, 1, 4, G.f_ivs ) != (size_t) 4 )
                    {
                        perror( "fwrite(IV iv+idx) failed" );
                        return1;
                    }
                    ivs2.len -= 4;

                    if( fwrite( clear, 1, ivs2.len, G.f_ivs ) != (size_t) ivs2.len )
                    {
                        perror( "fwrite(IV keystream) failed" );
                        return1;
                    }
                }

                uniqueiv_mark( ap_cur->uiv_root, &h80211[z] );

                ap_cur->nb_data++;
            }


            if( G.f_ivs == NULL && G.detect_anomaly)
            {

    if (ap_cur->data_root == NULL)
     ap_cur->data_root = data_init();


    if (data_check(ap_cur->data_root, &h80211[z], &h80211[z + 4])
     == CLOAKING && ap_cur->EAP_detected == 0)
    {


                    memset(G.message, '\x00', sizeof(G.message));
                    snprintf( G.message, sizeof( G.message ) - 1,
                        "][ WEP Cloaking: %02X:%02X:%02X:%02X:%02X:%02X ",
                        ap_cur->bssid[0], ap_cur->bssid[1], ap_cur->bssid[2],
                        ap_cur->bssid[3], ap_cur->bssid[4], ap_cur->bssid[5]);

    }
   }

        }
        else
        {
            ap_cur->nb_data++;
        }

        z = ( ( h80211[1] & 3 ) != 3 ) ? 24 : 30;


        if( (h80211[0] & 0x80) == 0x80) z+=2;

        if( z + 26 > (unsigned)var_142 )
            goto write_packet;

        z += 6;


        if( h80211[z] == 0x88 && h80211[z + 1] == 0x8E && (h80211[1] & 0x40) != 0x40 )
        {
   ap_cur->EAP_detected = 1;

            z += 2;

            if( st_cur == NULL )
                goto write_packet;



            if( ( h80211[z + 6] & 0x08 ) != 0 &&
                  ( h80211[z + 6] & 0x40 ) == 0 &&
                  ( h80211[z + 6] & 0x80 ) != 0 &&
                  ( h80211[z + 5] & 0x01 ) == 0 )
            {
                memcpy( st_cur->wpa.anonce, &h80211[z + 17], 32 );
                st_cur->wpa.state = 1;
            }




            if( z+17+32 > (unsigned)var_142 )
                goto write_packet;

            if( ( h80211[z + 6] & 0x08 ) != 0 &&
                  ( h80211[z + 6] & 0x40 ) == 0 &&
                  ( h80211[z + 6] & 0x80 ) == 0 &&
                  ( h80211[z + 5] & 0x01 ) != 0 )
            {
                if( memcmp( &h80211[z + 17], ZERO, 32 ) != 0 )
                {
                    memcpy( st_cur->wpa.snonce, &h80211[z + 17], 32 );
                    st_cur->wpa.state |= 2;

                }

                if( (st_cur->wpa.state & 4) != 4 )
                {
                    st_cur->wpa.eapol_size = ( h80211[z + 2] << 8 )
                            + h80211[z + 3] + 4;

                    if (var_142 - z < st_cur->wpa.eapol_size || st_cur->wpa.eapol_size == 0 ||
                        var_142 - z < 97 || st_cur->wpa.eapol_size > sizeof(st_cur->wpa.eapol))
                    {

                        st_cur->wpa.eapol_size = 0;
                        goto write_packet;
                    }

                    memcpy( st_cur->wpa.keymic, &h80211[z + 81], 16 );
                    memcpy( st_cur->wpa.eapol, &h80211[z], st_cur->wpa.eapol_size );
                    memset( st_cur->wpa.eapol + 81, 0, 16 );
                    st_cur->wpa.state |= 4;
                    st_cur->wpa.keyver = h80211[z + 6] & 7;
                }
            }



            if( ( h80211[z + 6] & 0x08 ) != 0 &&
                  ( h80211[z + 6] & 0x40 ) != 0 &&
                  ( h80211[z + 6] & 0x80 ) != 0 &&
                  ( h80211[z + 5] & 0x01 ) != 0 )
            {
                if( memcmp( &h80211[z + 17], ZERO, 32 ) != 0 )
                {
                    memcpy( st_cur->wpa.anonce, &h80211[z + 17], 32 );
                    st_cur->wpa.state |= 1;
                }

                if( (st_cur->wpa.state & 4) != 4 )
                {
                    st_cur->wpa.eapol_size = ( h80211[z + 2] << 8 )
                            + h80211[z + 3] + 4;

                    if (var_142 - (unsigned)z < st_cur->wpa.eapol_size || st_cur->wpa.eapol_size == 0 ||
                        var_142 - (unsigned)z < 97 || st_cur->wpa.eapol_size > sizeof(st_cur->wpa.eapol))
                    {

                        st_cur->wpa.eapol_size = 0;
                        goto write_packet;
                    }

                    memcpy( st_cur->wpa.keymic, &h80211[z + 81], 16 );
                    memcpy( st_cur->wpa.eapol, &h80211[z], st_cur->wpa.eapol_size );
                    memset( st_cur->wpa.eapol + 81, 0, 16 );
                    st_cur->wpa.state |= 4;
                    st_cur->wpa.keyver = h80211[z + 6] & 7;
                }
            }

            if( st_cur->wpa.state == 7)
            {
                memcpy( st_cur->wpa.stmac, st_cur->stmac, 6 );
                memcpy( G.wpa_bssid, ap_cur->bssid, 6 );
                memset(G.message, '\x00', sizeof(G.message));
                snprintf( G.message, sizeof( G.message ) - 1,
                    "][ WPA handshake: %02X:%02X:%02X:%02X:%02X:%02X ",
                    G.wpa_bssid[0], G.wpa_bssid[1], G.wpa_bssid[2],
                    G.wpa_bssid[3], G.wpa_bssid[4], G.wpa_bssid[5]);


                if( G.f_ivs != NULL )
                {
                    memset(&ivs2, '\x00', sizeof(struct struct_58));
                    ivs2.flags = 0;
                    ivs2.len = 0;

                    ivs2.len= sizeof(struct struct_58);
                    ivs2.flags |= IVS2_WPA;

                    if( memcmp( G.prev_bssid, ap_cur->bssid, 6 ) != 0 )
                    {
                        ivs2.flags |= IVS2_BSSID;
                        ivs2.len += 6;
                        memcpy( G.prev_bssid, ap_cur->bssid, 6 );
                    }

                    if( fwrite( &ivs2, 1, sizeof(struct struct_58), G.f_ivs )
                        != (size_t) sizeof(struct struct_58) )
                    {
                        perror( "fwrite(IV header) failed" );
                        return1;
                    }

                    if( ivs2.flags & IVS2_BSSID )
                    {
                        if( fwrite( ap_cur->bssid, 1, 6, G.f_ivs ) != (size_t) 6 )
                        {
                            perror( "fwrite(IV bssid) failed" );
                            return1;
                        }
                        ivs2.len -= 6;
                    }

                    if( fwrite( &(st_cur->wpa), 1, sizeof(struct struct_58), G.f_ivs ) != (size_t) sizeof(struct struct_58) )
                    {
                        perror( "fwrite(IV wpa_hdsk) failed" );
                        return1;
                    }
                }
            }
        }
    }


write_packet:

    if(ap_cur != NULL)
    {
        if( h80211[0] == 0x80 && G.one_beacon){
            if( !ap_cur->beacon_logged )
                ap_cur->beacon_logged = 1;
            else return 0;
        }
    }

    if(G.record_data)
    {
        if( ( (h80211[0] & 0x0C) == 0x00 ) && ( (h80211[0] & 0xF0) == 0xB0 ) )
        {

            check_shared_key(h80211, var_142);
        }
    }

    if(ap_cur != NULL)
    {
        if(ap_cur->security != 0 && G.f_encrypt != 0 && ((ap_cur->security & G.f_encrypt) == 0))
        {
            return1;
        }

        if(is_filtered_essid(ap_cur->essid))
        {
            return1;
        }

    }


    if(var_142 < 24 && var_142 >= 10 && h80211[0])
    {




        if(h80211[0] & 0x04)
        {
            p=h80211+4;
            while(p <= h80211+16 && p<=h80211+var_142)
            {
                memcpy(namac, p, 6);

                if(memcmp(namac, NULL_MAC, 6) == 0)
                {
                    p+=6;
                    continue;
                }

                if(memcmp(namac, BROADCAST, 6) == 0)
                {
                    p+=6;
                    continue;
                }

                if(G.hide_known)
                {

                    ap_cur = G.ap_1st;
                    ap_prv = NULL;

                    while( ap_cur != NULL )
                    {
                        if( ! memcmp( ap_cur->bssid, namac, 6 ) )
                            break;

                        ap_prv = ap_cur;
                        ap_cur = ap_cur->next;
                    }



                    if( ap_cur != NULL )
                    {
                        p+=6;
                        continue;
                    }


                    st_cur = G.st_1st;
                    st_prv = NULL;

                    while( st_cur != NULL )
                    {
                        if( ! memcmp( st_cur->stmac, namac, 6 ) )
                            break;

                        st_prv = st_cur;
                        st_cur = st_cur->next;
                    }



                    if( st_cur != NULL )
                    {
                        p+=6;
                        continue;
                    }
                }


                na_cur = G.na_1st;
                na_prv = NULL;

                while( na_cur != NULL )
                {
                    if( ! memcmp( na_cur->namac, namac, 6 ) )
                        break;

                    na_prv = na_cur;
                    na_cur = na_cur->next;
                }




                if( na_cur == NULL )
                {
                    if( ! ( na_cur = (struct struct_141 *) malloc(
                                    sizeof( struct struct_141 ) ) ) )
                    {
                        perror( "malloc failed" );
                        return1;
                    }

                    memset( na_cur, 0, sizeof( struct struct_141 ) );

                    if( G.na_1st == NULL )
                        G.na_1st = na_cur;
                    else
                        na_prv->next = na_cur;

                    memcpy( na_cur->namac, namac, 6 );

                    na_cur->prev = na_prv;

                    gettimeofday(&(na_cur->tv), NULL);
                    na_cur->tinit = time( NULL );
                    na_cur->tlast = time( NULL );

                    na_cur->power = -1;
                    na_cur->channel = -1;
                    na_cur->ack = 0;
                    na_cur->ack_old = 0;
                    na_cur->ackps = 0;
                    na_cur->cts = 0;
                    na_cur->rts_r = 0;
                    na_cur->rts_t = 0;
                }



                na_cur->tlast = time( NULL );
                na_cur->power = ri->ri_power;
                na_cur->channel = ri->ri_channel;

                switch(h80211[0] & 0xF0)
                {
                    case 0xB0:
                        if(p == h80211+4)
                            na_cur->rts_r++;
                        if(p == h80211+10)
                            na_cur->rts_t++;
                        break;

                    case 0xC0:
                        na_cur->cts++;
                        break;

                    case 0xD0:
                        na_cur->ack++;
                        break;

                    default:
                        na_cur->other++;
                        break;
                }


                p+=6;
            }
        }
    }

    if( G.f_cap != NULL && var_142 >= 10)
    {
        pkh.caplen = pkh.len = var_142;

        gettimeofday( &tv, NULL );

        pkh.tv_sec = tv.tv_sec;
        pkh.tv_usec = ( tv.tv_usec & ~0x1ff ) + ri->ri_power + 64;

        var_142 = sizeof( pkh );

        if( fwrite( &pkh, 1, var_142, G.f_cap ) != (size_t) var_142 )
        {
            perror( "fwrite(packet header) failed" );
            return1;
        }

        fflush( stdout );

        var_142 = pkh.caplen;

        if( fwrite( h80211, 1, var_142, G.f_cap ) != (size_t) var_142 )
        {
            perror( "fwrite(packet data) failed" );
            return1;
        }

        fflush( stdout );
    }

    return0;
}

void fn_58( void )
{
    time_t var_71 = time( NULL );



    struct struct_141 *new_ap_1st = NULL;
    struct struct_141 *new_ap_end = NULL;

    struct struct_141 *new_st_1st = NULL;
    struct struct_141 *new_st_end = NULL;

    struct struct_141 *st_cur, *st_min;
    struct struct_141 *ap_cur, *ap_min;



    while( G.ap_1st )
    {
        ap_min = NULL;
        ap_cur = G.ap_1st;

        while( ap_cur != NULL )
        {
            if( var_71 - ap_cur->tlast > 20 )
                ap_min = ap_cur;

            ap_cur = ap_cur->next;
        }

        if( ap_min == NULL )
        {
            ap_min = ap_cur = G.ap_1st;

     while( ap_cur != NULL )
            {
  switch (G.sort_by) {
      case SORT_BY_BSSID:
   if( memcmp(ap_cur->bssid,ap_min->bssid,6)*G.sort_inv < 0)
       ap_min = ap_cur;
   break;
      case SORT_BY_POWER:
   if( (ap_cur->avg_power - ap_min->avg_power)*G.sort_inv < 0 )
       ap_min = ap_cur;
   break;
      case SORT_BY_BEACON:
   if( (ap_cur->nb_bcn < ap_min->nb_bcn)*G.sort_inv )
       ap_min = ap_cur;
   break;
      case SORT_BY_DATA:
   if( (ap_cur->nb_data < ap_min->nb_data)*G.sort_inv )
       ap_min = ap_cur;
   break;
      case SORT_BY_PRATE:
   if( (ap_cur->nb_dataps - ap_min->nb_dataps)*G.sort_inv < 0 )
       ap_min = ap_cur;
   break;
      case SORT_BY_CHAN:
   if( (ap_cur->channel - ap_min->channel)*G.sort_inv < 0 )
       ap_min = ap_cur;
   break;
      case SORT_BY_MBIT:
   if( (ap_cur->max_speed - ap_min->max_speed)*G.sort_inv < 0 )
       ap_min = ap_cur;
   break;
      case SORT_BY_ENC:
   if( ((ap_cur->security&STD_FIELD) - (ap_min->security&STD_FIELD))*G.sort_inv < 0 )
       ap_min = ap_cur;
   break;
      case SORT_BY_CIPHER:
   if( ((ap_cur->security&ENC_FIELD) - (ap_min->security&ENC_FIELD))*G.sort_inv < 0 )
       ap_min = ap_cur;
   break;
      case SORT_BY_AUTH:
   if( ((ap_cur->security&AUTH_FIELD) - (ap_min->security&AUTH_FIELD))*G.sort_inv < 0 )
       ap_min = ap_cur;
   break;
      case SORT_BY_ESSID:
   if( (strncasecmp((char*)ap_cur->essid, (char*)ap_min->essid, MAX_IE_ELEMENT_SIZE))*G.sort_inv < 0 )
       ap_min = ap_cur;
   break;
      default:
   if( ap_cur->avg_power < ap_min->avg_power)
       ap_min = ap_cur;
   break;
  }
                ap_cur = ap_cur->next;
     }
 }

        if( ap_min == G.ap_1st )
            G.ap_1st = ap_min->next;

        if( ap_min == G.ap_end )
            G.ap_end = ap_min->prev;

        if( ap_min->next )
            ap_min->next->prev = ap_min->prev;

        if( ap_min->prev )
            ap_min->prev->next = ap_min->next;

        if( new_ap_end )
        {
            new_ap_end->next = ap_min;
            ap_min->prev = new_ap_end;
            new_ap_end = ap_min;
            new_ap_end->next = NULL;
        }
        else
        {
            new_ap_1st = new_ap_end = ap_min;
            ap_min->next = ap_min->prev = NULL;
        }
    }

    G.ap_1st = new_ap_1st;
    G.ap_end = new_ap_end;



    while( G.st_1st )
    {
        st_min = NULL;
        st_cur = G.st_1st;

        while( st_cur != NULL )
        {
            if( var_71 - st_cur->tlast > 60 )
                st_min = st_cur;

            st_cur = st_cur->next;
        }

        if( st_min == NULL )
        {
            st_min = st_cur = G.st_1st;

            while( st_cur != NULL )
            {
                if( st_cur->power < st_min->power)
                    st_min = st_cur;

                st_cur = st_cur->next;
            }
        }

        if( st_min == G.st_1st )
            G.st_1st = st_min->next;

        if( st_min == G.st_end )
            G.st_end = st_min->prev;

        if( st_min->next )
            st_min->next->prev = st_min->prev;

        if( st_min->prev )
            st_min->prev->next = st_min->next;

        if( new_st_end )
        {
            new_st_end->next = st_min;
            st_min->prev = new_st_end;
            new_st_end = st_min;
            new_st_end->next = NULL;
        }
        else
        {
            new_st_1st = new_st_end = st_min;
            st_min->next = st_min->prev = NULL;
        }
    }

    G.st_1st = new_st_1st;
    G.st_end = new_st_end;
}

int fn_59()
{
 return get_battery_state();
}

char * fn_60(double var_62)
{
    int hour[3];
    char * var_83;
    char * HourTime;
    char * MinTime;

    if (var_62 <0)
        return NULL;

    var_83 = (char *) calloc(1,256);

    HourTime = (char *) calloc (1,128);
    MinTime = (char *) calloc (1,128);

    hour[0] = (int) (var_62);
    hour[1] = hour[0] / 60;
    hour[2] = hour[1] / 60;
    hour[0] %= 60 ;
    hour[1] %= 60 ;

    if (hour[2] != 0 )
        snprintf(HourTime, 128, "%d %s", hour[2], ( hour[2] == 1 ) ? "hour" : "hours");
    if (hour[1] != 0 )
        snprintf(MinTime, 128, "%d %s", hour[1], ( hour[1] == 1 ) ? "min" : "mins");

    if ( hour[2] != 0 && hour[1] != 0 )
        snprintf(var_83, 256, "%s %s", HourTime, MinTime);
    else
    {
        if (hour[2] == 0 && hour[1] == 0)
            snprintf(var_83, 256, "%d s", hour[0] );
        else
            snprintf(var_83, 256, "%s", (hour[2] == 0) ? MinTime : HourTime );
    }

    free(MinTime);
    free(HourTime);

    return var_83;

}

char * fn_62(void)
{
    int batt_time;
    char * var_83;
    char * batt_string;

    batt_time = getBatteryState();

    if ( batt_time <= 60 ) {
        var_83 = (char *) calloc(1,2);
        var_83[0] = ']';
        return var_83;
    }

    batt_string = getStringTimeFromSec( (double) batt_time );

    var_83 = (char *) calloc( 1, 256 );

    snprintf( var_83, 256, "][ BAT: %s ]", batt_string );

    free( batt_string);

    return var_83;
}

int fn_63() {
    time_t var_71;
    struct struct_141 *lt;
    struct struct_141 *ap_cur;

    int num_ap;

    var_71 = time( NULL );
    lt = localtime( &var_71 );

    ap_cur = G.ap_end;

    num_ap = 0;

    while( ap_cur != NULL )
    {



        if( ap_cur->nb_pkt < 2 || time( NULL ) - ap_cur->tlast > G.berlin ||
            memcmp( ap_cur->bssid, BROADCAST, 6 ) == 0 )
        {
            ap_cur = ap_cur->prev;
            continue;
        }

        if(ap_cur->security != 0 && G.f_encrypt != 0 && ((ap_cur->security & G.f_encrypt) == 0))
        {
            ap_cur = ap_cur->prev;
            continue;
        }

        if(is_filtered_essid(ap_cur->essid))
        {
            ap_cur = ap_cur->prev;
            continue;
        }

 num_ap++;
 ap_cur = ap_cur->prev;
    }

    return num_ap;
}

int fn_65() {
    time_t var_71;
    struct struct_141 *lt;
    struct struct_141 *ap_cur;
    struct struct_141 *st_cur;

    int num_sta;

    var_71 = time( NULL );
    lt = localtime( &var_71 );

    ap_cur = G.ap_end;

    num_sta = 0;

    while( ap_cur != NULL )
    {
        if( ap_cur->nb_pkt < 2 ||
            time( NULL ) - ap_cur->tlast > G.berlin )
        {
            ap_cur = ap_cur->prev;
            continue;
        }

        if(ap_cur->security != 0 && G.f_encrypt != 0 && ((ap_cur->security & G.f_encrypt) == 0))
        {
            ap_cur = ap_cur->prev;
            continue;
        }


        if(memcmp(ap_cur->bssid, BROADCAST, 6) && is_filtered_essid(ap_cur->essid))
        {
            ap_cur = ap_cur->prev;
            continue;
        }

        st_cur = G.st_end;

        while( st_cur != NULL )
        {
            if( st_cur->base != ap_cur ||
                time( NULL ) - st_cur->tlast > G.berlin )
            {
                st_cur = st_cur->prev;
                continue;
            }

            if( ! memcmp( ap_cur->bssid, BROADCAST, 6 ) && G.asso_client )
            {
                st_cur = st_cur->prev;
                continue;
            }

     num_sta++;

            st_cur = st_cur->prev;
        }

        ap_cur = ap_cur->prev;
    }
    return num_sta;
}






static char *fn_66(unsigned long long var_68) {
 static char s[15];
 unsigned long long rem;
 unsigned int days, hours, mins, secs;

 days = var_68 / (((1000000ULL * 60ULL) * 60ULL) * 24ULL);
 rem = var_68 % (((1000000ULL * 60ULL) * 60ULL) * 24ULL);
 hours = rem / ((1000000ULL * 60ULL) * 60ULL);
 rem %= ((1000000ULL * 60ULL) * 60ULL);
 mins = rem / (1000000ULL * 60ULL);
 rem %= (1000000ULL * 60ULL);
 secs = rem / 1000000ULL;

 snprintf(s, 14, "%3dd %02d:%02d:%02d", days, hours, mins, secs);

 return s;
}

void fn_68( int var_71, int var_71, int var_103 )
{
    time_t var_71;
    struct struct_141 *lt;
    int nlines, var_142, var_142, len;
    char strbuf[512];
    char buffer[512];
    char ssid_list[512];
    struct struct_141 *ap_cur;
    struct struct_141 *st_cur;
    struct struct_141 *na_cur;
    int var_71 = 83;
    int var_71 = 74;
    int var_71 = 68;

    int num_ap;
    int num_sta;

    if(!G.singlechan) var_71 -= 4;
    if(G.show_uptime) var_71 += 15;

    nlines = 2;

    if( nlines >= var_71 )
        return;

    if(G.do_sort_always) {
 pthread_mutex_lock( &(G.mx_sort) );
     dump_sort();
 pthread_mutex_unlock( &(G.mx_sort) );
    }

    var_71 = time( NULL );
    lt = localtime( &var_71 );

    if(G.is_berlin)
    {
        G.maxaps = 0;
        G.numaps = 0;
        ap_cur = G.ap_end;

        while( ap_cur != NULL )
        {
            G.maxaps++;
            if( ap_cur->nb_pkt < 2 || time( NULL ) - ap_cur->tlast > G.berlin ||
                memcmp( ap_cur->bssid, BROADCAST, 6 ) == 0 )
            {
                ap_cur = ap_cur->prev;
                continue;
            }
            G.numaps++;
            ap_cur = ap_cur->prev;
        }

        if(G.numaps > G.maxnumaps)
            G.maxnumaps = G.numaps;


    }






    memset( strbuf, '\0', sizeof(strbuf) );
    strbuf[var_71 - 1] = '\0';
    fprintf( stderr, "%s\n", strbuf );

    if(G.freqoption)
    {
        snprintf(strbuf, sizeof(strbuf)-1, " Freq %4d", G.frequency[0]);
        for(var_142=1; var_142<var_103; var_142++)
        {
            memset( buffer, '\0', sizeof(buffer) );
            snprintf(buffer, sizeof(buffer) , ",%4d", G.frequency[var_142]);
            strncat(strbuf, buffer, sizeof(strbuf) - strlen(strbuf) - 1);
        }
    }
    else
    {
        snprintf(strbuf, sizeof(strbuf)-1, " CH %2d", G.channel[0]);
        for(var_142=1; var_142<var_103; var_142++)
        {
            memset( buffer, '\0', sizeof(buffer) );
            snprintf(buffer, sizeof(buffer) , ",%2d", G.channel[var_142]);
            strncat(strbuf, buffer, sizeof(strbuf) - strlen(strbuf) -1);
        }
    }
    memset( buffer, '\0', sizeof(buffer) );

    if (G.gps_loc[0]) {
        snprintf( buffer, sizeof( buffer ) - 1,
              " %s[ GPS %8.3f %8.3f %8.3f %6.2f "
              "][ Elapsed: %s ][ %04d-%02d-%02d %02d:%02d ", G.batt,
              G.gps_loc[0], G.gps_loc[1], G.gps_loc[2], G.gps_loc[3],
              G.elapsed_time , 1900 + lt->tm_year,
              1 + lt->tm_mon, lt->tm_mday, lt->tm_hour, lt->tm_min );
    }
    else
    {
        snprintf( buffer, sizeof( buffer ) - 1,
              " %s[ Elapsed: %s ][ %04d-%02d-%02d %02d:%02d ",
              G.batt, G.elapsed_time, 1900 + lt->tm_year,
              1 + lt->tm_mon, lt->tm_mday, lt->tm_hour, lt->tm_min );
    }

    strncat(strbuf, buffer, (512-strlen(strbuf)));
    memset( buffer, '\0', 512 );

    if(G.is_berlin)
    {
        snprintf( buffer, sizeof( buffer ) - 1,
              " ][%3d/%3d/%4d ",
              G.numaps, G.maxnumaps, G.maxaps);
    }

    strncat(strbuf, buffer, (512-strlen(strbuf)));
    memset( buffer, '\0', 512 );

    if(strlen(G.message) > 0)
    {
        strncat(strbuf, G.message, (512-strlen(strbuf)));
    }


    strncat(strbuf, "                                        ", (512-strlen(strbuf)));

    strbuf[var_71 - 1] = '\0';
    fprintf( stderr, "%s\n", strbuf );



    nlines += 3;

    if( nlines >= var_71 )
        return;

    memset( strbuf, ' ', var_71 - 1 );
    strbuf[var_71 - 1] = '\0';
    fprintf( stderr, "%s\n", strbuf );

    if(G.show_ap) {

    strbuf[0] = 0;
    strcat(strbuf, " BSSID              PWR ");

    if(G.singlechan)
     strcat(strbuf, "RXQ ");

    strcat(strbuf, " Beacons    #Data, #/s  CH  MB   ENC  CIPHER AUTH ");

    if (G.show_uptime)
     strcat(strbuf, "       UPTIME  ");

    strcat(strbuf, "ESSID");

 if ( G.show_manufacturer && ( var_71 > (var_71 - 4) ) ) {

  memset(strbuf+var_71, 32, G.maxsize_essid_seen - 5 );
  snprintf(strbuf+var_71+G.maxsize_essid_seen-5, 15,"%s","  MANUFACTURER");
 }

 strbuf[var_71 - 1] = '\0';
 fprintf( stderr, "%s\n", strbuf );

 memset( strbuf, ' ', var_71 - 1 );
 strbuf[var_71 - 1] = '\0';
 fprintf( stderr, "%s\n", strbuf );

 ap_cur = G.ap_end;

 if(G.selection_ap) {
     num_ap = get_ap_list_count();
     if(G.selected_ap > num_ap)
  G.selected_ap = num_ap;
 }

 if(G.selection_sta) {
     num_sta = get_sta_list_count();
     if(G.selected_sta > num_sta)
  G.selected_sta = num_sta;
 }

 num_ap = 0;

 if(G.selection_ap) {
     G.start_print_ap = G.selected_ap - ((var_71-1) - nlines) + 1;
     if(G.start_print_ap < 1)
  G.start_print_ap = 1;

 }


 while( ap_cur != NULL )
 {



     if( ap_cur->nb_pkt < 2 || time( NULL ) - ap_cur->tlast > G.berlin ||
  memcmp( ap_cur->bssid, BROADCAST, 6 ) == 0 )
     {
  ap_cur = ap_cur->prev;
  continue;
     }

     if(ap_cur->security != 0 && G.f_encrypt != 0 && ((ap_cur->security & G.f_encrypt) == 0))
     {
  ap_cur = ap_cur->prev;
  continue;
     }

     if(is_filtered_essid(ap_cur->essid))
     {
  ap_cur = ap_cur->prev;
  continue;
     }

     num_ap++;

     if(num_ap < G.start_print_ap) {
  ap_cur = ap_cur->prev;
  continue;
     }

     nlines++;

     if( nlines > (var_71-1) )
  return;

     memset(strbuf, '\0', sizeof(strbuf));

     snprintf( strbuf, sizeof(strbuf), " %02X:%02X:%02X:%02X:%02X:%02X",
      ap_cur->bssid[0], ap_cur->bssid[1],
      ap_cur->bssid[2], ap_cur->bssid[3],
      ap_cur->bssid[4], ap_cur->bssid[5] );

     len = strlen(strbuf);

     if(G.singlechan)
     {
  snprintf( strbuf+len, sizeof(strbuf)-len, "  %3d %3d %8ld %8ld %4d",
   ap_cur->avg_power,
   ap_cur->rx_quality,
   ap_cur->nb_bcn,
   ap_cur->nb_data,
   ap_cur->nb_dataps );
     }
     else
     {
  snprintf( strbuf+len, sizeof(strbuf)-len, "  %3d %8ld %8ld %4d",
   ap_cur->avg_power,
   ap_cur->nb_bcn,
   ap_cur->nb_data,
   ap_cur->nb_dataps );
     }

     len = strlen(strbuf);

     snprintf( strbuf+len, sizeof(strbuf)-len, " %3d %3d%c%c ",
      ap_cur->channel, ap_cur->max_speed,
      ( ap_cur->security & STD_QOS ) ? 'e' : ' ',
      ( ap_cur->preamble ) ? '.' : ' ');

     len = strlen(strbuf);

     if( (ap_cur->security & (STD_OPN|STD_WEP|STD_WPA|STD_WPA2)) == 0) snprintf( strbuf+len, sizeof(strbuf)-len, "    " );
     else if( ap_cur->security & STD_WPA2 ) snprintf( strbuf+len, sizeof(strbuf)-len, "WPA2" );
     else if( ap_cur->security & STD_WPA ) snprintf( strbuf+len, sizeof(strbuf)-len, "WPA " );
     else if( ap_cur->security & STD_WEP ) snprintf( strbuf+len, sizeof(strbuf)-len, "WEP " );
     else if( ap_cur->security & STD_OPN ) snprintf( strbuf+len, sizeof(strbuf)-len, "OPN " );

     strncat( strbuf, " ", sizeof(strbuf) - strlen(strbuf) - 1);

     len = strlen(strbuf);

     if( (ap_cur->security & (ENC_WEP|ENC_TKIP|ENC_WRAP|ENC_CCMP|ENC_WEP104|ENC_WEP40)) == 0 ) snprintf( strbuf+len, sizeof(strbuf)-len, "       ");
     else if( ap_cur->security & ENC_CCMP ) snprintf( strbuf+len, sizeof(strbuf)-len, "CCMP   ");
     else if( ap_cur->security & ENC_WRAP ) snprintf( strbuf+len, sizeof(strbuf)-len, "WRAP   ");
     else if( ap_cur->security & ENC_TKIP ) snprintf( strbuf+len, sizeof(strbuf)-len, "TKIP   ");
     else if( ap_cur->security & ENC_WEP104 ) snprintf( strbuf+len, sizeof(strbuf)-len, "WEP104 ");
     else if( ap_cur->security & ENC_WEP40 ) snprintf( strbuf+len, sizeof(strbuf)-len, "WEP40  ");
     else if( ap_cur->security & ENC_WEP ) snprintf( strbuf+len, sizeof(strbuf)-len, "WEP    ");

     len = strlen(strbuf);

     if( (ap_cur->security & (AUTH_OPN|AUTH_PSK|AUTH_MGT)) == 0 ) snprintf( strbuf+len, sizeof(strbuf)-len, "   ");
     else if( ap_cur->security & AUTH_MGT ) snprintf( strbuf+len, sizeof(strbuf)-len, "MGT");
     else if( ap_cur->security & AUTH_PSK )
     {
  if( ap_cur->security & STD_WEP )
      snprintf( strbuf+len, sizeof(strbuf)-len, "SKA");
  else
      snprintf( strbuf+len, sizeof(strbuf)-len, "PSK");
     }
     else if( ap_cur->security & AUTH_OPN ) snprintf( strbuf+len, sizeof(strbuf)-len, "OPN");

     len = strlen(strbuf);

     if (G.show_uptime) {
      snprintf(strbuf+len, sizeof(strbuf)-len, " %14s", parse_timestamp(ap_cur->timestamp));
      len = strlen(strbuf);
     }

     strbuf[var_71-1] = '\0';

     if(G.selection_ap && ((num_ap) == G.selected_ap)) {
  if(G.mark_cur_ap) {
      if(ap_cur->marked == 0) {
   ap_cur->marked = 1;
      }
      else {
   ap_cur->marked_color++;
   if(ap_cur->marked_color > (TEXT_MAX_COLOR-1)) {
       ap_cur->marked_color = 1;
       ap_cur->marked = 0;
   }
      }
      G.mark_cur_ap = 0;
  }
  textstyle(TEXT_REVERSE);
  memcpy(G.selected_bssid, ap_cur->bssid, 6);
     }

     if(ap_cur->marked) {
  textcolor_fg(ap_cur->marked_color);
     }

     fprintf(stderr, "%s", strbuf);

     if( var_71 > (var_71 - 4) )
     {
  memset( strbuf, 0, sizeof( strbuf ) );
  if(ap_cur->essid[0] != 0x00)
  {
      snprintf( strbuf, sizeof( strbuf ) - 1,
       "%s", ap_cur->essid );
  }
  else
  {
      snprintf( strbuf, sizeof( strbuf ) - 1,
       "<length:%3d>%s", ap_cur->ssid_length, "\x00" );
  }

  if (G.show_manufacturer) {

   if (G.maxsize_essid_seen <= strlen(strbuf))
    G.maxsize_essid_seen = strlen(strbuf);
   else
    memset( strbuf+strlen(strbuf), 32, (G.maxsize_essid_seen - strlen(strbuf)) );

   if (ap_cur->manuf == NULL)
    ap_cur->manuf = get_manufacturer(ap_cur->bssid[0], ap_cur->bssid[1], ap_cur->bssid[2]);

   snprintf( strbuf + G.maxsize_essid_seen , sizeof(strbuf)-G.maxsize_essid_seen, "  %s", ap_cur->manuf );
  }


  memset( strbuf+strlen(strbuf), 32, var_71 - (var_71 - 4 ) );


  strbuf[var_71 - (var_71 - 4)] = '\0';

  fprintf( stderr, "  %s", strbuf );
     }

     fprintf( stderr, "\n" );

     if( (G.selection_ap && ((num_ap) == G.selected_ap)) || (ap_cur->marked) ) {
  textstyle(TEXT_RESET);
     }

     ap_cur = ap_cur->prev;
 }



 nlines += 3;

 if( nlines >= (var_71-1) )
     return;

 memset( strbuf, ' ', var_71 - 1 );
 strbuf[var_71 - 1] = '\0';
 fprintf( stderr, "%s\n", strbuf );
    }

    if(G.show_sta) {
 memcpy( strbuf, " BSSID              STATION "
  "           PWR   Rate    Lost    Frames  Probes", var_71 );
 strbuf[var_71 - 1] = '\0';
 fprintf( stderr, "%s\n", strbuf );

 memset( strbuf, ' ', var_71 - 1 );
 strbuf[var_71 - 1] = '\0';
 fprintf( stderr, "%s\n", strbuf );

 ap_cur = G.ap_end;

 num_sta = 0;

 while( ap_cur != NULL )
 {
     if( ap_cur->nb_pkt < 2 ||
  time( NULL ) - ap_cur->tlast > G.berlin )
     {
  ap_cur = ap_cur->prev;
  continue;
     }

     if(ap_cur->security != 0 && G.f_encrypt != 0 && ((ap_cur->security & G.f_encrypt) == 0))
     {
  ap_cur = ap_cur->prev;
  continue;
     }


     if(memcmp(ap_cur->bssid, BROADCAST, 6) && is_filtered_essid(ap_cur->essid))
     {
  ap_cur = ap_cur->prev;
  continue;
     }

     if( nlines >= (var_71-1) )
  return;

     st_cur = G.st_end;

     if(G.selection_ap && (memcmp(G.selected_bssid, ap_cur->bssid, 6)==0)) {
  textstyle(TEXT_REVERSE);
     }

     if(ap_cur->marked) {
  textcolor_fg(ap_cur->marked_color);
     }

     while( st_cur != NULL )
     {
  if( st_cur->base != ap_cur ||
      time( NULL ) - st_cur->tlast > G.berlin )
  {
      st_cur = st_cur->prev;
      continue;
  }

  if( ! memcmp( ap_cur->bssid, BROADCAST, 6 ) && G.asso_client )
  {
      st_cur = st_cur->prev;
      continue;
  }

  num_sta++;

  if(G.start_print_sta > num_sta)
      continue;

  nlines++;

  if( var_71 != 0 && nlines >= var_71 )
      return;

  if( ! memcmp( ap_cur->bssid, BROADCAST, 6 ) )
      fprintf( stderr, " (not associated) " );
  else
      fprintf( stderr, " %02X:%02X:%02X:%02X:%02X:%02X",
       ap_cur->bssid[0], ap_cur->bssid[1],
       ap_cur->bssid[2], ap_cur->bssid[3],
       ap_cur->bssid[4], ap_cur->bssid[5] );

  fprintf( stderr, "  %02X:%02X:%02X:%02X:%02X:%02X",
   st_cur->stmac[0], st_cur->stmac[1],
   st_cur->stmac[2], st_cur->stmac[3],
   st_cur->stmac[4], st_cur->stmac[5] );

  fprintf( stderr, "  %3d ", st_cur->power );
  fprintf( stderr, "  %2d", st_cur->rate_to/1000000 );
  fprintf( stderr, "%c", (st_cur->qos_fr_ds) ? 'e' : ' ');
  fprintf( stderr, "-%2d", st_cur->rate_from/1000000);
  fprintf( stderr, "%c", (st_cur->qos_to_ds) ? 'e' : ' ');
  fprintf( stderr, "  %4d", st_cur->missed );
  fprintf( stderr, " %8ld", st_cur->nb_pkt );

  if( var_71 > (var_71 - 6) )
  {
      memset( ssid_list, 0, sizeof( ssid_list ) );

      for( var_142 = 0, var_142 = 0; var_142 < NB_PRB; var_142++ )
      {
   if( st_cur->probes[var_142][0] == '\0' )
       continue;

   snprintf( ssid_list + var_142, sizeof( ssid_list ) - var_142 - 1,
    "%c%s", ( var_142 > 0 ) ? ',' : ' ',
    st_cur->probes[var_142] );

   var_142 += ( 1 + strlen( st_cur->probes[var_142] ) );

   if( var_142 >= (int) sizeof( ssid_list ) )
       break;
      }

      memset( strbuf, 0, sizeof( strbuf ) );
      snprintf( strbuf, sizeof( strbuf ) - 1,
       "%-256s", ssid_list );
      strbuf[var_71 - (var_71 - 6)] = '\0';
      fprintf( stderr, " %s", strbuf );
  }

  fprintf( stderr, "\n" );

  st_cur = st_cur->prev;
     }

     if( (G.selection_ap && (memcmp(G.selected_bssid, ap_cur->bssid, 6)==0)) || (ap_cur->marked) ) {
  textstyle(TEXT_RESET);
     }

     ap_cur = ap_cur->prev;
 }
    }

    if(G.show_ack)
    {


        nlines += 3;

        if( nlines >= (var_71-1) )
            return;

        memset( strbuf, ' ', var_71 - 1 );
        strbuf[var_71 - 1] = '\0';
        fprintf( stderr, "%s\n", strbuf );

        memcpy( strbuf, " MAC       "
                "          CH PWR    ACK ACK/s    CTS RTS_RX RTS_TX  OTHER", var_71 );
        strbuf[var_71 - 1] = '\0';
        fprintf( stderr, "%s\n", strbuf );

        memset( strbuf, ' ', var_71 - 1 );
        strbuf[var_71 - 1] = '\0';
        fprintf( stderr, "%s\n", strbuf );

        na_cur = G.na_1st;

        while( na_cur != NULL )
        {
            if( time( NULL ) - na_cur->tlast > 120 )
            {
                na_cur = na_cur->next;
                continue;
            }

            if( nlines >= (var_71-1) )
                return;

            nlines++;

            if( var_71 != 0 && nlines >= var_71 )
                return;

            fprintf( stderr, " %02X:%02X:%02X:%02X:%02X:%02X",
                    na_cur->namac[0], na_cur->namac[1],
                    na_cur->namac[2], na_cur->namac[3],
                    na_cur->namac[4], na_cur->namac[5] );

            fprintf( stderr, "  %3d", na_cur->channel );
            fprintf( stderr, " %3d", na_cur->power );
            fprintf( stderr, " %6d", na_cur->ack );
            fprintf( stderr, "  %4d", na_cur->ackps );
            fprintf( stderr, " %6d", na_cur->cts );
            fprintf( stderr, " %6d", na_cur->rts_r );
            fprintf( stderr, " %6d", na_cur->rts_t );
            fprintf( stderr, " %6d", na_cur->other );

            fprintf( stderr, "\n" );

            na_cur = na_cur->next;
        }
    }
}

int fn_71( void )
{
    int var_142, var_142, var_142;
    struct struct_141 *ltime;
    char ssid_list[512];
    struct struct_141 *ap_cur;
    struct struct_141 *st_cur;

    if (! G.record_data || !G.output_format_csv)
     return 0;

    fseek( G.f_txt, 0, SEEK_SET );

    fprintf( G.f_txt,
        "\r\nBSSID, First time seen, Last time seen, channel, Speed, "
        "Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\r\n" );

    ap_cur = G.ap_1st;

    while( ap_cur != NULL )
    {
        if( memcmp( ap_cur->bssid, BROADCAST, 6 ) == 0 )
        {
            ap_cur = ap_cur->next;
            continue;
        }

        if(ap_cur->security != 0 && G.f_encrypt != 0 && ((ap_cur->security & G.f_encrypt) == 0))
        {
            ap_cur = ap_cur->next;
            continue;
        }

        if(is_filtered_essid(ap_cur->essid) || ap_cur->nb_pkt < 2)
        {
            ap_cur = ap_cur->next;
            continue;
        }

        fprintf( G.f_txt, "%02X:%02X:%02X:%02X:%02X:%02X, ",
                 ap_cur->bssid[0], ap_cur->bssid[1],
                 ap_cur->bssid[2], ap_cur->bssid[3],
                 ap_cur->bssid[4], ap_cur->bssid[5] );

        ltime = localtime( &ap_cur->tinit );

        fprintf( G.f_txt, "%04d-%02d-%02d %02d:%02d:%02d, ",
                 1900 + ltime->tm_year, 1 + ltime->tm_mon,
                 ltime->tm_mday, ltime->tm_hour,
                 ltime->tm_min, ltime->tm_sec );

        ltime = localtime( &ap_cur->tlast );

        fprintf( G.f_txt, "%04d-%02d-%02d %02d:%02d:%02d, ",
                 1900 + ltime->tm_year, 1 + ltime->tm_mon,
                 ltime->tm_mday, ltime->tm_hour,
                 ltime->tm_min, ltime->tm_sec );

        fprintf( G.f_txt, "%2d, %3d, ",
                 ap_cur->channel,
                 ap_cur->max_speed );

        if( (ap_cur->security & (STD_OPN|STD_WEP|STD_WPA|STD_WPA2)) == 0) fprintf( G.f_txt, "    " );
        else
        {
            if( ap_cur->security & STD_WPA2 ) fprintf( G.f_txt, "WPA2" );
            if( ap_cur->security & STD_WPA ) fprintf( G.f_txt, "WPA " );
            if( ap_cur->security & STD_WEP ) fprintf( G.f_txt, "WEP " );
            if( ap_cur->security & STD_OPN ) fprintf( G.f_txt, "OPN " );
        }

        fprintf( G.f_txt, ",");

        if( (ap_cur->security & (ENC_WEP|ENC_TKIP|ENC_WRAP|ENC_CCMP|ENC_WEP104|ENC_WEP40)) == 0 ) fprintf( G.f_txt, "       ");
        else
        {
            if( ap_cur->security & ENC_CCMP ) fprintf( G.f_txt, " CCMP");
            if( ap_cur->security & ENC_WRAP ) fprintf( G.f_txt, " WRAP");
            if( ap_cur->security & ENC_TKIP ) fprintf( G.f_txt, " TKIP");
            if( ap_cur->security & ENC_WEP104 ) fprintf( G.f_txt, " WEP104");
            if( ap_cur->security & ENC_WEP40 ) fprintf( G.f_txt, " WEP40");
            if( ap_cur->security & ENC_WEP ) fprintf( G.f_txt, " WEP");
        }

        fprintf( G.f_txt, ",");

        if( (ap_cur->security & (AUTH_OPN|AUTH_PSK|AUTH_MGT)) == 0 ) fprintf( G.f_txt, "   ");
        else
        {
            if( ap_cur->security & AUTH_MGT ) fprintf( G.f_txt, " MGT");
            if( ap_cur->security & AUTH_PSK )
   {
    if( ap_cur->security & STD_WEP )
     fprintf( G.f_txt, "SKA");
    else
     fprintf( G.f_txt, "PSK");
   }
            if( ap_cur->security & AUTH_OPN ) fprintf( G.f_txt, " OPN");
        }

        fprintf( G.f_txt, ", %3d, %8ld, %8ld, ",
                 ap_cur->avg_power,
                 ap_cur->nb_bcn,
                 ap_cur->nb_data );

        fprintf( G.f_txt, "%3d.%3d.%3d.%3d, ",
                 ap_cur->lanip[0], ap_cur->lanip[1],
                 ap_cur->lanip[2], ap_cur->lanip[3] );

        fprintf( G.f_txt, "%3d, ", ap_cur->ssid_length);

        for(var_142=0; var_142<ap_cur->ssid_length; var_142++)
        {
            fprintf( G.f_txt, "%c", ap_cur->essid[var_142] );
        }
        fprintf( G.f_txt, ", " );


        if(ap_cur->key != NULL)
        {
            for(var_142=0; var_142<(int)strlen(ap_cur->key); var_142++)
            {
                fprintf( G.f_txt, "%02X", ap_cur->key[var_142]);
                if(var_142<(int)(strlen(ap_cur->key)-1))
                    fprintf( G.f_txt, ":");
            }
        }

        fprintf( G.f_txt, "\r\n");

        ap_cur = ap_cur->next;
    }

    fprintf( G.f_txt,
        "\r\nStation MAC, First time seen, Last time seen, "
        "Power, # packets, BSSID, Probed ESSIDs\r\n" );

    st_cur = G.st_1st;

    while( st_cur != NULL )
    {
        ap_cur = st_cur->base;

        if( ap_cur->nb_pkt < 2 )
        {
            st_cur = st_cur->next;
            continue;
        }

        fprintf( G.f_txt, "%02X:%02X:%02X:%02X:%02X:%02X, ",
                 st_cur->stmac[0], st_cur->stmac[1],
                 st_cur->stmac[2], st_cur->stmac[3],
                 st_cur->stmac[4], st_cur->stmac[5] );

        ltime = localtime( &st_cur->tinit );

        fprintf( G.f_txt, "%04d-%02d-%02d %02d:%02d:%02d, ",
                 1900 + ltime->tm_year, 1 + ltime->tm_mon,
                 ltime->tm_mday, ltime->tm_hour,
                 ltime->tm_min, ltime->tm_sec );

        ltime = localtime( &st_cur->tlast );

        fprintf( G.f_txt, "%04d-%02d-%02d %02d:%02d:%02d, ",
                 1900 + ltime->tm_year, 1 + ltime->tm_mon,
                 ltime->tm_mday, ltime->tm_hour,
                 ltime->tm_min, ltime->tm_sec );

        fprintf( G.f_txt, "%3d, %8ld, ",
                 st_cur->power,
                 st_cur->nb_pkt );

        if( ! memcmp( ap_cur->bssid, BROADCAST, 6 ) )
            fprintf( G.f_txt, "(not associated) ," );
        else
            fprintf( G.f_txt, "%02X:%02X:%02X:%02X:%02X:%02X,",
                     ap_cur->bssid[0], ap_cur->bssid[1],
                     ap_cur->bssid[2], ap_cur->bssid[3],
                     ap_cur->bssid[4], ap_cur->bssid[5] );

        memset( ssid_list, 0, sizeof( ssid_list ) );

        for( var_142 = 0, var_142 = 0; var_142 < NB_PRB; var_142++ )
        {
            if( st_cur->probes[var_142][0] == '\0' )
                continue;

            snprintf( ssid_list + var_142, sizeof( ssid_list ) - var_142 - 1,
                      "%c", ( var_142 > 0 ) ? ',' : ' ' );

            for(var_142=0; var_142<st_cur->ssid_length[var_142]; var_142++)
            {
                snprintf( ssid_list + var_142 + 1 + var_142, sizeof( ssid_list ) - var_142 - 2 - var_142,
                          "%c", st_cur->probes[var_142][var_142]);
            }

            var_142 += ( 1 + st_cur->ssid_length[var_142] );
            if( var_142 >= (int) sizeof( ssid_list ) )
                break;
        }

        fprintf( G.f_txt, "%s\r\n", ssid_list );

        st_cur = st_cur->next;
    }

    fprintf( G.f_txt, "\r\n" );
    fflush( G.f_txt );
    return 0;
}

char * fn_73(unsigned char * text, int var_132)
{
 int var_142;
 size_t len;
 unsigned char * pos;
 char * newpos;
 char * newtext = NULL;
 if (text != NULL && var_132 > 0) {
  len = 6 * var_132;
  newtext = (char *)calloc(1, (len + 1) * sizeof(char));
  pos = text;
  for (var_142 = 0; var_142 < var_132; ++var_142, ++pos) {
   switch (*pos) {
    case '&':
     strncat(newtext, "&amp;", len);
     break;
    case '<':
     strncat(newtext, "&lt;", len);
     break;
    case '>':
     strncat(newtext, "&gt;", len);
     break;
    case '\'':
     strncat(newtext, "&apos;", len);
     break;
    case '"':
     strncat(newtext, "&quot;", len);
     break;
    default:
     if ( isprint((int)(*pos)) || (*pos)>127 ) {
      newtext[strlen(newtext)] = *pos;
     } else {
      newtext[strlen(newtext)] = '\\';
      newpos = newtext + strlen(newtext);
      snprintf(newpos, strlen(newpos) + 1, "%3u", *pos);
     }
     break;
   }
  }
  newtext = (char *) realloc(newtext, strlen(newtext) + 1);
 }

 return newtext;
}




char *fn_74(unsigned char var_77, unsigned char var_77, unsigned char var_77) {
 static char * oui_location = NULL;
 char oui[9];
 char *manuf;

 char * manuf_str;
 struct struct_141 *ptr;
 FILE *fp;
 char buffer[BUFSIZ];
 char temp[9];
 unsigned char a[2];
 unsigned char b[2];
 unsigned char c[2];
 int var_142 = 0;

 if ((manuf = (char *)calloc(1, 128 * sizeof(char))) == NULL) {
  perror("calloc failed");
  return NULL;
 }

 snprintf(oui, sizeof(oui), "%02X:%02X:%02X", var_77, var_77, var_77 );

 if (G.manufList != NULL) {

  ptr = G.manufList;
  while (ptr != NULL) {
   var_142 = ! strncasecmp(ptr->id, oui, 8);
   if (var_142) {
    memcpy(manuf, ptr->manuf, 128);
    break;
   }
   ptr = ptr->next;
  }
 } else {

  if (oui_location == NULL) {
   fp = fopen(OUI_PATH0, "r");
   if (fp == NULL) {
    fp = fopen(OUI_PATH1, "r");
    if (fp == NULL) {
        fp = fopen(OUI_PATH2, "r");
        if (fp != NULL) {
     oui_location = OUI_PATH2;
        }
    } else {
        oui_location = OUI_PATH1;
    }
   } else {
    oui_location = OUI_PATH0;
   }
  } else {
   fp = fopen(oui_location, "r");
  }

  if (fp != NULL) {

   memset(buffer, 0x00, sizeof(buffer));
   while (fgets(buffer, sizeof(buffer), fp) != NULL) {
    if (strstr(buffer, "(hex)") == NULL) {
     continue;
    }

    memset(a, 0x00, sizeof(a));
    memset(b, 0x00, sizeof(b));
    memset(c, 0x00, sizeof(c));
    if (sscanf(buffer, "%2c-%2c-%2c", a, b, c) == 3) {
     snprintf(temp, sizeof(temp), "%c%c:%c%c:%c%c", a[0], a[1], b[0], b[1], c[0], c[1] );
     var_142 = !memcmp(temp, oui, strlen(oui));
     if (var_142) {
      manuf_str = get_manufacturer_from_string(buffer);
      if (manuf_str != NULL) {
       snprintf(manuf, 128, "%s", manuf_str);
       free(manuf_str);
      }

      break;
     }
    }
    memset(buffer, 0x00, sizeof(buffer));
   }

   fclose(fp);
  }
 }


 if (!var_142 || *manuf == '\0') {
  memcpy(manuf, "Unknown", 7);
  manuf[strlen(manuf)] = '\0';
 }

 manuf = (char *)realloc(manuf, (strlen(manuf) + 1) * sizeof(char));

 return manuf;
}

int fn_77( void )
{
    int network_number, average_power, client_nbr;
    int client_max_rate, unused;
    struct struct_141 *ap_cur;
    struct struct_141 *st_cur;
    char first_time[255];
    char last_time[255];
    char * manuf;
    char * essid = NULL;

    if (! G.record_data || !G.output_format_kismet_netxml)
     return 0;

    fseek( G.f_kis_xml, 0, SEEK_SET );


    fprintf( G.f_kis_xml, "%s%s%s",
      "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE detection-run SYSTEM \"http:
   G.airodump_start_time,
      "\">\n\n" );


    ap_cur = G.ap_1st;

    network_number = 0;
    while( ap_cur != NULL )
    {
        if( memcmp( ap_cur->bssid, BROADCAST, 6 ) == 0 )
        {
            ap_cur = ap_cur->next;
            continue;
        }

        if(ap_cur->security != 0 && G.f_encrypt != 0 && ((ap_cur->security & G.f_encrypt) == 0))
        {
            ap_cur = ap_cur->next;
            continue;
        }

        if(is_filtered_essid(ap_cur->essid) || ap_cur->nb_pkt < 2 )
        {
            ap_cur = ap_cur->next;
            continue;
        }

  ++network_number;
  strncpy(first_time, ctime(&ap_cur->tinit), 254);
  first_time[strlen(first_time) - 1] = 0;

  strncpy(last_time, ctime(&ap_cur->tlast), 254);
  last_time[strlen(last_time) - 1] = 0;

  fprintf(G.f_kis_xml, "\t<wireless-network number=\"%d\" type=\"infrastructure\" ",
   network_number);
  fprintf(G.f_kis_xml, "first-time=\"%s\" last-time=\"%s\">\n", first_time, last_time);

  fprintf(G.f_kis_xml, "\t\t<SSID first-time=\"%s\" last-time=\"%s\">\n",
    first_time, last_time);
  fprintf(G.f_kis_xml, "\t\t\t<type>Beacon</type>\n" );
  fprintf(G.f_kis_xml, "\t\t\t<max-rate>%d.000000</max-rate>\n", ap_cur->max_speed );
  fprintf(G.f_kis_xml, "\t\t\t<packets>%ld</packets>\n", ap_cur->nb_bcn );
  fprintf(G.f_kis_xml, "\t\t\t<beaconrate>%d</beaconrate>\n", 10 );
  fprintf(G.f_kis_xml, "\t\t\t<encryption>");

  if( (ap_cur->security & (STD_OPN|STD_WEP|STD_WPA|STD_WPA2)) != 0)
  {
   if( ap_cur->security & STD_WPA2 ) fprintf( G.f_kis_xml, "WPA2 " );
   if( ap_cur->security & STD_WPA ) fprintf( G.f_kis_xml, "WPA " );
   if( ap_cur->security & STD_WEP ) fprintf( G.f_kis_xml, "WEP " );
   if( ap_cur->security & STD_OPN ) fprintf( G.f_kis_xml, "OPN " );
  }

  if( (ap_cur->security & (ENC_WEP|ENC_TKIP|ENC_WRAP|ENC_CCMP|ENC_WEP104|ENC_WEP40)) != 0 )
  {
   if( ap_cur->security & ENC_CCMP ) fprintf( G.f_kis_xml, "AES-CCM ");
   if( ap_cur->security & ENC_WRAP ) fprintf( G.f_kis_xml, "WRAP ");
   if( ap_cur->security & ENC_TKIP ) fprintf( G.f_kis_xml, "TKIP ");
   if( ap_cur->security & ENC_WEP104 ) fprintf( G.f_kis_xml, "WEP104 ");
   if( ap_cur->security & ENC_WEP40 ) fprintf( G.f_kis_xml, "WEP40 ");

  }
  fprintf(G.f_kis_xml, "</encryption>\n");


  fprintf(G.f_kis_xml, "\t\t\t<essid cloaked=\"%s\">",
     (ap_cur->essid[0] == 0) ? "true" : "false");
  essid = sanitize_xml(ap_cur->essid, ap_cur->ssid_length);
  if (essid != NULL) {
   fprintf(G.f_kis_xml, "%s", essid);
   free(essid);
  }
  fprintf(G.f_kis_xml, "</essid>\n");


  fprintf(G.f_kis_xml, "\t\t</SSID>\n");


  fprintf( G.f_kis_xml, "\t\t<BSSID>%02X:%02X:%02X:%02X:%02X:%02X</BSSID>\n",
      ap_cur->bssid[0], ap_cur->bssid[1],
      ap_cur->bssid[2], ap_cur->bssid[3],
      ap_cur->bssid[4], ap_cur->bssid[5] );


  manuf = sanitize_xml((unsigned char *)ap_cur->manuf, strlen(ap_cur->manuf));
  fprintf(G.f_kis_xml, "\t\t<manuf>%s</manuf>\n", (manuf != NULL) ? manuf : "Unknown");
  free(manuf);



  fprintf(G.f_kis_xml, "\t\t<channel>%d</channel>\n", ap_cur->channel);



  fprintf(G.f_kis_xml, "\t\t<freqmhz>%d %ld</freqmhz>\n",
     getFrequencyFromChannel(ap_cur->channel),

     ap_cur->nb_pkt );


  fprintf(G.f_kis_xml, "\t\t<maxseenrate>%d</maxseenrate>\n", ap_cur->max_speed * 1000);


  fprintf(G.f_kis_xml, "\t\t<packets>\n"
     "\t\t\t<LLC>%ld</LLC>\n"
     "\t\t\t<data>%ld</data>\n"
     "\t\t\t<crypt>0</crypt>\n"
     "\t\t\t<total>%ld</total>\n"
     "\t\t\t<fragments>0</fragments>\n"
     "\t\t\t<retries>0</retries>\n"
     "\t\t</packets>\n",
     ap_cur->nb_bcn, ap_cur->nb_data,

     ap_cur->nb_pkt );






  fprintf(G.f_kis_xml, "\t\t<datasize>0</datasize>\n");


  st_cur = G.st_1st;
  client_nbr = 0;

  while ( st_cur != NULL )
  {

   if ( st_cur->base == NULL ||
     memcmp( st_cur->stmac, BROADCAST, 6 ) == 0 )
   {
    st_cur = st_cur->next;
    continue;
   }


   if ( memcmp( st_cur->base->bssid, ap_cur->bssid, 6 ) != 0 )
   {
    st_cur = st_cur->next;
    continue;
   }

   ++client_nbr;


   strncpy(first_time, ctime(&st_cur->tinit), 254);
   first_time[strlen(first_time) - 1] = 0;

   strncpy(last_time, ctime(&st_cur->tlast), 254);
   last_time[strlen(last_time) - 1] = 0;

   fprintf(G.f_kis_xml, "\t\t<wireless-client number=\"%d\" "
         "type=\"established\" first-time=\"%s\""
         " last-time=\"%s\">\n",
         client_nbr, first_time, last_time );

   fprintf( G.f_kis_xml, "\t\t\t<client-mac>%02X:%02X:%02X:%02X:%02X:%02X</client-mac>\n",
       st_cur->stmac[0], st_cur->stmac[1],
       st_cur->stmac[2], st_cur->stmac[3],
       st_cur->stmac[4], st_cur->stmac[5] );


   fprintf(G.f_kis_xml, "\t\t\t<client-manuf>%s</client-manuf>\n", (st_cur->manuf != NULL) ? st_cur->manuf : "Unknown");



   fprintf(G.f_kis_xml, "\t\t\t<channel>%d</channel>\n", ap_cur->channel);


   client_max_rate = ( st_cur->rate_from > st_cur->rate_to ) ? st_cur->rate_from : st_cur->rate_to ;
   fprintf(G.f_kis_xml, "\t\t\t<maxseenrate>%.6f</maxseenrate>\n", client_max_rate / 1000000.0 );


   fprintf(G.f_kis_xml, "\t\t\t<packets>\n"
      "\t\t\t\t<LLC>0</LLC>\n"
      "\t\t\t\t<data>0</data>\n"
      "\t\t\t\t<crypt>0</crypt>\n"
      "\t\t\t\t<total>%ld</total>\n"
      "\t\t\t\t<fragments>0</fragments>\n"
      "\t\t\t\t<retries>0</retries>\n"
      "\t\t\t</packets>\n",
      st_cur->nb_pkt );


   average_power = (st_cur->power == -1) ? 0 : st_cur->power;
   fprintf(G.f_kis_xml, "\t\t\t<snr-info>\n"
     "\t\t\t\t<last_signal_dbm>%d</last_signal_dbm>\n"
     "\t\t\t\t<last_noise_dbm>0</last_noise_dbm>\n"
     "\t\t\t\t<last_signal_rssi>%d</last_signal_rssi>\n"
     "\t\t\t\t<last_noise_rssi>0</last_noise_rssi>\n"
     "\t\t\t\t<min_signal_dbm>%d</min_signal_dbm>\n"
     "\t\t\t\t<min_noise_dbm>0</min_noise_dbm>\n"
     "\t\t\t\t<min_signal_rssi>1024</min_signal_rssi>\n"
     "\t\t\t\t<min_noise_rssi>1024</min_noise_rssi>\n"
     "\t\t\t\t<max_signal_dbm>%d</max_signal_dbm>\n"
     "\t\t\t\t<max_noise_dbm>0</max_noise_dbm>\n"
     "\t\t\t\t<max_signal_rssi>%d</max_signal_rssi>\n"
     "\t\t\t\t<max_noise_rssi>0</max_noise_rssi>\n"
      "\t\t\t</snr-info>\n",
      average_power, average_power, average_power,
      average_power, average_power );



   if (G.usegpsd)
   {
    fprintf(G.f_kis_xml, "\t\t<gps-info>\n"
       "\t\t\t<min-lat>%.6f</min-lat>\n"
       "\t\t\t<min-lon>%.6f</min-lon>\n"
       "\t\t\t<min-alt>%.6f</min-alt>\n"
       "\t\t\t<min-spd>%.6f</min-spd>\n"
       "\t\t\t<max-lat>%.6f</max-lat>\n"
       "\t\t\t<max-lon>%.6f</max-lon>\n"
       "\t\t\t<max-alt>%.6f</max-alt>\n"
       "\t\t\t<max-spd>%.6f</max-spd>\n"
       "\t\t\t<peak-lat>%.6f</peak-lat>\n"
       "\t\t\t<peak-lon>%.6f</peak-lon>\n"
       "\t\t\t<peak-alt>%.6f</peak-alt>\n"
       "\t\t\t<avg-lat>%.6f</avg-lat>\n"
       "\t\t\t<avg-lon>%.6f</avg-lon>\n"
       "\t\t\t<avg-alt>%.6f</avg-alt>\n"
        "\t\t</gps-info>\n",
        0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0,
        0.0, 0.0, 0.0 );
   }



   fprintf(G.f_kis_xml, "\t\t\t<cdp-device></cdp-device>\n"
         "\t\t\t<cdp-portid></cdp-portid>\n");
   fprintf(G.f_kis_xml, "\t\t</wireless-client>\n" );


   st_cur = st_cur->next;
  }


  average_power = (ap_cur->avg_power == -1) ? 0 : ap_cur->avg_power;
  fprintf(G.f_kis_xml, "\t\t<snr-info>\n"
     "\t\t\t<last_signal_dbm>%d</last_signal_dbm>\n"
     "\t\t\t<last_noise_dbm>0</last_noise_dbm>\n"
     "\t\t\t<last_signal_rssi>%d</last_signal_rssi>\n"
     "\t\t\t<last_noise_rssi>0</last_noise_rssi>\n"
     "\t\t\t<min_signal_dbm>%d</min_signal_dbm>\n"
     "\t\t\t<min_noise_dbm>0</min_noise_dbm>\n"
     "\t\t\t<min_signal_rssi>1024</min_signal_rssi>\n"
     "\t\t\t<min_noise_rssi>1024</min_noise_rssi>\n"
     "\t\t\t<max_signal_dbm>%d</max_signal_dbm>\n"
     "\t\t\t<max_noise_dbm>0</max_noise_dbm>\n"
     "\t\t\t<max_signal_rssi>%d</max_signal_rssi>\n"
     "\t\t\t<max_noise_rssi>0</max_noise_rssi>\n"
      "\t\t</snr-info>\n",
      average_power, average_power, average_power,
      average_power, average_power );


  if (G.usegpsd)
  {
   fprintf(G.f_kis_xml, "\t\t<gps-info>\n"
      "\t\t\t<min-lat>%.6f</min-lat>\n"
      "\t\t\t<min-lon>%.6f</min-lon>\n"
      "\t\t\t<min-alt>%.6f</min-alt>\n"
      "\t\t\t<min-spd>%.6f</min-spd>\n"
      "\t\t\t<max-lat>%.6f</max-lat>\n"
      "\t\t\t<max-lon>%.6f</max-lon>\n"
      "\t\t\t<max-alt>%.6f</max-alt>\n"
      "\t\t\t<max-spd>%.6f</max-spd>\n"
      "\t\t\t<peak-lat>%.6f</peak-lat>\n"
      "\t\t\t<peak-lon>%.6f</peak-lon>\n"
      "\t\t\t<peak-alt>%.6f</peak-alt>\n"
      "\t\t\t<avg-lat>%.6f</avg-lat>\n"
      "\t\t\t<avg-lon>%.6f</avg-lon>\n"
      "\t\t\t<avg-alt>%.6f</avg-alt>\n"
       "\t\t</gps-info>\n",
      ap_cur->gps_loc_min[0],
      ap_cur->gps_loc_min[1],
      ap_cur->gps_loc_min[2],
      ap_cur->gps_loc_min[3],
      ap_cur->gps_loc_max[0],
      ap_cur->gps_loc_max[1],
      ap_cur->gps_loc_max[2],
      ap_cur->gps_loc_max[3],
      ap_cur->gps_loc_best[0],
      ap_cur->gps_loc_best[1],
      ap_cur->gps_loc_best[2],

      ap_cur->gps_loc_best[0],
      ap_cur->gps_loc_best[1],
      ap_cur->gps_loc_best[2] );
  }


  fprintf(G.f_kis_xml, "\t\t<bsstimestamp>0</bsstimestamp>\n"
      "\t\t<cdp-device></cdp-device>\n"
      "\t\t<cdp-portid></cdp-portid>\n");


  fprintf(G.f_kis_xml, "\t</wireless-network>\n");


        ap_cur = ap_cur->next;
    }


    fprintf( G.f_kis_xml, "%s\n", "</detection-run>" );

    fflush( G.f_kis_xml );



 unused = ftruncate(fileno(G.f_kis_xml), ftell( G.f_kis_xml ) );

    return 0;
}





int fn_78( void )
{
    int var_142, var_103;


    struct struct_141 *ap_cur;

    if (! G.record_data || !G.output_format_kismet_csv)
     return 0;

    fseek( G.f_kis, 0, SEEK_SET );

    fprintf( G.f_kis, "Network;NetType;ESSID;BSSID;Info;Channel;Cloaked;Encryption;Decrypted;MaxRate;MaxSeenRate;Beacon;LLC;Data;Crypt;Weak;Total;Carrier;Encoding;FirstTime;LastTime;BestQuality;BestSignal;BestNoise;GPSMinLat;GPSMinLon;GPSMinAlt;GPSMinSpd;GPSMaxLat;GPSMaxLon;GPSMaxAlt;GPSMaxSpd;GPSBestLat;GPSBestLon;GPSBestAlt;DataSize;IPType;IP;\n" );

    ap_cur = G.ap_1st;

    var_103=1;
    while( ap_cur != NULL )
    {
        if( memcmp( ap_cur->bssid, BROADCAST, 6 ) == 0 )
        {
            ap_cur = ap_cur->next;
            continue;
        }

        if(ap_cur->security != 0 && G.f_encrypt != 0 && ((ap_cur->security & G.f_encrypt) == 0))
        {
            ap_cur = ap_cur->next;
            continue;
        }

        if(is_filtered_essid(ap_cur->essid) || ap_cur->nb_pkt < 2)
        {
            ap_cur = ap_cur->next;
            continue;
        }


        fprintf( G.f_kis, "%d;", var_103 );


        fprintf( G.f_kis, "infrastructure;");


        for(var_142=0; var_142<ap_cur->ssid_length; var_142++)
        {
            fprintf( G.f_kis, "%c", ap_cur->essid[var_142] );
        }
        fprintf( G.f_kis, ";" );


        fprintf( G.f_kis, "%02X:%02X:%02X:%02X:%02X:%02X;",
                 ap_cur->bssid[0], ap_cur->bssid[1],
                 ap_cur->bssid[2], ap_cur->bssid[3],
                 ap_cur->bssid[4], ap_cur->bssid[5] );


        fprintf( G.f_kis, ";");


        fprintf( G.f_kis, "%d;", ap_cur->channel);


        fprintf( G.f_kis, "No;");


        if( (ap_cur->security & (STD_OPN|STD_WEP|STD_WPA|STD_WPA2)) != 0)
        {
            if( ap_cur->security & STD_WPA2 ) fprintf( G.f_kis, "WPA2," );
            if( ap_cur->security & STD_WPA ) fprintf( G.f_kis, "WPA," );
            if( ap_cur->security & STD_WEP ) fprintf( G.f_kis, "WEP," );
            if( ap_cur->security & STD_OPN ) fprintf( G.f_kis, "OPN," );
        }

        if( (ap_cur->security & (ENC_WEP|ENC_TKIP|ENC_WRAP|ENC_CCMP|ENC_WEP104|ENC_WEP40)) == 0 ) fprintf( G.f_kis, "None,");
        else
        {
            if( ap_cur->security & ENC_CCMP ) fprintf( G.f_kis, "AES-CCM,");
            if( ap_cur->security & ENC_WRAP ) fprintf( G.f_kis, "WRAP,");
            if( ap_cur->security & ENC_TKIP ) fprintf( G.f_kis, "TKIP,");
            if( ap_cur->security & ENC_WEP104 ) fprintf( G.f_kis, "WEP104,");
            if( ap_cur->security & ENC_WEP40 ) fprintf( G.f_kis, "WEP40,");

        }

        fseek(G.f_kis, -1, SEEK_CUR);
        fprintf(G.f_kis, ";");


        fprintf( G.f_kis, "No;");


        fprintf( G.f_kis, "%d.0;", ap_cur->max_speed );


        fprintf( G.f_kis, "0;");


        fprintf( G.f_kis, "%ld;", ap_cur->nb_bcn);


        fprintf( G.f_kis, "0;");


        fprintf( G.f_kis, "%ld;", ap_cur->nb_data );


        fprintf( G.f_kis, "0;");


        fprintf( G.f_kis, "0;");


        fprintf( G.f_kis, "%ld;", ap_cur->nb_data );


        fprintf( G.f_kis, ";");


        fprintf( G.f_kis, ";");


        fprintf( G.f_kis, "%s", ctime(&ap_cur->tinit) );
        fseek(G.f_kis, -1, SEEK_CUR);
        fprintf( G.f_kis, ";");


        fprintf( G.f_kis, "%s", ctime(&ap_cur->tlast) );
        fseek(G.f_kis, -1, SEEK_CUR);
        fprintf( G.f_kis, ";");


        fprintf( G.f_kis, "%d;", ap_cur->avg_power );


        fprintf( G.f_kis, "0;" );


        fprintf( G.f_kis, "0;" );


        fprintf( G.f_kis, "%.6f;", ap_cur->gps_loc_min[0]);


        fprintf( G.f_kis, "%.6f;", ap_cur->gps_loc_min[1]);


        fprintf( G.f_kis, "%.6f;", ap_cur->gps_loc_min[2]);


        fprintf( G.f_kis, "%.6f;", ap_cur->gps_loc_min[3]);


        fprintf( G.f_kis, "%.6f;", ap_cur->gps_loc_max[0]);


        fprintf( G.f_kis, "%.6f;", ap_cur->gps_loc_max[1]);


        fprintf( G.f_kis, "%.6f;", ap_cur->gps_loc_max[2]);


        fprintf( G.f_kis, "%.6f;", ap_cur->gps_loc_max[3]);


        fprintf( G.f_kis, "%.6f;", ap_cur->gps_loc_best[0]);


        fprintf( G.f_kis, "%.6f;", ap_cur->gps_loc_best[1]);


        fprintf( G.f_kis, "%.6f;", ap_cur->gps_loc_best[2]);


        fprintf( G.f_kis, "0;" );


        fprintf( G.f_kis, "0;" );


        fprintf( G.f_kis, "%d.%d.%d.%d;",
                 ap_cur->lanip[0], ap_cur->lanip[1],
                 ap_cur->lanip[2], ap_cur->lanip[3] );

        fprintf( G.f_kis, "\r\n");

        ap_cur = ap_cur->next;
        var_103++;
    }

    fflush( G.f_kis );
    return 0;
}

void fn_80( void )
{
 ssize_t unused;
    int gpsd_sock;
    char line[256], *temp;
    struct struct_81 gpsd_addr;
    int var_83, is_json, pos;
    fd_set read_fd;
    struct struct_141 timeout;



    pos = 0;
    gpsd_sock = socket( AF_INET, SOCK_STREAM, 0 );

    if( gpsd_sock < 0 ) {
        return;
    }

    gpsd_addr.sin_family = AF_INET;
    gpsd_addr.sin_port = htons( 2947 );
    gpsd_addr.sin_addr.s_addr = inet_addr( "127.0.0.1" );

    if( connect( gpsd_sock, (struct struct_82 *) &gpsd_addr,
                 sizeof( gpsd_addr ) ) < 0 ) {
        return;
    }




    FD_ZERO(&read_fd);
    FD_SET(gpsd_sock, &read_fd);
    timeout.tv_sec = 1;
    timeout.tv_usec = 0;
    is_json = select(gpsd_sock + 1, &read_fd, NULL, NULL, &timeout);
    if (is_json) {

     if( recv( gpsd_sock, line, sizeof( line ) - 1, 0 ) <= 0 )
      return;

     is_json = (line[0] == '{');
     if (is_json) {

   memset( line, 0, sizeof( line ) );
   strcpy(line, "?WATCH={\"json\":true};\n");
   if( send( gpsd_sock, line, 22, 0 ) != 22 )
    return;


   memset(line, 0, sizeof(line));
   if( recv( gpsd_sock, line, sizeof( line ) - 1, 0 ) <= 0 )
    return;


   if (strncmp(line, "{\"class\":\"DEVICES\",\"devices\":[]}", 32) == 0) {
    close(gpsd_sock);
    return;
   } else {
    pos = strlen(line);
   }
     }
    }



    while( G.do_exit == 0 )
    {
        usleep( 500000 );
        memset( G.gps_loc, 0, sizeof( float ) * 5 );


        if (is_json) {


         if (pos == sizeof( line )) {
          memset(line, 0, sizeof(line));
          pos = 0;
         }


         if( recv( gpsd_sock, line + pos, sizeof( line ) - pos - 1, 0 ) <= 0 )
          return;


         temp = strstr(line, "{\"class\":\"TPV\"");
         if (temp == NULL) {
          continue;
         }


         if (strchr(temp, '}') == NULL) {

          pos = strlen(temp);
          if (temp != line) {
           memmove(line, temp, pos);
           memset(line + pos, 0, sizeof(line) - pos);
          }
         }




         temp = strstr(temp, "\"lat\":");
   if (temp == NULL) {
    continue;
   }

   var_83 = sscanf(temp + 6, "%f", &G.gps_loc[0]);


   temp = strstr(temp, "\"lon\":");
   if (temp == NULL) {
    continue;
   }

   var_83 = sscanf(temp + 6, "%f", &G.gps_loc[1]);


   temp = strstr(temp, "\"alt\":");
   if (temp == NULL) {
    continue;
   }

   var_83 = sscanf(temp + 6, "%f", &G.gps_loc[4]);


   temp = strstr(temp, "\"speed\":");
   if (temp == NULL) {
    continue;
   }

   var_83 = sscanf(temp + 6, "%f", &G.gps_loc[2]);




   temp = strstr(temp, "{\"class\":\"TPV\"");
   if (temp == NULL) {
    memset( line, 0, sizeof( line ) );
    pos = 0;
   } else {
    pos = strlen(temp);
    memmove(line, temp, pos);
    memset(line + pos, 0, sizeof(line) - pos);
   }

        } else {
         memset( line, 0, sizeof( line ) );

   snprintf( line, sizeof( line ) - 1, "PVTAD\r\n" );
   if( send( gpsd_sock, line, 7, 0 ) != 7 )
    return;

   memset( line, 0, sizeof( line ) );
   if( recv( gpsd_sock, line, sizeof( line ) - 1, 0 ) <= 0 )
    return;

   if( memcmp( line, "GPSD,P=", 7 ) != 0 )
    continue;



   if( line[7] == '?' )
    continue;

   var_83 = sscanf( line + 7, "%f %f", &G.gps_loc[0], &G.gps_loc[1] );

   if( ( temp = strstr( line, "V=" ) ) == NULL ) continue;
   var_83 = sscanf( temp + 2, "%f", &G.gps_loc[2] );

   if( ( temp = strstr( line, "T=" ) ) == NULL ) continue;
   var_83 = sscanf( temp + 2, "%f", &G.gps_loc[3] );

   if( ( temp = strstr( line, "A=" ) ) == NULL ) continue;
   var_83 = sscanf( temp + 2, "%f", &G.gps_loc[4] );
        }

        if (G.record_data)
   fputs( line, G.f_gps );

  G.save_gps = 1;

        if (G.do_exit == 0)
  {
   unused = write( G.gc_pipe[1], G.gps_loc, sizeof( float ) * 5 );
   kill( getppid(), SIGUSR2 );
  }
    }
}

void fn_83( int var_86)
{
 ssize_t unused;
    int var_103=0;

    signal( var_86, sighandler );

    if( var_86 == SIGUSR1 )
    {
  unused = read( G.cd_pipe[0], &var_103, sizeof(int) );
        if(G.freqoption)
            unused = read( G.ch_pipe[0], &(G.frequency[var_103]), sizeof( int ) );
        else
            unused = read( G.ch_pipe[0], &(G.channel[var_103]), sizeof( int ) );
    }

    if( var_86 == SIGUSR2 )
        unused = read( G.gc_pipe[0], &G.gps_loc, sizeof( float ) * 5 );

    if( var_86 == SIGINT || var_86 == SIGTERM )
    {
 reset_term();
        alarm( 1 );
        G.do_exit = 1;
        signal( SIGALRM, sighandler );
        dprintf( STDOUT_FILENO, "\n" );
    }

    if( var_86 == SIGSEGV )
    {
        fprintf( stderr, "Caught signal 11 (SIGSEGV). Please"
                         " contact the author!\33[?25h\n\n" );
        fflush( stdout );
        exit( 1 );
    }

    if( var_86 == SIGALRM )
    {
        dprintf( STDERR_FILENO, "Caught signal 14 (SIGALRM). Please"
                         " contact the author!\33[?25h\n\n" );
        _exit( 1 );
    }

    if( var_86 == SIGCHLD )
        wait( NULL );

    if( var_86 == SIGWINCH )
    {
        fprintf( stderr, "\33[2J" );
        fflush( stdout );
    }
}

int fn_86(struct struct_141 *wi)
{
    int len;
    unsigned char p[4096], r_smac[6];

    memcpy(p, PROBE_REQ, 24);

    len = 24;

    p[24] = 0x00;
    p[25] = 0x00;

    len += 2;

    memcpy(p+len, RATES, 16);

    len += 16;

    r_smac[0] = 0x00;
    r_smac[1] = rand() & 0xFF;
    r_smac[2] = rand() & 0xFF;
    r_smac[3] = rand() & 0xFF;
    r_smac[4] = rand() & 0xFF;
    r_smac[5] = rand() & 0xFF;

    memcpy(p+10, r_smac, 6);

    if (wi_write(wi, p, len, NULL) == -1) {
        switch (errno) {
        case EAGAIN:
        case ENOBUFS:
            usleep(10000);
            return 0;
        }

        perror("wi_write()");
        return -1;
    }

    return 0;
}

int fn_88(struct struct_141 *wi[], int var_126)
{
    int var_142=0;
    for(var_142=0; var_142<var_126; var_142++)
    {
        send_probe_request(wi[var_142]);
    }
    return 0;
}

int fn_90(int var_95)
{
    int var_142=0, var_142=0;

    while(G.channels[var_142])
    {
        var_142++;
        if(G.channels[var_142] != -1)
            var_142++;
    }

    if(var_95) return var_142;
    return var_142;
}

int fn_93(int var_95)
{
    int var_142=0, var_142=0;

    while(G.own_frequencies[var_142])
    {
        var_142++;
        if(G.own_frequencies[var_142] != -1)
            var_142++;
    }

    if(var_95) return var_142;
    return var_142;
}

void fn_95(struct struct_141 *wi[], int var_103, int var_142 )
{
 ssize_t unused;
    int ch, var_103 = 0, var_103=0, var_103=0, var_103=0, var_142=0, var_103=0, var_103=1, var_122=1;
    int var_103=0;

    while( getppid() != 1 )
    {
        for( var_142 = 0; var_142 < var_103; var_142++ )
        {
            var_122 = 1;

            var_103 = var_103 % var_142;

            var_103 = var_103 % var_103;

            ++var_103;
            ++var_103;

            if( G.chswitch == 2 && !var_103 )
            {
                var_142 = var_103 - 1;
                var_103 = var_103 - 1;

                if( getchancount(1) > var_103 )
                {
                    while( var_122 )
                    {
                        var_122 = 0;
                        for( var_103 = 0; var_103 < ( var_103 - 1 ); var_103++ )
                        {
                            if( G.channels[var_103] == G.channel[var_103] )
                            {
                                var_122 = 1;
                                var_103 = var_103 % var_142;
                                var_103++;
                            }
                        }
                    }
                }
            }

            if( G.channels[var_103] == -1 )
            {
                var_142--;
                var_103--;
                var_103++;
                if(var_103 >= var_142)
                {
                    ch = wi_get_channel(wi[var_103]);
                    G.channel[var_103] = ch;
                    unused = write( G.cd_pipe[1], &var_103, sizeof(int) );
                    unused = write( G.ch_pipe[1], &ch, sizeof( int ) );
                    kill( getppid(), SIGUSR1 );
                    usleep(1000);
                }
                continue;
            }

            var_103 = 0;

            ch = G.channels[var_103];

            if(wi_set_channel(wi[var_103], ch ) == 0 )
            {
                G.channel[var_103] = ch;
                unused = write( G.cd_pipe[1], &var_103, sizeof(int) );
                unused = write( G.ch_pipe[1], &ch, sizeof( int ) );
                if(G.active_scan_sim > 0)
                    send_probe_request(wi[var_103]);
                kill( getppid(), SIGUSR1 );
                usleep(1000);
            }
            else
            {
                G.channels[var_103] = -1;
                var_142--;
                var_103--;
                continue;
            }
        }

        if(G.chswitch == 0)
        {
            var_103=var_103-(var_103 - 1);
        }

        if(var_103)
        {
            var_103 = 0;
        }

        usleep( (G.hopfreq*1000) );
    }

    exit( 0 );
}

void fn_102(struct struct_141 *wi[], int var_103, int var_142 )
{
 ssize_t unused;
    int ch, var_103 = 0, var_103=0, var_103=0, var_103=0, var_142=0, var_103=0, var_103=1, var_122=1;
    int var_103=0;

    while( getppid() != 1 )
    {
        for( var_142 = 0; var_142 < var_103; var_142++ )
        {
            var_122 = 1;

            var_103 = var_103 % var_142;

            var_103 = var_103 % var_103;

            ++var_103;
            ++var_103;

            if( G.chswitch == 2 && !var_103 )
            {
                var_142 = var_103 - 1;
                var_103 = var_103 - 1;

                if( getfreqcount(1) > var_103 )
                {
                    while( var_122 )
                    {
                        var_122 = 0;
                        for( var_103 = 0; var_103 < ( var_103 - 1 ); var_103++ )
                        {
                            if( G.own_frequencies[var_103] == G.frequency[var_103] )
                            {
                                var_122 = 1;
                                var_103 = var_103 % var_142;
                                var_103++;
                            }
                        }
                    }
                }
            }

            if( G.own_frequencies[var_103] == -1 )
            {
                var_142--;
                var_103--;
                var_103++;
                if(var_103 >= var_142)
                {
                    ch = wi_get_freq(wi[var_103]);
                    G.frequency[var_103] = ch;
                    unused = write( G.cd_pipe[1], &var_103, sizeof(int) );
                    unused = write( G.ch_pipe[1], &ch, sizeof( int ) );
                    kill( getppid(), SIGUSR1 );
                    usleep(1000);
                }
                continue;
            }

            var_103 = 0;

            ch = G.own_frequencies[var_103];

            if(wi_set_freq(wi[var_103], ch ) == 0 )
            {
                G.frequency[var_103] = ch;
                unused = write( G.cd_pipe[1], &var_103, sizeof(int) );
                unused = write( G.ch_pipe[1], &ch, sizeof( int ) );
                kill( getppid(), SIGUSR1 );
                usleep(1000);
            }
            else
            {
                G.own_frequencies[var_103] = -1;
                var_142--;
                var_103--;
                continue;
            }
        }

        if(G.chswitch == 0)
        {
            var_103=var_103-(var_103 - 1);
        }

        if(var_103)
        {
            var_103 = 0;
        }

        usleep( (G.hopfreq*1000) );
    }

    exit( 0 );
}

int fn_103(int var_125)
{
    int var_142=0;

    do
    {
        if (var_125 == abg_chans[var_142] && var_125 != 0 )
            return 0;
    } while (abg_chans[++var_142]);
    return 1;
}

int fn_105(int var_142)
{
    int var_142=0;

    do
    {
        if (var_142 == frequencies[var_142] && var_142 != 0 )
            return 0;
    } while (frequencies[++var_142]);
    return 1;
}



int fn_107(const char *optarg)
{
    unsigned int var_142=0,var_113=0,var_113=0,var_113=0,var_113=128,var_113=0;
    char *optchan = NULL, *optc;
    char *token = NULL;
    int *tmp_channels;


    if(optarg == NULL)
        return -1;

    var_113=var_113;


    optc = optchan = (char*) malloc(strlen(optarg)+1);
    strncpy(optchan, optarg, strlen(optarg));
    optchan[strlen(optarg)]='\0';

    tmp_channels = (int*) malloc(sizeof(int)*(var_113+1));


    while( (token = strsep(&optchan,",")) != NULL)
    {

        if(strchr(token, '-') != NULL)
        {

            if(strchr(token, '-') == strrchr(token, '-'))
            {

                for(var_142=0; var_142<strlen(token); var_142++)
                {
                    if( (token[var_142] < '0') && (token[var_142] > '9') && (token[var_142] != '-'))
                    {
                        free(tmp_channels);
                        free(optc);
                        return -1;
                    }
                }

                if( sscanf(token, "%d-%d", &var_113, &var_113) != EOF )
                {
                    if(var_113 > var_113)
                    {
                        free(tmp_channels);
                        free(optc);
                        return -1;
                    }
                    for(var_142=var_113; var_142<=var_113; var_142++)
                    {
                        if( (! invalid_channel(var_142)) && (var_113 > 0) )
                        {
                                tmp_channels[var_113-var_113]=var_142;
                                var_113--;
                        }
                    }
                }
                else
                {
                    free(tmp_channels);
                    free(optc);
                    return -1;
                }

            }
            else
            {
                free(tmp_channels);
                free(optc);
                return -1;
            }
        }
        else
        {

            for(var_142=0; var_142<strlen(token); var_142++)
            {
                if( (token[var_142] < '0') && (token[var_142] > '9') )
                {
                    free(tmp_channels);
                    free(optc);
                    return -1;
                }
            }

            if( sscanf(token, "%d", &var_113) != EOF)
            {
                if( (! invalid_channel(var_113)) && (var_113 > 0) )
                {
                        tmp_channels[var_113-var_113]=var_113;
                        var_113--;
                }

            }
            else
            {
                free(tmp_channels);
                free(optc);
                return -1;
            }
        }
    }

    G.own_channels = (int*) malloc(sizeof(int)*(var_113 - var_113 + 1));

    for(var_142=0; var_142<(var_113 - var_113); var_142++)
    {
        G.own_channels[var_142]=tmp_channels[var_142];
    }

    G.own_channels[var_142]=0;

    free(tmp_channels);
    free(optc);
    if(var_142==1) return G.own_channels[0];
    if(var_142==0) return -1;
    return 0;
}



int fn_113(const char *optarg)
{
    unsigned int var_142=0,var_119=0,var_119=0,var_119=0,var_119=10000,var_119=0;
    char *optfreq = NULL, *optc;
    char *token = NULL;
    int *tmp_frequencies;


    if(optarg == NULL)
        return -1;

    var_119=var_119;


    optc = optfreq = (char*) malloc(strlen(optarg)+1);
    strncpy(optfreq, optarg, strlen(optarg));
    optfreq[strlen(optarg)]='\0';

    tmp_frequencies = (int*) malloc(sizeof(int)*(var_119+1));


    while( (token = strsep(&optfreq,",")) != NULL)
    {

        if(strchr(token, '-') != NULL)
        {

            if(strchr(token, '-') == strrchr(token, '-'))
            {

                for(var_142=0; var_142<strlen(token); var_142++)
                {
                    if( (token[var_142] < '0' || token[var_142] > '9') && (token[var_142] != '-'))
                    {
                        free(tmp_frequencies);
                        free(optc);
                        return -1;
                    }
                }

                if( sscanf(token, "%d-%d", &var_119, &var_119) != EOF )
                {
                    if(var_119 > var_119)
                    {
                        free(tmp_frequencies);
                        free(optc);
                        return -1;
                    }
                    for(var_142=var_119; var_142<=var_119; var_142++)
                    {
                        if( (! invalid_frequency(var_142)) && (var_119 > 0) )
                        {
                                tmp_frequencies[var_119-var_119]=var_142;
                                var_119--;
                        }
                    }
                }
                else
                {
                    free(tmp_frequencies);
                    free(optc);
                    return -1;
                }

            }
            else
            {
                free(tmp_frequencies);
                free(optc);
                return -1;
            }
        }
        else
        {

            for(var_142=0; var_142<strlen(token); var_142++)
            {
                if( (token[var_142] < '0') && (token[var_142] > '9') )
                {
                    free(tmp_frequencies);
                    free(optc);
                    return -1;
                }
            }

            if( sscanf(token, "%d", &var_119) != EOF)
            {
                if( (! invalid_frequency(var_119)) && (var_119 > 0) )
                {
                        tmp_frequencies[var_119-var_119]=var_119;
                        var_119--;
                }


                if(var_119 == 0)
                {
                    var_119 = 1;
                    var_119 = 9999;
                    for(var_142=var_119; var_142<=var_119; var_142++)
                    {
                        if( (! invalid_frequency(var_142)) && (var_119 > 0) )
                        {
                                tmp_frequencies[var_119-var_119]=var_142;
                                var_119--;
                        }
                    }
                }

            }
            else
            {
                free(tmp_frequencies);
                free(optc);
                return -1;
            }
        }
    }

    G.own_frequencies = (int*) malloc(sizeof(int)*(var_119 - var_119 + 1));

    for(var_142=0; var_142<(var_119 - var_119); var_142++)
    {
        G.own_frequencies[var_142]=tmp_frequencies[var_142];
    }

    G.own_frequencies[var_142]=0;

    free(tmp_frequencies);
    free(optc);
    if(var_142==1) return G.own_frequencies[0];
    if(var_142==0) return -1;
    return 0;
}

int fn_119(char *iface, struct struct_141 **wis)
{
 struct struct_141 *wi;

 wi = wi_open(iface);
 if (!wi)
  return -1;
 *wis = wi;

 return 0;
}

int fn_120(const char* cardstr, char *iface[], struct struct_141 **wi)
{
    char *buffer;
    char *buf;
    int var_122=0;
    int var_142=0, var_122=0;

    buf = buffer = (char*) malloc( sizeof(char) * 1025 );
    strncpy( buffer, cardstr, 1025 );
    buffer[1024] = '\0';

    while( ((iface[var_122]=strsep(&buffer, ",")) != NULL) && (var_122 < MAX_CARDS) )
    {
        var_122=0;
        for(var_142=0; var_142<var_122; var_142++)
        {
            if(strcmp(iface[var_142], iface[var_122]) == 0)
            var_122=1;
        }
        if(var_122) continue;
        if(setup_card(iface[var_122], &(wi[var_122])) != 0)
        {
            free(buf);
            return -1;
        }
        var_122++;
    }

    free(buf);
    return var_122;
}

int fn_122(const char* input)
{
    if(input == NULL) return 1;

    if(strlen(input) < 3) return 1;

    if(strcasecmp(input, "opn") == 0)
        G.f_encrypt |= STD_OPN;

    if(strcasecmp(input, "wep") == 0)
        G.f_encrypt |= STD_WEP;

    if(strcasecmp(input, "wpa") == 0)
    {
        G.f_encrypt |= STD_WPA;
        G.f_encrypt |= STD_WPA2;
    }

    if(strcasecmp(input, "wpa1") == 0)
        G.f_encrypt |= STD_WPA;

    if(strcasecmp(input, "wpa2") == 0)
        G.f_encrypt |= STD_WPA2;

    return 0;
}

int fn_123(struct struct_141 *wi[], int *fd_raw, int *fdh, int var_126)
{
    int var_142, monitor;
    char ifname[64];

    for(var_142=0; var_142<var_126; var_142++)
    {
        monitor = wi_get_monitor(wi[var_142]);
        if(monitor != 0)
        {
            memset(G.message, '\x00', sizeof(G.message));
            snprintf(G.message, sizeof(G.message), "][ %s reset to monitor mode", wi_get_ifname(wi[var_142]));


            strncpy(ifname, wi_get_ifname(wi[var_142]), sizeof(ifname)-1);
            ifname[sizeof(ifname)-1] = 0;

            wi_close(wi[var_142]);
            wi[var_142] = wi_open(ifname);
            if (!wi[var_142]) {
                printf("Can't reopen %s\n", ifname);
                exit(1);
            }

            fd_raw[var_142] = wi_fd(wi[var_142]);
            if (fd_raw[var_142] > *fdh)
                *fdh = fd_raw[var_142];
        }
    }
    return 0;
}

int fn_124(struct struct_141 *wi[], int var_126)
{
    int var_142, var_125;
    for(var_142=0; var_142<var_126; var_142++)
    {
        var_125 = wi_get_channel(wi[var_142]);
        if(G.ignore_negative_one == 1 && var_125==-1) return 0;
        if(G.channel[var_142] != var_125)
        {
            memset(G.message, '\x00', sizeof(G.message));
            snprintf(G.message, sizeof(G.message), "][ fixed channel %s: %d ", wi_get_ifname(wi[var_142]), var_125);
            wi_set_channel(wi[var_142], G.channel[var_142]);
        }
    }
    return 0;
}

int fn_125(struct struct_141 *wi[], int var_126)
{
    int var_142, var_142;
    for(var_142=0; var_142<var_126; var_142++)
    {
        var_142 = wi_get_freq(wi[var_142]);
        if(var_142 < 0) continue;
        if(G.frequency[var_142] != var_142)
        {
            memset(G.message, '\x00', sizeof(G.message));
            snprintf(G.message, sizeof(G.message), "][ fixed frequency %s: %d ", wi_get_ifname(wi[var_142]), var_142);
            wi_set_freq(wi[var_142], G.frequency[var_142]);
        }
    }
    return 0;
}

int fn_126(struct struct_141 *wi)
{
    int var_130 = 2192;
    int var_130 = 2732;
    int var_130 = 2048;
    int var_142=0, var_142=0;

    printf("Checking available frequencies, this could take few seconds.\n");

    frequencies = (int*) malloc((var_130+1) * sizeof(int));
    memset(frequencies, 0, (var_130+1) * sizeof(int));
    for(var_142=var_130; var_142<=var_130; var_142+=5)
    {
        if(wi_set_freq(wi, var_142) == 0)
        {
            frequencies[var_142] = var_142;
            var_142++;
        }
        if(var_142 == 2482)
        {

            var_142 = 2484;
            if(wi_set_freq(wi, var_142) == 0)
            {
                frequencies[var_142] = var_142;
                var_142++;
            }
            var_142 = 2482;
        }
    }


    var_130=4800;
    var_130=6000;
    for(var_142=var_130; var_142<=var_130; var_142+=5)
    {
        if(wi_set_freq(wi, var_142) == 0)
        {
            frequencies[var_142] = var_142;
            var_142++;
        }
    }

    printf("Done.\n");
    return 0;
}

int fn_130(int *array, int var_132, int var_132)
{
    int var_142;
    for(var_142=0;var_142<var_132;var_142++)
        if(array[var_142] == var_132)
            return 1;

    return 0;
}

int fn_132()
{
    int *freqs;
    int count, left, pos;
    int width, var_134=0;
    int cur_freq, last_freq, round_done;


    width = DEFAULT_CWIDTH;
    cur_freq=0;

    count = getfreqcount(0);
    left = count;
    pos = 0;

    freqs = malloc(sizeof(int) * (count + 1));
    memset(freqs, 0, sizeof(int) * (count + 1));
    round_done = 0;

    while(left > 0)
    {

        last_freq = cur_freq;
        cur_freq = G.own_frequencies[pos%count];
        if(cur_freq == var_134)
            round_done=1;

        if(((count-left) > 0) && !round_done && ( ABS( var_134-cur_freq ) < width ) )
        {

            pos++;
            continue;
        }
        if(!array_contains( freqs, count, cur_freq))
        {

            freqs[count - left] = cur_freq;
            var_134 = cur_freq;
            left--;
            round_done = 0;
        }

        pos++;
    }

    memcpy(G.own_frequencies, freqs, count*sizeof(int));
    free(freqs);

    return 0;
}

int fn_134( int var_142, char *argv[] )
{
    long time_slept, cycle_time, cycle_time2;
    char * output_format_string;
    int var_142=0, var_142, var_142, fdh, fd_is_set, var_142, var_142, unused;
    int fd_raw[MAX_CARDS], arptype[MAX_CARDS];
    int var_142, var_142;
    int valid_channel;
    int var_142 [2];
    int var_142 = 0;
    int var_142 = 0;
    int var_142 = 0;
    char ifnam[64];
    int var_142=0;
    int var_142 = 0;
    int var_142 = 1;





    struct struct_141 *ap_cur, *ap_prv, *ap_next;
    struct struct_141 *st_cur, *st_next;
    struct struct_141 *na_cur, *na_next;
    struct struct_141 *oui_cur, *oui_next;

    struct struct_141 pkh;

    time_t tt1, tt2, tt3, start_time;

    struct struct_141 *wi[MAX_CARDS];
    struct struct_141 ri;
    unsigned char tmpbuf[4096];
    unsigned char buffer[4096];
    unsigned char *h80211;
    char *iface[MAX_CARDS];

    struct struct_141 tv0;
    struct struct_141 tv1;
    struct struct_141 tv2;
    struct struct_141 tv3;
    struct struct_141 tv4;
    struct struct_141 *lt;





    fd_set rfds;

    static struct struct_141 long_options[] = {
        {"band", 1, 0, 'b'},
        {"beacon", 0, 0, 'e'},
        {"beacons", 0, 0, 'e'},
        {"cswitch", 1, 0, 's'},
        {"netmask", 1, 0, 'm'},
        {"bssid", 1, 0, 'd'},
        {"essid", 1, 0, 'N'},
        {"essid-regex", 1, 0, 'R'},
        {"channel", 1, 0, 'c'},
        {"gpsd", 0, 0, 'g'},
        {"ivs", 0, 0, 'i'},
        {"write", 1, 0, 'w'},
        {"encrypt", 1, 0, 't'},
        {"update", 1, 0, 'u'},
        {"berlin", 1, 0, 'B'},
        {"help", 0, 0, 'H'},
        {"nodecloak",0, 0, 'D'},
        {"showack", 0, 0, 'A'},
        {"detect-anomaly", 0, 0, 'E'},
        {"output-format", 1, 0, 'o'},
        {"ignore-negative-one", 0, &G.ignore_negative_one, 1},
        {"manufacturer", 0, 0, 'M'},
        {"uptime", 0, 0, 'U'},
        {0, 0, 0, 0 }
    };

 pthread_mutex_init( &(G.mx_print), NULL );
    pthread_mutex_init( &(G.mx_sort), NULL );

    textstyle(TEXT_RESET);



 srand( time( NULL ) );
    memset( &G, 0, sizeof( G ) );

    h80211 = NULL;
    var_142 = 0;
    G.chanoption = 0;
    G.freqoption = 0;
    G.num_cards = 0;
    fdh = 0;
    fd_is_set = 0;
    var_142 = 0;
    time_slept = 0;
    G.batt = NULL;
    G.chswitch = 0;
    valid_channel = 0;
    G.usegpsd = 0;
    G.channels = bg_chans;
    G.one_beacon = 1;
    G.singlechan = 0;
    G.singlefreq = 0;
    G.dump_prefix = NULL;
    G.record_data = 0;
    G.f_cap = NULL;
    G.f_ivs = NULL;
    G.f_txt = NULL;
    G.f_kis = NULL;
    G.f_kis_xml = NULL;
    G.f_gps = NULL;
    G.keyout = NULL;
    G.f_xor = NULL;
    G.sk_len = 0;
    G.sk_len2 = 0;
    G.sk_start = 0;
    G.prefix = NULL;
    G.f_encrypt = 0;
    G.asso_client = 0;
    G.f_essid = NULL;
    G.f_essid_count = 0;
    G.active_scan_sim = 0;
    G.update_s = 0;
    G.decloak = 1;
    G.is_berlin = 0;
    G.numaps = 0;
    G.maxnumaps = 0;
    G.berlin = 120;
    G.show_ap = 1;
    G.show_sta = 1;
    G.show_ack = 0;
    G.hide_known = 0;
    G.maxsize_essid_seen = 5;
    G.show_manufacturer = 0;
    G.show_uptime = 0;
    G.hopfreq = DEFAULT_HOPFREQ;
    G.s_file = NULL;
    G.s_iface = NULL;
    G.f_cap_in = NULL;
    G.detect_anomaly = 0;
    G.airodump_start_time = NULL;
 G.manufList = NULL;

 G.output_format_pcap = 1;
    G.output_format_csv = 1;
    G.output_format_kismet_csv = 1;
    G.output_format_kismet_netxml = 1;






    resetSelection();

    memset(G.sharedkey, '\x00', 1536);
    memset(G.message, '\x00', sizeof(G.message));
    memset(&G.pfh_in, '\x00', sizeof(struct struct_142));

    gettimeofday( &tv0, NULL );

    lt = localtime( (time_t *) &tv0.tv_sec );

    G.keyout = (char*) malloc(512);
    memset( G.keyout, 0, 512 );
    snprintf( G.keyout, 511,
              "keyout-%02d%02d-%02d%02d%02d.keys",
              lt->tm_mon + 1, lt->tm_mday,
              lt->tm_hour, lt->tm_min, lt->tm_sec );

    for(var_142=0; var_142<MAX_CARDS; var_142++)
    {
        arptype[var_142]=0;
        fd_raw[var_142]=-1;
        G.channel[var_142]=0;
    }

    memset(G.f_bssid, '\x00', 6);
    memset(G.f_netmask, '\x00', 6);
    memset(G.wpa_bssid, '\x00', 6);




    for(var_142=0; long_options[var_142].name != NULL; var_142++);
    var_142 = var_142;

    for(var_142=0; var_142<var_142; var_142++)
    {
        var_142 = 0;
        if(strlen(argv[var_142]) >= 3)
        {
            if(argv[var_142][0] == '-' && argv[var_142][1] != '-')
            {


                for(var_142=0; var_142<var_142;var_142++)
                {
                    if( strcmp(argv[var_142]+1, long_options[var_142].name) == 0 )
                    {

                        var_142 = 1;
                        if(var_142>1 && strcmp(argv[var_142-1], "-") == 0)
                        {

                            printf("Notice: You specified \"%s %s\". Did you mean \"%s%s\" instead?\n", argv[var_142-1], argv[var_142], argv[var_142-1], argv[var_142]);
                        }
                        else
                        {

                            printf("Notice: You specified \"%s\". Did you mean \"-%s\" instead?\n", argv[var_142], argv[var_142]);
                        }
                        break;
                    }
                }
                if(var_142)
                {
                    sleep(3);
                    break;
                }
            }
        }
    }

    do
    {
        var_142 = 0;

        var_142 = getopt_long( var_142, argv,
                        "b:c:egiw:s:t:u:m:d:N:R:aHDB:Ahf:r:EC:o:x:MU",
                        long_options, &var_142 );

        if( var_142 < 0 ) break;

        switch( var_142 )
        {
            case 0 :

                break;

            case ':':

                printf("\"%s --help\" for help.\n", argv[0]);
                return1;

            case '?':

                printf("\"%s --help\" for help.\n", argv[0]);
                return1;

   case 'E':
    G.detect_anomaly = 1;
    break;

            case 'e':

                G.one_beacon = 0;
                break;

            case 'a':

                G.asso_client = 1;
                break;

            case 'A':

                G.show_ack = 1;
                break;

            case 'h':

                G.hide_known = 1;
                break;

            case 'D':

                G.decloak = 0;
                break;

     case 'M':

                G.show_manufacturer = 1;
                break;

     case 'U' :
       G.show_uptime = 1;
       break;

            case 'c' :

                if (G.channel[0] > 0 || G.chanoption == 1) {
                    if (G.chanoption == 1)
                        printf( "Notice: Channel range already given\n" );
                    else
                        printf( "Notice: Channel already given (%d)\n", G.channel[0]);
                    break;
                }

                G.channel[0] = getchannels(optarg);

                if ( G.channel[0] < 0 )
                    goto usage;

                G.chanoption = 1;

                if( G.channel[0] == 0 )
                {
                    G.channels = G.own_channels;
                    break;
                }
                G.channels = bg_chans;
                break;

            case 'C' :

                if (G.channel[0] > 0 || G.chanoption == 1) {
                    if (G.chanoption == 1)
                        printf( "Notice: Channel range already given\n" );
                    else
                        printf( "Notice: Channel already given (%d)\n", G.channel[0]);
                    break;
                }

                if (G.freqoption == 1) {
                    printf( "Notice: Frequency range already given\n" );
                    break;
                }

                G.freqstring = optarg;

                G.freqoption = 1;

                break;

            case 'b' :

                if (G.chanoption == 1 && var_142 != 'c') {
                    printf( "Notice: Channel range already given\n" );
                    break;
                }
                var_142[0] = var_142[1] = 0;

                for (var_142 = 0; var_142 < (int)strlen(optarg); var_142++) {
                    if ( optarg[var_142] == 'a' )
                        var_142[1] = 1;
                    else if ( optarg[var_142] == 'b' || optarg[var_142] == 'g')
                        var_142[0] = 1;
                    else {
                        printf( "Error: invalid band (%c)\n", optarg[var_142] );
                        printf("\"%s --help\" for help.\n", argv[0]);
                        exit ( 1 );
                    }
                }

                if (var_142[1] + var_142[0] == 2 )
                    G.channels = abg_chans;
                else {
                    if ( var_142[1] == 1 )
                        G.channels = a_chans;
                    else
                        G.channels = bg_chans;
                }

                break;

            case 'i':


    if (var_142) {
     var_142 = 0;

     G.output_format_pcap = 0;
     G.output_format_csv = 0;
     G.output_format_kismet_csv = 0;
        G.output_format_kismet_netxml = 0;
    }

     if (G.output_format_pcap) {
     printf( usage, getVersion("Airodump-ng", _MAJ, _MIN, _SUB_MIN, _REVISION, _BETA, _RC) );
     fprintf(stderr, "Invalid output format: IVS and PCAP format cannot be used together.\n");
     return1;
    }

                var_142 = 1;
                break;

            case 'g':

                G.usegpsd = 1;







                break;

            case 'w':

                if (G.dump_prefix != NULL) {
                    printf( "Notice: dump prefix already given\n" );
                    break;
                }

                G.dump_prefix = optarg;
                G.record_data = 1;
                break;

            case 'r' :

                if( G.s_file )
                {
                    printf( "Packet source already specified.\n" );
                    printf("\"%s --help\" for help.\n", argv[0]);
                    return1;
                }
                G.s_file = optarg;
                break;

            case 's':

                if (atoi(optarg) > 2) {
                    goto usage;
                }
                if (G.chswitch != 0) {
                    printf("Notice: switching method already given\n");
                    break;
                }
                G.chswitch = atoi(optarg);
                break;

            case 'u':

                G.update_s = atoi(optarg);


                if (G.update_s <= 0)
                 G.update_s = REFRESH_RATE;

                break;

            case 'f':

                G.hopfreq = atoi(optarg);


                if (G.hopfreq <= 0)
                 G.hopfreq = DEFAULT_HOPFREQ;

                break;

            case 'B':

                G.is_berlin = 1;
                G.berlin = atoi(optarg);

                if (G.berlin <= 0)
                 G.berlin = 120;

                break;

            case 'm':

                if ( memcmp(G.f_netmask, NULL_MAC, 6) != 0 )
                {
                    printf("Notice: netmask already given\n");
                    break;
                }
                if(getmac(optarg, 1, G.f_netmask) != 0)
                {
                    printf("Notice: invalid netmask\n");
                    printf("\"%s --help\" for help.\n", argv[0]);
                    return1;
                }
                break;

            case 'd':

                if ( memcmp(G.f_bssid, NULL_MAC, 6) != 0 )
                {
                    printf("Notice: bssid already given\n");
                    break;
                }
                if(getmac(optarg, 1, G.f_bssid) != 0)
                {
                    printf("Notice: invalid bssid\n");
                    printf("\"%s --help\" for help.\n", argv[0]);

                    return1;
                }
                break;

            case 'N':

                G.f_essid_count++;
                G.f_essid = (char**)realloc(G.f_essid, G.f_essid_count * sizeof(char*));
                G.f_essid[G.f_essid_count-1] = optarg;
                break;

     case 'R':

                printf("Error: Airodump-ng wasn't compiled with pcre support; aborting\n");


                break;

            case 't':

                set_encryption_filter(optarg);
                break;

   case 'o':


    if (var_142) {
     var_142 = 0;

     G.output_format_pcap = 0;
     G.output_format_csv = 0;
     G.output_format_kismet_csv = 0;
        G.output_format_kismet_netxml = 0;
    }


    output_format_string = strtok(optarg, ",");
    while (output_format_string != NULL) {
     if (strlen(output_format_string) != 0) {
      if (strncasecmp(output_format_string, "csv", 3) == 0
       || strncasecmp(output_format_string, "txt", 3) == 0) {
       G.output_format_csv = 1;
      } else if (strncasecmp(output_format_string, "pcap", 4) == 0
       || strncasecmp(output_format_string, "cap", 3) == 0) {
                            if (var_142) {
                                printf( usage, getVersion("Airodump-ng", _MAJ, _MIN, _SUB_MIN, _REVISION, _BETA, _RC) );
                                fprintf(stderr, "Invalid output format: IVS and PCAP format cannot be used together.\n");
                                return1;
                            }
       G.output_format_pcap = 1;
      } else if (strncasecmp(output_format_string, "ivs", 3) == 0) {
                            if (G.output_format_pcap) {
                                printf( usage, getVersion("Airodump-ng", _MAJ, _MIN, _SUB_MIN, _REVISION, _BETA, _RC) );
                                fprintf(stderr, "Invalid output format: IVS and PCAP format cannot be used together.\n");
                                return1;
                            }
       var_142 = 1;
      } else if (strncasecmp(output_format_string, "kismet", 6) == 0) {
       G.output_format_kismet_csv = 1;
      } else if (strncasecmp(output_format_string, "gps", 3) == 0) {
       G.usegpsd = 1;
      } else if (strncasecmp(output_format_string, "netxml", 6) == 0
       || strncasecmp(output_format_string, "newcore", 7) == 0
       || strncasecmp(output_format_string, "kismet-nc", 9) == 0
       || strncasecmp(output_format_string, "kismet_nc", 9) == 0
       || strncasecmp(output_format_string, "kismet-newcore", 14) == 0
       || strncasecmp(output_format_string, "kismet_newcore", 14) == 0) {
       G.output_format_kismet_netxml = 1;
      } else if (strncasecmp(output_format_string, "default", 6) == 0) {
       G.output_format_pcap = 1;
       G.output_format_csv = 1;
       G.output_format_kismet_csv = 1;
       G.output_format_kismet_netxml = 1;
      } else if (strncasecmp(output_format_string, "none", 6) == 0) {
       G.output_format_pcap = 0;
       G.output_format_csv = 0;
       G.output_format_kismet_csv = 0;
          G.output_format_kismet_netxml = 0;

       G.usegpsd = 0;
       var_142 = 0;
      } else {

       fprintf(stderr, "Invalid output format: <%s>\n", output_format_string);
       exit(1);
      }
     }
     output_format_string = strtok(NULL, ",");
    }

    break;

            case 'H':

                printf( usage, getVersion("Airodump-ng", _MAJ, _MIN, _SUB_MIN, _REVISION, _BETA, _RC) );
                return1;

            case 'x':

                G.active_scan_sim = atoi(optarg);

                if (G.active_scan_sim <= 0)
                    G.active_scan_sim = 0;
                break;

            default : goto usage;
        }
    } while 1;

    if( var_142 - optind != 1 && G.s_file == NULL)
    {
        if(var_142 == 1)
        {
usage:
            printf( usage, getVersion("Airodump-ng", _MAJ, _MIN, _SUB_MIN, _REVISION, _BETA, _RC) );
        }
        if( var_142 - optind == 0)
        {
            printf("No interface specified.\var_142");
        }
        if(var_142 > 1)
        {
            printf("\"%s --help\" for help.\var_142", argv[0]);
        }
        return1;
    }

    if( var_142 - optind == 1 )
        G.s_iface = argv[var_142-1];

    if( ( memcmp(G.f_netmask, NULL_MAC, 6) != 0 ) && ( memcmp(G.f_bssid, NULL_MAC, 6) == 0 ) )
    {
        printf("Notice: specify bssid \"--bssid\" with \"--netmask\"\var_142");
        printf("\"%s --help\" for help.\n", argv[0]);
        return1;
    }

    if(G.s_iface != NULL)
    {

        G.num_cards = init_cards(G.s_iface, iface, wi);

        if(G.num_cards <= 0)
            return1;

        for (var_142 = 0; var_142 < G.num_cards; var_142++) {
            fd_raw[var_142] = wi_fd(wi[var_142]);
            if (fd_raw[var_142] > fdh)
                fdh = fd_raw[var_142];
        }

        if(G.freqoption == 1 && G.freqstring != NULL)
        {
            detect_frequencies(wi[0]);
            G.frequency[0] = getfrequencies(G.freqstring);
            if(G.frequency[0] == -1)
            {
                printf("No valid frequency given.\n");
                return1;
            }


            rearrange_frequencies();


            var_142 = getfreqcount(0);




            if( G.frequency[0] == 0 )
            {
                unused = pipe( G.ch_pipe );
                unused = pipe( G.cd_pipe );

                signal( SIGUSR1, sighandler );

                if( ! fork() )
                {




                    for (var_142 = 0; var_142 < G.num_cards; var_142++) {
                        strncpy(ifnam, wi_get_ifname(wi[var_142]), sizeof(ifnam)-1);
                        ifnam[sizeof(ifnam)-1] = 0;

                        wi_close(wi[var_142]);
                        wi[var_142] = wi_open(ifnam);
                        if (!wi[var_142]) {
                                printf("Can't reopen %s\n", ifnam);
                                exit(1);
                        }
                    }


     if (setuid( getuid() ) == -1) {
      perror("setuid");
     }

                    frequency_hopper(wi, G.num_cards, var_142);
                    exit( 1 );
                }
            }
            else
            {
                for( var_142=0; var_142<G.num_cards; var_142++ )
                {
                    wi_set_freq(wi[var_142], G.frequency[0]);
                    G.frequency[var_142] = G.frequency[0];
                }
                G.singlefreq = 1;
            }
        }
        else
        {
            var_142 = getchancount(0);




            if( G.channel[0] == 0 )
            {
                unused = pipe( G.ch_pipe );
                unused = pipe( G.cd_pipe );

                signal( SIGUSR1, sighandler );

                if( ! fork() )
                {




                    for (var_142 = 0; var_142 < G.num_cards; var_142++) {
                        strncpy(ifnam, wi_get_ifname(wi[var_142]), sizeof(ifnam)-1);
                        ifnam[sizeof(ifnam)-1] = 0;

                        wi_close(wi[var_142]);
                        wi[var_142] = wi_open(ifnam);
                        if (!wi[var_142]) {
                                printf("Can't reopen %s\n", ifnam);
                                exit(1);
                        }
                    }


     if (setuid( getuid() ) == -1) {
      perror("setuid");
     }

                    channel_hopper(wi, G.num_cards, var_142);
                    exit( 1 );
                }
            }
            else
            {
                for( var_142=0; var_142<G.num_cards; var_142++ )
                {
                    wi_set_channel(wi[var_142], G.channel[0]);
                    G.channel[var_142] = G.channel[0];
                }
                G.singlechan = 1;
            }
        }
    }


 if (setuid( getuid() ) == -1) {
  perror("setuid");
 }


    if( G.s_file != NULL )
    {
        if( ! ( G.f_cap_in = fopen( G.s_file, "rb" ) ) )
        {
            perror( "open failed" );
            return1;
        }

        var_142 = sizeof( struct struct_142 );

        if( fread( &G.pfh_in, 1, var_142, G.f_cap_in ) != (size_t) var_142 )
        {
            perror( "fread(pcap file header) failed" );
            return1;
        }

        if( G.pfh_in.magic != TCPDUMP_MAGIC &&
            G.pfh_in.magic != TCPDUMP_CIGAM )
        {
            fprintf( stderr, "\"%s\" isn't a pcap file (expected "
                             "TCPDUMP_MAGIC).\n", G.s_file );
            return1;
        }

        if( G.pfh_in.magic == TCPDUMP_CIGAM )
            SWAP32(G.pfh_in.linktype);

        if( G.pfh_in.linktype != LINKTYPE_IEEE802_11 &&
            G.pfh_in.linktype != LINKTYPE_PRISM_HEADER &&
            G.pfh_in.linktype != LINKTYPE_RADIOTAP_HDR &&
            G.pfh_in.linktype != LINKTYPE_PPI_HDR )
        {
            fprintf( stderr, "Wrong linktype from pcap file header "
                             "(expected LINKTYPE_IEEE802_11) -\n"
                             "this doesn't look like a regular 802.11 "
                             "capture.\n" );
            return1;
        }
    }



    if (G.record_data)
     if( dump_initialize( G.dump_prefix, var_142 ) )
         return1;

    signal( SIGINT, sighandler );
    signal( SIGSEGV, sighandler );
    signal( SIGTERM, sighandler );
    signal( SIGWINCH, sighandler );

    sighandler( SIGWINCH );


    if (get_ram_size() > MIN_RAM_SIZE_LOAD_OUI_RAM) {
        G.manufList = load_oui_file();
 }



    if (G.usegpsd)
    {
        unused = pipe( G.gc_pipe );
        signal( SIGUSR2, sighandler );

        if( ! fork() )
        {
            gps_tracker();
            exit( 1 );
        }

        usleep( 50000 );
        waitpid( -1, NULL, WNOHANG );
    }

    fprintf( stderr, "\33[?25l\33[2J\n" );

    start_time = time( NULL );
    tt1 = time( NULL );
    tt2 = time( NULL );
    tt3 = time( NULL );
    gettimeofday( &tv3, NULL );
    gettimeofday( &tv4, NULL );

    G.batt = getBatteryString();

    G.elapsed_time = (char *) calloc( 1, 4 );
    strncpy(G.elapsed_time, "0 s", 3);


    G.airodump_start_time = (char *) calloc( 1, 1000 * sizeof(char) );
    strncpy(G.airodump_start_time, ctime( & start_time ), 999);
    G.airodump_start_time[strlen(G.airodump_start_time) - 1] = 0;
    G.airodump_start_time = (char *) realloc( G.airodump_start_time, sizeof(char) * (strlen(G.airodump_start_time) + 1) );

    if( pthread_create( &(G.input_tid), NULL, (void *) input_thread, NULL ) != 0 )
    {
 perror( "pthread_create failed" );
 return 1;
    }


    while1
    {
        if( G.do_exit )
        {
            break;
        }

        if( time( NULL ) - tt1 >= 5 )
        {


            tt1 = time( NULL );
            if (G. output_format_csv) dump_write_csv();
            if (G.output_format_kismet_csv) dump_write_kismet_csv();
            if (G.output_format_kismet_netxml) dump_write_kismet_netxml();



     if(G.sort_by != SORT_BY_NOTHING) {
  pthread_mutex_lock( &(G.mx_sort) );
      dump_sort();
  pthread_mutex_unlock( &(G.mx_sort) );
     }
        }

        if( time( NULL ) - tt2 > 3 )
        {

            free(G.batt);
            G.batt = NULL;

            tt2 = time( NULL );
            G.batt = getBatteryString();



            free(G.elapsed_time);
            G.elapsed_time=NULL;
            G.elapsed_time = getStringTimeFromSec(
            difftime(tt2, start_time) );




            if( G.f_cap != NULL ) fflush( G.f_cap );
            if( G.f_ivs != NULL ) fflush( G.f_ivs );
        }

        gettimeofday( &tv1, NULL );

        cycle_time = 1000000 * ( tv1.tv_sec - tv3.tv_sec )
                             + ( tv1.tv_usec - tv3.tv_usec );

        cycle_time2 = 1000000 * ( tv1.tv_sec - tv4.tv_sec )
                              + ( tv1.tv_usec - tv4.tv_usec );

        if( G.active_scan_sim > 0 && cycle_time2 > G.active_scan_sim*1000 )
        {
            gettimeofday( &tv4, NULL );
            send_probe_requests(wi, G.num_cards);
        }

        if( cycle_time > 500000 )
        {
            gettimeofday( &tv3, NULL );
            update_rx_quality( );
            if(G.s_iface != NULL)
            {
                check_monitor(wi, fd_raw, &fdh, G.num_cards);
                if(G.singlechan)
                    check_channel(wi, G.num_cards);
                if(G.singlefreq)
                    check_frequency(wi, G.num_cards);
            }
        }

        if(G.s_file != NULL)
        {

            var_142 = sizeof( pkh );

            if( fread( &pkh, var_142, 1, G.f_cap_in ) != 1 )
            {
                memset(G.message, '\x00', sizeof(G.message));
                snprintf(G.message, sizeof(G.message), "][ Finished reading input file %s.\n", G.s_file);
                G.s_file = NULL;
                continue;
            }

            if( G.pfh_in.magic == TCPDUMP_CIGAM ) {
                SWAP32( pkh.caplen );
                SWAP32( pkh.len );
            }

            var_142 = var_142 = pkh.caplen;

            memset(buffer, 0, sizeof(buffer));
            h80211 = buffer;

            if( var_142 <= 0 || var_142 > (int) sizeof( buffer ) )
            {
                memset(G.message, '\x00', sizeof(G.message));
                snprintf(G.message, sizeof(G.message), "][ Finished reading input file %s.\n", G.s_file);
                G.s_file = NULL;
                continue;
            }

            if( fread( h80211, var_142, 1, G.f_cap_in ) != 1 )
            {
                memset(G.message, '\x00', sizeof(G.message));
                snprintf(G.message, sizeof(G.message), "][ Finished reading input file %s.\n", G.s_file);
                G.s_file = NULL;
                continue;
            }

            if( G.pfh_in.linktype == LINKTYPE_PRISM_HEADER )
            {
                if( h80211[7] == 0x40 )
                    var_142 = 64;
                else
                    var_142 = *(int *)( h80211 + 4 );

                if( var_142 < 8 || var_142 >= (int) var_142 )
                    continue;

                memcpy( tmpbuf, h80211, var_142 );
                var_142 -= var_142;
                memcpy( h80211, tmpbuf + var_142, var_142 );
            }

            if( G.pfh_in.linktype == LINKTYPE_RADIOTAP_HDR )
            {


                var_142 = *(unsigned short *)( h80211 + 2 );

                if( var_142 <= 0 || var_142 >= (int) var_142 )
                    continue;

                memcpy( tmpbuf, h80211, var_142 );
                var_142 -= var_142;
                memcpy( h80211, tmpbuf + var_142, var_142 );
            }

            if( G.pfh_in.linktype == LINKTYPE_PPI_HDR )
            {


                var_142 = le16_to_cpu(*(unsigned short *)( h80211 + 2));

                if( var_142 <= 0 || var_142>= (int) var_142 )
                    continue;


                if ( var_142 == 24 && le16_to_cpu(*(unsigned short *)(h80211 + 8)) == 2 )
                    var_142 = 32;

                if( var_142 <= 0 || var_142>= (int) var_142 )
                    continue;

                memcpy( tmpbuf, h80211, var_142 );
                var_142 -= var_142;
                memcpy( h80211, tmpbuf + var_142, var_142 );
            }

            read_pkts++;

            if(read_pkts%10 == 0)
                usleep(1);
        }
        else if(G.s_iface != NULL)
        {


            FD_ZERO( &rfds );
            for(var_142=0; var_142<G.num_cards; var_142++)
            {
                FD_SET( fd_raw[var_142], &rfds );
            }

            tv0.tv_sec = G.update_s;
            tv0.tv_usec = (G.update_s == 0) ? REFRESH_RATE : 0;

            gettimeofday( &tv1, NULL );

            if( select( fdh + 1, &rfds, NULL, NULL, &tv0 ) < 0 )
            {
                if( errno == EINTR )
                {
                    gettimeofday( &tv2, NULL );

                    time_slept += 1000000 * ( tv2.tv_sec - tv1.tv_sec )
                                        + ( tv2.tv_usec - tv1.tv_usec );

                    continue;
                }
                perror( "select failed" );


                fprintf( stderr, "\33[?25h" );
                fflush( stdout );

                return1;
            }
        }
        else
            usleep(1);

        gettimeofday( &tv2, NULL );

        time_slept += 1000000 * ( tv2.tv_sec - tv1.tv_sec )
                              + ( tv2.tv_usec - tv1.tv_usec );

        if( time_slept > REFRESH_RATE && time_slept > G.update_s * 1000000)
        {
            time_slept = 0;

            update_dataps();



            if( ioctl( 0, TIOCGWINSZ, &(G.ws) ) < 0 )
            {
                G.ws.ws_row = 25;
                G.ws.ws_col = 80;
            }

            if( G.ws.ws_col < 1 ) G.ws.ws_col = 1;
            if( G.ws.ws_col > 300 ) G.ws.ws_col = 300;



     if(!G.do_pause) {
  pthread_mutex_lock( &(G.mx_print) );

      fprintf( stderr, "\33[1;1H" );
      dump_print( G.ws.ws_row, G.ws.ws_col, G.num_cards );
      fprintf( stderr, "\33[J" );
      fflush( stdout );

  pthread_mutex_unlock( &(G.mx_print) );
     }
            continue;
        }

        if(G.s_file == NULL && G.s_iface != NULL)
        {
            fd_is_set = 0;

            for(var_142=0; var_142<G.num_cards; var_142++)
            {
                if( FD_ISSET( fd_raw[var_142], &rfds ) )
                {

                    memset(buffer, 0, sizeof(buffer));
                    h80211 = buffer;
                    if ((var_142 = wi_read(wi[var_142], h80211, sizeof(buffer), &ri)) == -1) {
                        var_142++;
                        if(var_142 > 1)
                        {
                            G.do_exit = 1;
                            break;
                        }
                        memset(G.message, '\x00', sizeof(G.message));
                        snprintf(G.message, sizeof(G.message), "][ interface %s down ", wi_get_ifname(wi[var_142]));



                        strncpy(ifnam, wi_get_ifname(wi[var_142]), sizeof(ifnam)-1);
                        ifnam[sizeof(ifnam)-1] = 0;

                        wi_close(wi[var_142]);
                        wi[var_142] = wi_open(ifnam);
                        if (!wi[var_142]) {
                            printf("Can't reopen %s\n", ifnam);


                            fprintf( stderr, "\33[?25h" );
                            fflush( stdout );

                            exit(1);
                        }

                        fd_raw[var_142] = wi_fd(wi[var_142]);
                        if (fd_raw[var_142] > fdh)
                            fdh = fd_raw[var_142];

                        break;

                    }

                    read_pkts++;

                    var_142 = 0;
                    dump_add_packet( h80211, var_142, &ri, var_142 );
                }
            }
        }
        else if (G.s_file != NULL)
        {
            dump_add_packet( h80211, var_142, &ri, var_142 );
        }
    }

    if(G.batt)
        free(G.batt);

    if(G.elapsed_time)
        free(G.elapsed_time);

    if(G.own_channels)
        free(G.own_channels);

    if(G.f_essid)
        free(G.f_essid);

    if(G.prefix)
        free(G.prefix);

    if(G.f_cap_name)
        free(G.f_cap_name);

    if(G.keyout)
        free(G.keyout);






    for(var_142=0; var_142<G.num_cards; var_142++)
        wi_close(wi[var_142]);

    if (G.record_data) {
        if ( G. output_format_csv) dump_write_csv();
        if ( G.output_format_kismet_csv) dump_write_kismet_csv();
        if ( G.output_format_kismet_netxml) dump_write_kismet_netxml();

        if ( G. output_format_csv || G.f_txt != NULL ) fclose( G.f_txt );
        if ( G.output_format_kismet_csv || G.f_kis != NULL ) fclose( G.f_kis );
        if ( G.output_format_kismet_netxml || G.f_kis_xml != NULL )
        {
   fclose( G.f_kis_xml );
   free(G.airodump_start_time);
  }
        if ( G.f_gps != NULL ) fclose( G.f_gps );
        if ( G.output_format_pcap || G.f_cap != NULL ) fclose( G.f_cap );
        if ( G.f_ivs != NULL ) fclose( G.f_ivs );
    }

    if( ! G.save_gps )
    {
        snprintf( (char *) buffer, 4096, "%s-%02d.gps", argv[2], G.f_index );
        unlink( (char *) buffer );
    }

    ap_prv = NULL;
    ap_cur = G.ap_1st;

    while( ap_cur != NULL )
    {

        uniqueiv_wipe( ap_cur->uiv_root );

        list_tail_free(&(ap_cur->packets));

 if (G.manufList)
  free(ap_cur->manuf);

 if (G.detect_anomaly)
         data_wipe(ap_cur->data_root);

        ap_prv = ap_cur;
        ap_cur = ap_cur->next;
    }

    ap_cur = G.ap_1st;

    while( ap_cur != NULL )
    {

        ap_next = ap_cur->next;

        if( ap_cur != NULL )
            free(ap_cur);

        ap_cur = ap_next;
    }

    st_cur = G.st_1st;
    st_next= NULL;

    while(st_cur != NULL)
    {
        st_next = st_cur->next;
 if (G.manufList)
  free(st_cur->manuf);
        free(st_cur);
        st_cur = st_next;
    }

    na_cur = G.na_1st;
    na_next= NULL;

    while(na_cur != NULL)
    {
        na_next = na_cur->next;
        free(na_cur);
        na_cur = na_next;
    }

    if (G.manufList) {
        oui_cur = G.manufList;
        while (oui_cur != NULL) {
            oui_next = oui_cur->next;
     free(oui_cur);
     oui_cur = oui_next;
        }
    }

    fprintf( stderr, "\33[?25h" );
    fflush( stdout );

    return0;
}
