







int fn_0(struct struct_17 *reader, uint64_t var_3) {
 return var_3 > 0 && var_3 < reader->superblock.end_of_file_address;
}


uint64_t fn_3(struct struct_17 *reader, int var_5) {
 int i, c;
 uint64_t value;
 c = fgetc(reader->fhd);
 if (c < 0)
  return 0xffffffffffffffffLL;
 value = (uint8_t) c;
 for (i = 1; i < var_5; i++) {
  c = fgetc(reader->fhd);
  if (c < 0)
   return 0xffffffffffffffffLL;
  value |= ((uint64_t) c) << (i * 8);
 }
 return value;
}

static int fn_5(char *s1, char *s2) {
 if (s1 == NULL && s2 == NULL)
  return 0;
 if (s1 == NULL)
  return -1;
 if (s2 == NULL)
  return 1;
 return strcmp(s1, s2);
}

static int fn_6(struct struct_19 *attribute, char *name,
  char *value) {
 while (attribute) {
  if (!mystrcmp(attribute->name, name)
    && !mystrcmp(attribute->value, value))
   return MYSOFA_OK;
  attribute = attribute->next;
 }

 return MYSOFA_INVALID_FORMAT;
}

static int fn_8(unsigned *dim, struct struct_12 *dataobject) {
 int err;
 struct struct_19 *attr = dataobject->attributes;

 if (!!(err = checkAttribute(dataobject->attributes, "CLASS",
   "DIMENSION_SCALE")))
  return err;

 while (attr) {
  log(" %s=%s\n",attr->name,attr->value);

  if (!strcmp(attr->name, "NAME")
    && attr->value && !strncmp(attr->value,
      "This is a netCDF dimension but not a netCDF variable.",
      53)) {
   char *p = attr->value + strlen(attr->value) - 1;
   while (isdigit(*p)) {
    p--;
   }
   p++;
   *dim = atoi(p);
   log("NETCDF DIM %u\n",*dim);
   return MYSOFA_OK;
  }
  attr = attr->next;
 }
 return MYSOFA_INVALID_FORMAT;
}

static int fn_10(struct struct_18 *array, struct struct_12 *dataobject) {
 float *p1;
 double *p2;
 int i;

 struct struct_19 *attr = dataobject->attributes;
 while (attr) {
  log(" %s=%s\n",attr->name,attr->value);

  attr = attr->next;
 }

 if (dataobject->dt.u.f.bit_precision != 64)
  return MYSOFA_UNSUPPORTED_FORMAT;

 array->attributes = dataobject->attributes;
 dataobject->attributes = NULL;
 array->elements = dataobject->data_len / 8;

 p1 = dataobject->data;
 p2 = dataobject->data;
 for (i = 0; i < array->elements; i++)
  *p1++ = *p2++;
 array->values = realloc(dataobject->data, array->elements * sizeof(float));

 dataobject->data = NULL;

 return MYSOFA_OK;
}

static struct struct_19 *fn_13(struct struct_17 *reader, int *err) {
 int var_16 = 0;
 struct struct_15 *dir = reader->superblock.dataobject.directory;

 struct struct_19 *hrtf = malloc(sizeof(struct struct_19));
 if (!hrtf) {
  *err = errno;
  return NULL;
 }
 memset(hrtf, 0, sizeof(struct struct_19));


 hrtf->attributes = reader->superblock.dataobject.attributes;
 reader->superblock.dataobject.attributes = NULL;


 if (!!(*err = checkAttribute(hrtf->attributes, "Conventions", "SOFA")))
  goto error;


 while (dir) {
  if (dir->dataobject.name && dir->dataobject.name[0]
    && dir->dataobject.name[1] == 0) {
   switch (dir->dataobject.name[0]) {
   case 'I':
    *err = getDimension(&hrtf->I, &dir->dataobject);
    var_16 |= 1;
    break;
   case 'C':
    *err = getDimension(&hrtf->C, &dir->dataobject);
    var_16 |= 2;
    break;
   case 'R':
    *err = getDimension(&hrtf->R, &dir->dataobject);
    var_16 |= 4;
    break;
   case 'E':
    *err = getDimension(&hrtf->E, &dir->dataobject);
    var_16 |= 8;
    break;
   case 'N':
    *err = getDimension(&hrtf->N, &dir->dataobject);
    var_16 |= 0x10;
    break;
   case 'M':
    *err = getDimension(&hrtf->M, &dir->dataobject);
    var_16 |= 0x20;
    break;
   case 'S':
    break;
   default:
    log("UNKNOWN SOFA VARIABLE %s", dir->dataobject.name);
    goto error;
   }
   if (*err)
    goto error;
  }
  dir = dir->next;
 }

 if (var_16 != 0x3f || hrtf->I != 1 || hrtf->C != 3) {
  log("dimensions are missing or wrong\n");
  goto error;
 }

 dir = reader->superblock.dataobject.directory;
 while (dir) {

  if(!dir->dataobject.name) {
   log("SOFA VARIABLE IS NULL.\n");
  }
  else if (!strcmp(dir->dataobject.name, "ListenerPosition")) {
   *err = getArray(&hrtf->ListenerPosition, &dir->dataobject);
  } else if (!strcmp(dir->dataobject.name, "ReceiverPosition")) {
   *err = getArray(&hrtf->ReceiverPosition, &dir->dataobject);
  } else if (!strcmp(dir->dataobject.name, "SourcePosition")) {
   *err = getArray(&hrtf->SourcePosition, &dir->dataobject);
  } else if (!strcmp(dir->dataobject.name, "EmitterPosition")) {
   *err = getArray(&hrtf->EmitterPosition, &dir->dataobject);
  } else if (!strcmp(dir->dataobject.name, "ListenerUp")) {
   *err = getArray(&hrtf->ListenerUp, &dir->dataobject);
  } else if (!strcmp(dir->dataobject.name, "ListenerView")) {
   *err = getArray(&hrtf->ListenerView, &dir->dataobject);
  } else if (!strcmp(dir->dataobject.name, "Data.IR")) {
   *err = getArray(&hrtf->DataIR, &dir->dataobject);
  } else if (!strcmp(dir->dataobject.name, "Data.SamplingRate")) {
   *err = getArray(&hrtf->DataSamplingRate, &dir->dataobject);
  } else if (!strcmp(dir->dataobject.name, "Data.Delay")) {
   *err = getArray(&hrtf->DataDelay, &dir->dataobject);
  } else {
   if (!(dir->dataobject.name[0] && !dir->dataobject.name[1]))
    log("UNKNOWN SOFA VARIABLE %s.\n", dir->dataobject.name);
  }
  dir = dir->next;
 }

 return hrtf;

 error: free(hrtf);
 if (!*err)
  *err = MYSOFA_INVALID_FORMAT;
 return NULL;
}

MYSOFA_EXPORT struct MYSOFA_HRTF* fn_16(const char *filename, int *err) {
 struct struct_17 reader;
 struct struct_19 *hrtf = NULL;

 if (filename == NULL)
  filename = CMAKE_INSTALL_PREFIX "/share/libmysofa/default.sofa";

 if (strcmp(filename, "-"))
  reader.fhd = fopen(filename, "rb");
 else
  reader.fhd = stdin;

 if (!reader.fhd) {
  log("cannot open file %s\n", filename);
  *err = errno;
  return NULL;
 }
 reader.gcol = NULL;
 reader.all = NULL;
 reader.recursive_counter = 0;

 *err = superblockRead(&reader, &reader.superblock);

 if (!*err) {
  hrtf = getHrtf(&reader, err);
 }

 superblockFree(&reader, &reader.superblock);
 gcolFree(reader.gcol);
 if (strcmp(filename, "-"))
  fclose(reader.fhd);

 return hrtf;
}

static void fn_17(struct struct_18 *array) {
 while (array->attributes) {
  struct struct_19 *next = array->attributes->next;
  free(array->attributes->name);
  free(array->attributes->value);
  free(array->attributes);
  array->attributes = next;
 }
 free(array->values);
}

MYSOFA_EXPORT void fn_18(struct struct_19 *hrtf) {
 if (!hrtf)
  return;

 while (hrtf->attributes) {
  struct struct_19 *next = hrtf->attributes->next;
  free(hrtf->attributes->name);
  free(hrtf->attributes->value);
  free(hrtf->attributes);
  hrtf->attributes = next;
 }

 arrayFree(&hrtf->ListenerPosition);
 arrayFree(&hrtf->ReceiverPosition);
 arrayFree(&hrtf->SourcePosition);
 arrayFree(&hrtf->EmitterPosition);
 arrayFree(&hrtf->ListenerUp);
 arrayFree(&hrtf->ListenerView);
 arrayFree(&hrtf->DataIR);
 arrayFree(&hrtf->DataSamplingRate);
 arrayFree(&hrtf->DataDelay);
 free(hrtf);
}

MYSOFA_EXPORT void fn_19(int *major, int *minor, int *patch) {
 *major = CPACK_PACKAGE_VERSION_MAJOR;
 *minor = CPACK_PACKAGE_VERSION_MINOR;
 *patch = CPACK_PACKAGE_VERSION_PATCH;
}
