







OPENEXR_IMF_INTERNAL_NAMESPACE_SOURCE_ENTER

using IMATH_NAMESPACE::Box2i;
using IMATH_NAMESPACE::V2i;
using std::string;
using std::vector;
using std::min;
using std::max;
using ILMTHREAD_NAMESPACE::Mutex;
using ILMTHREAD_NAMESPACE::Lock;
using ILMTHREAD_NAMESPACE::Semaphore;
using ILMTHREAD_NAMESPACE::Task;
using ILMTHREAD_NAMESPACE::TaskGroup;
using ILMTHREAD_NAMESPACE::ThreadPool;

namespace {

struct struct_0
{
    PixelType typeInFrameBuffer;
    PixelType typeInFile;
    char * base;
    size_t xStride;
    size_t yStride;
    bool fill;
    bool skip;
    double fillValue;
    int xTileCoords;
    int yTileCoords;

    func_1 (PixelType typeInFrameBuffer = HALF,
                  PixelType typeInFile = HALF,
                  char *base = 0,
                  size_t xStride = 0,
                  size_t yStride = 0,
                  bool fill = false,
                  bool skip = false,
                  double fillValue = 0.0,
                  int xTileCoords = 0,
                  int yTileCoords = 0);
};


func_1::func_1 (PixelType tifb,
                            PixelType tifl,
                            char *b,
                            size_t xs, size_t ys,
                            bool f, bool s,
                            double fv,
                            int xtc,
                            int ytc)
:
    typeInFrameBuffer (tifb),
    typeInFile (tifl),
    base (b),
    xStride (xs),
    yStride (ys),
    fill (f),
    skip (s),
    fillValue (fv),
    xTileCoords (xtc),
    yTileCoords (ytc)
{

}


struct struct_11
{
    const char * uncompressedData;
    char * buffer;
    int dataSize;
    Compressor * compressor;
    Compressor::Format format;
    int dx;
    int dy;
    int lx;
    int ly;
    bool hasException;
    string exception;

     func_12 (Compressor * const comp);
    ~func_12 ();

    inline void wait () {_sem.wait();}
    inline void post () {_sem.post();}

 protected:

    Semaphore _sem;
};


func_12::func_12 (Compressor *comp):
    uncompressedData (0),
    buffer (0),
    dataSize (0),
    compressor (comp),
    format (defaultFormat (compressor)),
    dx (-1),
    dy (-1),
    lx (-1),
    ly (-1),
    hasException (false),
    exception (),
    _sem (1)
{

}


func_12::~func_12 ()
{
    delete compressor;
}

}


class class_13;







struct TiledInputFile::func_14: public Mutex
{
    Header header;
    TileDescription tileDesc;
    int version;
    FrameBuffer frameBuffer;
    LineOrder lineOrder;
    int minX;
    int maxX;
    int minY;
    int maxY;

    int numXLevels;
    int numYLevels;
    int * numXTiles;
    int * numYTiles;

    TileOffsets tileOffsets;


    bool fileIsComplete;


    vector<func_1> slices;

    size_t bytesPerPixel;

    size_t maxBytesPerTileLine;


    int partNumber;

    bool multiPartBackwardSupport;


    int numThreads;

    class_13* multiPartFile;


    vector<func_12*> tileBuffers;
    size_t tileBufferSize;

    bool memoryMapped;

    InputStreamMutex * _streamData;
    bool _deleteStream;

     func_14 (int numThreads);
    ~func_14 ();

    inline func_12 * getTileBuffer (int number);


};


TiledInputFile::func_14::func_14 (int numThreads):
    numXTiles (0),
    numYTiles (0),
    partNumber (-1),
    multiPartBackwardSupport(false),
    numThreads(numThreads),
    memoryMapped(false),
    _streamData(NULL),
    _deleteStream(false)
{





    tileBuffers.resize (max (1, 2 * numThreads));
}


TiledInputFile::func_14::~func_14 ()
{
    delete [] numXTiles;
    delete [] numYTiles;

    for (size_t i = 0; i < tileBuffers.size(); i++)
        delete tileBuffers[i];

    if (multiPartBackwardSupport)
        delete multiPartFile;
}


func_12*
TiledInputFile::func_14::getTileBuffer (int number)
{
    return tileBuffers[number % tileBuffers.size()];
}


namespace {

void
func_18 (InputStreamMutex *streamData,
              TiledInputFile::func_14 *ifd,
       int dx, int dy,
       int lx, int ly,
              char *&buffer,
              int &dataSize)
{

    Int64 tileOffset = ifd->tileOffsets (dx, dy, lx, ly);

    if (tileOffset == 0)
    {
        THROW (IEX_NAMESPACE::InputExc, "Tile (" << dx << ", " << dy << ", " <<
         lx << ", " << ly << ") is missing.");
    }

    if (!isMultiPart(ifd->version))
    {
        if (streamData->currentPosition != tileOffset)
            streamData->is->seekg (tileOffset);
    }
    else
    {




        if (streamData->is->tellg() != tileOffset)
            streamData->is->seekg (tileOffset);
    }







    int tileXCoord, tileYCoord, levelX, levelY;

    if (isMultiPart(ifd->version))
    {
        int partNumber;
        Xdr::read <StreamIO> (*streamData->is, partNumber);
        if (partNumber != ifd->partNumber)
        {
            THROW (IEX_NAMESPACE::ArgExc, "Unexpected part number " << partNumber
                   << ", should be " << ifd->partNumber << ".");
        }
    }

    OPENEXR_IMF_INTERNAL_NAMESPACE::Xdr::read <OPENEXR_IMF_INTERNAL_NAMESPACE::StreamIO> (*streamData->is, tileXCoord);
    OPENEXR_IMF_INTERNAL_NAMESPACE::Xdr::read <OPENEXR_IMF_INTERNAL_NAMESPACE::StreamIO> (*streamData->is, tileYCoord);
    OPENEXR_IMF_INTERNAL_NAMESPACE::Xdr::read <OPENEXR_IMF_INTERNAL_NAMESPACE::StreamIO> (*streamData->is, levelX);
    OPENEXR_IMF_INTERNAL_NAMESPACE::Xdr::read <OPENEXR_IMF_INTERNAL_NAMESPACE::StreamIO> (*streamData->is, levelY);
    OPENEXR_IMF_INTERNAL_NAMESPACE::Xdr::read <OPENEXR_IMF_INTERNAL_NAMESPACE::StreamIO> (*streamData->is, dataSize);

    if (tileXCoord != dx)
        throw IEX_NAMESPACE::InputExc ("Unexpected tile x coordinate.");

    if (tileYCoord != dy)
        throw IEX_NAMESPACE::InputExc ("Unexpected tile y coordinate.");

    if (levelX != lx)
        throw IEX_NAMESPACE::InputExc ("Unexpected tile x level number coordinate.");

    if (levelY != ly)
        throw IEX_NAMESPACE::InputExc ("Unexpected tile y level number coordinate.");

    if (dataSize < 0 || dataSize > static_cast<int>(ifd->tileBufferSize) )
        throw IEX_NAMESPACE::InputExc ("Unexpected tile block length.");





    if (streamData->is->isMemoryMapped ())
        buffer = streamData->is->readMemoryMapped (dataSize);
    else
        streamData->is->read (buffer, dataSize);







    streamData->currentPosition = tileOffset + 5 * Xdr::size<int>() + dataSize;
}


void
func_24 (InputStreamMutex *streamData,
                  TiledInputFile::func_14 *ifd,
    int &dx, int &dy,
    int &lx, int &ly,
                  char * & buffer,
    int &dataSize)
{




    if(isMultiPart(ifd->version))
    {
        int part;
        Xdr::read <StreamIO> (*streamData->is, part);
        if(part!=ifd->partNumber)
        {
           throw IEX_NAMESPACE::InputExc("Unexpected part number in readNextTileData");
        }
    }





    Xdr::read <StreamIO> (*streamData->is, dx);
    Xdr::read <StreamIO> (*streamData->is, dy);
    Xdr::read <StreamIO> (*streamData->is, lx);
    Xdr::read <StreamIO> (*streamData->is, ly);
    Xdr::read <StreamIO> (*streamData->is, dataSize);

    if (dataSize > (int) ifd->tileBufferSize)
        throw IEX_NAMESPACE::InputExc ("Unexpected tile block length.");





    streamData->is->read (buffer, dataSize);







    streamData->currentPosition += 5 * Xdr::size<int>() + dataSize;
}







class class_25 : public Task
{
  public:

    func_26 (TaskGroup *group,
                    TiledInputFile::func_14 *ifd,
      func_12 *tileBuffer);

    virtual ~func_26 ();

    virtual void execute ();

  private:

    TiledInputFile::func_14 * _ifd;
    func_12 * _tileBuffer;
};


func_26::func_26
    (TaskGroup *group,
     TiledInputFile::func_14 *ifd,
     func_12 *tileBuffer)
:
    Task (group),
    _ifd (ifd),
    _tileBuffer (tileBuffer)
{

}


func_26::~func_26 ()
{




    _tileBuffer->post ();
}


void
func_26::execute ()
{
    try
    {




        Box2i tileRange = OPENEXR_IMF_INTERNAL_NAMESPACE::dataWindowForTile (
                _ifd->tileDesc,
                _ifd->minX, _ifd->maxX,
                _ifd->minY, _ifd->maxY,
                _tileBuffer->dx,
                _tileBuffer->dy,
                _tileBuffer->lx,
                _tileBuffer->ly);

        int numPixelsPerScanLine = tileRange.max.x - tileRange.min.x + 1;

        int numPixelsInTile = numPixelsPerScanLine *
                            (tileRange.max.y - tileRange.min.y + 1);

        int sizeOfTile = _ifd->bytesPerPixel * numPixelsInTile;






        if (_tileBuffer->compressor && _tileBuffer->dataSize < sizeOfTile)
        {
            _tileBuffer->format = _tileBuffer->compressor->format();

            _tileBuffer->dataSize = _tileBuffer->compressor->uncompressTile
  (_tileBuffer->buffer, _tileBuffer->dataSize,
   tileRange, _tileBuffer->uncompressedData);
        }
        else
        {





            _tileBuffer->format = Compressor::XDR;
            _tileBuffer->uncompressedData = _tileBuffer->buffer;
        }






        const char *readPtr = _tileBuffer->uncompressedData;

        for (int y = tileRange.min.y; y <= tileRange.max.y; ++y)
        {




            for (unsigned int i = 0; i < _ifd->slices.size(); ++i)
            {
                const func_1 &slice = _ifd->slices[i];






                int xOffset = slice.xTileCoords * tileRange.min.x;
                int yOffset = slice.yTileCoords * tileRange.min.y;





                if (slice.skip)
                {





                    skipChannel (readPtr, slice.typeInFile,
                                 numPixelsPerScanLine);
                }
                else
                {




                    char *writePtr = slice.base +
                                     (y - yOffset) * slice.yStride +
                                     (tileRange.min.x - xOffset) *
                                     slice.xStride;

                    char *endPtr = writePtr +
                                   (numPixelsPerScanLine - 1) * slice.xStride;

                    copyIntoFrameBuffer (readPtr, writePtr, endPtr,
                                         slice.xStride,
                                         slice.fill, slice.fillValue,
                                         _tileBuffer->format,
                                         slice.typeInFrameBuffer,
                                         slice.typeInFile);
                }
            }
        }
    }
    catch (std::exception &e)
    {
        if (!_tileBuffer->hasException)
        {
            _tileBuffer->exception = e.what ();
            _tileBuffer->hasException = true;
        }
    }
    catch (...)
    {
        if (!_tileBuffer->hasException)
        {
            _tileBuffer->exception = "unrecognized exception";
            _tileBuffer->hasException = true;
        }
    }
}


func_26 *
func_34
    (TaskGroup *group,
     InputStreamMutex *streamData,
     TiledInputFile::func_14 *ifd,
     int number,
     int dx, int dy,
     int lx, int ly)
{

    func_12 *tileBuffer = ifd->getTileBuffer (number);

    try
    {
 tileBuffer->wait();

 tileBuffer->dx = dx;
 tileBuffer->dy = dy;
 tileBuffer->lx = lx;
 tileBuffer->ly = ly;

 tileBuffer->uncompressedData = 0;

 func_18 (streamData, ifd, dx, dy, lx, ly,
        tileBuffer->buffer,
        tileBuffer->dataSize);
    }
    catch (...)
    {






 tileBuffer->post();
 throw;
    }

    return new func_26 (group, ifd, tileBuffer);
}


}


TiledInputFile::TiledInputFile (const char fileName[], int numThreads):
    _data (new func_14 (numThreads))
{
    _data->_streamData=NULL;
    _data->_deleteStream=true;







    IStream* is = 0;
    try
    {
        is = new StdIFStream (fileName);
 readMagicNumberAndVersionField(*is, _data->version);




 if (isMultiPart(_data->version))
 {
     compatibilityInitialize(*is);
     return;
 }

 _data->_streamData = new InputStreamMutex();
 _data->_streamData->is = is;
 _data->header.readFrom (*_data->_streamData->is, _data->version);
 initialize();

        _data->tileOffsets.readFrom (*(_data->_streamData->is), _data->fileIsComplete,false,false);
 _data->_streamData->currentPosition = _data->_streamData->is->tellg();
    }
    catch (IEX_NAMESPACE::BaseExc &e)
    {
        if (_data->_streamData != 0)
        {
            if (_data->_streamData->is != 0)
            {
                delete _data->_streamData->is;
                _data->_streamData->is = is = 0;
            }

            delete _data->_streamData;
        }

        if (is != 0)
            delete is;

 REPLACE_EXC (e, "Cannot open image file "
                 "\"" << fileName << "\". " << e.what());
 throw;
    }
    catch (...)
    {
        if ( _data->_streamData != 0)
        {
            if ( _data->_streamData->is != 0)
            {
                delete _data->_streamData->is;
                _data->_streamData->is = is = 0;
            }

            delete _data->_streamData;
        }

        if (is != 0)
            delete is;
        throw;
    }
}


TiledInputFile::TiledInputFile (OPENEXR_IMF_INTERNAL_NAMESPACE::IStream &is, int numThreads):
    _data (new func_14 (numThreads))
{
    _data->_deleteStream=false;





    bool streamDataCreated = false;

    try
    {
 readMagicNumberAndVersionField(is, _data->version);




 if (isMultiPart(_data->version))
        {
     compatibilityInitialize(is);
            return;
        }

 streamDataCreated = true;
 _data->_streamData = new InputStreamMutex();
 _data->_streamData->is = &is;
 _data->header.readFrom (*_data->_streamData->is, _data->version);
 initialize();

        _data->tileOffsets.readFrom (*(_data->_streamData->is), _data->fileIsComplete,false,false);
 _data->memoryMapped = _data->_streamData->is->isMemoryMapped();
 _data->_streamData->currentPosition = _data->_streamData->is->tellg();
    }
    catch (IEX_NAMESPACE::BaseExc &e)
    {
        if (streamDataCreated) delete _data->_streamData;
 delete _data;

 REPLACE_EXC (e, "Cannot open image file "
                 "\"" << is.fileName() << "\". " << e.what());
 throw;
    }
    catch (...)
    {
        if (streamDataCreated) delete _data->_streamData;
 delete _data;
        throw;
    }
}


TiledInputFile::TiledInputFile (const Header &header,
                                OPENEXR_IMF_INTERNAL_NAMESPACE::IStream *is,
                                int version,
                                int numThreads) :
    _data (new func_14 (numThreads))
{
    _data->_deleteStream=false;
    _data->_streamData = new InputStreamMutex();

    _data->_streamData->is = is;
    _data->header = header;
    _data->version = version;
    initialize();
    _data->tileOffsets.readFrom (*(_data->_streamData->is),_data->fileIsComplete,false,false);
    _data->memoryMapped = is->isMemoryMapped();
    _data->_streamData->currentPosition = _data->_streamData->is->tellg();
}


TiledInputFile::TiledInputFile (InputPartData* part)
{
    _data = new func_14 (part->numThreads);
    _data->_deleteStream=false;
    multiPartInitialize(part);
}


void
TiledInputFile::compatibilityInitialize(OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is)
{
    is.seekg(0);





    _data->multiPartBackwardSupport = true;
    _data->multiPartFile = new class_13(is, _data->numThreads);
    InputPartData* part = _data->multiPartFile->getPart(0);

    multiPartInitialize(part);
}


void
TiledInputFile::multiPartInitialize(InputPartData* part)
{
    if (part->header.type() != TILEDIMAGE)
        throw IEX_NAMESPACE::ArgExc("Can't build a TiledInputFile from a type-mismatched part.");

    _data->_streamData = part->mutex;
    _data->header = part->header;
    _data->version = part->version;
    _data->partNumber = part->partNumber;
    _data->memoryMapped = _data->_streamData->is->isMemoryMapped();
    initialize();
    _data->tileOffsets.readFrom(part->chunkOffsets,_data->fileIsComplete);
    _data->_streamData->currentPosition = _data->_streamData->is->tellg();
}


void
TiledInputFile::initialize ()
{




    if(!isMultiPart(_data->version) &&
       !isNonImage(_data->version) &&
       isTiled(_data->version) &&
       _data->header.hasType() )
    {
        _data->header.setType(TILEDIMAGE);
    }

    if (_data->partNumber == -1)
    {
        if (!isTiled (_data->version))
            throw IEX_NAMESPACE::ArgExc ("Expected a tiled file but the file is not tiled.");

    }
    else
    {
        if(_data->header.hasType() && _data->header.type()!=TILEDIMAGE)
        {
            throw IEX_NAMESPACE::ArgExc ("TiledInputFile used for non-tiledimage part.");
        }
    }

    _data->header.sanityCheck (true);

    _data->tileDesc = _data->header.tileDescription();
    _data->lineOrder = _data->header.lineOrder();





    const Box2i &dataWindow = _data->header.dataWindow();
    _data->minX = dataWindow.min.x;
    _data->maxX = dataWindow.max.x;
    _data->minY = dataWindow.min.y;
    _data->maxY = dataWindow.max.y;





    precalculateTileInfo (_data->tileDesc,
     _data->minX, _data->maxX,
     _data->minY, _data->maxY,
     _data->numXTiles, _data->numYTiles,
     _data->numXLevels, _data->numYLevels);

    _data->bytesPerPixel = calculateBytesPerPixel (_data->header);

    _data->maxBytesPerTileLine = _data->bytesPerPixel * _data->tileDesc.xSize;

    _data->tileBufferSize = _data->maxBytesPerTileLine * _data->tileDesc.ySize;





    for (size_t i = 0; i < _data->tileBuffers.size(); i++)
    {
        _data->tileBuffers[i] = new func_12 (newTileCompressor
        (_data->header.compression(),
         _data->maxBytesPerTileLine,
         _data->tileDesc.ySize,
         _data->header));

        if (!_data->_streamData->is->isMemoryMapped ())
            _data->tileBuffers[i]->buffer = new char [_data->tileBufferSize];
    }

    _data->tileOffsets = TileOffsets (_data->tileDesc.mode,
          _data->numXLevels,
          _data->numYLevels,
          _data->numXTiles,
          _data->numYTiles);
}


TiledInputFile::~TiledInputFile ()
{
    if (!_data->memoryMapped)
        for (size_t i = 0; i < _data->tileBuffers.size(); i++)
            delete [] _data->tileBuffers[i]->buffer;

    if (_data->_deleteStream)
        delete _data->_streamData->is;

    if (_data->partNumber == -1)
        delete _data->_streamData;

    delete _data;
}


const char *
TiledInputFile::fileName () const
{
    return _data->_streamData->is->fileName();
}


const Header &
TiledInputFile::header () const
{
    return _data->header;
}


int
TiledInputFile::version () const
{
    return _data->version;
}


void
TiledInputFile::setFrameBuffer (const FrameBuffer &frameBuffer)
{
    Lock lock (*_data->_streamData);

    const ChannelList &channels = _data->header.channels();

    for (FrameBuffer::ConstIterator j = frameBuffer.begin();
         j != frameBuffer.end();
         ++j)
    {
        ChannelList::ConstIterator i = channels.find (j.name());

        if (i == channels.end())
            continue;

        if (i.channel().xSampling != j.slice().xSampling ||
            i.channel().ySampling != j.slice().ySampling)
            THROW (IEX_NAMESPACE::ArgExc, "X and/or y subsampling factors "
    "of \"" << i.name() << "\" channel "
    "of input file \"" << fileName() << "\" are "
    "not compatible with the frame buffer's "
    "subsampling factors.");
    }





    vector<func_1> slices;
    ChannelList::ConstIterator i = channels.begin();

    for (FrameBuffer::ConstIterator j = frameBuffer.begin();
         j != frameBuffer.end();
         ++j)
    {
        while (i != channels.end() && strcmp (i.name(), j.name()) < 0)
        {






            slices.push_back (func_1 (i.channel().type,
         i.channel().type,
         0,
         0,
         0,
         false,
         true,
         0.0));
            ++i;
        }

        bool fill = false;

        if (i == channels.end() || strcmp (i.name(), j.name()) > 0)
        {





            fill = true;
        }

        slices.push_back (func_1 (j.slice().type,
                                        fill? j.slice().type: i.channel().type,
                                        j.slice().base,
                                        j.slice().xStride,
                                        j.slice().yStride,
                                        fill,
                                        false,
                                        j.slice().fillValue,
                                        (j.slice().xTileCoords)? 1: 0,
                                        (j.slice().yTileCoords)? 1: 0));

        if (i != channels.end() && !fill)
            ++i;
    }

    while (i != channels.end())
    {






 slices.push_back (func_1 (i.channel().type,
     i.channel().type,
     0,
     0,
     0,
     false,
     true,
     0.0));
 ++i;
    }





    _data->frameBuffer = frameBuffer;
    _data->slices = slices;
}


const FrameBuffer &
TiledInputFile::frameBuffer () const
{
    Lock lock (*_data->_streamData);
    return _data->frameBuffer;
}


bool
TiledInputFile::isComplete () const
{
    return _data->fileIsComplete;
}


void
TiledInputFile::readTiles (int dx1, int dx2, int dy1, int dy2, int lx, int ly)
{




    try
    {
        Lock lock (*_data->_streamData);

        if (_data->slices.size() == 0)
            throw IEX_NAMESPACE::ArgExc ("No frame buffer specified "
          "as pixel data destination.");

        if (!isValidLevel (lx, ly))
            THROW (IEX_NAMESPACE::ArgExc,
                   "Level coordinate "
                   "(" << lx << ", " << ly << ") "
                   "is invalid.");







        if (dx1 > dx2)
            std::swap (dx1, dx2);

        if (dy1 > dy2)
            std::swap (dy1, dy2);

        int dyStart = dy1;
 int dyStop = dy2 + 1;
 int dY = 1;

        if (_data->lineOrder == DECREASING_Y)
        {
            dyStart = dy2;
            dyStop = dy1 - 1;
            dY = -1;
        }







        {
            TaskGroup taskGroup;
            int tileNumber = 0;

            for (int dy = dyStart; dy != dyStop; dy += dY)
            {
                for (int dx = dx1; dx <= dx2; dx++)
                {
                    if (!isValidTile (dx, dy, lx, ly))
                        THROW (IEX_NAMESPACE::ArgExc,
          "Tile (" << dx << ", " << dy << ", " <<
          lx << "," << ly << ") is not a valid tile.");

                    ThreadPool::addGlobalTask (func_34 (&taskGroup,
                                                                  _data->_streamData,
                                                                  _data,
                                                                  tileNumber++,
                                                                  dx, dy,
                                                                  lx, ly));
                }
            }




        }

 const string *exception = 0;

        for (size_t i = 0; i < _data->tileBuffers.size(); ++i)
 {
            func_12 *tileBuffer = _data->tileBuffers[i];

     if (tileBuffer->hasException && !exception)
  exception = &tileBuffer->exception;

     tileBuffer->hasException = false;
 }

 if (exception)
     throw IEX_NAMESPACE::IoExc (*exception);
    }
    catch (IEX_NAMESPACE::BaseExc &e)
    {
        REPLACE_EXC (e, "Error reading pixel data from image "
                     "file \"" << fileName() << "\". " << e.what());
        throw;
    }
}


void
TiledInputFile::readTiles (int dx1, int dx2, int dy1, int dy2, int l)
{
    readTiles (dx1, dx2, dy1, dy2, l, l);
}


void
TiledInputFile::readTile (int dx, int dy, int lx, int ly)
{
    readTiles (dx, dx, dy, dy, lx, ly);
}


void
TiledInputFile::readTile (int dx, int dy, int l)
{
    readTile (dx, dy, l, l);
}


void
TiledInputFile::rawTileData (int &dx, int &dy,
        int &lx, int &ly,
                             const char *&pixelData,
        int &pixelDataSize)
{
    try
    {
        Lock lock (*_data->_streamData);

        if (!isValidTile (dx, dy, lx, ly))
            throw IEX_NAMESPACE::ArgExc ("Tried to read a tile outside "
          "the image file's data window.");

        func_12 *tileBuffer = _data->getTileBuffer (0);





        int old_dx=dx;
        int old_dy=dy;
        int old_lx=lx;
        int old_ly=ly;
        if(isMultiPart(version()))
        {
            _data->_streamData->is->seekg(_data->tileOffsets(dx,dy,lx,ly));
        }
        func_24 (_data->_streamData, _data, dx, dy, lx, ly,
     tileBuffer->buffer,
                          pixelDataSize);
        if(isMultiPart(version()))
        {
            if (old_dx!=dx || old_dy !=dy || old_lx!=lx || old_ly!=ly)
            {
                throw IEX_NAMESPACE::ArgExc ("rawTileData read the wrong tile");
            }
        }
        pixelData = tileBuffer->buffer;
    }
    catch (IEX_NAMESPACE::BaseExc &e)
    {
        REPLACE_EXC (e, "Error reading pixel data from image "
                     "file \"" << fileName() << "\". " << e.what());
        throw;
    }
}


unsigned int
TiledInputFile::tileXSize () const
{
    return _data->tileDesc.xSize;
}


unsigned int
TiledInputFile::tileYSize () const
{
    return _data->tileDesc.ySize;
}


LevelMode
TiledInputFile::levelMode () const
{
    return _data->tileDesc.mode;
}


LevelRoundingMode
TiledInputFile::levelRoundingMode () const
{
    return _data->tileDesc.roundingMode;
}


int
TiledInputFile::numLevels () const
{
    if (levelMode() == RIPMAP_LEVELS)
 THROW (IEX_NAMESPACE::LogicExc, "Error calling numLevels() on image "
         "file \"" << fileName() << "\" "
         "(numLevels() is not defined for files "
         "with RIPMAP level mode).");

    return _data->numXLevels;
}


int
TiledInputFile::numXLevels () const
{
    return _data->numXLevels;
}


int
TiledInputFile::numYLevels () const
{
    return _data->numYLevels;
}


bool
TiledInputFile::isValidLevel (int lx, int ly) const
{
    if (lx < 0 || ly < 0)
 return false;

    if (levelMode() == MIPMAP_LEVELS && lx != ly)
 return false;

    if (lx >= numXLevels() || ly >= numYLevels())
 return false;

    return true;
}


int
TiledInputFile::levelWidth (int lx) const
{
    try
    {
        return levelSize (_data->minX, _data->maxX, lx,
     _data->tileDesc.roundingMode);
    }
    catch (IEX_NAMESPACE::BaseExc &e)
    {
 REPLACE_EXC (e, "Error calling levelWidth() on image "
                 "file \"" << fileName() << "\". " << e.what());
 throw;
    }
}


int
TiledInputFile::levelHeight (int ly) const
{
    try
    {
        return levelSize (_data->minY, _data->maxY, ly,
                          _data->tileDesc.roundingMode);
    }
    catch (IEX_NAMESPACE::BaseExc &e)
    {
 REPLACE_EXC (e, "Error calling levelHeight() on image "
                 "file \"" << fileName() << "\". " << e.what());
 throw;
    }
}


int
TiledInputFile::numXTiles (int lx) const
{
    if (lx < 0 || lx >= _data->numXLevels)
    {
        THROW (IEX_NAMESPACE::ArgExc, "Error calling numXTiles() on image "
       "file \"" << _data->_streamData->is->fileName() << "\" "
       "(Argument is not in valid range).");

    }

    return _data->numXTiles[lx];
}


int
TiledInputFile::numYTiles (int ly) const
{
    if (ly < 0 || ly >= _data->numYLevels)
    {
        THROW (IEX_NAMESPACE::ArgExc, "Error calling numYTiles() on image "
       "file \"" << _data->_streamData->is->fileName() << "\" "
       "(Argument is not in valid range).");
    }

    return _data->numYTiles[ly];
}


Box2i
TiledInputFile::dataWindowForLevel (int l) const
{
    return dataWindowForLevel (l, l);
}


Box2i
TiledInputFile::dataWindowForLevel (int lx, int ly) const
{
    try
    {
 return OPENEXR_IMF_INTERNAL_NAMESPACE::dataWindowForLevel (
         _data->tileDesc,
         _data->minX, _data->maxX,
         _data->minY, _data->maxY,
         lx, ly);
    }
    catch (IEX_NAMESPACE::BaseExc &e)
    {
 REPLACE_EXC (e, "Error calling dataWindowForLevel() on image "
                 "file \"" << fileName() << "\". " << e.what());
 throw;
    }
}


Box2i
TiledInputFile::dataWindowForTile (int dx, int dy, int l) const
{
    return dataWindowForTile (dx, dy, l, l);
}


Box2i
TiledInputFile::dataWindowForTile (int dx, int dy, int lx, int ly) const
{
    try
    {
 if (!isValidTile (dx, dy, lx, ly))
     throw IEX_NAMESPACE::ArgExc ("Arguments not in valid range.");

        return OPENEXR_IMF_INTERNAL_NAMESPACE::dataWindowForTile (
                _data->tileDesc,
                _data->minX, _data->maxX,
                _data->minY, _data->maxY,
                dx, dy, lx, ly);
    }
    catch (IEX_NAMESPACE::BaseExc &e)
    {
 REPLACE_EXC (e, "Error calling dataWindowForTile() on image "
                 "file \"" << fileName() << "\". " << e.what());
 throw;
    }
}


bool
TiledInputFile::isValidTile (int dx, int dy, int lx, int ly) const
{
    return ((lx < _data->numXLevels && lx >= 0) &&
            (ly < _data->numYLevels && ly >= 0) &&
            (dx < _data->numXTiles[lx] && dx >= 0) &&
            (dy < _data->numYTiles[ly] && dy >= 0));
}

void TiledInputFile::tileOrder(int dx[], int dy[], int lx[], int ly[]) const
{
   return _data->tileOffsets.getTileOrder(dx,dy,lx,ly);
}


OPENEXR_IMF_INTERNAL_NAMESPACE_SOURCE_EXIT
