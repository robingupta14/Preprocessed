







namespace io = boost::iostreams;

using namespace cb;
using namespace std;


struct TarFileReader::private_t {
  io::filtering_istream filter;
};


TarFileReader::TarFileReader(const string &path, compression_t compression) :
  pri(new private_t), stream(SystemUtilities::iopen(path)),
  didReadHeader(false) {

  addCompression(compression == TARFILE_AUTO ? infer(path) : compression);
  pri->filter.push(*this->stream);
}


TarFileReader::TarFileReader(istream &stream, compression_t compression) :
  pri(new private_t), stream(SmartPointer<istream>::Phony(&stream)),
  didReadHeader(false) {

  addCompression(compression);
  pri->filter.push(*this->stream);
}


TarFileReader::~TarFileReader() {
  delete pri;
}


bool TarFileReader::hasMore() {
  if (!didReadHeader) {
    SysError::clear();
    if (!readHeader(pri->filter))
      THROW("Tar file read failed: " << SysError());
    didReadHeader = true;
  }

  return !isEOF();
}


bool TarFileReader::next() {
  if (didReadHeader) {
    skipFile(pri->filter);
    didReadHeader = false;
  }

  return hasMore();
}


std::string TarFileReader::extract(const string &_path) {
  if (_path.empty()) THROW("path cannot be empty");
  if (!hasMore()) THROW("No more tar files");

  string path = _path;
  if (SystemUtilities::isDirectory(path)) {
    path += "/" + getFilename();


    string a = SystemUtilities::getCanonicalPath(_path);
    string b = SystemUtilities::getCanonicalPath(path);
    if (!String::startsWith(b, a))
      THROW("Tar path points outside of the extraction directory: " << path);
  }

  LOG_DEBUG(5, "Extracting: " << path);

  switch (getType()) {
  case NORMAL_FILE: case CONTIGUOUS_FILE:
    return extract(*SystemUtilities::oopen(path));
  case DIRECTORY: SystemUtilities::ensureDirectory(path); break;
  default: THROW("Unsupported tar file type " << getType());
  }

  return getFilename();
}


string TarFileReader::extract(ostream &out) {
  if (!hasMore()) THROW("No more tar files");

  readFile(out, pri->filter);
  didReadHeader = false;

  return getFilename();
}


void TarFileReader::addCompression(compression_t compression) {
  switch (compression) {
  case TARFILE_NONE: break;
  case TARFILE_BZIP2: pri->filter.push(BZip2Decompressor()); break;
  case TARFILE_GZIP: pri->filter.push(io::zlib_decompressor()); break;
  default: THROW("Invalid compression type " << compression);
  }
}
