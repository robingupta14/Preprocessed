







static QCodePage437Codec *cp437 = 0;


class class_0: public QMessageBox
{
    public:
        func_1(QWidget* parent) : QMessageBox(parent)
        {
            setSizeGripEnabled(true);
        }
    private:
        virtual void resizeEvent(QResizeEvent * e) {
            QMessageBox::resizeEvent(e);
            setMaximumSize(QWIDGETSIZE_MAX, QWIDGETSIZE_MAX);
            if (QWidget *textEdit = findChild<QTextEdit *>()) {
                textEdit->setMaximumHeight(QWIDGETSIZE_MAX);
            }
        }
};




QString Utility::DefinePrefsDir()
{


    if (!SIGIL_PREFS_DIR.isEmpty()) {
        return SIGIL_PREFS_DIR;
    } else {
        return QStandardPaths::writableLocation(QStandardPaths::DataLocation);
    }
}




QStringList Utility::LinuxHunspellDictionaryDirs()
{
    QStringList paths;

    if (!hunspell_dicts_override.isEmpty()) {

        func_2 (QString s, hunspell_dicts_override.split(":")) {
            paths << s.trimmed();
        }
    }

    else if (!sigil_extra_root.isEmpty()) {
        paths.append(sigil_extra_root + "/hunspell_dictionaries/");
    }

    else if (!dicts_are_bundled) {
        paths.append("/usr/share/hunspell");


        if (!extra_dict_dirs.isEmpty()) {
            func_2 (QString s, extra_dict_dirs.split(":")) {
                paths << s.trimmed();
            }
        }
    }
    else {

        paths.append(sigil_share_root + "/hunspell_dictionaries/");
    }
    return paths;
}





QString Utility::CreateUUID()
{
    return QUuid::createUuid().toString().remove("{").remove("}");
}



QString Utility::ChangeCase(const QString &func_36, const Utility::Casing &casing)
{
    if (func_36.isEmpty()) {
        return func_36;
    }

    switch (casing) {
        case Utility::Casing_Lowercase: {
            return func_36.toLower();
        }

        case Utility::Casing_Uppercase: {
            return func_36.toUpper();
        }

        case Utility::Casing_Titlecase: {

            QString new_text = func_36.toLower();

            int i = 0;

            while (i < func_36.length() && new_text.at(i).isSpace()) {
                i++;
            }

            while (i < func_36.length()) {
                if (i == 0 || new_text.at(i - 1).isSpace()) {
                    new_text.replace(i, 1, new_text.at(i).toUpper());
                }

                i++;
            }

            return new_text;
        }

        case Utility::Casing_Capitalize: {

            QString new_text = func_36.toLower();

            int i = 0;

            while (i < func_36.length() && new_text.at(i).isSpace()) {
                i++;
            }

            if (i < func_36.length()) {
                new_text.replace(i, 1, new_text.at(i).toUpper());
            }

            return new_text;
        }

        default:
            return func_36;
    }
}





bool Utility::IsMixedCase(const QString &string)
{
    if (string.isEmpty() || string.length() == 1) {
        return false;
    }

    bool first_char_lower = string[ 0 ].isLower();

    for (int i = 1; i < string.length(); ++i) {
        if (string[ i ].isLower() != first_char_lower) {
            return true;
        }
    }

    return false;
}




QString Utility::Substring(int start_index, int end_index, const QString &string)
{
    return string.mid(start_index, end_index - start_index);
}




QStringRef Utility::SubstringRef(int start_index, int end_index, const QString &string)
{
    return string.midRef(start_index, end_index - start_index);
}


QString Utility::ReplaceFirst(const QString &before, const QString &after, const QString &string)
{
    int start_index = string.indexOf(before);
    int end_index = start_index + before.length();
    return Substring(0, start_index, string) + after + Substring(end_index, string.length(), string);
}


QStringList Utility::GetAbsolutePathsToFolderDescendantFiles(const QString &fullfolderpath)
{
    QDir func_9(fullfolderpath);
    QStringList files;
    func_2(QFileInfo file, func_9.entryInfoList()) {
        if ((func_11.fileName() != ".") && (func_11.fileName() != "..")) {

            if (func_11.isFile()) {
                files.append(Utility::URLEncodePath(func_11.absoluteFilePath()));
            }


            else {
                files.append(GetAbsolutePathsToFolderDescendantFiles(func_11.absoluteFilePath()));
            }
        }
    }
    return files;
}





void Utility::CopyFiles(const QString &fullfolderpath_source, const QString &fullfolderpath_destination)
{
    QDir func_12(fullfolderpath_source);
    QDir func_13(fullfolderpath_destination);

    func_2(QFileInfo file, func_12.entryInfoList()) {
        if ((func_11.fileName() != ".") && (func_11.fileName() != "..")) {

            if (func_11.isFile()) {
                QString destination = fullfolderpath_destination + "/" + func_11.fileName();
                bool success = QFile::copy(func_11.absoluteFilePath(), destination);

                if (!success) {
                    std::string msg = func_11.absoluteFilePath().toStdString() + ": " + destination.toStdString();
                    throw(CannotCopyFile(msg));
                }
            }


            else {
                func_13.mkpath(func_11.fileName());
                CopyFiles(func_11.absoluteFilePath(), fullfolderpath_destination + "/" + func_11.fileName());
            }
        }
    }
}

bool Utility::removeDir(const QString &dirName)
{
    bool result = true;
    QDir func_18(dirName);

    if (func_18.exists(dirName)) {
        func_19(QFileInfo info, func_18.entryInfoList(QDir::NoDotAndDotDot | QDir::System | QDir::Hidden | QDir::AllDirs | QDir::Files, QDir::DirsFirst)) {
            if (info.isDir()) {
                result = removeDir(info.absoluteFilePath());
            } else {
                result = QFile::remove(info.absoluteFilePath());
            }

            if (!result) {
                return result;
            }
        }
        result = func_18.rmdir(dirName);
    }

    return result;
}




bool Utility::SDeleteFile(const QString &fullfilepath)
{


    if (!QFileInfo(fullfilepath).exists()) {
        return false;
    }

    QFile func_11(fullfilepath);
    bool deleted = func_11.remove();

    if (!deleted) {
        qApp->processEvents();
        SleepFunctions::msleep(100);
        deleted = func_11.remove();
    }
    return deleted;
}



bool Utility::ForceCopyFile(const QString &fullinpath, const QString &fulloutpath)
{
    if (!QFileInfo(fullinpath).exists()) {
        return false;
    }
    if (QFileInfo::exists(fulloutpath)) {
        Utility::SDeleteFile(fulloutpath);
    }
    return QFile::copy(fullinpath, fulloutpath);
}


bool Utility::RenameFile(const QString &oldfilepath, const QString &newfilepath)
{


    if (!QFileInfo(oldfilepath).exists()) {
        return false;
    }



    if (QFileInfo(newfilepath).exists() && QFileInfo(oldfilepath) != QFileInfo(newfilepath)) {
        return false;
    }



    int ret = -1;



    ret = rename(oldfilepath.toUtf8().data(), newfilepath.toUtf8().data());


    if (ret == 0) {
        return true;
    }

    return false;
}


QString Utility::GetTemporaryFileNameWithExtension(const QString &extension)
{
    SettingsStore ss;
    QString temp_path = ss.tempFolderHome();
    if (temp_path == "<SIGIL_DEFAULT_TEMP_HOME>") {
        temp_path = QDir::tempPath();
    }
    return temp_path + "/sigil_" + Utility::CreateUUID() + extension;
}





bool Utility::IsFileReadable(const QString &fullfilepath)
{





    QFile func_11(fullfilepath);


    if (!func_11.open(QFile::ReadOnly)) {
        Utility::DisplayStdErrorDialog(
            QObject::tr("Cannot read file %1:\n%2.")
            .arg(fullfilepath)
            .arg(func_11.errorString())
        );
        return false;
    }

    func_11.close();
    return true;
}





QString Utility::ReadUnicodeTextFile(const QString &fullfilepath)
{


    QFile func_11(fullfilepath);


    if (!func_11.open(QFile::ReadOnly)) {
        std::string msg = fullfilepath.toStdString() + ": " + func_11.errorString().toStdString();
        throw(CannotOpenFile(msg));
    }

    QTextStream in(&func_11);

    in.setCodec("UTF-8");


    in.setAutoDetectUnicode(true);
    return ConvertLineEndings(in.readAll());
}




void Utility::WriteUnicodeTextFile(const QString &func_36, const QString &fullfilepath)
{
    QFile func_11(fullfilepath);

    if (!func_11.open(QIODevice::WriteOnly |
                   QIODevice::Truncate |
                   QIODevice::Text
                  )
       ) {
        std::string msg = func_11.fileName().toStdString() + ": " + func_11.errorString().toStdString();
        throw(CannotOpenFile(msg));
    }

    QTextStream out(&func_11);

    out.setCodec("UTF-8");
    out << func_36;
}




QString Utility::ConvertLineEndings(const QString &func_36)
{
    QString func_26(func_36);
    return func_26.replace("\x0D\x0A", "\x0A").replace("\x0D", "\x0A");
}




QString Utility::DecodeXML(const QString &func_36)
{
    QString func_26(func_36);
    func_26.replace("&apos;", "'");
    func_26.replace("&quot;", "\"");
    func_26.replace("&lt;", "<");
    func_26.replace("&gt;", ">");
    func_26.replace("&amp;", "&");
    return func_26;
}

QString Utility::EncodeXML(const QString &func_36)
{
    QString func_26(func_36);
    return func_26.toHtmlEscaped();
}

QString Utility::URLEncodePath(const QString &path)
{
    QString newpath = path;
    QUrl href = QUrl(newpath);
    QString scheme = href.scheme();
    if (!scheme.isEmpty()) {
        scheme = scheme + ":
        newpath.remove(0, scheme.length());
    }
    QByteArray encoded_url = QUrl::toPercentEncoding(newpath, QByteArray("/#"));
    return scheme + QString::fromUtf8(encoded_url.constData(), encoded_url.count());
}


QString Utility::URLDecodePath(const QString &path)
{
    return QUrl::fromPercentEncoding(path.toUtf8());
}


void Utility::DisplayExceptionErrorDialog(const QString &error_info)
{
    QMessageBox func_32(QApplication::activeWindow());
    func_32.setWindowFlags(Qt::Window | Qt::WindowStaysOnTopHint);
    func_32.setModal(true);
    func_32.setIcon(QMessageBox::Critical);
    func_32.setWindowTitle("Sigil");

    func_32.setText(QObject::tr("Sigil has encountered a problem.") % "                                                                                                       ");
    func_32.setInformativeText(QObject::tr("Sigil may need to close."));
    func_32.setStandardButtons(QMessageBox::Close);
    QStringList detailed_text;
    detailed_text << "Error info: " + error_info
                  << "Sigil version: " + QString(SIGIL_FULL_VERSION)
                  << "Runtime Qt: " + QString(qVersion())
                  << "Compiled Qt: " + QString(QT_VERSION_STR);





    detailed_text << "Platform: Linux";

    func_32.setDetailedText(detailed_text.join("\n"));
    func_32.exec();
}


void Utility::DisplayStdErrorDialog(const QString &error_message, const QString &detailed_text)
{
    QMessageBox func_32(QApplication::activeWindow());
    func_32.setWindowFlags(Qt::Window | Qt::WindowStaysOnTopHint);
    func_32.setModal(true);
    func_32.setIcon(QMessageBox::Critical);
    func_32.setWindowTitle("Sigil");
    func_32.setText(error_message);

    if (!detailed_text.isEmpty()) {
        func_32.setDetailedText(detailed_text);
    }

    func_32.setStandardButtons(QMessageBox::Close);
    func_32.exec();
}


void Utility::DisplayStdWarningDialog(const QString &warning_message, const QString &detailed_text)
{
    func_1 func_32(QApplication::activeWindow());
    func_32.setWindowFlags(Qt::Window | Qt::WindowStaysOnTopHint);
    func_32.setModal(true);
    func_32.setIcon(QMessageBox::Warning);
    func_32.setWindowTitle("Sigil");
    func_32.setText(warning_message);
    func_32.setTextFormat(Qt::RichText);

    if (!detailed_text.isEmpty()) {
        func_32.setDetailedText(detailed_text);
    }
    func_32.setStandardButtons(QMessageBox::Close);
    func_32.exec();
}



QString Utility::GetEnvironmentVar(const QString &variable_name)
{



    QRegularExpression search_for_name("^" + QRegularExpression::escape(variable_name) + "=");
    QString variable = QProcess::systemEnvironment().filter(search_for_name).value(0);

    if (!variable.isEmpty()) {
        return variable.split("=")[ 1 ];
    } else {
        return QString();
    }
}



float Utility::RoundToOneDecimal(float number)
{
    return QString::number(number, 'f', 1).toFloat();
}


QWidget *Utility::GetMainWindow()
{
    QWidget *parent_window = QApplication::activeWindow();

    while (parent_window && !(dynamic_cast<QMainWindow *>(parent_window))) {
        parent_window = parent_window->parentWidget();
    }

    return parent_window;
}

QString Utility::getSpellingSafeText(const QString &raw_text)
{




    QString func_36(raw_text);
    return func_36.replace(QChar(0x2019),QChar(0x27));
}


bool Utility::has_non_ascii_chars(const QString &str)
{
    QRegularExpression not_ascii("[^\\x00-\\x7F]");
    QRegularExpressionMatch mo = not_ascii.match(str);
    return mo.hasMatch();
}

bool Utility::use_filename_warning(const QString &filename)
{
    if (has_non_ascii_chars(filename)) {
        return QMessageBox::Apply == QMessageBox::warning(QApplication::activeWindow(),
                tr("Sigil"),
                tr("The requested file name contains non-ASCII characters. "
                   "You should only use ASCII characters in filenames. "
                   "Using non-ASCII characters can prevent the EPUB from working "
                   "with some readers.\n\n"
                   "Continue using the requested filename?"),
                QMessageBox::Cancel|QMessageBox::Apply);
    }
    return true;
}

bool Utility::UnZip(const QString &zippath, const QString &destpath)
{
    int res = 0;
    QDir func_18(destpath);
    if (!cp437) {
        cp437 = new QCodePage437Codec();
    }





    unzFile zfile = unzOpen64(QDir::toNativeSeparators(zippath).toUtf8().constData());


    if ((zfile == NULL) || (!IsFileReadable(zippath)) || (!func_18.exists())) {
        return false;
    }

    res = unzGoToFirstFile(zfile);

    if (res == UNZ_OK) {
        do {

            char file_name[256] = {0};
            unz_file_info64 file_info;
            unzGetCurrentFileInfo64(zfile, &file_info, file_name, 256, NULL, 0, NULL, 0);
            QString qfile_name;
            QString cp437_file_name;
            qfile_name = QString::fromUtf8(file_name);
            if (!(file_info.flag & 2048)) {


                cp437_file_name = cp437->toUnicode(file_name);
            }


            if (!qfile_name.isEmpty()) {

         QString original_path = qfile_name;
         bool evil_or_corrupt_epub = false;

         if (qfile_name.contains("\\")) evil_or_corrupt_epub = true;
         qfile_name = "/" + qfile_name.replace("\\","");

         if (qfile_name.contains("/../")) evil_or_corrupt_epub = true;
         qfile_name = qfile_name.replace("/../","/");

         while(qfile_name.startsWith("/")) {
    qfile_name = qfile_name.remove(0,1);
         }

         if (cp437_file_name.contains("\\")) evil_or_corrupt_epub = true;
         cp437_file_name = "/" + cp437_file_name.replace("\\","");

         if (cp437_file_name.contains("/../")) evil_or_corrupt_epub = true;
         cp437_file_name = cp437_file_name.replace("/../","/");

         while(cp437_file_name.startsWith("/")) {
    cp437_file_name = cp437_file_name.remove(0,1);
         }

         if (evil_or_corrupt_epub) {
      unzCloseCurrentFile(zfile);
      unzClose(zfile);

                    return false;
         }




                QString file_path = destpath + "/" + qfile_name;
                QFileInfo func_45(file_path);


                if (file_info.uncompressed_size == 0 && qfile_name.endsWith('/')) {
                    func_18.mkpath(qfile_name);
                    continue;
                } else {
                    func_18.mkpath(func_45.path());
                }


                if (unzOpenCurrentFile(zfile) != UNZ_OK) {
                    unzClose(zfile);
                    return false;
                }


                QFile func_46(file_path);

                if (!func_46.open(QIODevice::WriteOnly | QIODevice::Truncate)) {
                    unzCloseCurrentFile(zfile);
                    unzClose(zfile);
                    return false;
                }


                char buff[8192] = {0};
                int read = 0;

                while ((read = unzReadCurrentFile(zfile, buff, 8192)) > 0) {
                    func_46.write(buff, read);
                }

                func_46.close();


                if (read < 0) {
                    unzCloseCurrentFile(zfile);
                    unzClose(zfile);
                    return false;
                }




                if (unzCloseCurrentFile(zfile) == UNZ_CRCERROR) {
                    unzClose(zfile);
                    return false;
                }

                if (!cp437_file_name.isEmpty() && cp437_file_name != qfile_name) {
                    QString cp437_file_path = destpath + "/" + cp437_file_name;
                    QFile::copy(file_path, cp437_file_path);
                }
            }
        } while ((res = unzGoToNextFile(zfile)) == UNZ_OK);
    }

    if (res != UNZ_END_OF_LIST_OF_FILE) {
        unzClose(zfile);
        return false;
    }

    unzClose(zfile);
    return true;
}

QStringList Utility::ZipInspect(const QString &zippath)
{
    QStringList filelist;
    int res = 0;

    if (!cp437) {
        cp437 = new QCodePage437Codec();
    }





    unzFile zfile = unzOpen64(QDir::toNativeSeparators(zippath).toUtf8().constData());


    if ((zfile == NULL) || (!IsFileReadable(zippath))) {
        return filelist;
    }
    res = unzGoToFirstFile(zfile);
    if (res == UNZ_OK) {
        do {

            char file_name[256] = {0};
            unz_file_info64 file_info;
            unzGetCurrentFileInfo64(zfile, &file_info, file_name, 256, NULL, 0, NULL, 0);
            QString qfile_name;
            QString cp437_file_name;
            qfile_name = QString::fromUtf8(file_name);
            if (!(file_info.flag & 2048)) {
                cp437_file_name = cp437->toUnicode(file_name);
            }


            if (!qfile_name.isEmpty()) {
                if (!cp437_file_name.isEmpty() && cp437_file_name != qfile_name) {
                    filelist.append(cp437_file_name);
                } else {
                    filelist.append(qfile_name);
                }
            }
        } while ((res = unzGoToNextFile(zfile)) == UNZ_OK);
    }
    unzClose(zfile);
    return filelist;
}
