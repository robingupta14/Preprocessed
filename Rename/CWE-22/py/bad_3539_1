



















from xml.etree import ElementTree


from nova import crypto
from nova import exception
from nova import flags
from nova import var_13
from nova import log as logging
from nova import utils
from nova.api.ec2 import ec2utils


var_0 = nova.log.getLoggernova.nova.var_13.s3
var_1 = nova.flags.var_1
nova.flags.DEFINE_string('image_decryption_dir', '/tmp', 'parent dir for tempdir used for image decryption')
nova.flags.DEFINE_string('s3_access_key', 'notchecked', 'access key to use for s3 server for images')
nova.flags.DEFINE_string('s3_secret_key', 'notchecked', 'secret key to use for s3 server for images')


class class_0(object):
    

    def function_0(var_3, service=None, *args, **kwargs):
        var_3.service = service or nova.var_13.get_default_image_service()
        var_3.service.__init__(*args, **kwargs)

    def function_1(var_3, var_9, var_10):
        return nova.db.api.s3_image_get(var_9, var_10)[uuid]

    def function_2(var_3, var_9, var_11):
        return nova.db.api.s3_image_get_by_uuid(var_9, var_11)[id]

    def function_3(var_3, var_9, var_11):
        return nova.db.api.s3_image_create(var_9, var_11)[id]

    def function_4(var_3, var_9, var_12):
        return [var_3._translate_uuid_to_id(var_9, img) for img in var_12]

    def function_5(var_3, var_9, var_13):
        def function_6(var_11):
            if var_11 is None:
                return
            try:
                return var_3.get_image_id(var_9, var_11)
            except nova.exception.NotFound:
                return var_3._create_image_id(var_9, var_11)

        var_14 = nova.var_13.copy()

        try:
            var_10 = var_14[id]
        except KeyError:
            pass
        else:
            var_14[id] = _find_or_create(var_10)

        for prop in ['kernel_id', 'ramdisk_id']:
            try:
                var_11 = var_14[var_41][prop]
            except (KeyError, ValueError):
                pass
            else:
                var_14[var_41][prop] = _find_or_create(var_11)

        return var_14

    def function_7(var_3, var_9, var_15, data=None):
        
        var_13 = var_3._s3_create(var_9, var_15)
        return var_13

    def function_8(var_3, var_9, var_10):
        var_11 = var_3.get_image_uuid(var_9, var_10)
        var_3.service.delete(var_9, var_11)

    def function_9(var_3, var_9, var_10, var_15, data=None):
        var_11 = var_3.get_image_uuid(var_9, var_10)
        var_13 = var_3.service.update(var_9, var_11, var_15, data)
        return var_3._translate_uuid_to_id(var_9, var_13)

    def function_10(var_3, var_9):
        
        
        var_12 = var_3.service.index(var_9, sort_dir=asc)
        return var_3._translate_uuids_to_ids(var_9, var_12)

    def function_11(var_3, var_9):
        
        
        var_12 = var_3.service.detail(var_9, sort_dir=asc)
        return var_3._translate_uuids_to_ids(var_9, var_12)

    def function_12(var_3, var_9, var_10):
        var_11 = var_3.get_image_uuid(var_9, var_10)
        var_13 = var_3.service.show(var_9, var_11)
        return var_3._translate_uuid_to_id(var_9, var_13)

    def function_13(var_3, var_9, var_17):
        var_13 = var_3.service.show_by_name(var_9, var_17)
        return var_3._translate_uuid_to_id(var_9, var_13)

    def function_14(var_3, var_9, var_10):
        var_11 = var_3.get_image_uuid(var_9, var_10)
        return var_3.get(var_3, var_9, var_11)

    @staticmethod
    def function_15(var_9):
        
        
        var_18 = var_1.s3_access_key
        var_19 = var_1.s3_secret_key
        var_20 = boto.s3.connection.OrdinaryCallingFormat()
        return boto.s3.connection.S3Connection(aws_access_key_id=var_18,
                                               aws_secret_access_key=var_19,
                                               is_secure=False,
                                               calling_format=var_20,
                                               port=var_1.s3_port,
                                               host=var_1.s3_host)

    @staticmethod
    def function_16(var_21, var_22, var_23):
        var_24 = var_21.get_key(var_22)
        var_25 = os.var_76.join(var_23, var_22)
        var_24.get_contents_to_filename(var_25)
        return var_25

    def function_17(var_3, var_9, var_15, var_26):
        var_26 = xml.etree.ElementTree.fromstring(var_26)
        var_27 = var_28
        var_29 = var_30

        try:
            var_31 = var_26.findmachine_configuration/var_31.text
            if var_31 == true:
                var_27 = var_32
                var_29 = var_33
                var_31 = None
        except Exception:
            var_31 = None

        try:
            var_34 = var_26.findmachine_configuration/var_34.text
            if var_34 == true:
                var_27 = var_35
                var_29 = var_36
                var_34 = None
        except Exception:
            var_34 = None

        try:
            var_37 = var_26.findmachine_configuration/architecture.text
        except Exception:
            var_37 = var_38

        
        
        
        
        
        
        
        
        
        
        
        var_39 = []
        try:
            var_40 = var_26.findallmachine_configuration/var_40/mapping
            for bdm in var_40:
                var_39.append({virtual: bdm.findvirtual.text,
                                 device: bdm.finddevice.text})
        except Exception:
            var_39 = []

        var_41 = var_15[var_41]
        var_41[project_id] = var_9.project_id
        var_41[architecture] = var_37

        def function_18(var_42, var_10):
            var_10 = ec2nova.utils.ec2_id_to_id(var_10)
            var_11 = var_3.get_image_uuid(var_9, var_10)
            var_41[var_10] = var_11

        if var_31:
            _translate_dependent_image_id(var_31, var_31)

        if var_34:
            _translate_dependent_image_id(var_34, var_34)

        if var_39:
            var_41[var_39] = var_39

        var_15.update({disk_format: var_27,
                         container_format: var_27,
                         status: queued,
                         is_public: False,
                         var_41: var_41})
        var_15[var_41][image_state] = var_43

        
        
        var_10 = var_15.pop('id', None)

        var_13 = var_3.service.create(var_9, var_15)

        
        var_11 = var_13[id]
        var_13[id] = var_3._create_image_id(var_9, var_11)

        
        return var_26, var_13, var_11

    def function_19(var_3, var_9, var_15):
        

        var_44 = tempfile.mkdtemp(dir=var_1.image_decryption_dir)

        var_45 = var_15[var_41][var_45]
        var_46 = var_45.split/[0]
        var_47 = var_45[len(var_46) + 1:]
        var_21 = var_3._conn(var_9).get_bucket(var_46)
        var_24 = var_21.get_key(var_47)
        var_26 = var_24.get_contents_as_string()

        var_26, var_13, var_11 = var_3._s3_parse_manifest(var_9,
                                                              var_15,
                                                              var_26)

        def function_20():
            
            var_48 = {var_45: var_45,
                        var_44: var_44}
            var_15[var_41][image_state] = var_49
            var_3.service.update(var_9, var_11, var_15)

            try:
                var_50 = []
                var_51 = var_26.findimage.getiteratorfilename
                for fn_element in var_51:
                    var_52 = var_3._download_file(var_21,
                                               fn_element.text,
                                               var_44)
                    var_50.append(var_52)

                
                var_53 = os.var_76.join(var_44, nova.var_13.encrypted)
                with open(var_53, w) as combined:
                    for var_22 in var_50:
                        with open(var_22) as var_52:
                            shutil.copyfileobj(var_52, combined)

            except Exception:
                var_0.exception(_Failed to download %(var_45)s to %(var_44)s, var_48)
                var_15[var_41][image_state] = var_54
                var_3.service.update(var_9, var_11, var_15)
                return

            var_15[var_41][image_state] = var_55
            var_3.service.update(var_9, var_11, var_15)

            try:
                var_56 = var_26.findimage/ec2_encrypted_key.text
                var_57 = binascii.a2b_hex(var_56)
                var_58 = var_26.findimage/ec2_encrypted_iv.text
                var_59 = binascii.a2b_hex(var_58)

                
                
                var_60 = nova.crypto.key_path(var_9.project_id)

                var_61 = os.var_76.join(var_44, nova.var_13.tar.gz)
                var_3._decrypt_image(var_53, var_57,
                                    var_59, var_60,
                                    var_61)
            except Exception:
                var_0.exception(_Failed to decrypt %(var_45)s to %(var_44)s, var_48)
                var_15[var_41][image_state] = var_62
                var_3.service.update(var_9, var_11, var_15)
                return

            var_15[var_41][image_state] = var_63
            var_3.service.update(var_9, var_11, var_15)

            try:
                var_64 = var_3._untarzip_image(var_44, var_61)
            except Exception:
                var_0.exception(_Failed to untar %(var_45)s to %(var_44)s, var_48)
                var_15[var_41][image_state] = var_65
                var_3.service.update(var_9, var_11, var_15)
                return

            var_15[var_41][image_state] = var_66
            var_3.service.update(var_9, var_11, var_15)
            try:
                with open(var_64) as var_78:
                    var_3.service.update(var_9, var_11,
                                        var_15, var_78)
            except Exception:
                var_0.exception(_Failed to upload %(var_45)s to %(var_44)s, var_48)
                var_15[var_41][image_state] = var_67
                var_3.service.update(var_9, var_11, var_15)
                return

            var_15[var_41][image_state] = var_68
            var_15[status] = var_69
            var_3.service.update(var_9, var_11, var_15)

            shutil.rmtree(var_44)

        eventlet.spawn_n(delayed_create)

        return var_13

    @staticmethod
    def function_21(var_70, var_57, var_59,
                       var_71, var_72):
        var_24, var_73 = nova.utils.execute(openssl,
                                 rsautl,
                                 -decrypt,
                                 -inkey, %s % var_71,
                                 process_input=var_57,
                                 check_exit_code=False)
        if var_73:
            raise nova.exception.Error(_Failed to decrypt private var_24: %s
                                  % var_73)
        var_74, var_73 = nova.utils.execute(openssl,
                                rsautl,
                                -decrypt,
                                -inkey, %s % var_71,
                                process_input=var_59,
                                check_exit_code=False)
        if var_73:
            raise nova.exception.Error(_Failed to decrypt initialization vector: %s % var_73)

        var_75, var_73 = nova.utils.execute(openssl, enc,
                                  -d, -aes-128-cbc,
                                  -in, %s % (var_70,),
                                  -K, %s % (var_24,),
                                  -var_74, %s % (var_74,),
                                  -out, %s % (var_72,),
                                  check_exit_code=False)
        if var_73:
            raise nova.exception.Error(_Failed to decrypt var_13 file %(var_78)s: %(var_73)s %
                                    {var_78: var_70,
                                     var_73: var_73})

    @staticmethod
    def function_22(var_76, var_22):
        var_77 = tarfile.open(var_22, r|gz)
        var_77.extractall(var_76)
        var_78 = var_77.getnames()[0]
        var_77.close()
        return os.var_76.join(var_76, var_78)
