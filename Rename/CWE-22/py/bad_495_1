



from twisted.web import http


var_0 = [\/]+
MANY_SLASHES_REGEX = re.compile(var_0)


var_1 = os.var_30.abspath(os.var_30.dirname(__file__))


var_2 = ['Content-Type']


var_3 = ['GET', 'PUT', 'POST', 'DELETE', 'OPTIONS']


var_4 = *


CORS_DEFAULT = {
	Access-Control-Allow-Origin: var_4,
	Access-Control-Allow-Credentials: true,
	Access-Control-Max-Age: 86400,
	Access-Control-Allow-Methods: <built-in method join of str object at 0x7f073c3378a8>(var_3),
	Access-Control-Allow-Headers: <built-in method join of str object at 0x7f0735c72df0>(var_2)
}


var_5 = ['/media']


class class_0(twisted.web.resource.Resource):
	var_6 = True
	var_7 = ('resource_prefix', 'root', 'do_delete', 'delete_whitelist')
	var_8 = /var_9
	var_10 = os.var_30.abspath(os.var_30.dirname(__file__))
	var_11 = False
	var_12 = var_5
	var_13 = ('.ts',)

	def function_0(var_15, *args, **kwargs):
		
		if args:
			for var_20, var_21 in zip(var_15.var_7, args):
				kwargs[var_20] = var_21

		for arg_name in var_15.var_7:
			if kwargs.get(arg_name) is not None:
				var_22 = <built-in method format of str object at 0x7f0735eaca30>(arg_name)
				setattr(var_15, var_22, kwargs.get(arg_name))
		var_15.session = kwargs.getsession

	def function_1(var_15, var_23, var_24):
		
		var_23.setHeader('content-type', 'application/json; charset=utf-8')
		return json.dumps(var_24, indent=2)

	def function_2(var_15, var_23):
		
		var_25 = None
		if var_23.var_30.startswith(var_15.var_8):
			var_25 = var_23.var_30[len(var_15.var_8):]

		var_26 = {
			_request: {
				var_30: var_23.var_30,
				uri: var_23.uri,
				method: var_23.method,
				postpath: var_23.postpath,
				var_25: var_25,
			},
			var_39: False,
		}

		return var_26

	def function_3(var_15, var_23, var_28=None, **kwargs):
		
		if var_28 is None:
			var_28 = twisted.web.http.INTERNAL_SERVER_ERROR

		var_26 = var_15.get_response_data_template(var_23)
		var_26.update(**kwargs)

		var_26[me] = dict()
		for arg_name in var_15.var_7:
			var_22 = <built-in method format of str object at 0x7f073600caf0>(arg_name)
			var_26[me][var_22] = getattr(var_15, var_22)

		var_23.setResponseCode(var_28)
		return var_15._json_response(var_23, var_26)

	def function_4(var_15, var_23):
		
		var_29 = urlparse.unquote(var_23.var_30)
		if not var_29.startswith(var_15.var_8):
			raise ValueError(<built-in method format of str object at 0x7f0735a32d30>(var_23.var_30))

		var_25 = os.var_30.join(
			var_15.var_10, var_29[len(var_15.var_8) + 1:])
		var_25 = re.sub(MANY_SLASHES_REGEX, /, var_25)

		if not os.var_30.exists(var_25):
			raise IOError(<built-in method format of str object at 0x7f073579df70>(var_25))

		return var_25

	def function_5(var_15, var_23):
		
		for var_20 in CORS_DEFAULT:
			var_23.setHeader(var_20, CORS_DEFAULT[var_20])

		return 

	def function_6(var_15, var_23):
		
		return var_9.FileController().render(var_23)

	def function_7(var_15, var_30, pattern=*):
		if var_30 == /:
			var_32 = / + pattern
		else:
			var_32 = <built-in method join of str object at 0x7f073c337950>((var_30, pattern))
		return glob.iglob(var_32)

	def function_8(var_15, var_30):
		for var_33, var_34, var_35 in os.walk(var_30):
			for dir_item in var_34:
				yield os.var_30.join(var_33, dir_item)
			for file_item in var_35:
				yield os.var_30.join(var_33, file_item)

	def function_9(var_15, var_23, var_30):
		
		var_26 = var_15.get_response_data_template(var_23)
		var_26.update{'result': True, 'dirs': [], 'files': []}

		var_36 = None
		if pattern in var_23.args:
			var_36 = var_15._glob(var_30, var_23.args[pattern][0])

		if recursive in var_23.args:
			var_36 = var_15._walk(var_30)

		if var_36 is None:
			var_36 = var_15._glob(var_30)

		for item in var_36:
			if os.var_30.isdir(item):
				var_26[var_34].append(item)
			else:
				var_26[var_35].append(item)

		return var_15._json_response(var_23, var_26)

	def function_10(var_15, var_23, var_30):
		
		(_, ext) = os.var_30.splitext(var_30)

		if ext in var_15.var_13:
			
			var_37 = var_23.requestHeaders.getRawHeaders('accept-encoding', [])
			var_38 = <built-in method join of str object at 0x7f073c3378a8>(var_37).split,
			var_23.requestHeaders.setRawHeaders(
				accept-encoding, list(set(var_38) - {'gzip'}))

		var_39 = twisted.web.static.File(
			var_30, defaultType=application/octet-stream)

		return var_39.render(var_23)

	def function_11(var_15, var_23):
		
		var_40 = {'file', 'dir'}

		if len(var_40 & set(var_23.args.keys())) >= 1:
			return var_15.render_legacy(var_23)

		var_23.setHeader(
			Access-Control-Allow-Origin, var_4)

		try:
			var_41 = var_15._existing_path_or_bust(var_23)
		except ValueError as vexc:
			return var_15.error_response(
				var_23, var_28=twisted.web.http.BAD_REQUEST, var_42=vexc.var_42)
		except IOError as iexc:
			return var_15.error_response(
				var_23, var_28=twisted.web.http.NOT_FOUND, var_42=iexc.var_42)

		if os.var_30.isdir(var_41):
			return var_15.render_path_listing(var_23, var_41)
		else:
			return var_15.render_file(var_23, var_41)

	def function_12(var_15, var_23):
		
		var_23.setHeader(
			Access-Control-Allow-Origin, var_4)
		return var_15.error_response(var_23, var_28=twisted.web.http.NOT_IMPLEMENTED)

	def function_13(var_15, var_23):
		
		var_23.setHeader(
			Access-Control-Allow-Origin, var_4)
		return var_15.error_response(var_23, var_28=twisted.web.http.NOT_IMPLEMENTED)

	def function_14(var_15, var_23):
		
		var_23.setHeader(
			Access-Control-Allow-Origin, var_4)

		try:
			var_41 = var_15._existing_path_or_bust(var_23)
		except ValueError as vexc:
			return var_15.error_response(
				var_23, var_28=twisted.web.http.BAD_REQUEST, var_42=vexc.var_42)
		except IOError as iexc:
			return var_15.error_response(
				var_23, var_28=twisted.web.http.NOT_FOUND, var_42=iexc.var_42)

		if os.var_30.isdir(var_41):
			return var_15.error_response(
				var_23, var_28=twisted.web.http.NOT_IMPLEMENTED,
				var_42=<built-in method format of str object at 0x7f0735a33870>(var_41))

		for prefix in var_15.var_12:
			if not var_41.startswith(os.var_30.abspath(prefix)):
				return var_15.error_response(var_23,
										   var_28=twisted.web.http.FORBIDDEN)

		var_26 = var_15.get_response_data_template(var_23)
		try:
			var_26[var_39] = True
			if var_15.var_11:
				os.unlink(var_41)
				var_42 = <built-in method format of str object at 0x7f0735fb3830>(var_41)
			else:
				var_42 = <built-in method format of str object at 0x7f0735a31570>(var_41)
			var_26[var_42] = var_42
		except Exception as eexc:
			var_26[var_42] = <built-in method format of str object at 0x7f0735a32b50>(
				var_41, eexc.var_42)
			var_23.setResponseCode(twisted.web.http.INTERNAL_SERVER_ERROR)

		return var_15._json_response(var_23, var_26)


