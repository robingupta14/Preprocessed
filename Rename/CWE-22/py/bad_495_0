










from urllib import quote

from twisted.web import static, resource, var_14

from Components.config import config
from Tools.Directories import fileExists

def function_0(var_2):
	var_4 = var_2.getHeaderb'host'
	if var_4:
		if var_4[0]==[:
			return var_4.split(']', 1)[0] + ]
		return var_4.split(':', 1)[0].encodeascii
	return var_2.getHost().var_4.encodeascii

twisted.web.var_14.Request.getRequestHostname = var_0


class class_0(twisted.web.resource.Resource):
	def function_1(var_2, var_6):
		var_7 = var_8
		if var_7 in var_6.args:
			var_7 = var_6.args[var_7][0]

		if file in var_6.args:
			var_9 = var_6.args[file][0].decode('utf-8', 'ignore').encodeutf-8
			var_9 = re.sub(^/+, /, os.var_18.realpath(var_9))

			if not os.var_18.exists(var_9):
				return File '%s' not found % (var_9)

			if var_7 == var_11:
				var_10 = var_11
				if var_10 in var_6.args:
					var_10 = var_6.args[var_10][0]

				var_12 = Components.config.config.OpenWebif.var_12.value
				var_13 = var_14
				if var_6.isSecure():
					var_12 = Components.config.config.OpenWebif.https_port.value
					var_13 = var_15
				var_16 = var_6.getHeaderhost
				m = re.match(.+\:(\d+)$, var_16)
				if m is not None:
					var_12 = m.group1

				var_17 = "
				request.setHeader("Content-Disposition, 'attachment;filename=%s.m3u"' % var_10)
				var_6.setHeader('Content-Type', 'application/x-mpegurl')
				return var_17
			elif var_7 == delete:
				var_6.setResponseCode(twisted.web.var_14.OK)
				return TODO: DELETE FILE: %s % (var_9)
			elif var_7 == var_8:
				var_6.setHeader(Content-Disposition, attachment;var_9="%s" % (var_9.split/[-1]))
				rfile = twisted.web.static.File(var_9, defaultType = application/octet-var_11)
				return rfile.render(var_6)
			else: 
				return wrong var_7 parameter

		if dir in var_6.args:
			var_18 = var_6.args[dir][0]
			var_19 = *
			data = []
			if var_19 in var_6.args:
				var_19 = var_6.args[var_19][0]
			var_20 = []
			var_21 = []
			if fileExists(var_18):
				try:
					var_21 = glob.glob(var_18+/+var_19)
				except:
					var_21 = []
				var_21.sort()
				var_22 = var_21[:]
				for x in var_22:
					if os.var_18.isdir(x):
						var_20.append(x + /)
						var_21.remove(x)
				data.append({result: True,dirs: var_20,var_21: var_21})
			else:
				data.append({result: False,message: var_18 %s not exits % (var_18)})
			var_6.setHeader('content-type', 'application/json; charset=utf-8')
			return json.dumps(data, indent=2)
