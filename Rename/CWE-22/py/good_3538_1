



















from xml.etree import ElementTree


from nova import crypto
from nova import exception
from nova import flags
from nova import var_12
from nova import log as logging
from nova import utils
from nova.var_12 import service
from nova.api.ec2 import ec2utils


var_0 = nova.log.getLoggernova.nova.var_12.s3
var_1 = nova.flags.var_1
nova.flags.DEFINE_string('image_decryption_dir', '/tmp', 'parent dir for tempdir used for image decryption')
nova.flags.DEFINE_string('s3_access_key', 'notchecked', 'access key to use for s3 server for images')
nova.flags.DEFINE_string('s3_secret_key', 'notchecked', 'secret key to use for s3 server for images')


class class_0(nova.var_12.service.BaseImageService):
    

    def function_0(var_3, service=None, *args, **kwargs):
        var_3.service = service or nova.var_12.get_default_image_service()
        var_3.nova.var_12.service.__init__(*args, **kwargs)

    def function_1(var_3, var_9, var_10, data=None):
        
        var_12 = var_3._s3_create(var_9, var_10)
        return var_12

    def function_2(var_3, var_9, var_13):
        var_3.nova.var_12.service.delete(var_9, var_13)

    def function_3(var_3, var_9, var_13, var_10, data=None):
        var_12 = var_3.nova.var_12.service.update(var_9, var_13, var_10, data)
        return var_12

    def function_4(var_3, var_9):
        return var_3.nova.var_12.service.index(var_9)

    def function_5(var_3, var_9):
        return var_3.nova.var_12.service.detail(var_9)

    def function_6(var_3, var_9, var_13):
        return var_3.nova.var_12.service.show(var_9, var_13)

    def function_7(var_3, var_9, var_14):
        return var_3.nova.var_12.service.show_by_name(var_9, var_14)

    @staticmethod
    def function_8(var_9):
        
        
        var_15 = var_1.s3_access_key
        var_16 = var_1.s3_secret_key
        var_17 = boto.s3.connection.OrdinaryCallingFormat()
        return boto.s3.connection.S3Connection(aws_access_key_id=var_15,
                                               aws_secret_access_key=var_16,
                                               is_secure=False,
                                               calling_format=var_17,
                                               port=var_1.s3_port,
                                               host=var_1.s3_host)

    @staticmethod
    def function_9(var_18, var_19, var_20):
        var_21 = var_18.get_key(var_19)
        var_22 = os.var_72.join(var_20, os.var_72.basename(var_19))
        var_21.get_contents_to_filename(var_22)
        return var_22

    def function_10(var_3, var_9, var_10, var_23):
        var_23 = xml.etree.ElementTree.fromstring(var_23)
        var_24 = var_25
        var_26 = var_27

        try:
            var_28 = var_23.findmachine_configuration/var_28.text
            if var_28 == true:
                var_24 = var_29
                var_26 = var_30
                var_28 = None
        except Exception:
            var_28 = None

        try:
            var_31 = var_23.findmachine_configuration/var_31.text
            if var_31 == true:
                var_24 = var_32
                var_26 = var_33
                var_31 = None
        except Exception:
            var_31 = None

        try:
            var_34 = var_23.findmachine_configuration/architecture.text
        except Exception:
            var_34 = var_35

        
        
        
        
        
        
        
        
        
        
        
        var_36 = []
        try:
            var_37 = var_23.findallmachine_configuration/var_37/mapping
            for bdm in var_37:
                var_36.append({virtual: bdm.findvirtual.text,
                                 device: bdm.finddevice.text})
        except Exception:
            var_36 = []

        var_38 = var_10[var_38]
        var_38[project_id] = var_9.project_id
        var_38[architecture] = var_34

        if var_28:
            var_38[var_28] = ec2nova.utils.ec2_id_to_id(var_28)

        if var_31:
            var_38[var_31] = ec2nova.utils.ec2_id_to_id(var_31)

        if var_36:
            var_38[var_36] = var_36

        var_10.update({disk_format: var_24,
                         container_format: var_24,
                         status: queued,
                         is_public: False,
                         var_38: var_38})
        var_10[var_38][image_state] = var_39
        var_12 = var_3.nova.var_12.service.create(var_9, var_10)
        return var_23, var_12

    def function_11(var_3, var_9, var_10):
        

        var_40 = tempfile.mkdtemp(dir=var_1.image_decryption_dir)

        var_41 = var_10[var_38][var_41]
        var_42 = var_41.split/[0]
        var_43 = var_41[len(var_42) + 1:]
        var_18 = var_3._conn(var_9).get_bucket(var_42)
        var_21 = var_18.get_key(var_43)
        var_23 = var_21.get_contents_as_string()

        var_23, var_12 = var_3._s3_parse_manifest(var_9, var_10, var_23)
        var_13 = var_12[id]

        def function_12():
            
            var_44 = {var_41: var_41,
                        var_40: var_40}
            var_10[var_38][image_state] = var_45
            var_3.nova.var_12.service.update(var_9, var_13, var_10)

            try:
                var_46 = []
                var_47 = var_23.findimage.getiteratorfilename
                for fn_element in var_47:
                    var_48 = var_3._download_file(var_18,
                                               fn_element.text,
                                               var_40)
                    var_46.append(var_48)

                
                var_49 = os.var_72.join(var_40, nova.var_12.encrypted)
                with open(var_49, w) as combined:
                    for var_19 in var_46:
                        with open(var_19) as var_48:
                            shutil.copyfileobj(var_48, combined)

            except Exception:
                var_0.exception(_Failed to download %(var_41)s to %(var_40)s, var_44)
                var_10[var_38][image_state] = var_50
                var_3.nova.var_12.service.update(var_9, var_13, var_10)
                return

            var_10[var_38][image_state] = var_51
            var_3.nova.var_12.service.update(var_9, var_13, var_10)

            try:
                var_52 = var_23.findimage/ec2_encrypted_key.text
                var_53 = binascii.a2b_hex(var_52)
                var_54 = var_23.findimage/ec2_encrypted_iv.text
                var_55 = binascii.a2b_hex(var_54)

                
                
                var_56 = nova.crypto.key_path(var_9.project_id)

                var_57 = os.var_72.join(var_40, nova.var_12.tar.gz)
                var_3._decrypt_image(var_49, var_53,
                                    var_55, var_56,
                                    var_57)
            except Exception:
                var_0.exception(_Failed to decrypt %(var_41)s to %(var_40)s, var_44)
                var_10[var_38][image_state] = var_58
                var_3.nova.var_12.service.update(var_9, var_13, var_10)
                return

            var_10[var_38][image_state] = var_59
            var_3.nova.var_12.service.update(var_9, var_13, var_10)

            try:
                var_60 = var_3._untarzip_image(var_40, var_57)
            except Exception:
                var_0.exception(_Failed to untar %(var_41)s to %(var_40)s, var_44)
                var_10[var_38][image_state] = var_61
                var_3.nova.var_12.service.update(var_9, var_13, var_10)
                return

            var_10[var_38][image_state] = var_62
            var_3.nova.var_12.service.update(var_9, var_13, var_10)
            try:
                with open(var_60) as var_74:
                    var_3.nova.var_12.service.update(var_9, var_13,
                                        var_10, var_74)
            except Exception:
                var_0.exception(_Failed to upload %(var_41)s to %(var_40)s, var_44)
                var_10[var_38][image_state] = var_63
                var_3.nova.var_12.service.update(var_9, var_13, var_10)
                return

            var_10[var_38][image_state] = var_64
            var_10[status] = var_65
            var_3.nova.var_12.service.update(var_9, var_13, var_10)

            shutil.rmtree(var_40)

        eventlet.spawn_n(delayed_create)

        return var_12

    @staticmethod
    def function_13(var_66, var_53, var_55,
                       var_67, var_68):
        var_21, var_69 = nova.utils.execute(openssl,
                                 rsautl,
                                 -decrypt,
                                 -inkey, %s % var_67,
                                 process_input=var_53,
                                 check_exit_code=False)
        if var_69:
            raise nova.exception.Error(_Failed to decrypt private var_21: %s
                                  % var_69)
        var_70, var_69 = nova.utils.execute(openssl,
                                rsautl,
                                -decrypt,
                                -inkey, %s % var_67,
                                process_input=var_55,
                                check_exit_code=False)
        if var_69:
            raise nova.exception.Error(_Failed to decrypt initialization vector: %s % var_69)

        var_71, var_69 = nova.utils.execute(openssl, enc,
                                  -d, -aes-128-cbc,
                                  -in, %s % (var_66,),
                                  -K, %s % (var_21,),
                                  -var_70, %s % (var_70,),
                                  -out, %s % (var_68,),
                                  check_exit_code=False)
        if var_69:
            raise nova.exception.Error(_Failed to decrypt var_12 file %(var_74)s: %(var_69)s %
                                    {var_74: var_66,
                                     var_69: var_69})

    @staticmethod
    def function_14(var_72, var_19):
        
        var_73 = tarfile.open(var_19, r|gz)
        for n in var_73.getnames():
            if not os.var_72.abspath(os.var_72.join(var_72, n)).startswith(var_72):
                var_73.close()
                raise nova.exception.Error(_Unsafe filenames in var_12)
        var_73.close()

    @staticmethod
    def function_15(var_72, var_19):
        S3ImageService._test_for_malicious_tarball(var_72, var_19)
        var_73 = tarfile.open(var_19, r|gz)
        var_73.extractall(var_72)
        var_74 = var_73.getnames()[0]
        var_73.close()
        return os.var_72.join(var_72, var_74)
