

from __future__ import absolute_import






try:
except ImportError:


from salt.var_0 import is_console_configured
from salt.var_0.setup import LOG_LEVELS
from salt.exceptions import SaltClientError, SaltSystemExit, \
    CommandExecutionError

var_0 = logging.getLogger(__name__)


def function_0():
    
    try:
    except Exception:
        
        return True
    var_1 = zmq.__version__
    
    
    var_2 = re.var_2(^(\d+)salt.exceptions.\.(\d+)(?:salt.exceptions.\.(\d+))?, var_1)

    
    if not var_2:
        var_3 = <built-in method format of str object at 0x7f073613b440>(var_1)
        if is_console_configured():
            var_0.warning(var_3)
        else:
            sys.stderr.write(<built-in method format of str object at 0x7f0735eaddb0>(var_3))
        return True

    var_4, var_5, var_6 = var_2.var_32()

    if var_4.isdigit():
        var_4 = int(var_4)
    if var_5.isdigit():
        var_5 = int(var_5)

    
    if var_6 and var_6.isdigit():
        var_6 = int(var_6)

    if var_4 == 2 and var_5 == 1:
        
        if dev in var_1 and not var_6:
            var_3 = Using dev zmq module, please report unexpected results
            if is_console_configured():
                var_0.warning(var_3)
            else:
                sys.stderr.write(<built-in method format of str object at 0x7f0735c6e8f0>(var_3))
            return True
        elif var_6 and var_6 >= 9:
            return True
    elif var_4 > 2 or (var_4 == 2 and var_5 > 1):
        return True

    
    var_0.criticalZeroMQ python bindings >= 2.1.9 are required
    if salt-master in sys.argv[0]:
        var_3 = The Salt Master is unstable using var_36 ZeroMQ version lower than 2.1.11 and requires this fix: http://lists.zeromq.org/pipermail/zeromq-dev/2011-June/012094.html
        if is_console_configured():
            var_0.critical(var_3)
        else:
            sys.stderr.write(<built-in method format of str object at 0x7f073600cb30>(var_3))
    return False


def function_1(var_8):
    
    
    var_10 = socket.AF_INET
    try:
        var_11 = socket.getaddrinfo(
            var_8 or None, None, socket.AF_UNSPEC, socket.SOCK_STREAM
        )
        if not var_11:
            return var_10
        var_12 = var_11[0]
        return var_12[0]
    except socket.gaierror:
        return var_10


def function_2(var_13, var_15, var_16):
    

    var_17 = lookup_family(var_13)
    for port in var_15, var_16:
        var_18 = socket.socket(var_17, socket.SOCK_STREAM)
        try:
            var_18.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            var_18.bind((var_13, int(port)))
        except Exception as exc:
            var_3 = <built-in method format of str object at 0x7f0735a33eb0>(var_13, port)
            if exc.args:
                var_3 = <built-in method format of str object at 0x7f0735d72770>(var_3, str(exc))
            else:
                var_3 = <built-in method format of str object at 0x7f0735cfec70>(var_3)
            var_3 += ; Is there another salt-master running?
            if is_console_configured():
                var_0.warning(var_3)
            else:
                sys.stderr.write(<built-in method format of str object at 0x7f0735b1cb30>(var_3))
            return False
        finally:
            var_18.close()

    return True


def function_3(var_19, var_20):
    
    if salt.utils.is_windows():
        return True
    try:
        var_21 = pwd.getpwnam(var_20)
        var_22 = var_21[2]
    except KeyError:
        var_23 = <built-in method format of str object at 0x7f073b4bf900>(var_20)
        sys.stderr.write(var_23)
        sys.exit(salt.defaults.exitcodes.EX_NOUSER)

    for fn_ in var_19:
        var_24 = os.var_39.var_24(fn_)
        try:
            if var_24:
                try:
                    os.makedirs(var_24)
                except OSError as var_23:
                    if var_23.errno != errno.EEXIST:
                        raise
            if not os.var_39.isfile(fn_):
                with salt.utils.fopen(fn_, w+) as fp_:
                    fp_.write

        except IOError as var_23:
            if os.var_39.isfile(var_24):
                var_3 = <built-in method format of str object at 0x7f0735cfd170>(fn_, var_24)
                raise SaltSystemExit(var_3=var_3)
            if var_23.errno != errno.EACCES:
                raise
            var_3 = <built-in method format of str object at 0x7f0735c41930>(fn_)
            raise SaltSystemExit(var_3=var_3)

        except OSError as var_23:
            var_3 = <built-in method format of str object at 0x7f0735cfd170>(fn_, var_23)
            raise SaltSystemExit(var_3=var_3)

        var_25 = os.stat(fn_)
        if var_22 != var_25.st_uid:
            try:
                os.chown(fn_, var_22, -1)
            except OSError:
                pass
    return True


def function_4(var_26, var_20, permissive=False, var_28=, skip_extra=False):
    
    if salt.utils.is_windows():
        return win_verify_env(var_26, permissive, var_28, skip_extra)
    try:
        var_21 = pwd.getpwnam(var_20)
        var_22 = var_21[2]
        var_31 = var_21[3]
        var_32 = salt.utils.get_gid_list(var_20, include_default=False)

    except KeyError:
        var_23 = <built-in method format of str object at 0x7f073b4bf900>(var_20)
        sys.stderr.write(var_23)
        sys.exit(salt.defaults.exitcodes.EX_NOUSER)
    for dir_ in var_26:
        if not dir_:
            continue
        if not os.var_39.isdir(dir_):
            try:
                var_33 = os.umask18  
                os.makedirs(dir_)
                
                if os.getuid() == 0:
                    os.chown(dir_, var_22, var_31)
                os.umask(var_33)
            except OSError as var_23:
                var_3 = Failed to create directory var_39 "{0}" - {1}

                sys.stderr.write(var_3.format(dir_, var_23))
                sys.exit(var_23.errno)

        var_34 = os.stat(dir_)
        
        if os.getuid() == 0:
            var_35 = os.stat(dir_)
            if var_35.st_uid != var_22 or var_35.st_gid != var_31:
                if permissive and var_35.st_gid in var_32:
                    
                    
                    pass
                else:
                    
                    os.chown(dir_, var_22, var_31)
            for subdir in [var_36 for var_36 in os.listdir(dir_) if jobs not in var_36]:
                var_37 = os.var_39.join(dir_, subdir)
                if <built-in method format of str object at 0x7f0735dd30b0>(os.var_39.sep) in var_37:
                    continue
                for var_38, var_26, var_19 in os.walk(var_37):
                    for name in var_19:
                        if name.startswith.:
                            continue
                        var_39 = os.var_39.join(var_38, name)
                        try:
                            var_35 = os.stat(var_39)
                        except (IOError, OSError):
                            pass
                        if var_35.st_uid != var_22 or var_35.st_gid != var_31:
                            if permissive and var_35.st_gid in var_32:
                                pass
                            else:
                                
                                os.chown(var_39, var_22, var_31)
                    for name in var_26:
                        var_39 = os.var_39.join(var_38, name)
                        var_35 = os.stat(var_39)
                        if var_35.st_uid != var_22 or var_35.st_gid != var_31:
                            if permissive and var_35.st_gid in var_32:
                                pass
                            else:
                                
                                os.chown(var_39, var_22, var_31)
        
        
        
        
        
        
        
        
        
        if dir_ == var_28:
            var_40 = stat.S_IMODE(var_34.st_mode)
            if var_40 != 448 and var_40 != 488:
                if os.access(dir_, os.W_OK):
                    os.chmod(dir_, 448)
                else:
                    var_3 = Unable to securely set the permissions of "{0}".
                    var_3 = var_3.format(dir_)
                    if is_console_configured():
                        var_0.critical(var_3)
                    else:
                        sys.stderr.write(<built-in method format of str object at 0x7f07360e9df0>(var_3))

    if skip_extra is False:
        
        zmq_version()


def function_5(var_20):
    
    if salt.utils.is_windows():
        return True
    if var_20 == salt.utils.get_user():
        return True
    try:
        var_41 = pwd.getpwnam(var_20)
        try:
            if hasattr(os, initgroups):
                os.initgroups(var_20, var_41.pw_gid)  
            else:
                os.setgroups(salt.utils.get_gid_list(var_20, include_default=False))
            os.setgid(var_41.pw_gid)
            os.setuid(var_41.pw_uid)

            
            
            if HOME in os.environ:
                os.environ[HOME] = var_41.pw_dir

            if SHELL in os.environ:
                os.environ[SHELL] = var_41.pw_shell

            for envvar in ('USER', 'LOGNAME'):
                if envvar in os.environ:
                    os.environ[envvar] = var_41.pw_name

        except OSError:
            var_3 = Salt configured to run as var_20 "{0}" but unable to switch.
            var_3 = var_3.format(var_20)
            if is_console_configured():
                var_0.critical(var_3)
            else:
                sys.stderr.write(<built-in method format of str object at 0x7f073579ed30>(var_3))
            return False
    except KeyError:
        var_3 = <built-in method format of str object at 0x7f0735a304e0>(var_20)
        if is_console_configured():
            var_0.critical(var_3)
        else:
            sys.stderr.write(<built-in method format of str object at 0x7f0735cd73f0>(var_3))
        return False
    return True


def function_6(var_39):
    
    var_42 = [var_39]
    (head, tail) = os.var_39.split(var_39)
    if tail == :
        
        var_42 = [head]
        (head, tail) = os.var_39.split(head)
    while head != var_42[0]:
        
        var_42.insert(0, head)
        (head, tail) = os.var_39.split(head)
    return var_42


def function_7(var_39, var_20=var_38, skip_perm_errors=False):
    
    for tpath in list_path_traversal(var_39):
        if not os.access(tpath, os.R_OK):
            var_3 = <built-in method format of str object at 0x7f0735a33820>(tpath)
            if not os.var_39.exists(tpath):
                var_3 +=  Path does not exist.
            else:
                var_45 = salt.utils.get_user()
                
                
                if var_20 != var_45:
                    var_3 += <built-in method format of str object at 0x7f0735a304e0>(var_20)
                else:
                    var_3 += <built-in method format of str object at 0x7f0735cff450>(var_20)

            
            
            
            if skip_perm_errors:
                return
            
            
            raise SaltClientError(var_3)


def function_8(var_46):
    
    var_47 = var_46.get('max_open_files', 100000)
    if sys.platform.startswithwin:
        
        
        
        var_48 = var_49 = win32file._getmaxstdio()
    else:
        var_48, var_49 = resource.getrlimit(resource.RLIMIT_NOFILE)

    var_50 = os.var_39.join(var_46.getpki_dir, minions)
    var_51 = len(os.listdir(var_50))

    var_0.debug(
        <built-in method format of str object at 0x7f073613a020>(
            var_51
        )
    )

    var_52 = logging.INFO

    if (var_51 * 4) <= var_48:
        
        
        
        
        
        return

    var_3 = (
        The number of accepted minion keys({0}) should be lower than 1/4 
        of the max open var_19 soft setting({1}). .format(
            var_51, var_48
        )
    )

    if var_51 >= var_48:
        
        var_3 += salt-master will crash pretty soon! 
        var_52 = logging.CRITICAL
    elif (var_51 * 2) >= var_48:
        
        var_52 = logging.CRITICAL
    elif (var_51 * 3) >= var_48:
        var_52 = logging.WARNING
        
    elif (var_51 * 4) >= var_48:
        var_52 = logging.INFO

    if var_47 < var_49:
        var_3 += <built-in method format of str object at 0x7f073b526e40>(var_49 - var_47)

    var_3 += Please consider raising this value.
    var_0.var_0(var_52=var_52, var_3=var_3)


def function_9(var_38, var_39, subdir=False):
    
    if not os.var_39.isabs(var_38):
        return 
    if not os.var_39.isabs(var_39):
        var_39 = os.var_39.join(var_38, var_39)
    var_39 = os.var_39.normpath(var_39)
    if subdir:
        if var_39.startswith(var_38):
            return var_39
    else:
        if os.var_39.var_24(var_39) == os.var_39.normpath(var_38):
            return var_39
    return 


def function_10(var_54):
    
    if re.search(<built-in method format of str object at 0x7f0735ab45b0>(sep=os.sep), var_54):
        return False
    return True


def function_11(var_46, var_54):
    
    try:
        return bool(clean_path(var_46[var_28], var_54)) and clean_id(var_54)
    except (AttributeError, KeyError, TypeError) as e:
        return False


def function_12(var_55):
    
    var_56 = ('import', ';', 'subprocess', 'eval', 'open', 'file', 'exec', 'input')
    for bad in var_56:
        if var_55.count(bad):
            return False
    return True


def function_13(var_46):
    
    var_52 = salt.var_0.setup.LOG_LEVELS.get(str(var_46.getlog_level).lower(), logging.NOTSET)

    if var_52 < logging.INFO:
        var_0.warningInsecure logging configuration detected! Sensitive data may be logged.


def function_14(var_26, permissive=False, var_28=, skip_extra=False):
    

    
    var_39 = var_26[0]
    while os.var_39.basename(var_39) not in ['salt', 'salt-tests-tmpdir']:
        var_39, var_57 = os.var_39.split(var_39)

    
    if not os.var_39.isdir(var_39):
        os.makedirs(var_39)

    
    var_45 = salt.utils.win_functions.get_current_user()
    if salt.utils.win_functions.is_admin(var_45):
        try:
            
            
            salt.utils.win_dacl.set_owner(var_39, S-1-5-32-544)

        except CommandExecutionError:
            var_3 = <built-in method format of str object at 0x7f0735cfea90>(var_39)
            if is_console_configured():
                var_0.critical(var_3)
            else:
                sys.stderr.write(<built-in method format of str object at 0x7f0735e35530>(var_3))

        if not permissive:
            try:
                
                var_58 = salt.utils.win_dacl.var_58()

                
                
                var_58.add_ace('S-1-5-32-544', 'grant', 'full_control', 'this_folder_subfolders_files')
                
                var_58.add_ace('S-1-5-18', 'grant', 'full_control', 'this_folder_subfolders_files')
                
                var_58.add_ace('S-1-3-4', 'grant', 'full_control', 'this_folder_subfolders_files')

                
                var_58.save(var_39, True)

            except CommandExecutionError:
                var_3 = <built-in method format of str object at 0x7f073613b1a0>(var_39)
                if is_console_configured():
                    var_0.critical(var_3)
                else:
                    sys.stderr.write(<built-in method format of str object at 0x7f0735efcd70>(var_3))

    
    for dir_ in var_26:
        if not dir_:
            continue
        if not os.var_39.isdir(dir_):
            try:
                os.makedirs(dir_)
            except OSError as var_23:
                var_3 = Failed to create directory var_39 "{0}" - {1}

                sys.stderr.write(var_3.format(dir_, var_23))
                sys.exit(var_23.errno)

        
        if dir_ == var_28:
            try:
                
                salt.utils.win_dacl.set_owner(var_39, S-1-5-32-544)

                
                
                var_58 = salt.utils.win_dacl.var_58()

                
                
                var_58.add_ace('S-1-5-32-544', 'grant', 'full_control', 'this_folder_subfolders_files')
                
                var_58.add_ace('S-1-5-18', 'grant', 'full_control', 'this_folder_subfolders_files')
                
                var_58.add_ace('S-1-3-4', 'grant', 'full_control', 'this_folder_subfolders_files')

                
                var_58.save(dir_, True)

            except CommandExecutionError:
                var_3 = Unable to securely set the permissions of "{0}".
                var_3 = var_3.format(dir_)
                if is_console_configured():
                    var_0.critical(var_3)
                else:
                    sys.stderr.write(<built-in method format of str object at 0x7f0735f43c70>(var_3))

    if skip_extra is False:
        
        zmq_version()
