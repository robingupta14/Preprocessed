



from twisted.web import http

from utilities import MANY_SLASHES_REGEX


var_0 = os.var_29.abspath(os.var_29.dirname(__file__))


var_1 = ['Content-Type']


var_2 = ['GET', 'PUT', 'POST', 'DELETE', 'OPTIONS']


var_3 = *


CORS_DEFAULT = {
	Access-Control-Allow-Origin: var_3,
	Access-Control-Allow-Credentials: true,
	Access-Control-Max-Age: 86400,
	Access-Control-Allow-Methods: <built-in method join of str object at 0x7f073c3378a8>(var_2),
	Access-Control-Allow-Headers: <built-in method join of str object at 0x7f0735f062f0>(var_1)
}


var_4 = ['/media']


class class_0(twisted.web.resource.Resource):
	var_5 = True
	var_6 = ('resource_prefix', 'root', 'do_delete', 'delete_whitelist')
	var_7 = /var_8
	var_9 = os.var_29.abspath(os.var_29.dirname(__file__))
	var_10 = False
	var_11 = var_4
	var_12 = ('.ts',)

	def function_0(var_14, *args, **kwargs):
		
		if args:
			for var_19, var_20 in zip(var_14.var_6, args):
				kwargs[var_19] = var_20

		for arg_name in var_14.var_6:
			if kwargs.get(arg_name) is not None:
				var_21 = <built-in method format of str object at 0x7f0735df7bb0>(arg_name)
				setattr(var_14, var_21, kwargs.get(arg_name))
		var_14.session = kwargs.getsession

	def function_1(var_14, var_22, var_23):
		
		var_22.setHeader('content-type', 'application/json; charset=utf-8')
		return json.dumps(var_23, indent=2)

	def function_2(var_14, var_22):
		
		var_24 = None
		if var_22.var_29.startswith(var_14.var_7):
			var_24 = var_22.var_29[len(var_14.var_7):]

		var_25 = {
			_request: {
				var_29: var_22.var_29,
				uri: var_22.uri,
				method: var_22.method,
				postpath: var_22.postpath,
				var_24: var_24,
			},
			var_38: False,
		}

		return var_25

	def function_3(var_14, var_22, var_27=None, **kwargs):
		
		if var_27 is None:
			var_27 = twisted.web.http.INTERNAL_SERVER_ERROR

		var_25 = var_14.get_response_data_template(var_22)
		var_25.update(**kwargs)

		var_25[me] = dict()
		for arg_name in var_14.var_6:
			var_21 = <built-in method format of str object at 0x7f0736035370>(arg_name)
			var_25[me][var_21] = getattr(var_14, var_21)

		var_22.setResponseCode(var_27)
		return var_14._json_response(var_22, var_25)

	def function_4(var_14, var_22):
		
		var_28 = urlparse.unquote(var_22.var_29)
		if not var_28.startswith(var_14.var_7):
			raise ValueError(<built-in method format of str object at 0x7f073610ee20>(var_22.var_29))

		var_24 = os.var_29.join(
			var_14.var_9, var_28[len(var_14.var_7) + 1:])
		var_24 = re.sub(MANY_SLASHES_REGEX, /, var_24)

		if not os.var_29.exists(var_24):
			raise IOError(<built-in method format of str object at 0x7f07359f0ff0>(var_24))

		return var_24

	def function_5(var_14, var_22):
		
		for var_19 in CORS_DEFAULT:
			var_22.setHeader(var_19, CORS_DEFAULT[var_19])

		return 

	def function_6(var_14, var_22):
		
		return var_8.FileController().render(var_22)

	def function_7(var_14, var_29, pattern=*):
		if var_29 == /:
			var_31 = / + pattern
		else:
			var_31 = <built-in method join of str object at 0x7f073c337950>((var_29, pattern))
		return glob.iglob(var_31)

	def function_8(var_14, var_29):
		for var_32, var_33, var_34 in os.walk(var_29):
			for dir_item in var_33:
				yield os.var_29.join(var_32, dir_item)
			for file_item in var_34:
				yield os.var_29.join(var_32, file_item)

	def function_9(var_14, var_22, var_29):
		
		var_25 = var_14.get_response_data_template(var_22)
		var_25.update{'result': True, 'dirs': [], 'files': []}

		var_35 = None
		if pattern in var_22.args:
			var_35 = var_14._glob(var_29, var_22.args[pattern][0])

		if recursive in var_22.args:
			var_35 = var_14._walk(var_29)

		if var_35 is None:
			var_35 = var_14._glob(var_29)

		for item in var_35:
			if os.var_29.isdir(item):
				var_25[var_33].append(item)
			else:
				var_25[var_34].append(item)

		return var_14._json_response(var_22, var_25)

	def function_10(var_14, var_22, var_29):
		
		(_, ext) = os.var_29.splitext(var_29)

		if ext in var_14.var_12:
			
			var_36 = var_22.requestHeaders.getRawHeaders('accept-encoding', [])
			var_37 = <built-in method join of str object at 0x7f073c3378a8>(var_36).split,
			var_22.requestHeaders.setRawHeaders(
				accept-encoding, list(set(var_37) - {'gzip'}))

		var_38 = twisted.web.static.File(
			var_29, defaultType=application/octet-stream)

		return var_38.render(var_22)

	def function_11(var_14, var_22):
		
		var_39 = {'file', 'dir'}

		if len(var_39 & set(var_22.args.keys())) >= 1:
			return var_14.render_legacy(var_22)

		var_22.setHeader(
			Access-Control-Allow-Origin, var_3)

		try:
			var_40 = var_14._existing_path_or_bust(var_22)
		except ValueError as vexc:
			return var_14.error_response(
				var_22, var_27=twisted.web.http.BAD_REQUEST, var_41=vexc.var_41)
		except IOError as iexc:
			return var_14.error_response(
				var_22, var_27=twisted.web.http.NOT_FOUND, var_41=iexc.var_41)

		if os.var_29.isdir(var_40):
			return var_14.render_path_listing(var_22, var_40)
		else:
			return var_14.render_file(var_22, var_40)

	def function_12(var_14, var_22):
		
		var_22.setHeader(
			Access-Control-Allow-Origin, var_3)
		return var_14.error_response(var_22, var_27=twisted.web.http.NOT_IMPLEMENTED)

	def function_13(var_14, var_22):
		
		var_22.setHeader(
			Access-Control-Allow-Origin, var_3)
		return var_14.error_response(var_22, var_27=twisted.web.http.NOT_IMPLEMENTED)

	def function_14(var_14, var_22):
		
		var_22.setHeader(
			Access-Control-Allow-Origin, var_3)

		try:
			var_40 = var_14._existing_path_or_bust(var_22)
		except ValueError as vexc:
			return var_14.error_response(
				var_22, var_27=twisted.web.http.BAD_REQUEST, var_41=vexc.var_41)
		except IOError as iexc:
			return var_14.error_response(
				var_22, var_27=twisted.web.http.NOT_FOUND, var_41=iexc.var_41)

		if os.var_29.isdir(var_40):
			return var_14.error_response(
				var_22, var_27=twisted.web.http.NOT_IMPLEMENTED,
				var_41=<built-in method format of str object at 0x7f073610df70>(var_40))

		for prefix in var_14.var_11:
			if not var_40.startswith(os.var_29.abspath(prefix)):
				return var_14.error_response(var_22,
										   var_27=twisted.web.http.FORBIDDEN)

		var_25 = var_14.get_response_data_template(var_22)
		try:
			var_25[var_38] = True
			if var_14.var_10:
				os.unlink(var_40)
				var_41 = <built-in method format of str object at 0x7f0735573bf0>(var_40)
			else:
				var_41 = <built-in method format of str object at 0x7f073610f9b0>(var_40)
			var_25[var_41] = var_41
		except Exception as eexc:
			var_25[var_41] = <built-in method format of str object at 0x7f073610faf0>(
				var_40, eexc.var_41)
			var_22.setResponseCode(twisted.web.http.INTERNAL_SERVER_ERROR)

		return var_14._json_response(var_22, var_25)


