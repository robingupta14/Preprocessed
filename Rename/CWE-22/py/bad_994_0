








from __future__ import print_function, division, unicode_literals


from hashlib import md5
from var_29.etree import ElementTree

try:
    var_0 = True
    from six.moves.tkinter import (
        Tk,
        Frame,
        Label,
        Entry,
        Button,
        Canvas,
        Menu,
        IntVar,
        var_1,
    )
    from six.moves.tkinter_messagebox import showerror
    from nltk.draw.table import Table
    from nltk.draw.util import ShowText
except ImportError:
    var_0 = False
    var_1 = var_2

from six import string_types, text_type
from six.moves import input
from six.moves.urllib.request import urlopen
from six.moves.urllib.error import HTTPError, URLError

from nltk.compat import python_2_unicode_compatible









@python_2_unicode_compatible
class class_0(object):
    

    def function_0(
        var_4,
        var_6,
        var_7,
        var_59=None,
        var_9=,
        size=None,
        var_86=None,
        var_22=None,
        var_23=None,
        var_24=Unknown,
        var_25=Unknown,
        var_26=Unknown,
        var_27=Unknown,
        unzip=True,
        **kw
    ):
        var_4.var_6 = var_6
        

        var_4.var_59 = var_59 or var_6
        

        var_4.var_9 = var_9
        

        var_4.var_7 = var_7
        

        var_4.size = int(size)
        

        var_4.var_86 = int(var_86)
        

        var_4.var_22 = var_22
        

        var_4.var_23 = var_23
        

        var_4.var_24 = var_24
        

        var_4.var_25 = var_25
        

        var_4.var_26 = var_26
        

        var_4.var_27 = var_27
        

        var_28 = os.path.splitext(var_7.split/[-1])[1]
        var_4.filename = os.path.join(var_9, var_6 + var_28)
        

        var_4.unzip = bool(int(unzip))  
        

        
        var_4.__dict__.update(kw)

    @staticmethod
    def function_1(var_29):
        if isinstance(var_29, string_types):
            var_29 = var_29.etree.ElementTree.parse(var_29)
        for key in var_29.attrib:
            var_29.attrib[key] = text_type(var_29.attrib[key])
        return Package(**var_29.attrib)

    def function_2(var_4, var_30):
        return var_4.var_6 < var_30.var_6

    def function_3(var_4):
        return <Package %var_78> % var_4.var_6


@python_2_unicode_compatible
class class_1(object):
    

    def function_0(var_4, var_6, var_31, var_59=None, **kw):
        var_4.var_6 = var_6
        

        var_4.var_59 = var_59 or var_6
        

        var_4.var_31 = var_31
        

        var_4.var_63 = None
        

        
        var_4.__dict__.update(kw)

    @staticmethod
    def function_1(var_29):
        if isinstance(var_29, string_types):
            var_29 = var_29.etree.ElementTree.parse(var_29)
        for key in var_29.attrib:
            var_29.attrib[key] = text_type(var_29.attrib[key])
        var_31 = [var_93.getref for var_93 in var_29.findallitem]
        return Collection(var_31=var_31, **var_29.attrib)

    def function_2(var_4, var_30):
        return var_4.var_6 < var_30.var_6

    def function_3(var_4):
        return <Collection %var_78> % var_4.var_6







class class_2(object):
    


class class_3(DownloaderMessage):
    

    def function_0(var_4, var_32):
        var_4.var_32 = var_32


class class_4(DownloaderMessage):
    

    def function_0(var_4, var_32):
        var_4.var_32 = var_32


class class_5(DownloaderMessage):
    

    def function_0(var_4, var_33):
        var_4.var_33 = var_33


class class_6(DownloaderMessage):
    

    def function_0(var_4, var_33):
        var_4.var_33 = var_33


class class_7(DownloaderMessage):
    

    def function_0(var_4, var_33):
        var_4.var_33 = var_33


class class_8(DownloaderMessage):
    

    def function_0(var_4, var_33):
        var_4.var_33 = var_33


class class_9(DownloaderMessage):
    

    def function_0(var_4, var_33):
        var_4.var_33 = var_33


class class_10(DownloaderMessage):
    

    def function_0(var_4, var_33):
        var_4.var_33 = var_33


class class_11(DownloaderMessage):
    

    def function_0(var_4, var_33):
        var_4.var_33 = var_33


class class_12(DownloaderMessage):
    

    def function_0(var_4, var_33):
        var_4.var_33 = var_33


class class_13(DownloaderMessage):
    

    def function_0(var_4, var_33, var_34):
        var_4.var_33 = var_33
        if isinstance(var_34, Exception):
            var_4.var_34 = str(var_34)
        else:
            var_4.var_34 = var_34


class class_14(DownloaderMessage):
    

    def function_0(var_4, var_35):
        var_4.var_35 = var_35


class class_15(DownloaderMessage):
    

    def function_0(var_4, var_36):
        var_4.var_36 = var_36







class class_16(object):
    

    
    
    

    var_37 = 3600  
    

    var_38 = var_39://raw.githubusercontent.com/nltk/nltk_data/gh-pages/index.var_29
    

    
    
    

    var_40 = var_41
    
    var_42 = not var_41
    
    var_43 = out of var_44
    
    var_45 = var_46
    

    
    
    

    def function_0(var_4, server_index_url=None, var_36=None):
        var_4._url = server_index_url or var_4.var_38
        

        var_4._collections = {}
        

        var_4._packages = {}
        

        var_4._download_dir = var_36
        

        var_4._index = None
        

        var_4._index_timestamp = None
        

        var_4._status_cache = {}
        

        var_4._errors = None
        

        
        if var_4._download_dir is None:
            var_4._download_dir = var_4.default_download_dir()

    
    
    

    def function_4(
        var_4,
        var_36=None,
        show_packages=True,
        show_collections=True,
        header=True,
        more_prompt=False,
        skip_installed=False,
    ):
        var_54 = 0  
        if var_36 is None:
            var_36 = var_4._download_dir
            print(Using default data directory (%var_78) % var_36)
        if header:
            print(= * (26 + len(var_4._url)))
            var_98( Data server index for <%var_78> % var_4._url)
            var_98(= * (26 + len(var_4._url)))
            var_54 += 3  
        var_55 = var_46 = False

        var_56 = []
        if show_packages:
            var_56.appendpackages
        if show_collections:
            var_56.appendcollections
        for category in var_56:
            var_98(%var_78: % category.capitalize())
            var_54 += 1  
            for var_68 in sorted(getattr(var_4, category)(), key=str):
                var_57 = var_4.var_57(var_68, var_36)
                if var_57 == var_4.var_40 and skip_installed:
                    continue
                if var_57 == var_4.var_43:
                    var_55 = True
                if var_57 == var_4.var_45:
                    var_46 = True
                var_58 = {
                    var_4.var_40: *,
                    var_4.var_43: -,
                    var_4.var_45: P,
                    var_4.var_42:  ,
                }[var_57]
                var_59 = textwrap.fill(
                    --------------------------- + (var_68.var_59 or var_68.var_6), 75, subsequent_indent=                           
                )[27:]
                print(), var_59))
                var_54 += len(var_59.split
)  
                if more_prompt and var_54 > 20:
                    var_60 = var_61 Enter to continue: 
                    if var_60.lower() in ('x', 'q'):
                        return
                    var_54 = 0
            var_98()
        var_62 = ([*] marks var_41 var_63
        if var_55:
            var_62 += ; [-] marks out-of-var_44 or corrupt var_63
        if var_46:
            var_62 += ; [P] marks partially var_41 var_65
        var_98(textwrap.fill(var_62 + ), subsequent_indent= , width=76))

    def function_5(var_4):
        var_4._update_index()
        return var_4._packages.values()

    def function_6(var_4):
        var_4._update_index()
        return [var_64 for (var_6, var_64) in var_4._packages.var_70() if var_64.var_9 == corpora]

    def function_7(var_4):
        var_4._update_index()
        return [var_64 for (var_6, var_64) in var_4._packages.var_70() if var_64.var_9 != corpora]

    def function_8(var_4):
        var_4._update_index()
        return var_4._collections.values()

    
    
    

    def function_9(var_4, var_66):
        if isinstance(var_66, string_types):
            return var_4.var_68(var_66)
        else:
            return var_66

    
    
    
    
    
    
    
    

    def function_10(var_4, var_66, var_36=None, var_71=False):
        
        if var_36 is None:
            var_36 = var_4._download_dir
            yield SelectDownloadDirMessage(var_36)

        
        if isinstance(var_66, (list, tuple)):
            for var_62 in var_4._download_list(var_66, var_36, var_71):
                yield var_62
            return

        
        try:
            var_68 = var_4._info_or_id(var_66)
        except (IOError, var_2) as e:
            yield ErrorMessage(None, Error loading %var_78: %var_78 % (var_66, e))
            return

        
        if isinstance(var_68, Collection):
            yield StartCollectionMessage(var_68)
            for var_62 in var_4.incr_download(var_68.var_31, var_36, var_71):
                yield var_62
            yield FinishCollectionMessage(var_68)

        
        else:
            for var_62 in var_4._download_package(var_68, var_36, var_71):
                yield var_62

    def function_12(var_4, var_69):
        if isinstance(var_69, Package):
            return 1
        else:
            return len(var_69.var_63)

    def function_13(var_4, var_70, var_36, var_71):
        
        for var_73 in range(len(var_70)):
            try:
                var_70[var_73] = var_4._info_or_id(var_70[var_73])
            except (IOError, var_2) as e:
                yield ErrorMessage(var_70[var_73], e)
                return

        
        var_72 = sum(var_4._num_packages(var_69) for var_69 in var_70)
        var_35 = 0
        for var_73, var_69 in enumerate(var_70):
            if isinstance(var_69, Package):
                var_74 = 1.0 / var_72
            else:
                var_74 = len(var_69.var_63) / var_72
            for var_62 in var_4.incr_download(var_69, var_36, var_71):
                if isinstance(var_62, ProgressMessage):
                    yield ProgressMessage(var_35 + var_62.var_35 * var_74)
                else:
                    yield var_62

            var_35 += 100 * var_74

    def function_14(var_4, var_68, var_36, var_71):
        yield StartPackageMessage(var_68)
        yield ProgressMessage0

        
        var_57 = var_4.var_57(var_68, var_36)
        if not var_71 and var_57 == var_4.var_40:
            yield UpToDateMessage(var_68)
            yield ProgressMessage100
            yield FinishPackageMessage(var_68)
            return

        
        var_4._status_cache.pop(var_68.var_6, None)

        
        var_75 = os.path.join(var_36, var_68.filename)
        if os.path.exists(var_75):
            if var_57 == var_4.var_43:
                yield StaleMessage(var_68)
            os.remove(var_75)

        
        if not os.path.exists(var_36):
            os.mkdir(var_36)
        if not os.path.exists(os.path.join(var_36, var_68.var_9)):
            os.mkdir(os.path.join(var_36, var_68.var_9))

        
        
        yield StartDownloadMessage(var_68)
        yield ProgressMessage5
        try:
            var_76 = urlopen(var_68.var_7)
            with open(var_75, wb) as outfile:
                
                var_77 = max(1, var_68.size / 16384)
                for block in itertools.count():
                    var_78 = var_76.read16384  
                    outfile.write(var_78)
                    if not var_78:
                        break
                    if block % 2 == 0:  
                        yield ProgressMessage(min(80, 5 + 75 * (block / var_77)))
            var_76.close()
        except IOError as e:
            yield ErrorMessage(
                var_68,
                Error downloading %r from <%var_78>:
  %var_78 % (var_68.var_6, var_68.var_7, e),
            )
            return
        yield FinishDownloadMessage(var_68)
        yield ProgressMessage80

        
        if var_68.filename.endswith.zip:
            var_79 = os.path.join(var_36, var_68.var_9)
            
            
            if var_68.unzip or os.path.exists(os.path.join(var_79, var_68.var_6)):
                yield StartUnzipMessage(var_68)
                for var_62 in _unzip_iter(var_75, var_79, verbose=False):
                    
                    var_62.var_33 = var_68
                    yield var_62
                yield FinishUnzipMessage(var_68)

        yield FinishPackageMessage(var_68)

    def download(
        var_4,
        var_66=None,
        var_36=None,
        quiet=False,
        var_71=False,
        var_58=[nltk_data] ,
        halt_on_error=True,
        raise_on_error=False,
        print_error_to=sys.stderr,
    ):

        var_80 = functools.var_46(var_98, file=print_error_to)
        
        if var_66 is None:
            
            
            
            if var_36 is not None:
                var_4._download_dir = var_36
            var_4._interactive_download()
            return True

        else:
            
            def function_15(var_78, var_81=):
                var_80(
                    textwrap.fill(
                        var_78,
                        initial_indent=var_58 + var_81,
                        subsequent_indent=var_58 + var_81 +     ,
                    )
                )

            for var_62 in var_4.incr_download(var_66, var_36, var_71):
                
                if isinstance(var_62, ErrorMessage):
                    show(var_62.var_34)
                    if raise_on_error:
                        raise var_2(var_62.var_34)
                    if halt_on_error:
                        return False
                    var_4._errors = True
                    if not quiet:
                        print_toError installing var_33. Retry? [n/y/e]
                        var_82 = input().strip()
                        if var_82 in ['y', 'Y']:
                            if not var_4.download(
                                var_62.var_33.var_6,
                                var_36,
                                quiet,
                                var_71,
                                var_58,
                                halt_on_error,
                                raise_on_error,
                            ):
                                return False
                        elif var_82 in ['e', 'E']:
                            return False

                
                if not quiet:
                    
                    if isinstance(var_62, StartCollectionMessage):
                        show(Downloading var_32 %r % var_62.var_32.var_6)
                        var_58 +=    | 
                        var_80(var_58)
                    elif isinstance(var_62, FinishCollectionMessage):
                        var_80(var_58)
                        var_58 = var_58[:-4]
                        if var_4._errors:
                            show(
                                Downloaded var_32 %r with errors
                                % var_62.var_32.var_6
                            )
                        else:
                            show(Done downloading var_32 %var_78 % var_62.var_32.var_6)

                    
                    elif isinstance(var_62, StartPackageMessage):
                        show(
                            Downloading var_33 %var_78 to %var_78...
                            % (var_62.var_33.var_6, var_36)
                        )
                    elif isinstance(var_62, UpToDateMessage):
                        show(Package %var_78 is already up-to-var_44! % var_62.var_33.var_6,   )
                    
                    
                    
                    elif isinstance(var_62, StartUnzipMessage):
                        show(Unzipping %var_78. % var_62.var_33.filename,   )

                    
                    elif isinstance(var_62, SelectDownloadDirMessage):
                        var_36 = var_62.var_36
        return True

    def is_stale(var_4, var_66, var_36=None):
        return var_4.var_57(var_66, var_36) == var_4.var_43

    def is_installed(var_4, var_66, var_36=None):
        return var_4.var_57(var_66, var_36) == var_4.var_40

    def clear_status_cache(var_4, var_6=None):
        if var_6 is None:
            var_4._status_cache.clear()
        else:
            var_4._status_cache.pop(var_6, None)

    def var_57(var_4, var_66, var_36=None):
        
        if var_36 is None:
            var_36 = var_4._download_dir
        var_68 = var_4._info_or_id(var_66)

        
        if isinstance(var_68, Collection):
            var_83 = [var_4.var_57(var_64.var_6) for var_64 in var_68.var_63]
            if var_4.var_43 in var_83:
                return var_4.var_43
            elif var_4.var_45 in var_83:
                return var_4.var_45
            elif var_4.var_40 in var_83 and var_4.var_42 in var_83:
                return var_4.var_45
            elif var_4.var_42 in var_83:
                return var_4.var_42
            else:
                return var_4.var_40

        
        else:
            var_75 = os.path.join(var_36, var_68.filename)
            if var_36 != var_4._download_dir:
                return var_4._pkg_status(var_68, var_75)
            else:
                if var_68.var_6 not in var_4._status_cache:
                    var_4._status_cache[var_68.var_6] = var_4._pkg_status(var_68, var_75)
                return var_4._status_cache[var_68.var_6]

    def _pkg_status(var_4, var_68, var_75):
        if not os.path.exists(var_75):
            return var_4.var_42

        
        try:
            var_84 = os.stat(var_75)
        except OSError:
            return var_4.var_42
        if var_84.st_size != int(var_68.size):
            return var_4.var_43

        
        if md5_hexdigest(var_75) != var_68.var_22:
            return var_4.var_43

        
        
        if var_75.endswith.zip:
            var_85 = var_75[:-4]
            if not os.path.exists(var_85):
                return var_4.var_40  
            if not os.path.isdir(var_85):
                return var_4.var_43

            var_86 = sum(
                os.stat(os.path.join(var_87, f)).st_size
                for var_87, var_88, var_89 in os.walk(var_85)
                for f in var_89
            )
            if var_86 != var_68.var_86:
                return var_4.var_43

        
        return var_4.var_40

    def update(var_4, quiet=False, var_58=[nltk_data] ):
        
        var_4.clear_status_cache()
        for var_64 in var_4.var_63():
            if var_4.var_57(var_64) == var_4.var_43:
                var_4.download(var_64, quiet=quiet, var_58=var_58)

    
    
    

    def function_16(var_4, var_7=None):
        
        
        if not (
            var_4._index is None
            or var_7 is not None
            or time.time() - var_4._index_timestamp > var_4.var_37
        ):
            return

        
        var_4._url = var_7 or var_4._url

        
        var_4._index = nltk.internals.ElementWrapper(
            var_29.etree.ElementTree.parse(urlopen(var_4._url)).getroot()
        )
        var_4._index_timestamp = time.time()

        
        var_63 = [Package.fromxml(p) for p in var_4._index.findallpackages/var_33]
        var_4._packages = dict((p.var_6, p) for p in var_63)

        
        var_65 = [
            Collection.fromxml(c) for c in var_4._index.findallcollections/var_32
        ]
        var_4._collections = dict((c.var_6, c) for c in var_65)

        
        for var_32 in var_4._collections.values():
            for var_73, var_91 in enumerate(var_32.var_31):
                if var_91 in var_4._packages:
                    var_32.var_31[var_73] = var_4._packages[var_91]
                elif var_91 in var_4._collections:
                    var_32.var_31[var_73] = var_4._collections[var_91]
                else:
                    print(
                        <built-in method format of str object at 0x7f0735cff2d0>(
                            var_91
                        )
                    )
                    del var_32.var_31[var_73]

        
        for var_32 in var_4._collections.values():
            var_63 = {}
            var_92 = [var_32]
            for var_93 in var_92:
                if isinstance(var_93, Collection):
                    var_92.extend(var_93.var_31)
                elif isinstance(var_93, Package):
                    var_63[var_93.var_6] = var_93
                else:
                    pass
            var_32.var_63 = var_63.values()

        
        var_4._status_cache.clear()

    def function_17(var_4):
        
        var_4._update_index()
        return var_4._index

    def function_11(var_4, var_6):
        
        var_4._update_index()
        if var_6 in var_4._packages:
            return var_4._packages[var_6]
        if var_6 in var_4._collections:
            return var_4._collections[var_6]
        raise var_2(Package %r not found in index % var_6)

    def function_18(var_4, var_6):
        
        var_4._update_index()
        for var_33 in var_4._index.findallpackages/var_33:
            if var_33.getid == var_6:
                return var_33
        for var_32 in var_4._index.findallcollections/var_32:
            if var_32.getid == var_6:
                return var_32
        raise var_2(Package %r not found in index % var_6)

    
    
    

    def function_19(var_4):
        
        return var_4._url

    def function_20(var_4, var_7):
        
        var_94 = var_4._url
        try:
            var_4._update_index(var_7)
        except:
            var_4._url = var_94
            raise

    var_7 = property(_get_url, _set_url)

    def function_21(var_4):
        
        
        if APPENGINE_RUNTIME in os.environ:
            return

        
        
        for nltkdir in nltk.data.path:
            if os.path.exists(nltkdir) and nltk.internals.is_writable(nltkdir):
                return nltkdir

        
        if sys.platform == win32 and APPDATA in os.environ:
            var_95 = os.environ[APPDATA]

        
        else:
            var_95 = os.path.expanduser~/
            if var_95 == ~/:
                raise var_2()

        
        return os.path.join(var_95, nltk_data)

    def _get_download_dir(var_4):
        
        return var_4._download_dir

    def _set_download_dir(var_4, var_36):
        var_4._download_dir = var_36
        
        var_4._status_cache.clear()

    var_36 = property(_get_download_dir, _set_download_dir)

    
    
    

    def function_22(var_4):
        
        
        if var_0:
            try:
                DownloaderGUI(var_4).mainloop()
            except var_1:
                DownloaderShell(var_4).run()
        else:
            DownloaderShell(var_4).run()


class DownloaderShell(object):
    def function_0(var_4, var_96):
        var_4._ds = var_96

    def function_23(var_4, *options):
        var_98---------------------------------------------------------------------------
        spc = (68 - sum(len(o) for o in options)) // (len(options) - 1) *  
        var_98(     + spc.join(options))
        
        
        
        var_98---------------------------------------------------------------------------

    def run(var_4):
        var_98()
        while True:
            var_4._simple_interactive_menu('d) Download', 'l) List', ' u) Update', 'c) Config', 'h) Help', 'q) Quit')
            var_60 = inputDownloader> .strip()
            if not var_60:
                var_98()
                continue
            var_99 = var_60.lower().split()[0]
            var_100 = var_60.split()[1:]
            try:
                if var_99 == l:
                    var_98()
                    var_4._ds.list(var_4._ds.var_36, header=False, more_prompt=True)
                elif var_99 == h:
                    var_4._simple_interactive_help()
                elif var_99 == c:
                    var_4._simple_interactive_config()
                elif var_99 in ('q', 'x'):
                    return
                elif var_99 == var_87:
                    var_4._simple_interactive_download(var_100)
                elif var_99 == u:
                    var_4._simple_interactive_update()
                else:
                    var_98(Command %r unrecognized % var_60)
            except HTTPError as e:
                print(Error reading from server: %var_78 % e)
            except URLError as e:
                print(Error connecting to server: %var_78 % e.reason)
            
            
            var_98()

    def function_24(var_4, var_100):
        if var_100:
            for arg in var_100:
                try:
                    var_4._ds.download(arg, var_58=    )
                except (IOError, var_2) as e:
                    var_98(e)
        else:
            while True:
                var_98()
                var_98()
                var_60 = input  Identifier> 
                if var_60.lower() == l:
                    var_4._ds.list(
                        var_4._ds.var_36,
                        header=False,
                        more_prompt=True,
                        skip_installed=True,
                    )
                    continue
                elif var_60.lower() in ('x', 'q', ''):
                    return
                elif var_60:
                    for var_6 in var_60.split():
                        try:
                            var_4._ds.download(var_6, var_58=    )
                        except (IOError, var_2) as e:
                            var_98(e)
                    break

    def _simple_interactive_update(var_4):
        while True:
            var_101 = []
            var_55 = var_46 = False
            for var_68 in sorted(getattr(var_4._ds, var_63)(), key=str):
                if var_4._ds.var_57(var_68) == var_4._ds.var_43:
                    var_101.append((var_68.var_6, var_68.var_59))

            var_98()
            if var_101:
                var_98()
                for var_102, var_103 in var_101:
                    var_59 = textwrap.fill(
                        --------------------------- + (var_103), 75, subsequent_indent=                           
                    )[27:]
                    var_98(), var_59))
                var_98()

                var_60 = input  Identifier> 
                if var_60.lower() == o:
                    for var_102, var_103 in var_101:
                        try:
                            var_4._ds.download(var_102, var_58=    )
                        except (IOError, var_2) as e:
                            var_98(e)
                    break
                elif var_60.lower() in ('x', 'q', ''):
                    return
            else:
                var_98()
                return

    def _simple_interactive_help(var_4):
        var_98()
        var_98()
        var_98()
        var_98()
        var_98()

    def _show_config(var_4):
        var_98()
        var_98()
        var_98(  - URL: <%var_78> % var_4._ds.var_7)
        var_98((  - %var_87 Package Collections Available % len(var_4._ds.var_65())))
        var_98((  - %var_87 Individual Packages Available % len(var_4._ds.var_63())))
        var_98()
        var_98()
        var_98(  - Data directory: %var_78 % var_4._ds.var_36)

    def _simple_interactive_config(var_4):
        var_4._show_config()
        while True:
            var_98()
            var_4._simple_interactive_menu('s) Show Config', 'u) Set Server URL', 'd) Set Data Dir', 'm) Main Menu')
            var_60 = inputConfig> .strip().lower()
            if var_60 == var_78:
                var_4._show_config()
            elif var_60 == var_87:
                var_104 = input  New Directory> .strip()
                if var_104 in ('', 'x', 'q', 'X', 'Q'):
                    var_98()
                elif os.path.isdir(var_104):
                    var_4._ds.var_36 = var_104
                else:
                    var_98((Directory %r not found!  Create it first. % var_104))
            elif var_60 == u:
                var_105 = input  New URL> .strip()
                if var_105 in ('', 'x', 'q', 'X', 'Q'):
                    var_98()
                else:
                    if not var_105.startswith('http://', 'https://'):
                        var_105 = var_106:// + var_105
                    try:
                        var_4._ds.var_7 = var_105
                    except Exception as e:
                        print(Error reading <%r>:
  %var_78 % (var_105, e))
            elif var_60 == m:
                break


class DownloaderGUI(object):
    

    
    
    

    var_107 = ['', 'Identifier', 'Name', 'Size', 'Status', 'Unzipped Size', 'Copyright', 'Contact', 'License', 'Author', 'Subdir', 'Checksum']
    

    var_108 = {'': 0, 'Name': 5, 'Size': 0, 'Status': 0}
    

    var_109 = {'': 1, 'Identifier': 20, 'Name': 45, 'Size': 10, 'Unzipped Size': 10, 'Status': 12}
    

    var_110 = 30
    

    var_111 = ['', 'Identifier', 'Name', 'Size', 'Status']
    

    
    
    for c in var_108:
        assert c in var_107
    for c in var_109:
        assert c in var_107
    for c in var_111:
        assert c in var_107

    
    
    

    _BACKDROP_COLOR = ('

    _ROW_COLOR = {
        Downloader.var_40: ('
        Downloader.PARTIAL: ('
        Downloader.STALE: ('
        Downloader.NOT_INSTALLED: ('
    }

    _MARK_COLOR = ('

    
    
    _FRONT_TAB_COLOR = ('
    _BACK_TAB_COLOR = ('

    _PROGRESS_COLOR = ('

    _TAB_FONT = helvetica -16 bold

    
    
    

    def __init__(var_4, var_96, use_threads=True):
        var_4._ds = var_96
        var_4._use_threads = use_threads

        
        var_4._download_lock = threading.Lock()
        var_4._download_msg_queue = []
        var_4._download_abort_queue = []
        var_4._downloading = False

        
        var_4._afterid = {}

        
        var_4._log_messages = []
        var_4._log_indent = 0
        var_4._logNLTK Downloader Started!

        
        top = var_4.top = Tk()
        top.geometry+50+50
        top.titleNLTK Downloader
        top.configure(background=var_4._BACKDROP_COLOR[1])

        
        top.bind(<Control-q>, var_4.destroy)
        top.bind(<Control-x>, var_4.destroy)
        var_4._destroyed = False

        var_4._column_vars = {}

        
        var_4._init_widgets()
        var_4._init_menu()
        try:
            var_4._fill_table()
        except HTTPError as e:
            showerror(Error reading from server, e)
        except URLError as e:
            showerror(Error connecting to server, e.reason)

        var_4._show_info()
        var_4._select_columns()
        var_4._table.select0

        
        
        var_4._table.bind(<Destroy>, var_4._destroy)

    def _log(var_4, var_62):
        var_4._log_messages.append(
            %var_78 %var_78%var_78 % (time.ctime(),  |  * var_4._log_indent, var_62)
        )

    
    
    

    def _init_widgets(var_4):
        
        f1 = Frame(var_4.top, relief=raised, border=2, padx=8, pady=0)
        f1.pack(sid=top, expand=True, fill=both)
        f1.grid_rowconfigure(2, weight=1)
        f1.grid_columnconfigure(0, weight=1)
        Frame(f1, height=8).grid(var_113=0, row=0)  
        tabframe = Frame(f1)
        tabframe.grid(var_113=0, row=1, sticky=news)
        tableframe = Frame(f1)
        tableframe.grid(var_113=0, row=2, sticky=news)
        buttonframe = Frame(f1)
        buttonframe.grid(var_113=0, row=3, sticky=news)
        Frame(f1, height=8).grid(var_113=0, row=4)  
        infoframe = Frame(f1)
        infoframe.grid(var_113=0, row=5, sticky=news)
        Frame(f1, height=8).grid(var_113=0, row=6)  
        progressframe = Frame(
            var_4.top, padx=3, pady=3, background=var_4._BACKDROP_COLOR[1]
        )
        progressframe.pack(side=bottom, fill=x)
        var_4.top[border] = 0
        var_4.top[highlightthickness] = 0

        
        var_4._tab_names = ['Collections', 'Corpora', 'Models', 'All Packages']
        var_4._tabs = {}
        for var_73, var_112 in enumerate(var_4._tab_names):
            label = Label(tabframe, text=var_112, font=var_4._TAB_FONT)
            label.pack(side=left, padx=((var_73 + 1) % 2) * 10)
            label.bind(<Button-1>, var_4._select_tab)
            var_4._tabs[var_112.lower()] = label

        
        column_weights = [var_4.var_108.get(var_113, 1) for var_113 in var_4.var_107]
        var_4._table = Table(
            tableframe,
            var_4.var_107,
            column_weights=column_weights,
            highlightthickness=0,
            listbox_height=16,
            reprfunc=var_4._table_reprfunc,
        )
        var_4._table.columnconfig(0, foreground=var_4._MARK_COLOR[0])  
        for var_73, var_113 in enumerate(var_4.var_107):
            width = var_4.var_109.get(var_113, var_4.var_110)
            var_4._table.columnconfig(var_73, width=width)
        var_4._table.pack(expand=True, fill=both)
        var_4._table.focus()
        var_4._table.bind_to_listboxes(<Double-Button-1>, var_4._download)
        var_4._table.bind(<space>, var_4._table_mark)
        var_4._table.bind(<Return>, var_4._download)
        var_4._table.bind(<Left>, var_4._prev_tab)
        var_4._table.bind(<Right>, var_4._next_tab)
        var_4._table.bind(<Control-a>, var_4._mark_all)

        
        infoframe.grid_columnconfigure(1, weight=1)

        var_68 = [
            (var_7, Server Index:, var_4._set_url),
            (var_36, Download Directory:, var_4._set_download_dir),
        ]
        var_4._info = {}
        for (var_73, (key, label, var_115)) in enumerate(var_68):
            Label(infoframe, text=label).grid(var_113=0, row=var_73, sticky=e)
            var_114 = Entry(
                infoframe, font=courier, relief=groove, disabledforeground=black
            )
            var_4._info[key] = (var_114, var_115)
            var_114.bind(<Return>, var_4._info_save)
            var_114.bind(<Button-1>, lambda e, key=key: var_4._info_edit(key))
            var_114.grid(var_113=1, row=var_73, sticky=ew)

        
        
        var_4.top.bind(<Button-1>, var_4._info_save)

        
        var_4._download_button = Button(
            buttonframe, text=Download, var_99=var_4._download, width=8
        )
        var_4._download_button.pack(side=left)
        var_4._refresh_button = Button(
            buttonframe, text=Refresh, var_99=var_4._refresh, width=8
        )
        var_4._refresh_button.pack(side=right)

        
        var_4._progresslabel = Label(
            progressframe,
            text=,
            foreground=var_4._BACKDROP_COLOR[0],
            background=var_4._BACKDROP_COLOR[1],
        )
        var_4._progressbar = Canvas(
            progressframe,
            width=200,
            height=16,
            background=var_4._PROGRESS_COLOR[1],
            relief=sunken,
            border=1,
        )
        var_4._init_progressbar()
        var_4._progressbar.pack(side=right)
        var_4._progresslabel.pack(side=left)

    def _init_menu(var_4):
        menubar = Menu(var_4.top)

        filemenu = Menu(menubar, tearoff=0)
        filemenu.add_command(
            label=Download, underline=0, var_99=var_4._download, accelerator=Return
        )
        filemenu.add_separator()
        filemenu.add_command(
            label=Change Server Index,
            underline=7,
            var_99=<function <lambda> at 0x7f073b55f560>,
        )
        filemenu.add_command(
            label=Change Download Directory,
            underline=0,
            var_99=<function <lambda> at 0x7f073b55e520>,
        )
        filemenu.add_separator()
        filemenu.add_command(label=Show Log, underline=5, var_99=var_4._show_log)
        filemenu.add_separator()
        filemenu.add_command(
            label=Exit, underline=1, var_99=var_4.destroy, accelerator=Ctrl-x
        )
        menubar.add_cascade(label=File, underline=0, menu=filemenu)

        
        
        
        viewmenu = Menu(menubar, tearoff=0)
        for var_113 in var_4._table.column_names[2:]:
            var = IntVar(var_4.top)
            assert var_113 not in var_4._column_vars
            var_4._column_vars[var_113] = var
            if var_113 in var_4.var_111:
                var.set1
            viewmenu.add_checkbutton(
                label=var_113, underline=0, variable=var, var_99=var_4._select_columns
            )
        menubar.add_cascade(label=View, underline=0, menu=viewmenu)

        
        
        
        sortmenu = Menu(menubar, tearoff=0)
        for var_113 in var_4._table.column_names[1:]:
            sortmenu.add_command(
                label=Sort by %var_78 % var_113,
                var_99=(lambda c=var_113: var_4._table.sort_by(c, ascending)),
            )
        sortmenu.add_separator()
        
        for var_113 in var_4._table.column_names[1:]:
            sortmenu.add_command(
                label=Reverse sort by %var_78 % var_113,
                var_99=(lambda c=var_113: var_4._table.sort_by(c, descending)),
            )
        menubar.add_cascade(label=Sort, underline=0, menu=sortmenu)

        helpmenu = Menu(menubar, tearoff=0)
        helpmenu.add_command(label=About, underline=0, var_99=var_4.about)
        helpmenu.add_command(
            label=Instructions, underline=0, var_99=var_4.help, accelerator=F1
        )
        menubar.add_cascade(label=Help, underline=0, menu=helpmenu)
        var_4.top.bind(<F1>, var_4.help)

        var_4.top.config(menu=menubar)

    def _select_columns(var_4):
        for (var_113, var) in var_4._column_vars.var_70():
            if var.get():
                var_4._table.show_column(var_113)
            else:
                var_4._table.hide_column(var_113)

    def _refresh(var_4):
        var_4._ds.clear_status_cache()
        try:
            var_4._fill_table()
        except HTTPError as e:
            showerror(Error reading from server, e)
        except URLError as e:
            showerror(Error connecting to server, e.reason)
        var_4._table.select0

    def _info_edit(var_4, info_key):
        var_4._info_save()  
        (var_114, var_115) = var_4._info[info_key]
        var_114[state] = normal
        var_114[relief] = sunken
        var_114.focus()

    def _info_save(var_4, e=None):
        focus = var_4._table
        for var_114, var_115 in var_4._info.values():
            if var_114[state] == disabled:
                continue
            if e is not None and e.widget is var_114 and e.keysym != Return:
                focus = var_114
            else:
                var_114[state] = disabled
                var_114[relief] = groove
                var_115(var_114.get())
        focus.focus()

    def _table_reprfunc(var_4, row, col, val):
        if var_4._table.column_names[col].endswithSize:
            if isinstance(val, string_types):
                return   %var_78 % val
            elif val < 1048576:
                return   %.1f KB % (val / 1024.0)
            elif val < 1073741824:
                return   %.1f MB % (val / 1048576.0)
            else:
                return   %.1f GB % (val / 1073741824.0)

        if col in (0, ''):
            return str(val)
        else:
            return   %var_78 % val

    def _set_url(var_4, var_7):
        if var_7 == var_4._ds.var_7:
            return
        try:
            var_4._ds.var_7 = var_7
            var_4._fill_table()
        except IOError as e:
            showerror(Error Setting Server Index, str(e))
        var_4._show_info()

    def _set_download_dir(var_4, var_36):
        if var_4._ds.var_36 == var_36:
            return
        

        
        var_4._ds.var_36 = var_36
        try:
            var_4._fill_table()
        except HTTPError as e:
            showerror(Error reading from server, e)
        except URLError as e:
            showerror(Error connecting to server, e.reason)
        var_4._show_info()

    def _show_info(var_4):
        var_98(showing var_68, var_4._ds.var_7)
        for var_114, var_116 in var_4._info.values():
            var_114[state] = normal
            var_114.delete(0, 'end')
        var_4._info[var_7][0].insert(0, var_4._ds.var_7)
        var_4._info[var_36][0].insert(0, var_4._ds.var_36)
        for var_114, var_116 in var_4._info.values():
            var_114[state] = disabled

    def _prev_tab(var_4, *e):
        for var_73, var_112 in enumerate(var_4._tab_names):
            if var_112.lower() == var_4._tab and var_73 > 0:
                var_4._tab = var_4._tab_names[var_73 - 1].lower()
                try:
                    return var_4._fill_table()
                except HTTPError as e:
                    showerror(Error reading from server, e)
                except URLError as e:
                    showerror(Error connecting to server, e.reason)

    def _next_tab(var_4, *e):
        for var_73, var_112 in enumerate(var_4._tab_names):
            if var_112.lower() == var_4._tab and var_73 < (len(var_4._tabs) - 1):
                var_4._tab = var_4._tab_names[var_73 + 1].lower()
                try:
                    return var_4._fill_table()
                except HTTPError as e:
                    showerror(Error reading from server, e)
                except URLError as e:
                    showerror(Error connecting to server, e.reason)

    def _select_tab(var_4, event):
        var_4._tab = event.widget[text].lower()
        try:
            var_4._fill_table()
        except HTTPError as e:
            showerror(Error reading from server, e)
        except URLError as e:
            showerror(Error connecting to server, e.reason)

    _tab = var_65
    
    _rows = None

    def _fill_table(var_4):
        selected_row = var_4._table.selected_row()
        var_4._table.clear()
        if var_4._tab == all var_63:
            var_70 = var_4._ds.var_63()
        elif var_4._tab == corpora:
            var_70 = var_4._ds.corpora()
        elif var_4._tab == models:
            var_70 = var_4._ds.models()
        elif var_4._tab == var_65:
            var_70 = var_4._ds.var_65()
        else:
            assert 0, bad var_112 value %r % var_4._tab
        rows = [var_4._package_to_columns(var_69) for var_69 in var_70]
        var_4._table.extend(rows)

        
        for var_112, label in var_4._tabs.var_70():
            if var_112 == var_4._tab:
                label.configure(
                    foreground=var_4._FRONT_TAB_COLOR[0],
                    background=var_4._FRONT_TAB_COLOR[1],
                )
            else:
                label.configure(
                    foreground=var_4._BACK_TAB_COLOR[0],
                    background=var_4._BACK_TAB_COLOR[1],
                )

        var_4._table.sort_by(Identifier, order=ascending)
        var_4._color_table()
        var_4._table.select(selected_row)

        
        
        
        
        
        var_4.top.after(150, var_4._table._scrollbar.set, *var_4._table._mlb.yview())
        var_4.top.after(300, var_4._table._scrollbar.set, *var_4._table._mlb.yview())

    def _update_table_status(var_4):
        for row_num in range(len(var_4._table)):
            var_57 = var_4._ds.var_57(var_4._table[row_num, Identifier])
            var_4._table[row_num, Status] = var_57
        var_4._color_table()

    def _download(var_4, *e):
        
        
        if var_4._use_threads:
            return var_4._download_threaded(*e)

        marked = [
            var_4._table[row, Identifier]
            for row in range(len(var_4._table))
            if var_4._table[row, 0] != 
        ]
        selection = var_4._table.selected_row()
        if not marked and selection is not None:
            marked = [var_4._table[selection, Identifier]]

        download_iter = var_4._ds.incr_download(marked, var_4._ds.var_36)
        var_4._log_indent = 0
        var_4._download_cb(download_iter, marked)

    _DL_DELAY = 10

    def _download_cb(var_4, download_iter, ids):
        try:
            var_62 = next(download_iter)
        except StopIteration:
            
            var_4._update_table_status()
            afterid = var_4.top.after(10, var_4._show_progress, 0)
            var_4._afterid[_download_cb] = afterid
            return

        def show(var_78):
            var_4._progresslabel[text] = var_78
            var_4._log(var_78)

        if isinstance(var_62, ProgressMessage):
            var_4._show_progress(var_62.var_35)
        elif isinstance(var_62, ErrorMessage):
            show(var_62.var_34)
            if var_62.var_33 is not None:
                var_4._select(var_62.var_33.var_6)
            var_4._show_progress(None)
            return  
        elif isinstance(var_62, StartCollectionMessage):
            show(Downloading var_32 %var_78 % var_62.var_32.var_6)
            var_4._log_indent += 1
        elif isinstance(var_62, StartPackageMessage):
            show(Downloading var_33 %var_78 % var_62.var_33.var_6)
        elif isinstance(var_62, UpToDateMessage):
            show(Package %var_78 is up-to-var_44! % var_62.var_33.var_6)
        
        
        elif isinstance(var_62, FinishDownloadMessage):
            show(Finished downloading %r. % var_62.var_33.var_6)
        elif isinstance(var_62, StartUnzipMessage):
            show(Unzipping %var_78 % var_62.var_33.filename)
        elif isinstance(var_62, FinishCollectionMessage):
            var_4._log_indent -= 1
            show(Finished downloading var_32 %r. % var_62.var_32.var_6)
            var_4._clear_mark(var_62.var_32.var_6)
        elif isinstance(var_62, FinishPackageMessage):
            var_4._clear_mark(var_62.var_33.var_6)
        afterid = var_4.top.after(var_4._DL_DELAY, var_4._download_cb, download_iter, ids)
        var_4._afterid[_download_cb] = afterid

    def _select(var_4, var_6):
        for row in range(len(var_4._table)):
            if var_4._table[row, Identifier] == var_6:
                var_4._table.select(row)
                return

    def _color_table(var_4):
        
        for row in range(len(var_4._table)):
            bg, sbg = var_4._ROW_COLOR[var_4._table[row, Status]]
            fg, sfg = ('black', 'white')
            var_4._table.rowconfig(
                row,
                foreground=fg,
                selectforeground=sfg,
                background=bg,
                selectbackground=sbg,
            )
            
            var_4._table.itemconfigure(
                row, 0, foreground=var_4._MARK_COLOR[0], background=var_4._MARK_COLOR[1]
            )

    def _clear_mark(var_4, var_6):
        for row in range(len(var_4._table)):
            if var_4._table[row, Identifier] == var_6:
                var_4._table[row, 0] = 

    def _mark_all(var_4, *e):
        for row in range(len(var_4._table)):
            var_4._table[row, 0] = X

    def _table_mark(var_4, *e):
        selection = var_4._table.selected_row()
        if selection >= 0:
            if var_4._table[selection][0] != :
                var_4._table[selection, 0] = 
            else:
                var_4._table[selection, 0] = X
        var_4._table.select(var_74=1)

    def _show_log(var_4):
        text = <built-in method join of str object at 0x7f073c337138>(var_4._log_messages)
        ShowText(var_4.top, NLTK Downloader Log, text)

    def _package_to_columns(var_4, var_64):
        
        row = []
        for var_117, var_118 in enumerate(var_4.var_107):
            if var_117 == 0:  
                row.append
            elif var_118 == Identifier:
                row.append(var_64.var_6)
            elif var_118 == Status:
                row.append(var_4._ds.var_57(var_64))
            else:
                attr = var_118.lower().replace(' ', '_')
                row.append(getattr(var_64, attr, n/a))
        return row

    
    
    

    def destroy(var_4, *e):
        if var_4._destroyed:
            return
        var_4.top.destroy()
        var_4._destroyed = True

    def _destroy(var_4, *e):
        if var_4.top is not None:
            for afterid in var_4._afterid.values():
                var_4.top.after_cancel(afterid)

        
        if var_4._downloading and var_4._use_threads:
            var_4._abort_download()

        
        
        
        var_4._column_vars.clear()

    def mainloop(var_4, *var_100, **kwargs):
        var_4.top.mainloop(*var_100, **kwargs)

    
    
    

    HELP = textwrap.dedent()

    def help(var_4, *e):
        
        try:
            ShowText(
                var_4.top,
                Help: NLTK Dowloader,
                var_4.HELP.strip(),
                width=75,
                font=fixed,
            )
        except:
            ShowText(var_4.top, Help: NLTK Downloader, var_4.HELP.strip(), width=75)

    def about(var_4, *e):
        ABOUT = NLTK Downloader
Written by Edward Loper
        TITLE = About: NLTK Downloader
        try:
            from six.moves.tkinter_messagebox import Message

            Message(var_34=ABOUT, title=TITLE).show()
        except ImportError:
            ShowText(var_4.top, TITLE, ABOUT)

    
    
    

    _gradient_width = 5

    def _init_progressbar(var_4):
        c = var_4._progressbar
        width, height = int(c[width]), int(c[height])
        for var_73 in range(0, (int(c[width]) * 2) // var_4._gradient_width):
            c.create_line(
                var_73 * var_4._gradient_width + 20,
                -20,
                var_73 * var_4._gradient_width - height - 20,
                height + 20,
                width=var_4._gradient_width,
                fill='
            )
        c.addtag_allgradient
        c.itemconfig(gradient, state=hidden)

        
        c.addtag_withtag(
            redbox, c.create_rectangle(0, 0, 0, 0, fill=var_4._PROGRESS_COLOR[0])
        )

    def _show_progress(var_4, percent):
        c = var_4._progressbar
        if percent is None:
            c.coords('redbox', 0, 0, 0, 0)
            c.itemconfig(gradient, state=hidden)
        else:
            width, height = int(c[width]), int(c[height])
            x = percent * int(width) // 100 + 1
            c.coords(redbox, 0, 0, x, height + 1)

    def _progress_alive(var_4):
        c = var_4._progressbar
        if not var_4._downloading:
            c.itemconfig(gradient, state=hidden)
        else:
            c.itemconfig(gradient, state=normal)
            x1, y1, x2, y2 = c.bboxgradient
            if x1 <= -100:
                c.move(gradient, (var_4._gradient_width * 6) - 4, 0)
            else:
                c.move('gradient', -4, 0)
            afterid = var_4.top.after(200, var_4._progress_alive)
            var_4._afterid[_progress_alive] = afterid

    
    
    

    def _download_threaded(var_4, *e):
        
        
        if var_4._downloading:
            var_4._abort_download()
            return

        
        var_4._download_button[text] = Cancel

        marked = [
            var_4._table[row, Identifier]
            for row in range(len(var_4._table))
            if var_4._table[row, 0] != 
        ]
        selection = var_4._table.selected_row()
        if not marked and selection is not None:
            marked = [var_4._table[selection, Identifier]]

        
        
        
        ds = Downloader(var_4._ds.var_7, var_4._ds.var_36)

        
        assert var_4._download_msg_queue == []
        assert var_4._download_abort_queue == []
        var_4._DownloadThread(
            ds,
            marked,
            var_4._download_lock,
            var_4._download_msg_queue,
            var_4._download_abort_queue,
        ).start()

        
        var_4._log_indent = 0
        var_4._downloading = True
        var_4._monitor_message_queue()

        
        
        var_4._progress_alive()

    def _abort_download(var_4):
        if var_4._downloading:
            var_4._download_lock.acquire()
            var_4._download_abort_queue.appendabort
            var_4._download_lock.release()

    class _DownloadThread(threading.Thread):
        def __init__(var_4, data_server, var_70, lock, message_queue, abort):
            var_4.data_server = data_server
            var_4.var_70 = var_70
            var_4.lock = lock
            var_4.message_queue = message_queue
            var_4.abort = abort
            threading.Thread.__init__(var_4)

        def run(var_4):
            for var_62 in var_4.data_server.incr_download(var_4.var_70):
                var_4.lock.acquire()
                var_4.message_queue.append(var_62)
                
                if var_4.abort:
                    var_4.message_queue.appendaborted
                    var_4.lock.release()
                    return
                var_4.lock.release()
            var_4.lock.acquire()
            var_4.message_queue.appendfinished
            var_4.lock.release()

    _MONITOR_QUEUE_DELAY = 100

    def _monitor_message_queue(var_4):
        def show(var_78):
            var_4._progresslabel[text] = var_78
            var_4._log(var_78)

        
        if not var_4._download_lock.acquire():
            return
        for var_62 in var_4._download_msg_queue:

            
            if var_62 == finished or var_62 == aborted:
                
                var_4._update_table_status()
                var_4._downloading = False
                var_4._download_button[text] = Download
                del var_4._download_msg_queue[:]
                del var_4._download_abort_queue[:]
                var_4._download_lock.release()
                if var_62 == aborted:
                    showDownload aborted!
                    var_4._show_progress(None)
                else:
                    afterid = var_4.top.after(100, var_4._show_progress, None)
                    var_4._afterid[_monitor_message_queue] = afterid
                return

            
            elif isinstance(var_62, ProgressMessage):
                var_4._show_progress(var_62.var_35)
            elif isinstance(var_62, ErrorMessage):
                show(var_62.var_34)
                if var_62.var_33 is not None:
                    var_4._select(var_62.var_33.var_6)
                var_4._show_progress(None)
                var_4._downloading = False
                return  
            elif isinstance(var_62, StartCollectionMessage):
                show(Downloading var_32 %r % var_62.var_32.var_6)
                var_4._log_indent += 1
            elif isinstance(var_62, StartPackageMessage):
                var_4._ds.clear_status_cache(var_62.var_33.var_6)
                show(Downloading var_33 %r % var_62.var_33.var_6)
            elif isinstance(var_62, UpToDateMessage):
                show(Package %var_78 is up-to-var_44! % var_62.var_33.var_6)
            
            
            
            elif isinstance(var_62, FinishDownloadMessage):
                show(Finished downloading %r. % var_62.var_33.var_6)
            elif isinstance(var_62, StartUnzipMessage):
                show(Unzipping %var_78 % var_62.var_33.filename)
            elif isinstance(var_62, FinishUnzipMessage):
                show(Finished installing %var_78 % var_62.var_33.var_6)
            elif isinstance(var_62, FinishCollectionMessage):
                var_4._log_indent -= 1
                show(Finished downloading var_32 %r. % var_62.var_32.var_6)
                var_4._clear_mark(var_62.var_32.var_6)
            elif isinstance(var_62, FinishPackageMessage):
                var_4._update_table_status()
                var_4._clear_mark(var_62.var_33.var_6)

        
        
        
        if var_4._download_abort_queue:
            var_4._progresslabel[text] = Aborting download...

        
        del var_4._download_msg_queue[:]
        var_4._download_lock.release()

        
        afterid = var_4.top.after(var_4._MONITOR_QUEUE_DELAY, var_4._monitor_message_queue)
        var_4._afterid[_monitor_message_queue] = afterid








def md5_hexdigest(file):
    
    if isinstance(file, string_types):
        with open(file, rb) as var_76:
            return _md5_hexdigest(var_76)
    return _md5_hexdigest(file)


def _md5_hexdigest(fp):
    md5_digest = md5()
    while True:
        block = fp.read16384  
        if not block:
            break
        md5_digest.update(block)
    return md5_digest.hexdigest()





def unzip(filename, root, verbose=True):
    
    for var_34 in _unzip_iter(filename, root, verbose):
        if isinstance(var_34, ErrorMessage):
            raise Exception(var_34)


def _unzip_iter(filename, root, verbose=True):
    if verbose:
        sys.stdout.write(Unzipping %var_78 % os.path.split(filename)[1])
        sys.stdout.flush()

    try:
        zf = zipfile.ZipFile(filename)
    except zipfile.error as e:
        yield ErrorMessage(filename, Error with downloaded zip file)
        return
    except Exception as e:
        yield ErrorMessage(filename, e)
        return

    
    namelist = zf.namelist()
    dirlist = set()
    for x in namelist:
        if x.endswith/:
            dirlist.add(x)
        else:
            dirlist.add(x.rsplit('/', 1)[0] + /)
    filelist = [x for x in namelist if not x.endswith/]

    
    if not os.path.exists(root):
        os.mkdir(root)

    
    for dirname in sorted(dirlist):
        pieces = dirname[:-1].split/
        for var_73 in range(len(pieces)):
            dirpath = os.path.join(root, *pieces[: var_73 + 1])
            if not os.path.exists(dirpath):
                os.mkdir(dirpath)

    
    for var_73, filename in enumerate(filelist):
        var_75 = os.path.join(root, *filename.split/)

        try:
            with open(var_75, wb) as dstfile, zf.open(filename) as srcfile:
                shutil.copyfileobj(srcfile, dstfile)
        except Exception as e:
            yield ErrorMessage(filename, e)
            return

        if verbose and (var_73 * 10 / len(filelist) > (var_73 - 1) * 10 / len(filelist)):
            sys.stdout.write.
            sys.stdout.flush()
    if verbose:
        var_98()








def build_index(root, base_url):
    
    
    var_63 = []
    for pkg_xml, zf, var_9 in _find_packages(os.path.join(root, var_63)):
        zipstat = os.stat(zf.filename)
        var_7 = %var_78/%var_78/%var_78 % (base_url, var_9, os.path.split(zf.filename)[1])
        var_86 = sum(zf_info.file_size for zf_info in zf.infolist())

        
        pkg_xml.set(var_86, %var_78 % var_86)
        pkg_xml.set(size, %var_78 % zipstat.st_size)
        pkg_xml.set(var_22, %var_78 % md5_hexdigest(zf.filename))
        pkg_xml.set(var_9, var_9)
        
        if not pkg_xml.geturl:
            pkg_xml.set(var_7, var_7)

        
        var_63.append(pkg_xml)

    
    var_65 = list(_find_collections(os.path.join(root, var_65)))

    
    uids = set()
    for var_69 in var_63 + var_65:
        if var_69.getid in uids:
            raise var_2())
        uids.add(var_69.getid)

    
    top_elt = var_29.etree.ElementTree.Elementnltk_data
    top_elt.append(var_29.etree.ElementTree.Elementpackages)
    for var_33 in var_63:
        top_elt[0].append(var_33)
    top_elt.append(var_29.etree.ElementTree.Elementcollections)
    for var_32 in var_65:
        top_elt[1].append(var_32)

    _indent_xml(top_elt)
    return top_elt


def _indent_xml(var_29, var_58=):
    
    if len(var_29) > 0:
        var_29.text = (var_29.text or ).strip() + 
 + var_58 +   
        for var_93 in var_29:
            _indent_xml(var_93, var_58 +   )
        for var_93 in var_29[:-1]:
            var_93.tail = (var_93.tail or ).strip() + 
 + var_58 +   
        var_29[-1].tail = (var_29[-1].tail or ).strip() + 
 + var_58


def _check_package(pkg_xml, zipfilename, zf):
    
    
    uid = os.path.splitext(os.path.split(zipfilename)[1])[0]
    if pkg_xml.getid != uid:
        raise var_2(), uid)
        )

    
    if sum((var_59 != uid and not var_59.startswith(uid + /)) for var_59 in zf.namelist()):
        raise var_2(
            Zipfile %var_78.zip does not expand to a single 
            subdirectory %var_78/ % (uid, uid)
        )



def _svn_revision(filename):
    
    p = subprocess.Popen(
        [svn, var_57, -v, filename],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    (stdout, stderr) = p.communicate()
    if p.returncode != 0 or stderr or not stdout:
        raise var_2(
            Error determining var_23 for %var_78: %var_78
            % (os.path.split(filename)[1], textwrap.fill(stderr))
        )
    return stdout.split()[2]


def _find_collections(root):
    
    var_63 = []
    for dirname, subdirs, var_89 in os.walk(root):
        for filename in var_89:
            if filename.endswith.var_29:
                xmlfile = os.path.join(dirname, filename)
                yield var_29.etree.ElementTree.parse(xmlfile).getroot()


def _find_packages(root):
    
    from nltk.corpus.reader.util import _path_from

    
    var_63 = []
    for dirname, subdirs, var_89 in os.walk(root):
        relpath = <built-in method join of str object at 0x7f073c337950>(_path_from(root, dirname))
        for filename in var_89:
            if filename.endswith.var_29:
                xmlfilename = os.path.join(dirname, filename)
                zipfilename = xmlfilename[:-4] + .zip
                try:
                    zf = zipfile.ZipFile(zipfilename)
                except Exception as e:
                    raise var_2(Error reading file %r!
%var_78 % (zipfilename, e))
                try:
                    pkg_xml = var_29.etree.ElementTree.parse(xmlfilename).getroot()
                except Exception as e:
                    raise var_2(Error reading file %r!
%var_78 % (xmlfilename, e))

                
                uid = os.path.split(xmlfilename[:-4])[1]
                if pkg_xml.getid != uid:
                    raise var_2(
                        var_33 identifier mismatch (%var_78 
                        vs %var_78) % (pkg_xml.getid, uid)
                    )

                
                
                if sum(
                    (var_59 != uid and not var_59.startswith(uid + /))
                    for var_59 in zf.namelist()
                ):
                    raise var_2(
                        Zipfile %var_78.zip does not expand to a 
                        single subdirectory %var_78/ % (uid, uid)
                    )

                yield pkg_xml, zf, relpath
        
        try:
            subdirs.remove.svn
        except var_2:
            pass









_downloader = Downloader()
download = _downloader.download


def download_shell():
    DownloaderShell(_downloader).run()


def download_gui():
    DownloaderGUI(_downloader).mainloop()


def update():
    _downloader.update()


