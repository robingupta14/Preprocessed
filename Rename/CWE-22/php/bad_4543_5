<?php



class class_0 extends var_0 implements var_1
{
    protected $var_2;
    protected $var_3;
    protected $var_4;

    
    public function fn_0($var_5, $var_6, $var_4, $var_3)
    {
        $var_7 = interface_exists('Gaufrette\FilesystemInterface')
            ? 'Gaufrette\FilesystemInterface'
            : 'Gaufrette\Filesystem';

        if (!$var_5 instanceof $var_7) {
            throw new \var_8(sprintf('Expected an instance of "%s", got "%s".', $var_7, is_object($var_5) ? get_class($var_5) : gettype($var_5)));
        }

        if (!($var_5->getAdapter() instanceof var_10)) {
            throw new \var_8('The filesystem used as chunk storage must implement StreamFactory');
        }
        $var_11->var_5 = $var_5;
        $var_11->var_12 = $var_6;
        $var_11->var_3 = $var_3;
        $var_11->var_4 = $var_4;
    }

    
    public function fn_1($var_13, $var_3 = null)
    {
        $var_3 = $var_3 ?: $var_11->var_3;
        $var_14 = $var_11->var_5->listKeys($var_3);

        $var_16 = time();
        $var_17 = [];

        
        
        
        
        foreach ($var_14['dirs'] as $var_18) {
            if ($var_13 <= $var_16 - $var_11->var_5->mtime($var_18)) {
                $var_17[] = $var_18;
            }
        }
        
        array_unique($var_17);
        foreach ($var_14['keys'] as $var_18) {
            if ($var_13 <= $var_16 - $var_11->var_5->mtime($var_18)) {
                $var_11->var_5->delete($var_18);
            }
        }

        foreach ($var_17 as $var_18) {
            
            
            try {
                $var_11->var_5->delete($var_18);
            } catch (\var_21 $var_22) {
                continue;
            }
        }
    }

    
    public function fn_2($var_23, $var_24, var_25 $var_26, $var_27)
    {
        $var_11->var_2 = [
            'uuid' => $var_23,
            'index' => $var_24,
            'chunk' => $var_26,
            'original' => $var_27,
        ];
    }

    public function fn_3($var_28, $var_29, $var_30)
    {
        
        $var_31 = $var_11->var_3.'/'.$var_11->var_2['uuid'].'/';
        $var_32 = $var_11->var_2['index'].'_'.$var_11->var_2['original'];

        if (empty($var_28)) {
            $var_33 = $var_32;
            $var_11->ensureRemotePathExists($var_31.$var_33);
        } else {
            
            sort($var_28, var_35 | var_36);
            $var_33 = pathinfo($var_28[0], var_37);
        }

        $var_38 = $var_11->var_5->createStream($var_31.$var_33);
        if (0 === $var_11->var_2['index']) {
            
            
            $var_11->openStream($var_38, 'w');
        } else {
            $var_11->openStream($var_38, 'a');
        }

        
        $var_41 = new class_1($var_11->var_2['chunk']);

        $var_11->stream($var_41, $var_38);

        if ($var_30) {
            $var_43 = preg_replace('/^(\d+)_/', '', $var_33);
            
            if ($var_11->var_5->has($var_31.$var_43)) {
                $var_11->var_5->delete($var_31.$var_43);
            }

            $var_11->var_5->rename($var_31.$var_33, $var_31.$var_43);
            $var_33 = $var_43;
        }
        $var_46 = $var_11->var_5->get($var_31.$var_33);

        if (!$var_30) {
            return $var_46;
        }

        return new class_2($var_46, $var_11->var_5, $var_11->var_4);
    }

    public function fn_4($var_31)
    {
        $var_11->var_5->delete($var_31);
    }

    public function fn_5($var_23)
    {
        $var_48 = $var_11->var_5->listKeys($var_11->var_3.'/'.$var_23);

        

        return preg_grep('/^.+\/(\d+)_/', $var_48['keys']);
    }

    public function fn_6()
    {
        return $var_11->var_5;
    }

    public function fn_7()
    {
        return $var_11->var_4;
    }
}
