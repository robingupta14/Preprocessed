<?php



class class_0 implements var_0
{
    protected $var_1;

    public function fn_0($var_1)
    {
        $var_2->var_1 = $var_1;
    }

    public function fn_1($var_3)
    {
        $var_4 = new class_1();
        $var_5 = new class_2();

        try {
            $var_5->in($var_2->var_1)->date('<='.-1 * (int) $var_3.'seconds')->files();
        } catch (\var_9 $var_10) {
            
            
            
            return;
        }

        foreach ($var_5 as $var_11) {
            $var_4->remove($var_11);
        }
    }

    public function fn_2($var_13, $var_14, var_15 $var_16, $var_17)
    {
        
        $var_13 = basename($var_13);

        $var_18 = new class_1();
        $var_19 = sprintf('%s/%s', $var_2->var_1, $var_13);
        $var_20 = sprintf('%s_%s', $var_14, $var_17);

        
        if (!$var_18->exists($var_19)) {
            $var_18->mkdir(sprintf('%s/%s', $var_2->var_1, $var_13));
        }

        return $var_16->move($var_19, $var_20);
    }

    public function fn_3($var_24, $var_25, $var_26)
    {
        if (!($var_24 instanceof \var_27)) {
            throw new \var_9('The first argument must implement \IteratorAggregate interface.');
        }

        $var_28 = $var_24->getIterator();

        $var_30 = $var_28->current();
        $var_28->next();

        while ($var_28->valid()) {
            $var_11 = $var_28->current();

            if (false === file_put_contents($var_30->getPathname(), file_get_contents($var_11->getPathname()), \var_35 | \var_36)) {
                throw new \var_37('Reassembling chunks failed.');
            }

            if ($var_25) {
                $var_18 = new class_1();
                $var_18->remove($var_11->getPathname());
            }

            $var_28->next();
        }

        $var_20 = $var_30->getBasename();

        if ($var_26) {
            
            $var_20 = preg_replace('/^(\d+)_/', '', $var_30->getBasename());
        }

        $var_39 = new class_4($var_30->getRealPath());
        $var_39 = $var_39->move($var_30->getPath(), $var_20);

        
        if ($var_26) {
            
            $var_39 = new class_5(new class_3($var_39->getPathname(), $var_39->getBasename(), null, $var_39->getSize(), null, true));
        }

        return $var_39;
    }

    public function fn_4($var_19)
    {
        
        $var_18 = new class_1();
        $var_18->remove($var_19);

        return true;
    }

    public function fn_5($var_13)
    {
        
        $var_13 = basename($var_13);

        $var_5 = new class_2();
        $var_5
            ->in(sprintf('%s/%s', $var_2->var_1, $var_13))->files()->sort(function (\var_44 $var_45, \var_44 $var_46) {
                $var_47 = explode('_', $var_45->getBasename());
                $var_48 = explode('_', $var_46->getBasename());
                $var_47 = (int) $var_47[0];
                $var_48 = (int) $var_48[0];

                return $var_48 < $var_47;
            });

        return $var_5;
    }
}
