







typedef struct {
 array *alias;
} plugin_config;

typedef struct {
 PLUGIN_DATA;

 plugin_config **config_storage;

 plugin_config conf;
} plugin_data;


INIT_FUNC(mod_alias_init) {
 plugin_data *p;

 p = calloc(1, sizeof(*p));



 return p;
}


FREE_FUNC(mod_alias_free) {
 plugin_data *p = var_3;

 if (!p) return HANDLER_GO_ON;

 if (p->config_storage) {
  size_t var_3;

  for (var_3 = 0; var_3 < srv->config_context->used; var_3++) {
   plugin_config *s = p->config_storage[var_3];

   if (NULL == s) continue;

   array_free(s->alias);

   free(s);
  }
  free(p->config_storage);
 }

 free(p);

 return HANDLER_GO_ON;
}



SETDEFAULTS_FUNC(mod_alias_set_defaults) {
 plugin_data *p = var_3;
 size_t var_3 = 0;

 config_values_t cv[] = {
  { "alias.url", NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },
  { NULL, NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }
 };

 if (!p) return HANDLER_ERROR;

 p->config_storage = calloc(1, srv->config_context->used * sizeof(plugin_config *));

 for (var_3 = 0; var_3 < srv->config_context->used; var_3++) {
  data_config const* config = (data_config const*)srv->config_context->data[var_3];
  plugin_config *s;

  s = calloc(1, sizeof(plugin_config));
  s->alias = array_init();
  cv[0].destination = s->alias;

  p->config_storage[var_3] = s;

  if (0 != config_insert_values_global(srv, config->value, cv, var_3 == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {
   return HANDLER_ERROR;
  }

  if (!array_is_kvstring(s->alias)) {
   log_error_write(srv, "/tmp/tmpr7uhr34v.c", 89, "s",
     "unexpected value for alias.url; expected list of \"urlpath\" => \"filepath\"");
   return HANDLER_ERROR;
  }

  if (s->alias->used >= 2) {
   const array *a = s->alias;
   size_t j, k;

   for (j = 0; j < a->used; j ++) {
    const buffer *prefix = a->data[a->sorted[j]]->key;
    for (k = j + 1; k < a->used; k ++) {
     const buffer *key = a->data[a->sorted[k]]->key;

     if (buffer_string_length(key) < buffer_string_length(prefix)) {
      break;
     }
     if (memcmp(key->ptr, prefix->ptr, buffer_string_length(prefix)) != 0) {
      break;
     }

     if (a->sorted[j] < a->sorted[k]) {
      log_error_write(srv, "/tmp/tmpr7uhr34v.c", 111, "SBSBS",
       "url.alias: `", key, "' will never match as `", prefix, "' matched first");
      return HANDLER_ERROR;
     }
    }
   }
  }
 }

 return HANDLER_GO_ON;
}



static int fn_2(server *srv, connection *con, plugin_data *p) {
 size_t var_3, j;
 plugin_config *s = p->config_storage[0];

 p->conf.alias = s->alias;;


 for (var_3 = 1; var_3 < srv->config_context->used; var_3++) {
  data_config *dc = (data_config *)srv->config_context->data[var_3];
  s = p->config_storage[var_3];


  if (!config_check_cond(srv, con, dc)) continue;


  for (j = 0; j < dc->value->used; j++) {
   data_unset *du = dc->value->data[j];

   if (buffer_is_equal_string(du->key, CONST_STR_LEN("alias.url"))) {
    p->conf.alias = s->alias;;
   }
  }
 }

 return 0;
}


PHYSICALPATH_FUNC(mod_alias_physical_handler) {
 plugin_data *p = var_3;
 int uri_len, basedir_len;
 char *uri_ptr;
 size_t k;

 if (buffer_is_empty(con->physical.path)) return HANDLER_GO_ON;

 mod_alias_patch_connection(srv, con, p);


 basedir_len = buffer_string_length(con->physical.basedir);
 if ('/' == con->physical.basedir->ptr[basedir_len-1]) --basedir_len;
 uri_len = buffer_string_length(con->physical.path) - basedir_len;
 uri_ptr = con->physical.path->ptr + basedir_len;

 for (k = 0; k < p->conf.alias->used; k++) {
  data_string *ds = (data_string *)p->conf.alias->data[k];
  int var_5 = buffer_string_length(ds->key);

  if (var_5 > uri_len) continue;
  if (buffer_is_empty(ds->key)) continue;

  if (0 == (con->conf.force_lowercase_filenames ?
     strncasecmp(uri_ptr, ds->key->ptr, var_5) :
     strncmp(uri_ptr, ds->key->ptr, var_5))) {




   if (uri_ptr[var_5] == '.') {
    char *s = uri_ptr + var_5 + 1;
    if (*s == '.') ++s;
    if (*s == '/' || *s == '\0') {
     size_t var_5 = buffer_string_length(ds->value);
     if (0 != var_5 && ds->key->ptr[var_5-1] != '/'
         && 0 != var_5 && ds->value->ptr[var_5-1] == '/') {
      con->http_status = 403;
      return HANDLER_FINISHED;
     }
    }
   }

   buffer_copy_buffer(con->physical.basedir, ds->value);
   buffer_copy_buffer(srv->tmp_buf, ds->value);
   buffer_append_string(srv->tmp_buf, uri_ptr + var_5);
   buffer_copy_buffer(con->physical.path, srv->tmp_buf);

   return HANDLER_GO_ON;
  }
 }


 return HANDLER_GO_ON;
}



int fn_6(plugin *p);
int fn_6(plugin *p) {
 p->version = LIGHTTPD_VERSION_ID;
 p->name = buffer_init_string("alias");

 p->init = mod_alias_init;
 p->handle_physical= mod_alias_physical_handler;
 p->set_defaults = mod_alias_set_defaults;
 p->cleanup = mod_alias_free;

 p->data = NULL;

 return 0;
}
