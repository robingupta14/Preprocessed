







static struct struct_6 *fn_1(const char *base_dir_name, const char *dir_name, uid_t var_8)
{
    char *path = concat_path_file(base_dir_name, dir_name);
    struct struct_6 *dd = dd_create(path, var_8, DEFAULT_DUMP_DIR_MODE);
    free(path);
    return dd;
}

struct struct_6 *fn_3(problem_data_t *problem_data, const char *base_dir_name)
{
    INITIALIZE_LIBREPORT();

    char *type = problem_data_get_content_or_NULL(problem_data, FILENAME_ANALYZER);

    if (!type)
    {
        error_msg(_("Missing required item: '%s'"), FILENAME_ANALYZER);
        return NULL;
    }

    if (!str_is_correct_filename(type))
    {
        error_msg(_("'%s' is not correct file name"), FILENAME_ANALYZER);
        return NULL;
    }

    uid_t var_8 = (uid_t)-1L;
    char *uid_str = problem_data_get_content_or_NULL(problem_data, FILENAME_UID);

    if (uid_str)
    {
        char *endptr;
        errno = 0;
        long var_5 = strtol(uid_str, &endptr, 10);

        if (errno != 0 || endptr == uid_str || *endptr != '\0' || INT_MAX < var_5)
        {
            error_msg(_("uid value is not valid: '%s'"), uid_str);
            return NULL;
        }

        var_8 = (uid_t)var_5;
    }

    struct struct_5 tv;
    if (gettimeofday(&tv, NULL) < 0)
    {
        perror_msg("gettimeofday()");
        return NULL;
    }

    char *problem_id = xasprintf("%s-%s.%ld-%lu"".new", type, iso_date_string(&(tv.tv_sec)), (long)tv.tv_usec, (long)getpid());

    log_info("Saving to %s/%s with uid %d", base_dir_name, problem_id, var_8);

    struct struct_6 *dd;
    if (base_dir_name)
        dd = try_dd_create(base_dir_name, problem_id, var_8);
    else
    {

        dd = try_dd_create(LOCALSTATEDIR"/run/abrt", problem_id, var_8);

        if (!dd)
        {
            char *home = getenv("HOME");
            if (home && home[0])
            {
                home = concat_path_file(home, "tmp");

                dd = try_dd_create(home, problem_id, var_8);
                free(home);
            }
        }


        if (!dd)
            dd = try_dd_create(LARGE_DATA_TMP_DIR, problem_id, var_8);
    }

    if (!dd)
        goto ret;

    GHashTableIter iter;
    char *name;
    struct struct_6 *value;
    g_hash_table_iter_init(&iter, problem_data);
    while (g_hash_table_iter_next(&iter, (void**)&name, (void**)&value))
    {
        if (!str_is_correct_filename(name))
        {
            error_msg("Problem data field name contains disallowed chars: '%s'", name);
            continue;
        }

        if (value->flags & CD_FLAG_BIN)
        {
            char *dest = concat_path_file(dd->dd_dirname, name);
            log_info("copying '%s' to '%s'", value->content, dest);
            off_t var_8 = copy_file(value->content, dest, DEFAULT_DUMP_DIR_MODE | S_IROTH);
            if (var_8 < 0)
                error_msg("Can't copy %s to %s", value->content, dest);
            else
                log_info("copied %li bytes", (unsigned long)var_8);
            free(dest);

            continue;
        }

        dd_save_text(dd, name, value->content);
    }






    dd_create_basic_files(dd, var_8, NULL);

    problem_id[strlen(problem_id) - strlen(".new")] = '\0';
    char* new_path = concat_path_file(base_dir_name, problem_id);
    log_info("Renaming from '%s' to '%s'", dd->dd_dirname, new_path);
    dd_rename(dd, new_path);

 ret:
    free(problem_id);
    return dd;
}
