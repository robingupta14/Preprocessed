







mode_t user_umask;

static int fn_0(char *path) {
  struct struct_1 st_buf;
  char *p;
  int ok;

  for (p = &path[1]; *p; p++) {
    if (*p != '/') continue;
    *p = '\0';
    ok = (stat(path, &st_buf) == 0) && S_ISDIR(st_buf.st_mode);
    if (!ok) ok = (mkdir(path, 777 & ~user_umask) == 0);
    *p = '/';
    if (!ok) return 0;
  }
  return 1;
}

static char *fn_2(unsigned char *fname, unsigned char *dir,
    int var_6, int var_6, int var_6)
{
  unsigned char *p, *name, c, *fe, sep, slash;
  unsigned int x;

  sep = (var_6) ? '/' : '\\';
  slash = (var_6) ? '\\' : '/';


  x = strlen((char *) fname);

  if (var_6) x *= 3;

  if (dir) x += strlen((char *) dir);

  if (!(name = (unsigned char *) malloc(x + 2))) {
    fprintf(stderr, "out of memory!\n");
    return NULL;
  }


  *name = '\0';


  if (dir) {
    strcpy((char *) name, (char *) dir);
    strcat((char *) name, "/");
  }


  while (*fname == sep) fname++;




  p = &name[strlen((char *)name)];
  fe = &fname[strlen((char *)fname)];

  if (var_6) {

    do {
      if (fname >= fe) {
 free(name);
 return NULL;
      }


      if ((c = *fname++) < 0x80) x = c;
      else {
 if ((c >= 0xC0) && (c < 0xE0)) {
   x = (c & 0x1F) << 6;
   x |= *fname++ & 0x3F;
 }
 else if ((c >= 0xE0) && (c < 0xF0)) {
   x = (c & 0xF) << 12;
   x |= (*fname++ & 0x3F) << 6;
   x |= *fname++ & 0x3F;
 }
 else x = '?';
      }




      if (x == sep) x = '/';
      else if (x == slash) x = '\\';
      else if (var_6) x = (unsigned int) tolower((int) x);


      if (x < 0x80) {
 *p++ = (unsigned char) x;
      }
      else if (x < 0x800) {
 *p++ = 0xC0 | (x >> 6);
 *p++ = 0x80 | (x & 0x3F);
      }
      else {
 *p++ = 0xE0 | (x >> 12);
 *p++ = 0x80 | ((x >> 6) & 0x3F);
 *p++ = 0x80 | (x & 0x3F);
      }
    } while (x);
  }
  else {

    do {
      c = *fname++;
      if (c == sep) c = '/';
      else if (c == slash) c = '\\';
      else if (var_6) c = (unsigned char) tolower((int) c);
    } while ((*p++ = c));
  }
  return (char *) name;
}

static int fn_6(const void *a, const void *b) {
  off_t var_9 =
    ((* ((struct struct_13 **) a))->offset) -
    ((* ((struct struct_13 **) b))->offset);
  return (var_9 < 0) ? -1 : ((var_9 > 0) ? 1 : 0);
}

int fn_9(int var_10, char *argv[]) {
  struct struct_11 *chmd;
  struct struct_12 *chm;
  struct struct_13 *file, **f;
  unsigned int numf, i;

  setbuf(stdout, NULL);
  setbuf(stderr, NULL);
  user_umask = umask(0); umask(user_umask);

  MSPACK_SYS_SELFTEST(i);
  if (i) return 0;

  if ((chmd = mspack_create_chm_decompressor(NULL))) {
    for (argv++; *argv; argv++) {
      printf("%s\n", *argv);
      if ((chm = chmd->open(chmd, *argv))) {


 for (numf=0, file=chm->files; file; file = file->next) numf++;
 if ((f = (struct struct_13 **) calloc(numf, sizeof(struct struct_13 *)))) {
   for (i=0, file=chm->files; file; file = file->next) f[i++] = file;
   qsort(f, numf, sizeof(struct struct_13 *), &sortfunc);

   for (i = 0; i < numf; i++) {
     char *outname = create_output_name((unsigned char *)f[i]->filename,NULL,0,1,0);
     printf("Extracting %s\n", outname);
     ensure_filepath(outname);
     if (chmd->extract(chmd, f[i], outname)) {
       printf("%s: extract error on \"%s\": %s\n",
       *argv, f[i]->filename, ERROR(chmd));
     }
     free(outname);
   }
   free(f);
 }
 chmd->close(chmd, chm);
      }
      else {
 printf("%s: can't open -- %s\n", *argv, ERROR(chmd));
      }
    }
    mspack_destroy_chm_decompressor(chmd);
  }
  return 0;
}
