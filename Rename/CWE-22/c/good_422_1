







mode_t user_umask;

static int fn_0(char *path) {
  struct struct_1 st_buf;
  char *p;
  int ok;

  for (p = &path[1]; *p; p++) {
    if (*p != '/') continue;
    *p = '\0';
    ok = (stat(path, &st_buf) == 0) && S_ISDIR(st_buf.st_mode);
    if (!ok) ok = (mkdir(path, 777 & ~user_umask) == 0);
    *p = '/';
    if (!ok) return 0;
  }
  return 1;
}

char *fn_2(char *fname) {
    char *out, *p;
    if ((out = malloc(strlen(fname) + 1))) {

        while (*fname == '/' || *fname == '\\') fname++;

        strcpy(out, (*fname) ? fname : "x");


        for (p = out; *p; p++) {
            if (p[0] == '.' && p[1] == '.' && (p[2] == '/' || p[2] == '\\')) {
               p[0] = p[1] = 'x';
            }
        }
    }
    return out;
}

static int fn_3(const void *a, const void *b) {
  off_t var_6 =
    ((* ((struct struct_10 **) a))->offset) -
    ((* ((struct struct_10 **) b))->offset);
  return (var_6 < 0) ? -1 : ((var_6 > 0) ? 1 : 0);
}

int fn_6(int var_7, char *argv[]) {
  struct struct_8 *chmd;
  struct struct_9 *chm;
  struct struct_10 *file, **f;
  unsigned int numf, i;

  setbuf(stdout, NULL);
  setbuf(stderr, NULL);
  user_umask = umask(0); umask(user_umask);

  MSPACK_SYS_SELFTEST(i);
  if (i) return 0;

  if ((chmd = mspack_create_chm_decompressor(NULL))) {
    for (argv++; *argv; argv++) {
      printf("%s\n", *argv);
      if ((chm = chmd->open(chmd, *argv))) {


 for (numf=0, file=chm->files; file; file = file->next) numf++;
 if ((f = (struct struct_10 **) calloc(numf, sizeof(struct struct_10 *)))) {
   for (i=0, file=chm->files; file; file = file->next) f[i++] = file;
   qsort(f, numf, sizeof(struct struct_10 *), &sortfunc);

   for (i = 0; i < numf; i++) {
     char *outname = create_output_name(f[i]->filename);
     printf("Extracting %s\n", outname);
     ensure_filepath(outname);
     if (chmd->extract(chmd, f[i], outname)) {
       printf("%s: extract error on \"%s\": %s\n",
       *argv, f[i]->filename, ERROR(chmd));
     }
     free(outname);
   }
   free(f);
 }
 chmd->close(chmd, chm);
      }
      else {
 printf("%s: can't open -- %s\n", *argv, ERROR(chmd));
      }
    }
    mspack_destroy_chm_decompressor(chmd);
  }
  return 0;
}
