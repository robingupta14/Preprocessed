using System;









namespace ns_0
{
    public class class_0 : ArchiveTests
    {
        public ZipArchiveTests()
        {
            UseExtensionInsteadOfNameToVerify = true;
        }

        [Fact]
        public void fn_0()
        {
            ArchiveStreamRead("Zip.zipx");
        }

        [Fact]
        public void fn_1()
        {
            ArchiveStreamRead("Zip.bzip2.dd.zip");
        }
        [Fact]
        public void fn_2()
        {
            ArchiveStreamRead("Zip.bzip2.zip");
        }
        [Fact]
        public void fn_3()
        {
            ArchiveStreamRead("Zip.deflate.dd-.zip");
        }
        [Fact]
        public void fn_4()
        {
            ArchiveStreamRead("Zip.deflate.dd.zip");
        }
        [Fact]
        public void fn_5()
        {
            ArchiveStreamRead("Zip.deflate.zip");
        }
        [Fact]
        public void fn_6()
        {
            ArchiveStreamRead("Zip.deflate64.zip");
        }

        [Fact]
        public void fn_7()
        {
            ArchiveStreamRead("Zip.lzma.dd.zip");
        }
        [Fact]
        public void fn_8()
        {
            ArchiveStreamRead("Zip.lzma.zip");
        }
        [Fact]
        public void fn_9()
        {
            ArchiveStreamRead("Zip.ppmd.dd.zip");
        }
        [Fact]
        public void fn_10()
        {
            ArchiveStreamRead("Zip.ppmd.zip");
        }
        [Fact]
        public void fn_11()
        {
            ArchiveStreamRead("Zip.none.zip");
        }

        [Fact]
        public void fn_12()
        {
            ArchiveFileRead("Zip.bzip2.dd.zip");
        }
        [Fact]
        public void fn_13()
        {
            ArchiveFileRead("Zip.bzip2.zip");
        }
        [Fact]
        public void fn_14()
        {
            ArchiveFileRead("Zip.deflate.dd-.zip");
        }
        [Fact]
        public void fn_15()
        {
            ArchiveFileRead("Zip.deflate.dd.zip");
        }
        [Fact]
        public void fn_16()
        {
            ArchiveFileRead("Zip.deflate.zip");
        }
        [Fact]
        public void fn_17()
        {
            ArchiveFileRead("Zip.deflate64.zip");
        }

        [Fact]
        public void fn_18()
        {
            ArchiveFileRead("Zip.lzma.dd.zip");
        }
        [Fact]
        public void fn_19()
        {
            ArchiveFileRead("Zip.lzma.zip");
        }
        [Fact]
        public void fn_20()
        {
            ArchiveFileRead("Zip.ppmd.dd.zip");
        }
        [Fact]
        public void fn_21()
        {
            ArchiveFileRead("Zip.ppmd.zip");
        }
        [Fact]
        public void fn_22()
        {
            ArchiveFileRead("Zip.none.zip");
        }

        [Fact]
        public void fn_23()
        {
            ArchiveStreamRead("Zip.zip64.zip");
        }

        [Fact]
        public void fn_24()
        {
            ArchiveFileRead("Zip.zip64.zip");
        }

        [Fact]
        public void fn_25()
        {
            string var_0 = Path.Combine(SCRATCH_FILES_PATH, "Zip.deflate.mod.zip");
            string var_1 = Path.Combine(TEST_ARCHIVES_PATH, "Zip.deflate.noEmptyDirs.zip");
            string var_2 = Path.Combine(TEST_ARCHIVES_PATH, "Zip.deflate.mod.zip");

            ResetScratch();
            using (var var_3 = ZipArchive.Open(var_1))
            {
                var var_4 = var_3.Entries.Single(var_5 => var_5.Key.EndsWith("jpg"));
                var_3.RemoveEntry(var_4);
                var_3.SaveTo(var_0, CompressionType.Deflate);
            }
            CompareArchivesByPath(var_2, var_0);
        }

        [Fact]
        public void fn_26()
        {
            string var_6 = Path.Combine(ORIGINAL_FILES_PATH, "jpg", "test.jpg");
            string var_0 = Path.Combine(SCRATCH_FILES_PATH, "Zip.deflate.mod.zip");
            string var_1 = Path.Combine(TEST_ARCHIVES_PATH, "Zip.deflate.mod.zip");
            string var_2 = Path.Combine(TEST_ARCHIVES_PATH, "Zip.deflate.mod2.zip");

            ResetScratch();
            using (var var_3 = ZipArchive.Open(var_1))
            {
                var_3.AddEntry("jpg\\test.jpg", var_6);
                var_3.SaveTo(var_0, CompressionType.Deflate);
            }
            CompareArchivesByPath(var_2, var_0);
        }

        [Fact]
        public void fn_27()
        {
            string var_7 = Path.Combine(SCRATCH_FILES_PATH, "a.zip");
            string var_8 = Path.Combine(SCRATCH_FILES_PATH, "b.zip");

            ResetScratch();
            using (var var_9 = ZipArchive.Create())
            {
                string var_10 = "test.txt";
                var var_11 = new MemoryStream(Encoding.UTF8.GetBytes(var_10));
                var_9.AddEntry("test.txt", var_11, true, var_11.Length);
                var_9.SaveTo(var_7, CompressionType.Deflate);
                var_9.SaveTo(var_8, CompressionType.Deflate);
            }

            Assert.Equal(new FileInfo(var_7).Length, new FileInfo(var_8).Length);
        }

        [Fact]
        public void fn_28()
        {
            ResetScratch();

            string var_0 = Path.Combine(TEST_ARCHIVES_PATH, "Zip.deflate.noEmptyDirs.zip");



            using (ZipArchive var_12 = (ZipArchive)ArchiveFactory.Open(var_0))
            {
                var var_13 = var_12.Entries.First(var_14 => var_14.Key.EndsWith("jpg"));
                var_12.RemoveEntry(var_13);
                Assert.Null(var_12.Entries.FirstOrDefault(var_14 => var_14.Key.EndsWith("jpg")));
                Assert.Null(((IArchive)var_12).Entries.FirstOrDefault(var_14 => var_14.Key.EndsWith("jpg")));
            }
        }

        [Fact]
        public void fn_29()
        {
            using (var var_9 = ZipArchive.Create())
            {
                var_9.AddEntry("1.txt", new MemoryStream());
                Assert.Throws<ArchiveException>(() => var_9.AddEntry("\\1.txt", new MemoryStream()));
            }
        }

        [Fact]
        public void fn_30()
        {
            string var_7 = Path.Combine(SCRATCH_FILES_PATH, "a.zip");
            string var_8 = Path.Combine(SCRATCH_FILES_PATH, "b.zip");

            using (var var_9 = ZipArchive.Create())
            {
                using (var var_15 = new MemoryStream(Encoding.UTF8.GetBytes("qwert")))
                {
                    var_9.AddEntry("1.txt", var_15, false, var_15.Length);
                    var_9.AddEntry("2.txt", var_15, false, var_15.Length);
                    var_9.SaveTo(var_7, CompressionType.Deflate);
                    var_9.SaveTo(var_8, CompressionType.Deflate);
                }
            }

            Assert.Equal(new FileInfo(var_7).Length, new FileInfo(var_8).Length);
        }

        [Fact]
        public void fn_31()
        {
            ResetScratch();
            foreach (var file in Directory.EnumerateFiles(ORIGINAL_FILES_PATH, "*.*", SearchOption.AllDirectories))
            {
                var var_16 = file.Substring(ORIGINAL_FILES_PATH.Length);
                if (var_16.StartsWith(Path.DirectorySeparatorChar.ToString()))
                {
                    var_16 = var_16.Substring(1);
                }
                var_16 = Path.Combine(SCRATCH_FILES_PATH, var_16);
                var var_17 = Path.GetDirectoryName(var_16);
                if (!Directory.Exists(var_17))
                {
                    Directory.CreateDirectory(var_17);
                }
                File.Copy(file, var_16);
            }
            string var_0 = Path.Combine(SCRATCH2_FILES_PATH, "Zip.deflate.noEmptyDirs.zip");
            string var_1 = Path.Combine(TEST_ARCHIVES_PATH, "Zip.deflate.noEmptyDirs.zip");

            using (var var_3 = ZipArchive.Create())
            {
                var_3.AddAllFromDirectory(SCRATCH_FILES_PATH);
                var_3.SaveTo(var_0, CompressionType.Deflate);
            }
            CompareArchivesByPath(var_1, var_0);
            Directory.Delete(SCRATCH_FILES_PATH, true);
        }

        [Fact]
        public void fn_32()
        {
            ResetScratch();
            foreach (var file in Directory.EnumerateFiles(ORIGINAL_FILES_PATH, "*.*", SearchOption.AllDirectories))
            {
                var var_16 = file.Substring(ORIGINAL_FILES_PATH.Length);
                if (var_16.StartsWith(Path.DirectorySeparatorChar.ToString()))
                {
                    var_16 = var_16.Substring(1);
                }
                var_16 = Path.Combine(SCRATCH_FILES_PATH, var_16);
                var var_17 = Path.GetDirectoryName(var_16);
                if (!Directory.Exists(var_17))
                {
                    Directory.CreateDirectory(var_17);
                }
                File.Copy(file, var_16);
            }
            string var_0 = Path.Combine(SCRATCH2_FILES_PATH, "Zip.deflate.noEmptyDirs.zip");

            using (var var_3 = ZipArchive.Create())
            {
                var_3.AddAllFromDirectory(SCRATCH_FILES_PATH);
                var_3.RemoveEntry(var_3.Entries.Single(var_5 => var_5.Key.EndsWith("jpg", StringComparison.OrdinalIgnoreCase)));
                Assert.Null(var_3.Entries.FirstOrDefault(var_5 => var_5.Key.EndsWith("jpg")));
            }
            Directory.Delete(SCRATCH_FILES_PATH, true);
        }

        [Fact]
        public void fn_33()
        {
            ResetScratch();
            using (var var_18 = ZipArchive.Open(Path.Combine(TEST_ARCHIVES_PATH, "Zip.deflate.WinzipAES.zip"), new ReaderOptions()
            {
                Password = "test"
            }))
            {
                foreach (var var_4 in var_18.Entries.Where(var_5 => !var_5.IsDirectory))
                {
                    var_4.WriteToDirectory(SCRATCH_FILES_PATH, new ExtractionOptions()
                    {
                        ExtractFullPath = true,
                        Overwrite = true
                    });
                }
            }
            VerifyFiles();
        }

        [Fact]
        public void fn_34()
        {
            ResetScratch();
            using (var var_18 = ZipArchive.Open(Path.Combine(TEST_ARCHIVES_PATH, "Zip.deflate.WinzipAES2.zip"), new ReaderOptions()
            {
                Password = "test"
            }))
            {
                foreach (var var_4 in var_18.Entries.Where(var_5 => !var_5.IsDirectory))
                {
                    var var_15 = var_4.OpenEntryStream();
                    Assert.NotNull(var_15);
                    var var_19 = Record.Exception(() => var_15 = var_4.OpenEntryStream());
                    Assert.Null(var_19);
                }
            }
        }

        [Fact]
        public void fn_35()
        {
            ResetScratch();
            using (var var_18 = ZipArchive.Open(Path.Combine(TEST_ARCHIVES_PATH, "Zip.bzip2.pkware.zip"), new ReaderOptions()
            {
                Password = "test"
            }))
            {
                foreach (var var_4 in var_18.Entries.Where(var_5 => !var_5.IsDirectory))
                {
                    var_4.WriteToDirectory(SCRATCH_FILES_PATH, new ExtractionOptions()
                    {
                        ExtractFullPath = true,
                        Overwrite = true
                    });
                }
            }
            VerifyFiles();
        }

        [Fact]
        public void fn_36()
        {
            string var_1 = Path.Combine(TEST_ARCHIVES_PATH, "Zip.deflate.noEmptyDirs.zip");

            ResetScratch();
            ZipArchive var_20 = ZipArchive.Open(var_1);
            int var_21 = 0;
            foreach (var var_13 in var_20.Entries)
                var_21++;

            
            Assert.Equal(3, var_21);
            var_20.Dispose();

            var_20 = ZipArchive.Open(var_1);
            int var_22 = 0;

            foreach (var var_13 in var_20.Entries)
            {
                var_22++;

                
                if (var_22 == var_21)
                {
                    var var_23 = var_13.OpenEntryStream();
                    var_23.ReadByte(); 
                    var_23.Dispose();
                    break;
                }
            }

            int var_24 = 0;
            foreach (var var_13 in var_20.Entries)
                var_24++;

            Assert.Equal(3, var_24);
        }

        [Fact]
        public void fn_37()
        {
            string var_25 = Path.Combine(TEST_ARCHIVES_PATH, "Zip.deflate.pkware.zip");

            using (FileStream var_26 = File.Open(var_25, FileMode.Open))
            {
                using (IArchive var_3 = ArchiveFactory.Open(var_26, new ReaderOptions { Password = "12345678" }))
                {
                    var var_27 = var_3.Entries.Where(var_4 => !var_4.IsDirectory);
                    foreach (IArchiveEntry var_4 in var_27)
                    {
                        for (var var_28 = 0; var_28 < 100; var_28++)
                        {
                            using (var var_29 = new MemoryStream())
                            using (Stream var_30 = var_4.OpenEntryStream())
                                var_30.CopyTo(var_29);
                        }
                    }
                }
            }
        }

        [Fact]
        public void fn_38()
        {
            Exception var_31 = null;
            string var_25 = Path.Combine(TEST_ARCHIVES_PATH, "Zip.Evil.zip");

            try
            { 
                using (var var_3 = ZipArchive.Open(var_25))
                {
                    foreach (var var_4 in var_3.Entries.Where(var_4 => !var_4.IsDirectory))
                    {
                        var_4.WriteToDirectory(SCRATCH_FILES_PATH, new ExtractionOptions()
                        {
                            ExtractFullPath = true,
                            Overwrite = true
                        });
                    }
                }
            }
            catch (Exception var_19)
            {
                var_31 = var_19;
            }

            Assert.NotEqual(var_31, null);
        }

        class class_1 : MemoryStream
        {
            public override bool CanSeek => false;
        }

        [Fact]
        public void fn_39()
        {
            MemoryStream var_15 = new NonSeekableMemoryStream();

            using (IWriter var_32 = WriterFactory.Open(var_15, ArchiveType.Zip, CompressionType.Deflate))
            {
                var_32.Write("foo.txt", new MemoryStream(new byte[0]));
                var_32.Write("foo2.txt", new MemoryStream(new byte[10]));
            }

            var_15 = new MemoryStream(var_15.ToArray());
            File.WriteAllBytes(Path.Combine(SCRATCH_FILES_PATH, "foo.zip"), var_15.ToArray());

            using (var var_33 = ZipArchive.Open(var_15))
            {
                foreach (var var_4 in var_33.Entries)
                {
                    using (var var_30 = var_4.OpenEntryStream())
                    {
                        MemoryStream var_34 = new MemoryStream();
                        const int var_35 = 0x1000;
                        byte[] var_36 = new byte[var_35];
                        int var_37 = 0;
                        while ((var_37 = var_30.Read(var_36, 0, var_35)) > 0)
                            var_34.Write(var_36, 0, var_37);
                    }
                }
            }
        }
    }
}
