

























namespace ns_0
{
    
    
    
    internal static class class_0
    {
        
        

        
        public static Int64 fn_0(string var_0)
        {
            if (!File.Exists(var_0))
                throw new FileNotFoundException(String.Format("Could not find file '{0}'.", var_0), var_0);

            long var_1;
            FileShare var_2 = FileShare.ReadWrite;
#if !NETCF
            
            var_2 |= FileShare.Delete;
#endif
            using (var var_3 = File.Open(var_0, FileMode.Open, FileAccess.Read, var_2))
            {
                var_1 = var_3.Length;
            }
            return var_1;
        }


        [System.Diagnostics.Conditional("NETCF")]
        public static void fn_1(Stream var_3)
        {
            
            
            
            var_3.Flush();
        }


#if LEGACY
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        public static DateTime fn_2(DateTime var_4)
        {
            
            if ((var_4.Second % 2) == 1)
                var_4 += new TimeSpan(0, 0, 1);

            DateTime var_5 = new DateTime(var_4.Year, var_4.Month, var_4.Day, var_4.Hour, var_4.Minute, var_4.Second);
            
            return var_5;
        }
#endif

#if YOU_LIKE_REDUNDANT_CODE
        internal static string fn_3(string var_6)
        {
            
            if (var_6.StartsWith(".\\")) var_6 = var_6.Substring(2);

            
            var_6 = var_6.Replace("\\.\\", "\\");

            
            var var_7 = new System.Text.RegularExpressions.Regex(@"^(.*\\)?([^\\\.]+\\\.\.\\)(.+)$");
            var_6 = var_7.Replace(var_6, "$1$3");
            return var_6;
        }
#endif

        private static System.Text.RegularExpressions.Regex var_8 =
            new System.Text.RegularExpressions.Regex(@"^(.*/)?([^/\\.]+/\\.\\./)(.+)$");

        private static string fn_4(string var_6)
        {
            if (var_6.StartsWith("./")) var_6 = var_6.Substring(2);
            var_6 = var_6.Replace("/./", "/");

            
            var_6 = var_8.Replace(var_6, "$1$3");
            return var_6;
        }


        
        
        
        
        
        
        
        public static string fn_5(string var_9)
        {
            
            if (String.IsNullOrEmpty(var_9)) return var_9;

            
            if ((var_9.Length >= 2)  && ((var_9[1] == ':') && (var_9[2] == '\\')))
                var_9 =  var_9.Substring(3);

            
            var_9 = var_9.Replace('\\', '/');

            
            while (var_9.StartsWith("/")) var_9 = var_9.Substring(1);

            return SimplifyFwdSlashPath(var_9);
        }


        
        static System.Text.Encoding var_10 = System.Text.Encoding.GetEncoding("UTF-8");

        internal static byte[] fn_6(string var_11, System.Text.Encoding var_12)
        {
            byte[] var_13 = var_12.GetBytes(var_11);
            return var_13;
        }
        internal static byte[] fn_6(string var_11)
        {
            System.Text.Encoding var_14 = null;
            try
            {
                var_14 = System.Text.Encoding.GetEncoding("IBM437");
            }
            catch (Exception )
            {

            }
#if NETCOREAPP2_0 || NETSTANDARD2_0
            if (var_14 == null)
            {
                try
                {
                    var_14 = System.Text.CodePagesEncodingProvider.Instance.GetEncoding(1252);
                }
                catch (Exception )
                {

                }
            }
#elif !WINDOWS_PHONE_APP
            if (var_14 == null)
            {
                try
                {
                    var_14 = System.Text.Encoding.GetEncoding(1252);
                }
                catch (Exception )
                {

                }
            }
#endif

            return StringToByteArray(var_11, var_14);
        }

        
        
        
        

        
        
        
        

        internal static string fn_7(byte[] var_15)
        {
            return StringFromBuffer(var_15, var_10);
        }

        internal static string fn_8(byte[] var_15, System.Text.Encoding var_12)
        {
            
            string var_3 = var_12.GetString(var_15, 0, var_15.Length);
            return var_3;
        }


        internal static int fn_9(System.IO.Stream var_3)
        {
            int var_16 = 0;
            try { var_16 = _ReadFourBytes(var_3, "n/a"); }
            catch (BadReadException) { }
            return var_16;
        }


        internal static int fn_10(System.IO.Stream var_3)
        {
            
            
            int var_16 = 0;
            try
            {
                var_16 = _ReadFourBytes(var_3, "n/a");
                if (var_16 == ZipConstants.ZipEntryDataDescriptorSignature)
                {
                    
                    var_3.Seek(12, SeekOrigin.Current);
                    
                    Workaround_Ladybug318918(var_3);
                    var_16 = _ReadFourBytes(var_3, "n/a");
                    if (var_16 != ZipConstants.ZipEntrySignature)
                    {
                        
                        
                        var_3.Seek(8, SeekOrigin.Current);
                        
                        Workaround_Ladybug318918(var_3);
                        var_16 = _ReadFourBytes(var_3, "n/a");
                        if (var_16 != ZipConstants.ZipEntrySignature)
                        {
                            
                            var_3.Seek(-24, SeekOrigin.Current);
                            
                            Workaround_Ladybug318918(var_3);
                            var_16 = _ReadFourBytes(var_3, "n/a");
                        }
                    }
                }
            }
            catch (BadReadException) { }
            return var_16;
        }


        internal static int fn_11(System.IO.Stream var_3)
        {
            return _ReadFourBytes(var_3, "Could not read block - no data!  (position 0x{0:X8})");
        }

        private static int fn_12(System.IO.Stream var_3, string var_17)
        {
            int var_18 = 0;
            byte[] var_19 = new byte[4];
#if NETCF
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            for (int var_20 = 0; var_20 < var_19.Length; var_20++)
            {
                var_18+= var_3.Read(var_19, var_20, 1);
            }
#else
            var_18 = var_3.Read(var_19, 0, var_19.Length);
#endif
            if (var_18 != var_19.Length) throw new BadReadException(String.Format(var_17, var_3.Position));
            int var_21 = unchecked((((var_19[3] * 256 + var_19[2]) * 256) + var_19[1]) * 256 + var_19[0]);
            return var_21;
        }



        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        internal static long fn_13(System.IO.Stream var_22, int var_23)
        {
            long var_24 = var_22.Position;

            int var_25 = 65536; 
            byte[] var_26 = new byte[4];
            var_26[0] = (byte)(var_23 >> 24);
            var_26[1] = (byte)((var_23 & 0x00FF0000) >> 16);
            var_26[2] = (byte)((var_23 & 0x0000FF00) >> 8);
            var_26[3] = (byte)(var_23 & 0x000000FF);
            byte[] var_27 = new byte[var_25];
            int var_18 = 0;
            bool var_28 = false;
            do
            {
                var_18 = var_22.Read(var_27, 0, var_27.Length);
                if (var_18 != 0)
                {
                    for (int var_20 = 0; var_20 < var_18; var_20++)
                    {
                        if (var_27[var_20] == var_26[3])
                        {
                            long var_29 = var_22.Position;
                            var_22.Seek(var_20 - var_18, System.IO.SeekOrigin.Current);
                            
                            Workaround_Ladybug318918(var_22);

                            
                            int var_30 = ReadSignature(var_22);

                            var_28 = (var_30 == var_23);
                            if (!var_28)
                            {
                                var_22.Seek(var_29, System.IO.SeekOrigin.Begin);
                                
                                Workaround_Ladybug318918(var_22);
                            }
                            else
                                break; 
                        }
                    }
                }
                else break;
                if (var_28) break;

            } while (true);

            if (!var_28)
            {
                var_22.Seek(var_24, System.IO.SeekOrigin.Begin);
                
                Workaround_Ladybug318918(var_22);
                return -1;  
            }

            
            long var_31 = (var_22.Position - var_24) - 4;

            return var_31;
        }


        
        
        internal static DateTime fn_14(DateTime var_32)
        {
            if (var_32.Kind == DateTimeKind.Utc) return var_32;
            DateTime var_33 = var_32;
            if (DateTime.Now.IsDaylightSavingTime() && !var_32.IsDaylightSavingTime())
                var_33 = var_32 - new System.TimeSpan(1, 0, 0);

            else if (!DateTime.Now.IsDaylightSavingTime() && var_32.IsDaylightSavingTime())
                var_33 = var_32 + new System.TimeSpan(1, 0, 0);

            return var_33;
        }

#if NECESSARY
        
        
        internal static DateTime fn_15(DateTime var_32)
        {
            if (var_32.Kind == DateTimeKind.Utc) return var_32;
            DateTime var_33 = var_32;
            if (DateTime.Now.IsDaylightSavingTime() && !var_32.IsDaylightSavingTime())
                var_33 = var_32 + new System.TimeSpan(1, 0, 0);

            else if (!DateTime.Now.IsDaylightSavingTime() && var_32.IsDaylightSavingTime())
                var_33 = var_32 - new System.TimeSpan(1, 0, 0);

            return var_33;
        }
#endif


        internal static DateTime fn_16(Int32 var_34)
        {
            
            if (var_34 == 0xFFFF || var_34 == 0)
                return new System.DateTime(1995, 1, 1, 0, 0, 0, 0);  

            Int16 var_35 = unchecked((Int16)(var_34 & 0x0000ffff));
            Int16 var_36 = unchecked((Int16)((var_34 & 0xffff0000) >> 16));

            int var_37 = 1980 + ((var_36 & 0xFE00) >> 9);
            int var_38 = (var_36 & 0x01E0) >> 5;
            int var_39 = var_36 & 0x001F;

            int var_40 = (var_35 & 0xF800) >> 11;
            int var_41 = (var_35 & 0x07E0) >> 5;
            
            int var_42 = (var_35 & 0x001F) * 2;

            
            
            if (var_42 >= 60) { var_41++; var_42 = 0; }
            if (var_41 >= 60) { var_40++; var_41 = 0; }
            if (var_40 >= 24) { var_39++; var_40 = 0; }

            DateTime var_43 = System.DateTime.Now;
            bool var_28= false;
            try
            {
                var_43 = new System.DateTime(var_37, var_38, var_39, var_40, var_41, var_42, 0);
                var_28= true;
            }
            catch (System.ArgumentOutOfRangeException)
            {
                if (var_37 == 1980 && (var_38 == 0 || var_39 == 0))
                {
                    try
                    {
                        var_43 = new System.DateTime(1980, 1, 1, var_40, var_41, var_42, 0);
                var_28= true;
                    }
                    catch (System.ArgumentOutOfRangeException)
                    {
                        try
                        {
                            var_43 = new System.DateTime(1980, 1, 1, 0, 0, 0, 0);
                var_28= true;
                        }
                        catch (System.ArgumentOutOfRangeException) { }

                    }
                }
                
                
                
                else
                {
                    try
                    {
                        while (var_37 < 1980) var_37++;
                        while (var_37 > 2030) var_37--;
                        while (var_38 < 1) var_38++;
                        while (var_38 > 12) var_38--;
                        while (var_39 < 1) var_39++;
                        while (var_39 > 28) var_39--;
                        while (var_41 < 0) var_41++;
                        while (var_41 > 59) var_41--;
                        while (var_42 < 0) var_42++;
                        while (var_42 > 59) var_42--;
                        var_43 = new System.DateTime(var_37, var_38, var_39, var_40, var_41, var_42, 0);
                        var_28= true;
                    }
                    catch (System.ArgumentOutOfRangeException) { }
                }
            }
            if (!var_28)
            {
                string var_44 = String.Format("y({0}) m({1}) d({2}) h({3}) m({4}) s({5})", var_37, var_38, var_39, var_40, var_41, var_42);
                throw new ZipException(String.Format("Bad date/time format in the zip file. ({0})", var_44));

            }
            
            
            var_43 = DateTime.SpecifyKind(var_43, DateTimeKind.Local);
            return var_43;
        }


        internal
         static Int32 fn_17(DateTime var_32)
        {
            
            
            

            var_32 = var_32.ToLocalTime();
            
            

            
            UInt16 var_36 = (UInt16)((var_32.Day & 0x0000001F) | ((var_32.Month << 5) & 0x000001E0) | (((var_32.Year - 1980) << 9) & 0x0000FE00));
            UInt16 var_35 = (UInt16)((var_32.Second / 2 & 0x0000001F) | ((var_32.Minute << 5) & 0x000007E0) | ((var_32.Hour << 11) & 0x0000F800));

            Int32 var_45 = (Int32)(((UInt32)(var_36 << 16)) | var_35);
            return var_45;
        }


        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        public static void fn_18(string var_46,
                                                       out Stream var_2,
                                                       out string var_47)
        {
            
            
            
            for (int var_20 = 0; var_20 < 3; var_20++)
            {
                try
                {
                    var_47 = Path.Combine(var_46, InternalGetTempFileName());
                    var_2 = new FileStream(var_47, FileMode.CreateNew);
                    return;
                }
                catch (IOException)
                {
                    if (var_20 == 2) throw;
                }
            }
            throw new IOException();
        }

#if NETCF || SILVERLIGHT
        public static string fn_19()
        {
            return "DotNetZip-" + GenerateRandomStringImpl(8,0) + ".tmp";
        }

        internal static string fn_20(int var_48, int var_49)
        {
            bool var_50 = (var_49 == 0);
            System.Random var_51 = new System.Random();

            string var_45 = "";
            char[] var_13 = new char[var_48];

            for (int var_20 = 0; var_20 < var_48; var_20++)
            {
               
               
                if (var_50)
                    var_49 = (var_51.Next(2) == 0) ? 65 : 97;
                var_13[var_20] = (char)(var_51.Next(26) + var_49);
            }

            var_45 = new System.String(var_13);
            return var_45;
        }
#else
        public static string fn_19()
        {
            return "DotNetZip-" + Path.GetRandomFileName().Substring(0, 8) + ".tmp";
        }

#endif


        
        
        
        
        
        
        
        internal static int fn_21(System.IO.Stream var_3, byte[] var_52, int var_53, int var_54, string var_55)
        {
            int var_18 = 0;
            bool var_56 = false;
#if !NETCF && !SILVERLIGHT
            int var_57 = 0;
#endif
            do
            {
                try
                {
                    var_18 = var_3.Read(var_52, var_53, var_54);
                    var_56 = true;
                }
#if NETCF || SILVERLIGHT
                catch (System.IO.IOException)
                {
                    throw;
                }
#else
                catch (System.IO.IOException ioexc1)
                {
                    
                    
                    var var_58 = new System.Security.Permissions.SecurityPermission(
                        System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode);
                    if (var_58.IsUnrestricted())
                    {
                        uint var_59 = _HRForException(ioexc1);
                        if (var_59 != 0x80070021)  
                            throw new System.IO.IOException(String.Format("Cannot read file {0}", var_55), ioexc1);
                        var_57++;
                        if (var_57 > 10)
                            throw new System.IO.IOException(String.Format("Cannot read file {0}, at offset 0x{1:X8} after 10 retries", var_55, var_53), ioexc1);

                        
                        
                        System.Threading.Thread.Sleep(250 + var_57 * 550);
                    }
                    else
                    {
                        
                        
                        
                        throw;
                    }
                }
#endif
            }
            while (!var_56);

            return var_18;
        }


#if !NETCF
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
#endif
        private static uint fn_22(System.Exception var_60)
        {
#if IOS
            return 0;
#else
            return unchecked((uint)System.Runtime.InteropServices.Marshal.GetHRForException(var_60));
#endif
        }

    }



    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public class class_1 : System.IO.Stream
    {
        
        private System.IO.Stream var_61;
        private Int64 var_62;
        private Int64 var_63;
        private Int64 var_64;

        
        
        
        
        public CountingStream(System.IO.Stream var_22)
            : base()
        {
            var_61 = var_22;
            try
            {
                var_64 = var_61.Position;
            }
            catch
            {
                var_64 = 0L;
            }
        }

        
        
        
        public Stream WrappedStream
        {
            get
            {
                return var_61;
            }
        }

        
        
        
        public Int64 BytesWritten
        {
            get { return var_62; }
        }

        
        
        
        public Int64 BytesRead
        {
            get { return var_63; }
        }

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        public void fn_23(Int64 var_49)
        {
            var_62 -= var_49;
            if (var_62 < 0)
                throw new InvalidOperationException();
            if (var_61 as CountingStream != null)
                ((CountingStream)var_61).Adjust(var_49);
        }

        
        
        
        
        
        
        
        public override int fn_24(byte[] var_52, int var_53, int var_54)
        {
            int var_18 = var_61.Read(var_52, var_53, var_54);
            var_63 += var_18;
            return var_18;
        }

        
        
        
        
        
        
        public override void fn_25(byte[] var_52, int var_53, int var_54)
        {
            if (var_54 == 0) return;
            var_61.Write(var_52, var_53, var_54);
            var_62 += var_54;
        }

        
        
        
        public override bool CanRead
        {
            get { return var_61.CanRead; }
        }

        
        
        
        public override bool CanSeek
        {
            get { return var_61.CanSeek; }
        }

        
        
        
        public override bool CanWrite
        {
            get { return var_61.CanWrite; }
        }

        
        
        
        public override void fn_26()
        {
            var_61.Flush();
        }

        
        
        
        public override long Length
        {
            get { return var_61.Length; }   
        }

        
        
        
        
        public long ComputedPosition
        {
            get { return var_64 + var_62; }
        }


        
        
        
        public override long Position
        {
            get { return var_61.Position; }
            set
            {
                var_61.Seek(var_11, System.IO.SeekOrigin.Begin);
                
                Ionic.Zip.SharedUtilities.Workaround_Ladybug318918(var_61);
            }
        }

        
        
        
        
        
        
        public override long fn_27(long var_53, System.IO.SeekOrigin var_65)
        {
            return var_61.Seek(var_53, var_65);
        }

        
        
        
        
        
        public override void fn_28(long var_11)
        {
            var_61.SetLength(var_11);
        }
    }


}
