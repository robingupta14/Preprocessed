

























namespace ns_0
{
    
    
    
    internal static class class_0
    {
        
        

        
        public static Int64 fn_0(string var_0)
        {
            if (!File.Exists(var_0))
                throw new FileNotFoundException(String.Format("Could not find file '{0}'.", var_0), var_0);

            long var_1;
            FileShare var_2 = FileShare.ReadWrite;
#if !NETCF
            
            var_2 |= FileShare.Delete;
#endif
            using (var var_3 = File.Open(var_0, FileMode.Open, FileAccess.Read, var_2))
            {
                var_1 = var_3.Length;
            }
            return var_1;
        }


        [System.Diagnostics.Conditional("NETCF")]
        public static void fn_1(Stream var_3)
        {
            
            
            
            var_3.Flush();
        }


#if LEGACY
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        public static DateTime fn_2(DateTime var_4)
        {
            
            if ((var_4.Second % 2) == 1)
                var_4 += new TimeSpan(0, 0, 1);

            DateTime var_5 = new DateTime(var_4.Year, var_4.Month, var_4.Day, var_4.Hour, var_4.Minute, var_4.Second);
            
            return var_5;
        }
#endif

#if YOU_LIKE_REDUNDANT_CODE
        internal static string fn_3(string var_6)
        {
            
            if (var_6.StartsWith(".\\")) var_6 = var_6.Substring(2);

            
            var_6 = var_6.Replace("\\.\\", "\\");

            
            var var_7 = new System.Text.RegularExpressions.Regex(@"^(.*\\)?([^\\\.]+\\\.\.\\)(.+)$");
            var_6 = var_7.Replace(var_6, "$1$3");
            return var_6;
        }
#endif

        private static System.Text.RegularExpressions.Regex var_8 =
            new System.Text.RegularExpressions.Regex(@"^(.*/)?([^/\\.]+/\\.\\./)(.+)$");

        private static string fn_4(string var_6)
        {
            if (var_6.StartsWith("./")) var_6 = var_6.Substring(2);
            var_6 = var_6.Replace("/./", "/");

            
            var_6 = var_8.Replace(var_6, "$1$3");
            return var_6;
        }


        
        
        
        
        
        
        
        public static string fn_5(string var_9)
        {
            
            if (String.IsNullOrEmpty(var_9)) return var_9;

            
            if ((var_9.Length >= 2)  && ((var_9[1] == ':') && (var_9[2] == '\\')))
                var_9 =  var_9.Substring(3);

            
            var_9 = var_9.Replace('\\', '/');

            
            while (var_9.StartsWith("/")) var_9 = var_9.Substring(1);

            return SimplifyFwdSlashPath(var_9);
        }

        
        
        
        
        
        
        
        public static string fn_6(string var_6)
        {
            System.Collections.Generic.List<string> var_10 = new System.Collections.Generic.List<string>();
            int var_11 = 0;
            foreach (string var_48 in var_6.Split('/'))
            {
                if (var_48 == "..")
                {
                    if (var_11 == 0)
                        continue;
                    var_11--;
                }
                else
                {
                    if (var_10.Count - 1 < var_11)
                        var_10.Add(var_48);
                    else
                        var_10[var_11] = var_48;
                    var_11++;
                }
            }

            var_6 = "";
            for (int var_12 = 0; var_12 < var_11; var_12++)
            {
                if (var_12 > 0)
                    var_6 += "/";
                var_6 += var_10[var_12];
            }

            return var_6;
        }


        
        static System.Text.Encoding var_13 = System.Text.Encoding.GetEncoding("UTF-8");

        internal static byte[] fn_7(string var_14, System.Text.Encoding var_15)
        {
            byte[] var_16 = var_15.GetBytes(var_14);
            return var_16;
        }
        internal static byte[] fn_7(string var_14)
        {
            System.Text.Encoding var_17 = null;
            try
            {
                var_17 = System.Text.Encoding.GetEncoding("IBM437");
            }
            catch (Exception )
            {

            }
#if NETCOREAPP2_0 || NETSTANDARD2_0
            if (var_17 == null)
            {
                try
                {
                    var_17 = System.Text.CodePagesEncodingProvider.Instance.GetEncoding(1252);
                }
                catch (Exception )
                {

                }
            }
#elif !WINDOWS_PHONE_APP
            if (var_17 == null)
            {
                try
                {
                    var_17 = System.Text.Encoding.GetEncoding(1252);
                }
                catch (Exception )
                {

                }
            }
#endif

            return StringToByteArray(var_14, var_17);
        }

        
        
        
        

        
        
        
        

        internal static string fn_8(byte[] var_18)
        {
            return StringFromBuffer(var_18, var_13);
        }

        internal static string fn_9(byte[] var_18, System.Text.Encoding var_15)
        {
            
            string var_3 = var_15.GetString(var_18, 0, var_18.Length);
            return var_3;
        }


        internal static int fn_10(System.IO.Stream var_3)
        {
            int var_19 = 0;
            try { var_19 = _ReadFourBytes(var_3, "n/a"); }
            catch (BadReadException) { }
            return var_19;
        }


        internal static int fn_11(System.IO.Stream var_3)
        {
            
            
            int var_19 = 0;
            try
            {
                var_19 = _ReadFourBytes(var_3, "n/a");
                if (var_19 == ZipConstants.ZipEntryDataDescriptorSignature)
                {
                    
                    var_3.Seek(12, SeekOrigin.Current);
                    
                    Workaround_Ladybug318918(var_3);
                    var_19 = _ReadFourBytes(var_3, "n/a");
                    if (var_19 != ZipConstants.ZipEntrySignature)
                    {
                        
                        
                        var_3.Seek(8, SeekOrigin.Current);
                        
                        Workaround_Ladybug318918(var_3);
                        var_19 = _ReadFourBytes(var_3, "n/a");
                        if (var_19 != ZipConstants.ZipEntrySignature)
                        {
                            
                            var_3.Seek(-24, SeekOrigin.Current);
                            
                            Workaround_Ladybug318918(var_3);
                            var_19 = _ReadFourBytes(var_3, "n/a");
                        }
                    }
                }
            }
            catch (BadReadException) { }
            return var_19;
        }


        internal static int fn_12(System.IO.Stream var_3)
        {
            return _ReadFourBytes(var_3, "Could not read block - no data!  (position 0x{0:X8})");
        }

        private static int fn_13(System.IO.Stream var_3, string var_20)
        {
            int var_21 = 0;
            byte[] var_22 = new byte[4];
#if NETCF
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            for (int var_12 = 0; var_12 < var_22.Length; var_12++)
            {
                var_21+= var_3.Read(var_22, var_12, 1);
            }
#else
            var_21 = var_3.Read(var_22, 0, var_22.Length);
#endif
            if (var_21 != var_22.Length) throw new BadReadException(String.Format(var_20, var_3.Position));
            int var_23 = unchecked((((var_22[3] * 256 + var_22[2]) * 256) + var_22[1]) * 256 + var_22[0]);
            return var_23;
        }



        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        internal static long fn_14(System.IO.Stream var_24, int var_25)
        {
            long var_26 = var_24.Position;

            int var_27 = 65536; 
            byte[] var_28 = new byte[4];
            var_28[0] = (byte)(var_25 >> 24);
            var_28[1] = (byte)((var_25 & 0x00FF0000) >> 16);
            var_28[2] = (byte)((var_25 & 0x0000FF00) >> 8);
            var_28[3] = (byte)(var_25 & 0x000000FF);
            byte[] var_29 = new byte[var_27];
            int var_21 = 0;
            bool var_30 = false;
            do
            {
                var_21 = var_24.Read(var_29, 0, var_29.Length);
                if (var_21 != 0)
                {
                    for (int var_12 = 0; var_12 < var_21; var_12++)
                    {
                        if (var_29[var_12] == var_28[3])
                        {
                            long var_31 = var_24.Position;
                            var_24.Seek(var_12 - var_21, System.IO.SeekOrigin.Current);
                            
                            Workaround_Ladybug318918(var_24);

                            
                            int var_32 = ReadSignature(var_24);

                            var_30 = (var_32 == var_25);
                            if (!var_30)
                            {
                                var_24.Seek(var_31, System.IO.SeekOrigin.Begin);
                                
                                Workaround_Ladybug318918(var_24);
                            }
                            else
                                break; 
                        }
                    }
                }
                else break;
                if (var_30) break;

            } while (true);

            if (!var_30)
            {
                var_24.Seek(var_26, System.IO.SeekOrigin.Begin);
                
                Workaround_Ladybug318918(var_24);
                return -1;  
            }

            
            long var_33 = (var_24.Position - var_26) - 4;

            return var_33;
        }


        
        
        internal static DateTime fn_15(DateTime var_34)
        {
            if (var_34.Kind == DateTimeKind.Utc) return var_34;
            DateTime var_35 = var_34;
            if (DateTime.Now.IsDaylightSavingTime() && !var_34.IsDaylightSavingTime())
                var_35 = var_34 - new System.TimeSpan(1, 0, 0);

            else if (!DateTime.Now.IsDaylightSavingTime() && var_34.IsDaylightSavingTime())
                var_35 = var_34 + new System.TimeSpan(1, 0, 0);

            return var_35;
        }

#if NECESSARY
        
        
        internal static DateTime fn_16(DateTime var_34)
        {
            if (var_34.Kind == DateTimeKind.Utc) return var_34;
            DateTime var_35 = var_34;
            if (DateTime.Now.IsDaylightSavingTime() && !var_34.IsDaylightSavingTime())
                var_35 = var_34 + new System.TimeSpan(1, 0, 0);

            else if (!DateTime.Now.IsDaylightSavingTime() && var_34.IsDaylightSavingTime())
                var_35 = var_34 - new System.TimeSpan(1, 0, 0);

            return var_35;
        }
#endif


        internal static DateTime fn_17(Int32 var_36)
        {
            
            if (var_36 == 0xFFFF || var_36 == 0)
                return new System.DateTime(1995, 1, 1, 0, 0, 0, 0);  

            Int16 var_37 = unchecked((Int16)(var_36 & 0x0000ffff));
            Int16 var_38 = unchecked((Int16)((var_36 & 0xffff0000) >> 16));

            int var_39 = 1980 + ((var_38 & 0xFE00) >> 9);
            int var_40 = (var_38 & 0x01E0) >> 5;
            int var_41 = var_38 & 0x001F;

            int var_42 = (var_37 & 0xF800) >> 11;
            int var_43 = (var_37 & 0x07E0) >> 5;
            
            int var_44 = (var_37 & 0x001F) * 2;

            
            
            if (var_44 >= 60) { var_43++; var_44 = 0; }
            if (var_43 >= 60) { var_42++; var_43 = 0; }
            if (var_42 >= 24) { var_41++; var_42 = 0; }

            DateTime var_45 = System.DateTime.Now;
            bool var_30= false;
            try
            {
                var_45 = new System.DateTime(var_39, var_40, var_41, var_42, var_43, var_44, 0);
                var_30= true;
            }
            catch (System.ArgumentOutOfRangeException)
            {
                if (var_39 == 1980 && (var_40 == 0 || var_41 == 0))
                {
                    try
                    {
                        var_45 = new System.DateTime(1980, 1, 1, var_42, var_43, var_44, 0);
                var_30= true;
                    }
                    catch (System.ArgumentOutOfRangeException)
                    {
                        try
                        {
                            var_45 = new System.DateTime(1980, 1, 1, 0, 0, 0, 0);
                var_30= true;
                        }
                        catch (System.ArgumentOutOfRangeException) { }

                    }
                }
                
                
                
                else
                {
                    try
                    {
                        while (var_39 < 1980) var_39++;
                        while (var_39 > 2030) var_39--;
                        while (var_40 < 1) var_40++;
                        while (var_40 > 12) var_40--;
                        while (var_41 < 1) var_41++;
                        while (var_41 > 28) var_41--;
                        while (var_43 < 0) var_43++;
                        while (var_43 > 59) var_43--;
                        while (var_44 < 0) var_44++;
                        while (var_44 > 59) var_44--;
                        var_45 = new System.DateTime(var_39, var_40, var_41, var_42, var_43, var_44, 0);
                        var_30= true;
                    }
                    catch (System.ArgumentOutOfRangeException) { }
                }
            }
            if (!var_30)
            {
                string var_46 = String.Format("y({0}) m({1}) d({2}) h({3}) m({4}) s({5})", var_39, var_40, var_41, var_42, var_43, var_44);
                throw new ZipException(String.Format("Bad date/time format in the zip file. ({0})", var_46));

            }
            
            
            var_45 = DateTime.SpecifyKind(var_45, DateTimeKind.Local);
            return var_45;
        }


        internal
         static Int32 fn_18(DateTime var_34)
        {
            
            
            

            var_34 = var_34.ToLocalTime();
            
            

            
            UInt16 var_38 = (UInt16)((var_34.Day & 0x0000001F) | ((var_34.Month << 5) & 0x000001E0) | (((var_34.Year - 1980) << 9) & 0x0000FE00));
            UInt16 var_37 = (UInt16)((var_34.Second / 2 & 0x0000001F) | ((var_34.Minute << 5) & 0x000007E0) | ((var_34.Hour << 11) & 0x0000F800));

            Int32 var_47 = (Int32)(((UInt32)(var_38 << 16)) | var_37);
            return var_47;
        }


        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        public static void fn_19(string var_48,
                                                       out Stream var_2,
                                                       out string var_49)
        {
            
            
            
            for (int var_12 = 0; var_12 < 3; var_12++)
            {
                try
                {
                    var_49 = Path.Combine(var_48, InternalGetTempFileName());
                    var_2 = new FileStream(var_49, FileMode.CreateNew);
                    return;
                }
                catch (IOException)
                {
                    if (var_12 == 2) throw;
                }
            }
            throw new IOException();
        }

#if NETCF || SILVERLIGHT
        public static string fn_20()
        {
            return "DotNetZip-" + GenerateRandomStringImpl(8,0) + ".tmp";
        }

        internal static string fn_21(int var_50, int var_51)
        {
            bool var_52 = (var_51 == 0);
            System.Random var_53 = new System.Random();

            string var_47 = "";
            char[] var_16 = new char[var_50];

            for (int var_12 = 0; var_12 < var_50; var_12++)
            {
               
               
                if (var_52)
                    var_51 = (var_53.Next(2) == 0) ? 65 : 97;
                var_16[var_12] = (char)(var_53.Next(26) + var_51);
            }

            var_47 = new System.String(var_16);
            return var_47;
        }
#else
        public static string fn_20()
        {
            return "DotNetZip-" + Path.GetRandomFileName().Substring(0, 8) + ".tmp";
        }

#endif


        
        
        
        
        
        
        
        internal static int fn_22(System.IO.Stream var_3, byte[] var_54, int var_55, int var_56, string var_57)
        {
            int var_21 = 0;
            bool var_58 = false;
#if !NETCF && !SILVERLIGHT
            int var_59 = 0;
#endif
            do
            {
                try
                {
                    var_21 = var_3.Read(var_54, var_55, var_56);
                    var_58 = true;
                }
#if NETCF || SILVERLIGHT
                catch (System.IO.IOException)
                {
                    throw;
                }
#else
                catch (System.IO.IOException ioexc1)
                {
                    
                    
                    var var_60 = new System.Security.Permissions.SecurityPermission(
                        System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode);
                    if (var_60.IsUnrestricted())
                    {
                        uint var_61 = _HRForException(ioexc1);
                        if (var_61 != 0x80070021)  
                            throw new System.IO.IOException(String.Format("Cannot read file {0}", var_57), ioexc1);
                        var_59++;
                        if (var_59 > 10)
                            throw new System.IO.IOException(String.Format("Cannot read file {0}, at offset 0x{1:X8} after 10 retries", var_57, var_55), ioexc1);

                        
                        
                        System.Threading.Thread.Sleep(250 + var_59 * 550);
                    }
                    else
                    {
                        
                        
                        
                        throw;
                    }
                }
#endif
            }
            while (!var_58);

            return var_21;
        }


#if !NETCF
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
#endif
        private static uint fn_23(System.Exception var_62)
        {
#if IOS
            return 0;
#else
            return unchecked((uint)System.Runtime.InteropServices.Marshal.GetHRForException(var_62));
#endif
        }

    }



    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public class class_1 : System.IO.Stream
    {
        
        private System.IO.Stream var_63;
        private Int64 var_64;
        private Int64 var_65;
        private Int64 var_66;

        
        
        
        
        public CountingStream(System.IO.Stream var_24)
            : base()
        {
            var_63 = var_24;
            try
            {
                var_66 = var_63.Position;
            }
            catch
            {
                var_66 = 0L;
            }
        }

        
        
        
        public Stream WrappedStream
        {
            get
            {
                return var_63;
            }
        }

        
        
        
        public Int64 BytesWritten
        {
            get { return var_64; }
        }

        
        
        
        public Int64 BytesRead
        {
            get { return var_65; }
        }

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        public void fn_24(Int64 var_51)
        {
            var_64 -= var_51;
            if (var_64 < 0)
                throw new InvalidOperationException();
            if (var_63 as CountingStream != null)
                ((CountingStream)var_63).Adjust(var_51);
        }

        
        
        
        
        
        
        
        public override int fn_25(byte[] var_54, int var_55, int var_56)
        {
            int var_21 = var_63.Read(var_54, var_55, var_56);
            var_65 += var_21;
            return var_21;
        }

        
        
        
        
        
        
        public override void fn_26(byte[] var_54, int var_55, int var_56)
        {
            if (var_56 == 0) return;
            var_63.Write(var_54, var_55, var_56);
            var_64 += var_56;
        }

        
        
        
        public override bool CanRead
        {
            get { return var_63.CanRead; }
        }

        
        
        
        public override bool CanSeek
        {
            get { return var_63.CanSeek; }
        }

        
        
        
        public override bool CanWrite
        {
            get { return var_63.CanWrite; }
        }

        
        
        
        public override void fn_27()
        {
            var_63.Flush();
        }

        
        
        
        public override long Length
        {
            get { return var_63.Length; }   
        }

        
        
        
        
        public long ComputedPosition
        {
            get { return var_66 + var_64; }
        }


        
        
        
        public override long Position
        {
            get { return var_63.Position; }
            set
            {
                var_63.Seek(var_14, System.IO.SeekOrigin.Begin);
                
                Ionic.Zip.SharedUtilities.Workaround_Ladybug318918(var_63);
            }
        }

        
        
        
        
        
        
        public override long fn_28(long var_55, System.IO.SeekOrigin var_67)
        {
            return var_63.Seek(var_55, var_67);
        }

        
        
        
        
        
        public override void fn_29(long var_14)
        {
            var_63.SetLength(var_14);
        }
    }


}
