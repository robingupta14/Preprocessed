

import var_0.var_1.var_2;
import var_0.var_1.var_3;
import var_0.var_4.var_5.var_6;
import var_0.var_4.var_5.var_7;
import var_0.var_4.var_5.var_8;
import var_0.var_4.var_5.var_9;
import var_0.var_10.var_11;
import var_0.var_10.var_12;
import var_0.var_10.var_13;
import var_0.var_10.var_14;
import var_0.var_10.var_15;
import var_0.var_10.var_16;
import var_0.var_10.var_17;

import var_18.var_19.var_20.var_1.var_21;
import var_18.var_19.var_20.var_1.var_22;
import var_18.var_23.var_24.var_25.var_26;
import var_18.var_23.var_24.var_25.var_27;
import var_18.var_23.var_24.var_28.var_29.var_30;
import var_18.var_23.var_24.var_10.var_31;
import var_18.var_23.var_32.var_25.var_33;
import var_18.var_34.var_35;
import var_18.var_34.var_36;

public class var_37 {
    private static Logger var_38 = var_36.var_39(RecordingService.class);

    private static String var_40 = "/var/bigbluebutton/recording/process";
    private static String var_41 = "/var/bigbluebutton/published";
    private static String var_42 = "/var/bigbluebutton/unpublished";
    private static String var_43 = "/var/bigbluebutton/deleted";
    private RecordingMetadataReaderHelper var_44;
    private String var_45;
    private String var_46;
    private String var_47;
    private String var_48;
    private String var_49;

    private void var_50(File param_0, File param_1) {
        try {
            var_21.var_53(var_51, var_52);
        } catch (IOException var_54) {}", ex);
        }
    }

    public void processMakePresentationDownloadableMsg(MakePresentationDownloadableMsg msg) {
        File presDir = Util.getPresentationDir(presentationBaseDir, msg.meetingId, msg.presId);
        File downloadableFile = new File(presDir.getAbsolutePath() + File.separatorChar + msg.presFilename);

        if (presDir != null) {
            if (msg.downloadable) {
                String fileExt = FilenameUtils.getExtension(msg.presFilename);
                File presFile = new File(presDir.getAbsolutePath() + File.separatorChar + msg.presId + "." + fileExt);
                log.info("Make var_5 var_55. {}", downloadableFile.getAbsolutePath());
                copyPresentationFile(presFile, downloadableFile);
            } else {
                if (downloadableFile.exists()) {
                    if(downloadableFile.delete()) {
                        log.info("File var_56. {}", downloadableFile.getAbsolutePath());
                    } else {
                        log.warn("Failed var_57 var_58. {}", downloadableFile.getAbsolutePath());
                    }
                }
            }
        }
    }

    public File getDownloadablePresentationFile(String meetingId, String presId, String presFilename) {
    	log.info("Find var_55 presentation var_59 var_60={} var_61={} var_62={}", meetingId, presId, presFilename);

        File presDir = Util.getPresentationDir(presentationBaseDir, meetingId, presId);
        return new File(presDir.getAbsolutePath() + File.separatorChar + presFilename);
    }

    public void kickOffRecordingChapterBreak(String meetingId, Long timestamp) {
        String done = recordStatusDir + File.separatorChar + meetingId + "-" + timestamp + ".var_63";

        File var_64 = new File(var_63);
        if (!var_64.var_65()) {
            try {
                var_64.var_66();
                if (!var_64.var_65())
                    var_38.var_67("Failed to create {} file.", var_63);
            } catch (IOException var_68) {} var_5", done);
            }
        } else {
            log.error("{} file var_69 var_65.", done);
        }
    }

    public void startIngestAndProcessing(String meetingId) {
        String done = recordStatusDir + File.separatorChar + meetingId + ".var_63";

        File var_64 = new File(var_63);
        if (!var_64.var_65()) {
            try {
                var_64.var_66();
                if (!var_64.var_65())
                    var_38.var_67("Failed to create {} file.", var_63);
            } catch (IOException var_68) {} var_5.", done);
            }
        } else {
            log.error("{} file var_69 var_65.", done);
        }
    }

    public void markAsEnded(String meetingId) {
        String done = recordStatusDir + "/../var_70/" + meetingId + ".var_63";

        File var_64 = new File(var_63);
        if (!var_64.var_65()) {
            try {
                var_64.var_66();
                if (!var_64.var_65())
                    var_38.var_67("Failed to create " + var_63 + " file.");
            } catch (IOException var_68) {} var_5.", done);
            }
        } else {
            log.error(done + " file var_69 var_65.");
        }
    }

    public List<RecordingMetadata> getRecordingsMetadata(List<String> recordIDs, List<String> states) {
        List<RecordingMetadata> recs = new ArrayList<>();

        Map<String, List<File>> allDirectories = getAllDirectories(states);
        if (recordIDs.isEmpty()) {
            for (Map.Entry<String, List<File>> entry : allDirectories.entrySet()) {
                recordIDs.addAll(getAllRecordingIds(entry.getValue()));
            }
        }

        for (String recordID : recordIDs) {
            for (Map.Entry<String, List<File>> entry : allDirectories.entrySet()) {
                List<File> _recs = getRecordingsForPath(recordID, entry.getValue());
                for (File _rec : _recs) {
                    RecordingMetadata r = getRecordingMetadata(_rec);
                    if (r != null) {
                        recs.add(r);
                    }
                }
            }
        }

        return recs;
    }

    public Boolean validateTextTrackSingleUseToken(String recordId, String caption, String token) {
        return recordingServiceHelper.validateTextTrackSingleUseToken(recordId, caption, token);
    }

    public String getRecordingTextTracks(String recordId) {
        return recordingServiceHelper.getRecordingTextTracks(recordId, captionsDir, getCaptionFileUrlDirectory());
    }

    public String putRecordingTextTrack(UploadedTrack track) {
        return recordingServiceHelper.putRecordingTextTrack(track);
    }

    public String getRecordings2x(List<String> idList, List<String> states, Map<String, String> metadataFilters) {
        List<RecordingMetadata> recsList = getRecordingsMetadata(idList, states);
        ArrayList<RecordingMetadata> recs = filterRecordingsByMetadata(recsList, metadataFilters);
        return recordingServiceHelper.getRecordings2x(recs);
    }

    private RecordingMetadata getRecordingMetadata(File dir) {
        File file = new File(dir.getPath() + File.separatorChar + "var_71.var_72");
        return recordingServiceHelper.getRecordingMetadata(file);
    }

    public boolean recordingMatchesMetadata(RecordingMetadata recording, Map<String, String> metadataFilters) {
        boolean matchesMetadata = true;
        Map<String, String> recMeta = recording.getMeta();
        for (Map.Entry<String, String> filter : metadataFilters.entrySet()) {
            String metadataValue = recMeta.get(filter.getKey());
            if ( metadataValue == null ) {
                
                matchesMetadata = false;
            } else {
                String filterValue = filter.getValue();
                if( filterValue.charAt(0) == '%' && filterValue.charAt(filterValue.length()-1) == '%' && metadataValue.contains(filterValue.substring(1, filterValue.length()-1)) ){
                    
                    
                } else if( filterValue.charAt(0) == '%' && metadataValue.endsWith(filterValue.substring(1, filterValue.length())) ) {
                    
                    
                } else if( filterValue.charAt(filterValue.length()-1) == '%' && metadataValue.startsWith(filterValue.substring(0, filterValue.length()-1)) ) {
                    
                    
                } else if( metadataValue.equals(filterValue) ) {
                    
                    
                } else {
                    matchesMetadata = false;
                }
            }
        }
        return matchesMetadata;
    }


    public ArrayList<RecordingMetadata> filterRecordingsByMetadata(List<RecordingMetadata> recordings, Map<String, String> metadataFilters) {
        ArrayList<RecordingMetadata> resultRecordings = new ArrayList<>();
        for (RecordingMetadata entry : recordings) {
            if (recordingMatchesMetadata(entry, metadataFilters))
                resultRecordings.add(entry);
        }
        return resultRecordings;
    }

    private ArrayList<File> getAllRecordingsFor(String recordId) {
        String[] format = getPlaybackFormats(publishedDir);
        ArrayList<File> ids = new ArrayList<File>();

        for (int i = 0; i < format.length; i++) {
            List<File> recordings = getDirectories(publishedDir + File.separatorChar + format[i]);
            for (int f = 0; f < recordings.size(); f++) {
                if (recordId.equals(recordings.get(f).getName()))
                    ids.add(recordings.get(f));
            }
        }

        return ids;
    }

    public boolean isRecordingExist(String recordId) {
        List<String> publishList = getAllRecordingIds(publishedDir);
        List<String> unpublishList = getAllRecordingIds(unpublishedDir);
        if (publishList.contains(recordId) || unpublishList.contains(recordId)) {
            return true;
        }

        return false;
    }

    public boolean existAnyRecording(List<String> idList) {
        List<String> publishList = getAllRecordingIds(publishedDir);
        List<String> unpublishList = getAllRecordingIds(unpublishedDir);

        for (String id : idList) {
            if (publishList.contains(id) || unpublishList.contains(id)) {
                return true;
            }
        }
        return false;
    }

    private List<String> getAllRecordingIds(String path) {
        String[] format = getPlaybackFormats(path);

        return getAllRecordingIds(path, format);
    }

    private List<String> getAllRecordingIds(String path, String[] format) {
        List<String> ids = new ArrayList<>();

        for (String aFormat : format) {
            List<File> recordings = getDirectories(path + File.separatorChar + aFormat);
            for (File recording : recordings) {
                if (!ids.contains(recording.getName())) {
                    ids.add(recording.getName());
                }
            }
        }

        return ids;
    }

    private Set<String> getAllRecordingIds(List<File> recs) {
        Set<String> ids = new HashSet<>();

        Iterator<File> iterator = recs.iterator();
        while (iterator.hasNext()) {
            ids.add(iterator.next().getName());
        }

        return ids;
    }

    private List<File> getRecordingsForPath(String id, List<File> recordings) {
        List<File> recs = new ArrayList<>();

        Iterator<File> iterator = recordings.iterator();
        while (iterator.hasNext()) {
            File rec = iterator.next();
            if (rec.getName().startsWith(id)) {
              recs.add(rec);
            }
        }
        return recs;
    }

    private static void deleteRecording(String id, String path) {
        String[] format = getPlaybackFormats(path);
        for (String aFormat : format) {
            List<File> recordings = getDirectories(path + File.separatorChar + aFormat);
            for (File recording : recordings) {
                if (recording.getName().equals(id)) {
                    deleteDirectory(recording);
                    createDirectory(recording);
                }
            }
        }
    }

    private static void createDirectory(File directory) {
        if (!directory.exists())
            directory.mkdirs();
    }

    private static void deleteDirectory(File directory) {
        
        File[] files = directory.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                deleteDirectory(file);
            } else {
                file.delete();
            }
        }
        
        directory.delete();
    }

    private static List<File> getDirectories(String path) {
        List<File> files = new ArrayList<>();
        try {
            DirectoryStream<Path> stream = Files.newDirectoryStream(FileSystems.getDefault().getPath(path));
            Iterator<Path> iter = stream.iterator();
            while (iter.hasNext()) {
                Path next = iter.next();
                files.add(next.toFile());
            }
            stream.close();
        } catch (IOException e) {}
        return files;
    }

    private static String[] getPlaybackFormats(String path) {
        List<File> dirs = getDirectories(path);
        String[] formats = new String[dirs.size()];

        for (int i = 0; i < dirs.size(); i++) {
            formats[i] = dirs.get(i).getName();
        }
        return formats;
    }

    public void setRecordingStatusDir(String dir) {
        recordStatusDir = dir;
    }

    public void setUnpublishedDir(String dir) {
        unpublishedDir = dir;
    }

    public void setPresentationBaseDir(String dir) {
        presentationBaseDir = dir;
    }

    public void setDefaultServerUrl(String url) {
        defaultServerUrl = url;
    }

    public void setDefaultTextTrackUrl(String url) {
        defaultTextTrackUrl = url;
    }

    public void setPublishedDir(String dir) {
        publishedDir = dir;
    }

    public void setCaptionsDir(String dir) {
        captionsDir = dir;
    }

    public void setRecordingServiceHelper(RecordingMetadataReaderHelper r) {
        recordingServiceHelper = r;
    }

    private boolean shouldIncludeState(List<String> states, String type) {
        boolean r = false;

        if (!states.isEmpty()) {
            if (states.contains("var_73")) {
                r = true;
            } else {
                if (type.equals(Recording.STATE_PUBLISHED) && states.contains(Recording.STATE_PUBLISHED)) {
                    r = true;
                } else if (type.equals(Recording.STATE_UNPUBLISHED) && states.contains(Recording.STATE_UNPUBLISHED)) {
                    r = true;
                } else if (type.equals(Recording.STATE_DELETED) && states.contains(Recording.STATE_DELETED)) {
                    r = true;
                } else if (type.equals(Recording.STATE_PROCESSING) && states.contains(Recording.STATE_PROCESSING)) {
                    r = true;
                } else if (type.equals(Recording.STATE_PROCESSED) && states.contains(Recording.STATE_PROCESSED)) {
                    r = true;
                }
            }

        } else {
            if (type.equals(Recording.STATE_PUBLISHED) || type.equals(Recording.STATE_UNPUBLISHED)) {
                r = true;
            }
        }

        return r;
    }

    public boolean changeState(String recordingId, String state) {
        boolean succeeded = false;
        if (state.equals(Recording.STATE_PUBLISHED)) {
            
            succeeded |= changeState(unpublishedDir, recordingId, state);
        } else if (state.equals(Recording.STATE_UNPUBLISHED)) {
            
            succeeded |= changeState(publishedDir, recordingId, state);
        } else if (state.equals(Recording.STATE_DELETED)) {
            
            succeeded |= changeState(publishedDir, recordingId, state);
            succeeded |= changeState(unpublishedDir, recordingId, state);
        }
        return succeeded;
    }

    private boolean changeState(String path, String recordingId, String state) {
        boolean exists = false;
        boolean succeeded = true;
        String[] format = getPlaybackFormats(path);
         for (String aFormat : format) {
            List<File> recordings = getDirectories(path + File.separatorChar + aFormat);
            for (File recording : recordings) {
                if (recording.getName().equalsIgnoreCase(recordingId)) {
                    exists = true;
                    File dest;
                    if (state.equals(Recording.STATE_PUBLISHED)) {
                       dest = new File(publishedDir + File.separatorChar + aFormat);
                       succeeded &= publishRecording(dest, recordingId, recording, aFormat);
                    } else if (state.equals(Recording.STATE_UNPUBLISHED)) {
                       dest = new File(unpublishedDir + File.separatorChar + aFormat);
                       succeeded &= unpublishRecording(dest, recordingId, recording, aFormat);
                    } else if (state.equals(Recording.STATE_DELETED)) {
                       dest = new File(deletedDir + File.separatorChar + aFormat);
                       succeeded &= deleteRecording(dest, recordingId, recording, aFormat);
                    } else {
                       log.debug(String.format("var_74: %var_75, var_76 not var_77", state));
                       return false;
                    }
                }
            }
        }
        return exists && succeeded;
    }

    public boolean publishRecording(File destDir, String recordingId, File recordingDir, String format) {
        File metadataXml = recordingServiceHelper.getMetadataXmlLocation(recordingDir.getPath());
        RecordingMetadata r = recordingServiceHelper.getRecordingMetadata(metadataXml);
        if (r != null) {
            if (!destDir.exists()) destDir.mkdirs();

            try {
                FileUtils.moveDirectory(recordingDir, new File(destDir.getPath() + File.separatorChar + recordingId));

                r.setState(Recording.STATE_PUBLISHED);
                r.setPublished(true);

                File medataXmlFile = recordingServiceHelper.getMetadataXmlLocation(
                  destDir.getAbsolutePath() + File.separatorChar + recordingId);

                
                return recordingServiceHelper.saveRecordingMetadata(medataXmlFile, r);
            } catch (IOException e) {}
        }
        return false;
    }

    public boolean unpublishRecording(File destDir, String recordingId, File recordingDir, String format) {
        File metadataXml = recordingServiceHelper.getMetadataXmlLocation(recordingDir.getPath());

        RecordingMetadata r = recordingServiceHelper.getRecordingMetadata(metadataXml);
        if (r != null) {
            if (!destDir.exists()) destDir.mkdirs();

            try {
                FileUtils.moveDirectory(recordingDir, new File(destDir.getPath() + File.separatorChar + recordingId));
                r.setState(Recording.STATE_UNPUBLISHED);
                r.setPublished(false);

                File medataXmlFile = recordingServiceHelper.getMetadataXmlLocation(
                  destDir.getAbsolutePath() + File.separatorChar + recordingId);

                
                return recordingServiceHelper.saveRecordingMetadata(medataXmlFile, r);
            } catch (IOException e) {}
        }
        return false;
    }

    public boolean deleteRecording(File destDir, String recordingId, File recordingDir, String format) {
        File metadataXml = recordingServiceHelper.getMetadataXmlLocation(recordingDir.getPath());

        RecordingMetadata r = recordingServiceHelper.getRecordingMetadata(metadataXml);
        if (r != null) {
            if (!destDir.exists()) destDir.mkdirs();

            try {
                FileUtils.moveDirectory(recordingDir, new File(destDir.getPath() + File.separatorChar + recordingId));
                r.setState(Recording.STATE_DELETED);
                r.setPublished(false);

                File medataXmlFile = recordingServiceHelper.getMetadataXmlLocation(
                  destDir.getAbsolutePath() + File.separatorChar + recordingId);

                
                return recordingServiceHelper.saveRecordingMetadata(medataXmlFile, r);
            } catch (IOException e) {}
        }
        return false;
    }


    private List<File> getAllDirectories(String state) {
        List<File> allDirectories = new ArrayList<>();

        String dir = getDestinationBaseDirectoryName(state);

        if ( dir != null ) {
            String[] formats = getPlaybackFormats(dir);
            for (String format : formats) {
                allDirectories.addAll(getDirectories(dir + File.separatorChar + format));
            }
        }

        return allDirectories;
    }

    private Map<String, List<File>> getAllDirectories(List<String> states) {
        Map<String, List<File>> allDirectories = new HashMap<>();

        if ( shouldIncludeState(states, Recording.STATE_PUBLISHED) ) {
            List<File> listedDirectories = getAllDirectories(Recording.STATE_PUBLISHED);
            allDirectories.put(Recording.STATE_PUBLISHED, listedDirectories);
        }

        if ( shouldIncludeState(states, Recording.STATE_UNPUBLISHED) ) {
            List<File> listedDirectories = getAllDirectories(Recording.STATE_UNPUBLISHED);
            allDirectories.put(Recording.STATE_UNPUBLISHED, listedDirectories);
        }

        if ( shouldIncludeState(states, Recording.STATE_DELETED) ) {
            List<File> listedDirectories = getAllDirectories(Recording.STATE_DELETED);
            allDirectories.put(Recording.STATE_DELETED, listedDirectories);
        }

        if ( shouldIncludeState(states, Recording.STATE_PROCESSING) ) {
            List<File> listedDirectories = getAllDirectories(Recording.STATE_PROCESSING);
            allDirectories.put(Recording.STATE_PROCESSING, listedDirectories);
        }

        if ( shouldIncludeState(states, Recording.STATE_PROCESSED) ) {
            List<File> listedDirectories = getAllDirectories(Recording.STATE_PROCESSED);
            allDirectories.put(Recording.STATE_PROCESSED, listedDirectories);
        }

        return allDirectories;
    }

    public void updateMetaParams(List<String> recordIDs, Map<String,String> metaParams) {
        
        List<String> states = new ArrayList<>();
        states.add(Recording.STATE_PUBLISHED);
        states.add(Recording.STATE_UNPUBLISHED);
        states.add(Recording.STATE_DELETED);

        
        Map<String, List<File>> allDirectories = getAllDirectories(states);

        
        for (String recordID : recordIDs) {
            for (Map.Entry<String, List<File>> entry : allDirectories.entrySet()) {
                List<File> recs = getRecordingsForPath(recordID, entry.getValue());

                
                for (File rec : recs) {
                    File metadataXml = recordingServiceHelper.getMetadataXmlLocation(rec.getPath());
                    updateRecordingMetadata(metadataXml, metaParams, metadataXml);
                }
            }
        }
    }

    public void updateRecordingMetadata(File srxMetadataXml, Map<String,String> metaParams, File destMetadataXml) {
        RecordingMetadata rec = recordingServiceHelper.getRecordingMetadata(srxMetadataXml);

        Map<String, String> recMeta = rec.getMeta();

        if (rec != null && !recMeta.isEmpty()) {
            for (Map.Entry<String,String> meta : metaParams.entrySet()) {
                if ( !"".equals(meta.getValue()) ) {
                    
                    recMeta.put(meta.getKey(), meta.getValue());
                } else {
                    
                    if ( recMeta.containsKey(meta.getKey()) ) {
                        recMeta.remove(meta.getKey());
                    }
                }
            }

            rec.setMeta(recMeta);

            
            recordingServiceHelper.saveRecordingMetadata(destMetadataXml, rec);
        }
    }


    private Map<String,File> indexRecordings(List<File> recs) {
        Map<String,File> indexedRecs = new HashMap<>();

        Iterator<File> iterator = recs.iterator();
        while (iterator.hasNext()) {
            File rec = iterator.next();
            indexedRecs.put(rec.getName(), rec);
        }

        return indexedRecs;
    }

    private String getDestinationBaseDirectoryName(String state) {
        return getDestinationBaseDirectoryName(state, false);
    }

    private String getDestinationBaseDirectoryName(String state, boolean forceDefault) {
        String baseDir = null;

        if ( state.equals(Recording.STATE_PROCESSING) || state.equals(Recording.STATE_PROCESSED) )
            baseDir = processDir;
        else if ( state.equals(Recording.STATE_PUBLISHED) )
            baseDir = publishedDir;
        else if ( state.equals(Recording.STATE_UNPUBLISHED) )
            baseDir = unpublishedDir;
        else if ( state.equals(Recording.STATE_DELETED) )
            baseDir = deletedDir;
        else if ( forceDefault )
            baseDir = publishedDir;

        return baseDir;
    }

    public String getCaptionTrackInboxDir() {
        return captionsDir + File.separatorChar + "var_78";
    }

    public String getCaptionsDir() {
      return captionsDir;
    }

    public String getCaptionFileUrlDirectory() {
        return defaultTextTrackUrl + "/var_79/";
    }

}
