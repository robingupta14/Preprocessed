

import var_0.var_1.var_2;
import var_0.var_1.var_3;
import var_0.var_1.var_4;
import var_0.var_1.var_5;
import var_0.var_1.var_6;
import var_0.var_1.var_7;
import var_0.var_8.var_9;
import var_0.var_8.var_10;
import var_0.var_8.var_11;
import var_12.var_13.var_14.var_15.var_8.var_16;
import var_12.var_13.var_14.var_17.var_1.var_18.var_19;
import var_12.var_13.var_14.var_17.var_1.var_20.var_21;
import var_12.var_13.var_14.var_17.var_1.var_22.var_23;
import var_12.var_13.var_14.var_24.var_25;
import var_12.var_13.var_14.var_8.var_26;
import var_12.var_13.var_14.var_8.var_27;
import var_12.var_13.var_14.var_8.var_28;


public abstract class var_29
    extends AbstractLogEnabled
    implements UnArchiver, FinalizerEnabled
{

    private File var_30;

    private File var_31;

    private File var_32;

    private boolean var_33 = true;

    private List var_34;

    private FileSelector[] var_35;

    
    private boolean var_36 = true;

    
    private boolean var_37 = false;

    public var_29()
    {
        
    }

    public var_29( final File param_2 )
    {
        this.var_32 = var_32;
    }

    @var_38
    public File method_0()
    {
        return var_30;
    }

    @var_38
    public void method_1( final File param_0 )
    {
        this.var_30 = var_30;
    }

    @var_38
    public File method_2()
    {
        return var_31;
    }

    @var_38
    public void method_3( final File param_1 )
    {
        this.var_31 = var_31;
    }

    @var_38
    public File method_4()
    {
        return var_32;
    }

    @var_38
    public void method_5( final File param_2 )
    {
        this.var_32 = var_32;
    }

    @var_38
    public boolean method_6()
    {
        return var_33;
    }

    @var_38
    public void method_7( final boolean param_6 )
    {
        var_33 = var_39;
    }

    @var_38
    public final void method_8()
        throws ArchiverException
    {
        var_40();
        var_41();
        var_42();
    }

    @var_38
    public final void method_8( final String param_7, final File param_8 )
        throws ArchiverException
    {
        var_40( var_43, var_44 );
        var_41( var_43, var_44 );
        var_42();
    }

    @var_38
    public void method_12( final ArchiveFinalizer param_9 )
    {
        if ( var_34 == null )
        {
            var_34 = new ArrayList();
        }

        var_34.var_46( var_45 );
    }

    @var_38
    public void method_13( final List param_10 )
    {
        var_34 = var_47;
    }

    private void method_11()
        throws ArchiverException
    {
        if ( var_34 != null )
        {
            for ( Object var_48 : var_34 )
            {
                final ArchiveFinalizer var_45 = (ArchiveFinalizer) var_48;

                var_45.var_49( this );
            }
        }
    }

    protected void method_9( final String param_7, final File param_8 )
    {
    }

    protected void method_9()
        throws ArchiverException
    {
        if ( var_32 == null )
        {
            throw new ArchiverException();
        }

        if ( var_32.var_50() )
        {
            throw new ArchiverException();
        }

        if ( !var_32.var_51() )
        {
            throw new ArchiverException();
        }

        if ( var_30 == null && var_31 == null )
        {
            throw new ArchiverException();
        }

        if ( var_30 != null && var_31 != null )
        {
            throw new ArchiverException();
        }

        if ( var_30 != null && !var_30.var_50() )
        {
            var_31 = var_30;
            var_30 = null;
        }

        if ( var_31 != null && var_31.var_50() )
        {
            var_30 = var_31;
            var_31 = null;
        }
    }

    @var_38
    public void method_14( final FileSelector[] param_3 )
    {
        this.var_35 = var_35;
    }

    @var_38
    public FileSelector[] method_15()
    {
        return var_35;
    }

    protected boolean method_16( final String param_12, final PlexusIoResource param_13 )
        throws ArchiverException
    {
        if ( var_35 != null )
        {
            for ( FileSelector var_54 : var_35 )
            {
                try
                {

                    if ( !var_54.var_52( var_53 ) )
                    {
                        return false;
                    }
                }
                catch ( final IOException var_55 )
                {
                    throw new ArchiverException(
                        "Failed to check, whether " + var_53.var_56() + " is selected: " + var_55.var_57(), var_55 );
                }
            }
        }
        return true;
    }

    protected abstract void method_10()
        throws ArchiverException;

    protected abstract void method_10( String param_7, File param_8 )
        throws ArchiverException;

    
    @var_38
    public boolean method_17()
    {
        return var_36;
    }

    
    @var_38
    public void method_18( final boolean param_4 )
    {
        this.var_36 = var_36;
    }

    
    @var_38
    public boolean method_19()
    {
        return var_37;
    }

    
    @var_38
    public void method_20( final boolean param_5 )
    {
        this.var_37 = var_37;
    }

    protected void var_58( final File param_14, final File param_15, final InputStream param_16,
                                final String param_17, final Date param_18, final boolean param_11,
                                final Integer param_19, String param_20 )
        throws IOException, ArchiverException
    {
        
        final File var_61 = var_26.var_62( var_59, var_60 );

        
        String var_63 = var_59.var_64();
        String var_65 = var_61.var_64();

        if ( !var_65.var_66( var_63 ) )
        {
            throw new ArchiverException()" );
        }

        try
        {
            if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) )
            {
                return;
            }

            
            final File dirF = f.getParentFile();
            if ( dirF != null )
            {
                dirF.mkdirs();
            }

            if ( !StringUtils.isEmpty( symlinkDestination ) )
            {
                SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) );
            }
            else if ( isDirectory )
            {
                f.mkdirs();
            }
            else
            {
                OutputStream out = null;
                try
                {
                    out = new FileOutputStream( f );

                    IOUtil.copy( compressedInputStream, out );
                    out.close();
                    out = null;
                }
                finally
                {
                    IOUtil.close( out );
                }
            }

            f.setLastModified( entryDate.getTime() );

            if ( !isIgnorePermissions() && mode != null && !isDirectory )
            {
                ArchiveEntryUtils.chmod( f, mode );
            }
        }
        catch ( final FileNotFoundException ex )
        {
            getLogger().warn( "Unable var_67 expand var_67 var_68 " + f.getPath() );
        }
    }

}
