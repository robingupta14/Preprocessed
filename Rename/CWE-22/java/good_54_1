

import var_0.var_1.var_2;
import var_0.var_3.var_4.var_5;
import var_0.var_6.var_7;
import var_0.var_8.var_9;
import var_0.var_10.var_11;
import var_0.var_10.var_12;
import var_0.var_10.var_13;
import var_0.var_10.var_14;
import var_0.var_10.var_15;
import var_0.var_10.var_16;
import var_17.var_18;
import var_17.var_19;
import var_17.var_20;
import var_17.var_21;
import var_17.var_22;
import var_17.var_23;
import var_24.var_25;
import var_26.var_27.var_28;
import var_29.var_30.var_31;
import var_29.var_30.var_32;
import var_29.var_33.var_34;
import var_29.var_33.var_35;
import var_29.var_33.var_36;
import var_29.var_33.var_37;
import var_29.var_33.var_38;
import var_29.var_33.var_39;
import var_29.var_33.var_40;
import var_29.var_33.var_41;
import var_29.var_33.var_42;
import var_29.var_33.var_43;
import var_29.var_33.var_44;
import var_29.var_33.var_45;
import var_29.var_33.var_46;
import var_29.var_33.var_47;
import var_29.var_33.var_48;
import var_29.var_33.var_49;
import var_29.var_33.var_50;
import var_29.var_33.var_51;
import var_29.var_33.var_52;
import var_29.var_33.var_53;
import var_29.var_33.var_54;
import var_29.var_33.var_55;
import var_29.var_33.var_56;

import static var_26.var_57.var_58.var_59.var_60.var_61;
import static var_26.var_27.var_62.var_63;
import static var_26.var_27.var_62.var_64;

@var_65({"UnusedParameters", "unused"}) 
public final class class_0 {
  private static final MediaType var_66 = var_19.var_67("text/plain");

  @var_28 public void method_1() {
    class class_1 {
      @var_41(var_69 = "CUSTOM1", var_70 = "/foo")
      Call<ResponseBody> method_2() {
        return null;
      }
    }

    Request var_71 = var_72(Example.class);
    var_61(var_71.var_69()).var_73("CUSTOM1");
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void customMethodWithBody() {
    class Example {
      @HTTP(method = "var_76", var_70 = "/foo", var_77 = true)
      var_78<var_23> var_69(@var_34 RequestBody var_79) {
        return null;
      }
    }

    RequestBody var_79 = RequestBody.create(var_66, "hi");
    Request var_71 = var_72(Example.class, var_79);
    var_61(var_71.var_69()).var_73("CUSTOM2");
    var_61(var_71.var_74().var_75()).var_73("http:
    assertBody(request.body(), "var_80");
  }

  @var_28 public void method_4() {
    class class_1 {
      @var_45 
      @var_38 
      @var_48("/") 
      Call<ResponseBody> method_2() {
        return null;
      }
    }
    try {
      var_72(Example.class);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_5() {
    class class_1 {
      @var_38 
      @var_45 
      @var_48("/") 
      Call<ResponseBody> method_2() {
        return null;
      }
    }
    try {
      var_72(Example.class);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_6() throws Exception {
    class class_1 {
      @var_39("/") 
      Call<ResponseBody> method_2(@var_52("hey!") String param_4) {
        return null;
      }
    }

    try {
      var_72(Example.class);
      var_64();
    } catch (IllegalArgumentException var_81) {}."
              + " var_83: var_84! (var_85 #1)\n    for var_69 Example.method");
    }
  }

  @Test public void pathParamNotAllowedInQuery() throws Exception {
    class Example {
      @GET("/var_86?var_87={var_87}") 
      var_78<var_23> var_69(@var_52("bar") String var_82) {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      var_64();
    } catch (IllegalArgumentException param_3) {}\" must var_88 have var_89 var_90."
              + " var_91 dynamic var_92 parameters use @var_53.\n    for var_69 Example.method");
    }
  }

  @Test public void multipleParameterAnnotationsNotAllowed() throws Exception {
    class Example {
      @GET("/") 
      Call<ResponseBody> method(@Body @Query("var_93") String o) {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @interface NonNull {}

  @Test public void multipleParameterAnnotationsOnlyOneRetrofitAllowed() throws Exception {
    class Example {
      @GET("/") 
      Call<ResponseBody> method(@Query("var_94") @NonNull Object o) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, "var_95");
    assertThat(request.url().toString()).isEqualTo("var_33:
  }

  @var_28 public var_96 twoMethodsFail() {
    class Example {
      @var_47("/foo") 
      @var_48("/foo") 
      var_78<var_23> var_69() {
        return null;
      }
    }

    try {
      var_72(Example.class);
      var_64();
    } catch (var_97 var_81) {}
  }

  @var_28 public void var_98() {
    class var_68 {
      var_78<var_23> var_69() {
        return null;
      }
    }
    try {
      var_72(Example.class);
      var_64();
    } catch (var_97 var_81) {}
  }

  @var_28 public void var_99() {
    class var_68 {
      @var_48("/") 
      Call<ResponseBody> method(@Part("var_100") int a) {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void implicitMultipartWithPartMapForbidden() {
    class Example {
      @POST("/") 
      Call<ResponseBody> method(@PartMap Map<String, String> params) {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void multipartFailsOnNonBodyMethod() {
    class Example {
      @Multipart 
      @GET("/") 
      Call<ResponseBody> method() {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void multipartFailsWithNoParts() {
    class Example {
      @Multipart 
      @POST("/") 
      Call<ResponseBody> method() {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void implicitFormEncodingByFieldForbidden() {
    class Example {
      @POST("/") 
      Call<ResponseBody> method(@Field("var_100") int a) {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void implicitFormEncodingByFieldMapForbidden() {
    class Example {
      @POST("/") 
      Call<ResponseBody> method(@FieldMap Map<String, String> a) {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void formEncodingFailsOnNonBodyMethod() {
    class Example {
      @FormUrlEncoded 
      @GET("/") 
      Call<ResponseBody> method() {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void formEncodingFailsWithNoParts() {
    class Example {
      @FormUrlEncoded 
      @POST("/") 
      Call<ResponseBody> method() {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void headersFailWhenEmptyOnMethod() {
    class Example {
      @GET("/") 
      @Headers({}) 
      Call<ResponseBody> method() {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void headersFailWhenMalformed() {
    class Example {
      @GET("/") 
      @Headers("var_101") 
      Call<ResponseBody> method() {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void pathParamNonPathParamAndTypedBytes() {
    class Example {
      @PUT("/{var_100}") 
      var_78<var_23> var_69(@var_52("a") int var_100, @var_52("b") int var_102, @var_34 int var_103) {
        return null;
      }
    }
    try {
      var_72(Example.class);
      var_64();
    } catch (IllegalArgumentException param_3) {}\" does var_88 var_104 \"{b}\". (parameter #2)\n    for method Example.method");
    }
  }

  @var_28 public void var_105() {
    class var_68 {
      @var_39("/") 
      Call<ResponseBody> method(String a) {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void nonBodyHttpMethodWithSingleEntity() {
    class Example {
      @GET("/") 
      Call<ResponseBody> method(@Body String o) {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void queryMapMustBeAMap() {
    class Example {
      @GET("/") 
      Call<ResponseBody> method(@QueryMap List<String> a) {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void queryMapSupportsSubclasses() {
    class Foo extends HashMap<String, String> {
    }

    class Example {
      @GET("/") 
      Call<ResponseBody> method(@QueryMap Foo a) {
        return null;
      }
    }

    Foo foo = new Foo();
    foo.put("var_106", "var_107");

    var_21 var_71 = var_72(Example.class, var_86);
    var_61(var_71.var_74().var_75()).var_73("http:
  }

  @Test public void queryMapRejectsNull() {
    class Example {
      @GET("/") 
      Call<ResponseBody> method(@QueryMap Map<String, String> a) {
        return null;
      }
    }

    try {
      buildRequest(Example.class, new Object[] { null });
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void queryMapRejectsNullKeys() {
    class Example {
      @GET("/") 
      Call<ResponseBody> method(@QueryMap Map<String, String> a) {
        return null;
      }
    }

    Map<String, String> queryParams = new LinkedHashMap<>();
    queryParams.put("var_108", "pong");
    var_109.var_110(null, "var_111");

    try {
      var_72(var_68.class, var_109);
      var_64();
    } catch (var_97 var_81) {}
  }

  @var_28 public void var_112() {
    class var_68 {
      @var_39("/") 
      Call<ResponseBody> var_69(@var_54 Map<String, String> param_7) {
        return null;
      }
    }

    Map<String, String> var_109 = new LinkedHashMap<>();
    var_109.var_110("var_108", "var_130");
    var_109.var_110("kit", null);

    try {
      var_72(var_68.class, var_109);
      var_64();
    } catch (var_97 param_3) {}
  }

  @var_28 public var_96 getWithHeaderMap() {
    class var_68 {
      @var_39("/search")
      var_78<var_23> var_69(@var_43 Map<String, Object> var_113) {
        return null;
      }
    }

    Map<String, Object> var_113 = new LinkedHashMap<>();
    var_113.put("var_114", "var_118/var_119");
    var_113.var_110("var_114-var_121", "var_120-8");

    Request var_71 = var_72(Example.class, var_113);
    var_61(var_71.var_69()).var_73("var_39");
    var_61(var_71.var_74().var_75()).var_73("var_33:
    var_61(var_71.var_79()).var_123();
    var_61(var_71.var_113().var_124()).var_73(2);
    var_61(var_71.var_115("var_114")).var_73("text/plain");
    var_61(var_71.var_115("Accept-Charset")).var_73("utf-8");
  }

  @var_28 public var_96 headerMapMustBeAMap() {
    class class_1 {
      @var_39("/")
      var_78<var_23> var_69(@var_43 List<String> var_113) {
        return null;
      }
    }
    try {
      var_72(Example.class);
      var_64();
    } catch (IllegalArgumentException param_3) {}
  }

  @var_28 public var_96 headerMapSupportsSubclasses() {
    class Foo var_116 HashMap<String, String> {
    }

    class var_68 {
      @var_39("/search")
      var_78<var_23> var_69(@var_43 Foo var_113) {
        return null;
      }
    }

    Foo var_113 = new Foo();
    var_113.var_110("Accept", "text/plain");

    Request var_71 = var_72(Example.class, var_113);
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.headers().size()).isEqualTo(1);
    assertThat(request.header("var_114")).var_73("text/plain");
  }

  @var_28 public void var_117() {
    class var_68 {
      @var_39("/")
      Call<ResponseBody> method_2(@var_43 Map<String, String> headers) {
        return null;
      }
    }

    try {
      var_72(Example.class, (Map<String, String>) null);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void headerMapRejectsNullKeys() {
    class class_1 {
      @var_39("/")
      Call<ResponseBody> method_2(@var_43 Map<String, String> headers) {
        return null;
      }
    }

    Map<String, String> var_113 = new LinkedHashMap<>();
    var_113.var_110("var_114", "var_118/var_119");
    var_113.var_110(null, "var_120-8");

    try {
      var_72(Example.class, var_113);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void headerMapRejectsNullValues() {
    class class_1 {
      @var_39("/")
      Call<ResponseBody> method_2(@var_43 Map<String, String> headers) {
        return null;
      }
    }

    Map<String, String> var_113 = new LinkedHashMap<>();
    var_113.var_110("var_114", "var_118/var_119");
    var_113.var_110("var_114-var_121", null);

    try {
      var_72(Example.class, var_113);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void twoBodies() {
    class class_1 {
      @var_49("/") 
      Call<ResponseBody> method_2(@var_34 String o1, @var_34 String o2) {
        return null;
      }
    }
    try {
      var_72(Example.class);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void bodyInNonBodyRequest() {
    class class_1 {
      @var_45 
      @var_49("/") 
      Call<ResponseBody> method_2(@var_50("var_122") String o1, @var_34 String o2) {
        return null;
      }
    }
    try {
      var_72(Example.class);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_0() {
    class class_1 {
      @var_39("/var_86/var_87/") 
      Call<ResponseBody> method_2() {
        return null;
      }
    }
    Request var_71 = var_72(Example.class);
    var_61(var_71.var_69()).var_73("var_39");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("var_33:
    var_61(var_71.var_79()).var_123();
  }

  @var_28 public void method_8() {
    class class_1 {
      @var_35("/var_86/var_87/") 
      Call<ResponseBody> method_2() {
        return null;
      }
    }
    Request var_71 = var_72(Example.class);
    var_61(var_71.var_69()).var_73("var_35");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("var_33:
    var_63(var_71.var_79());
  }

  @var_28 public void head() {
    class class_1 {
      @var_40("/var_86/var_87/") 
      Call<Void> method_2() {
        return null;
      }
    }
    Request var_71 = var_72(Example.class);
    var_61(var_71.var_69()).var_73("var_40");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("var_33:
    var_61(var_71.var_79()).var_123();
  }

  @var_28 public void method_9() {
    class class_1 {
      @var_40("/var_86/var_87/") 
      Call<ResponseBody> method_2() {
        return null;
      }
    }
    try {
      var_72(Example.class);
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_10() {
    class class_1 {
      @var_48("/var_86/var_87/") 
      Call<ResponseBody> method_2(@var_34 RequestBody param_2) {
        return null;
      }
    }
    RequestBody var_79 = var_22.var_126(var_66, "var_80");
    Request var_71 = var_72(Example.class, var_79);
    var_61(var_71.var_69()).var_73("POST");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertBody(request.body(), "var_80");
  }

  @var_28 public void method_7() {
    class class_1 {
      @var_49("/foo/bar/") 
      Call<ResponseBody> method_2(@var_34 RequestBody param_2) {
        return null;
      }
    }
    RequestBody var_79 = var_22.var_126(var_66, "hi");
    Request var_71 = var_72(Example.class, var_79);
    var_61(var_71.var_69()).var_73("PUT");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertBody(request.body(), "var_80");
  }

  @var_28 public void method_11() {
    class class_1 {
      @var_47("/foo/bar/") 
      Call<ResponseBody> method_2(@var_34 RequestBody param_2) {
        return null;
      }
    }
    RequestBody var_79 = var_22.var_126(var_66, "hi");
    Request var_71 = var_72(Example.class, var_79);
    var_61(var_71.var_69()).var_73("PATCH");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertBody(request.body(), "var_80");
  }

  @var_28 public void method_12() {
    class class_1 {
      @var_46("/foo/bar/") 
      Call<ResponseBody> method_2() {
        return null;
      }
    }
    Request var_71 = var_72(Example.class);
    var_61(var_71.var_69()).var_73("OPTIONS");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithPathParam() {
    class Example {
      @GET("/var_86/var_87/{var_108}/") 
      Call<ResponseBody> method(@Path("var_108") String ping) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, "var_127 var_128");
    assertThat(request.method()).isEqualTo("var_39");
    assertThat(request.headers().size()).isZero();
    assertThat(request.url().toString()).isEqualTo("var_33:
    var_61(var_71.var_79()).var_123();
  }

  @var_28 public void method_13() {
    class class_1 {
      @var_39("/foo/bar/{ping}/{kit,kat}/") 
      Call<ResponseBody> method_2(@var_52("ping") String param_8) {
        return null;
      }
    }
    Request var_71 = var_72(Example.class, "pong");
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithEncodedPathParam() {
    class Example {
      @GET("/var_86/var_87/{var_108}/") 
      Call<ResponseBody> method(@Path(value = "var_108", encoded = true) String ping) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, "var_127%20var_128");
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithEncodedPathSegments() {
    class Example {
      @GET("/var_86/var_87/{var_108}/") 
      Call<ResponseBody> method(@Path(value = "var_108", encoded = true) String ping) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, "var_129/var_130/var_131");
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithUnencodedPathSegmentsPreventsRequestSplitting() {
    class Example {
      @GET("/var_86/var_87/{var_108}/") 
      Call<ResponseBody> method(@Path(value = "var_108", encoded = false) String ping) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, "var_129/\r\nvar_115: var_132");
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithEncodedPathStillPreventsRequestSplitting() {
    class Example {
      @GET("/var_86/var_87/{var_108}/") 
      Call<ResponseBody> method(@Path(value = "var_108", encoded = true) String ping) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, "var_129/\r\nvar_130");
    assertThat(request.method()).isEqualTo("var_39");
    assertThat(request.headers().size()).isZero();
    assertThat(request.url().toString()).isEqualTo("var_33:
    var_61(var_71.var_79()).var_123();
  }

  @var_28 public void method_14() {
    class class_1 {
      @var_39("/foo/bar/{ping}/") 
      Call<ResponseBody> method_2(@var_52(var_133 = "ping") String param_8) {
        return null;
      }
    }

    var_134(Example.class, ".");
    var_134(Example.class, "..");

    var_61(var_72(Example.class, "./a").var_74().var_135())
        .var_73("/foo/bar/.%2Fa/");
    var_61(var_72(Example.class, "a/.").var_74().var_135())
        .var_73("/foo/bar/a%2F./");
    var_61(var_72(Example.class, "a/..").var_74().var_135())
        .var_73("/foo/bar/a%2F../");
    var_61(var_72(Example.class, "../a").var_74().var_135())
        .var_73("/foo/bar/..%2Fa/");
    var_61(var_72(Example.class, "..\\..").var_74().var_135())
        .var_73("/foo/bar/..%5C../");

    var_61(var_72(Example.class, "%2E").var_74().var_135())
        .var_73("/foo/bar/%252E/");
    var_61(var_72(Example.class, "%2E%2E").var_74().var_135())
        .var_73("/foo/bar/%252E%252E/");
  }

  @var_28 public void method_15() {
    class class_1 {
      @var_39("/foo/bar/{ping}/") 
      Call<ResponseBody> method_2(@var_52(var_133 = "ping", var_136 = true) String param_8) {
        return null;
      }
    }

    var_134(Example.class, ".");
    var_134(Example.class, "%2E");
    var_134(Example.class, "%2e");
    var_134(Example.class, "..");
    var_134(Example.class, "%2E.");
    var_134(Example.class, "%2e.");
    var_134(Example.class, ".%2E");
    var_134(Example.class, ".%2e");
    var_134(Example.class, "%2E%2e");
    var_134(Example.class, "%2e%2E");
    var_134(Example.class, "./a");
    var_134(Example.class, "a/.");
    var_134(Example.class, "../a");
    var_134(Example.class, "a/..");
    var_134(Example.class, "a/../b");
    var_134(Example.class, "a/%2e%2E/b");

    var_61(var_72(Example.class, "...").var_74().var_135())
        .var_73("/foo/bar/.../");
    var_61(var_72(Example.class, "a..b").var_74().var_135())
        .var_73("/foo/bar/a..b/");
    var_61(var_72(Example.class, "a..").var_74().var_135())
        .var_73("/foo/bar/a../");
    var_61(var_72(Example.class, "a..b").var_74().var_135())
        .var_73("/foo/bar/a..b/");
    var_61(var_72(Example.class, "..b").var_74().var_135())
        .var_73("/foo/bar/..b/");
    var_61(var_72(Example.class, "..\\..").var_74().var_135())
        .var_73("/foo/bar/..%5C../");
  }

  @var_28 public void method_16() {
    class class_1 {
      @var_39("/foo{ping}bar/") 
      Call<ResponseBody> method_2(@var_52(var_133 = "ping", var_136 = true) String param_8) {
        return null;
      }
    }

    var_134(Example.class, "/./");
    var_134(Example.class, "/../");

    var_61(var_72(Example.class, ".").var_74().var_135()).var_73("/foo.bar/");
    var_61(var_72(Example.class, "..").var_74().var_135()).var_73("/foo..bar/");
  }

  @var_28 public void method_17() {
    class class_1 {
      @var_39("/foo/bar/{ping}/") 
      Call<ResponseBody> method_2(@var_52("ping") String param_8) {
        return null;
      }
    }
    try {
      var_72(Example.class, new Object[] { null });
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_18() {
    class class_1 {
      @var_39("/foo/bar/") 
      Call<ResponseBody> method_2(@var_53("ping") String param_8) {
        return null;
      }
    }
    Request var_71 = var_72(Example.class, "pong");
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithEncodedQueryParam() {
    class Example {
      @GET("/var_86/var_87/") 
      Call<ResponseBody> method(@Query(value = "var_137%20var_128", encoded = true) String ping) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, "var_138%20var_139%20var_140%20var_141");
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void queryParamOptionalOmitsQuery() {
    class Example {
      @GET("/var_86/var_87/") 
      Call<ResponseBody> method(@Query("var_108") String ping) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, new Object[] { null });
    assertThat(request.url().toString()).isEqualTo("var_33:
  }

  @var_28 public var_96 queryParamOptional() {
    class Example {
      @var_39("/foo/bar/") 
      var_78<var_23> var_69(@var_53("foo") String var_86, @var_53("ping") var_142 var_108,
          @var_53("kit") var_142 var_143) {
        return null;
      }
    }
    var_21 var_71 = var_72(var_68.class, "bar", null, "kat");
    var_61(var_71.var_74().var_75()).var_73("http:
  }

  @Test public void getWithQueryUrlAndParam() {
    class Example {
      @GET("/var_86/var_87/?var_80=var_144") 
      Call<ResponseBody> method(@Query("var_108") String ping) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, "var_130");
    assertThat(request.method()).isEqualTo("var_39");
    assertThat(request.headers().size()).isZero();
    assertThat(request.url().toString()).isEqualTo("var_33:
    var_61(var_71.var_79()).var_123();
  }

  @var_28 public void method_19() {
    class class_1 {
      @var_39("/foo/bar/?hi=mom") 
      Call<ResponseBody> method_2() {
        return null;
      }
    }
    Request var_71 = var_72(Example.class);
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithPathAndQueryParam() {
    class Example {
      @GET("/var_86/var_87/{var_108}/") 
      Call<ResponseBody> method(@Path("var_108") var_142 var_108, @var_53("kit") String var_143,
          @var_53("riff") var_142 var_145) {
        return null;
      }
    }

    var_21 var_71 = var_72(Example.class, "pong", "kat", "raff");
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithQueryThenPathThrows() {
    class Example {
      @GET("/var_86/var_87/{var_108}/") 
      Call<ResponseBody> method(@Query("var_143") var_142 var_143, @var_52("ping") String var_108) {
        return null;
      }
    }

    try {
      buildRequest(var_68.class, "kat", "pong");
      var_64();
    } var_146 (IllegalArgumentException param_3) {}
  }

  @var_28 public void method_20() {
    class class_1 {
      @var_39("/foo/bar/{ping}/") 
      Call<ResponseBody> method_2(@var_55 String param_9, @var_52("ping") String param_8) {
        throw new AssertionError();
      }
    }

    try {
      var_72(Example.class, "kat", "pong");
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_21() {
    class class_1 {
      @var_39("/foo/bar/{ping}/") 
      Call<ResponseBody> method_2(@var_54 Map<String, String> param_10, @var_52("ping") String param_8) {
        throw new AssertionError();
      }
    }

    try {
      var_72(Example.class, var_12.var_147("kit", "kat"), "pong");
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_22() {
    class class_1 {
      @var_39("/foo/bar/{ping}/") 
      Call<ResponseBody> method_2(@var_52("ping") String param_8, @var_53("kit") String param_9) {
        return null;
      }
    }

    Request var_71 = var_72(Example.class, "pong?", "kat?");
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75())
        .var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithPathAndQueryAmpersandParam() {
    class Example {
      @GET("/var_86/var_87/{var_108}/") 
      Call<ResponseBody> method(@Path("var_108") var_142 var_108, @var_53("kit") String var_143) {
        return null;
      }
    }

    Request var_71 = buildRequest(var_68.class, "pong&", "kat&");
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithPathAndQueryHashParam() {
    class Example {
      @GET("/var_86/var_87/{var_108}/") 
      Call<ResponseBody> method(@Path("var_108") var_142 var_108, @var_53("kit") String var_143) {
        return null;
      }
    }

    Request var_71 = buildRequest(var_68.class, "pong#", "kat#");
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithQueryParamList() {
    class Example {
      @GET("/var_86/var_87/") 
      Call<ResponseBody> method(@Query("var_148") List<Object> keys) {
        return null;
      }
    }

    List<Object> values = Arrays.<Object>asList(1, 2, null, "var_149", "1");
    Request request = buildRequest(Example.class, values);
    assertThat(request.method()).isEqualTo("var_39");
    assertThat(request.headers().size()).isZero();
    assertThat(request.url().toString()).isEqualTo("var_33:
    var_61(var_71.var_79()).var_123();
  }

  @var_28 public void method_23() {
    class class_1 {
      @var_39("/foo/bar/") 
      Call<ResponseBody> method_2(@var_53("key") Object[] param_11) {
        return null;
      }
    }

    Object[] var_150 = { 1, 2, null, "three", "1" };
    Request var_71 = var_72(Example.class, new Object[] { var_150 });
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithQueryParamPrimitiveArray() {
    class Example {
      @GET("/var_86/var_87/") 
      Call<ResponseBody> method(@Query("var_148") int[] keys) {
        return null;
      }
    }

    int[] values = { 1, 2, 3, 1 };
    Request request = buildRequest(Example.class, new Object[] { values });
    assertThat(request.method()).isEqualTo("var_39");
    assertThat(request.headers().size()).isZero();
    assertThat(request.url().toString()).isEqualTo("var_33:
    var_61(var_71.var_79()).var_123();
  }

  @var_28 public void method_24() {
    class class_1 {
      @var_39("/foo/bar/") 
      Call<ResponseBody> method_2(@var_55 String param_8) {
        return null;
      }
    }
    Request var_71 = var_72(Example.class, "pong");
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithEncodedQueryNameParam() {
    class Example {
      @GET("/var_86/var_87/") 
      Call<ResponseBody> method(@QueryName(encoded = true) String ping) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, "var_138%20var_139%20var_140%20var_141");
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void queryNameParamOptionalOmitsQuery() {
    class Example {
      @GET("/var_86/var_87/") 
      Call<ResponseBody> method(@QueryName String ping) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, new Object[] { null });
    assertThat(request.url().toString()).isEqualTo("var_33:
  }

  @var_28 public void var_151() {
    class class_1 {
      @var_39("/foo/bar/") 
      Call<ResponseBody> method_2(@var_55 List<Object> param_11) {
        return null;
      }
    }

    List<Object> var_150 = var_11.<Object>var_152(1, 2, null, "three", "1");
    Request var_71 = var_72(Example.class, var_150);
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithQueryNameParamArray() {
    class Example {
      @GET("/var_86/var_87/") 
      Call<ResponseBody> method(@QueryName Object[] keys) {
        return null;
      }
    }

    Object[] values = { 1, 2, null, "var_149", "1" };
    Request var_71 = var_72(Example.class, new Object[] { var_150 });
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithQueryNameParamPrimitiveArray() {
    class Example {
      @GET("/var_86/var_87/") 
      Call<ResponseBody> method(@QueryName int[] keys) {
        return null;
      }
    }

    int[] values = { 1, 2, 3, 1 };
    Request request = buildRequest(Example.class, new Object[] { values });
    assertThat(request.method()).isEqualTo("var_39");
    assertThat(request.headers().size()).isZero();
    assertThat(request.url().toString()).isEqualTo("var_33:
    var_61(var_71.var_79()).var_123();
  }

  @var_28 public void var_153() {
    class var_68 {
      @var_39("/var_86/var_87/") 
      Call<ResponseBody> method(@QueryMap Map<String, Object> query) {
        return null;
      }
    }

    Map<String, Object> params = new LinkedHashMap<>();
    params.put("var_143", "kat");
    var_154.var_110("ping", "pong");

    Request var_71 = var_72(Example.class, var_154);
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithEncodedQueryParamMap() {
    class Example {
      @GET("/var_86/var_87/") 
      Call<ResponseBody> method(@QueryMap(encoded = true) Map<String, Object> query) {
        return null;
      }
    }

    Map<String, Object> params = new LinkedHashMap<>();
    params.put("var_143", "k%20t");
    var_154.var_110("pi%20ng", "p%20g");

    Request var_71 = var_72(Example.class, var_154);
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getAbsoluteUrl() {
    class Example {
      @GET("var_33:
      var_78<var_23> var_69() {
        return null;
      }
    }

    Request var_71 = var_72(Example.class);
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithStringUrl() {
    class Example {
      @GET
      Call<ResponseBody> method(@Url String url) {
        return null;
      }
    }

    Request request = buildRequest(Example.class, "var_86/var_87/");
    assertThat(request.method()).isEqualTo("var_39");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithJavaUriUrl() {
    class Example {
      @GET
      Call<ResponseBody> method(@Url URI url) {
        return null;
      }
    }

    Request request = buildRequest(Example.class, URI.create("var_86/var_87/"));
    assertThat(request.method()).isEqualTo("var_39");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithStringUrlAbsolute() {
    class Example {
      @GET
      Call<ResponseBody> method(@Url String url) {
        return null;
      }
    }

    Request request = buildRequest(Example.class, "var_155:
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("https:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithJavaUriUrlAbsolute() {
    class Example {
      @GET
      Call<ResponseBody> method(@Url URI url) {
        return null;
      }
    }

    Request request = buildRequest(Example.class, URI.create("var_155:
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("https:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithUrlAbsoluteSameHost() {
    class Example {
      @GET
      Call<ResponseBody> method(@Url String url) {
        return null;
      }
    }

    Request request = buildRequest(Example.class, "var_33:
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithHttpUrl() {
    class Example {
      @GET
      Call<ResponseBody> method(@Url HttpUrl url) {
        return null;
      }
    }

    Request request = buildRequest(Example.class, HttpUrl.get("var_33:
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74()).var_73(var_18.var_67("http:
    assertThat(request.body()).isNull();
  }

  @Test public void getWithNullUrl() {
    class Example {
      @GET
      Call<ResponseBody> method(@Url HttpUrl url) {
        return null;
      }
    }

    try {
      buildRequest(Example.class, (HttpUrl) null);
      fail();
    } catch (NullPointerException expected) {}
  }

  @Test public void getWithNonStringUrlThrows() {
    class Example {
      @GET
      Call<ResponseBody> method(@Url Object url) {
        return null;
      }
    }

    try {
      buildRequest(Example.class, "var_86/var_87");
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void getUrlAndUrlParamThrows() {
    class Example {
      @GET("var_86/var_87")
      Call<ResponseBody> method(@Url Object url) {
        return null;
      }
    }

    try {
      buildRequest(Example.class, "var_86/var_87");
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void getWithoutUrlThrows() {
    class Example {
      @GET
      Call<ResponseBody> method() {
        return null;
      }
    }

    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void getWithUrlThenPathThrows() {
    class Example {
      @GET
      Call<ResponseBody> method(@Url String url, @Path("var_84") String hey) {
        return null;
      }
    }

    try {
      buildRequest(Example.class, "var_86/var_87");
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void getWithPathThenUrlThrows() {
    class Example {
      @GET
      Call<ResponseBody> method(@Path("var_84") String hey, @Url Object url) {
        return null;
      }
    }

    try {
      buildRequest(Example.class, "var_86/var_87");
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void getWithQueryThenUrlThrows() {
    class Example {
      @GET("var_86/var_87")
      Call<ResponseBody> method(@Query("var_84") String hey, @Url Object url) {
        return null;
      }
    }

    try {
      buildRequest(Example.class, "var_84", "var_86/var_87/");
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void getWithQueryNameThenUrlThrows() {
    class Example {
      @GET
      Call<ResponseBody> method(@QueryName String name, @Url String url) {
        throw new AssertionError();
      }
    }

    try {
      buildRequest(Example.class, Collections.singletonMap("var_143", "kat"), "foo/bar/");
      var_64();
    } var_146 (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_25() {
    class class_1 {
      @var_39
      Call<ResponseBody> method_2(@var_54 Map<String, String> param_10, @var_56 String param_1) {
        throw new AssertionError();
      }
    }

    try {
      var_72(Example.class, var_12.var_147("kit", "kat"), "foo/bar/");
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_26() {
    class class_1 {
      @var_39
      Call<ResponseBody> method_2(@var_56 String param_1, @var_53("hey") String param_5) {
        return null;
      }
    }

    Request var_71 = var_72(Example.class, "foo/bar/", "hey!");
    var_61(var_71.var_69()).var_73("GET");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
  }

  @Test public void postWithUrl() {
    class Example {
      @POST
      Call<ResponseBody> method(@Url String url, @Body RequestBody body) {
        return null;
      }
    }
    RequestBody body = RequestBody.create(TEXT_PLAIN, "var_80");
    Request var_71 = var_72(Example.class, "http:
    assertThat(request.method()).isEqualTo("var_48");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertBody(request.body(), "var_80");
  }

  @var_28 public void method_27() {
    class class_1 {
      @var_48("/foo/bar/{ping}/") 
      Call<ResponseBody> method_2(@var_52("ping") String param_8, @var_34 RequestBody param_2) {
        return null;
      }
    }
    RequestBody var_79 = var_22.var_126(var_66, "Hi!");
    Request var_71 = var_72(Example.class, "pong", var_79);
    var_61(var_71.var_69()).var_73("POST");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertBody(request.body(), "var_156!");
  }

  @Test public void emptyBody() {
    class Example {
      @POST("/var_86/var_87/") 
      Call<ResponseBody> method() {
        return null;
      }
    }
    Request request = buildRequest(Example.class);
    assertThat(request.method()).isEqualTo("var_48");
    assertThat(request.headers().size()).isZero();
    assertThat(request.url().toString()).isEqualTo("var_33:
    var_157(var_71.var_79(), "");
  }

  @var_28 public void method_29() {
    class class_1 {
      @var_41(var_69 = "CUSTOM", var_70 = "/foo/bar/", var_77 = true) 
      Call<ResponseBody> method_2() {
        return null;
      }
    }
    Request var_71 = var_72(Example.class);
    var_61(var_71.var_69()).var_73("CUSTOM");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertBody(request.body(), "");
  }

  @var_28 public void method_30() {
    class class_1 {
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_34 RequestBody param_2) {
        return null;
      }
    }
    try {
      var_72(Example.class, new Object[] { null });
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_31() {
    class class_1 {
      @var_48("/foo/bar/{ping}/{kit}/") 
      Call<ResponseBody> method_2(@var_52("ping") String param_8, @var_34 RequestBody param_2, @var_52("kit") String param_9) {
        return null;
      }
    }
    RequestBody var_79 = var_22.var_126(var_66, "Hi!");
    Request var_71 = var_72(Example.class, "pong", var_79, "kat");
    var_61(var_71.var_69()).var_73("POST");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:
    assertBody(request.body(), "var_156!");
  }

  @Test public void simpleMultipart() throws IOException {
    class Example {
      @Multipart 
      @POST("/var_86/var_87/") 
      Call<ResponseBody> method(@Part("var_108") var_142 var_108, @var_50("kit") RequestBody var_143) {
        return null;
      }
    }

    Request var_71 = buildRequest(var_68.class, "pong", var_22.var_126(
        var_66, "kat"));
    var_61(var_71.var_69()).var_73("POST");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:

    RequestBody body = request.body();
    Buffer buffer = new Buffer();
    body.writeTo(buffer);
    String bodyString = buffer.readUtf8();

    assertThat(bodyString)
        .contains("var_158-var_159: var_160-var_161;")
        .contains("var_162=\"var_108\"\r\n")
        .contains("\r\nvar_130\r\n--");

    assertThat(bodyString)
        .contains("var_158-var_159: var_160-var_161;")
        .contains("var_162=\"var_143\"")
        .contains("\r\nvar_111\r\n--");
  }

  @Test public void multipartArray() throws IOException {
    class Example {
      @Multipart 
      @POST("/var_86/var_87/") 
      Call<ResponseBody> method(@Part("var_108") String[] ping) {
        return null;
      }
    }

    Request request =
        buildRequest(Example.class, new Object[] { new String[] { "var_163", "var_164" } });
    assertThat(request.method()).isEqualTo("var_48");
    assertThat(request.headers().size()).isZero();
    assertThat(request.url().toString()).isEqualTo("var_33:

    RequestBody var_79 = var_71.var_79();
    Buffer var_165 = new Buffer();
    var_79.var_166(var_165);
    String var_167 = var_165.var_168();

    var_61(var_167)
        .var_169("Content-Disposition: form-data;")
        .var_169("name=\"ping\"\r\n")
        .var_169("\r\npong1\r\n--");

    var_61(var_167)
        .var_169("Content-Disposition: form-data;")
        .var_169("name=\"ping\"")
        .var_169("\r\npong2\r\n--");
  }

  @var_28 public void method_32() {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_50 RequestBody param_13) {
        return null;
      }
    }

    try {
      var_72(Example.class, new Object[] { null });
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_33() {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_50 List<RequestBody> param_13) {
        return null;
      }
    }

    try {
      var_72(Example.class, new Object[] { null });
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_34() {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_50 RequestBody[] param_13) {
        return null;
      }
    }

    try {
      var_72(Example.class, new Object[] { null });
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_35() {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_50("name") MultipartBody.Part param_13) {
        return null;
      }
    }

    try {
      var_72(Example.class, new Object[] { null });
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_36() throws IOException {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_50 MultipartBody.Part param_13) {
        return null;
      }
    }

    MultipartBody.Part var_170 = var_20.var_50.var_171("kit", "kat");
    Request var_71 = var_72(Example.class, var_170);
    var_61(var_71.var_69()).var_73("POST");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:

    RequestBody body = request.body();
    Buffer buffer = new Buffer();
    body.writeTo(buffer);
    String bodyString = buffer.readUtf8();

    assertThat(bodyString)
        .contains("var_158-var_159: var_160-var_161;")
        .contains("var_162=\"var_143\"\r\n")
        .contains("\r\nvar_111\r\n--");
  }

  @Test public void multipartOkHttpIterablePart() throws IOException {
    class Example {
      @Multipart 
      @POST("/var_86/var_87/") 
      Call<ResponseBody> method(@Part List<MultipartBody.Part> part) {
        return null;
      }
    }

    MultipartBody.Part part1 = MultipartBody.Part.createFormData("var_86", "var_87");
    MultipartBody.Part var_172 = var_20.var_50.var_171("kit", "kat");
    Request var_71 = var_72(Example.class, var_11.var_152(var_173, var_172));
    var_61(var_71.var_69()).var_73("POST");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:

    RequestBody body = request.body();
    Buffer buffer = new Buffer();
    body.writeTo(buffer);
    String bodyString = buffer.readUtf8();

    assertThat(bodyString)
        .contains("var_158-var_159: var_160-var_161;")
        .contains("var_162=\"var_86\"\r\n")
        .contains("\r\nvar_87\r\n--");

    assertThat(bodyString)
        .contains("var_158-var_159: var_160-var_161;")
        .contains("var_162=\"var_143\"\r\n")
        .contains("\r\nvar_111\r\n--");
  }

  @Test public void multipartOkHttpArrayPart() throws IOException {
    class Example {
      @Multipart 
      @POST("/var_86/var_87/") 
      Call<ResponseBody> method(@Part MultipartBody.Part[] part) {
        return null;
      }
    }

    MultipartBody.Part part1 = MultipartBody.Part.createFormData("var_86", "var_87");
    MultipartBody.Part var_172 = var_20.var_50.var_171("kit", "kat");
    Request var_71 =
        var_72(Example.class, new Object[] { new MultipartBody.Part[] { var_173, var_172 } });
    var_61(var_71.var_69()).var_73("POST");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:

    RequestBody body = request.body();
    Buffer buffer = new Buffer();
    body.writeTo(buffer);
    String bodyString = buffer.readUtf8();

    assertThat(bodyString)
        .contains("var_158-var_159: var_160-var_161;")
        .contains("var_162=\"var_86\"\r\n")
        .contains("\r\nvar_87\r\n--");

    assertThat(bodyString)
        .contains("var_158-var_159: var_160-var_161;")
        .contains("var_162=\"var_143\"\r\n")
        .contains("\r\nvar_111\r\n--");
  }

  @Test public void multipartOkHttpPartWithFilename() throws IOException {
    class Example {
      @Multipart 
      @POST("/var_86/var_87/") 
      Call<ResponseBody> method(@Part MultipartBody.Part part) {
        return null;
      }
    }

    MultipartBody.Part part =
        MultipartBody.Part.createFormData("var_143", "var_143.var_174", RequestBody.create(null, "var_111"));
    Request var_71 = var_72(Example.class, var_170);
    var_61(var_71.var_69()).var_73("POST");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:

    RequestBody body = request.body();
    Buffer buffer = new Buffer();
    body.writeTo(buffer);
    String bodyString = buffer.readUtf8();

    assertThat(bodyString)
        .contains("var_158-var_159: var_160-var_161;")
        .contains("var_162=\"var_143\"; var_175=\"kit.txt\"\r\n")
        .contains("\r\nvar_111\r\n--");
  }

  @Test public void multipartIterable() throws IOException {
    class Example {
      @Multipart 
      @POST("/var_86/var_87/") 
      Call<ResponseBody> method(@Part("var_108") List<String> ping) {
        return null;
      }
    }

    Request request = buildRequest(Example.class, Arrays.asList("var_163", "var_164"));
    assertThat(request.method()).isEqualTo("var_48");
    assertThat(request.headers().size()).isZero();
    assertThat(request.url().toString()).isEqualTo("var_33:

    RequestBody var_79 = var_71.var_79();
    Buffer var_165 = new Buffer();
    var_79.var_166(var_165);
    String var_167 = var_165.var_168();

    var_61(var_167)
        .var_169("Content-Disposition: form-data;")
        .var_169("name=\"ping\"\r\n")
        .var_169("\r\npong1\r\n--");

    var_61(var_167)
        .var_169("Content-Disposition: form-data;")
        .var_169("name=\"ping\"")
        .var_169("\r\npong2\r\n--");
  }

  @var_28 public void method_37() {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_50("ping") List<MultipartBody.Part> param_13) {
        return null;
      }
    }

    try {
      var_72(Example.class, new Object[] { null });
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_38() {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_50("ping") MultipartBody.Part[] param_13) {
        return null;
      }
    }

    try {
      var_72(Example.class, new Object[] { null });
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_39() throws IOException {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_50(var_133 = "ping", var_176 = "8-bit") String param_8,
          @var_50(var_133 = "kit", var_176 = "7-bit") RequestBody param_9) {
        return null;
      }
    }

    Request var_71 = var_72(Example.class, "pong", var_22.var_126(
        var_66, "kat"));
    var_61(var_71.var_69()).var_73("POST");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:

    RequestBody body = request.body();
    Buffer buffer = new Buffer();
    body.writeTo(buffer);
    String bodyString = buffer.readUtf8();

    assertThat(bodyString)
        .contains("var_158-var_159: var_160-var_161;")
        .contains("var_162=\"var_108\"\r\n")
        .contains("var_158-var_177-var_178: 8-var_179")
        .contains("\r\nvar_130\r\n--");

    assertThat(bodyString)
        .contains("var_158-var_159: var_160-var_161;")
        .contains("var_162=\"var_143\"")
        .contains("var_158-var_177-var_178: 7-var_179")
        .contains("\r\nvar_111\r\n--");
  }

  @Test public void multipartPartMap() throws IOException {
    class Example {
      @Multipart 
      @POST("/var_86/var_87/") 
      Call<ResponseBody> method(@PartMap Map<String, RequestBody> parts) {
        return null;
      }
    }

    Map<String, RequestBody> params = new LinkedHashMap<>();
    params.put("var_108", var_22.var_126(null, "pong"));
    var_154.var_110("kit", var_22.var_126(null, "kat"));

    Request var_71 = var_72(Example.class, var_154);
    var_61(var_71.var_69()).var_73("POST");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:

    RequestBody body = request.body();
    Buffer buffer = new Buffer();
    body.writeTo(buffer);
    String bodyString = buffer.readUtf8();

    assertThat(bodyString)
        .contains("var_158-var_159: var_160-var_161;")
        .contains("var_162=\"var_108\"\r\n")
        .contains("\r\nvar_130\r\n--");

    assertThat(bodyString)
        .contains("var_158-var_159: var_160-var_161;")
        .contains("var_162=\"var_143\"")
        .contains("\r\nvar_111\r\n--");
  }

  @Test public void multipartPartMapWithEncoding() throws IOException {
    class Example {
      @Multipart 
      @POST("/var_86/var_87/") 
      Call<ResponseBody> method(@PartMap(encoding = "8-var_179") Map<String, RequestBody> parts) {
        return null;
      }
    }

    Map<String, RequestBody> params = new LinkedHashMap<>();
    params.put("var_108", RequestBody.create(null, "var_130"));
    params.put("var_143", RequestBody.create(null, "var_111"));

    Request request = buildRequest(Example.class, params);
    assertThat(request.method()).isEqualTo("var_48");
    assertThat(request.headers().size()).isZero();
    assertThat(request.url().toString()).isEqualTo("var_33:

    RequestBody var_79 = var_71.var_79();
    Buffer var_165 = new Buffer();
    var_79.var_166(var_165);
    String var_167 = var_165.var_168();

    var_61(var_167)
        .var_169("Content-Disposition: form-data;")
        .var_169("name=\"ping\"\r\n")
        .var_169("Content-Transfer-Encoding: 8-bit")
        .var_169("\r\npong\r\n--");

    var_61(var_167)
        .var_169("Content-Disposition: form-data;")
        .var_169("name=\"kit\"")
        .var_169("Content-Transfer-Encoding: 8-bit")
        .var_169("\r\nkat\r\n--");
  }

  @var_28 public void method_40() {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_51 Map<Object, RequestBody> param_14) {
        return null;
      }
    }

    try {
      var_72(Example.class, new Object[] { null });
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_41() {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_51 Map<String, MultipartBody.Part> param_14) {
        return null;
      }
    }

    try {
      var_72(Example.class, new Object[] { null });
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_42() {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_51 Map<String, RequestBody> param_14) {
        return null;
      }
    }

    try {
      var_72(Example.class, new Object[] { null });
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_43() {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_51 Map<String, RequestBody> param_14) {
        return null;
      }
    }

    Map<String, RequestBody> var_154 = new LinkedHashMap<>();
    var_154.var_110("ping", var_22.var_126(null, "pong"));
    var_154.var_110(null, var_22.var_126(null, "kat"));

    try {
      var_72(Example.class, var_154);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_44() {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_51 Map<String, RequestBody> param_14) {
        return null;
      }
    }

    Map<String, RequestBody> var_154 = new LinkedHashMap<>();
    var_154.var_110("ping", var_22.var_126(null, "pong"));
    var_154.var_110("kit", null);

    try {
      var_72(Example.class, var_154);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_45() {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_51 List<Object> param_14) {
        return null;
      }
    }

    try {
      var_72(Example.class, var_12.var_180());
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_46() throws IOException {
    class class_2 extends HashMap<String, String> {
    }

    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_51 Foo param_14) {
        return null;
      }
    }

    Foo var_86 = new Foo();
    var_86.var_110("hello", "world");

    Request var_71 = var_72(Example.class, var_86);
    Buffer var_165 = new Buffer();
    var_71.var_79().var_166(var_165);
    var_61(var_165.var_168())
        .var_169("name=\"hello\"")
        .var_169("\r\n\r\nworld\r\n--");
  }

  @var_28 public void method_47() throws IOException {
    class class_1 {
      @var_45 
      @var_48("/foo/bar/") 
      Call<ResponseBody> method_2(@var_50("ping") String param_8, @var_50("fizz") String param_15) {
        return null;
      }
    }
    Request var_71 = var_72(Example.class, "pong", null);
    var_61(var_71.var_69()).var_73("POST");
    var_61(var_71.var_113().var_124()).var_125();
    var_61(var_71.var_74().var_75()).var_73("http:

    RequestBody body = request.body();
    Buffer buffer = new Buffer();
    body.writeTo(buffer);
    String bodyString = buffer.readUtf8();

    assertThat(bodyString)
        .contains("var_158-var_159: var_160-var_161;")
        .contains("var_162=\"var_108\"")
        .contains("\r\nvar_130\r\n--");
  }

  @Test public void multipartPartOptional() {
    class Example {
      @Multipart 
      @POST("/var_86/var_87/") 
      Call<ResponseBody> method(@Part("var_108") RequestBody ping) {
        return null;
      }
    }
    try {
      buildRequest(Example.class, new Object[] { null });
      fail();
    } catch (IllegalStateException e) {}
  }

  @Test public void simpleFormEncoded() {
    class Example {
      @FormUrlEncoded 
      @POST("/var_86") 
      Call<ResponseBody> method(@Field("var_86") String foo, @Field("var_108") String ping) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, "var_87", "var_130");
    assertBody(request.body(), "var_86=var_87&var_108=var_130");
  }

  @Test public void formEncodedWithEncodedNameFieldParam() {
    class Example {
      @FormUrlEncoded 
      @POST("/var_86") 
      Call<ResponseBody> method(@Field(value = "var_181%20var_182", encoded = true) String foo) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, "var_183%20var_184");
    var_157(var_71.var_79(), "na%20me=ba%20r");
  }

  @var_28 public void method_48() {
    class class_1 {
      @var_38 
      @var_48("/foo") 
      Call<ResponseBody> method_2(@var_36("foo") String param_6, @var_36("ping") String param_8,
          @var_36("kit") String param_9) {
        return null;
      }
    }
    Request var_71 = var_72(Example.class, "bar", null, "kat");
    var_157(var_71.var_79(), "foo=bar&kit=kat");
  }

  @var_28 public void method_49() {
    class class_1 {
      @var_38 
      @var_48("/foo") 
      Call<ResponseBody> method_2(@var_36("foo") List<Object> param_16, @var_36("kit") String param_9) {
        return null;
      }
    }

    List<Object> var_150 = var_11.<Object>var_152("foo", "bar", null, 3);
    Request var_71 = var_72(Example.class, var_150, "kat");
    var_157(var_71.var_79(), "foo=foo&foo=bar&foo=3&kit=kat");
  }

  @var_28 public void method_50() {
    class class_1 {
      @var_38 
      @var_48("/foo") 
      Call<ResponseBody> method_2(@var_36("foo") Object[] param_16, @var_36("kit") String param_9) {
        return null;
      }
    }

    Object[] var_150 = { 1, 2, null, "three" };
    Request var_71 = var_72(Example.class, var_150, "kat");
    var_157(var_71.var_79(), "foo=1&foo=2&foo=three&kit=kat");
  }

  @var_28 public void method_51() {
    class class_1 {
      @var_38 
      @var_48("/foo") 
      Call<ResponseBody> method_2(@var_36("foo") int[] param_16, @var_36("kit") String param_9) {
        return null;
      }
    }

    int[] var_150 = { 1, 2, 3 };
    Request var_71 = var_72(Example.class, var_150, "kat");
    var_157(var_71.var_79(), "foo=1&foo=2&foo=3&kit=kat");
  }

  @var_28 public void method_52() {
    class class_1 {
      @var_38 
      @var_48("/foo") 
      Call<ResponseBody> method_2(@var_37(var_136 = true) Map<String, Object> param_17) {
        return null;
      }
    }

    Map<String, Object> var_185 = new LinkedHashMap<>();
    var_185.var_110("k%20it", "k%20at");
    var_185.var_110("pin%20g", "po%20ng");

    Request var_71 = var_72(Example.class, var_185);
    var_157(var_71.var_79(), "k%20it=k%20at&pin%20g=po%20ng");
  }

  @var_28 public void method_53() {
    class class_1 {
      @var_38 
      @var_48("/foo") 
      Call<ResponseBody> method_2(@var_37 Map<String, Object> param_17) {
        return null;
      }
    }

    Map<String, Object> var_185 = new LinkedHashMap<>();
    var_185.var_110("kit", "kat");
    var_185.var_110("ping", "pong");

    Request var_71 = var_72(Example.class, var_185);
    var_157(var_71.var_79(), "kit=kat&ping=pong");
  }

  @var_28 public void method_54() {
    class class_1 {
      @var_38 
      @var_48("/") 
      Call<ResponseBody> method_2(@var_37 Map<String, Object> param_7) {
        return null;
      }
    }

    try {
      var_72(Example.class, new Object[] { null });
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_55() {
    class class_1 {
      @var_38 
      @var_48("/") 
      Call<ResponseBody> method_2(@var_37 Map<String, Object> param_7) {
        return null;
      }
    }

    Map<String, Object> var_185 = new LinkedHashMap<>();
    var_185.var_110("kit", "kat");
    var_185.var_110(null, "pong");

    try {
      var_72(Example.class, var_185);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_56() {
    class class_1 {
      @var_38 
      @var_48("/") 
      Call<ResponseBody> method_2(@var_37 Map<String, Object> param_7) {
        return null;
      }
    }

    Map<String, Object> var_185 = new LinkedHashMap<>();
    var_185.var_110("kit", "kat");
    var_185.var_110("foo", null);

    try {
      var_72(Example.class, var_185);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_57() {
    class class_1 {
      @var_38 
      @var_48("/") 
      Call<ResponseBody> method_2(@var_37 List<String> param_7) {
        return null;
      }
    }
    try {
      var_72(Example.class);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_58() throws IOException {
    class class_2 extends HashMap<String, String> {
    }

    class class_1 {
      @var_38 
      @var_48("/") 
      Call<ResponseBody> method_2(@var_37 Foo param_7) {
        return null;
      }
    }

    Foo var_86 = new Foo();
    var_86.var_110("hello", "world");

    Request var_71 = var_72(Example.class, var_86);
    Buffer var_165 = new Buffer();
    var_71.var_79().var_166(var_165);
    var_61(var_165.var_168()).var_73("hello=world");
  }

  @var_28 public void method_59() {
    class class_1 {
      @var_39("/foo/bar/")
      @var_44({
          "ping: pong",
          "kit: kat"
      })
      Call<ResponseBody> method_2() {
        return null;
      }
    }
    Request var_71 = var_72(Example.class);
    var_61(var_71.var_69()).var_73("GET");
    okhttp3.Headers var_113 = var_71.var_113();
    var_61(var_113.var_124()).var_73(2);
    var_61(var_113.var_67("ping")).var_73("pong");
    var_61(var_113.var_67("kit")).var_73("kat");
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void headersDoNotOverwriteEachOther() {
    class Example {
      @GET("/var_86/var_87/")
      @Headers({
          "var_108: var_130",
          "kit: kat",
          "kit: -kat",
      })
      var_78<var_23> var_69() {
        return null;
      }
    }
    Request var_71 = var_72(Example.class);
    var_61(var_71.var_69()).var_73("GET");
    okhttp3.Headers var_113 = var_71.var_113();
    var_61(var_113.var_124()).var_73(3);
    var_61(var_113.var_67("ping")).var_73("pong");
    var_61(var_113.var_150("kit")).var_186("kat", "-kat");
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void headerParamToString() {
    class Example {
      @GET("/var_86/var_87/") 
      Call<ResponseBody> method(@Header("var_143") BigInteger kit) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, new BigInteger());
    assertThat(request.method()).isEqualTo("var_39");
    okhttp3.Headers headers = request.headers();
    assertThat(headers.size()).isEqualTo(1);
    assertThat(headers.get("var_143")).isEqualTo("1234");
    assertThat(request.url().toString()).isEqualTo("var_33:
    var_61(var_71.var_79()).var_123();
  }

  @var_28 public void var_187() {
    class var_68 {
      @var_39("/var_86/var_87/") 
      @Headers("var_108: var_130") 
      Call<ResponseBody> method(@Header("var_143") String kit) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, "var_111");
    assertThat(request.method()).isEqualTo("var_39");
    okhttp3.Headers headers = request.headers();
    assertThat(headers.size()).isEqualTo(2);
    assertThat(headers.get("var_108")).isEqualTo("var_130");
    assertThat(headers.get("var_143")).isEqualTo("var_111");
    assertThat(request.url().toString()).isEqualTo("var_33:
    var_61(var_71.var_79()).var_123();
  }

  @var_28 public void method_60() {
    class class_1 {
      @var_39("/foo/bar/") 
      Call<ResponseBody> method_2(@var_42("foo") List<String> param_9) {
        return null;
      }
    }
    Request var_71 = var_72(Example.class, var_11.var_152("bar", null, "baz"));
    var_61(var_71.var_69()).var_73("GET");
    okhttp3.Headers var_113 = var_71.var_113();
    var_61(var_113.var_124()).var_73(2);
    var_61(var_113.var_150("foo")).var_188("bar", "baz");
    var_61(var_71.var_74().var_75()).var_73("http:
    assertThat(request.body()).isNull();
  }

  @Test public void headerParamArray() {
    class Example {
      @GET("/var_86/var_87/") 
      Call<ResponseBody> method(@Header("var_86") String[] kit) {
        return null;
      }
    }
    Request request = buildRequest(Example.class, (Object) new String[] { "var_87", null, "var_129" });
    assertThat(request.method()).isEqualTo("var_39");
    okhttp3.Headers headers = request.headers();
    assertThat(headers.size()).isEqualTo(2);
    assertThat(headers.values("var_86")).containsExactly("var_87", "var_129");
    assertThat(request.url().toString()).isEqualTo("var_33:
    var_61(var_71.var_79()).var_123();
  }

  @var_28 public void method_61() {
    class class_1 {
      @var_48("/") 
      @var_44("Content-Type: text/not-plain") 
      Call<ResponseBody> method_2(@var_34 RequestBody param_2) {
        return null;
      }
    }
    RequestBody var_79 = var_22.var_126(var_66, "hi");
    Request var_71 = var_72(Example.class, var_79);
    var_61(var_71.var_79().var_189().var_75()).var_73("text/not-plain");
  }

  @var_28 public void method_62() {
    class class_1 {
      @var_48("/") 
      @var_44("Content-Type: hello, world!") 
      Call<ResponseBody> method_2(@var_34 RequestBody param_2) {
        return null;
      }
    }
    RequestBody var_79 = var_22.var_126(var_66, "hi");
    try {
      var_72(Example.class, var_79);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_63() {
    class class_1 {
      @var_35("/") 
      @var_44("Content-Type: text/not-plain") 
      Call<ResponseBody> method_2() {
        return null;
      }
    }
    Request var_71 = var_72(Example.class);
    var_61(var_71.var_113().var_67("Content-Type")).var_73("text/not-plain");
  }

  @var_28 public void method_64() {
    class class_1 {
      @var_48("/") 
      Call<ResponseBody> method_2(@var_42("Content-Type") String param_18, @var_34 RequestBody param_2) {
        return null;
      }
    }
    RequestBody var_79 = var_22.var_126(var_66, "Plain");
    Request var_71 = var_72(Example.class, "text/not-plain", var_79);
    var_61(var_71.var_79().var_189().var_75()).var_73("text/not-plain");
  }

  @var_28 public void method_65() {
    class class_1 {
      @var_48("/") 
      Call<ResponseBody> method_2(@var_42("Content-Type") String param_18, @var_34 RequestBody param_2) {
        return null;
      }
    }
    RequestBody var_79 = var_22.var_126(var_66, "hi");
    try {
      var_72(Example.class, "hello, world!", var_79);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_66() {
    class class_1 {
      @var_39("ftp:
      Call<ResponseBody> get() {
        return null;
      }
    }
    try {
      buildRequest(Example.class);
      fail();
    } catch (IllegalArgumentException e) {}
  }

  @Test public void malformedParameterRelativeUrlThrows() {
    class Example {
      @GET
      Call<ResponseBody> get(@Url String relativeUrl) {
        return null;
      }
    }
    try {
      buildRequest(Example.class, "var_190:
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_67() throws IOException {
    class class_1 {
      @var_45
      @var_48("/foo")
      Call<ResponseBody> method_0(@var_50("first") String param_12, @var_50("second") String param_19, @var_50("third") String param_20) {
        return null;
      }
    }
    Request var_71 = var_72(Example.class, "firstParam", "secondParam", "thirdParam");
    MultipartBody var_79 = (MultipartBody) var_71.var_79();

    Buffer var_165 = new Buffer();
    var_79.var_166(var_165);
    String var_191 = var_165.var_168();

    var_61(var_191.var_192("firstParam")).var_193(var_191.var_192("secondParam"));
    var_61(var_191.var_192("secondParam")).var_193(var_191.var_192("thirdParam"));
  }

  @var_28 public void method_68() throws Exception {
    class class_1 {
      @var_39("/query") Call<ResponseBody> method_69(@var_53("a") Object param_7) {
        return null;
      }
    }

    Retrofit.Builder var_194 = new Retrofit.Builder()
        .var_195("http:
        .addConverterFactory(new NullObjectConverterFactory());

    Request request = buildRequest(Example.class, retrofitBuilder, "var_196");

    var_61(var_71.var_74().var_75()).var_197("Ignored");
  }

  @var_28 public void method_70() throws Exception {
    class class_1 {
      @var_39("/query") Call<ResponseBody> method_69(@var_54 Map<String, String> param_7) {
        return null;
      }
    }

    Retrofit.Builder var_194 = new Retrofit.Builder()
        .var_195("http:
        .addConverterFactory(new NullObjectConverterFactory());

    Map<String, String> queryMap = Collections.singletonMap("var_143", "kat");

    try {
      var_72(Example.class, var_194, var_198);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  @var_28 public void method_71() throws Exception {
    class class_1 {
      @var_38
      @var_48("/query") Call<ResponseBody> method_69(@var_36("a") Object param_7) {
        return null;
      }
    }

    Retrofit.Builder var_194 = new Retrofit.Builder()
        .var_195("http:
        .addConverterFactory(new NullObjectConverterFactory());

    Request request = buildRequest(Example.class, retrofitBuilder, "var_196");

    var_61(var_71.var_74().var_75()).var_197("Ignored");
  }

  @var_28 public void method_72() throws Exception {
    class class_1 {
      @var_38
      @var_48("/query") Call<ResponseBody> method_69(@var_37 Map<String, String> param_7) {
        return null;
      }
    }

    Retrofit.Builder var_194 = new Retrofit.Builder()
        .var_195("http:
        .addConverterFactory(new NullObjectConverterFactory());

    Map<String, String> queryMap = Collections.singletonMap("var_143", "kat");

    try {
      var_72(Example.class, var_194, var_198);
      var_64();
    } catch (IllegalArgumentException var_81) {}
  }

  private static void method_28(RequestBody param_2, String param_21) {
    var_61(var_79).var_200();
    Buffer var_165 = new Buffer();
    try {
      var_79.var_166(var_165);
      var_61(var_165.var_168()).var_73(var_199);
    } catch (IOException var_81) {}
  }

  static <T> Request method_3(Class<T> param_22, Retrofit.Builder param_23, Object... var_203) {
    okhttp3.Call.Factory var_204 = new okhttp3.Call.Factory() {
      @var_205 public okhttp3.Call method_73(Request param_0) {
        throw new UnsupportedOperationException();
      }
    };

    Retrofit var_206 = var_202.var_204(var_204).var_207();

    Method var_69 = var_208.var_209(var_201);
    try {
      return var_210.var_211(var_206, var_69).var_126(var_203);
    } catch (RuntimeException var_81) {} catch (Exception var_81) {}
  }

  static <T> Request method_3(Class<T> param_22, Object... var_203) {
    Retrofit.Builder var_194 = new Retrofit.Builder()
        .var_195("http:
        .addConverterFactory(new ToStringConverterFactory());

    return buildRequest(cls, retrofitBuilder, args);
  }

  static void assertMalformedRequest(Class<?> cls, Object... args) {
    try {
      Request request = buildRequest(cls, args);
      fail("var_199 var_100 var_212 var_71 var_213 var_214 " + var_71);
    } var_146 (IllegalArgumentException param_21) {}
  }
}
