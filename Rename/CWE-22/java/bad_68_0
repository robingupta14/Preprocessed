

import var_0.var_1.var_2;
import var_0.var_1.var_3;
import var_0.var_1.var_4;
import var_0.var_1.var_5;
import var_0.var_1.var_6;
import var_0.var_1.var_7;
import var_0.var_1.var_8;
import var_0.var_1.var_9;
import var_0.var_1.var_10;
import var_0.var_11.var_12.var_13;
import var_0.var_14.var_15;
import var_0.var_14.var_16;
import var_0.var_14.var_17;
import var_0.var_14.var_18;
import var_0.var_14.var_19;
import var_0.var_14.var_20;
import var_0.var_14.var_21;
import var_0.var_14.var_22;
import var_0.var_14.var_23;
import var_0.var_14.var_24.var_25;
import var_0.var_14.var_24.var_26;
import var_0.var_14.var_24.var_27;
import var_0.var_14.var_24.var_28;
import var_0.var_14.var_24.var_29;

import var_30.var_31.var_32;
import var_30.var_31.var_33;
import var_30.var_34.var_24.var_35.var_36;
import var_30.var_34.var_24.var_35.var_37;
import var_30.var_34.var_24.var_35.var_38;
import var_30.var_34.var_24.var_39.var_40;
import var_30.var_34.var_24.var_39.var_41;


public final class class_0 {

  private static final String var_43 = "/";

  
  public static final int var_44 = var_25.var_45;

  
  private static final Logger var_46 = var_33.var_47("org/zeroturnaround/zip/ZipUtil".var_48('/', '.')); 

  private var_42() {
  }

  

  
  public static boolean method_0(File param_1, String param_2) {
    ZipFile var_50 = null;
    try {
      var_50 = new ZipFile(var_24);
      return var_50.var_51(var_49) != null;
    }
    catch (IOException var_52) {}
    finally {
      var_53(var_50);
    }
  }

  
  @var_54
  public static int method_1(File param_1, String param_2) {
    return var_55(var_24, var_49);
  }

  
  public static int method_2(File param_1, String param_2) {
    ZipFile var_50 = null;
    try {
      var_50 = new ZipFile(var_24);
      ZipEntry var_56 = var_50.var_51(var_49);
      if (var_56 == null) {
        return -1;
      }
      return var_56.var_57();
    }
    catch (IOException var_52) {}
    finally {
      var_53(var_50);
    }
  }

  
  public static boolean method_3(File param_1, String[] param_5) {
    ZipFile var_50 = null;
    try {
      var_50 = new ZipFile(var_24);
      for (int var_59 = 0; var_59 < var_58.var_60; var_59++) {
        if (var_50.var_51(var_58[var_59]) != null) {
          return true;
        }
      }
      return false;
    }
    catch (IOException var_52) {}
    finally {
      var_53(var_50);
    }
  }

  
  public static byte[] method_4(File param_1, String param_2) {
    ZipFile var_50 = null;
    try {
      var_50 = new ZipFile(var_24);
      return var_62(var_50, var_49);
    }
    catch (IOException var_52) {}
    finally {
      var_53(var_50);
    }
  }

  
  public static byte[] method_4(File param_1, String param_2, Charset param_0) {
    ZipFile var_50 = null;
    try {
      if (var_12 != null) {
        var_50 = new ZipFile(var_24, var_12);
      }
      else {
        var_50 = new ZipFile(var_24);
      }
      return var_62(var_50, var_49);
    }
    catch (IOException var_52) {}
    finally {
      var_53(var_50);
    }
  }

  
  public static byte[] method_4(ZipFile param_3, String param_2) {
    try {
      return var_62(var_50, var_49);
    }
    catch (IOException var_52) {}
  }

  
  private static byte[] method_5(ZipFile param_3, String param_2) throws IOException {
    ZipEntry var_63 = var_50.var_51(var_49);
    if (var_63 == null) {
      return null; 
    }

    InputStream var_64 = var_50.var_65(var_63);
    try {
      return var_38.var_66(var_64);
    }
    finally {
      var_38.var_53(var_64);
    }
  }

  
  public static byte[] method_4(InputStream param_6, String param_2) {
    ByteArrayUnpacker var_67 = new ByteArrayUnpacker();
    if (!var_68(var_64, var_49, var_67))
      return null; 
    return var_67.var_69();
  }

  
  private static class class_1 implements ZipEntryCallback {

    private byte[] var_70;

    public void method_8(InputStream param_9, ZipEntry param_4) throws IOException {
      var_70 = var_38.var_66(var_72);
    }

    public byte[] method_7() {
      return var_70;
    }

  }

  
  public static boolean method_4(File param_1, String param_2, File param_10) {
    return var_61(var_24, var_49, var_73, null);
  }

  
  public static boolean method_4(File param_1, String param_2, File param_10, Charset param_0) {
    ZipFile var_50 = null;
    try {
      if (var_12 != null) {
        var_50 = new ZipFile(var_24, var_12);
      }
      else {
        var_50 = new ZipFile(var_24);
      }
      return var_62(var_50, var_49, var_73);
    }
    catch (IOException var_52) {}
    finally {
      var_53(var_50);
    }
  }

  
  public static boolean method_4(ZipFile param_3, String param_2, File param_10) {
    try {
      return var_62(var_50, var_49, var_73);
    }
    catch (IOException var_52) {}
  }

  
  private static boolean method_5(ZipFile param_3, String param_2, File param_10) throws IOException {
    if (var_46.var_74()) {
      var_46.var_75("Extracting '" + var_50.var_76() + "' entry '" + var_49 + "' into '" + var_73 + "'.");
    }

    ZipEntry var_63 = var_50.var_51(var_49);
    if (var_63 == null) {
      return false; 
    }

    if (var_63.var_77() || var_50.var_65(var_63) == null) {
      if (var_73.var_77()) {
        return true;
      }
      if (var_73.var_78()) {
        var_36.var_79(var_73);
      }
      return var_73.var_80();
    }

    InputStream var_72 = new BufferedInputStream(var_50.var_65(var_63));
    try {
      var_36.var_81(var_72, var_73);
    }
    finally {
      var_38.var_53(var_72);
    }
    return true;
  }

  
  public static boolean method_4(InputStream param_6, String param_2, File param_10) throws IOException {
    return var_68(var_64, var_49, new FileUnpacker(var_73));
  }

  
  private static class class_2 implements ZipEntryCallback {

    private final File var_73;

    public var_82(File param_10) {
      this.var_73 = var_73;
    }

    public void method_8(InputStream param_9, ZipEntry param_4) throws IOException {
      var_36.var_81(var_72, var_73);
    }

  }

  

  
  public static void method_9(File param_1, ZipEntryCallback param_7) {
    var_83(var_24, var_67, null);
  }

  
  public static void method_9(File param_1, ZipEntryCallback param_7, Charset param_0) {
    ZipFile var_50 = null;
    try {
      if (var_12 == null) {
        var_50 = new ZipFile(var_24);
      }
      else {
        var_50 = new ZipFile(var_24, var_12);
      }

      Enumeration<? extends ZipEntry> var_84 = var_50.var_85();
      while (var_84.var_86()) {
        ZipEntry var_52 = (ZipEntry) var_84.var_87();

        InputStream var_64 = var_50.var_65(var_52);
        try {
          var_67.var_71(var_64, var_52);
        }
        catch (IOException var_63) {}
        catch (ZipBreakException var_88) {}
        finally {
          var_38.var_53(var_64);
        }
      }
    }
    catch (IOException var_52) {}
    finally {
      var_53(var_50);
    }
  }

  
  public static void method_9(File param_1, String[] param_12, ZipEntryCallback param_7) {
    var_83(var_24, var_89, var_67, null);
  }

  
  public static void method_9(File param_1, String[] param_12, ZipEntryCallback param_7, Charset param_0) {
    ZipFile var_50 = null;
    try {
      if (var_12 == null) {
        var_50 = new ZipFile(var_24);
      }
      else {
        var_50 = new ZipFile(var_24, var_12);
      }

      for (int var_59 = 0; var_59 < var_89.var_60; var_59++) {
        ZipEntry var_52 = var_50.var_51(var_89[var_59]);
        if (var_52 == null) {
          continue;
        }
        InputStream var_64 = var_50.var_65(var_52);
        try {
          var_67.var_71(var_64, var_52);
        }
        catch (IOException var_63) {}
        catch (ZipBreakException var_88) {}
        finally {
          var_38.var_53(var_64);
        }
      }
    }
    catch (IOException var_52) {}
    finally {
      var_53(var_50);
    }
  }

  
  public static void method_9(File param_1, ZipInfoCallback param_7) {
    ZipFile var_50 = null;
    try {
      var_50 = new ZipFile(var_24);

      Enumeration<? extends ZipEntry> var_84 = var_50.var_85();
      while (var_84.var_86()) {
        ZipEntry var_52 = (ZipEntry) var_84.var_87();
        try {
          var_67.var_71(var_52);
        }
        catch (IOException var_63) {}
        catch (ZipBreakException var_88) {}
      }
    }
    catch (IOException var_52) {}
    finally {
      var_53(var_50);
    }
  }

  
  public static void method_9(File param_1, String[] param_12, ZipInfoCallback param_7) {
    ZipFile var_50 = null;
    try {
      var_50 = new ZipFile(var_24);

      for (int var_59 = 0; var_59 < var_89.var_60; var_59++) {
        ZipEntry var_52 = var_50.var_51(var_89[var_59]);
        if (var_52 == null) {
          continue;
        }
        try {
          var_67.var_71(var_52);
        }
        catch (IOException var_63) {}
        catch (ZipBreakException var_88) {}
      }
    }
    catch (IOException var_52) {}
    finally {
      var_53(var_50);
    }
  }

  
  public static void method_9(InputStream param_6, ZipEntryCallback param_7, Charset param_0) {
    try {
      ZipInputStream var_72 = null;
      try {
        var_72 = var_90(var_64, var_12);
        ZipEntry var_91;
        while ((var_91 = var_72.var_92()) != null) {
          try {
            var_67.var_71(var_72, var_91);
          }
          catch (IOException var_63) {}
          catch (ZipBreakException var_88) {}
        }
      }
      finally {
        if (var_72 != null) {
          var_72.var_93();
        }
      }
    }
    catch (IOException var_52) {}
  }

  
  public static void method_9(InputStream param_6, ZipEntryCallback param_7) {
    var_83(var_64, var_67, null);
  }

  
  public static void method_9(InputStream param_6, String[] param_12, ZipEntryCallback param_7, Charset param_0) {
    Set<String> var_94 = new HashSet<String>();
    for (int var_59 = 0; var_59 < var_89.var_60; var_59++) {
      var_94.var_95(var_89[var_59]);
    }
    try {
      ZipInputStream var_72 = null;
      try {
        var_72 = var_90(var_64, var_12);
        ZipEntry var_91;
        while ((var_91 = var_72.var_92()) != null) {
          if (!var_94.var_96(var_91.var_76())) {
            
            continue;
          }
          try {
            var_67.var_71(var_72, var_91);
          }
          catch (IOException var_63) {}
          catch (ZipBreakException var_88) {}
        }
      }
      finally {
        if (var_72 != null) {
          var_72.var_93();
        }
      }
    }
    catch (IOException var_52) {}
  }

  
  public static void method_9(InputStream param_6, String[] param_12, ZipEntryCallback param_7) {
    var_83(var_64, var_89, var_67, null);
  }

  
  private static ZipInputStream method_10(final InputStream param_6, Charset param_0) {
    InputStream var_72 = new BufferedInputStream(new CloseShieldInputStream(var_64));
    if (var_12 == null) {
      return new ZipInputStream(var_72);
    }
    return var_97.var_98(var_72, var_12);
  }

  
  public static boolean method_6(File param_1, String param_2, ZipEntryCallback param_7) {
    ZipFile var_50 = null;
    try {
      var_50 = new ZipFile(var_24);

      ZipEntry var_63 = var_50.var_51(var_49);
      if (var_63 == null) {
        return false; 
      }

      InputStream var_72 = new BufferedInputStream(var_50.var_65(var_63));
      try {
        var_67.var_71(var_72, var_63);
      }
      finally {
        var_38.var_53(var_72);
      }
      return true;
    }
    catch (IOException var_52) {}
    finally {
      var_53(var_50);
    }
  }

  
  public static boolean method_6(InputStream param_6, String param_2, ZipEntryCallback param_7) {
    SingleZipEntryCallback var_99 = new SingleZipEntryCallback(var_49, var_67);
    var_83(var_64, var_99);
    return var_99.var_100();
  }

  
  private static class class_3 implements ZipEntryCallback {

    private final String var_49;

    private final ZipEntryCallback var_67;

    private boolean var_100;

    public var_101(String param_2, ZipEntryCallback param_7) {
      this.var_49 = var_49;
      this.var_67 = var_67;
    }

    public void method_8(InputStream param_9, ZipEntry param_4) throws IOException {
      if (var_49.var_102(var_56.var_76())) {
        var_100 = true;
        var_67.var_71(var_72, var_56);
      }
    }

    public boolean method_11() {
      return var_100;
    }

  }

  

  
  public static void method_12(File param_1, final File param_14) {
    var_103(var_24, var_104, var_105.var_106);
  }

  
  public static void method_12(File param_1, final File param_14, Charset param_0) {
    var_103(var_24, var_104, var_105.var_106, var_12);
  }

  
  public static void method_12(File param_1, File param_14, NameMapper param_15, Charset param_0) {
    var_46.var_108("Extracting '{}' into '{}'.", var_24, var_104);
    var_83(var_24, new Unpacker(var_104, var_107), var_12);
  }

  
  public static void method_12(File param_1, File param_14, NameMapper param_15) {
    var_46.var_108("Extracting '{}' into '{}'.", var_24, var_104);
    var_83(var_24, new Unpacker(var_104, var_107));
  }

  
  public static void method_13(File param_1, final File param_14) {
    var_109(var_24, var_104, var_105.var_106);
  }

  
  public static void method_13(File param_1, File param_14, NameMapper param_15) {
    var_46.var_108("Unwrapping '{}' into '{}'.", var_24, var_104);
    var_83(var_24, new Unwraper(var_104, var_107));
  }

  
  public static void method_12(InputStream param_6, File param_14) {
    var_103(var_64, var_104, var_105.var_106, null);
  }

  
  public static void method_12(InputStream param_6, File param_14, Charset param_0) {
    var_103(var_64, var_104, var_105.var_106, var_12);
  }

  
  public static void method_12(InputStream param_6, File param_14, NameMapper param_15) {
    var_103(var_64, var_104, var_107, null);
  }

  
  public static void method_12(InputStream param_6, File param_14, NameMapper param_15, Charset param_0) {
    var_46.var_108("Extracting {} into '{}'.", var_64, var_104);
    var_83(var_64, new Unpacker(var_104, var_107), var_12);
  }

  
  public static void method_13(InputStream param_6, File param_14) {
    var_109(var_64, var_104, var_105.var_106);
  }

  
  public static void method_13(InputStream param_6, File param_14, NameMapper param_15) {
    var_46.var_108("Unwrapping {} into '{}'.", var_64, var_104);
    var_83(var_64, new Unwraper(var_104, var_107));
  }

  
  private static class class_4 implements ZipEntryCallback {

    private final File var_104;
    private final NameMapper var_107;

    public var_110(File param_14, NameMapper param_15) {
      this.var_104 = var_104;
      this.var_107 = var_107;
    }

    public void method_8(InputStream param_9, ZipEntry param_4) throws IOException {
      String var_49 = var_107.var_111(var_56.var_76());
      if (var_49 != null) {
        File var_73 = new File(var_104, var_49);
        if (var_56.var_77()) {
          var_36.var_112(var_73);
        }
        else {
          var_36.var_112(var_73.var_113());

          if (var_46.var_114() && var_73.var_78()) {
            var_46.var_108("Overwriting file '{}'.", var_56.var_76());
          }

          var_36.var_81(var_72, var_73);
        }

        ZTFilePermissions var_115 = var_116.var_117(var_56);
        if (var_115 != null) {
          var_118.var_119().var_120(var_73, var_115);
        }
      }
    }
  }

  
  public static class class_5 implements ZipEntryCallback {

    private final File var_104;
    private final NameMapper var_107;

    public var_121(File param_14, NameMapper param_15) {
      this.var_104 = var_104;
      this.var_107 = var_107;
    }

    public var_121(File param_14) {
      this(var_104, var_105.var_106);
    }

    public void method_8(InputStream param_9, ZipEntry param_4) throws IOException {
      String var_49 = var_107.var_111(var_56.var_76());
      if (var_49 != null) {
        
        if (var_49.var_122('\\') != -1) {
          File var_123 = var_104;
          String[] var_124 = var_49.var_125("\\\\");

          
          for (int var_59 = 0; var_59 < var_124.var_60 - 1; var_59++) {
            File var_73 = new File(var_123, var_124[var_59]);
            if (!var_73.var_78()) {
              var_36.var_112(var_73);
            }
            var_123 = var_73;
          }
          File var_126 = new File(var_123, var_124[var_124.var_60 - 1]);
          var_36.var_81(var_72, var_126);
        }
        
        else {
          File var_126 = new File(var_104, var_49);
          var_36.var_81(var_72, var_126);
        }
      }
    }
  }

  
  private static class class_6 implements ZipEntryCallback {

    private final File var_104;
    private final NameMapper var_107;
    private String var_128;

    public var_127(File param_14, NameMapper param_15) {
      this.var_104 = var_104;
      this.var_107 = var_107;
    }

    public void method_8(InputStream param_9, ZipEntry param_4) throws IOException {
      String var_129 = var_130(var_56.var_76());
      if (var_128 == null) {
        var_128 = var_129;
      }
      else if (!var_128.var_102(var_129)) {
        throw new ZipException("Unwrapping with multiple roots is not supported, roots: " + var_128 + ", " + var_129);
      }

      String var_49 = var_107.var_111(var_131(var_129, var_56.var_76()));
      if (var_49 != null) {
        File var_73 = new File(var_104, var_49);
        if (var_56.var_77()) {
          var_36.var_112(var_73);
        }
        else {
          var_36.var_112(var_73.var_113());

          if (var_46.var_114() && var_73.var_78()) {
            var_46.var_108("Overwriting file '{}'.", var_56.var_76());
          }

          var_36.var_81(var_72, var_73);
        }
      }
    }

    private String method_16(String param_17, String param_2) {
      return var_49.var_132(var_129.var_60());
    }

    private String method_15(final String param_2) {
      String var_133 = var_49.var_132(var_37.var_134(var_49));
      int var_135 = var_133.var_122(var_43);
      if (var_135 < 0) {
        throw new ZipException();
      }
      return var_133.var_132(0, var_133.var_122(var_43));
    }
  }

  
  public static void method_17(File param_1) {
    try {
      
      File var_136 = var_36.var_137(var_24);

      
      var_36.var_138(var_24, var_136);

      
      var_103(var_136, var_24);

      
      if (!var_136.var_139()) {
        throw new IOException("Unable to delete file: " + var_136);
      }
    }
    catch (IOException var_52) {}
  }

  

  
  public static byte[] method_18(File param_10) {
    var_46.var_75("Compressing '{}' into a ZIP file with single entry.", var_73);

    ByteArrayOutputStream var_141 = new ByteArrayOutputStream();
    try {
      ZipOutputStream var_142 = new ZipOutputStream(var_141);
      ZipEntry var_91 = var_116.var_143(var_73.var_76(), var_73);
      InputStream var_72 = new BufferedInputStream(new FileInputStream(var_73));
      try {
        var_116.var_144(var_91, var_72, var_142);
      }
      finally {
        var_38.var_53(var_72);
      }
      var_142.var_93();
    }
    catch (IOException var_52) {}
    return var_141.var_66();
  }

  

  
  public static void method_20(File param_16, File param_1) {
    var_145(var_128, var_24, var_44);
  }

  
  public static void method_20(File param_16, File param_1, int param_19) {
    var_145(var_128, var_24, var_105.var_106, var_146);
  }

  
  public static void method_20(final File param_20, final File param_21, final boolean param_22) {
    if (var_149) {
      final String var_150 = var_147.var_76();
      var_145(var_147, var_148, new NameMapper() {
        public String method_14(String param_2) {
          return var_150 + var_43 + var_49;
        }
      });
    }
    else {
      var_145(var_147, var_148);
    }
  }

  
  public static void method_18(File param_23, File param_24) {
    var_140(var_151, var_152, var_105.var_106);
  }

  
  public static void method_18(File param_23, File param_24, final String param_25) {
    var_140(var_151, var_152, new NameMapper() {
      public String method_14(String param_2) {
        return var_153;
      }
    });
  }

  
  public static void method_18(File param_23, File param_24, NameMapper param_15) {
    var_154(new File[] { var_151 }, var_152, var_107);
  }

  
  public static void method_21(File[] param_26, File param_24) {
    var_154(var_155, var_152, var_105.var_106);
  }

  
  public static void method_21(File[] param_26, File param_24, NameMapper param_15) {
    var_154(var_155, var_152, var_107, var_44);
  }

  
  public static void method_21(File[] param_26, File param_24, int param_19) {
    var_154(var_155, var_152, var_105.var_106, var_146);
  }

  
  public static void method_21(File[] param_26, File param_24, NameMapper param_15, int param_19) {
    var_46.var_108("Compressing '{}' into '{}'.", var_155, var_152);

    ZipOutputStream var_142 = null;
    FileOutputStream var_156 = null;
    try {
      var_156 = new FileOutputStream(var_152);
      var_142 = new ZipOutputStream(new BufferedOutputStream(var_156));
      var_142.var_157(var_146);

      for (int var_59 = 0; var_59 < var_155.var_60; var_59++) {
        File var_151 = var_155[var_59];

        ZipEntry var_56 = var_116.var_143(var_107.var_111(var_151.var_76()), var_151);
        var_142.var_158(var_56);
        var_36.var_81(var_151, var_142);
        var_142.var_159();
      }
    }
    catch (IOException var_52) {}
    finally {
      var_38.var_53(var_142);
      var_38.var_53(var_156);
    }
  }

  
  public static void method_20(File param_20, File param_27, NameMapper param_15) {
    var_145(var_147, var_160, var_107, var_44);
  }

  
  public static void method_20(File param_20, File param_27, NameMapper param_15, int param_19) {
    var_46.var_108("Compressing '{}' into '{}'.", var_147, var_160);
    if (!var_147.var_78()) {
      throw new ZipException();
    }
    ZipOutputStream var_142 = null;
    try {
      var_142 = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(var_160)));
      var_142.var_157(var_146);
      var_145(var_147, var_142, var_107, "", true);
    }
    catch (IOException var_52) {}
    finally {
      var_38.var_53(var_142);
    }
  }

  
  public static void method_20(File param_20, OutputStream param_28) {
    var_145(var_147, var_161, var_105.var_106, var_44);
  }

  
  public static void method_20(File param_20, OutputStream param_28, int param_19) {
    var_145(var_147, var_161, var_105.var_106, var_146);
  }

  
  public static void method_20(File param_20, OutputStream param_28, NameMapper param_15) {
    var_145(var_147, var_161, var_107, var_44);
  }

  
  public static void method_20(File param_20, OutputStream param_28, NameMapper param_15, int param_19) {
    var_46.var_108("Compressing '{}' into a stream.", var_147);
    if (!var_147.var_78()) {
      throw new ZipException();
    }
    ZipOutputStream var_142 = null;
    IOException var_162 = null;
    try {
      var_142 = new ZipOutputStream(new BufferedOutputStream(var_161));
      var_142.var_157(var_146);
      var_145(var_147, var_142, var_107, "", true);
    }
    catch (IOException var_52) {}
    finally {
      if (var_142 != null && var_162 == null) {
        try {
          var_142.var_163();
          var_142.var_164();
        }
        catch (IOException var_52) {}
      }
    }
    if (var_162 != null) {
      throw var_165.var_166(var_162);
    }
  }

  
  private static void method_20(File param_29, ZipOutputStream param_18, NameMapper param_15, String param_30, boolean param_31) throws IOException {
    String[] var_170 = var_167.var_171();
    if (var_170 == null) {
      if (!var_167.var_78()) {
        throw new ZipException();
      }
      throw new IOException();
    }

    if (var_169 && var_170.var_60 == 0) {
      throw new ZipException();
    }

    for (int var_59 = 0; var_59 < var_170.var_60; var_59++) {
      String var_172 = var_170[var_59];
      File var_73 = new File(var_167, var_172);
      boolean var_173 = var_73.var_77();
      String var_174 = var_168 + var_73.var_76(); 
      if (var_173) {
        var_174 += var_43; 
      }

      
      String var_49 = var_107.var_111(var_174);
      if (var_49 != null) {
        ZipEntry var_56 = var_116.var_143(var_49, var_73);

        var_142.var_158(var_56);

        
        if (!var_173) {
          var_36.var_81(var_73, var_142);
        }

        var_142.var_159();
      }

      
      if (var_173) {
        var_145(var_73, var_142, var_107, var_174, false);
      }
    }
  }

  
  public static void method_22(File param_33, File param_34, int param_19) {

    var_46.var_108("Repacking '{}' into '{}'.", var_176, var_177);

    RepackZipEntryCallback var_178 = new RepackZipEntryCallback(var_177, var_146);

    try {
      var_83(var_176, var_178);
    }
    finally {
      var_178.var_179();
    }
  }

  
  public static void method_22(InputStream param_6, File param_34, int param_19) {

    var_46.var_108("Repacking from input stream into '{}'.", var_177);

    RepackZipEntryCallback var_178 = new RepackZipEntryCallback(var_177, var_146);

    try {
      var_83(var_64, var_178);
    }
    finally {
      var_178.var_179();
    }
  }

  
  public static void method_22(File param_1, int param_19) {
    try {
      File var_180 = var_36.var_137(var_24);

      var_175(var_24, var_180, var_146);

      
      if (!var_24.var_139()) {
        throw new IOException("Unable to delete the file: " + var_24);
      }

      
      var_36.var_138(var_180, var_24);
    }
    catch (IOException var_52) {}
  }

  
  private static final class class_7 implements ZipEntryCallback {

    private ZipOutputStream var_142;

    private var_181(File param_34, int param_19) {
      try {
        this.var_142 = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(var_177)));
        this.var_142.var_157(var_146);
      }
      catch (IOException var_52) {}
    }

    public void method_8(InputStream param_9, ZipEntry param_4) throws IOException {
      var_116.var_182(var_56, var_72, var_142);
    }

    private void method_23() {
      var_38.var_53(var_142);
    }
  }

  
  public static void method_24(File param_29) {
    var_183(var_167, var_44);
  }

  
  public static void method_24(File param_29, int param_19) {
    try {
      
      File var_24 = var_36.var_137(var_167);

      
      var_145(var_167, var_24, var_146);

      
      var_36.var_184(var_167);

      
      var_36.var_138(var_24, var_167);
    }
    catch (IOException var_52) {}
  }

  
  public static void method_20(ZipEntrySource[] param_11, OutputStream param_28) {
    if (var_46.var_114()) {
      var_46.var_108("Creating stream from {}.", var_15.var_185(var_85));
    }
    var_145(var_85, var_161, false);
  }

  private static void method_20(ZipEntrySource[] param_11, OutputStream param_28, boolean param_35) {
    try {
      ZipOutputStream var_142 = new ZipOutputStream(var_161);
      for (int var_59 = 0; var_59 < var_85.var_60; var_59++) {
        var_144(var_85[var_59], var_142);
      }
      var_142.var_164();
      var_142.var_163();
      if (var_179) {
        var_142.var_93();
      }
    }
    catch (IOException var_52) {}
  }

  
  public static void method_20(ZipEntrySource[] param_11, File param_1) {
    if (var_46.var_114()) {
      var_46.var_108("Creating '{}' from {}.", var_24, var_15.var_185(var_85));
    }

    OutputStream var_142 = null;
    try {
      var_142 = new BufferedOutputStream(new FileOutputStream(var_24));
      var_145(var_85, var_142, true);
    }
    catch (IOException var_52) {}
    finally {
      var_38.var_53(var_142);
    }
  }

  
  public static void method_19(File param_1, String param_32, File param_10, File param_36) {
    var_144(var_24, new FileSource(var_174, var_73), var_186);
  }

  
  public static void method_19(final File param_1, final String param_32, final File param_10) {
    var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        var_144(var_24, var_174, var_73, var_189);
        return true;
      }
    });
  }

  
  public static void method_19(File param_1, String param_32, byte[] param_8, File param_36) {
    var_144(var_24, new ByteSource(var_174, var_70), var_186);
  }

  
  public static void method_19(File param_1, String param_32, byte[] param_8, File param_36, final int param_38) {
    var_144(var_24, new ByteSource(var_174, var_70, var_190), var_186);
  }

  
  public static void method_19(final File param_1, final String param_32, final byte[] param_8) {
    var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        var_144(var_24, var_174, var_70, var_189);
        return true;
      }
    });
  }

  
  public static void method_19(final File param_1, final String param_32, final byte[] param_8, final int param_38) {
    var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        var_144(var_24, var_174, var_70, var_189, var_190);
        return true;
      }
    });
  }

  
  public static void method_19(File param_1, ZipEntrySource param_13, File param_36) {
    var_191(var_24, new ZipEntrySource[] { var_91 }, var_186);
  }

  
  public static void method_19(final File param_1, final ZipEntrySource param_13) {
    var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        var_144(var_24, var_91, var_189);
        return true;
      }
    });
  }

  
  public static void method_26(File param_1, ZipEntrySource[] param_11, File param_36) {
    if (var_46.var_114()) {
      var_46.var_108("Copying '" + var_24 + "' to '" + var_186 + "' and adding " + var_15.var_185(var_85) + ".");
    }

    OutputStream var_192 = null;
    try {
      var_192 = new BufferedOutputStream(new FileOutputStream(var_186));
      var_191(var_24, var_85, var_192);
    }
    catch (IOException var_52) {}
    finally {
      var_38.var_53(var_192);
    }
  }

  
  public static void method_26(File param_1, ZipEntrySource[] param_11, OutputStream param_39) {
    if (var_46.var_114()) {
      var_46.var_108("Copying '" + var_24 + "' to a stream and adding " + var_15.var_185(var_85) + ".");
    }

    ZipOutputStream var_142 = null;
    try {
      var_142 = new ZipOutputStream(var_192);
      var_193(var_24, var_142);
      for (int var_59 = 0; var_59 < var_85.var_60; var_59++) {
        var_144(var_85[var_59], var_142);
      }
      var_142.var_163();
    }
    catch (IOException var_52) {}
  }

  
  public static void method_26(InputStream param_6, ZipEntrySource[] param_11, OutputStream param_39) {
    if (var_46.var_114()) {
      var_46.var_108("Copying input stream to an output stream and adding " + var_15.var_185(var_85) + ".");
    }

    ZipOutputStream var_142 = null;
    try {
      var_142 = new ZipOutputStream(var_192);
      var_193(var_64, var_142);
      for (int var_59 = 0; var_59 < var_85.var_60; var_59++) {
        var_144(var_85[var_59], var_142);
      }
      var_142.var_163();
    }
    catch (IOException var_52) {}
  }

  
  public static void method_26(final File param_1, final ZipEntrySource[] param_11) {
    var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        var_191(var_24, var_85, var_189);
        return true;
      }
    });
  }

  
  public static void method_28(File param_1, String param_32, File param_36) {
    var_195(var_24, new String[] { var_174 }, var_186);
  }

  
  public static void method_28(final File param_1, final String param_32) {
    var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        var_194(var_24, var_174, var_189);
        return true;
      }
    });
  }

  
  public static void method_29(File param_1, String[] param_40, File param_36) {
    if (var_46.var_114()) {
      var_46.var_108("Copying '" + var_24 + "' to '" + var_186 + "' and removing paths " + var_15.var_185(var_196) + ".");
    }

    ZipOutputStream var_142 = null;
    try {
      var_142 = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(var_186)));
      var_193(var_24, var_142, new HashSet<String>(var_15.var_185(var_196)));
    }
    catch (IOException var_52) {}
    finally {
      var_38.var_53(var_142);
    }
  }

  
  public static void method_29(final File param_1, final String[] param_40) {
    var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        var_195(var_24, var_196, var_189);
        return true;
      }
    });
  }

  
  private static void method_27(File param_1, final ZipOutputStream param_18) {
    
    final Set<String> var_58 = new HashSet<String>();
    var_83(var_24, new ZipEntryCallback() {
      public void method_8(InputStream param_9, ZipEntry param_4) throws IOException {
        String var_197 = var_56.var_76();
        if (var_58.var_95(var_197)) {
          var_116.var_182(var_56, var_72, var_142);
        }
        else if (var_46.var_114()) {
          var_46.var_108("Duplicate entry: {}", var_197);
        }
      }
    });
  }

  
  private static void method_27(InputStream param_6, final ZipOutputStream param_18) {
    
    final Set<String> var_58 = new HashSet<String>();
    var_83(var_64, new ZipEntryCallback() {
      public void method_8(InputStream param_9, ZipEntry param_4) throws IOException {
        String var_197 = var_56.var_76();
        if (var_58.var_95(var_197)) {
          var_116.var_182(var_56, var_72, var_142);
        }
        else if (var_46.var_114()) {
          var_46.var_108("Duplicate entry: {}", var_197);
        }
      }
    });
  }

  
  private static void method_27(File param_1, final ZipOutputStream param_18, final Set<String> param_41) {
    final Set<String> var_58 = new HashSet<String>();
    final Set<String> var_199 = var_200(var_24, var_198);
    var_83(var_24, new ZipEntryCallback() {
      public void method_8(InputStream param_9, ZipEntry param_4) throws IOException {
        String var_197 = var_56.var_76();
        if (var_198.var_96(var_197)) {
          return;
        }

        for (String var_201 : var_199) {
          if (var_197.var_202(var_201)) {
            return;
          }
        }

        if (var_58.var_95(var_197)) {
          var_116.var_182(var_56, var_72, var_142);
        }
        else if (var_46.var_114()) {
          var_46.var_108("Duplicate entry: {}", var_197);
        }
      }
    });
  }

  
  static Set<String> method_30(File param_1, Collection<String> param_5) {
    Set<String> var_124 = new HashSet<String>();
    if (var_24 == null) {
      return var_124;
    }
    ZipFile var_50 = null;
    try {
      var_50 = new ZipFile(var_24);
      for (String var_197 : var_58) {
        ZipEntry var_91 = var_50.var_51(var_197);
        if (var_91 != null) {
          if (var_91.var_77()) {
            var_124.var_95(var_91.var_76());
          }
          else if (var_50.var_65(var_91) == null) {
            
            var_124.var_95(var_91.var_76() + var_43);
          }
        }
      }

    }
    catch (IOException var_52) {}
    finally {
      var_53(var_50);
    }
    return var_124;
  }

  
  public static boolean method_31(File param_1, String param_32, File param_10, File param_36) {
    return var_203(var_24, new FileSource(var_174, var_73), var_186);
  }

  
  public static boolean method_31(final File param_1, final String param_32, final File param_10) {
    return var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        return var_203(var_24, new FileSource(var_174, var_73), var_189);
      }
    });
  }

  
  public static boolean method_31(File param_1, String param_32, byte[] param_8, File param_36) {
    return var_203(var_24, new ByteSource(var_174, var_70), var_186);
  }

  
  public static boolean method_31(final File param_1, final String param_32, final byte[] param_8) {
    return var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        return var_203(var_24, new ByteSource(var_174, var_70), var_189);
      }
    });
  }

  
  public static boolean method_31(final File param_1, final String param_32, final byte[] param_8,
      final int param_38) {
    return var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        return var_203(var_24, new ByteSource(var_174, var_70, var_190), var_189);
      }
    });
  }

  
  public static boolean method_31(File param_1, ZipEntrySource param_13, File param_36) {
    return var_204(var_24, new ZipEntrySource[] { var_91 }, var_186);
  }

  
  public static boolean method_31(final File param_1, final ZipEntrySource param_13) {
    return var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        return var_203(var_24, var_91, var_189);
      }
    });
  }

  
  public static boolean method_32(File param_1, ZipEntrySource[] param_11, File param_36) {
    if (var_46.var_114()) {
      var_46.var_108("Copying '" + var_24 + "' to '" + var_186 + "' and replacing entries " + var_15.var_185(var_85) + ".");
    }

    final Map<String, ZipEntrySource> var_205 = var_206(var_85);
    final int var_207 = var_205.var_208();
    try {
      final ZipOutputStream var_142 = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(var_186)));
      try {
        final Set<String> var_58 = new HashSet<String>();
        var_83(var_24, new ZipEntryCallback() {
          public void method_8(InputStream param_9, ZipEntry param_4) throws IOException {
            if (var_58.var_95(var_56.var_76())) {
              ZipEntrySource var_91 = (ZipEntrySource) var_205.var_209(var_56.var_76());
              if (var_91 != null) {
                var_144(var_91, var_142);
              }
              else {
                var_116.var_182(var_56, var_72, var_142);
              }
            }
            else if (var_46.var_114()) {
              var_46.var_108("Duplicate entry: {}", var_56.var_76());
            }
          }
        });
      }
      finally {
        var_38.var_53(var_142);
      }
    }
    catch (IOException var_52) {}
    return var_205.var_208() < var_207;
  }

  
  public static boolean method_32(final File param_1, final ZipEntrySource[] param_11) {
    return var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        return var_204(var_24, var_85, var_189);
      }
    });
  }

  
  public static void method_34(File param_1, ZipEntrySource[] param_11, File param_36) {
    if (var_46.var_114()) {
      var_46.var_108("Copying '" + var_24 + "' to '" + var_186 + "' and adding/replacing entries " + var_15.var_185(var_85)
          + ".");
    }

    final Map<String, ZipEntrySource> var_205 = var_206(var_85);
    try {
      final ZipOutputStream var_142 = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(var_186)));
      try {
        
        final Set<String> var_58 = new HashSet<String>();
        var_83(var_24, new ZipEntryCallback() {
          public void method_8(InputStream param_9, ZipEntry param_4) throws IOException {
            if (var_58.var_95(var_56.var_76())) {
              ZipEntrySource var_91 = (ZipEntrySource) var_205.var_209(var_56.var_76());
              if (var_91 != null) {
                var_144(var_91, var_142);
              }
              else {
                var_116.var_182(var_56, var_72, var_142);
              }
            }
            else if (var_46.var_114()) {
              var_46.var_108("Duplicate entry: {}", var_56.var_76());
            }
          }
        });

        
        for (ZipEntrySource var_211 : var_205.var_212()) {
          var_144(var_211, var_142);
        }
      }
      finally {
        var_38.var_53(var_142);
      }
    }
    catch (IOException var_52) {}
  }

  
  public static void method_34(final File param_1, final ZipEntrySource[] param_11) {
    var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        var_210(var_24, var_85, var_189);
        return true;
      }
    });
  }

  
  static Map<String, ZipEntrySource> method_33(ZipEntrySource... var_85) {
    Map<String, ZipEntrySource> var_141 = new HashMap<String, ZipEntrySource>();
    for (int var_59 = 0; var_59 < var_85.var_60; var_59++) {
      ZipEntrySource var_213 = var_85[var_59];
      var_141.var_214(var_213.var_215(), var_213);
    }
    return var_141;
  }

  
  public static boolean method_35(File param_1, String param_32, ZipEntryTransformer param_42, File param_36) {
    if(var_24.var_102(var_186)){throw new IllegalArgumentException() is var_218 same var_219 the var_220!" +
            "Please var_221 the var_216 method var_222 destination var_223 var_72-place var_224." );}
    return transformEntry(zip, new ZipEntryTransformerEntry(path, transformer), destZip);
  }

  
  public static boolean transformEntry(final File zip, final String path, final ZipEntryTransformer transformer) {
    return operateInPlace(zip, new InPlaceAction() {
      public boolean act(File tmpFile) {
        return transformEntry(zip, path, transformer, tmpFile);
      }
    });
  }

  
  public static boolean transformEntry(File zip, ZipEntryTransformerEntry entry, File destZip) {
    return transformEntries(zip, new ZipEntryTransformerEntry[] { entry }, destZip);
  }

  
  public static boolean transformEntry(final File zip, final ZipEntryTransformerEntry entry) {
    return operateInPlace(zip, new InPlaceAction() {
      public boolean act(File tmpFile) {
        return transformEntry(zip, entry, tmpFile);
      }
    });
  }

  
  public static boolean transformEntries(File zip, ZipEntryTransformerEntry[] entries, File destZip) {
    if (log.isDebugEnabled())
      log.debug("var_225 '" + zip + "' to '" + destZip + "' var_226 var_227 var_85 " + var_15.var_185(var_85) + ".");

    try {
      ZipOutputStream var_142 = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(var_186)));
      try {
        TransformerZipEntryCallback var_67 = new TransformerZipEntryCallback(var_15.var_185(var_85), var_142);
        var_83(var_24, var_67);
        return var_67.var_100();
      }
      finally {
        var_38.var_53(var_142);
      }
    }
    catch (IOException var_52) {}
  }

  
  public static boolean var_228(final File param_1, final ZipEntryTransformerEntry[] param_11) {
    return var_187(var_24, new InPlaceAction() {
      public boolean method_25(File param_37) {
        return var_228(var_24, var_85, var_189);
      }
    });
  }

  
  public static boolean var_216(InputStream param_6, String param_32, ZipEntryTransformer param_42, OutputStream param_28) {
    return var_216(var_64, new ZipEntryTransformerEntry(var_174, var_217), var_161);
  }

  
  public static boolean var_216(InputStream param_6, ZipEntryTransformerEntry param_13, OutputStream param_28) {
    return var_228(var_64, new ZipEntryTransformerEntry[] { var_91 }, var_161);
  }

  
  public static boolean var_228(InputStream param_6, ZipEntryTransformerEntry[] param_11, OutputStream param_28) {
    if (var_46.var_114())
      var_46.var_108("Copying '" + var_64 + "' to '" + var_161 + "' and transforming entries " + var_15.var_185(var_85) + ".");

    try {
      ZipOutputStream var_142 = new ZipOutputStream(var_161);
      TransformerZipEntryCallback var_67 = new TransformerZipEntryCallback(var_15.var_185(var_85), var_142);
      var_83(var_64, var_67);
      
      
      var_142.var_163();
      return var_67.var_100();
    }
    catch (IOException var_52) {}
  }

  private static class class_8 implements ZipEntryCallback {

    private final Map<String, ZipEntryTransformer> var_205;
    private final int var_207;
    private final ZipOutputStream var_142;
    private final Set<String> var_58 = new HashSet<String>();

    public var_229(List<ZipEntryTransformerEntry> param_11, ZipOutputStream param_18) {
      var_205 = var_230(var_85);
      var_207 = var_205.var_208();
      this.var_142 = var_142;
    }

    public void method_8(InputStream param_9, ZipEntry param_4) throws IOException {
      if (var_58.var_95(var_56.var_76())) {
        ZipEntryTransformer var_91 = (ZipEntryTransformer) var_205.var_209(var_56.var_76());
        if (var_91 != null) {
          var_91.var_39(var_72, var_56, var_142);
        }
        else {
          var_116.var_182(var_56, var_72, var_142);
        }
      }
      else if (var_46.var_114()) {
        var_46.var_108("Duplicate entry: {}", var_56.var_76());
      }
    }

    
    public boolean method_11() {
      return var_205.var_208() < var_207;
    }

  }

  
  static Map<String, ZipEntryTransformer> var_230(List<ZipEntryTransformerEntry> param_11) {
    Map<String, ZipEntryTransformer> var_141 = new HashMap<String, ZipEntryTransformer>();
    for (ZipEntryTransformerEntry var_91 : var_85) {
      var_141.var_214(var_91.var_215(), var_91.var_231());
    }
    return var_141;
  }

  
  private static void var_144(ZipEntrySource param_13, ZipOutputStream param_18) throws var_8 {
    var_142.var_158(var_91.var_51());
    InputStream var_72 = var_91.var_65();
    if (var_72 != null) {
      try {
        var_38.var_81(var_72, var_142);
      }
      finally {
        var_38.var_53(var_72);
      }
    }
    var_142.var_159();
  }

  

  
  public static boolean var_232(File param_43, File param_44) {
    try {
      
      if (var_36.var_235(var_233, var_234)) {
        return true;
      }

      var_46.var_108("Comparing archives '{}' and '{}'...", var_233, var_234);

      long var_236 = var_237.var_238();
      boolean var_141 = var_239(var_233, var_234);
      long var_240 = var_237.var_238() - var_236;
      if (var_240 > 0) {
        var_46.var_108("Archives compared in " + var_240 + " ms.");
      }
      return var_141;
    }
    catch (Exception var_52) {}
  }

  private static boolean var_239(File param_43, File param_44) throws var_8 {
    ZipFile var_241 = null;
    ZipFile var_242 = null;
    try {
      var_241 = new ZipFile(var_233);
      var_242 = new ZipFile(var_234);

      
      if (var_241.var_208() != var_242.var_208()) {
        var_46.var_108("Number of entries changed (" + var_241.var_208() + " vs " + var_242.var_208() + ").");
        return false;
      }
      
      Enumeration<? extends ZipEntry> var_84 = var_241.var_85();
      while (var_84.var_86()) {
        ZipEntry var_243 = (ZipEntry) var_84.var_87();
        String var_174 = var_243.var_76();
        ZipEntry var_244 = var_242.var_51(var_174);

        
        if (!var_245(var_174, var_243, var_244)) {
          return false;
        }

        
        InputStream var_246 = null;
        InputStream var_247 = null;
        try {
          var_246 = var_241.var_65(var_243);
          var_247 = var_242.var_65(var_244);

          if (!var_38.var_235(var_246, var_247)) {
            var_46.var_108("Entry '{}' content changed.", var_174);
            return false;
          }
        }
        finally {
          var_38.var_53(var_246);
          var_38.var_53(var_247);
        }
      }
    }
    finally {
      var_53(var_241);
      var_53(var_242);
    }

    var_46.var_108("Archives are the same.");

    return true;
  }

  
  private static boolean var_245(String param_32, ZipEntry param_47, ZipEntry param_48) throws var_8 {
    
    if (var_244 == null) {
      var_46.var_108("Entry '{}' removed.", var_174);
      return false;
    }

    
    if (var_243.var_77()) {
      if (var_244.var_77()) {
        return true; 
      }
      else {
        var_46.var_108("Entry '{}' not a directory any more.", var_174);
        return false;
      }
    }
    else if (var_244.var_77()) {
      var_46.var_108("Entry '{}' now a directory.", var_174);
      return false;
    }

    
    long var_248 = var_243.var_249();
    long var_250 = var_244.var_249();
    if (var_248 != -1 && var_250 != -1 && var_248 != var_250) {
      var_46.var_108("Entry '" + var_174 + "' size changed (" + var_248 + " vs " + var_250 + ").");
      return false;
    }

    
    long var_251 = var_243.var_252();
    long var_253 = var_244.var_252();
    if (var_251 != -1 && var_253 != -1 && var_251 != var_253) {
      var_46.var_108("Entry '" + var_174 + "' CRC changed (" + var_251 + " vs " + var_253 + ").");
      return false;
    }

    
    if (var_46.var_74()) {
      long var_254 = var_243.var_255();
      long var_256 = var_244.var_255();
      if (var_254 != -1 && var_256 != -1 && var_254 != var_256) {
        var_46.var_75("Entry '" + var_174 + "' time changed (" + new Date(var_254) + " vs " + new Date(var_256) + ").");
      }
    }

    return true;
  }

  
  public static boolean var_257(File param_43, File param_44, String param_32) {
    return var_257(var_233, var_234, var_174, var_174);
  }

  
  public static boolean var_257(File param_43, File param_44, String param_49, String param_50) {
    ZipFile var_241 = null;
    ZipFile var_242 = null;

    try {
      var_241 = new ZipFile(var_233);
      var_242 = new ZipFile(var_234);

      return var_260(var_241, var_242, var_258, var_259);
    }
    catch (IOException var_52) {}
    finally {
      var_53(var_241);
      var_53(var_242);
    }
  }

  
  public static boolean var_257(ZipFile param_45, ZipFile param_46, String param_49, String param_50) {
    try {
      return var_260(var_241, var_242, var_258, var_259);
    }
    catch (IOException var_52) {}
  }

  
  private static boolean var_260(ZipFile param_45, ZipFile param_46, String param_49, String param_50) throws var_8 {
    InputStream var_246 = null;
    InputStream var_247 = null;
    try {
      ZipEntry var_243 = var_241.var_51(var_258);
      ZipEntry var_244 = var_242.var_51(var_259);

      if (var_243 == null && var_244 == null) {
        return true;
      }

      if (var_243 == null || var_244 == null) {
        return false;
      }

      var_246 = var_241.var_65(var_243);
      var_247 = var_242.var_65(var_244);
      if (var_246 == null && var_247 == null) {
        return true;
      }
      if (var_246 == null || var_247 == null) {
        return false;
      }

      return var_38.var_235(var_246, var_247);
    }
    finally {
      var_38.var_53(var_246);
      var_38.var_53(var_247);
    }
  }

  
  public static void var_53(ZipFile param_3) {
    try {
      if (var_50 != null) {
        var_50.var_93();
      }
    }
    catch (IOException var_52) {}
  }

  
  private abstract static class class_9 {

    
    abstract boolean method_25(File param_37);
  }

  
  private static boolean var_187(File param_51, InPlaceAction param_7) {
    File var_262 = null;
    try {
      var_262 = var_5.var_263("zt-zip-tmp", ".zip");
      boolean var_141 = var_67.var_188(var_262);
      if (var_141) { 
        var_36.var_79(var_261);
        var_36.var_138(var_262, var_261);
      }
      return var_141;
    }
    catch (IOException var_52) {}
    finally {
      var_36.var_264(var_262);
    }
  }

}
