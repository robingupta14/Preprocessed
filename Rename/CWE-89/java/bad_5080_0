

import var_0.var_1.var_2.var_3;
import var_0.var_1.var_2.var_4;
import var_0.var_5.var_6;
import var_0.var_7.var_8;
import var_0.var_7.var_9;
import var_0.var_7.var_10;
import var_0.var_7.var_11;

import var_12.var_13.var_14.var_15.var_16;
import var_12.var_17.var_18.var_19.var_20.var_21;
import var_12.var_17.var_18.var_19.var_20.var_22;
import var_12.var_17.var_18.var_19.var_20.var_23;
import var_12.var_17.var_18.var_19.var_20.var_24;
import var_12.var_17.var_18.var_19.var_20.var_25;
import var_12.var_17.var_18.var_19.var_20.var_26;
import var_12.var_17.var_18.var_19.var_20.var_27;
import var_12.var_17.var_18.var_19.var_20.var_28;
import var_12.var_17.var_18.var_19.var_20.var_29;
import var_12.var_17.var_18.var_19.var_20.var_30;
import var_12.var_17.var_18.var_19.var_20.var_31;
import var_12.var_17.var_18.var_19.var_20.var_32;
import var_12.var_17.var_18.var_19.var_20.var_33;
import var_12.var_17.var_18.var_19.var_20.var_34;
import var_12.var_17.var_18.var_19.var_20.var_35;
import var_12.var_17.var_36.var_37;
import var_12.var_17.var_36.var_38.var_39;
import var_12.var_17.var_36.var_38.var_40;
import var_12.var_17.var_36.var_41.var_42;
import var_12.var_17.var_36.var_41.var_43;
import var_12.var_17.var_36.var_44.var_45;

import static var_12.var_17.var_18.var_19.var_46.*;

public class class_0 implements Dialect {

    private static final String var_47 = " AND ";

    @var_48
    public String[] method_0() {
        return new String[] {};
    }

    @var_48
    public String method_1(Column param_0) {

        if (var_50 instanceof FunctionColumn) {
            return var_51((FunctionColumn) var_50);
        }
        else if (var_50 instanceof SortColumn) {
            return var_52((SortColumn) var_50);
        }
        else if (var_50 instanceof DynamicDateColumn) {
            return var_53((DynamicDateColumn) var_50);
        }
        else if (var_50 instanceof FixedDateColumn) {
            return var_54((FixedDateColumn) var_50);
        }
        else if (var_50 instanceof SimpleColumn) {
            return var_55((SimpleColumn) var_50);
        }
        else {
            return var_56(var_50.var_57());
        }
    }

    @var_48
    public String method_8(Column param_0) {
        switch (var_50.var_59()) {
            case var_60: {
                return "NUMERIC(28,2)";
            }
            case var_61: {
                return "TIMESTAMP";
            }
            default: {
                return "VARCHAR(" + var_50.var_62() + ")";
            }
        }
    }

    @var_48
    public String method_9(Object param_1) {
        try {
            return var_63 == null ? null : (String) var_63;
        } catch (ClassCastException var_64) {}
    }

    @var_48
    public Double method_10(Object param_1) {
        try {
            return var_63 == null ? null : ((Number) var_63).var_65();
        } catch (ClassCastException var_64) {}
    }

    @var_48
    public Date method_11(Object param_1) {
        try {
            return var_63 == null ? null : (Date) var_63;
        } catch (ClassCastException var_64) {}
    }

    @var_48
    public String method_12(SQLStatement<?> param_2) {
        Table var_68 = var_67.var_69();
        String var_70 = var_71(var_68.var_57());
        if (var_16.var_72(var_68.var_73())) {
            return var_70;
        } else{
            return var_74(var_68.var_73()) + "." + var_70;
        }
    }

    @var_48
    public String method_13(String param_3) {
        return var_70;
    }

    @var_48
    public String method_14(String param_3) {
        return var_70;
    }

    @var_48
    public String method_6(SimpleColumn param_0) {
        String var_75 = var_56(var_50.var_57());
        if (var_50.var_76() != null) {
            var_75 = var_77(var_75, var_50.var_76());
        }
        return var_75;
    }

    @var_48
    public String method_2(FunctionColumn param_0) {
        if (var_28.var_78.var_79(var_50.var_80())) {
            return var_81(var_50.var_82()[0]);
        }
        if (var_28.var_83.var_79(var_50.var_80())) {
            return var_84(var_50.var_82());
        }
        if (var_28.var_85.var_79(var_50.var_80())) {
            return var_86("YEAR", var_50.var_82()[0]);
        }
        if (var_28.var_87.var_79(var_50.var_80())) {
            return var_86("MONTH", var_50.var_82()[0]);
        }
        if (var_28.var_88.var_79(var_50.var_80())) {
            return var_86("DAY", var_50.var_82()[0]);
        }
        if (var_28.var_89.var_79(var_50.var_80())) {
            return var_86("HOUR", var_50.var_82()[0]);
        }
        if (var_28.var_90.var_79(var_50.var_80())) {
            return var_86("MINUTE", var_50.var_82()[0]);
        }
        if (var_28.var_91.var_79(var_50.var_80())) {
            return var_86("SECOND", var_50.var_82()[0]);
        }
        throw new IllegalArgumentException("Column function not supported: " + var_50.var_80());
    }

    @var_48
    public String method_16(Column param_0) {
        String var_92 = var_49(var_50);
        return "LOWER(" + var_92 + ")";
    }

    @var_48
    public String method_17(Column[] param_4) {
        return var_84(var_93, "(", ")", " || ");
    }

    public String method_17(Column[] param_4, String param_5, String param_6, String param_7) {
        StringBuilder var_97 = new StringBuilder();
        var_97.var_98(var_94);
        for (int var_99 = 0; var_99 < var_93.var_100; var_99++) {
            if (var_99 > 0) var_97.var_98(var_96);
            Column var_50 = var_93[var_99];
            ColumnType var_101 = var_50.var_59();
            if (var_37.var_102.var_79(var_101) || var_37.var_103.var_79(var_101)) {
                var_97.var_98("'").var_98(var_50.var_57()).var_98("'");
            } else {
                
                var_97.var_98(var_104(var_50));
            }
        }
        var_97.var_98(var_95);
        return var_97.var_105();
    }

    public String method_19(Column param_0) {
        String var_92 = var_49(var_50);
        return "CAST(" + var_92 + " AS VARCHAR)";
    }

    @var_48
    public String method_18(String param_8, Column param_0) {
        String var_92 = var_49(var_50);
        return "EXTRACT(" + var_106 + " FROM " + var_92 + ")";
    }

    @var_48
    public String method_3(SortColumn param_9) {

        Column var_50 = var_107.var_108();
        String var_92 = var_49(var_50);

        
        if (!var_16.var_72(var_50.var_109())) {
            var_92 = var_110(var_50.var_109());
        }
        return var_92 + " " + var_111(var_107.var_112());
    }

    @var_48
    public String method_21(SortOrder param_10) {
        if (var_45.var_114.var_79(var_113)) {
            return "ASC";
        }
        if (var_45.var_115.var_79(var_113)) {
            return "DESC";
        }
        throw new IllegalArgumentException("Sort order not supported: " + var_113);
    }

    
    @var_48
    public String method_4(DynamicDateColumn param_0) {
        Column var_116 = var_117(var_50);
        return var_49(var_116);
    }

    public Column method_22(DynamicDateColumn param_0) {
        Column var_118 = var_50(var_50.var_57());
        DateIntervalType var_101 = var_50.var_119();
        Column var_120 = var_50("-", var_37.var_103, 3);
        Column var_121 = var_50(" ", var_37.var_103, 3);
        Column var_122 = var_50(":", var_37.var_103, 3);

        if (var_43.var_91.var_79(var_101)) {
            return var_123(var_118.var_124(), var_120,
                    var_118.var_125(), var_120,
                    var_118.var_126(), var_121,
                    var_118.var_127(), var_122,
                    var_118.var_128(), var_122,
                    var_118.var_129());
        }
        if (var_43.var_90.var_79(var_101)) {
            return var_123(var_118.var_124(), var_120,
                    var_118.var_125(), var_120,
                    var_118.var_126(), var_121,
                    var_118.var_127(), var_122,
                    var_118.var_128());
        }
        if (var_43.var_89.var_79(var_101)) {
            return var_123(var_118.var_124(), var_120,
                    var_118.var_125(), var_120,
                    var_118.var_126(), var_121,
                    var_118.var_127());
        }
        if (var_43.var_88.var_79(var_101) || var_43.var_130.var_79(var_101)) {
            return var_123(var_118.var_124(), var_120,
                    var_118.var_125(), var_120,
                    var_118.var_126());
        }
        if (var_43.var_87.var_79(var_101)
                || var_43.var_131.var_79(var_101)) {

            return var_123(var_118.var_124(), var_120,
                    var_118.var_125());
        }
        if (var_43.var_85.var_79(var_101)
                || var_43.var_132.var_79(var_101)
                || var_43.var_133.var_79(var_101)
                || var_43.var_134.var_79(var_101)) {

            return var_118.var_124();
        }
        throw new IllegalArgumentException("Group '" + var_118.var_57() +
                "' by the given date interval type is not supported: " + var_101);
    }

    @var_48
    public String method_5(FixedDateColumn param_0) {
        Column var_118 = var_50(var_50.var_57());
        DateIntervalType var_101 = var_50.var_119();
        if (var_43.var_91.var_79(var_101)) {
            return var_49(var_118.var_129());
        }
        if (var_43.var_90.var_79(var_101)) {
            return var_49(var_118.var_128());
        }
        if (var_43.var_89.var_79(var_101)) {
            return var_49(var_118.var_127());
        }
        if (var_43.var_135.var_79(var_101)) {
            return var_49(var_118.var_126());
        }
        if (var_43.var_87.var_79(var_101)) {
            return var_49(var_118.var_125());
        }
        if (var_43.var_131.var_79(var_101)) {
            
            return var_49(var_118.var_125());
        }
        throw new IllegalArgumentException("Interval size '" + var_101 + "' not supported for " +
                "fixed date intervals. The only supported sizes are: " +
                var_16.var_136(var_43.var_137, ","));
    }

    @var_48
    public String method_7(String param_3) {
        return var_70;
    }

    @var_48
    public String method_23(String param_3) {
        return "\"" + var_70 + "\"";
    }

    @var_48
    public String method_24(String param_12) {
        return "\"" + var_139 + "\"";
    }

    @var_48
    public String method_20(String param_12) {
        return "\"" + var_139 + "\"";
    }

    @var_48
    public String method_25(Condition param_13) {
        if (var_141 instanceof CoreCondition) {
            return var_142((CoreCondition) var_141);
        }
        if (var_141 instanceof LogicalCondition) {
            return var_143((LogicalCondition) var_141);
        }
        throw new IllegalArgumentException("Condition type not supported: " + var_141);
    }

    @var_48
    public String method_26(CoreCondition param_13) {
        String var_92 = var_49(var_141.var_144());
        CoreFunctionType var_101 = var_141.var_80();
        Object[] var_145 = var_141.var_146();
        if (var_39.var_147.var_79(var_101)) {
            return var_148(var_92);
        }
        if (var_39.var_149.var_79(var_101)) {
            return var_150(var_92);
        }
        if (var_39.var_151.var_79(var_101)) {
            return var_152(var_92, var_145[0]);
        }
        if (var_39.var_153.var_79(var_101)) {
            return var_154(var_92, var_145[0]);
        }
        if (var_39.var_153.var_79(var_101)) {
            return var_154(var_92, var_145[0]);
        }
        if (var_39.var_155.var_79(var_101)) {
            return var_156(var_92, var_145[0]);
        }
        if (var_39.var_157.var_79(var_101)) {
            return var_158(var_92, var_145[0]);
        }
        if (var_39.var_159.var_79(var_101)) {
            return var_160(var_92, var_145[0]);
        }
        if (var_39.var_161.var_79(var_101)) {
            return var_162(var_92, var_145[0]);
        }
        if (var_39.var_163.var_79(var_101)) {
            return var_164(var_92, var_145[0]);
        }
        if (var_39.var_165.var_79(var_101)) {
            return var_166(var_92, var_145[0], var_145[1]);
        }
        if (var_39.var_167.var_79(var_101)) {
            return var_168(var_92, var_145[0]);
        }
        if (var_39.var_169.var_79(var_101)) {
            return var_170(var_92, var_145[0]);
        }

        throw new IllegalArgumentException("Core condition type not supported: " + var_101);
    }

    @var_48
    public String method_29(String param_0) {
        return var_50 + " IS NOT NULL";
    }

    @var_48
    public String method_28(String param_0) {
        return var_50 + " IS NULL";
    }

    @var_48
    public String method_30(String param_0, Object param_15) {
        if (var_171 == null) {
            return var_148(var_50);
        } else {
            String var_172 = var_173(var_171);
            return var_50 + " = " + var_172;
        }
    }

    @var_48
    public String method_31(String param_0, Object param_15) {
        if (var_171 == null) {
            return var_150(var_50);
        } else {
            String var_172 = var_173(var_171);
            return var_50 + " <> " + var_172;
        }
    }

    @var_48
    public String method_32(String param_0, Object param_15) {
        String var_172 = var_173(var_171);
        return var_50 + " LIKE " + var_172;
    }

    @var_48
    public String method_33(String param_0, Object param_15) {
        String var_172 = var_173(var_171);
        return var_50 + " > " + var_172;
    }

    @var_48
    public String method_34(String param_0, Object param_15) {
        String var_172 = var_173(var_171);
        return var_50 + " >= " + var_172;
    }

    @var_48
    public String method_35(String param_0, Object param_15) {
        String var_172 = var_173(var_171);
        return var_50 + " < " + var_172;
    }

    @var_48
    public String method_36(String param_0, Object param_15) {
        String var_172 = var_173(var_171);
        return var_50 + " <= " + var_172;
    }

    @var_48
    public String method_37(String param_0, Object param_16, Object param_17) {
        String var_176 = var_173(var_174);
        String var_177 = var_173(var_175);
        return var_50 + " BETWEEN " + var_176 + var_47 + var_177;
    }

    @var_48
    public String method_38(String param_0, Object param_15) {
        StringBuilder var_178 = new StringBuilder();
        var_178.var_98(var_50);
        var_178.var_98(" IN (");

        for (Object var_179 : (Collection<?>) var_171) {

            var_178.var_98(var_173(var_179) + ",");
        }
        var_178.var_180(var_178.var_100()-1);
        var_178.var_98(")");
        return var_178.var_105();
    }

    @var_48
    public String method_39(String param_0, Object param_15) {
        StringBuilder var_178 = new StringBuilder();
        var_178.var_98(var_50);
        var_178.var_98(" NOT IN (");

        for (Object var_179 : (Collection<?>) var_171) {

            var_178.var_98(var_173(var_179) + ",");
        }
        var_178.var_180(var_178.var_100()-1);
        var_178.var_98(")");
        return var_178.var_105();
    }

    @var_48
    public String method_40(Object param_15) {
        if (var_171 == null) {
            return "null";
        }
        if (var_171 instanceof Number) {
            return var_181((Number) var_171);
        }
        if (var_171 instanceof Date) {
            return var_182((Date) var_171);
        }
        return var_183(var_171.var_105());
    }


    @var_48
    public String method_41(Number param_15) {
        return var_171.var_105();
    }

    SimpleDateFormat var_184 = new SimpleDateFormat();

    @var_48
    public String method_42(Date param_15) {
        
        return "TIMESTAMP '" + var_184.var_185(var_171) + "'";
    }

    @var_48
    public String method_43(String param_15) {
        return "'" + var_171 + "'";
    }

    @var_48
    public String method_27(LogicalCondition param_13) {
        LogicalExprType var_101 = var_141.var_59();
        Condition[] var_186 = var_141.var_187();
        if (var_40.var_188.var_79(var_101)) {
            return var_189(var_186[0]);
        }
        if (var_40.var_47.var_79(var_101)) {
            return var_190(var_186);
        }
        if (var_40.var_191.var_79(var_101)) {
            return var_192(var_186);
        }
        throw new IllegalArgumentException("Logical condition type not supported: " + var_101);
    }

    @var_48
    public String method_44(Condition param_13) {
        String var_193 = var_140(var_141);
        return "NOT(" + var_193 + ")";
    }

    @var_48
    public String method_45(Condition[] param_18) {
        return var_194(var_186, "AND");
    }

    @var_48
    public String method_46(Condition[] param_18) {
        return var_194(var_186, "OR");
    }

    protected String method_47(Condition[] param_18, String param_19) {
        StringBuilder var_97 = new StringBuilder();
        var_97.var_98("(");
        for (int var_99 = 0; var_99 < var_186.var_100; var_99++) {
            Condition var_141 = var_186[var_99];
            String var_193 = var_140(var_141);
            if (var_99 > 0) {
                var_97.var_98(" ").var_98(var_195).var_98(" ");
            }
            var_97.var_98(var_193);
        }
        var_97.var_98(")");
        return var_97.var_105();
    }

    @var_48
    public String method_15(String param_0, AggregateFunctionType param_20) {
        switch (var_196) {
            case var_197: {
                return "SUM(" + var_50 + ")";
            }
            case var_198: {
                return "MAX(" + var_50 + ")";
            }
            case var_199: {
                return "MIN(" + var_50 + ")";
            }
            case var_200: {
                return "AVG(" + var_50 + ")";
            }
            case var_201: {
                return "COUNT(" + var_50 + ")";
            }
            case var_202: {
                return "COUNT(DISTINCT " + var_50 + ")";
            }
            default: {
                throw new IllegalArgumentException("Function type not valid: " + var_196);
            }
        }
    }

    @var_48
    public String method_48(Select param_21) {
        List<SortColumn> var_204 = new ArrayList<SortColumn>();
        var_204.var_205(var_203.var_206());
        try {
            
            var_203.var_206().var_207();
            return "SELECT "
                    + var_77("*", var_42.var_201)
                    + " FROM (" + var_203.var_208() + ") "
                    + var_138("dbSQL");
        } finally {
            var_203.var_209(var_204);
        }
    }

    @var_48
    public String method_49(CreateTable param_22) {
        StringBuilder var_19 = new StringBuilder();
        List<String> var_211 = new ArrayList<String>();
        String var_212 = var_66(var_210);
        var_19.var_98(var_212);

        
        boolean var_213 = true;
        var_19.var_98(" (\n");
        for (Column var_50 : var_210.var_82()) {
            if (!var_213) {
                var_19.var_98(",\n");
            }
            String var_70 = var_56(var_50.var_57());
            String var_101 = var_58(var_50);
            var_19.var_98(" ").var_98(var_70).var_98(" ").var_98(var_101);
            if (var_210.var_214().var_215(var_50)) {
                var_19.var_98(" NOT NULL");
                var_211.var_216(var_70);
            }
            var_213 = false;
        }
        if (!var_210.var_214().var_217()) {
            var_19.var_98(",\n");
            var_19.var_98(" PRIMARY KEY(");
            var_19.var_98(var_16.var_136(var_211, ","));
            var_19.var_98(")\n");
        }
        var_19.var_98(")");
        return var_19.var_105();
    }

    @var_48
    public String method_49(Select param_21) {
        
        StringBuilder var_19 = new StringBuilder();
        String var_218 = var_219(var_203);
        var_19.var_98(var_218);

        
        var_19.var_98(" ").var_98(var_220(var_203));

        
        List<Condition> var_221 = var_203.var_222();
        if (!var_221.var_217()) {
            var_19.var_98(" ").var_98(var_223(var_203));
        }

        
        List<Column> var_224 = var_203.var_225();
        if (!var_224.var_217()) {
            var_19.var_98(" ").var_98(var_226(var_203));
        }

        
        List<SortColumn> var_227 = var_203.var_206();
        if (!var_227.var_217()) {
            var_19.var_98(" ").var_98(var_228(var_203));
        }

        
        int var_229 = var_203.var_230();
        int var_231 = var_203.var_232();
        if (var_229 > 0 || var_231 > 0) {
            String var_233 = var_234(var_203);
            if (!var_16.var_72(var_233)) {
                var_19.var_98(var_233);
            }
        }
        return var_19.var_105();
    }

    @var_48
    public String method_49(Insert param_23) {
        
        StringBuilder var_19 = new StringBuilder();
        String var_236 = var_237(var_235);
        var_19.var_98(var_236);

        
        var_19.var_98(" ").var_98(var_66(var_235));

        
        boolean var_213 = true;
        var_19.var_98(" (");
        for (Column var_50 : var_235.var_82()) {
            if (!var_213) {
                var_19.var_98(",");
            }
            String var_238 = var_49(var_50);
            var_19.var_98(var_238);
            var_213 = false;
        }
        var_19.var_98(")");

        
        var_213 = true;
        var_19.var_98(" VALUES (");
        for (Object var_63 : var_235.var_239()) {
            if (!var_213) {
                var_19.var_98(",");
            }
            String var_238 = var_173(var_63);
            var_19.var_98(var_238);
            var_213 = false;
        }
        var_19.var_98(")");
        return var_19.var_105();
    }

    @var_48
    public String method_49(Delete param_24) {
        
        StringBuilder var_19 = new StringBuilder();
        String var_241 = var_242(var_240);
        var_19.var_98(var_241);

        
        var_19.var_98(" ").var_98(var_66(var_240));

        
        List<Condition> var_221 = var_240.var_222();
        if (!var_221.var_217()) {
            var_19.var_98(" ").var_98(var_223(var_240));
        }

        return var_19.var_105();
    }

    @var_48
    public String method_50(Select param_21) {
        StringBuilder var_243 = new StringBuilder();
        var_243.var_98(var_244(var_203));

        var_243.var_98(" ");
        if (var_203.var_82().var_217()) {
            var_243.var_98("*");
        } else {
            boolean var_213 = true;
            for (Column var_50 : var_203.var_82()) {
                if (!var_213) {
                    var_243.var_98(", ");
                }
                String var_238 = var_49(var_50);
                boolean var_245 = !var_16.var_72(var_50.var_109());
                boolean var_246 = (var_50 instanceof SimpleColumn) && !var_238.var_79(var_56(var_50.var_109()));

                if (var_245 && (var_247() || var_246)) {
                    var_238 += " " + var_138(var_50.var_109());
                }
                var_243.var_98(var_238);
                var_213 = false;
            }
        }
        return var_243.var_105();
    }

    @var_48
    public String method_51(Select param_21) {
        String var_248 = var_203.var_249();
        Table var_250 = var_203.var_251();
        String var_174 = var_252(var_203);

        if (var_248 != null) {
            String var_139 = var_138("dbSQL");
            return var_174  + " (" + var_248 + ") " + var_139;
        }
        else if (var_250 != null ){
            String var_68 = var_66(var_203);
            return var_174 + " " + var_68;
        }
        return "";
    }

    @var_48
    public String method_52(Select param_21) {
        StringBuilder var_19 = new StringBuilder();
        List<Condition> var_221 = var_203.var_222();
        boolean var_213 = true;
        for (Condition var_141 : var_221) {
            if (var_213) {
                var_19.var_98(var_253(var_203)).var_98(" ");
            } else {
                var_19.var_98(var_47);
            }
            String var_238 = var_140(var_141);
            var_19.var_98(var_238);
            var_213 = false;
        }
        return var_19.var_105();
    }

    @var_48
    public String method_52(Delete param_24) {
        StringBuilder var_19 = new StringBuilder();
        List<Condition> var_221 = var_240.var_222();
        boolean var_213 = true;
        for (Condition var_141 : var_221) {
            if (var_213) {
                var_19.var_98(var_253(var_240)).var_98(" ");
            } else {
                var_19.var_98(var_47);
            }
            String var_238 = var_140(var_141);
            var_19.var_98(var_238);
            var_213 = false;
        }
        return var_19.var_105();
    }

    @var_48
    public String method_53(Select param_21) {
        StringBuilder var_19 = new StringBuilder();
        List<Column> var_224 = var_203.var_225();
        boolean var_213 = true;
        for (Column var_50 : var_224) {
            if (var_213) {
                var_19.var_98(var_254(var_203)).var_98(" ");
            } else {
                var_19.var_98(", ");
            }
            Column var_255 = var_247() ? var_256(var_203, var_50) : null;
            var_19.var_98(var_255 != null ? var_110(var_255.var_109()) : var_49(var_50));
            var_213 = false;
        }
        return var_19.var_105();
    }

    @var_48
    public String method_54(Select param_21) {
        StringBuilder var_19 = new StringBuilder();
        List<SortColumn> var_227 = var_203.var_206();
        boolean var_213 = true;
        for (SortColumn var_50 : var_227) {
            if (var_213) {
                var_19.var_98(var_257(var_203)).var_98(" ");
            } else {
                var_19.var_98(", ");
            }
            Column var_255 = var_247() ? var_256(var_203, var_50.var_108()) : null;
            if (var_255 != null) {
                var_50 = new SortColumn(var_255, var_50.var_112());
            }
            String var_238 = var_52(var_50);
            var_19.var_98(var_238);
            var_213 = false;
        }
        return var_19.var_105();
    }

    @var_48
    public String method_55(Select param_21) {
        int var_231 = var_203.var_232();
        int var_229 = var_203.var_230();
        StringBuilder var_97 = new StringBuilder();
        if (var_229 > 0) var_97.var_98(" LIMIT ").var_98(var_229);
        if (var_231 > 0) var_97.var_98(" OFFSET ").var_98(var_231);
        return var_97.var_105();
    }

    @var_48
    public String method_58(Select param_21) {
        return "SELECT";
    }

    @var_48
    public String method_56(Insert param_23) {
        return "INSERT INTO";
    }

    @var_48
    public String method_57(Delete param_24) {
        return "DELETE FROM";
    }

    @var_48
    public String method_60(Select param_21) {
        return "FROM";
    }

    @var_48
    public String method_61(Select param_21) {
        return "WHERE";
    }

    @var_48
    public String method_61(Delete param_24) {
        return "WHERE";
    }

    @var_48
    public String method_62(Select param_21) {
        return "GROUP BY";
    }

    @var_48
    public String method_64(Select param_21) {
        return "ORDER BY";
    }

    

    protected Object method_65(Object param_25, String param_26, Object[] param_14) {
        Method var_260[] = var_258.var_261().var_262();
        for (int var_99 = 0; var_99 < var_260.var_100; ++var_99) {
            if (var_259.var_79(var_260[var_99].var_57())) {
                try {
                    var_260[var_99].var_263(true);
                    return var_260[var_99].var_264(var_258, var_145);
                }
                catch (IllegalAccessException var_265) {}
                catch (InvocationTargetException var_266) {}
            }
        }
        return null;
    }

    public boolean method_66(Column param_27, Column param_28) {
        if (!var_268.var_57().var_79(var_269.var_57())) {
            return false;
        }
        if (!var_268.var_261().var_57().var_79(var_269.var_261().var_57())) {
            return false;
        }
        if (var_268 instanceof DynamicDateColumn) {
            DynamicDateColumn var_270 = (DynamicDateColumn) var_268;
            DynamicDateColumn var_271 = (DynamicDateColumn) var_269;
            if (!var_270.var_119().var_79(var_271.var_119())) {
                return false;
            }
        }
        if (var_268 instanceof FixedDateColumn) {
            FixedDateColumn var_272 = (FixedDateColumn) var_268;
            FixedDateColumn var_273 = (FixedDateColumn) var_269;
            if (!var_272.var_119().var_79(var_273.var_119())) {
                return false;
            }
        }
        return true;
    }

    public boolean method_59() {
        return false;
    }

    public Column method_63(Select param_21, Column param_11) {
        for (Column var_50 : var_203.var_82()) {
            if (!(var_50 instanceof SimpleColumn) &&
                    !var_16.var_72(var_50.var_109()) &&
                    var_267(var_50, var_118)) {

                return var_50;
            }
        }
        return null;
    }
}
