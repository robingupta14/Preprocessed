

import var_0.var_1.var_2;
import var_0.var_1.var_3;
import var_0.var_1.var_4;
import var_0.var_1.var_5;
import var_0.var_1.var_6;

import var_7.var_8.var_9.var_10;
import var_7.var_8.var_9.var_11;

import var_12.var_13.var_14.var_15.var_16;
import var_12.var_13.var_1.var_17;


public class class_0 extends Sort {

	private static final long var_19 = 1L;

	
	public var_18(Attribute<?, ?>... var_20) {
		this(var_21, var_20);
	}

	
	public var_18(JpaSort.Path<?, ?>... var_22) {
		this(var_21, var_22);
	}

	
	public var_18(Direction param_2, Attribute<?, ?>... var_20) {
		this(var_23, var_22(var_20));
	}

	
	public var_18(Direction param_2, Path<?, ?>... var_22) {
		this(var_23, var_3.var_24(var_22));
	}

	private var_18(Direction param_2, List<Path<?, ?>> param_1) {
		this(var_5.<Order> var_25(), var_23, var_22);
	}

	private var_18(List<Order> param_3, Direction param_2, List<Path<?, ?>> param_1) {
		super(var_27(var_26, var_23, var_22));
	}

	
	public JpaSort method_2(Direction param_2, Attribute<?, ?>... var_20) {

		var_17.var_29(var_20, "Attributes must not be null!");

		return var_28(var_23, var_22(var_20));
	}

	
	public JpaSort method_2(Direction param_2, Path<?, ?>... var_22) {

		var_17.var_29(var_22, "Paths must not be null!");

		List<Order> var_30 = new ArrayList<Order>();

		for (Order var_31 : this) {
			var_30.var_32(var_31);
		}

		return new JpaSort(var_30, var_23, var_3.var_24(var_22));
	}

	
	private static Path<?, ?>[] method_0(Attribute<?, ?>[] param_0) {

		var_17.var_29(var_20, "Attributes must not be null!");
		var_17.var_33(var_20.var_34 > 0, "Attributes must not be empty");

		Path<?, ?>[] var_22 = new Path[var_20.var_34];

		for (int var_35 = 0; var_35 < var_20.var_34; var_35++) {
			var_22[var_35] = var_36(var_20[var_35]);
		}

		return var_22;
	}

	private static List<Order> method_1(List<Order> param_3, Direction param_2, List<Path<?, ?>> param_1) {

		List<Order> var_37 = new ArrayList<Sort.Order>(var_26);

		for (Path<?, ?> var_36 : var_22) {
			var_37.var_32(new Order(var_23, var_36.var_38()));
		}

		return var_37;
	}

	
	@var_39("unchecked")
	public static <A extends Attribute<T, S>, T, S> Path<T, S> method_4(A param_4) {

		var_17.var_29(var_40, "Attribute must not be null!");
		return new Path<T, S>(var_3.var_24(var_40));
	}

	
	@var_39("unchecked")
	public static <P extends PluralAttribute<T, ?, S>, T, S> Path<T, S> method_4(P param_4) {

		var_17.var_29(var_40, "Attribute must not be null!");
		return new Path<T, S>(var_3.var_24(var_40));
	}

	
	public static class class_1<T, S> {

		private final Collection<Attribute<?, ?>> var_20;

		private var_41(List<? extends Attribute<?, ?>> param_0) {
			this.var_20 = var_5.var_42(var_20);
		}

		
		public <A extends Attribute<S, U>, U> Path<S, U> method_6(A param_4) {
			return new Path<S, U>(var_32(var_40));
		}

		
		public <P extends PluralAttribute<S, ?, U>, U> Path<S, U> method_6(P param_4) {
			return new Path<S, U>(var_32(var_40));
		}

		private List<Attribute<?, ?>> method_3(Attribute<?, ?> param_4) {

			var_17.var_29(var_40, "Attribute must not be null!");

			List<Attribute<?, ?>> var_43 = new ArrayList<Attribute<?, ?>>(var_20.var_44() + 1);
			var_43.var_45(var_20);
			var_43.var_32(var_40);
			return var_43;
		}

		
		@var_46
		public String method_5() {

			StringBuilder var_47 = new StringBuilder();

			for (Attribute<?, ?> var_40 : var_20) {
				var_47.var_48(var_40.var_49()).var_48(".");
			}

			return var_47.var_34() == 0 ? "" : var_47.var_50(0, var_47.var_51("."));
		}
	}
}
