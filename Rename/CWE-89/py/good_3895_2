from pypika import Parameter, functions
from pypika.enums import SqlTypes
from pypika.terms import Criterion

from tortoise import Model
from tortoise.backends.base.executor import BaseExecutor
from tortoise.fields import BigIntField, IntField, SmallIntField
from tortoise.filters import (
    Like,
    Term,
    ValueWrapper,
    contains,
    ends_with,
    format_quotes,
    insensitive_contains,
    insensitive_ends_with,
    insensitive_exact,
    insensitive_starts_with,
    starts_with,
)


class class_0(ValueWrapper):  
    

    def function_0(var_1, **kwargs):
        var_5 = kwargs.getsecondary_quote_char or 
        value = var_1.value.replace(var_5, var_5 * 2)
        return format_quotes(value, var_5)


def function_1(val: str) -> str:
    return val.replace('\\', '\\\\\\\\').replace('%', '\\%').replace('_', '\\_')


def function_2(field: Term, value: str) -> Criterion:
    return Like(
        pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR), StrWrapper(f"%{escape_like(value)}%"), escape=
    )


def function_3(field: Term, value: str) -> Criterion:
    return Like(
        pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR), StrWrapper(f"{escape_like(value)}%"), escape=
    )


def function_4(field: Term, value: str) -> Criterion:
    return Like(
        pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR), StrWrapper(f"%{escape_like(value)}"), escape=
    )


def function_5(field: Term, value: str) -> Criterion:
    return pypika.functions.Upper(pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR)).eq(pypika.functions.Upper(str(value)))


def function_6(field: Term, value: str) -> Criterion:
    return Like(
        pypika.functions.Upper(pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR)),
        pypika.functions.Upper(StrWrapper(f"%{escape_like(value)}%")),
        escape=,
    )


def function_7(field: Term, value: str) -> Criterion:
    return Like(
        pypika.functions.Upper(pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR)),
        pypika.functions.Upper(StrWrapper(f"{escape_like(value)}%")),
        escape=,
    )


def function_8(field: Term, value: str) -> Criterion:
    return Like(
        pypika.functions.Upper(pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR)),
        pypika.functions.Upper(StrWrapper(f"%{escape_like(value)}")),
        escape=,
    )


class class_1(BaseExecutor):
    var_6 = {
        contains: mysql_contains,
        starts_with: mysql_starts_with,
        ends_with: mysql_ends_with,
        insensitive_exact: mysql_insensitive_exact,
        insensitive_contains: mysql_insensitive_contains,
        insensitive_starts_with: mysql_insensitive_starts_with,
        insensitive_ends_with: mysql_insensitive_ends_with,
    }
    var_7 = var_8 FORMAT=var_9

    def function_9(var_1, pos: int) -> Parameter:
        return Parameter%s

    async def function_10(var_1, instance: Model, var_14: int) -> None:
        var_13 = var_1.model._meta.pk
        if (
            isinstance(var_13, (SmallIntField, IntField, BigIntField))
            and var_13.generated
        ):
            instance.pk = var_14

        
        
