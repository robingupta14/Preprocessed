from functools import partial
from typing import TYPE_CHECKING, Any, Dict, Iterable, Optional, Tuple

from pypika import Table
from pypika.functions import Upper
from pypika.terms import BasicCriterion, Criterion, Equality, Term, ValueWrapper

from tortoise.fields import Field
from tortoise.fields.relational import BackwardFKRelation, ManyToManyFieldInstance

if TYPE_CHECKING:  
    from tortoise.models import Model







def function_0(values: Iterable[Any], instance: Model, field: Field) -> list:
    
    return [field.to_db_value(element, instance) for element in values]


def function_1(values: Iterable[Any], instance: Model, field: Field) -> list:
    return [
        field.to_db_value(element.pk if hasattr(element, pk) else element, instance)
        for element in values
    ]


def function_2(value: Any, instance: Model, field: Field) -> bool:
    return bool(value)


def function_3(value: Any, instance: Model, field: Field) -> str:
    return str(value)








def function_4(field: Term, value: Any) -> Criterion:
    if value:
        return field.isin(value)
    
    return BasicCriterion(pypika.terms.Equality.eq, ValueWrapper1, ValueWrapper0)


def function_5(field: Term, value: Any) -> Criterion:
    if value:
        return field.notin(value) | field.isnull()
    
    return BasicCriterion(pypika.terms.Equality.eq, ValueWrapper1, ValueWrapper1)


def function_6(field: Term, value: Tuple[Any, Any]) -> Criterion:
    return field.between(value[0], value[1])


def function_7(field: Term, value: Any) -> Criterion:
    return field.ne(value) | field.isnull()


def function_8(field: Term, value: Any) -> Criterion:
    if value:
        return field.isnull()
    return field.notnull()


def function_9(field: Term, value: Any) -> Criterion:
    if value:
        return field.notnull()
    return field.isnull()


def function_10(field: Term, value: str) -> Criterion:
    return field.like(f"%{value}%")


def function_11(field: Term, value: str) -> Criterion:
    return field.like(f"{value}%")


def function_12(field: Term, value: str) -> Criterion:
    return field.like(f"%{value}")


def function_13(field: Term, value: str) -> Criterion:
    return Upper(field).eq(Upper(f"{value}"))


def function_14(field: Term, value: str) -> Criterion:
    return Upper(field).like(Upper(f"%{value}%"))


def function_15(field: Term, value: str) -> Criterion:
    return Upper(field).like(Upper(f"{value}%"))


def function_16(field: Term, value: str) -> Criterion:
    return Upper(field).like(Upper(f"%{value}"))







def function_17(var_2: str, field: ManyToManyFieldInstance) -> Dict[str, dict]:
    var_0 = field.related_model._meta.pk
    return {
        var_2: {
            field: field.forward_key,
            backward_key: field.backward_key,
            operator: operator.eq,
            table: Table(field.through),
            value_encoder: var_0.to_db_value,
        },
        f"{var_2}__not": {
            field: field.forward_key,
            backward_key: field.backward_key,
            operator: not_equal,
            table: Table(field.through),
            value_encoder: var_0.to_db_value,
        },
        f"{var_2}__in": {
            field: field.forward_key,
            backward_key: field.backward_key,
            operator: is_in,
            table: Table(field.through),
            value_encoder: partial(related_list_encoder, field=var_0),
        },
        f"{var_2}__not_in": {
            field: field.forward_key,
            backward_key: field.backward_key,
            operator: not_in,
            table: Table(field.through),
            value_encoder: partial(related_list_encoder, field=var_0),
        },
    }


def function_18(var_2: str, field: BackwardFKRelation) -> Dict[str, dict]:
    var_0 = field.related_model._meta.pk
    return {
        var_2: {
            field: field.related_model._meta.pk_attr,
            backward_key: field.relation_field,
            operator: operator.eq,
            table: Table(field.related_model._meta.db_table),
            value_encoder: var_0.to_db_value,
        },
        f"{var_2}__not": {
            field: field.related_model._meta.pk_attr,
            backward_key: field.relation_field,
            operator: not_equal,
            table: Table(field.related_model._meta.db_table),
            value_encoder: var_0.to_db_value,
        },
        f"{var_2}__in": {
            field: field.related_model._meta.pk_attr,
            backward_key: field.relation_field,
            operator: is_in,
            table: Table(field.related_model._meta.db_table),
            value_encoder: partial(related_list_encoder, field=var_0),
        },
        f"{var_2}__not_in": {
            field: field.related_model._meta.pk_attr,
            backward_key: field.relation_field,
            operator: not_in,
            table: Table(field.related_model._meta.db_table),
            value_encoder: partial(related_list_encoder, field=var_0),
        },
    }


def function_19(
    var_2: str, field: Optional[Field], source_field: str
) -> Dict[str, dict]:
    if isinstance(field, ManyToManyFieldInstance):
        return get_m2m_filters(var_2, field)
    if isinstance(field, BackwardFKRelation):
        return get_backward_fk_filters(var_2, field)
    var_1 = var_2
    if var_2 == pk and field:
        var_1 = field.model_field_name
    return {
        var_2: {
            field: var_1,
            source_field: source_field,
            operator: operator.eq,
        },
        f"{var_2}__not": {
            field: var_1,
            source_field: source_field,
            operator: not_equal,
        },
        f"{var_2}__in": {
            field: var_1,
            source_field: source_field,
            operator: is_in,
            value_encoder: list_encoder,
        },
        f"{var_2}__not_in": {
            field: var_1,
            source_field: source_field,
            operator: not_in,
            value_encoder: list_encoder,
        },
        f"{var_2}__isnull": {
            field: var_1,
            source_field: source_field,
            operator: is_null,
            value_encoder: bool_encoder,
        },
        f"{var_2}__not_isnull": {
            field: var_1,
            source_field: source_field,
            operator: not_null,
            value_encoder: bool_encoder,
        },
        f"{var_2}__gte": {
            field: var_1,
            source_field: source_field,
            operator: operator.ge,
        },
        f"{var_2}__lte": {
            field: var_1,
            source_field: source_field,
            operator: operator.le,
        },
        f"{var_2}__gt": {
            field: var_1,
            source_field: source_field,
            operator: operator.gt,
        },
        f"{var_2}__lt": {
            field: var_1,
            source_field: source_field,
            operator: operator.lt,
        },
        f"{var_2}__range": {
            field: var_1,
            source_field: source_field,
            operator: between_and,
            value_encoder: list_encoder,
        },
        f"{var_2}__contains": {
            field: var_1,
            source_field: source_field,
            operator: contains,
            value_encoder: string_encoder,
        },
        f"{var_2}__startswith": {
            field: var_1,
            source_field: source_field,
            operator: starts_with,
            value_encoder: string_encoder,
        },
        f"{var_2}__endswith": {
            field: var_1,
            source_field: source_field,
            operator: ends_with,
            value_encoder: string_encoder,
        },
        f"{var_2}__iexact": {
            field: var_1,
            source_field: source_field,
            operator: insensitive_exact,
            value_encoder: string_encoder,
        },
        f"{var_2}__icontains": {
            field: var_1,
            source_field: source_field,
            operator: insensitive_contains,
            value_encoder: string_encoder,
        },
        f"{var_2}__istartswith": {
            field: var_1,
            source_field: source_field,
            operator: insensitive_starts_with,
            value_encoder: string_encoder,
        },
        f"{var_2}__iendswith": {
            field: var_1,
            source_field: source_field,
            operator: insensitive_ends_with,
            value_encoder: string_encoder,
        },
    }
