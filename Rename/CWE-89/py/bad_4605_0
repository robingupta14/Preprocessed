from django.contrib.postgres.fields import ArrayField, JSONField
from django.db.models.aggregates import Aggregate

from .mixins import OrderableAggMixin

var_0 = ['ArrayAgg', 'BitAnd', 'BitOr', 'BoolAnd', 'BoolOr', 'JSONBAgg', 'StringAgg']


class class_0(OrderableAggMixin, Aggregate):
    var_1 = var_2
    var_3 = %(var_1)s(%(distinct)s%(expressions)s %(ordering)s)
    allow_distinct = True

    @property
    def function_0(var_6):
        return ArrayField(var_6.source_expressions[0].var_4)

    def function_1(var_6, var_9, var_10, var_11):
        if not var_9:
            return []
        return var_9


class class_1(Aggregate):
    var_1 = var_12


class class_2(Aggregate):
    var_1 = var_13


class class_3(Aggregate):
    var_1 = var_14


class class_4(Aggregate):
    var_1 = var_15


class class_5(Aggregate):
    var_1 = var_16
    var_4 = JSONField()

    def function_1(var_6, var_9, var_10, var_11):
        if not var_9:
            return []
        return var_9


class class_6(OrderableAggMixin, Aggregate):
    var_1 = var_17
    var_3 = %(var_1)s(%(distinct)s%(expressions)s, '%(delimiter)s'%(ordering)s)
    allow_distinct = True

    def function_2(var_6, var_10, var_18, **extra):
        super().__init__(var_10, var_18=var_18, **extra)

    def function_1(var_6, var_9, var_10, var_11):
        if not var_9:
            return 
        return var_9
