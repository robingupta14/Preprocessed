from pypika import Parameter, functions
from pypika.enums import SqlTypes
from pypika.terms import Criterion

from tortoise import Model
from tortoise.backends.base.executor import BaseExecutor
from tortoise.fields import BigIntField, Field, IntField, SmallIntField
from tortoise.filters import (
    contains,
    ends_with,
    insensitive_contains,
    insensitive_ends_with,
    insensitive_exact,
    insensitive_starts_with,
    starts_with,
)


def function_0(field: Field, value: str) -> Criterion:
    return pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR).like(f"%{value}%")


def function_1(field: Field, value: str) -> Criterion:
    return pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR).like(f"{value}%")


def function_2(field: Field, value: str) -> Criterion:
    return pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR).like(f"%{value}")


def function_3(field: Field, value: str) -> Criterion:
    return pypika.functions.Upper(pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR)).eq(pypika.functions.Upper(f"{value}"))


def function_4(field: Field, value: str) -> Criterion:
    return pypika.functions.Upper(pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR)).like(pypika.functions.Upper(f"%{value}%"))


def function_5(field: Field, value: str) -> Criterion:
    return pypika.functions.Upper(pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR)).like(pypika.functions.Upper(f"{value}%"))


def function_6(field: Field, value: str) -> Criterion:
    return pypika.functions.Upper(pypika.functions.Cast(field, pypika.enums.SqlTypes.CHAR)).like(pypika.functions.Upper(f"%{value}"))


class class_0(BaseExecutor):
    var_0 = {
        contains: mysql_contains,
        starts_with: mysql_starts_with,
        ends_with: mysql_ends_with,
        insensitive_exact: mysql_insensitive_exact,
        insensitive_contains: mysql_insensitive_contains,
        insensitive_starts_with: mysql_insensitive_starts_with,
        insensitive_ends_with: mysql_insensitive_ends_with,
    }
    var_1 = var_2 FORMAT=var_3

    def function_7(var_5, pos: int) -> Parameter:
        return Parameter%s

    async def function_8(var_5, instance: Model, var_12: int) -> None:
        var_11 = var_5.model._meta.pk
        if (
            isinstance(var_11, (SmallIntField, IntField, BigIntField))
            and var_11.generated
        ):
            instance.pk = var_12

        
        
