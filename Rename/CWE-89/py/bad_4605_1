from django.db.models.expressions import F, OrderBy


class class_0:

    def function_0(var_1, var_3, var_7=(), **extra):
        if not isinstance(var_7, (list, tuple)):
            var_7 = [var_7]
        var_7 = var_7 or []
        
        var_7 = (
            (OrderBy(F(o[1:]), descending=True) if isinstance(o, str) and o[0] == - else o)
            for o in var_7
        )
        super().__init__(var_3, **extra)
        var_1.var_7 = var_1._parse_expressions(*var_7)

    def function_1(var_1, *args, **kwargs):
        var_1.var_7 = [expr.resolve_expression(*args, **kwargs) for expr in var_1.var_7]
        return super().resolve_expression(*args, **kwargs)

    def function_2(var_1, var_10, var_11):
        if var_1.var_7:
            var_12 = []
            var_13 = []
            for expr in var_1.var_7:
                var_14, var_15 = expr.as_sql(var_10, var_11)
                var_13.append(var_14)
                var_12.extend(var_15)
            var_16, var_17 = super().as_sql(var_10, var_11, var_7=(
                ORDER BY  + <built-in method join of str object at 0x7f0734bb7c30>(var_13)
            ))
            return var_16, var_17 + var_12
        return super().as_sql(var_10, var_11, var_7=)

    def function_3(var_1, var_18):
        
        
        var_1.var_7 = var_18[var_1._get_ordering_expressions_index():]
        return super().set_source_expressions(var_18[:var_1._get_ordering_expressions_index()])

    def function_4(var_1):
        return super().get_source_expressions() + var_1.var_7

    def function_5(var_1):
        
        var_19 = var_1.get_source_expressions()
        return len(var_19) - len(var_1.var_7)
