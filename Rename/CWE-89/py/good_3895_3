from functools import partial
from typing import TYPE_CHECKING, Any, Dict, Iterable, Optional, Tuple

from pypika import Table
from pypika.functions import Upper
from pypika.terms import (
    BasicCriterion,
    Criterion,
    Enum,
    Equality,
    Term,
    ValueWrapper,
    basestring,
    date,
    format_quotes,
)

from tortoise.fields import Field
from tortoise.fields.relational import BackwardFKRelation, ManyToManyFieldInstance

if TYPE_CHECKING:  
    from tortoise.models import Model






def function_0(var_2, **kwargs):  
    var_6 = kwargs.getsecondary_quote_char or 
    var_7 = kwargs.getdialect
    if var_7:
        var_7 = var_7.var_8

    if isinstance(var_2.var_8, Term):
        return var_2.var_8.get_sql(**kwargs)
    if isinstance(var_2.var_8, Enum):
        return var_2.var_8.var_8
    if isinstance(var_2.var_8, date):
        var_8 = var_2.var_8.isoformat()
        return format_quotes(var_8, var_6)
    if isinstance(var_2.var_8, basestring):
        var_8 = var_2.var_8.replace(var_6, var_6 * 2)
        if var_7 == mysql:
            var_8 = var_8.replace('\\', '\\\\')
        return format_quotes(var_8, var_6)
    if isinstance(var_2.var_8, bool):
        return str.lower(str(var_2.var_8))
    if var_2.var_8 is None:
        return null
    return str(var_2.var_8)


ValueWrapper.var_0 = var_0



class class_0(BasicCriterion):  
    def function_1(var_2, var_9, var_10, alias=None, var_13= ESCAPE '\') -> None:
        
        super().__init__( LIKE , var_9, var_10, alias=alias)
        var_2.var_13 = var_13

    def function_2(var_2, var_6=", with_alias=False, **kwargs):
        var_16 = <built-in method format of str object at 0x7f0735d19770>(
            comparator=var_2.comparator,
            var_9=var_2.var_9.get_sql(var_6=var_6, **kwargs),
            var_10=var_2.var_10.get_sql(var_6=var_6, **kwargs),
            var_13=var_2.var_13,
        )
        if with_alias and var_2.alias:  
            return <built-in method format of str object at 0x7f0735d09870>(var_16=var_16, alias=var_2.alias)
        return var_16


def function_3(val: Any) -> Any:
    if isinstance(val, str):
        print(val)
        return val.replace('\\', '\\\\')
    return val


def function_4(val: str) -> str:
    return val.replace('\\', '\\\\').replace('%', '\\%').replace('_', '\\_')








def function_5(values: Iterable[Any], instance: Model, field: Field) -> list:
    
    return [field.to_db_value(element, instance) for element in values]


def function_6(values: Iterable[Any], instance: Model, field: Field) -> list:
    return [
        field.to_db_value(element.pk if hasattr(element, pk) else element, instance)
        for element in values
    ]


def function_7(var_8: Any, instance: Model, field: Field) -> bool:
    return bool(var_8)


def function_8(var_8: Any, instance: Model, field: Field) -> str:
    return str(var_8)








def function_9(field: Term, var_8: Any) -> Criterion:
    if var_8:
        return field.isin(var_8)
    
    return BasicCriterion(Equality.eq, ValueWrapper1, ValueWrapper0)


def function_10(field: Term, var_8: Any) -> Criterion:
    if var_8:
        return field.notin(var_8) | field.isnull()
    
    return BasicCriterion(Equality.eq, ValueWrapper1, ValueWrapper1)


def function_11(field: Term, var_8: Tuple[Any, Any]) -> Criterion:
    return field.between(var_8[0], var_8[1])


def function_12(field: Term, var_8: Any) -> Criterion:
    return field.ne(var_8) | field.isnull()


def function_13(field: Term, var_8: Any) -> Criterion:
    if var_8:
        return field.isnull()
    return field.notnull()


def function_14(field: Term, var_8: Any) -> Criterion:
    if var_8:
        return field.notnull()
    return field.isnull()


def function_15(field: Term, var_8: str) -> Criterion:
    return Like(field, field.wrap_constant(f"%{escape_like(var_8)}%"))


def function_16(field: Term, var_8: str) -> Criterion:
    return Like(field, field.wrap_constant(f"{escape_like(var_8)}%"))


def function_17(field: Term, var_8: str) -> Criterion:
    return Like(field, field.wrap_constant(f"%{escape_like(var_8)}"))


def function_18(field: Term, var_8: str) -> Criterion:
    return Upper(field).eq(Upper(str(var_8)))


def function_19(field: Term, var_8: str) -> Criterion:
    return Like(Upper(field), field.wrap_constant(Upper(f"%{escape_like(var_8)}%")))


def function_20(field: Term, var_8: str) -> Criterion:
    return Like(Upper(field), field.wrap_constant(Upper(f"{escape_like(var_8)}%")))


def function_21(field: Term, var_8: str) -> Criterion:
    return Like(Upper(field), field.wrap_constant(Upper(f"%{escape_like(var_8)}")))







def function_22(var_19: str, field: ManyToManyFieldInstance) -> Dict[str, dict]:
    var_17 = field.related_model._meta.pk
    return {
        var_19: {
            field: field.forward_key,
            backward_key: field.backward_key,
            operator: operator.eq,
            table: Table(field.through),
            value_encoder: var_17.to_db_value,
        },
        f"{var_19}__not": {
            field: field.forward_key,
            backward_key: field.backward_key,
            operator: not_equal,
            table: Table(field.through),
            value_encoder: var_17.to_db_value,
        },
        f"{var_19}__in": {
            field: field.forward_key,
            backward_key: field.backward_key,
            operator: is_in,
            table: Table(field.through),
            value_encoder: partial(related_list_encoder, field=var_17),
        },
        f"{var_19}__not_in": {
            field: field.forward_key,
            backward_key: field.backward_key,
            operator: not_in,
            table: Table(field.through),
            value_encoder: partial(related_list_encoder, field=var_17),
        },
    }


def function_23(var_19: str, field: BackwardFKRelation) -> Dict[str, dict]:
    var_17 = field.related_model._meta.pk
    return {
        var_19: {
            field: field.related_model._meta.pk_attr,
            backward_key: field.relation_field,
            operator: operator.eq,
            table: Table(field.related_model._meta.db_table),
            value_encoder: var_17.to_db_value,
        },
        f"{var_19}__not": {
            field: field.related_model._meta.pk_attr,
            backward_key: field.relation_field,
            operator: not_equal,
            table: Table(field.related_model._meta.db_table),
            value_encoder: var_17.to_db_value,
        },
        f"{var_19}__in": {
            field: field.related_model._meta.pk_attr,
            backward_key: field.relation_field,
            operator: is_in,
            table: Table(field.related_model._meta.db_table),
            value_encoder: partial(related_list_encoder, field=var_17),
        },
        f"{var_19}__not_in": {
            field: field.related_model._meta.pk_attr,
            backward_key: field.relation_field,
            operator: not_in,
            table: Table(field.related_model._meta.db_table),
            value_encoder: partial(related_list_encoder, field=var_17),
        },
    }


def function_24(
    var_19: str, field: Optional[Field], source_field: str
) -> Dict[str, dict]:
    if isinstance(field, ManyToManyFieldInstance):
        return get_m2m_filters(var_19, field)
    if isinstance(field, BackwardFKRelation):
        return get_backward_fk_filters(var_19, field)
    var_18 = var_19
    if var_19 == pk and field:
        var_18 = field.model_field_name
    return {
        var_19: {
            field: var_18,
            source_field: source_field,
            operator: operator.eq,
        },
        f"{var_19}__not": {
            field: var_18,
            source_field: source_field,
            operator: not_equal,
        },
        f"{var_19}__in": {
            field: var_18,
            source_field: source_field,
            operator: is_in,
            value_encoder: list_encoder,
        },
        f"{var_19}__not_in": {
            field: var_18,
            source_field: source_field,
            operator: not_in,
            value_encoder: list_encoder,
        },
        f"{var_19}__isnull": {
            field: var_18,
            source_field: source_field,
            operator: is_null,
            value_encoder: bool_encoder,
        },
        f"{var_19}__not_isnull": {
            field: var_18,
            source_field: source_field,
            operator: not_null,
            value_encoder: bool_encoder,
        },
        f"{var_19}__gte": {
            field: var_18,
            source_field: source_field,
            operator: operator.ge,
        },
        f"{var_19}__lte": {
            field: var_18,
            source_field: source_field,
            operator: operator.le,
        },
        f"{var_19}__gt": {
            field: var_18,
            source_field: source_field,
            operator: operator.gt,
        },
        f"{var_19}__lt": {
            field: var_18,
            source_field: source_field,
            operator: operator.lt,
        },
        f"{var_19}__range": {
            field: var_18,
            source_field: source_field,
            operator: between_and,
            value_encoder: list_encoder,
        },
        f"{var_19}__contains": {
            field: var_18,
            source_field: source_field,
            operator: contains,
            value_encoder: string_encoder,
        },
        f"{var_19}__startswith": {
            field: var_18,
            source_field: source_field,
            operator: starts_with,
            value_encoder: string_encoder,
        },
        f"{var_19}__endswith": {
            field: var_18,
            source_field: source_field,
            operator: ends_with,
            value_encoder: string_encoder,
        },
        f"{var_19}__iexact": {
            field: var_18,
            source_field: source_field,
            operator: insensitive_exact,
            value_encoder: string_encoder,
        },
        f"{var_19}__icontains": {
            field: var_18,
            source_field: source_field,
            operator: insensitive_contains,
            value_encoder: string_encoder,
        },
        f"{var_19}__istartswith": {
            field: var_18,
            source_field: source_field,
            operator: insensitive_starts_with,
            value_encoder: string_encoder,
        },
        f"{var_19}__iendswith": {
            field: var_18,
            source_field: source_field,
            operator: insensitive_ends_with,
            value_encoder: string_encoder,
        },
    }
