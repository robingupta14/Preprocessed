







static bool fn_0(unsigned char var_14)
{
  switch (var_14) {
    case '0': case '1': case '2': case '3': case '4':
    case '5': case '6': case '7': case '8': case '9':
    case 'a': case 'b': case 'c': case 'd': case 'e':
    case 'f': case 'g': case 'h': case 'i': case 'j':
    case 'k': case 'l': case 'm': case 'n': case 'o':
    case 'p': case 'q': case 'r': case 's': case 't':
    case 'u': case 'v': case 'w': case 'x': case 'y': case 'z':
    case 'A': case 'B': case 'C': case 'D': case 'E':
    case 'F': case 'G': case 'H': case 'I': case 'J':
    case 'K': case 'L': case 'M': case 'N': case 'O':
    case 'P': case 'Q': case 'R': case 'S': case 'T':
    case 'U': case 'V': case 'W': case 'X': case 'Y': case 'Z':
    case '-': case '.': case '_': case '~':
      return TRUE;
    default:
      break;
  }
  return FALSE;
}


char *fn_2(const char *string, int var_8)
{
  return curl_easy_escape(NULL, string, var_8);
}


char *fn_4(const char *string, int var_16)
{
  return curl_easy_unescape(NULL, string, var_16, NULL);
}

char *fn_6(CURL *handle, const char *string, int var_8)
{
  size_t var_14 = (var_8?(size_t)var_8:strlen(string))+1;
  char *ns;
  char *testing_ptr = NULL;
  unsigned char var_14;
  size_t var_11 = var_14;
  size_t var_14=0;
  size_t var_16;
  CURLcode var_16;

  ns = malloc(var_14);
  if(!ns)
    return NULL;

  var_16 = var_14-1;
  while(var_16--) {
    var_14 = *string;

    if(Curl_isunreserved(var_14))

      ns[var_14++]=var_14;
    else {

      var_11 += 2;
      if(var_11 > var_14) {
        var_14 *= 2;
        testing_ptr = realloc(ns, var_14);
        if(!testing_ptr) {
          free( ns );
          return NULL;
        }
        else {
          ns = testing_ptr;
        }
      }

      var_16 = Curl_convert_to_network(handle, &var_14, 1);
      if(var_16) {

        free(ns);
        return NULL;
      }

      snprintf(&ns[var_14], 4, "%%%02X", var_14);

      var_14+=3;
    }
    string++;
  }
  ns[var_14]=0;
  return ns;
}

CURLcode fn_11(struct struct_12 *data,
                        const char *string, size_t var_16,
                        char **ostring, size_t *olen,
                        bool var_14)
{
  size_t var_14 = (var_16?var_16:strlen(string))+1;
  char *ns = malloc(var_14);
  unsigned char var_14;
  size_t var_14=0;
  unsigned long hex;
  CURLcode var_16;

  if(!ns)
    return CURLE_OUT_OF_MEMORY;

  while(--var_14 > 0) {
    var_14 = *string;
    if(('%' == var_14) && ISXDIGIT(string[1]) && ISXDIGIT(string[2])) {

      char hexstr[3];
      char *ptr;
      hexstr[0] = string[1];
      hexstr[1] = string[2];
      hexstr[2] = 0;

      hex = strtoul(hexstr, &ptr, 16);

      var_14 = curlx_ultouc(hex);

      var_16 = Curl_convert_from_network(data, &var_14, 1);
      if(var_16) {

        free(ns);
        return var_16;
      }

      string+=2;
      var_14-=2;
    }
    if(var_14 && (var_14 < 0x20)) {
      free(ns);
      return CURLE_URL_MALFORMAT;
    }

    ns[var_14++] = var_14;
    string++;
  }
  ns[var_14]=0;

  if(olen)

    *olen = var_14;

  if(ostring)

    *ostring = ns;

  return CURLE_OK;
}







char *fn_14(CURL *handle, const char *string, int var_16,
                         int *olen)
{
  char *str = NULL;
  size_t var_16 = var_16;
  size_t outputlen;
  CURLcode var_16 = Curl_urldecode(handle, string, var_16, &str, &outputlen,
                                FALSE);
  if(var_16)
    return NULL;
  if(olen)
    *olen = curlx_uztosi(outputlen);
  return str;
}




void fn_16(void *p)
{
  if(p)
    free(p);
}
