<?php





class class_0 extends \var_1 {

   public function fn_0() {
      $var_2
         ->if($var_2->var_4)
         ->var_5
            ->boolean($var_2->var_7->tableExists('glpi_configs'))->isTrue()
            ->boolean($var_2->var_7->tableExists('fakeTable'))->isFalse();
   }

   public function fn_1() {
      $var_2
         ->if($var_2->var_4)
         ->var_5
            ->boolean($var_2->var_7->fieldExists('glpi_configs', 'id'))->isTrue()
            ->boolean($var_2->var_7->fieldExists('glpi_configs', 'ID'))->isFalse()
            ->boolean($var_2->var_7->fieldExists('glpi_configs', 'fakeField'))->isFalse()
            ->when(
               function () {
                  $var_2->boolean($var_2->var_7->fieldExists('fakeTable', 'id'))->isFalse();
               }
            )->var_13
               ->withType(var_15)
               ->exists()
            ->when(
               function () {
                  $var_2->boolean($var_2->var_7->fieldExists('fakeTable', 'fakeField'))->isFalse();
               }
            )->var_13
               ->withType(var_15)
               ->exists();
   }

   protected function fn_2() {
      return [
         ['field', '`field`'],
         ['`field`', '`field`'],
         ['*', '*'],
         ['table.field', '`table`.`field`'],
         ['table.*', '`table`.*'],
         ['field AS f', '`field` AS `f`'],
         ['field as f', '`field` AS `f`'],
         ['table.field as f', '`table`.`field` AS `f`'],
      ];
   }

   
   public function fn_3($var_17, $var_18) {
      $var_2->string(\var_0::quoteName($var_17))->isIdenticalTo($var_18);
   }

   protected function fn_4() {
      return [
         ['foo', "'foo'"],
         ['bar', "'bar'"],
         ['42', "'42'"],
         ['+33', "'+33'"],
         [null, 'NULL'],
         ['null', 'NULL'],
         ['NULL', 'NULL'],
         ['`field`', '`field`'],
         ['`field', "'`field'"]
      ];
   }

   
   public function fn_5($var_17, $var_21) {
      $var_2->string(\var_0::quoteValue($var_17))->isIdenticalTo($var_21);
   }


   protected function fn_6() {
      return [
         [
            'table', [
               'field'  => 'value',
               'other'  => 'doe'
            ],
            'INSERT INTO `table` (`field`, `other`) VALUES (\'value\', \'doe\')'
         ], [
            '`table`', [
               '`field`'  => 'value',
               '`other`'  => 'doe'
            ],
            'INSERT INTO `table` (`field`, `other`) VALUES (\'value\', \'doe\')'
         ], [
            'table', [
               'field'  => new \var_22(),
               'other'  => new \var_22()
            ],
            'INSERT INTO `table` (`field`, `other`) VALUES (?, ?)'
         ], [
            'table', [
               'field'  => new \var_22('field'),
               'other'  => new \var_22('other')
            ],
            'INSERT INTO `table` (`field`, `other`) VALUES (:field, :other)'
         ]
      ];
   }

   
   public function fn_7($var_23, $var_24, $var_21) {
      $var_2
         ->if($var_2->var_4)
         ->var_5
            ->string($var_2->var_7->buildInsert($var_23, $var_24))->isIdenticalTo($var_21);
   }

   protected function fn_8() {
      return [
         [
            'table', [
               'field'  => 'value',
               'other'  => 'doe'
            ], [
               'id'  => 1
            ],
            'UPDATE `table` SET `field` = \'value\', `other` = \'doe\' WHERE `id` = \'1\''
         ], [
            'table', [
               'field'  => 'value'
            ], [
               'id'  => [1, 2]
            ],
            'UPDATE `table` SET `field` = \'value\' WHERE `id` IN (\'1\', \'2\')'
         ], [
            'table', [
               'field'  => 'value'
            ], [
               'NOT'  => ['id' => [1, 2]]
            ],
            'UPDATE `table` SET `field` = \'value\' WHERE  NOT (`id` IN (\'1\', \'2\'))'
         ], [
            'table', [
               'field'  => new \var_22()
            ], [
               'NOT' => ['id' => [new \var_22(), new \var_22()]]
            ],
            'UPDATE `table` SET `field` = ? WHERE  NOT (`id` IN (?, ?))'
         ], [
            'table', [
               'field'  => new \var_22('field')
            ], [
               'NOT' => ['id' => [new \var_22('idone'), new \var_22('idtwo')]]
            ],
            'UPDATE `table` SET `field` = :field WHERE  NOT (`id` IN (:idone, :idtwo))'
         ], [
            'table', [
               'field'  => new \var_26(\var_0::quoteName('field') . ' + 1')
            ], [
               'id'  => [1, 2]
            ],
            'UPDATE `table` SET `field` = `field` + 1 WHERE `id` IN (\'1\', \'2\')'
         ]
      ];
   }

   
   public function fn_9($var_23, $var_24, $var_27, $var_21) {
       $var_2
         ->if($var_2->var_4)
         ->var_5
            ->string($var_2->var_7->buildUpdate($var_23, $var_24, $var_27))->isIdenticalTo($var_21);
   }

   public function fn_10() {
      $var_2->exception(
         function() {
            $var_2
               ->if($var_2->var_4)
               ->var_5
                  ->string($var_2->var_7->buildUpdate('table', ['a' => 'b'], []))->isIdenticalTo('');
         }
      )->hasMessage('Cannot run an UPDATE query without WHERE clause!');
   }

   protected function fn_11() {
      return [
         [
            'table', [
               'id'  => 1
            ],
            'DELETE `table` FROM `table` WHERE `id` = \'1\''
         ], [
            'table', [
               'id'  => [1, 2]
            ],
            'DELETE `table` FROM `table` WHERE `id` IN (\'1\', \'2\')'
         ], [
            'table', [
               'NOT'  => ['id' => [1, 2]]
            ],
            'DELETE `table` FROM `table` WHERE  NOT (`id` IN (\'1\', \'2\'))'
         ], [
            'table', [
               'NOT'  => ['id' => [new \var_22(), new \var_22()]]
            ],
            'DELETE `table` FROM `table` WHERE  NOT (`id` IN (?, ?))'
         ], [
            'table', [
               'NOT'  => ['id' => [new \var_22('idone'), new \var_22('idtwo')]]
            ],
            'DELETE `table` FROM `table` WHERE  NOT (`id` IN (:idone, :idtwo))'
         ]
      ];
   }

   
   public function fn_12($var_23, $var_27, $var_21) {
       $var_2
         ->if($var_2->var_4)
         ->var_5
            ->string($var_2->var_7->buildDelete($var_23, $var_27))->isIdenticalTo($var_21);
   }

   public function fn_13() {
      $var_2->exception(
         function() {
            $var_2
               ->if($var_2->var_4)
               ->var_5
                  ->string($var_2->var_7->buildDelete('table', []))->isIdenticalTo('');
         }
      )->hasMessage('Cannot run an DELETE query without WHERE clause!');
   }

   public function fn_14() {
      $var_2
         ->if($var_2->var_4)
         ->var_5
            ->given($var_33 = $var_2->var_7->listTables())
            ->object($var_33)
               ->isInstanceOf(\var_37::var_38)
            ->integer(count($var_33))
               ->isGreaterThan(100)
            ->given($var_33 = $var_2->var_7->listTables('glpi_configs'))
            ->object($var_33)
               ->isInstanceOf(\var_37::var_38)
               ->hasSize(1);

   }

   public function fn_15() {
      $var_42 = new \var_43();
      $var_2->newTestedInstance();
      $var_44 = $var_2->var_7->listTables();
      $var_2->object($var_44)->isInstanceOf(\var_37::var_38);
      $var_2->integer(count($var_44))->isGreaterThan(200);

      
      while ($var_45 = $var_44->next()) {
         $var_2->array($var_45)
            ->hasSize(1);
         $var_23 = $var_45['TABLE_NAME'];
         if ($var_23 == 'glpi_appliancerelations') {
            
            continue;
         }
         $var_48 = $var_42->getItemTypeForTable($var_23);

         $var_2->object($var_50 = $var_42->getItemForItemtype($var_48))->isInstanceOf('CommonDBTM', $var_23);
         $var_2->string(get_class($var_50))->isIdenticalTo($var_48);
         $var_2->string($var_42->getTableForItemType($var_48))->isIdenticalTo($var_23);
      }
   }

   public function fn_16() {
      $var_2
         ->if($var_2->var_4)
         ->var_5
            ->string($var_2->var_7->escape('nothing to do'))->isIdenticalTo('nothing to do')
            ->string($var_2->var_7->escape("shoul'be escaped"))->isIdenticalTo("shoul\\'be escaped")
            ->string($var_2->var_7->escape("First\nSecond"))->isIdenticalTo("First\\nSecond")
            ->string($var_2->var_7->escape("First\rSecond"))->isIdenticalTo("First\\rSecond")
            ->string($var_2->var_7->escape('Hi, "you"'))->isIdenticalTo('Hi, \\"you\\"');
   }

   protected function fn_17() {
      return [
         [
            'sql' => "SQL EXPRESSION;

OTHER EXPRESSION;
",
            'expected'  => "SQL EXPRESSION;
OTHER EXPRESSION;"
         ]
      ];
   }

   
   public function fn_18($var_55, $var_21) {
      $var_2
         ->if($var_2->var_4)
         ->var_5
            ->string($var_2->var_7->removeSqlComments($var_55))->isIdenticalTo($var_21);
   }

   
   protected function fn_19 () {
      return array_merge([
         [
            'sql'       => "SQL;\n-- comment;\n\nSQL2;",
            'expected'  => "SQL;\n\nSQL2;"
         ]
      ], $var_2->fn_17());
   }

   
   public function fn_20($var_55, $var_21) {
      $var_2
         ->if($var_2->var_4)
         ->var_5
            ->string($var_2->var_7->removeSqlRemarks($var_55))->isIdenticalTo($var_21);
   }
}
