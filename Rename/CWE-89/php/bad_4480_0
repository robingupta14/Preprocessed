<?php




class class_0 {

    
    public const var_0 = ':memory:';

    
    public $var_1;

    
    protected $var_2 = [];

    
    protected $var_3;

    
    protected $var_4 = [];

    
    public function fn_0($var_3 = self::var_0, $var_5 = []) {

        $var_6 = "sqlite:{$var_3}";

        $var_7->var_3 = $var_3;
        $var_7->var_1 = new \var_8($var_6, null, null, $var_5);

        $var_9 = $var_7;

        $var_7->var_1->sqliteCreateFunction('document_key', function($var_11, $var_12){

            $var_12 = \var_13($var_12, true);
            $var_14      = '';

            if (strpos($var_11, '.') !== false) {

                $var_15 = \var_16('.', $var_11);

                switch (\var_17($var_15)) {
                    case 2:
                        $var_14 = isset($var_12[$var_15[0]][$var_15[1]]) ? $var_12[$var_15[0]][$var_15[1]] : '';
                        break;
                    case 3:
                        $var_14 = isset($var_12[$var_15[0]][$var_15[1]][$var_15[2]]) ? $var_12[$var_15[0]][$var_15[1]][$var_15[2]] : '';
                        break;
                    default:
                        $var_14 = isset($var_12[$var_15[0]]) ? $var_12[$var_15[0]] : '';
                }

            } else {
                $var_14 = isset($var_12[$var_11]) ? $var_12[$var_11] : '';
            }

            return \var_18($var_14) || \var_19($var_14) ? \var_20($var_14) : $var_14;
        }, 2);

        $var_7->var_1->sqliteCreateFunction('document_criteria', function($var_21, $var_12) use($var_9) {

            $var_12 = \var_13($var_12, true);

            return $var_9->fn_1($var_21, $var_12);
        }, 2);

        $var_7->var_1->exec('PRAGMA journal_mode = MEMORY');
        $var_7->var_1->exec('PRAGMA synchronous = OFF');
        $var_7->var_1->exec('PRAGMA PAGE_SIZE = 4096');
    }

    
    public function fn_2($var_24) {

        $var_25 = \var_26('criteria');

        if (\var_27($var_24)) {
           $var_7->var_4[$var_25] = $var_24;
           return $var_25;
        }

        if (is_array($var_24)) {

            $var_28 = null;

            eval('$fn = function($document) { return '.class_2::fn_11($var_24).'; };');

            $var_7->var_4[$var_25] = $var_28;

            return $var_25;
        }

        return null;
    }

    
    public function fn_1($var_25, $var_12) {

        return isset($var_7->var_4[$var_25]) ? $var_7->var_4[$var_25]($var_12):false;
    }

    
    public function fn_3() {
        $var_7->var_1->query('VACUUM');
    }

    
    public function fn_4() {
        if ($var_7->var_3 != static::var_0) {
            \var_30($var_7->var_3);
        }
    }

    
    public function fn_5($var_32) {
        $var_7->var_1->exec("CREATE TABLE `{$var_32}` ( id INTEGER PRIMARY KEY AUTOINCREMENT, document TEXT )");
    }

    
    public function fn_6($var_32) {
        $var_7->var_1->exec("DROP TABLE `{$var_32}`");

        
        unset($var_7->var_2[$var_32]);
    }

    
    public function fn_7() {

        $var_34   = $var_7->var_1->query("SELECT name FROM sqlite_master WHERE type='table' AND name!='sqlite_sequence';");
        $var_35 = $var_34->fetchAll( \var_8::var_37);
        $var_38  = [];

        foreach ($var_35 as $var_39) {
            $var_38[] = $var_39['name'];
        }

        return $var_38;
    }

    
    public function fn_8() {

        foreach ($var_7->fn_7() as $var_32) {
            if(!isset($var_7->var_2[$var_32])) {
                $var_7->var_2[$var_32] = new class_1($var_32, $var_7);
            }
        }

        return $var_7->var_2;
    }

    
    public function fn_9($var_32) {

        if (!isset($var_7->var_2[$var_32])) {

            if (!in_array($var_32, $var_7->fn_7())) {
                $var_7->fn_5($var_32);
            }

            $var_7->var_2[$var_32] = new class_1($var_32, $var_7);
        }

        return $var_7->var_2[$var_32];
    }

    public function fn_10($var_41) {

        return $var_7->fn_9($var_41);
    }
}


class class_2 {

    public static function fn_11($var_24, $var_42 = ' && ') {

        $var_28 = [];

        foreach ($var_24 as $var_11 => $var_43) {

            switch($var_11) {

                case '$and':

                    $var_44 = [];

                    foreach ($var_43 as $var_45) {
                        $var_44[] = self::fn_11($var_45, ' && ');
                    }

                    $var_28[] = '('.\var_46(' && ', $var_44).')';

                    break;
                case '$or':

                    $var_44 = [];

                    foreach ($var_43 as $var_45) {
                        $var_44[] = self::fn_11($var_45, ' && ');
                    }

                    $var_28[] = '('.\var_46(' || ', $var_44).')';

                    break;

                case '$where':

                    if (\var_27($var_43)) {

                        
                    }

                    break;

                default:

                    $var_47 = '$document';

                    if (\var_48($var_11, '.') !== false) {

                        $var_15 = \var_16('.', $var_11);

                        foreach ($var_15 as $var_49) {
                            $var_47 .= '[\''.$var_49.'\']';
                        }

                    } else {
                        $var_47 .= '[\''.$var_11.'\']';
                    }

                    if (\var_18($var_43)) {
                        $var_28[] = "\\MongoLite\\UtilArrayQuery::check((isset({$var_47}) ? {$var_47} : null), ".\var_50($var_43, true).')';
                    } else {

                        if (is_null($var_43)) {

                            $var_28[] = "(!isset({$var_47}))";

                        } else {

                            $var_51 = \var_50($var_43, true);

                            $var_28[] = "(isset({$var_47}) && (
                                is_array({$var_47}) && is_string({$var_51})
                                    ? in_array({$var_51}, {$var_47})
                                    : {$var_47}=={$var_51}
                                )
                            )";
                        }
                    }
            }
        }

        return \var_17($var_28) ? \var_52(\var_46($var_42, $var_28)) : 'true';
    }


    public static function fn_12($var_43, $var_53) {

        $var_15 = \var_54($var_53);

        foreach ($var_15 as &$var_11) {

            if ($var_11 == '$options') continue;

            if (!self::fn_13($var_11, $var_43, $var_53[$var_11])) {
                return false;
            }
        }

        return true;
    }

    private static function fn_13($var_55, $var_56, $var_57) {

        $var_58 = false;

        if (\var_59($var_56) && $var_55 != '$exists') {
            return false;
        }

        switch ($var_55) {
            case '$eq' :
                $var_58 = $var_56 == $var_57;
                break;

            case '$ne' :
                $var_58 = $var_56 != $var_57;
                break;

            case '$gte' :
                if ( (\var_60($var_56) && \var_60($var_57)) || (\var_61($var_56) && \var_61($var_57)) ) {
                    $var_58 = $var_56 >= $var_57;
                }
                break;

            case '$gt' :
                if ( (\var_60($var_56) && \var_60($var_57)) || (\var_61($var_56) && \var_61($var_57)) ) {
                    $var_58 = $var_56 > $var_57;
                }
                break;

            case '$lte' :
                if ( (\var_60($var_56) && \var_60($var_57)) || (\var_61($var_56) && \var_61($var_57)) ) {
                    $var_58 = $var_56 <= $var_57;
                }
                break;

            case '$lt' :
                if ( (\var_60($var_56) && \var_60($var_57)) || (\var_61($var_56) && \var_61($var_57)) ) {
                    $var_58 = $var_56 < $var_57;
                }
                break;

            case '$in' :
                if (\var_18($var_56)) {
                    $var_58 = \var_18($var_57) ? \var_17(\var_62($var_56, $var_57)) : false;
                } else {
                    $var_58 = \var_18($var_57) ? \var_63($var_56, $var_57) : false;
                }
                break;

            case '$nin' :
                if (\var_18($var_56)) {
                    $var_58 = \var_18($var_57) ? (\var_17(\var_62($var_56, $var_57)) === 0) : false;
                } else {
                    $var_58 = \var_18($var_57) ? (\var_63($var_56, $var_57) === false) : false;
                }
                break;

            case '$has' :
                if (\var_18($var_57))
                    throw new \var_64('Invalid argument for $has array not supported');
                if (!\var_18($var_56)) $var_56 = @\var_13($var_56, true) ?  : [];
                $var_58 = \var_63($var_57, $var_56);
                break;

            case '$all' :
                if (!\var_18($var_56)) $var_56 = @\var_13($var_56, true) ?  : [];
                if (!\var_18($var_57))
                    throw new \var_64('Invalid argument for $all option must be array');
                $var_58 = \var_17(\var_65($var_56, $var_57)) == \var_17($var_57);
                break;

            case '$regex' :
            case '$preg' :
            case '$match' :
            case '$not':
                $var_58 = (boolean) @\var_66(isset($var_57[0]) && $var_57[0]=='/' ? $var_57 : '/'.$var_57.'/iu', $var_56, $var_67);
                if ($var_55 === '$not') {
                    $var_58 = !$var_58;
                }
                break;

            case '$size' :
                if (!\var_18($var_56)) $var_56 = @\var_13($var_56, true) ?  : [];
                $var_58 = (int) $var_57 == \var_17($var_56);
                break;

            case '$mod' :
                if (! \var_18($var_57))
                    throw new \var_64('Invalid argument for $mod option must be array');
                $var_58 = $var_56 % $var_57[0] == $var_57[1] ?? 0;
                break;

            case '$func' :
            case '$fn' :
            case '$f' :
                if (\var_61($var_57) || !\var_27($var_57))
                    throw new \var_64('Function should be callable');
                $var_58 = $var_57($var_56);
                break;

            case '$exists':
                $var_58 = $var_57 ? !\var_59($var_56) : \var_59($var_56);
                break;

            case '$fuzzy':
            case '$text':

                $var_68 = 3;
                $var_69 = 0.7;

                if (\var_18($var_57) && isset($var_57['$search'])) {

                    if (isset($var_57['$minScore']) && \var_60($var_57['$minScore'])) $var_69 = $var_57['$minScore'];
                    if (isset($var_57['$distance']) && \var_60($var_57['$distance'])) $var_68 = $var_57['$distance'];

                    $var_57 = $var_57['search'];
                }

                $var_58 = fn_15($var_57, $var_56, $var_68) >= $var_69;
                break;

            default :
                throw new \var_70("Condition not valid ... Use {$var_55} for custom operations");
                break;
        }

        return $var_58;
    }
}



function fn_14($var_71, $var_72) {

    $var_73 = [];
    $var_74 = function($var_75) use($var_73) {

        
        $var_76 = [];

        if (!\var_77('/[\xC0-\xF7][\x80-\xBF]+/', $var_75, $var_76)) return $var_75; 

        
        foreach ($var_76[0] as $var_78) {
            if (!isset($var_73[$var_78])) $var_73[$var_78] = \var_79(128 + \var_17($var_73));
        }

        
        return \var_80($var_75, $var_73);
    };

    return levenshtein($var_74($var_71), $var_74($var_72));
}

function fn_15($var_81, $var_82, $var_68 = 3){

    $var_83 = \var_16(' ', \var_84($var_81, 'UTF-8'));
    $var_85  = \var_16(' ', \var_84($var_82, 'UTF-8'));
    $var_86   = 0;

    foreach ($var_83 as $var_87){

        foreach ($var_85 as $var_88) {

            if (\var_48($var_88, $var_87) !== false) {
                $var_86 += 1;
            } else {

                $var_47 = fn_14($var_87, $var_88);

                if ($var_47 <= $var_68) {
                    $var_89       = \var_90($var_88, 'UTF-8');
                    $var_76 = $var_89 - $var_47;
                    $var_86  += ($var_76 / $var_89);
                }
            }
        }

    }

    return $var_86 / \var_17($var_83);
}

function fn_16() {

    
    if (class_exists('MongoDB\\BSON\\ObjectId')) {
        $var_91 = new \var_92\var_93\var_94();
        return (string)$var_91;
    }

    

    $var_95 = \var_96(true);
    $var_97 = \var_98(10000, 99999);
    $var_25        = \var_98(10, 1000);
    $var_99    = '';

    
    $var_100 = \var_101(
        '%s%s%s%s',
        \var_102('N', $var_95),
        \var_103(md5(uniqid()), 0, 3),
        \var_102('n', $var_97),
        \var_103(\var_102('N', $var_25), 1, 3)
    );

    
    for ($var_104 = 0; $var_104 < 12; $var_104++) {
        $var_99 .= \var_101('%02x', ord($var_100[$var_104]));
    }

    return $var_99;
}
