<?php

class class_0 extends var_1 {
	
	private $var_2;
	
	
	private $var_3;
	
	
	private $var_4;
	
	private static $var_5 = null;
	
	private $var_6=false;
	
	
	public static function fn_1($var_7 = 'utf8') {
		self::$var_5 = $var_7;
	}
	
	
	public function fn_2($var_8) {
		$var_9->var_2 = mysql_connect($var_8['server'], $var_8['username'], $var_8['password'], true);

		if(self::$var_5) {
			$var_9->fn_3("SET CHARACTER SET '" . self::$var_5 . "'"); 
			$var_9->fn_3("SET NAMES '" . self::$var_5 . "'");
		}

		$var_9->var_3 = mysql_select_db($var_8['database'], $var_9->var_2);
		$var_9->var_4 = $var_8['database'];

		if(!$var_9->var_2) {
			$var_9->fn_4("Couldn't connect to MySQL database");
		}

		if(isset($var_8['timezone'])) $var_9->fn_3(sprintf("SET SESSION time_zone = '%s'", $var_8['timezone']));
		$var_9->fn_3("SET sql_mode = 'ANSI'");
	}
	
	
	public function fn_5($var_8) {
		return null;
	}
	
	
	public function fn_6() {
		return $var_9->fn_7() >= 4.1;
	}
	
	
	public function fn_7() {
		return mysql_get_server_info($var_9->var_2);
	}
	
	
	public function fn_8() {
		return "mysql";
	}
	
	public function fn_3($var_13, $var_14 = var_15) {
		if(isset($_REQUEST['previewwrite']) && in_array(strtolower(substr($var_13,0,strpos($var_13,' '))), array('insert','update','delete','replace'))) {
			Debug::message("Will execute: $var_13");
			return;
		}

		if(isset($_REQUEST['showqueries'])) { 
			$var_16 = microtime(true);
		}
		
		$var_17 = mysql_query($var_13, $var_9->var_2);
		
		if(isset($_REQUEST['showqueries'])) {
			$var_18 = round(microtime(true) - $var_16,4);
			Debug::message("\n$var_13\n{$var_18}ms\n", false);
		}
		
		if(!$var_17 && $var_14) $var_9->fn_4("Couldn't run query: $var_13 | " . mysql_error($var_9->var_2), $var_14);
		return new class_1($var_9, $var_17);
	}
	
	public function fn_9($var_19) {
		return mysql_insert_id($var_9->var_2);
	}
	
	public function fn_10() {
		return $var_9->var_3 ? true : false;
	}
	
	public function fn_11() {
		$var_9->fn_3("CREATE DATABASE `$var_9->var_4`");
		$var_9->fn_3("USE `$var_9->var_4`");

		$var_9->var_20 = $var_9->var_21 = $var_9->var_22 = null;

		if(mysql_select_db($var_9->var_4, $var_9->var_2)) {
			$var_9->var_3 = true;
			return true;
		}
	}

	
	public function fn_15() {
		$var_9->fn_16($var_9->var_4);
	}

	
	public function fn_16($var_24) {
		$var_9->fn_3("DROP DATABASE \"$var_24\"");
	}
	
	
	public function fn_17() {
		return $var_9->var_4;
	}
	
	
	public function fn_18($var_25) {
		$var_9->var_4 = $var_25;
		if($var_9->fn_19($var_9->var_4)) {
			if(mysql_select_db($var_9->var_4, $var_9->var_2)) $var_9->var_3 = true;
		}
		$var_9->var_20 = $var_9->var_21 = $var_9->var_22 = null;
	}

	
	public function fn_19($var_27) {
		$var_28 = Convert::raw2sql($var_27);
		return $var_9->fn_3("SHOW DATABASES LIKE '$var_28'")->value() ? true : false;
	}

	
	public function fn_20() {
		return $var_9->fn_3("SHOW DATABASES")->column();
	}
	
	
	public function fn_21($var_19, $var_31 = null, $var_32 = null, $var_33 = null, $var_34 = null) {
		$var_35 = $var_36 = "";
		
		$var_37 = empty($var_33[get_class($var_9)]) ? "ENGINE=MyISAM" : $var_33[get_class($var_9)];
		
		if(!isset($var_31['ID'])) $var_31['ID'] = "int(11) not null auto_increment";
		if($var_31) foreach($var_31 as $var_38 => $var_39) $var_35 .= "\"$var_38\" $var_39,\n";
		if($var_32) foreach($var_32 as $var_38 => $var_39) $var_36 .= $var_9->fn_22($var_38, $var_39) . ",\n";

		
		$var_41 = empty($var_33['temporary']) ? "" : "TEMPORARY";

		$var_9->fn_3("CREATE $var_41 TABLE \"$var_19\" (
				$var_35
				$var_36
				primary key (ID)
			) {$var_37}");
		
		return $var_19;
	}

	
	public function fn_23($var_42, $var_43 = null, $var_44 = null, $var_45 = null, $var_46 = null, $var_47 = null, $var_34 = null) {
		$var_35 = $var_36 = "";
		$var_48 = array();
		
		if($var_43) foreach($var_43 as $var_38 => $var_39) $var_48[] .= "ADD \"$var_38\" $var_39";
		if($var_44) foreach($var_44 as $var_38 => $var_39) $var_48[] .= "ADD " . $var_9->fn_22($var_38, $var_39);
		if($var_45) foreach($var_45 as $var_38 => $var_39) $var_48[] .= "CHANGE \"$var_38\" \"$var_38\" $var_39";
		if($var_46) foreach($var_46 as $var_38 => $var_39) {
			$var_48[] .= "DROP INDEX \"$var_38\"";
			$var_48[] .= "ADD ". $var_9->fn_22($var_38, $var_39);
 		}
		
 		$var_49 = implode(",\n", $var_48);
		$var_9->fn_3("ALTER TABLE \"$var_42\" $var_49");
		
		if($var_47 && isset($var_47[get_class($var_9)])) {
			$var_9->fn_3(sprintf("ALTER TABLE \"%s\" %s", $var_42, $var_47[get_class($var_9)]));
			DB::alteration_message(
				sprintf("Table %s options changed: %s", $var_42, $var_47[get_class($var_9)]),
				"changed"
			);
		}
	}

	public function fn_24($var_51, $var_52) {
		$var_9->fn_3("ALTER TABLE \"$var_51\" RENAME \"$var_52\"");
	}
	
	
	
	
	public function fn_25($var_42) {
		if(!$var_9->fn_26("CHECK TABLE \"$var_42\"")) {
			if($var_9->fn_26("CHECK TABLE \"".strtolower($var_42)."\"")){
				DB::alteration_message("Table $var_42: renamed from lowercase","repaired");
				return $var_9->fn_24(strtolower($var_42),$var_42);
			}

			DB::alteration_message("Table $var_42: repaired","repaired");
			return $var_9->fn_26("REPAIR TABLE \"$var_42\" USE_FRM");
		} else {
			return true;
		}
	}
	
	
	protected function fn_26($var_13) {
		$var_54 = $var_9->fn_3($var_13);
		foreach($var_54 as $var_55) {
			if(strtolower($var_55['Msg_text']) != 'ok') {
				return false;
			}
		}
		return true;
	}
	
	public function fn_27($var_42, $var_56, $var_57) {
		$var_9->fn_3("ALTER TABLE \"$var_42\" ADD \"$var_56\" $var_57");
	}
	
	
	public function fn_28($var_42, $var_56, $var_57) {
		$var_9->fn_3("ALTER TABLE \"$var_42\" CHANGE \"$var_56\" \"$var_56\" $var_57");
	}
	
	
	public function fn_29($var_42, $var_58, $var_59) {
		$var_21 = $var_9->fn_13($var_42); 
		if(array_key_exists($var_58, $var_21)) { 
			$var_9->fn_3("ALTER TABLE \"$var_42\" CHANGE \"$var_58\" \"$var_59\" " . $var_21[$var_58]); 
		}
	}
	
	private static $var_60 = array();
	
	public function fn_13($var_19) {
		$var_31 = DB::fn_3("SHOW FULL FIELDS IN \"$var_19\"");
		foreach($var_31 as $var_61) {
			$var_57 = $var_61['Type'];
			if(!$var_61['Null'] || $var_61['Null'] == 'NO') {
				$var_57 .= ' not null';
			}
			
			if($var_61['Collation'] && $var_61['Collation'] != 'NULL') {
				
				if(!isset(self::$var_60[$var_61['Collation']])) {
					self::$var_60[$var_61['Collation']] = DB::fn_3("SHOW COLLATION LIKE '$var_61[var_62]'")->record();
				}
				$var_64 = self::$var_60[$var_61['Collation']];
				$var_57 .= " character set $var_64[var_65] collate $var_61[var_62]";
			}
			
			if($var_61['Default'] || $var_61['Default'] === "0") {
				if(is_numeric($var_61['Default']))
					$var_57 .= " default " . fn_55($var_61['Default']);
				else
					$var_57 .= " default '" . fn_55($var_61['Default']) . "'";
			}
			if($var_61['Extra']) $var_57 .= " $var_61[var_66]";
			
			$var_21[$var_61['Field']] = $var_57;
		}
		return $var_21;
	}
	
	
	public function fn_30($var_42, $var_67, $var_68) {
		$var_9->fn_3("ALTER TABLE \"$var_42\" ADD " . $var_9->fn_22($var_67, $var_68));
	}
	
	
	public function fn_31($var_68){
		if(is_array($var_68)){
			
			switch($var_68['type']){
				case 'fulltext':
					$var_68='fulltext (' . str_replace(' ', '', $var_68['value']) . ')';
					break;
				case 'unique':
					$var_68='unique (' . $var_68['value'] . ')';
					break;
				case 'btree':
					$var_68='using btree (' . $var_68['value'] . ')';
					break;
				case 'hash':
					$var_68='using hash (' . $var_68['value'] . ')';
					break;
			}
		}
		
		return $var_68;
	}
	
	
	protected function fn_22($var_67, $var_68=null) {
	
		$var_68=$var_9->fn_31($var_68);
		
		$var_68 = trim($var_68);
		if($var_68[0] != '(') list($var_70, $var_71) = explode(' ',$var_68,2);
	    else $var_71 = $var_68;
	    
	    if(!isset($var_70))
			$var_70 = "index";
		
		if($var_70=='using')
			return "index \"$var_67\" using $var_71";  
		else {
			return "$var_70 \"$var_67\" $var_71";
		}

	}
	
	
	function fn_32($var_42, $var_67, $var_68){
		return $var_67;
	}
	
	
	public function fn_33($var_42, $var_67, $var_68) {
		
		$var_68=$var_9->fn_31($var_68);
		
		$var_68 = trim($var_68);
	    if($var_68[0] != '(') {
	    	list($var_70, $var_71) = explode(' ',$var_68,2);
	    } else {
	    	$var_71 = $var_68;
	    }
	    
	    if(!$var_70) {
	    	$var_70 = "index";
	    }
    
		$var_9->fn_3("ALTER TABLE \"$var_42\" DROP INDEX \"$var_67\"");
		$var_9->fn_3("ALTER TABLE \"$var_42\" ADD $var_70 \"$var_67\" $var_71");
	}
	
	
	public function fn_14($var_19) {
		$var_32 = DB::fn_3("SHOW INDEXES IN \"$var_19\"");
		$var_72 = array();
		$var_22 = array();
		
		foreach($var_32 as $var_73) {
			$var_72[$var_73['Key_name']]['fields'][$var_73['Seq_in_index']] = $var_73['Column_name'];
			
			if($var_73['Index_type'] == 'FULLTEXT') {
				$var_72[$var_73['Key_name']]['type'] = 'fulltext ';
			} else if(!$var_73['Non_unique']) {
				$var_72[$var_73['Key_name']]['type'] = 'unique ';
			} else if($var_73['Index_type'] =='HASH') {
				$var_72[$var_73['Key_name']]['type'] = 'hash ';
			} else if($var_73['Index_type'] =='RTREE') {
				$var_72[$var_73['Key_name']]['type'] = 'rtree ';
			} else {
				$var_72[$var_73['Key_name']]['type'] = '';
			}
		}

		if($var_72) {
			foreach($var_72 as $var_73 => $var_74) {
				ksort($var_74['fields']);
				$var_22[$var_73] = $var_74['type'] . '(' . implode(',',$var_74['fields']) . ')';
			}
		}
		
		return $var_22;
	}

	
	public function fn_12() {
		$var_75 = array();
		foreach($var_9->fn_3("SHOW TABLES") as $var_63) {
			$var_19 = reset($var_63);
			$var_75[strtolower($var_19)] = $var_19;
		}
		return $var_75;
	}
	
	
	public function fn_34() {
		return mysql_affected_rows($var_9->var_2);
	}
	
	function fn_4($var_76, $var_14 = var_15) {
		
		if(preg_match('/Couldn\'t run query: ([^\|]*)\|\s*(.*)/', $var_76, $var_77)) {
			$var_78 = new class_2();
			$var_76 = "Couldn't run query: \n" . $var_78->formatPlain($var_77[1]) . "\n\n" . $var_77[2];
		}
		
		user_error($var_76, $var_14);
	}
	
	
	public function fn_35($var_81){
		
		
		
		
		return 'tinyint(1) unsigned not null default ' . (int)$var_81['default'];
	}
	
	
	public function fn_36($var_81){
		
		
		

		return 'date';
	}
	
	
	public function fn_37($var_81){
		
		
		

		
		if($var_81['precision'] == '') {
			$var_83 = 1;
		} else {
			$var_83 = $var_81['precision'];
		}

		$var_84 = '';
		if(isset($var_81['default']) && is_numeric($var_81['default'])) {
			$var_84 = ' default ' . $var_81['default'];
		}

		return 'decimal(' . $var_83 . ') not null' . $var_84;
	}
	
	
	public function fn_38($var_81){
		
		
		
		
		return 'enum(\'' . implode('\',\'', $var_81['enums']) . '\') character set utf8 collate utf8_general_ci default \'' . $var_81['default'] . '\'';
	}
	
	
	public function fn_39($var_81){
		
		
		
		$var_85 = empty($var_81['default']) ? '' : " default '$var_81[var_85]'";
		return 'set(\'' . implode('\',\'', $var_81['enums']) . '\') character set utf8 collate utf8_general_ci' . $var_85;
	}
	
	
	public function fn_40($var_81){
		
		
		
		
		return 'float not null default ' . $var_81['default'];
	}
	
	
	public function fn_41($var_81){
		
		
		

		return 'int(11) not null default ' . (int)$var_81['default'];
	}
	
	
	public function fn_42($var_81){
		
		
		

		return 'datetime';
	}
	
	
	public function fn_43($var_81){
		
		
		
		
		return 'mediumtext character set utf8 collate utf8_general_ci';
	}
	
	
	public function fn_44($var_81){
		
		
		
		
		return 'time';
	}
	
	
	public function fn_45($var_81){
		
		
		
		
		return 'varchar(' . $var_81['precision'] . ') character set utf8 collate utf8_general_ci';
	}
	
	
	public function fn_46($var_81){
		return 'year(4)';
	}
	
	function fn_47(){
		return 'int(11) not null auto_increment';
	}
	
	
	function fn_48(){
		return "SHOW TABLES;";
	}
	
	
	public function fn_49($var_19) {
		$var_86 = Convert::raw2sql($var_19);
		return (bool)($var_9->fn_3("SHOW TABLES LIKE '$var_86'")->value());
	}

	
	public function fn_50($var_42, $var_56) {
		
		$var_87 = DB::fn_3("DESCRIBE \"$var_42\" \"$var_56\"")->first();
		preg_match_all("/'[^,]+'/", $var_87["Type"], $var_77);
		
		$var_89 = array();
		foreach($var_77[0] as $var_29) {
			$var_89[] = trim($var_29, "'");
		}
		return $var_89;
	}
	
	
	public function fn_51($var_90, $var_91, $var_92, $var_93, $var_94 = "Relevance DESC", $var_95 = "", $var_96 = false, $var_97 = "", $var_98 = false) {
		$var_99 = '';	 	
	 	$var_91 = Convert::raw2sql($var_91);
		$var_100 = htmlentities($var_91,var_101);
		
		$var_102 = array('SiteTree' => '', 'File' => '');
	 	
	 	if($var_96) $var_80 = "IN BOOLEAN MODE";
	
	 	if($var_95) {
	 		$var_102['SiteTree'] = " AND $var_95";
	 		
	 		if($var_97) $var_102['File'] = " AND $var_97";
	 		else $var_102['File'] = $var_102['SiteTree'];
	 	}
	 	
		
		$var_102['SiteTree'] .= " AND ShowInSearch <> 0";

		$var_103 = $var_92 . ", " . (int) $var_93;
		
		$var_104 = $var_98 ? "NOT " : "";
		if($var_91) {
			$var_133['SiteTree'] = "
				MATCH (Title, MenuTitle, Content, MetaTitle, MetaDescription, MetaKeywords) AGAINST ('$var_91' $var_80)
				+ MATCH (Title, MenuTitle, Content, MetaTitle, MetaDescription, MetaKeywords) AGAINST ('$var_100' $var_80)
			";
			$var_133['File'] = "MATCH (Filename, Title, Content) AGAINST ('$var_91' $var_80) AND ClassName = 'File'";
	
			
			$var_105 = str_replace(array('*','+','-'),'',$var_91);
			$var_106 = str_replace(array('*','+','-'),'',$var_100);
			$relevance['SiteTree'] = "MATCH (Title, MenuTitle, Content, MetaTitle, MetaDescription, MetaKeywords) AGAINST ('$var_105') + MATCH (Title, MenuTitle, Content, MetaTitle, MetaDescription, MetaKeywords) AGAINST ('$var_106')";
			$relevance['File'] = "MATCH (Filename, Title, Content) AGAINST ('$var_105')";
		} else {
			$relevance['SiteTree'] = $relevance['File'] = 1;
			$var_133['SiteTree'] = $var_133['File'] = "1 = 1";
		}

		
		$var_107 = array('SiteTree' => '', 'File' => '');
		foreach($var_90 as $var_108) {
			$var_117[$var_108] = singleton($var_108)->extendedSQL($var_104 . $var_133[$var_108] . $var_102[$var_108], "");
			$var_107[$var_108] = reset($var_117[$var_108]->var_110);
		}
		
		
		$var_111 = array(
			'SiteTree' => array("ClassName","$var_107[var_112].ID","ParentID","Title","MenuTitle","URLSegment","Content","LastEdited","Created","_utf8'' AS Filename", "_utf8'' AS Name", "$relevance[var_112] AS Relevance", "CanViewType"),
			'File' => array("ClassName","$var_107[var_113].ID","_utf8'' AS ParentID","Title","_utf8'' AS MenuTitle","_utf8'' AS URLSegment","Content","LastEdited","Created","Filename","Name","$relevance[var_113] AS Relevance","NULL AS CanViewType"),
		);
		
		
		foreach($var_90 as $var_108) {
			
			$var_117[$var_108]->var_110 = array(str_replace('`','',$var_107[$var_108]) => $var_107[$var_108]);
			$var_117[$var_108]->var_111 = $var_111[$var_108];
			$var_117[$var_108]->var_114 = null;
		}

		
		$var_115 = array();
		$var_116 = 0;
		foreach($var_117 as $var_10) {
			$var_115[] = $var_10->sql();
			$var_116 += $var_10->unlimitedRowCount();
		}
		$var_119 = implode(" UNION ", $var_115) . " ORDER BY $var_94 LIMIT $var_103";
		
		
		$var_120 = DB::fn_3($var_119);

		foreach($var_120 as $var_63)
			$var_121[] = new $var_63['ClassName']($var_63);


		if(isset($var_121)) $var_122 = new class_3($var_121);
		else $var_122 = new class_3();
		
		$var_122->setPageLimits($var_92, $var_93, $var_116);
		return $var_122;
	}
	
	
	function fn_52(){
		return 'NOW()';
	}
	
	
	function fn_53(){
		return 'RAND()';
	}
	
	
	function fn_54($var_124){
		$var_81=Array(
			'unsigned integer'=>'UNSIGNED'
		);
		
		if(isset($var_81[$var_124]))
			return $var_81[$var_124];
		else return '';
	}
	
	
	function fn_55($var_29){
		return mysql_real_escape_string($var_29, $var_9->var_2);
	}
	
	
	function fn_56($var_73){
		return $var_73;
	}

	
	function fn_57($var_31, $var_91, $var_96 = false) {
		$var_80 = $var_96 ? "IN BOOLEAN MODE" : "";
		$var_125 = '"' . implode('", "', $var_31) . '"';

	 	$var_126 = Convert::raw2sql($var_91);
		$var_127 = Convert::raw2sql(htmlentities($var_91));

		return "(MATCH ($var_125) AGAINST ('$var_126' $var_80) + MATCH ($var_125) AGAINST ('$var_127' $var_80))";
	}
	
	
	public function fn_0(){
		return $var_9->var_6;
	}
	
	
	public function fn_58($var_128=Array('partitions', 'tablespaces', 'clustering')){
		if(isset($var_128['partitions']))
			return false;
		elseif(isset($var_128['tablespaces']))
			return false;
		elseif(isset($var_128['clustering']))
			return false;
		else
			return false;
	}
	
	
	public function fn_59($var_129=false, $var_130=false){
		
	}
	
	
	public function fn_60($var_131){
		
	}
	
	
	public function fn_61($var_131=false){
		
	}
	
	
	public function fn_62(){
		
	}

	
	function fn_63($var_82, $var_132) {

		preg_match_all('/%(.)/', $var_132, $var_77);
		foreach($var_77[1] as $var_133) if(array_search($var_133, array('Y','m','d','H','i','s','U')) === false) user_error('formattedDatetimeClause(): unsupported format character %' . $var_133, var_134);

		if(preg_match('/^now$/i', $var_82)) {
			$var_82 = "NOW()";
		} else if(preg_match('/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/i', $var_82)) {
			$var_82 = "'$var_82'";
		}

		if($var_132 == '%U') return "UNIX_TIMESTAMP($var_82)";
		
		return "DATE_FORMAT($var_82, '$var_132')";
		
	}
	
	
	function fn_64($var_82, $var_135) {

		$var_135 = preg_replace('/(year|month|day|hour|minute|second)s/i', '$1', $var_135);

		if(preg_match('/^now$/i', $var_82)) {
			$var_82 = "NOW()";
		} else if(preg_match('/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/i', $var_82)) {
			$var_82 = "'$var_82'";
		}

		return "$var_82 + INTERVAL $var_135";
	}

	
	function fn_65($var_136, $var_137) {

		if(preg_match('/^now$/i', $var_136)) {
			$var_136 = "NOW()";
		} else if(preg_match('/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/i', $var_136)) {
			$var_136 = "'$var_136'";
		}

		if(preg_match('/^now$/i', $var_137)) {
			$var_137 = "NOW()";
		} else if(preg_match('/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/i', $var_137)) {
			$var_137 = "'$var_137'";
		}

		return "UNIX_TIMESTAMP($var_136) - UNIX_TIMESTAMP($var_137)";
	}
}


class class_1 extends var_138 {
	
	private $var_4;
	
	
	private $var_17;

	
	public function fn_2(var_0 $var_4, $var_17) {
		$var_9->var_4 = $var_4;
		$var_9->var_17 = $var_17;
	}
	
	public function fn_66() {
		if(is_resource($var_9->var_17)) mysql_free_result($var_9->var_17);
	}
	
	public function fn_67($var_139) {
		return is_resource($var_9->var_17) ? mysql_data_seek($var_9->var_17, $var_139) : false;
	}
	
	public function fn_68() {
		return is_resource($var_9->var_17) ? mysql_num_rows($var_9->var_17) : false;
	}
	
	public function fn_69() {
		
		if(is_resource($var_9->var_17) && $var_140 = mysql_fetch_row($var_9->var_17)) {
			foreach($var_140 as $var_141 => $var_29) {
				$var_142 = mysql_field_name($var_9->var_17, $var_141);
				
				
				if(isset($var_29) || !isset($var_143[$var_142])) {
					$var_143[$var_142] = $var_29;
				}
			}
			return $var_143;
		} else {
			return false;
		}
	}
	
	
}

?>
