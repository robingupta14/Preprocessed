<?php




class class_0 {

    
    public const var_0 = ':memory:';

    
    public $var_1;

    
    protected $var_2 = [];

    
    protected $var_3;

    
    protected $var_4 = [];

    
    public function fn_0($var_3 = self::var_0, $var_5 = []) {

        $var_6 = "sqlite:{$var_3}";

        $var_7->var_3 = $var_3;
        $var_7->var_1 = new \var_8($var_6, null, null, $var_5);

        $var_9 = $var_7;

        $var_7->var_1->sqliteCreateFunction('document_key', function($var_11, $var_12){

            $var_12 = \var_13($var_12, true);
            $var_14      = '';

            if (strpos($var_11, '.') !== false) {

                $var_15 = \var_16('.', $var_11);

                switch (\var_17($var_15)) {
                    case 2:
                        $var_14 = isset($var_12[$var_15[0]][$var_15[1]]) ? $var_12[$var_15[0]][$var_15[1]] : '';
                        break;
                    case 3:
                        $var_14 = isset($var_12[$var_15[0]][$var_15[1]][$var_15[2]]) ? $var_12[$var_15[0]][$var_15[1]][$var_15[2]] : '';
                        break;
                    default:
                        $var_14 = isset($var_12[$var_15[0]]) ? $var_12[$var_15[0]] : '';
                }

            } else {
                $var_14 = isset($var_12[$var_11]) ? $var_12[$var_11] : '';
            }

            return \var_18($var_14) || \var_19($var_14) ? \var_20($var_14) : $var_14;
        }, 2);

        $var_7->var_1->sqliteCreateFunction('document_criteria', function($var_21, $var_12) use($var_9) {

            $var_12 = \var_13($var_12, true);

            return $var_9->fn_1($var_21, $var_12);
        }, 2);

        $var_7->var_1->exec('PRAGMA journal_mode = MEMORY');
        $var_7->var_1->exec('PRAGMA synchronous = OFF');
        $var_7->var_1->exec('PRAGMA PAGE_SIZE = 4096');
    }

    
    public function fn_2($var_24) {

        $var_25 = \var_26('criteria');

        if (\var_27($var_24)) {
           $var_7->var_4[$var_25] = $var_24;
           return $var_25;
        }

        if (is_array($var_24)) {

            $var_28 = null;

            eval('$fn = function($document) { return '.class_2::fn_12($var_24).'; };');

            $var_7->var_4[$var_25] = $var_28;

            return $var_25;
        }

        return null;
    }

    
    public function fn_1($var_25, $var_12) {

        return isset($var_7->var_4[$var_25]) ? $var_7->var_4[$var_25]($var_12):false;
    }

    
    public function fn_3() {
        $var_7->var_1->query('VACUUM');
    }

    
    public function fn_4() {
        if ($var_7->var_3 != static::var_0) {
            \var_30($var_7->var_3);
        }
    }

    
    public function fn_5($var_32) {
        $var_7->var_1->exec("CREATE TABLE `{$var_32}` ( id INTEGER PRIMARY KEY AUTOINCREMENT, document TEXT )");
    }

    
    public function fn_6($var_32) {
        $var_7->var_1->exec("DROP TABLE `{$var_32}`");

        
        unset($var_7->var_2[$var_32]);
    }

    
    public function fn_7() {

        $var_34   = $var_7->var_1->query("SELECT name FROM sqlite_master WHERE type='table' AND name!='sqlite_sequence';");
        $var_35 = $var_34->fetchAll( \var_8::var_37);
        $var_38  = [];

        foreach ($var_35 as $var_39) {
            $var_38[] = $var_39['name'];
        }

        return $var_38;
    }

    
    public function fn_8() {

        foreach ($var_7->fn_7() as $var_32) {
            if(!isset($var_7->var_2[$var_32])) {
                $var_7->var_2[$var_32] = new class_1($var_32, $var_7);
            }
        }

        return $var_7->var_2;
    }

    
    public function fn_9($var_32) {

        if (!isset($var_7->var_2[$var_32])) {

            if (!in_array($var_32, $var_7->fn_7())) {
                $var_7->fn_5($var_32);
            }

            $var_7->var_2[$var_32] = new class_1($var_32, $var_7);
        }

        return $var_7->var_2[$var_32];
    }

    public function fn_10($var_41) {

        return $var_7->fn_9($var_41);
    }
}


class class_2 {

    protected static $var_42 = [];

    public static function fn_11($var_43, $var_44) {
        return call_user_func_array(self::$var_42[$var_43], [$var_44]);
    }

    public static function fn_12($var_24, $var_45 = ' && ') {

        $var_28 = [];

        foreach ($var_24 as $var_11 => $var_46) {

            switch($var_11) {

                case '$and':

                    $var_47 = [];

                    foreach ($var_46 as $var_48) {
                        $var_47[] = self::fn_12($var_48, ' && ');
                    }

                    $var_28[] = '('.\var_49(' && ', $var_47).')';

                    break;
                case '$or':

                    $var_47 = [];

                    foreach ($var_46 as $var_48) {
                        $var_47[] = self::fn_12($var_48, ' && ');
                    }

                    $var_28[] = '('.\var_49(' || ', $var_47).')';

                    break;

                case '$where':

                    if (\var_50($var_46) || !\var_27($var_46)) {
                        throw new \var_51($var_11.' Function should be callable');
                    }

                    $var_43 = \var_26('mongoliteCallable').bin2hex(random_bytes(5));

                    self::$var_42[$var_43] = $var_46;

                    $var_28[] = '\\MongoLite\\UtilArrayQuery::closureCall("'.$var_43.'", $document)';

                    break;

                default:

                    $var_52 = '$document';

                    if (\var_53($var_11, '.') !== false) {

                        $var_15 = \var_16('.', $var_11);

                        foreach ($var_15 as $var_54) {
                            $var_52 .= '[\''.$var_54.'\']';
                        }

                    } else {
                        $var_52 .= '[\''.$var_11.'\']';
                    }

                    if (\var_18($var_46)) {
                        $var_28[] = "\\MongoLite\\UtilArrayQuery::check((isset({$var_52}) ? {$var_52} : null), ".\var_55($var_46, true).')';
                    } else {

                        if (is_null($var_46)) {

                            $var_28[] = "(!isset({$var_52}))";

                        } else {

                            $var_56 = \var_55($var_46, true);

                            $var_28[] = "(isset({$var_52}) && (
                                is_array({$var_52}) && is_string({$var_56})
                                    ? in_array({$var_56}, {$var_52})
                                    : {$var_52}=={$var_56}
                                )
                            )";
                        }
                    }
            }
        }

        return \var_17($var_28) ? \var_57(\var_49($var_45, $var_28)) : 'true';
    }


    public static function fn_13($var_46, $var_58) {

        $var_15 = \var_59($var_58);

        foreach ($var_15 as &$var_11) {

            if ($var_11 == '$options') continue;

            if (!self::fn_14($var_11, $var_46, $var_58[$var_11])) {
                return false;
            }
        }

        return true;
    }

    private static function fn_14($var_60, $var_61, $var_62) {

        $var_63 = false;

        if (\var_64($var_61) && $var_60 != '$exists') {
            return false;
        }

        switch ($var_60) {
            case '$eq' :
                $var_63 = $var_61 == $var_62;
                break;

            case '$ne' :
                $var_63 = $var_61 != $var_62;
                break;

            case '$gte' :
                if ( (\var_65($var_61) && \var_65($var_62)) || (\var_50($var_61) && \var_50($var_62)) ) {
                    $var_63 = $var_61 >= $var_62;
                }
                break;

            case '$gt' :
                if ( (\var_65($var_61) && \var_65($var_62)) || (\var_50($var_61) && \var_50($var_62)) ) {
                    $var_63 = $var_61 > $var_62;
                }
                break;

            case '$lte' :
                if ( (\var_65($var_61) && \var_65($var_62)) || (\var_50($var_61) && \var_50($var_62)) ) {
                    $var_63 = $var_61 <= $var_62;
                }
                break;

            case '$lt' :
                if ( (\var_65($var_61) && \var_65($var_62)) || (\var_50($var_61) && \var_50($var_62)) ) {
                    $var_63 = $var_61 < $var_62;
                }
                break;

            case '$in' :
                if (\var_18($var_61)) {
                    $var_63 = \var_18($var_62) ? \var_17(\var_66($var_61, $var_62)) : false;
                } else {
                    $var_63 = \var_18($var_62) ? \var_67($var_61, $var_62) : false;
                }
                break;

            case '$nin' :
                if (\var_18($var_61)) {
                    $var_63 = \var_18($var_62) ? (\var_17(\var_66($var_61, $var_62)) === 0) : false;
                } else {
                    $var_63 = \var_18($var_62) ? (\var_67($var_61, $var_62) === false) : false;
                }
                break;

            case '$has' :
                if (\var_18($var_62))
                    throw new \var_51('Invalid argument for $has array not supported');
                if (!\var_18($var_61)) $var_61 = @\var_13($var_61, true) ?  : [];
                $var_63 = \var_67($var_62, $var_61);
                break;

            case '$all' :
                if (!\var_18($var_61)) $var_61 = @\var_13($var_61, true) ?  : [];
                if (!\var_18($var_62))
                    throw new \var_51('Invalid argument for $all option must be array');
                $var_63 = \var_17(\var_68($var_61, $var_62)) == \var_17($var_62);
                break;

            case '$regex' :
            case '$preg' :
            case '$match' :
            case '$not':
                $var_63 = (boolean) @\var_69(isset($var_62[0]) && $var_62[0]=='/' ? $var_62 : '/'.$var_62.'/iu', $var_61, $var_70);
                if ($var_60 === '$not') {
                    $var_63 = !$var_63;
                }
                break;

            case '$size' :
                if (!\var_18($var_61)) $var_61 = @\var_13($var_61, true) ?  : [];
                $var_63 = (int) $var_62 == \var_17($var_61);
                break;

            case '$mod' :
                if (! \var_18($var_62))
                    throw new \var_51('Invalid argument for $mod option must be array');
                $var_63 = $var_61 % $var_62[0] == $var_62[1] ?? 0;
                break;

            case '$exists':
                $var_63 = $var_62 ? !\var_64($var_61) : \var_64($var_61);
                break;

            case '$fuzzy':
            case '$text':

                $var_71 = 3;
                $var_72 = 0.7;

                if (\var_18($var_62) && isset($var_62['$search'])) {

                    if (isset($var_62['$minScore']) && \var_65($var_62['$minScore'])) $var_72 = $var_62['$minScore'];
                    if (isset($var_62['$distance']) && \var_65($var_62['$distance'])) $var_71 = $var_62['$distance'];

                    $var_62 = $var_62['search'];
                }

                $var_63 = fn_16($var_62, $var_61, $var_71) >= $var_72;
                break;

            default :
                throw new \var_73("Condition not valid ... Use {$var_60} for custom operations");
                break;
        }

        return $var_63;
    }
}



function fn_15($var_74, $var_75) {

    $var_76 = [];
    $var_77 = function($var_78) use($var_76) {

        
        $var_79 = [];

        if (!\var_80('/[\xC0-\xF7][\x80-\xBF]+/', $var_78, $var_79)) return $var_78; 

        
        foreach ($var_79[0] as $var_81) {
            if (!isset($var_76[$var_81])) $var_76[$var_81] = \var_82(128 + \var_17($var_76));
        }

        
        return \var_83($var_78, $var_76);
    };

    return levenshtein($var_77($var_74), $var_77($var_75));
}

function fn_16($var_84, $var_85, $var_71 = 3){

    $var_86 = \var_16(' ', \var_87($var_84, 'UTF-8'));
    $var_88  = \var_16(' ', \var_87($var_85, 'UTF-8'));
    $var_89   = 0;

    foreach ($var_86 as $var_90){

        foreach ($var_88 as $var_91) {

            if (\var_53($var_91, $var_90) !== false) {
                $var_89 += 1;
            } else {

                $var_52 = fn_15($var_90, $var_91);

                if ($var_52 <= $var_71) {
                    $var_92       = \var_93($var_91, 'UTF-8');
                    $var_79 = $var_92 - $var_52;
                    $var_89  += ($var_79 / $var_92);
                }
            }
        }

    }

    return $var_89 / \var_17($var_86);
}

function fn_17() {

    
    if (class_exists('MongoDB\\BSON\\ObjectId')) {
        $var_94 = new \var_95\var_96\var_97();
        return (string)$var_94;
    }

    

    $var_98 = \var_99(true);
    $var_100 = \var_101(10000, 99999);
    $var_25        = \var_101(10, 1000);
    $var_102    = '';

    
    $var_103 = \var_104(
        '%s%s%s%s',
        \var_105('N', $var_98),
        \var_106(md5(uniqid()), 0, 3),
        \var_105('n', $var_100),
        \var_106(\var_105('N', $var_25), 1, 3)
    );

    
    for ($var_107 = 0; $var_107 < 12; $var_107++) {
        $var_102 .= \var_104('%02x', ord($var_103[$var_107]));
    }

    return $var_102;
}
