<?php

class var_0 extends var_1 {
	
	static function fn_0($var_2) {
		if(is_array($var_2)) {
			foreach($var_2 as $var_3 => $var_4) $var_2[$var_3] = self::fn_0($var_4);
			return $var_2;
			
		} else {
			return str_replace(array('&','"',"'",'<','>'),array('&amp;','&quot;','&
		}
	}
	
	
	static function raw2htmlatt($val) {
		if(is_array($val)) {
			foreach($val as $k => $v) $val[$k] = self::raw2att($v);
			return $val;
			
		} else {
			$val = str_replace(array('&','"',"'",'<','>'),array('&amp;','&quot;','&
			$val = preg_replace('/[^var_5-var_6-var_7-9\-var_8]*var_9/','', $var_2);
			return $var_2;
		}
	}
	
	
	static function fn_1($var_2) {
		if(is_array($var_2)) {
			foreach($var_2 as $var_3 => $var_4) $var_2[$var_3] = self::fn_1($var_4);
			return $var_2;
		} else {
			return str_replace(array('&', '<', '>', "\n"), array('&amp;', '&lt;', '&gt;', '<br />'), $var_2);
		}
	}
	
	
	static function fn_2($var_2) {
		if(is_array($var_2)) {
			foreach($var_2 as $var_3 => $var_4) $var_2[$var_3] = self::fn_2($var_4);
			return $var_2;
		} else {
			return str_replace(array("\\", '"', "\n", "\r", "'"), array("\\\\", '\"', '\n', '\r', "\\'"), $var_2);
		}
	}
	
	
	static function fn_3($var_2) {
		if(function_exists('json_encode')) {
			return json_encode($var_2);	
		} else {
			$var_10 = new class_0();
			return $var_10->encode($var_2);
		}
	}
	
	
	static function fn_4($var_2) {
		if(is_array($var_2)) {
			foreach($var_2 as $var_3 => $var_4) $var_2[$var_3] = self::fn_4($var_4);
			return $var_2;
			
		} else {
			return addslashes($var_2);
		}
	}

	
	static function var_12($var_2) {
		if(is_array($var_2)) {
			foreach($var_2 as $var_3 => $var_4) $var_2[$var_3] = self::xml2raw($var_4);
			return $var_2;
			
		} else {

			
			if(strpos($var_2,'<') !== false) return self::html2raw($var_2);
			
			
			else {
				$var_13 = str_replace(array('&amp;', '&lt;', '&gt;'), array('&', '<', '>'), $var_2);
				$var_13 = ereg_replace('&
				return $converted;
			}
		}
	}
	
	
	static function xml2js($val) {		
		return self::raw2js(self::html2raw($val));
	}
	
	
	static function xml2att($val) {		
		return self::raw2att(self::xml2raw($val));
	}
	
	
	static function xml2sql($val) {		
		return self::raw2sql(self::xml2raw($val));
	}
	
	
	static function js2raw($val) {
		if(is_array($val)) {
			foreach($val as $k => $v) $val[$k] = self::js2raw($v);
			return $val;
			
		} else {
			return str_replace(array('\"','\n','\r'), array('"',"\n","\r"), $var_2);
		}
	}
	
	
	static function var_14($var_2) {		
		return self::fn_1(self::js2raw($var_2));
	}
	
	
	var_15 function fn_5($var_2) {		
		return self::fn_0(self::js2raw($var_2));
	}
	
	
	static function var_16($var_2) {		
		return self::fn_4(self::js2raw($var_2));
	}
	
	
	var_15 function fn_6($var_2) {
		
		
		
			$var_10 = new class_0();
			return $var_10->decode($var_2);
		
	}

	
	static function var_18($var_2) {
		$var_10 = self::fn_6($var_2);
		$var_19 = array();
		foreach($var_10 as $var_3 => $var_4) {
			$var_19[$var_3] = $var_4;
		}
		return $var_19;
	}
	
	
	var_15 function fn_7($var_2) {
		$var_20 = new class_1($var_2);
		return self::fn_8($var_20);
	}
	
	protected static function fn_8($var_20) {
		if(is_object($var_20) && get_class($var_20) == 'SimpleXMLElement') {
	       $var_21 = $var_20->attributes();
	       foreach($var_21 as $var_3=>$var_4) {
	           if ($var_4) $var_5[$var_3] = (string) $var_4;
	       }
	       $var_22 = $var_20;
	       $var_20 = get_object_vars($var_20);
	   }
	   if (is_array($var_20)) {
	       if (count($var_20) == 0) return (string) $var_22; 
	       foreach($var_20 as $var_23=>$var_24) {
	           $var_25[$var_23] = self::fn_8($var_24);
	       }
	       if (isset($var_5)) $var_25['@'] = $var_5;    
	       return $var_25;
	   }
	   return (string) $var_20;
	}

	static function var_26( $var_27 ) {
		if(function_exists("json_encode")) {
			return json_encode($var_27);
		}
		$var_28 = array();
		
		foreach( $var_27 as $var_23 => $var_24 )
			if( is_array( $var_24 ) )
				$var_28[] = "'$var_23':" . Convert::array2json( $var_24 );
			else
				$var_28[] = "'$var_23':'$var_24'";
			
		return '{' . implode( ', ', $var_28 ) . '}';
	}
	

	
	
	static function var_29($var_30) {
		if( preg_match( '/^[a-z+]+\:\/\/[a-zA-Z0-9$-_.+?&=!*\'()%]+$/', $var_30 ) )
			return "<a style=\"white-space: nowrap\" href=\"$var_30\">$var_30</a>";
		else
			return $var_30;
	}
	
	
	
	
	
	static function var_31($var_32, $var_33 = false, $var_34 = 60, $var_35 = null) {
		$var_36 = array(
			'PreserveLinks' => false,
			'ReplaceBoldAsterisk' => true,
			'CompressWhitespace' => true,
			'ReplaceImagesWithAlt' => true,
		);
		if(isset($var_35)) {
			$var_35 = array_merge($var_36,$var_35);
		} else {
			$var_35 = $var_36;
		}

		
		
		
		
		$var_32 = preg_replace("/<style(^A-Za-z0-9>][^>]*)?>.*?<\/style[^>]*>/i","", $var_32);
		$var_32 = preg_replace("/<script(^A-Za-z0-9>][^>]*)?>.*?<\/script[^>]*>/i","", $var_32);
		
		if($var_35['ReplaceBoldAsterisk']) {
			$var_32 = str_ireplace(
				array('<strong>','</strong>','<b>','</b>'),
				'*',
				$var_32
			);
		}
		
		if( !$var_33 && !isset($var_35['PreserveLink'])) {
			$var_32 = preg_replace('/<a[^>]*href\s*=\s*"([^"]*)">(.*?)<\/a>/ie', "Convert::html2raw('\\2').'[\\1]'", $var_32);
			$var_32 = preg_replace('/<a[^>]*href\s*=\s*([^ ]*)>(.*?)<\/a>/ie', "Convert::html2raw('\\2').'[\\1]'", $var_32);
			
			
			
		}
	
		
		if($var_35['ReplaceImagesWithAlt']) {
			$var_32 = eregi_replace('<img[^>]*alt *= *"([^"]*)"[^>]*>', ' \\1 ', $var_32);
			$var_32 = eregi_replace('<img[^>]*alt *= *([^ ]*)[^>]*>', ' \\1 ', $var_32);
		}
	
		
		if($var_35['CompressWhitespace']) {
			$var_32 = ereg_replace("[\n\r\t ]+", " ", $var_32);
		}
		
		
		$var_32 = ereg_replace("[ \n\r\t]*<[Hh][1-6]([^A-Za-z0-9>][^>]*)?> *", "\n\n", $var_32);
		$var_32 = ereg_replace("[ \n\r\t]*<[Pp]([^A-Za-z0-9>][^>]*)?> *", "\n\n", $var_32);
		$var_32 = ereg_replace("[ \n\r\t]*<[Dd][Ii][Vv]([^A-Za-z0-9>][^>]*)?> *", "\n\n", $var_32);
		$var_32 = ereg_replace("\n\n\n+","\n\n", $var_32);
		
		$var_32 = ereg_replace("<[Bb][Rr]([^A-Za-z0-9>][^>]*)?> *", "\n", $var_32);
		$var_32 = ereg_replace("<[Tt][Rr]([^A-Za-z0-9>][^>]*)?> *", "\n", $var_32);
		$var_32 = ereg_replace("</[Tt][Dd]([^A-Za-z0-9>][^>]*)?> *", "    ", $var_32);
		$var_32 = preg_replace('/<\/p>/i', "\n\n", $var_32 );
		
	
		
		
		
		$var_32 = html_entity_decode($var_32, var_37 , 'UTF-8');
		
		
		
		
		if( !$var_33 ) {
			$var_32 = preg_replace('/<\/?[^>]*>/','', $var_32);
		} else {
			$var_32 = strip_tags($var_32, '<a>');
		}
		return trim(wordwrap(trim($var_32), $var_34));
	}
	
	
	var_15 function fn_9($var_32) {
		return str_ireplace(
			array("\n",'?','=',' ','(',')','&','@','"','\'',';'),
			array('%0A','%3F','%3D','%20','%28','%29','%26','%40','%22','%27','%3B'),
			$var_32
		);
	}

}

?>