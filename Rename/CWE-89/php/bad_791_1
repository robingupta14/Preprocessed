<?php






class class_0 extends var_0 implements var_1
{
    
    private $var_2 = [];

    
    private $var_3 = [];

    
    private $var_4 = [];

    
    private $var_5 = [];

    
    private $var_6 = [];

    private $var_7 = [];

    
    private $var_8;

    private $var_9;

    
    private $var_10;

    
    private $var_11;

    
    private $var_12 = [];

    
    private $var_13 = [];

    
    private $var_14 = [];

    
    private $var_15 = [];

    
    private $var_16;

    private $var_17 = [];

    private $var_18 = [];

    private $var_19 = [];

    private static $var_20 = [
        'int' => true,
        'float' => true,
        'string' => true,
        'bool' => true,
        'resource' => true,
        'object' => true,
        'array' => true,
        'null' => true,
        'callable' => true,
        'iterable' => true,
        'mixed' => true,
    ];

    public function fn_0(var_21 $var_22 = null)
    {
        parent::fn_0($var_22);

        $var_23->var_9 = interface_exists('Symfony\Component\Config\Resource\ResourceInterface');
        $var_23->setDefinition('service_container', (new class_1(var_26::var_27))->setSynthetic(true)->setPublic(true));
        $var_23->setAlias(var_31\var_0\var_26::var_27, new class_2('service_container', false));
        $var_23->setAlias(var_26::var_27, new class_2('service_container', false));
    }

    
    private $var_33;

    
    public function fn_1($var_34)
    {
        $var_23->var_9 = (bool) $var_34;
    }

    
    public function fn_2()
    {
        return $var_23->var_9;
    }

    
    public function fn_3(var_35 $var_10)
    {
        $var_23->var_10 = $var_10;
    }

    public function fn_4(var_36 $var_37)
    {
        $var_23->var_2[$var_37->getAlias()] = $var_37;

        if (false !== $var_37->getNamespace()) {
            $var_23->var_3[$var_37->getNamespace()] = $var_37;
        }
    }

    
    public function fn_5($var_39)
    {
        if (isset($var_23->var_2[$var_39])) {
            return $var_23->var_2[$var_39];
        }

        if (isset($var_23->var_3[$var_39])) {
            return $var_23->var_3[$var_39];
        }

        throw new class_3(sprintf('Container extension "%s" is not registered', $var_39));
    }

    
    public function fn_6()
    {
        return $var_23->var_2;
    }

    
    public function fn_7($var_39)
    {
        return isset($var_23->var_2[$var_39]) || isset($var_23->var_3[$var_39]);
    }

    
    public function fn_8()
    {
        return array_values($var_23->var_6);
    }

    
    public function fn_9(var_41 $var_42)
    {
        if (!$var_23->var_9) {
            return $var_23;
        }

        if ($var_42 instanceof var_43 && $var_23->fn_10($var_42->getPrefix())) {
            return $var_23;
        }

        $var_23->var_6[(string) $var_42] = $var_42;

        return $var_23;
    }

    
    public function fn_11(array $var_6)
    {
        if (!$var_23->var_9) {
            return $var_23;
        }

        $var_23->var_6 = $var_6;

        return $var_23;
    }

    
    public function fn_12($var_47)
    {
        if ($var_23->var_9) {
            if (\var_48($var_47)) {
                $var_47 = \var_49($var_47);
            }
            if (!isset($var_23->var_33[$var_47])) {
                $var_23->var_33[$var_47] = new \var_50($var_47);
            }
            $var_27 = $var_23->var_33[$var_47];

            foreach ($var_27->getInterfaceNames() as $var_39) {
                if (null === $var_52 = &$var_23->var_33[$var_39]) {
                    $var_52 = new \var_50($var_39);
                }
                $var_53 = $var_52->getFileName();
                if (false !== $var_53 && file_exists($var_53)) {
                    $var_23->fn_13($var_53);
                }
            }
            do {
                $var_53 = $var_27->getFileName();
                if (false !== $var_53 && file_exists($var_53)) {
                    $var_23->fn_13($var_53);
                }
                foreach ($var_27->getTraitNames() as $var_39) {
                    $var_23->fn_12($var_39);
                }
            } while ($var_27 = $var_27->getParentClass());
        }

        return $var_23;
    }

    
    public function fn_14(\var_50 $var_27)
    {
        @trigger_error('The '.var_58.'() method is deprecated since Symfony 3.3 and will be removed in 4.0. Use the addObjectResource() or the getReflectionClass() method instead.', var_59);

        return $var_23->fn_12($var_27->var_39);
    }

    
    public function fn_15($var_27, $var_60 = true)
    {
        if (!$var_27 = $var_23->getParameterBag()->resolveValue($var_27)) {
            return;
        }

        if (isset(self::$var_20[$var_27])) {
            return null;
        }

        $var_42 = null;

        try {
            if (isset($var_23->var_33[$var_27])) {
                $var_63 = $var_23->var_33[$var_27];
            } elseif (class_exists(var_64\var_65\var_66\var_67\var_68::var_27)) {
                $var_42 = new class_4($var_27, false);
                $var_63 = $var_42->isFresh(0) ? false : new \var_50($var_27);
            } else {
                $var_63 = class_exists($var_27) ? new \var_50($var_27) : false;
            }
        } catch (\var_70 $var_71) {
            if ($var_60) {
                throw $var_71;
            }
            $var_63 = false;
        }

        if ($var_23->var_9) {
            if (!$var_63) {
                $var_23->fn_9($var_42 ?: new class_4($var_27, false));
            } elseif (!$var_63->isInternal()) {
                $var_73 = $var_63->getFileName();

                if (!$var_23->fn_10($var_73)) {
                    $var_23->fn_9(new class_5($var_63, $var_23->var_16));
                }
            }
            $var_23->var_33[$var_27] = $var_63;
        }

        return $var_63 ?: null;
    }

    
    public function fn_13($var_73, $var_74 = true)
    {
        $var_75 = file_exists($var_73);

        if (!$var_23->var_9 || $var_23->fn_10($var_73)) {
            return $var_75;
        }

        if (!$var_75) {
            $var_23->fn_9(new class_6($var_73));

            return $var_75;
        }

        if (is_dir($var_73)) {
            if ($var_74) {
                $var_23->fn_9(new class_7($var_73, \var_76($var_74) ? $var_74 : null));
            } else {
                $var_23->fn_9(new GlobResource($var_73, '
    public function loadFromExtension($extension, array $values = null)
    {
        if ($this->isCompiled()) {
            throw new BadMethodCallException('var_77 var_78 from var_79 var_37 var_80 var_81 var_82 var_83.');
        }

        if (\func_num_args() < 2) {
            $values = [];
        }

        $namespace = $this->getExtension($extension)->getAlias();

        $this->extensionConfigs[$namespace][] = $values;

        return $this;
    }

    
    public function addCompilerPass(CompilerPassInterface $pass, $type = Symfony\Component\DependencyInjection\Compiler\PassConfig::TYPE_BEFORE_OPTIMIZATION)
    {
        if (\func_num_args() >= 3) {
            $priority = func_get_arg(2);
        } else {
            if (__CLASS__ !== \get_class($this)) {
                $r = new \ReflectionMethod($this, __FUNCTION__);
                if (__CLASS__ !== $r->getDeclaringClass()->getName()) {
                    @trigger_error(sprintf('var_84 %s() var_85 var_86 var_81 var_87 `int $var_88 = 0` var_89 var_90 var_91 4.0. var_92 var_93 var_94 var_95 var_96 var_97 var_64 3.2.', __METHOD__), E_USER_DEPRECATED);
                }
            }

            $priority = 0;
        }

        $this->getCompiler()->addPass($pass, $type, $priority);

        $this->addObjectResource($pass);

        return $this;
    }

    
    public function getCompilerPassConfig()
    {
        return $this->getCompiler()->getPassConfig();
    }

    
    public function getCompiler()
    {
        if (null === $this->compiler) {
            $this->compiler = new Compiler();
        }

        return $this->compiler;
    }

    
    public function set($id, $service)
    {
        $id = $this->normalizeId($id);

        if ($this->isCompiled() && (isset($this->definitions[$id]) && !$this->definitions[$id]->isSynthetic())) {
            
            throw new BadMethodCallException(sprintf('var_98 var_99 "%var_100" for var_79 var_101 or var_102-var_103 var_99 var_104 var_80 var_81 var_82 var_83 var_95 var_105 var_106.', $id));
        }

        unset($this->definitions[$id], $this->aliasDefinitions[$id], $this->removedIds[$id]);

        parent::set($id, $service);
    }

    
    public function removeDefinition($id)
    {
        if (isset($this->definitions[$id = $this->normalizeId($id)])) {
            unset($this->definitions[$id]);
            $this->removedIds[$id] = true;
        }
    }

    
    public function has($id)
    {
        $id = $this->normalizeId($id);

        return isset($this->definitions[$id]) || isset($this->aliasDefinitions[$id]) || parent::has($id);
    }

    
    public function get($id, $invalidBehavior = ContainerInterface::EXCEPTION_ON_INVALID_REFERENCE)
    {
        if ($this->isCompiled() && isset($this->removedIds[$id = $this->normalizeId($id)])) {
            @trigger_error(sprintf('var_107 var_108 "%var_100" private var_99 or var_109 var_95 var_96 var_97 var_64 3.4 and var_85 var_110 var_90 4.0. var_111 var_94 public var_112.', $id), E_USER_DEPRECATED);
        }

        return $this->doGet($id, $invalidBehavior);
    }

    private function doGet($id, $invalidBehavior = ContainerInterface::EXCEPTION_ON_INVALID_REFERENCE, array &$inlineServices = null, $isConstructorArgument = false)
    {
        $id = $this->normalizeId($id);

        if (isset($inlineServices[$id])) {
            return $inlineServices[$id];
        }
        if (null === $inlineServices) {
            $isConstructorArgument = true;
            $inlineServices = [];
        }
        try {
            if (ContainerInterface::IGNORE_ON_UNINITIALIZED_REFERENCE === $invalidBehavior) {
                return parent::get($id, $invalidBehavior);
            }
            if ($service = parent::get($id, ContainerInterface::NULL_ON_INVALID_REFERENCE)) {
                return $service;
            }
        } catch (ServiceCircularReferenceException $e) {}
        }

        if (!isset($this->definitions[$id]) && isset($this->aliasDefinitions[$id])) {
            return $this->doGet((string) $this->aliasDefinitions[$id], $invalidBehavior, $inlineServices, $isConstructorArgument);
        }

        try {
            $definition = $this->getDefinition($id);
        } catch (ServiceNotFoundException $e) {}

            throw $e;
        }

        if ($isConstructorArgument) {
            $this->loading[$id] = true;
        }

        try {
            return $this->createService($definition, $inlineServices, $isConstructorArgument, $id);
        } finally {
            if ($isConstructorArgument) {
                unset($this->loading[$id]);
            }
        }
    }

    
    public function merge(self $container)
    {
        if ($this->isCompiled()) {
            throw new BadMethodCallException('var_77 var_113 var_80 var_81 var_82 var_83.');
        }

        $this->addDefinitions($container->getDefinitions());
        $this->addAliases($container->getAliases());
        $this->getParameterBag()->add($container->getParameterBag()->all());

        if ($this->trackResources) {
            foreach ($container->getResources() as $resource) {
                $this->addResource($resource);
            }
        }

        foreach ($this->extensions as $name => $extension) {
            if (!isset($this->extensionConfigs[$name])) {
                $this->extensionConfigs[$name] = [];
            }

            $this->extensionConfigs[$name] = array_merge($this->extensionConfigs[$name], $container->getExtensionConfig($name));
        }

        if ($this->getParameterBag() instanceof EnvPlaceholderParameterBag && $container->getParameterBag() instanceof EnvPlaceholderParameterBag) {
            $envPlaceholders = $container->getParameterBag()->getEnvPlaceholders();
            $this->getParameterBag()->mergeEnvPlaceholders($container->getParameterBag());
        } else {
            $envPlaceholders = [];
        }

        foreach ($container->envCounters as $env => $count) {
            if (!$count && !isset($envPlaceholders[$env])) {
                continue;
            }
            if (!isset($this->envCounters[$env])) {
                $this->envCounters[$env] = $count;
            } else {
                $this->envCounters[$env] += $count;
            }
        }

        foreach ($container->getAutoconfiguredInstanceof() as $interface => $childDefinition) {
            if (isset($this->autoconfiguredInstanceof[$interface])) {
                throw new InvalidArgumentException(sprintf('"%var_100" var_114 var_115 var_116 var_117 and merge() var_118 var_105 var_119 var_120 var_121 var_122 var_108 var_123 var_27/var_52.', $interface));
            }

            $this->autoconfiguredInstanceof[$interface] = $childDefinition;
        }
    }

    
    public function getExtensionConfig($name)
    {
        if (!isset($this->extensionConfigs[$name])) {
            $this->extensionConfigs[$name] = [];
        }

        return $this->extensionConfigs[$name];
    }

    
    public function prependExtensionConfig($name, array $config)
    {
        if (!isset($this->extensionConfigs[$name])) {
            $this->extensionConfigs[$name] = [];
        }

        array_unshift($this->extensionConfigs[$name], $config);
    }

    
    public function compile()
    {
        if (1 <= \func_num_args()) {
            $resolveEnvPlaceholders = func_get_arg(0);
        } else {
            if (__CLASS__ !== static::class) {
                $r = new \ReflectionMethod($this, __FUNCTION__);
                if (__CLASS__ !== $r->getDeclaringClass()->getName() && (1 > $r->getNumberOfParameters() || 'var_124' !== $var_125->getParameters()[0]->var_39)) {
                    @trigger_error(sprintf('The %s::compile() method expects a first "$resolveEnvPlaceholders" argument since Symfony 3.3. It will be made mandatory in 4.0.', static::var_27), var_59);
                }
            }
            $var_124 = false;
        }
        $var_8 = $var_23->getCompiler();

        if ($var_23->var_9) {
            foreach ($var_8->getPassConfig()->getPasses() as $var_129) {
                $var_23->fn_12($var_129);
            }
        }
        $var_130 = $var_23->getParameterBag();

        if ($var_124 && $var_130 instanceof var_131) {
            $var_8->addPass(new class_8(), var_64\var_65\var_132\var_133\var_134::var_135, -1000);
        }

        $var_8->compile($var_23);

        foreach ($var_23->var_4 as $var_137 => $var_104) {
            if ($var_23->var_9 && $var_104->isLazy()) {
                $var_23->fn_15($var_104->getClass());
            }
        }

        $var_23->var_7 = [];

        if ($var_130 instanceof var_131) {
            if ($var_124) {
                $var_23->var_22 = new class_9($var_23->resolveEnvPlaceholders($var_130->all(), true));
            }

            $var_23->var_14 = $var_130->getEnvPlaceholders();
        }

        var_142::compile();

        foreach ($var_23->var_4 + $var_23->var_5 as $var_137 => $var_104) {
            if (!$var_104->isPublic() || $var_104->isPrivate()) {
                $var_23->var_18[$var_137] = true;
            }
        }
    }

    
    public function var_145()
    {
        var_169 array_unique(array_merge(array_keys($var_23->getDefinitions()), array_keys($var_23->var_5), parent::getServiceIds()));
    }

    
    var_147 function var_148()
    {
        var_169 $var_23->var_18;
    }

    
    var_147 function var_149(array $var_150)
    {
        foreach ($var_150 as $var_109 => $var_137) {
            $var_23->setAlias($var_109, $var_137);
        }
    }

    
    var_147 function var_151(array $var_150)
    {
        $var_23->var_5 = [];
        $var_23->addAliases($var_150);
    }

    
    var_147 function var_30($var_109, $var_137)
    {
        $var_109 = $var_23->fn_16($var_109);

        if (\var_76($var_137)) {
            $var_137 = new class_2($var_23->fn_16($var_137));
        } elseif (!$var_137 instanceof var_32) {
            throw new class_10('$id must be a string, or an Alias object.');
        }

        if ($var_109 === (string) $var_137) {
            throw new class_10(sprintf('An alias can not reference itself, got a circular reference on "%s".', $var_109));
        }

        unset($var_23->var_4[$var_109], $var_23->var_18[$var_109]);

        return $var_23->var_5[$var_109] = $var_137;
    }

    
    var_147 function var_153($var_109)
    {
        if (isset($var_23->var_5[$var_109 = $var_23->fn_16($var_109)])) {
            unset($var_23->var_5[$var_109]);
            $var_23->var_18[$var_109] = true;
        }
    }

    
    var_147 function var_154($var_137)
    {
        var_169 var_155($var_23->var_5[$var_23->fn_16($var_137)]);
    }

    
    var_147 function var_156()
    {
        var_169 $var_23->var_5;
    }

    
    var_147 function var_157($var_137)
    {
        $var_137 = $var_23->fn_16($var_137);

        if (!isset($var_23->var_5[$var_137])) {
            throw new class_10(sprintf('The service alias "%s" does not exist.', $var_137));
        }

        var_169 $var_23->var_5[$var_137];
    }

    
    var_147 function var_158($var_137, $var_27 = null)
    {
        var_169 $var_23->setDefinition($var_137, new class_1($var_27));
    }

    
    var_147 function var_159($var_137, $var_27 = null)
    {
        var_169 $var_23->setDefinition($var_137, (new class_1($var_27))->setAutowired(true));
    }

    
    var_147 function var_161(array $var_4)
    {
        foreach ($var_4 as $var_137 => $var_104) {
            $var_23->setDefinition($var_137, $var_104);
        }
    }

    
    var_147 function var_162(array $var_4)
    {
        $var_23->var_4 = [];
        $var_23->addDefinitions($var_4);
    }

    
    var_147 function var_146()
    {
        var_169 $var_23->var_4;
    }

    
    var_147 function var_24($var_137, var_25 $var_104)
    {
        if ($var_23->isCompiled()) {
            throw new class_11('Adding definition to a compiled container is not allowed');
        }

        $var_137 = $var_23->fn_16($var_137);

        unset($var_23->var_5[$var_137], $var_23->var_18[$var_137]);

        return $var_23->var_4[$var_137] = $var_104;
    }

    
    var_147 function var_164($var_137)
    {
        var_169 var_155($var_23->var_4[$var_23->fn_16($var_137)]);
    }

    
    var_147 function var_165($var_137)
    {
        $var_137 = $var_23->fn_16($var_137);

        if (!isset($var_23->var_4[$var_137])) {
            throw new class_12($var_137);
        }

        var_169 $var_23->var_4[$var_137];
    }

    
    var_147 function var_166($var_137)
    {
        $var_137 = $var_23->fn_16($var_137);

        $var_167 = [];
        while (isset($var_23->var_5[$var_137])) {
            $var_137 = (string) $var_23->var_5[$var_137];

            if (isset($var_167[$var_137])) {
                $var_167 = array_values($var_167);
                $var_167 = \var_168($var_167, array_search($var_137, $var_167));
                $var_167[] = $var_137;

                throw new class_13($var_137, $var_167);
            }

            $var_167[$var_137] = $var_137;
        }

        var_169 $var_23->getDefinition($var_137);
    }

    
    var_170 function var_171(var_25 $var_104, array &$var_172, $var_173 = false, $var_137 = null, $var_174 = true)
    {
        if (null === $var_137 && isset($var_172[$var_175 = spl_object_hash($var_104)])) {
            var_169 $var_172[$var_175];
        }

        var_176 ($var_104 instanceof var_177) {
            throw new class_15(sprintf('Constructing service "%s" from a parent definition is not supported at build time.', $var_137));
        }

        var_176 ($var_104->isSynthetic()) {
            throw new class_15(sprintf('You have requested a synthetic service ("%s"). The DIC does not know how to construct this service.', $var_137));
        }

        var_176 ($var_104->isDeprecated()) {
            @trigger_error($var_104->getDeprecationMessage($var_137), var_59);
        }

        var_176 ($var_174 && $var_104->isLazy() && !$var_174 = !($var_181 = $var_23->var_10) || $var_181 instanceof var_182) {
            $var_181 = $var_181->instantiateProxy(
                $var_23,
                $var_104,
                $var_137, function () use ($var_104, &$var_172, $var_137) {
                    return $var_23->createService($var_104, $var_172, true, $var_137, false);
                }
            );
            $var_23->fn_17($var_104, $var_181, $var_137, $var_172);

            return $var_181;
        }

        $var_22 = $var_23->getParameterBag();

        if (null !== $var_104->getFile()) {
        }

        $var_186 = $var_23->doResolveServices($var_22->unescapeValue($var_22->resolveValue($var_104->getArguments())), $var_172, $var_173);

        if (null !== $var_190 = $var_104->getFactory()) {
            if (\var_192($var_190)) {
                $var_190 = [$var_23->doResolveServices($var_22->resolveValue($var_190[0]), $var_172, $var_173), $var_190[1]];
            } elseif (!\var_76($var_190)) {
                throw new class_15(sprintf('Cannot create service "%s" because of invalid factory', $var_137));
            }
        }

        var_176 (null !== $var_137 && $var_104->isShared() && isset($var_23->var_265[$var_137]) && ($var_174 || !$var_104->isLazy())) {
            var_169 $var_23->var_265[$var_137];
        }

        var_176 (null !== $var_190) {
            $var_99 = \var_194($var_190, $var_186);

            if (!$var_104->isDeprecated() && \var_192($var_190) && \var_76($var_190[0])) {
                $var_125 = new \var_50($var_190[0]);

                if (0 < strpos($var_125->getDocComment(), "\n * @deprecated ")) {
                    @trigger_error(sprintf('The "%s" service relies on the deprecated "%s" factory class. It should either be deprecated or its factory upgraded.', $var_137, $var_125->var_39), var_59);
                }
            }
        } else {
            $var_125 = new \var_50($var_27 = $var_22->resolveValue($var_104->getClass()));

            $var_99 = null === $var_125->getConstructor() ? $var_125->newInstance() : $var_125->newInstanceArgs($var_186);
            
            
            $var_199 = ['event_dispatcher' => var_64\var_65\var_200\var_201::var_27];

            if (!$var_104->isDeprecated() && 0 < strpos($var_125->getDocComment(), "\n * @deprecated ") && (!isset($var_199[$var_137]) || $var_199[$var_137] !== $var_27)) {
                @trigger_error(sprintf('The "%s" service relies on the deprecated "%s" class. It should either be deprecated or its implementation upgraded.', $var_137, $var_125->var_39), var_59);
            }
        }

        var_176 ($var_174 || !$var_104->isLazy()) {
            
            $var_23->fn_17($var_104, $var_99, $var_137, $var_172);
        }

        $var_202 = $var_23->doResolveServices($var_22->unescapeValue($var_22->resolveValue($var_104->getProperties())), $var_172);
        foreach ($var_202 as $var_39 => $var_215) {
            $var_99->$var_39 = $var_215;
        }

        var_204 ($var_104->getMethodCalls() as $var_206) {
            $var_23->fn_28($var_99, $var_206, $var_172);
        }

        var_176 ($var_207 = $var_104->getConfigurator()) {
            if (\var_192($var_207)) {
                $var_207[0] = $var_22->resolveValue($var_207[0]);

                if ($var_207[0] instanceof var_209) {
                    $var_207[0] = $var_23->doGet((string) $var_207[0], $var_207[0]->getInvalidBehavior(), $var_172);
                } elseif ($var_207[0] instanceof var_25) {
                    $var_207[0] = $var_23->createService($var_207[0], $var_172);
                }
            }

            var_176 (!\var_212($var_207)) {
                throw new class_10(sprintf('The configure callable for class "%s" is not a callable.', \var_49($var_99)));
            }

            \var_213($var_207, $var_99);
        }

        var_169 $var_99;
    }

    
    var_147 function var_214($var_215)
    {
        var_169 $var_23->doResolveServices($var_215);
    }

    var_170 function var_187($var_215, array &$var_172 = [], $var_173 = false)
    {
        if (\var_192($var_215)) {
            foreach ($var_215 as $var_216 => $var_217) {
                $var_215[$var_216] = $var_23->doResolveServices($var_217, $var_172, $var_173);
            }
        } var_218 ($var_215 instanceof var_219) {
            $var_220 = $var_215->getValues()[0];
            $var_215 = function () use ($var_220) {
                return $var_23->resolveServices($var_220);
            };
        } var_218 ($var_215 instanceof var_221) {
            $var_215 = new class_16(function () use ($var_215) {
                foreach ($var_215->getValues() as $var_216 => $var_217) {
                    foreach (self::fn_25($var_217) as $var_100) {
                        if (!$var_23->has($var_100)) {
                            continue 2;
                        }
                    }
                    foreach (self::fn_26($var_217) as $var_100) {
                        if (!$var_23->doGet($var_100, var_26::var_223)) {
                            continue 2;
                        }
                    }

                    yield $var_216 => $var_23->resolveServices($var_217);
                }
            }, function () use ($var_215) {
                $var_224 = 0;
                foreach ($var_215->getValues() as $var_217) {
                    foreach (self::fn_25($var_217) as $var_100) {
                        if (!$var_23->has($var_100)) {
                            continue 2;
                        }
                    }
                    foreach (self::fn_26($var_217) as $var_100) {
                        if (!$var_23->doGet($var_100, var_26::var_223)) {
                            continue 2;
                        }
                    }

                    ++$var_224;
                }

                return $var_224;
            });
        } var_218 ($var_215 instanceof var_209) {
            $var_215 = $var_23->doGet((string) $var_215, $var_215->getInvalidBehavior(), $var_172, $var_173);
        } var_218 ($var_215 instanceof var_25) {
            $var_215 = $var_23->createService($var_215, $var_172, $var_173);
        } var_218 ($var_215 instanceof var_225) {
            $var_215 = $var_23->getParameter((string) $var_215);
        } var_218 ($var_215 instanceof var_227) {
            $var_215 = $var_23->fn_18()->evaluate($var_215, ['container' => $var_23]);
        }

        var_169 $var_215;
    }

    
    var_147 function var_230($var_39, $var_231 = false)
    {
        $var_23->var_13[] = $var_39;
        $var_232 = [];
        foreach ($var_23->getDefinitions() as $var_137 => $var_104) {
            if ($var_104->hasTag($var_39)) {
                if ($var_231 && $var_104->isAbstract()) {
                    throw new class_10(sprintf('The service "%s" tagged "%s" must not be abstract.', $var_137, $var_39));
                }
                $var_232[$var_137] = $var_104->getTag($var_39);
            }
        }

        var_169 $var_232;
    }

    
    var_147 function var_236()
    {
        $var_232 = [];
        foreach ($var_23->getDefinitions() as $var_137 => $var_104) {
            $var_232 = array_merge(array_keys($var_104->getTags()), $var_232);
        }

        var_169 array_unique($var_232);
    }

    
    var_147 function var_238()
    {
        var_169 array_values(array_diff($var_23->findTags(), $var_23->var_13));
    }

    var_147 function var_239(var_240 $var_241)
    {
        $var_23->var_12[] = $var_241;
    }

    
    var_147 function var_242()
    {
        var_169 $var_23->var_12;
    }

    
    var_147 function var_243($var_52)
    {
        if (!isset($var_23->var_17[$var_52])) {
            $var_23->var_17[$var_52] = new class_14('');
        }

        var_169 $var_23->var_17[$var_52];
    }

    
    var_147 function var_244()
    {
        var_169 $var_23->var_17;
    }

    
    var_147 function var_124($var_215, $var_245 = null, array &$var_246 = null)
    {
        if (null === $var_245) {
            $var_245 = '%%env(%s)%%';
        }

        $var_130 = $var_23->getParameterBag();
        if (true === $var_245) {
            $var_215 = $var_130->resolveValue($var_215);
        }

        if (\var_192($var_215)) {
            $var_247 = [];
            foreach ($var_215 as $var_216 => $var_217) {
                $var_247[\var_76($var_216) ? $var_23->resolveEnvPlaceholders($var_216, $var_245, $var_246) : $var_216] = $var_23->resolveEnvPlaceholders($var_217, $var_245, $var_246);
            }

            var_169 $var_247;
        }

        var_176 (!\var_76($var_215) || 38 > \var_248($var_215)) {
            var_169 $var_215;
        }
        $var_14 = $var_130 instanceof var_131 ? $var_130->getEnvPlaceholders() : $var_23->var_14;

        $var_249 = false;
        foreach ($var_14 as $var_250 => $var_251) {
            foreach ($var_251 as $var_252) {
                if (false !== stripos($var_215, $var_252)) {
                    if (true === $var_245) {
                        $var_253 = $var_130->escapeValue($var_23->fn_19($var_250));
                    } else {
                        $var_253 = sprintf($var_245, $var_250);
                    }
                    var_176 ($var_252 === $var_215) {
                        $var_215 = $var_253;
                        $var_249 = true;
                    } else {
                        if (!\var_76($var_253) && !is_numeric($var_253)) {
                            throw new class_15(sprintf('A string value must be composed of strings and/or numbers, but found parameter "env(%s)" of type %s inside string value "%s".', $var_250, \var_256($var_253), $var_23->resolveEnvPlaceholders($var_215)));
                        }
                        $var_215 = str_ireplace($var_252, $var_253, $var_215);
                    }
                    $var_246[$var_250] = $var_250;
                    $var_23->var_15[$var_250] = isset($var_23->var_15[$var_250]) ? 1 + $var_23->var_15[$var_250] : 1;

                    if ($var_249) {
                        break 2;
                    }
                }
            }
        }

        return $var_215;
    }

    
    public function fn_20()
    {
        $var_130 = $var_23->getParameterBag();
        $var_14 = $var_130 instanceof var_131 ? $var_130->getEnvPlaceholders() : $var_23->var_14;

        foreach ($var_14 as $var_250 => $var_251) {
            if (!isset($var_23->var_15[$var_250])) {
                $var_23->var_15[$var_250] = 0;
            }
        }

        return $var_23->var_15;
    }

    
    public function fn_21()
    {
        $var_257 = [];

        foreach ($var_23->var_257 as $var_216 => $var_217) {
            if ($var_217 !== (string) $var_216) {
                $var_257[$var_216] = $var_217;
            }
        }

        return $var_257;
    }

    
    public function fn_22(var_259 $var_129, $var_260)
    {
        $var_23->getCompiler()->fn_22($var_129, $var_23->resolveEnvPlaceholders($var_260));
    }

    
    public function fn_16($var_137)
    {
        if (!\var_76($var_137)) {
            $var_137 = (string) $var_137;
        }

        return isset($var_23->var_4[$var_137]) || isset($var_23->var_5[$var_137]) || isset($var_23->var_18[$var_137]) ? $var_137 : parent::fn_16($var_137);
    }

    
    public function fn_23()
    {
        return $var_23->var_19;
    }

    
    public function fn_24($var_137)
    {
        if ($var_23->hasDefinition($var_137)) {
            foreach ($var_23->getDefinition($var_137)->getBindings() as $var_262 => $var_263) {
                list(, $var_264) = $var_263->getValues();
                $var_23->var_19[(int) $var_264] = true;
            }
        }
    }

    
    public static function fn_25($var_215)
    {
        $var_265 = [];

        if (\var_192($var_215)) {
            foreach ($var_215 as $var_217) {
                $var_265 = array_unique(array_merge($var_265, self::fn_25($var_217)));
            }
        } elseif ($var_215 instanceof var_209 && var_26::var_266 === $var_215->getInvalidBehavior()) {
            $var_265[] = (string) $var_215;
        }

        return $var_265;
    }

    
    public static function fn_26($var_215)
    {
        $var_265 = [];

        if (\var_192($var_215)) {
            foreach ($var_215 as $var_217) {
                $var_265 = array_unique(array_merge($var_265, self::fn_26($var_217)));
            }
        } elseif ($var_215 instanceof var_209 && var_26::var_223 === $var_215->getInvalidBehavior()) {
            $var_265[] = (string) $var_215;
        }

        return $var_265;
    }

    
    public static function fn_27($var_215)
    {
        $var_267 = substr(base64_encode(fn_27('sha256', serialize($var_215), true)), 0, 7);

        return str_replace(['/', '+'], ['.', '_'], strtolower($var_267));
    }

    
    protected function fn_19($var_39)
    {
        $var_215 = parent::fn_19($var_39);
        $var_130 = $var_23->getParameterBag();

        if (!\var_76($var_215) || !$var_130 instanceof var_131) {
            return $var_215;
        }

        foreach ($var_130->getEnvPlaceholders() as $var_250 => $var_251) {
            if (isset($var_251[$var_215])) {
                $var_130 = new class_9($var_130->all());

                return $var_130->unescapeValue($var_130->get("env($var_39)"));
            }
        }

        $var_23->resolving["env($var_39)"] = true;
        try {
            return $var_130->unescapeValue($var_23->resolveEnvPlaceholders($var_130->escapeValue($var_215), true));
        } finally {
            unset($var_23->resolving["env($var_39)"]);
        }
    }

    private function fn_28($var_99, $var_206, array &$var_172)
    {
        foreach (self::fn_25($var_206[1]) as $var_100) {
            if (!$var_23->has($var_100)) {
                return;
            }
        }
        foreach (self::fn_26($var_206[1]) as $var_100) {
            if (!$var_23->doGet($var_100, var_26::var_223, $var_172)) {
                return;
            }
        }

        \var_194([$var_99, $var_206[0]], $var_23->doResolveServices($var_23->getParameterBag()->unescapeValue($var_23->getParameterBag()->resolveValue($var_206[1])), $var_172));
    }

    
    private function fn_17(var_25 $var_104, $var_99, $var_137, array &$var_172)
    {
        $var_172[null !== $var_137 ? $var_137 : spl_object_hash($var_104)] = $var_99;

        if (null !== $var_137 && $var_104->isShared()) {
            $var_23->var_265[$var_137] = $var_99;
            unset($var_23->loading[$var_137]);
        }
    }

    private function fn_18()
    {
        if (null === $var_23->var_11) {
            if (!class_exists('Symfony\Component\ExpressionLanguage\ExpressionLanguage')) {
                throw new class_15('Unable to use expressions as the Symfony ExpressionLanguage component is not installed.');
            }
            $var_23->var_11 = new class_17(null, $var_23->var_12);
        }

        return $var_23->var_11;
    }

    private function fn_10($var_73)
    {
        if (null === $var_23->var_16) {
            $var_42 = new class_18();
            $var_23->var_16 = $var_42->getVendors();
            $var_23->fn_9($var_42);
        }
        $var_73 = realpath($var_73) ?: $var_73;

        foreach ($var_23->var_16 as $var_270) {
            if (0 === strpos($var_73, $var_270) && false !== strpbrk(substr($var_73, \var_248($var_270), 1), '/'.\var_271)) {
                return true;
            }
        }

        return false;
    }
}
