<?php






class var_0 extends var_1 implements var_2
{
    
    private $var_3 = [];

    
    private $var_4 = [];

    
    private $var_5 = [];

    
    private $var_6 = [];

    
    private $var_7 = [];

    private $var_8 = [];

    
    private $var_9;

    private $var_10;

    
    private $var_11;

    
    private $var_12;

    
    private $var_13 = [];

    
    private $var_14 = [];

    
    private $var_15 = [];

    
    private $var_16 = [];

    
    private $var_17;

    private $var_18 = [];

    private $var_19 = [];

    private $var_20 = [];

    private static $var_21 = [
        'int' => true,
        'float' => true,
        'string' => true,
        'bool' => true,
        'resource' => true,
        'object' => true,
        'array' => true,
        'null' => true,
        'callable' => true,
        'iterable' => true,
        'mixed' => true,
    ];

    public function fn_0(var_22 $var_23 = null)
    {
        parent::fn_0($var_23);

        $var_24->var_10 = interface_exists('Symfony\Component\Config\Resource\ResourceInterface');
        $var_24->setDefinition('service_container', (new class_0(var_27::var_28))->setSynthetic(true)->setPublic(true));
        $var_24->setAlias(var_32\var_1\var_27::var_28, new class_1('service_container', false));
        $var_24->setAlias(var_27::var_28, new class_1('service_container', false));
    }

    
    private $var_34;

    
    public function fn_1($var_35)
    {
        $var_24->var_10 = (bool) $var_35;
    }

    
    public function fn_2()
    {
        return $var_24->var_10;
    }

    
    public function fn_3(var_36 $var_11)
    {
        $var_24->var_11 = $var_11;
    }

    public function fn_4(var_37 $var_38)
    {
        $var_24->var_3[$var_38->getAlias()] = $var_38;

        if (false !== $var_38->getNamespace()) {
            $var_24->var_4[$var_38->getNamespace()] = $var_38;
        }
    }

    
    public function fn_5($var_40)
    {
        if (isset($var_24->var_3[$var_40])) {
            return $var_24->var_3[$var_40];
        }

        if (isset($var_24->var_4[$var_40])) {
            return $var_24->var_4[$var_40];
        }

        throw new class_2(sprintf('Container extension "%s" is not registered', $var_40));
    }

    
    public function fn_6()
    {
        return $var_24->var_3;
    }

    
    public function fn_7($var_40)
    {
        return isset($var_24->var_3[$var_40]) || isset($var_24->var_4[$var_40]);
    }

    
    public function fn_8()
    {
        return array_values($var_24->var_7);
    }

    
    public function fn_9(var_42 $var_43)
    {
        if (!$var_24->var_10) {
            return $var_24;
        }

        if ($var_43 instanceof var_44 && $var_24->fn_10($var_43->getPrefix())) {
            return $var_24;
        }

        $var_24->var_7[(string) $var_43] = $var_43;

        return $var_24;
    }

    
    public function fn_11(array $var_7)
    {
        if (!$var_24->var_10) {
            return $var_24;
        }

        $var_24->var_7 = $var_7;

        return $var_24;
    }

    
    public function fn_12($var_48)
    {
        if ($var_24->var_10) {
            if (\var_49($var_48)) {
                $var_48 = \var_50($var_48);
            }
            if (!isset($var_24->var_34[$var_48])) {
                $var_24->var_34[$var_48] = new \var_51($var_48);
            }
            $var_28 = $var_24->var_34[$var_48];

            foreach ($var_28->getInterfaceNames() as $var_40) {
                if (null === $var_53 = &$var_24->var_34[$var_40]) {
                    $var_53 = new \var_51($var_40);
                }
                $var_54 = $var_53->getFileName();
                if (false !== $var_54 && file_exists($var_54)) {
                    $var_24->fileExists($var_54);
                }
            }
            do {
                $var_54 = $var_28->getFileName();
                if (false !== $var_54 && file_exists($var_54)) {
                    $var_24->fileExists($var_54);
                }
                foreach ($var_28->getTraitNames() as $var_40) {
                    $var_24->fn_12($var_40);
                }
            } while ($var_28 = $var_28->getParentClass());
        }

        return $var_24;
    }

    
    public function fn_13(\var_51 $var_28)
    {
        @trigger_error('The '.var_59.'() method is deprecated since Symfony 3.3 and will be removed in 4.0. Use the addObjectResource() or the getReflectionClass() method instead.', var_60);

        return $var_24->fn_12($var_28->var_40);
    }

    
    public function fn_14($var_28, $var_61 = true)
    {
        if (!$var_28 = $var_24->getParameterBag()->resolveValue($var_28)) {
            return;
        }

        if (isset(self::$var_21[$var_28])) {
            return null;
        }

        $var_43 = null;

        try {
            if (isset($var_24->var_34[$var_28])) {
                $var_64 = $var_24->var_34[$var_28];
            } elseif (class_exists(var_65\var_66\var_67\var_68\var_69::var_28)) {
                $var_43 = new class_3($var_28, false);
                $var_64 = $var_43->isFresh(0) ? false : new \var_51($var_28);
            } else {
                $var_64 = class_exists($var_28) ? new \var_51($var_28) : false;
            }
        } catch (\var_71 $var_72) {
            if ($var_61) {
                throw $var_72;
            }
            $var_64 = false;
        }

        if ($var_24->var_10) {
            if (!$var_64) {
                $var_24->fn_9($var_43 ?: new class_3($var_28, false));
            } elseif (!$var_64->isInternal()) {
                $var_74 = $var_64->getFileName();

                if (!$var_24->fn_10($var_74)) {
                    $var_24->fn_9(new class_4($var_64, $var_24->var_17));
                }
            }
            $var_24->var_34[$var_28] = $var_64;
        }

        return $var_64 ?: null;
    }

    
    public function var_56($var_74, $var_75 = true)
    {
        $var_76 = file_exists($var_74);

        if (!$var_24->var_10 || $var_24->fn_10($var_74)) {
            return $var_76;
        }

        if (!$var_76) {
            $var_24->fn_9(new class_5($var_74));

            return $var_76;
        }

        if (is_dir($var_74)) {
            if ($var_75) {
                $var_24->fn_9(new class_6($var_74, \var_77($var_75) ? $var_75 : null));
            } else {
                $var_24->fn_9(new GlobResource($var_74, '
    public function loadFromExtension($extension, array $values = null)
    {
        if ($this->isCompiled()) {
            throw new BadMethodCallException('var_78 var_79 from var_80 var_38 var_81 var_82 var_83 var_84.');
        }

        if (\func_num_args() < 2) {
            $values = [];
        }

        $namespace = $this->getExtension($extension)->getAlias();

        $this->extensionConfigs[$namespace][] = $values;

        return $this;
    }

    
    public function addCompilerPass(CompilerPassInterface $pass, $type = Symfony\Component\DependencyInjection\Compiler\PassConfig::TYPE_BEFORE_OPTIMIZATION)
    {
        if (\func_num_args() >= 3) {
            $priority = func_get_arg(2);
        } else {
            if (__CLASS__ !== \get_class($this)) {
                $r = new \ReflectionMethod($this, __FUNCTION__);
                if (__CLASS__ !== $r->getDeclaringClass()->getName()) {
                    @trigger_error(sprintf('var_85 %s() var_86 var_87 var_82 var_88 `int $var_89 = 0` var_90 var_91 var_92 4.0. var_93 var_94 var_95 var_96 var_97 var_98 var_65 3.2.', __METHOD__), E_USER_DEPRECATED);
                }
            }

            $priority = 0;
        }

        $this->getCompiler()->addPass($pass, $type, $priority);

        $this->addObjectResource($pass);

        return $this;
    }

    
    public function getCompilerPassConfig()
    {
        return $this->getCompiler()->getPassConfig();
    }

    
    public function getCompiler()
    {
        if (null === $this->compiler) {
            $this->compiler = new Compiler();
        }

        return $this->compiler;
    }

    
    public function set($id, $service)
    {
        $id = $this->normalizeId($id);

        if ($this->isCompiled() && (isset($this->definitions[$id]) && !$this->definitions[$id]->isSynthetic())) {
            
            throw new BadMethodCallException(sprintf('var_99 var_100 "%var_101" for var_80 var_102 or var_103-var_104 var_100 var_105 var_81 var_82 var_83 var_84 var_96 var_106 var_107.', $id));
        }

        unset($this->definitions[$id], $this->aliasDefinitions[$id], $this->removedIds[$id]);

        parent::set($id, $service);
    }

    
    public function removeDefinition($id)
    {
        if (isset($this->definitions[$id = $this->normalizeId($id)])) {
            unset($this->definitions[$id]);
            $this->removedIds[$id] = true;
        }
    }

    
    public function has($id)
    {
        $id = $this->normalizeId($id);

        return isset($this->definitions[$id]) || isset($this->aliasDefinitions[$id]) || parent::has($id);
    }

    
    public function get($id, $invalidBehavior = ContainerInterface::EXCEPTION_ON_INVALID_REFERENCE)
    {
        if ($this->isCompiled() && isset($this->removedIds[$id = $this->normalizeId($id)])) {
            @trigger_error(sprintf('var_108 var_109 "%var_101" private var_100 or var_110 var_96 var_97 var_98 var_65 3.4 and var_86 var_111 var_91 4.0. var_112 var_95 public var_113.', $id), E_USER_DEPRECATED);
        }

        return $this->doGet($id, $invalidBehavior);
    }

    private function doGet($id, $invalidBehavior = ContainerInterface::EXCEPTION_ON_INVALID_REFERENCE, array &$inlineServices = null, $isConstructorArgument = false)
    {
        $id = $this->normalizeId($id);

        if (isset($inlineServices[$id])) {
            return $inlineServices[$id];
        }
        if (null === $inlineServices) {
            $isConstructorArgument = true;
            $inlineServices = [];
        }
        try {
            if (ContainerInterface::IGNORE_ON_UNINITIALIZED_REFERENCE === $invalidBehavior) {
                return parent::get($id, $invalidBehavior);
            }
            if ($service = parent::get($id, ContainerInterface::NULL_ON_INVALID_REFERENCE)) {
                return $service;
            }
        } catch (ServiceCircularReferenceException $e) {}
        }

        if (!isset($this->definitions[$id]) && isset($this->aliasDefinitions[$id])) {
            return $this->doGet((string) $this->aliasDefinitions[$id], $invalidBehavior, $inlineServices, $isConstructorArgument);
        }

        try {
            $definition = $this->getDefinition($id);
        } catch (ServiceNotFoundException $e) {}

            throw $e;
        }

        if ($isConstructorArgument) {
            $this->loading[$id] = true;
        }

        try {
            return $this->createService($definition, $inlineServices, $isConstructorArgument, $id);
        } finally {
            if ($isConstructorArgument) {
                unset($this->loading[$id]);
            }
        }
    }

    
    public function merge(self $container)
    {
        if ($this->isCompiled()) {
            throw new BadMethodCallException('var_78 var_114 var_81 var_82 var_83 var_84.');
        }

        $this->addDefinitions($container->getDefinitions());
        $this->addAliases($container->getAliases());
        $this->getParameterBag()->add($container->getParameterBag()->all());

        if ($this->trackResources) {
            foreach ($container->getResources() as $resource) {
                $this->addResource($resource);
            }
        }

        foreach ($this->extensions as $name => $extension) {
            if (!isset($this->extensionConfigs[$name])) {
                $this->extensionConfigs[$name] = [];
            }

            $this->extensionConfigs[$name] = array_merge($this->extensionConfigs[$name], $container->getExtensionConfig($name));
        }

        if ($this->getParameterBag() instanceof EnvPlaceholderParameterBag && $container->getParameterBag() instanceof EnvPlaceholderParameterBag) {
            $envPlaceholders = $container->getParameterBag()->getEnvPlaceholders();
            $this->getParameterBag()->mergeEnvPlaceholders($container->getParameterBag());
        } else {
            $envPlaceholders = [];
        }

        foreach ($container->envCounters as $env => $count) {
            if (!$count && !isset($envPlaceholders[$env])) {
                continue;
            }
            if (!isset($this->envCounters[$env])) {
                $this->envCounters[$env] = $count;
            } else {
                $this->envCounters[$env] += $count;
            }
        }

        foreach ($container->getAutoconfiguredInstanceof() as $interface => $childDefinition) {
            if (isset($this->autoconfiguredInstanceof[$interface])) {
                throw new InvalidArgumentException(sprintf('"%var_101" var_115 var_116 var_117 var_118 and merge() var_119 var_106 var_120 var_121 var_122 var_123 var_109 var_124 var_28/var_53.', $interface));
            }

            $this->autoconfiguredInstanceof[$interface] = $childDefinition;
        }
    }

    
    public function getExtensionConfig($name)
    {
        if (!isset($this->extensionConfigs[$name])) {
            $this->extensionConfigs[$name] = [];
        }

        return $this->extensionConfigs[$name];
    }

    
    public function prependExtensionConfig($name, array $config)
    {
        if (!isset($this->extensionConfigs[$name])) {
            $this->extensionConfigs[$name] = [];
        }

        array_unshift($this->extensionConfigs[$name], $config);
    }

    
    public function compile()
    {
        if (1 <= \func_num_args()) {
            $resolveEnvPlaceholders = func_get_arg(0);
        } else {
            if (__CLASS__ !== static::class) {
                $r = new \ReflectionMethod($this, __FUNCTION__);
                if (__CLASS__ !== $r->getDeclaringClass()->getName() && (1 > $r->getNumberOfParameters() || 'var_125' !== $var_126->getParameters()[0]->var_40)) {
                    @trigger_error(sprintf('The %s::compile() method expects a first "$resolveEnvPlaceholders" argument since Symfony 3.3. It will be made mandatory in 4.0.', static::var_28), var_60);
                }
            }
            $var_125 = false;
        }
        $var_9 = $var_24->getCompiler();

        if ($var_24->var_10) {
            foreach ($var_9->getPassConfig()->getPasses() as $var_130) {
                $var_24->fn_12($var_130);
            }
        }
        $var_131 = $var_24->getParameterBag();

        if ($var_125 && $var_131 instanceof var_132) {
            $var_9->addPass(new class_7(), var_65\var_66\var_133\var_134\var_135::var_136, -1000);
        }

        $var_9->compile($var_24);

        foreach ($var_24->var_5 as $var_138 => $var_105) {
            if ($var_24->var_10 && $var_105->isLazy()) {
                $var_24->fn_14($var_105->getClass());
            }
        }

        $var_24->var_8 = [];

        if ($var_131 instanceof var_132) {
            if ($var_125) {
                $var_24->var_23 = new class_8($var_24->fn_15($var_131->all(), true));
            }

            $var_24->var_15 = $var_131->getEnvPlaceholders();
        }

        var_143::compile();

        foreach ($var_24->var_5 + $var_24->var_6 as $var_138 => $var_105) {
            if (!$var_105->isPublic() || $var_105->isPrivate()) {
                $var_24->var_19[$var_138] = true;
            }
        }
    }

    
    public function var_146()
    {
        return array_unique(array_merge(array_keys($var_24->getDefinitions()), array_keys($var_24->var_6), parent::getServiceIds()));
    }

    
    var_148 function var_149()
    {
        return $var_24->var_19;
    }

    
    var_148 function var_150(array $var_151)
    {
        foreach ($var_151 as $var_110 => $var_138) {
            $var_24->setAlias($var_110, $var_138);
        }
    }

    
    var_148 function var_152(array $var_151)
    {
        $var_24->var_6 = [];
        $var_24->addAliases($var_151);
    }

    
    var_148 function var_31($var_110, $var_138)
    {
        $var_110 = $var_24->fn_16($var_110);

        if ('' === $var_110 || '\\' === substr($var_110, -1) || \var_154($var_110) !== strcspn($var_110, "\0\r\n'")) {
            throw new class_9(sprintf('Invalid alias id: "%s"', $var_110));
        }

        if (\var_77($var_138)) {
            $var_138 = new class_1($var_24->fn_16($var_138));
        } elseif (!$var_138 instanceof var_33) {
            throw new class_9('$id must be a string, or an Alias object.');
        }

        if ($var_110 === (string) $var_138) {
            throw new class_9(sprintf('An alias can not reference itself, got a circular reference on "%s".', $var_110));
        }

        unset($var_24->var_5[$var_110], $var_24->var_19[$var_110]);

        return $var_24->var_6[$var_110] = $var_138;
    }

    
    var_148 function var_155($var_110)
    {
        if (isset($var_24->var_6[$var_110 = $var_24->fn_16($var_110)])) {
            unset($var_24->var_6[$var_110]);
            $var_24->var_19[$var_110] = true;
        }
    }

    
    var_148 function var_156($var_138)
    {
        return var_157($var_24->var_6[$var_24->fn_16($var_138)]);
    }

    
    var_148 function var_158()
    {
        return $var_24->var_6;
    }

    
    var_148 function var_159($var_138)
    {
        $var_138 = $var_24->fn_16($var_138);

        if (!isset($var_24->var_6[$var_138])) {
            throw new class_9(sprintf('The service alias "%s" does not exist.', $var_138));
        }

        return $var_24->var_6[$var_138];
    }

    
    var_148 function var_160($var_138, $var_28 = null)
    {
        return $var_24->setDefinition($var_138, new class_0($var_28));
    }

    
    var_148 function var_161($var_138, $var_28 = null)
    {
        return $var_24->setDefinition($var_138, (new class_0($var_28))->setAutowired(true));
    }

    
    var_148 function var_163(array $var_5)
    {
        foreach ($var_5 as $var_138 => $var_105) {
            $var_24->setDefinition($var_138, $var_105);
        }
    }

    
    var_148 function var_164(array $var_5)
    {
        $var_24->var_5 = [];
        $var_24->addDefinitions($var_5);
    }

    
    var_148 function var_147()
    {
        return $var_24->var_5;
    }

    
    var_148 function var_25($var_138, var_26 $var_105)
    {
        if ($var_24->isCompiled()) {
            throw new class_10('Adding definition to a compiled container is not allowed');
        }

        $var_138 = $var_24->fn_16($var_138);

        if ('' === $var_138 || '\\' === substr($var_138, -1) || \var_154($var_138) !== strcspn($var_138, "\0\r\n'")) {
            throw new class_9(sprintf('Invalid service id: "%s"', $var_138));
        }

        var_166($var_24->var_6[$var_138], $var_24->var_19[$var_138]);

        return $var_24->var_5[$var_138] = $var_105;
    }

    
    public function fn_17($var_138)
    {
        return isset($var_24->var_5[$var_24->fn_16($var_138)]);
    }

    
    public function fn_18($var_138)
    {
        $var_138 = $var_24->fn_16($var_138);

        if (!isset($var_24->var_5[$var_138])) {
            throw new class_11($var_138);
        }

        return $var_24->var_5[$var_138];
    }

    
    public function fn_19($var_138)
    {
        $var_138 = $var_24->fn_16($var_138);

        $var_169 = [];
        while (isset($var_24->var_6[$var_138])) {
            $var_138 = (string) $var_24->var_6[$var_138];

            if (isset($var_169[$var_138])) {
                $var_169 = array_values($var_169);
                $var_169 = \var_170($var_169, array_search($var_138, $var_169));
                $var_169[] = $var_138;

                throw new class_12($var_138, $var_169);
            }

            $var_169[$var_138] = $var_138;
        }

        return $var_24->fn_18($var_138);
    }

    
    private function fn_20(var_26 $var_105, array &$var_172, $var_173 = false, $var_138 = null, $var_174 = true)
    {
        if (null === $var_138 && isset($var_172[$var_175 = spl_object_hash($var_105)])) {
            return $var_172[$var_175];
        }

        if ($var_105 instanceof var_176) {
            throw new class_14(sprintf('Constructing service "%s" from a parent definition is not supported at build time.', $var_138));
        }

        if ($var_105->isSynthetic()) {
            throw new class_14(sprintf('You have requested a synthetic service ("%s"). The DIC does not know how to construct this service.', $var_138));
        }

        if ($var_105->isDeprecated()) {
            @trigger_error($var_105->getDeprecationMessage($var_138), var_60);
        }

        if ($var_174 && $var_105->isLazy() && !$var_174 = !($var_180 = $var_24->var_11) || $var_180 instanceof var_181) {
            $var_180 = $var_180->instantiateProxy(
                $var_24,
                $var_105,
                $var_138, function () use ($var_105, &$var_172, $var_138) {
                    return $var_24->fn_20($var_105, $var_172, true, $var_138, false);
                }
            );
            $var_24->fn_21($var_105, $var_180, $var_138, $var_172);

            return $var_180;
        }

        $var_23 = $var_24->getParameterBag();

        if (null !== $var_105->getFile()) {
        }

        $var_185 = $var_24->fn_22($var_23->unescapeValue($var_23->resolveValue($var_105->getArguments())), $var_172, $var_173);

        if (null !== $var_189 = $var_105->getFactory()) {
            if (\var_191($var_189)) {
                $var_189 = [$var_24->fn_22($var_23->resolveValue($var_189[0]), $var_172, $var_173), $var_189[1]];
            } elseif (!\var_77($var_189)) {
                throw new class_14(sprintf('Cannot create service "%s" because of invalid factory', $var_138));
            }
        }

        if (null !== $var_138 && $var_105->isShared() && isset($var_24->var_256[$var_138]) && ($var_174 || !$var_105->isLazy())) {
            return $var_24->var_256[$var_138];
        }

        if (null !== $var_189) {
            $var_100 = \var_193($var_189, $var_185);

            if (!$var_105->isDeprecated() && \var_191($var_189) && \var_77($var_189[0])) {
                $var_126 = new \var_51($var_189[0]);

                if (0 < strpos($var_126->getDocComment(), "\n * @deprecated ")) {
                    @trigger_error(sprintf('The "%s" service relies on the deprecated "%s" factory class. It should either be deprecated or its factory upgraded.', $var_138, $var_126->var_40), var_60);
                }
            }
        } else {
            $var_126 = new \var_51($var_28 = $var_23->resolveValue($var_105->getClass()));

            $var_100 = null === $var_126->getConstructor() ? $var_126->newInstance() : $var_126->newInstanceArgs($var_185);
            
            
            $var_198 = ['event_dispatcher' => var_65\var_66\var_199\var_200::var_28];

            if (!$var_105->isDeprecated() && 0 < strpos($var_126->getDocComment(), "\n * @deprecated ") && (!isset($var_198[$var_138]) || $var_198[$var_138] !== $var_28)) {
                @trigger_error(sprintf('The "%s" service relies on the deprecated "%s" class. It should either be deprecated or its implementation upgraded.', $var_138, $var_126->var_40), var_60);
            }
        }

        if ($var_174 || !$var_105->isLazy()) {
            
            $var_24->fn_21($var_105, $var_100, $var_138, $var_172);
        }

        $var_201 = $var_24->fn_22($var_23->unescapeValue($var_23->resolveValue($var_105->getProperties())), $var_172);
        foreach ($var_201 as $var_40 => $var_203) {
            $var_100->$var_40 = $var_203;
        }

        foreach ($var_105->getMethodCalls() as $var_205) {
            $var_24->fn_23($var_100, $var_205, $var_172);
        }

        if ($var_207 = $var_105->getConfigurator()) {
            if (\var_191($var_207)) {
                $var_207[0] = $var_23->resolveValue($var_207[0]);

                if ($var_207[0] instanceof var_209) {
                    $var_207[0] = $var_24->doGet((string) $var_207[0], $var_207[0]->getInvalidBehavior(), $var_172);
                } elseif ($var_207[0] instanceof var_26) {
                    $var_207[0] = $var_24->fn_20($var_207[0], $var_172);
                }
            }

            if (!\var_212($var_207)) {
                throw new class_9(sprintf('The configure callable for class "%s" is not a callable.', \var_50($var_100)));
            }

            \var_213($var_207, $var_100);
        }

        return $var_100;
    }

    
    public function fn_24($var_203)
    {
        return $var_24->fn_22($var_203);
    }

    private function fn_22($var_203, array &$var_172 = [], $var_173 = false)
    {
        if (\var_191($var_203)) {
            foreach ($var_203 as $var_215 => $var_216) {
                $var_203[$var_215] = $var_24->fn_22($var_216, $var_172, $var_173);
            }
        } elseif ($var_203 instanceof var_217) {
            $var_218 = $var_203->getValues()[0];
            $var_203 = function () use ($var_218) {
                return $var_24->fn_24($var_218);
            };
        } elseif ($var_203 instanceof var_219) {
            $var_203 = new class_15(function () use ($var_203) {
                foreach ($var_203->getValues() as $var_215 => $var_216) {
                    foreach (self::fn_39($var_216) as $var_101) {
                        if (!$var_24->has($var_101)) {
                            continue 2;
                        }
                    }
                    foreach (self::fn_40($var_216) as $var_101) {
                        if (!$var_24->doGet($var_101, var_27::var_221)) {
                            continue 2;
                        }
                    }

                    yield $var_215 => $var_24->fn_24($var_216);
                }
            }, function () use ($var_203) {
                $var_222 = 0;
                foreach ($var_203->getValues() as $var_216) {
                    foreach (self::fn_39($var_216) as $var_101) {
                        if (!$var_24->has($var_101)) {
                            continue 2;
                        }
                    }
                    foreach (self::fn_40($var_216) as $var_101) {
                        if (!$var_24->doGet($var_101, var_27::var_221)) {
                            continue 2;
                        }
                    }

                    ++$var_222;
                }

                return $var_222;
            });
        } elseif ($var_203 instanceof var_209) {
            $var_203 = $var_24->doGet((string) $var_203, $var_203->getInvalidBehavior(), $var_172, $var_173);
        } elseif ($var_203 instanceof var_26) {
            $var_203 = $var_24->fn_20($var_203, $var_172, $var_173);
        } elseif ($var_203 instanceof var_223) {
            $var_203 = $var_24->getParameter((string) $var_203);
        } elseif ($var_203 instanceof var_225) {
            $var_203 = $var_24->fn_25()->evaluate($var_203, ['container' => $var_24]);
        }

        return $var_203;
    }

    
    public function fn_26($var_40, $var_228 = false)
    {
        $var_24->var_14[] = $var_40;
        $var_229 = [];
        foreach ($var_24->getDefinitions() as $var_138 => $var_105) {
            if ($var_105->hasTag($var_40)) {
                if ($var_228 && $var_105->isAbstract()) {
                    throw new class_9(sprintf('The service "%s" tagged "%s" must not be abstract.', $var_138, $var_40));
                }
                $var_229[$var_138] = $var_105->getTag($var_40);
            }
        }

        return $var_229;
    }

    
    public function fn_27()
    {
        $var_229 = [];
        foreach ($var_24->getDefinitions() as $var_138 => $var_105) {
            $var_229 = array_merge(array_keys($var_105->getTags()), $var_229);
        }

        return array_unique($var_229);
    }

    
    public function fn_28()
    {
        return array_values(array_diff($var_24->fn_27(), $var_24->var_14));
    }

    public function fn_29(var_235 $var_236)
    {
        $var_24->var_13[] = $var_236;
    }

    
    public function fn_30()
    {
        return $var_24->var_13;
    }

    
    public function fn_31($var_53)
    {
        if (!isset($var_24->var_18[$var_53])) {
            $var_24->var_18[$var_53] = new class_13('');
        }

        return $var_24->var_18[$var_53];
    }

    
    public function fn_32()
    {
        return $var_24->var_18;
    }

    
    public function fn_15($var_203, $var_237 = null, array &$var_238 = null)
    {
        if (null === $var_237) {
            $var_237 = '%%env(%s)%%';
        }

        $var_131 = $var_24->getParameterBag();
        if (true === $var_237) {
            $var_203 = $var_131->resolveValue($var_203);
        }

        if (\var_191($var_203)) {
            $var_239 = [];
            foreach ($var_203 as $var_215 => $var_216) {
                $var_239[\var_77($var_215) ? $var_24->fn_15($var_215, $var_237, $var_238) : $var_215] = $var_24->fn_15($var_216, $var_237, $var_238);
            }

            return $var_239;
        }

        if (!\var_77($var_203) || 38 > \var_154($var_203)) {
            return $var_203;
        }
        $var_15 = $var_131 instanceof var_132 ? $var_131->getEnvPlaceholders() : $var_24->var_15;

        $var_240 = false;
        foreach ($var_15 as $var_241 => $var_242) {
            foreach ($var_242 as $var_243) {
                if (false !== stripos($var_203, $var_243)) {
                    if (true === $var_237) {
                        $var_244 = $var_131->escapeValue($var_24->fn_33($var_241));
                    } else {
                        $var_244 = sprintf($var_237, $var_241);
                    }
                    if ($var_243 === $var_203) {
                        $var_203 = $var_244;
                        $var_240 = true;
                    } else {
                        if (!\var_77($var_244) && !is_numeric($var_244)) {
                            throw new class_14(sprintf('A string value must be composed of strings and/or numbers, but found parameter "env(%s)" of type %s inside string value "%s".', $var_241, \var_247($var_244), $var_24->fn_15($var_203)));
                        }
                        $var_203 = str_ireplace($var_243, $var_244, $var_203);
                    }
                    $var_238[$var_241] = $var_241;
                    $var_24->var_16[$var_241] = isset($var_24->var_16[$var_241]) ? 1 + $var_24->var_16[$var_241] : 1;

                    if ($var_240) {
                        break 2;
                    }
                }
            }
        }

        return $var_203;
    }

    
    public function fn_34()
    {
        $var_131 = $var_24->getParameterBag();
        $var_15 = $var_131 instanceof var_132 ? $var_131->getEnvPlaceholders() : $var_24->var_15;

        foreach ($var_15 as $var_241 => $var_242) {
            if (!isset($var_24->var_16[$var_241])) {
                $var_24->var_16[$var_241] = 0;
            }
        }

        return $var_24->var_16;
    }

    
    public function fn_35()
    {
        $var_248 = [];

        foreach ($var_24->var_248 as $var_215 => $var_216) {
            if ($var_216 !== (string) $var_215) {
                $var_248[$var_215] = $var_216;
            }
        }

        return $var_248;
    }

    
    public function fn_36(var_250 $var_130, $var_251)
    {
        $var_24->getCompiler()->fn_36($var_130, $var_24->fn_15($var_251));
    }

    
    public function fn_16($var_138)
    {
        if (!\var_77($var_138)) {
            $var_138 = (string) $var_138;
        }

        return isset($var_24->var_5[$var_138]) || isset($var_24->var_6[$var_138]) || isset($var_24->var_19[$var_138]) ? $var_138 : parent::fn_16($var_138);
    }

    
    public function fn_37()
    {
        return $var_24->var_20;
    }

    
    public function fn_38($var_138)
    {
        if ($var_24->fn_17($var_138)) {
            foreach ($var_24->fn_18($var_138)->getBindings() as $var_253 => $var_254) {
                list(, $var_255) = $var_254->getValues();
                $var_24->var_20[(int) $var_255] = true;
            }
        }
    }

    
    public static function fn_39($var_203)
    {
        $var_256 = [];

        if (\var_191($var_203)) {
            foreach ($var_203 as $var_216) {
                $var_256 = array_unique(array_merge($var_256, self::fn_39($var_216)));
            }
        } elseif ($var_203 instanceof var_209 && var_27::var_257 === $var_203->getInvalidBehavior()) {
            $var_256[] = (string) $var_203;
        }

        return $var_256;
    }

    
    public static function fn_40($var_203)
    {
        $var_256 = [];

        if (\var_191($var_203)) {
            foreach ($var_203 as $var_216) {
                $var_256 = array_unique(array_merge($var_256, self::fn_40($var_216)));
            }
        } elseif ($var_203 instanceof var_209 && var_27::var_221 === $var_203->getInvalidBehavior()) {
            $var_256[] = (string) $var_203;
        }

        return $var_256;
    }

    
    public static function fn_41($var_203)
    {
        $var_258 = substr(base64_encode(fn_41('sha256', serialize($var_203), true)), 0, 7);

        return str_replace(['/', '+'], ['.', '_'], strtolower($var_258));
    }

    
    protected function fn_33($var_40)
    {
        $var_203 = parent::fn_33($var_40);
        $var_131 = $var_24->getParameterBag();

        if (!\var_77($var_203) || !$var_131 instanceof var_132) {
            return $var_203;
        }

        foreach ($var_131->getEnvPlaceholders() as $var_241 => $var_242) {
            if (isset($var_242[$var_203])) {
                $var_131 = new class_8($var_131->all());

                return $var_131->unescapeValue($var_131->get("env($var_40)"));
            }
        }

        $var_24->resolving["env($var_40)"] = true;
        try {
            return $var_131->unescapeValue($var_24->fn_15($var_131->escapeValue($var_203), true));
        } finally {
            unset($var_24->resolving["env($var_40)"]);
        }
    }

    private function fn_23($var_100, $var_205, array &$var_172)
    {
        foreach (self::fn_39($var_205[1]) as $var_101) {
            if (!$var_24->has($var_101)) {
                return;
            }
        }
        foreach (self::fn_40($var_205[1]) as $var_101) {
            if (!$var_24->doGet($var_101, var_27::var_221, $var_172)) {
                return;
            }
        }

        \var_193([$var_100, $var_205[0]], $var_24->fn_22($var_24->getParameterBag()->unescapeValue($var_24->getParameterBag()->resolveValue($var_205[1])), $var_172));
    }

    
    private function fn_21(var_26 $var_105, $var_100, $var_138, array &$var_172)
    {
        $var_172[null !== $var_138 ? $var_138 : spl_object_hash($var_105)] = $var_100;

        if (null !== $var_138 && $var_105->isShared()) {
            $var_24->var_256[$var_138] = $var_100;
            unset($var_24->loading[$var_138]);
        }
    }

    private function fn_25()
    {
        if (null === $var_24->var_12) {
            if (!class_exists('Symfony\Component\ExpressionLanguage\ExpressionLanguage')) {
                throw new class_14('Unable to use expressions as the Symfony ExpressionLanguage component is not installed.');
            }
            $var_24->var_12 = new class_16(null, $var_24->var_13);
        }

        return $var_24->var_12;
    }

    private function fn_10($var_74)
    {
        if (null === $var_24->var_17) {
            $var_43 = new class_17();
            $var_24->var_17 = $var_43->getVendors();
            $var_24->fn_9($var_43);
        }
        $var_74 = realpath($var_74) ?: $var_74;

        foreach ($var_24->var_17 as $var_261) {
            if (0 === strpos($var_74, $var_261) && false !== strpbrk(substr($var_74, \var_154($var_261), 1), '/'.\var_262)) {
                return true;
            }
        }

        return false;
    }
}
