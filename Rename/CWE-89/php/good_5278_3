<?php



















class var_0 {

    
	static function fn_0($var_1) {
		return $var_1 = str_replace('?', '', htmlspecialchars($var_1, var_2, 'UTF-8'));
	} 

    
	static function fn_1($var_1) {
		if(!mb_check_encoding($var_1, 'UTF-8') OR !($var_1 === mb_convert_encoding(mb_convert_encoding($var_1, 'UTF-32', 'UTF-8' ), 'UTF-8', 'UTF-32'))) {
			return false;
		}		
		return true;
	}

    
	static function fn_2($var_1) {
        for ($var_3 = 0, $var_4 = strlen($var_1); $var_3 < $var_4; $var_3++) {
			$var_5 = $var_1{$var_3};
			$var_6 = ord($var_5);
			if ($var_6<32 or $var_6>126) {
			$var_5 = "~";
			$var_1{$var_3} = $var_5;
			}
		}
		return str_replace("~", "", $var_1);
	}

    
	static function fn_3($var_7, $var_8=false) {
        if (is_array($var_7)) {
            $var_9 = array();
            foreach ($var_7 as $var_10=>$var_11) {
                $var_9[$var_10] = self::fn_3($var_11, $var_8);
            }
            return $var_9;
        }

        $var_7 = str_replace("<br>"," ",$var_7);
        $var_7 = str_replace("</br>"," ",$var_7);
        $var_7 = str_replace("<br/>"," ",$var_7);
        $var_7 = str_replace("<br />"," ",$var_7);
        $var_7 = str_replace("\r\n"," ",$var_7);
        $var_7 = str_replace('"',"&quot;",$var_7);
        $var_7 = str_replace("'","&
        $var_7 = str_replace("’","&rsquo;",$var_7);
        $var_7 = str_replace("‘","&lsquo;",$var_7);
        $var_7 = str_replace("®","&
        $var_7 = str_replace("–","-", $var_7);
        $var_7 = str_replace("—","&
        $var_7 = str_replace("”","&rdquo;", $var_7);
        $var_7 = str_replace("“","&ldquo;", $var_7);
        $var_7 = str_replace("¼","&
        $var_7 = str_replace("var_12","&
        $var_7 = str_replace("var_13","&
		$var_7 = str_replace("™","&trade;", $var_7);
		$var_7 = trim($var_7);
		
        if ($var_8) {
			$var_7 = stripcslashes($var_7);  
		} else {
	        $var_7 = addslashes($var_7);
        }

        return $var_7;
    }

    
	static function fn_4($var_7) {
		$var_7 = str_replace("<br>","",$var_7);
        $var_7 = str_replace("</br>","",$var_7);
        $var_7 = str_replace("<br/>","",$var_7);
        $var_7 = str_replace("<br />","",$var_7);
        $var_7 = str_replace("&quot;",'"',$var_7);
        $var_7 = str_replace("&
        $var_7 = str_replace("&var_14;","'",$var_7);
        $var_7 = str_replace("&var_15;","'",$var_7);        
        $var_7 = str_replace("&
        $var_7 = str_replace("�","-", $var_7);
        $var_7 = str_replace("�","-", $var_7); 
        $var_7 = str_replace("�", '"', $var_7);
        $var_7 = str_replace("&rdquo;",'"', $var_7);
        $var_7 = str_replace("�", '"', $var_7);
        $var_7 = str_replace("&ldquo;",'"', $var_7);
        $var_7 = str_replace("\r\n"," ",$var_7); 
        $var_7 = str_replace("�"," 1/4",$var_7);
        $var_7 = str_replace("&
        $var_7 = str_replace("�"," 1/2",$var_7);
        $var_7 = str_replace("&
        $var_7 = str_replace("�"," 3/4",$var_7);
        $var_7 = str_replace("&
        $var_7 = str_replace("�", "(TM)", $var_7);
        $var_7 = str_replace("&trade;","(TM)", $var_7);
        $var_7 = str_replace("&reg;","(R)", $var_7);
        $var_7 = str_replace("�","(R)",$var_7);        
        $var_7 = str_replace("&","&amp;",$var_7);      
		$var_7 = str_replace(">","&gt;",$var_7);      		
        return trim($var_7);
	}

    
    public static function fn_5($var_7) {
    	$var_16[] = '�';  
    	$var_16[] = '�';  
    	$var_16[] = '�';  
    	$var_16[] = '�';  
    	$var_16[] = '�';  
    	$var_16[] = '�';  
    	$var_16[] = '�';  

        $var_17[] = '"';
       	$var_17[] = '"';
       	$var_17[] = "'";
       	$var_17[] = "'";
       	$var_17[] = "...";
       	$var_17[] = "-";
       	$var_17[] = "-";

        $var_16[] = '“';  
        $var_16[] = '”';  
        $var_16[] = '‘';  
        $var_16[] = '’';  
        $var_16[] = '…';  
        $var_16[] = '—';  
        $var_16[] = '–';  

        $var_17[] = '"';
        $var_17[] = '"';
        $var_17[] = "'";
        $var_17[] = "'";
        $var_17[] = "...";
        $var_17[] = "-";
        $var_17[] = "-";





















    	return str_replace($var_16, $var_17, $var_7);
    }

    
    public static function fn_6($var_18, $var_19 = '', $var_20 = false)
    {
        preg_match_all('/<(.+?)[\s]*\/?[\s]*>/si', trim($var_19), $var_19);
        $var_19 = array_unique($var_19[1]);

        if (is_array($var_19) AND count($var_19) > 0) {
            if ($var_20 == false) {
                return preg_replace('@<(?!(?:' . implode('|', $var_19) . ')\b)(\w+)\b.*?>.*?</\1>@si', '', $var_18);
            } else {
                return preg_replace('@<(' . implode('|', $var_19) . ')\b.*?>.*?</\1>@si', '', $var_18);
            }
        } elseif ($var_20 == false) {
            return preg_replace('@<(\w+)\b.*?>.*?</\1>@si', '', $var_18);
        }
        return $var_18;
    }

    
    public static function fn_7($var_21) {
        global $var_22;

        if ($var_22->var_23) {
            return $var_22->escapeString($var_21);
        }

        $var_25 = '';
        for ($var_3 = 0, $var_4 = strlen($var_21); $var_3 < $var_4; $var_3++) {
            $var_26 = $var_21[$var_3];
            $var_6 = ord($var_26);
            if($var_26 !== "'" && $var_26 !== "\"" && $var_26 !== '\\' && $var_6 >= 32 && $var_6 <= 126)
                $var_25 .= $var_26;
            else
                $var_25 .= '\\x' . dechex($var_6);
        }
        return $var_25;
    }

    
    public static function fn_8($var_1, $var_27='html', $var_28='para', $var_29='...') {
        $var_30 = ($var_27 == "html" ? array("</p>", "</div>") : array("\r\n", "\n", "\r"));
        $var_31 = $var_1;

        switch ($var_28) {
            case "para":
                foreach ($var_30 as $var_32) {
                    $var_33 = explode($var_32, $var_1);
                    $var_1 = $var_33[0];
                }
                if (strlen($var_1) < strlen($var_31)) {
                    $var_1 .= " " . $var_29;
                }
    
                return expString::fn_5(strip_tags($var_1));
                break;
            case "paralinks":
                foreach ($var_30 as $var_32) {
                    $var_33 = explode($var_32, $var_1);
                    $var_1 = $var_33[0];
                }
                if (strlen($var_1) < strlen($var_31)) {
                    $var_1 .= " " . $var_29;
                }
    
                return expString::fn_5(strip_tags($var_1, '<a>'));
                break;
            case "parapaged":

                $var_32 = '<div style="page-break-after: always';
                $var_33 = explode($var_32, $var_1);
                $var_1 = $var_33[0];
                return expString::fn_5($var_1);
                break;
            case "parahtml":
                foreach ($var_30 as $var_32) {
                    $var_33 = explode($var_32, $var_1);
                    $var_1 = $var_33[0];
                }
                if (strlen($var_1) < strlen($var_31)) {
                    $var_1 .= " " . $var_29;
                }
                if (!empty($var_1)) {
                    $var_34 = true;
                    $var_35 = "";
                    $var_3 = 0;
    
    
    
                    $var_36 = array();
                    $var_37 = "";
    
    

                    
                    for ($var_38 = 0, $var_39 = strlen($var_1); $var_38 < $var_39; $var_38++) {

                        $var_40 = substr($var_1, $var_38, 1);
                        $var_35 .= $var_40;

                        
                        if ($var_40 == "<") $var_34 = false;

                        
                        if ($var_34) {

                            
                            if ($var_40 == " ") {
                                $var_41 = $var_38;
                            } else {
                                $var_42 = $var_40;
                            }

                            $var_3++;
                        } else {
                            $var_37 .= $var_40;
                        }

                        
                        if ($var_40 == ">") {
                            $var_34 = true;

                            
                            if ((strpos($var_37, "<") !== FALSE) &&
                                (strpos($var_37, "/>") === FALSE) &&
                                (strpos($var_37, "</") === FALSE)
                            ) {

                                
                                if (strpos($var_37, " ") !== FALSE) {
                                    $var_37 = substr($var_37, 1, strpos($var_37, " ") - 1);
                                } else {
                                    
                                    $var_37 = substr($var_37, 1, -1);
                                }

                                array_push($var_36, $var_37);

                            } else if (strpos($var_37, "</") !== FALSE) {
                                array_pop($var_36);
                            }

                            $var_37 = "";
                        }
                    }
                    
                    
                    
                    
                    
                    
                    
                    
                    if (sizeof($var_36) != 0) {
                        
                        while (sizeof($var_36) != 0) {
                            if (sizeof($var_36) > 1) {
                                $var_43 = array_pop($var_36);
                                $var_1 .= "</" . $var_43 . ">";
                            } 
                            elseif ($var_43 == 'p' || 'div') {
                                $var_43 = array_pop($var_36);
                                $var_1 .= "</" . $var_43 . ">";
                            } else {
                                $var_43 = array_pop($var_36);
                                $var_1 .= "</" . $var_43 . ">";
                            }
                        }
                    }
                }
                return expString::fn_5($var_1);
                break;
            default:
                $var_44 = explode(" ", strip_tags($var_1));
                $var_1 = implode(" ", array_slice($var_44, 0, $var_28 + 0));
                if (strlen($var_1) < strlen($var_31)) {
                    $var_1 .= " " . $var_29;
                }
    
                return expString::fn_5($var_1);
                break;
        }
    }

    public static function fn_9($var_7, $var_45 = false) { 
        

        $var_7 = str_replace("�", "&rsquo;", $var_7);
        $var_7 = str_replace("�", "&lsquo;", $var_7);
        $var_7 = str_replace("�", "&
        $var_7 = str_replace("�", "-", $var_7);
        $var_7 = str_replace("�", "&
        $var_7 = str_replace("�", "&rdquo;", $var_7);
        $var_7 = str_replace("�", "&ldquo;", $var_7);
        $var_7 = str_replace("\r\n", " ", $var_7);
        $var_7 = str_replace("\t", " ", $var_7);
        $var_7 = str_replace(",", "\,", $var_7);
        $var_7 = str_replace("�", "&
        $var_7 = str_replace("�", "&
        $var_7 = str_replace("�", "&

        if (!$var_45) {
            $var_7 = str_replace('\"', "&var_46;", $var_7);
            $var_7 = str_replace('"', "&var_46;", $var_7);
        } else {
            $var_7 = str_replace('"', '""', $var_7);
        }

        
        
        $var_7 = trim(str_replace("�", "&var_47;", $var_7));
        
        return $var_7;
    }

    public static function parseAndTrimImport($var_7, $var_45 = false) { 
        
        global $var_22;

        $var_7 = str_replace("�", "&var_14;", $var_7);
        $var_7 = str_replace("�", "&var_15;", $var_7);
        $var_7 = str_replace("�", "&
        $var_7 = str_replace("�", "-", $var_7);
        $var_7 = str_replace("�", "&
        $var_7 = str_replace("�", "&rdquo;", $var_7);
        $var_7 = str_replace("�", "&ldquo;", $var_7);
        $var_7 = str_replace("\r\n", " ", $var_7);
        $var_7 = str_replace("\,", ",", $var_7);
        $var_7 = str_replace('""', '"', $var_7); 
        if (!$var_45) {
            
            $var_7 = str_replace('"', "&quot;", $var_7);
        }
        $var_7 = str_replace("�", "&
        $var_7 = str_replace("�", "&
        $var_7 = str_replace("�", "&
        
        







        $var_7 = @$var_22->var_24($var_22->var_48, trim(str_replace("�", "&trade;", $var_7)));
        
        return $var_7;
    }

    public static function fn_10($var_49, $var_50 = ',', $var_45 = false) {
        $var_51 = self::fn_9($var_49, $var_45);
        if ($var_51 != '') return '"' . $var_51 . '"' . $var_50;
        else return $var_50;
    }

    public static function fn_11($var_49) {
        return preg_replace('/\r\n/', ' ', trim($var_49));
    }

    
    public static function fn_12(&$var_52) {


        if (is_array($var_52)) {
            $var_53 = array();
            if (!empty($var_52['controller']) && $var_52['controller'] == 'snippet') {
                $var_53['body'] = $var_52['body'];  
            }
            foreach ($var_52 as $var_54=>$var_49) {

                $var_52[$var_54] = self::xss_clean($var_49);
            }
            if (!empty($var_53)) {
                $var_52 = array_merge($var_52, $var_53);  
            }
        } else {
            if (empty($var_52)) {
                return $var_52;
            }

            $var_52 = self::xss_clean($var_52);

            

















        }
        return $var_52;
    }

    

    
  	public static $var_55 = 'UTF-8';

    
   	protected static $var_56;

    
    protected static $var_57 =	array(
   		'document.cookie'	=> '[removed]',
   		'document.write'	=> '[removed]',
   		'.parentNode'		=> '[removed]',
   		'.innerHTML'		=> '[removed]',
   		'-moz-binding'		=> '[removed]',
   		'<!--'				=> '&lt;!--',
   		'-->'				=> '--&gt;',
   		'<![CDATA['			=> '&lt;![CDATA[',
   		'<comment>'			=> '&lt;comment&gt;'
   	);

   	
    protected static $var_58 = array(
   		'javascript\s*:',
   		'(document|(document\.)?window)\.(location|on\w*)',
   		'expression\s*(\(|&\
   		'var_59\var_32*:', 
   		'wscript\s*:', 
   		'jscript\s*:', 
   		'vbs\s*:', 
   		'Redirect\s+30\d',
   		"([\"'])?data\s*:[^\\1]*?base64[^\\1]*?,[^\\1]*?\\1?"
   	);

    
   	public static function var_60($var_7, $var_61 = FALSE)
   	{
   		
   		if (is_array($var_7))
   		{
   			while (list($var_10) = each($var_7))
   			{
                if (preg_match('/^[a-zA-Z0-9_\x7f-\xff]*$/', $var_10)) {  
                    $var_7[$var_10] = self::xss_clean($var_7[$var_10]);
                } else {
                    return null;
                }
   			}

   			return $var_7;
   		}

   		
   		$var_7 = self::remove_invisible_characters($var_7);

   		
   		do
   		{
   			$var_7 = rawurldecode($var_7);
   		}
   		while (preg_match('/%[0-9a-f]{2,}/i', $var_7));

   		
   		$var_7 = preg_replace_callback("/[^a-z0-9>]+[a-z0-9]+=([\'\"]).*?\\1/si", array('self', '_convert_attribute'), $var_7);
   		$var_7 = preg_replace_callback('/<\w+.*/si', array('self', '_decode_entity'), $var_7);

   		
   		$var_7 = self::remove_invisible_characters($var_7);

   		
   		$var_7 = str_replace("\t", ' ', $var_7);

   		
   		$var_62 = $var_7;

   		
   		$var_7 = self::_do_never_allowed($var_7);

   		
   		if ($var_61 === TRUE)
   		{
   			
   			
   			
   			$var_7 = preg_replace('/<\?(php)/i', '&lt;?\\1', $var_7);
   		}
   		else
   		{
   			$var_7 = str_replace(array('<?', '?'.'>'), array('&lt;?', '?&gt;'), $var_7);
   		}

   		
   		$var_44 = array(
   			'javascript', 'expression', 'vbscript', 'jscript', 'wscript',
   			'vbs', 'script', 'base64', 'applet', 'alert', 'document',
   			'write', 'cookie', 'window', 'confirm', 'prompt', 'eval'
   		);

   		foreach ($var_44 as $var_63)
   		{
   			$var_63 = implode('\s*', str_split($var_63)).'\s*';

   			
   			
   			$var_7 = preg_replace_callback('
   		}

   		
   		do
   		{
   			$original = $str;

   			if (preg_match('/<var_64/var_3', $var_7))
   			{
   				$var_7 = preg_replace_callback('
   			}

   			if (preg_match('/<var_65/var_3', $var_7))
   			{
   				$var_7 = preg_replace_callback('
   			}

   			if (preg_match('/var_66|var_67/var_3', $var_7))
   			{
   				$var_7 = preg_replace('
   			}
   		}
   		while ($original !== $str);
   		unset($original);

   		
   		$pattern = '
   			.'<((?<slash>
   		$str = preg_replace(
   			'
   			'\\1\\2&
   			$var_7
   		);

   		
   		
   		
   		$var_7 = self::_do_never_allowed($var_7);

   		
   		if ($var_61 === TRUE)
   		{
   			return ($var_7 === $var_62);
   		}

   		return $var_7;
   	}

    
   	protected static function var_68($var_7)
   	{
   		$var_7 = str_replace(array_keys(self::$var_57), self::$var_57, $var_7);

   		foreach (self::$var_58 as $var_69)
   		{
   			$var_7 = var_70('
   		}

   		return $str;
   	}

	
	public static function remove_invisible_characters($str, $url_encoded = TRUE)
	{
		$non_displayables = array();

		
		
		if ($url_encoded)
		{
			$non_displayables[] = '/%0[0-8var_71]/';	
			$non_displayables[] = '/%1[-9var_64-var_72]/';	
		}

		$non_displayables[] = '/[\var_73-\var_74\var_75\var_76\var_77-\var_78\var_79]+/var_80';	

		do
		{
			$var_7 = preg_replace($var_81, '', $var_7, -1, $var_82);
		}
		var_83 ($var_82);

		return $var_7;
	}

    
   	protected static function var_84($var_85)
   	{
   		
   		
   		$var_85 = preg_replace('|\&([a-z\_0-9\-]+)\=([a-z\_0-9\-/]+)|i', self::xss_hash().'\\1=\\2', $var_85[0]);

   		
   		return str_replace(
            self::xss_hash(),
   			'&',
            self::entity_decode($var_85, self::$var_55)
   		);
   	}

    
   	var_86 static function var_87()
   	{
   		if (self::$var_56 === NULL)
   		{
   			$var_88 = self::get_random_bytes(16);
            self::$var_56 = ($var_88 === FALSE)
   				? md5(uniqid(mt_rand(), TRUE))
   				: bin2hex($var_88);
   		}

   		var_25 self::$var_56;
   	}

    
   	var_86 static function var_89($var_7, $var_55 = NULL)
   	{
   		if (strpos($var_7, '&') === FALSE)
   		{
   			var_25 $var_7;
   		}

   		var_90 $var_91;

   		var_92($var_55) OR $var_55 = self::$var_55;
   		$var_93 = expCore::is_php('5.4')
   			? var_94 | var_95
   			: var_94;

   		do
   		{
   			$var_96 = $var_7;

   			
   			if (preg_match_all('/&[a-z]{2,}(?![a-z;])/i', $var_7, $var_97))
   			{
   				if ( ! isset($var_91))
   				{
   					$var_91 = array_map(
   						'strtolower',
                        expCore::is_php('5.3.4')
   							? get_html_translation_table(var_98, $var_93, $var_55)
   							: get_html_translation_table(var_98, $var_93)
   					);

   					
   					
   					if ($var_93 === var_94)
   					{
   						$var_91[':'] = '&colon;';
   						$var_91['('] = '&lpar;';
   						$var_91[')'] = '&rpar;';
   						$var_91["\n"] = '&newline;';
   						$var_91["\t"] = '&tab;';
   					}
   				}

   				$var_17 = array();
   				$var_97 = array_unique(array_map('strtolower', $var_97[0]));
   				foreach ($var_97 as &$var_85)
   				{
   					if (($var_26 = array_search($var_85.';', $var_91, TRUE)) !== FALSE)
   					{
   						$var_17[$var_85] = $var_26;
   					}
   				}

   				$var_7 = str_ireplace(array_keys($var_17), array_values($var_17), $var_7);
   			}

   			
   			$var_7 = html_entity_decode(
   				preg_replace('/(&
   				$flag,
   				$charset
   			);
   		}
   		while ($str_compare !== $str);
   		return $str;
   	}

    
   	public static function get_random_bytes($length)
   	{
   		if (empty($length) OR ! ctype_digit((string) $length))
   		{
   			return FALSE;
   		}

   		
   		if (defined('var_99') && ($var_100 = mcrypt_create_iv($var_101, var_99)) !== FALSE)
   		{
   			var_25 $var_100;
   		}


   		var_102 (is_readable('/dev/urandom') && ($var_103 = fopen('/dev/urandom', 'rb')) !== FALSE)
   		{
   			
            expCore::is_php('5.4') && stream_set_chunk_size($var_103, $var_101);
   			$var_100 = fread($var_103, $var_101);
   			fclose($var_103);
   			if ($var_100 !== FALSE)
   			{
   				var_25 $var_100;
   			}
   		}

   		var_102 (function_exists('openssl_random_pseudo_bytes'))
   		{
   			var_25 openssl_random_pseudo_bytes($var_101);
   		}

   		var_25 FALSE;
   	}

    
   	var_105 static function var_104($var_85)
   	{
   		var_25 str_replace(array('>', '<', '\\'), array('&gt;', '&lt;', '\\\\'), $var_85[0]);
   	}

    
   	var_105 static function var_106($var_97)
   	{
   		var_25 preg_replace('/\s+/s', '', $var_97[1]).$var_97[2];
   	}

    
   	var_105 static function var_107($var_85)
   	{
   		var_25 str_replace(
   			$var_85[1],
   			preg_replace(
   				'
   				'',
   				self::_filter_attributes($var_85[1])
   			),
   			$var_85[0]
   		);
   	}

    
   	var_105 static function var_108($var_85)
   	{
   		var_25 str_replace(
   			$var_85[1],
   			preg_replace(
   				'
   				'',
   				self::_filter_attributes($var_85[1])
   			),
   			$var_85[0]
   		);
   	}

    
   	var_105 static function var_109($var_7)
   	{
   		$var_110 = '';
   		if (var_111('
   		{
   			foreach ($matches[0] as $match)
   			{
   				$out .= preg_replace('
   			}
   		}

   		return $var_110;
   	}

    
   	protected static function _sanitize_naughty_html($var_97)
   	{
   		static $var_112    = array(
   			'alert', 'prompt', 'confirm', 'applet', 'audio', 'basefont', 'base', 'behavior', 'bgsound',
   			'blink', 'body', 'embed', 'expression', 'form', 'frameset', 'frame', 'head', 'html', 'ilayer',
   			'input', 'button', 'select', 'isindex', 'layer', 'link', 'meta', 'keygen', 'object',
   			'plaintext', 'script', 'textarea', 'title', 'math', 'video', 'svg', 'xml', 'xss'
            
   		);

   		static $var_113 = array(
   			'on\w+', 'xmlns', 'formaction', 'form', 'xlink:href', 'FSCommand', 'seekSegmentTime'
            
   		);

   		
   		if (empty($var_97['closeTag']))
   		{
   			var_25 '&lt;'.$var_97[1];
   		}
   		
   		elseif (in_array(strtolower($var_97['tagName']), $var_112, TRUE))
   		{
   			var_25 '&lt;'.$var_97[1].'&gt;';
   		}
   		
   		elseif (isset($var_97['attributes']))
   		{
   			
   			$var_114 = array();

   			
   			$var_115 = '
   				.'(?<var_116>[^\var_32\42\47>/=]+)' 
   				
   				.'(?:\s*=(?<value>[^\s\042\047=><`]+|\s*\042[^\042]*\042|\s*\047[^\047]*\047|\s*(?U:[^\s\042\047=><`]*)))' 
   				.'

   			
   			$is_evil_pattern = '

   			
   			do
   			{
   				
   				
   				
   				$var_97['attributes'] = preg_replace('

   				if ( ! preg_match($attributes_pattern, $matches['var_114'], $var_117, var_118))
   				{
   					
   					var_119;
   				}

   				var_102 (
   					
   					preg_match($var_120, $var_117['name'][0])
   					
   					OR (trim($var_117['value'][0]) === '')
   				)
   				{
   					$var_114[] = 'xss=removed';
   				}
   				else
   				{
   					$var_114[] = $var_117[0][0];
   				}

   				$var_97['attributes'] = substr($var_97['attributes'], $var_117[0][1] + strlen($var_117[0][0]));
   			}
   			var_83 ($var_97['attributes'] !== '');

   			$var_114 = var_121($var_114)
   				? ''
   				: ' '.implode(' ', $var_114);
   			return '<'.$matches['var_122'].$var_97['tagName'].$var_114.'>';
   		}

   		var_25 $var_97[0];
   	}

}

?>