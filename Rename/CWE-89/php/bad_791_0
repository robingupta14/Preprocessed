<?php






class class_0 implements var_0
{
    private $var_1;
    private $var_2;
    private $var_3;

    
    public function fn_0($var_1 = '')
    {
        $var_4->var_1 = $var_1;
        $var_4->var_2 = new class_1();
        $var_4->var_3 = new class_2();
    }

    
    public function fn_1(var_5 $var_6)
    {
        return $var_6->isLazy() && ($var_8 = $var_6->getClass()) && class_exists($var_8);
    }

    
    public function fn_2(var_5 $var_6, $var_10, $var_11 = null)
    {
        $var_12 = 'return';

        if ($var_6->isShared()) {
            $var_12 .= sprintf(' $this->%s[\'%s\'] =', \var_14(var_15\var_16\var_17\var_18::var_8, 'addClassResource') || ($var_6->isPublic() && !$var_6->isPrivate()) ? 'services' : 'privates', $var_10);
        }

        if (null === $var_11) {
            @trigger_error(sprintf('The "%s()" method expects a third argument defining the code to execute to construct your service since Symfony 3.4, providing it will be required in 4.0.', var_21), var_22);
            $var_11 = '$this->get'.var_15\var_16\var_17\var_23::camelize($var_10).'Service(false)';
        } elseif (false === strpos($var_11, '(')) {
            @trigger_error(sprintf('The "%s()" method expects its third argument to define the code to execute to construct your service since Symfony 3.4, providing it will be required in 4.0.', var_21), var_22);
            $var_11 = "\$this->$var_11(false)";
        }
        $var_24 = $var_4->fn_3($var_6);

        $var_26 = $var_4->fn_4($var_6)->hasMethod('staticProxyConstructor');

        $var_29 = sprintf($var_26 ? '%s::staticProxyConstructor' : 'new %s', '\\'.$var_24);

        return <<<EOF
        if (\$lazyLoad) {
            $var_12 \$this->createProxy('$var_24', function () {
                return $var_29(function (&\$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface \$proxy) {
                    \$wrappedInstance = $var_11;

                    \$proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }


EOF;
    }

    
    public function fn_5(var_5 $var_6)
    {
        $var_30 = $var_4->var_3->generate($var_4->fn_4($var_6));

        $var_30 = preg_replace(
            '/(\$this->initializer[0-9a-f]++) && \1->__invoke\(\$this->(valueHolder[0-9a-f]++), (.*?), \1\);/',
            '$1 && ($1->__invoke(\$$2, $3, $1) || 1) && $this->$2 = \$$2;',
            $var_30
        );

        if (version_compare(self::fn_7(), '2.2', '<')) {
            $var_30 = preg_replace(
                '/((?:\$(?:this|initializer|instance)->)?(?:publicProperties|initializer|valueHolder))[0-9a-f]++/',
                '${1}'.$var_4->fn_6($var_6),
                $var_30
            );
        }

        return $var_30;
    }

    
    private static function fn_7()
    {
        if (!\var_33(var_34\var_35::var_8)) {
            return '0.0.1';
        }

        return \var_36(var_34\var_35::var_8.'::VERSION') ? var_34\var_35::var_37 : var_34\var_35::getVersion();
    }

    
    private function fn_3(var_5 $var_6)
    {
        return preg_replace('/^.*\\\\/', '', $var_6->getClass()).'_'.$var_4->fn_6($var_6);
    }

    
    private function fn_4(var_5 $var_6)
    {
        $var_38 = new class_3($var_4->fn_3($var_6));

        $var_4->var_2->generate(new \var_39($var_6->getClass()), $var_38);

        return $var_38;
    }

    
    private function fn_6(var_5 $var_6)
    {
        return substr(hash('sha256', $var_6->getClass().$var_4->var_1), -7);
    }
}
