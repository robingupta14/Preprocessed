<?php






class class_0 extends var_0
{
    protected static $var_1;

    public static function fn_0()
    {
        self::$var_1 = realpath(var_2.'/../Fixtures/');
    }

    public function fn_1()
    {
        $var_3 = new class_1();
        $var_3->compile();
        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services1.php', $var_6->dump(), '->dump() dumps an empty container as an empty PHP class');
        $var_7->assertStringEqualsFile(self::$var_1.'/php/services1-1.php', $var_6->dump(['class' => 'Container', 'base_class' => 'AbstractContainer', 'namespace' => 'Symfony\Component\DependencyInjection\Dump']), '->dump() takes a class and a base_class options');
    }

    public function fn_2()
    {
        $var_10 = new class_3();
        $var_10->setClass('stdClass');
        $var_10->addArgument([
            'only dot' => '.',
            'concatenation as value' => '.\'\'.',
            'concatenation from the start value' => '\'\'.',
            '.' => 'dot as a key',
            '.\'\'.' => 'concatenation as a key',
            '\'\'.' => 'concatenation from the start key',
            'optimize concatenation' => 'string1%some_string%string2',
            'optimize concatenation with empty string' => 'string1%empty_value%string2',
            'optimize concatenation from the start' => '%empty_value%start',
            'optimize concatenation at the end' => 'end%empty_value%',
            'new line' => "string with \nnew line",
        ]);
        $var_10->setPublic(true);

        $var_3 = new class_1();
        $var_3->setResourceTracking(false);
        $var_3->setDefinition('test', $var_10);
        $var_3->setParameter('empty_value', '');
        $var_3->setParameter('some_string', '-');
        $var_3->compile();

        $var_6 = new class_2($var_3);
        $var_7->assertStringEqualsFile(self::$var_1.'/php/services10.php', $var_6->dump(), '->dump() dumps an empty container as an empty PHP class');
    }

    public function fn_3()
    {
        $var_10 = new class_3();
        $var_10->setClass('stdClass');
        $var_10->addArgument('%foo%');
        $var_10->addArgument(['%foo%' => '%buz%/']);
        $var_10->setPublic(true);

        $var_3 = new class_1();
        $var_3->setDefinition('test', $var_10);
        $var_3->setParameter('foo', 'wiz'.\var_17(var_2));
        $var_3->setParameter('bar', var_2);
        $var_3->setParameter('baz', '%bar%/PhpDumperTest.php');
        $var_3->setParameter('buz', \var_17(\var_17(var_2)));
        $var_3->compile();

        $var_6 = new class_2($var_3);
        $var_7->assertStringEqualsFile(self::$var_1.'/php/services12.php', $var_6->dump(['file' => var_18]), '->dump() dumps __DIR__ relative strings');
    }

    public function fn_4()
    {
        $var_3 = new class_1();
        $var_3->compile();

        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/custom_container_class_without_constructor.php', $var_6->dump(['base_class' => 'NoConstructorContainer', 'namespace' => 'Symfony\Component\DependencyInjection\Tests\Fixtures\Container']));
    }

    public function fn_5()
    {
        $var_3 = new class_1();
        $var_3->compile();

        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/custom_container_class_constructor_without_arguments.php', $var_6->dump(['base_class' => 'ConstructorWithoutArgumentsContainer', 'namespace' => 'Symfony\Component\DependencyInjection\Tests\Fixtures\Container']));
    }

    public function fn_6()
    {
        $var_3 = new class_1();
        $var_3->compile();

        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/custom_container_class_with_optional_constructor_arguments.php', $var_6->dump(['base_class' => 'ConstructorWithOptionalArgumentsContainer', 'namespace' => 'Symfony\Component\DependencyInjection\Tests\Fixtures\Container']));
    }

    public function fn_7()
    {
        $var_3 = new class_1();
        $var_3->compile();

        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/custom_container_class_with_mandatory_constructor_arguments.php', $var_6->dump(['base_class' => 'ConstructorWithMandatoryArgumentsContainer', 'namespace' => 'Symfony\Component\DependencyInjection\Tests\Fixtures\Container']));
    }

    
    public function fn_8($var_19)
    {
        $var_3 = new class_1(new class_4($var_19));
        $var_3->compile();
        $var_6 = new class_2($var_3);
        $var_6->dump();
    }

    public function fn_9()
    {
        return [
            [['foo' => new class_3('stdClass')]],
            [['foo' => new class_5('service("foo").foo() ~ (container.hasParameter("foo") ? parameter("foo") : "default")')]],
            [['foo' => new class_6('foo')]],
            [['foo' => new class_7('foo')]],
        ];
    }

    public function fn_10()
    {
        $var_3 = include self::$var_1.'/containers/container8.php';
        $var_3->compile();
        $var_6 = new class_2($var_3);
        $var_7->assertStringEqualsFile(self::$var_1.'/php/services8.php', $var_6->dump(), '->dump() dumps parameters');
    }

    
    public function fn_11()
    {
        $var_3 = include self::$var_1.'/containers/container9.php';
        $var_6 = new class_2($var_3);
        $var_7->assertStringEqualsFile(self::$var_1.'/php/services9.php', str_replace(str_replace('\\', '\\\\', self::$var_1.\var_20.'includes'.\var_20), '%path%', $var_6->dump()), '->dump() dumps services');
    }

    public function fn_12()
    {
        $var_3 = include self::$var_1.'/containers/container9.php';
        $var_3->compile();
        $var_6 = new class_2($var_3);
        $var_7->assertStringEqualsFile(self::$var_1.'/php/services9_compiled.php', str_replace(str_replace('\\', '\\\\', self::$var_1.\var_20.'includes'.\var_20), '%path%', $var_6->dump()), '->dump() dumps services');

        $var_3 = new class_1();
        $var_3->register('foo', 'FooClass')->addArgument(new \var_22())->setPublic(true);
        $var_3->compile();
        $var_6 = new class_2($var_3);
        try {
            $var_6->dump();
            $var_7->fail('->dump() throws a RuntimeException if the container to be dumped has reference to objects or resources');
        } catch (\var_24 $var_25) {
            $var_7->assertInstanceOf('\Symfony\Component\DependencyInjection\Exception\RuntimeException', $var_25, '->dump() throws a RuntimeException if the container to be dumped has reference to objects or resources');
            $var_7->assertEquals('Unable to dump a service container if a parameter is an object or a resource.', $var_25->getMessage(), '->dump() throws a RuntimeException if the container to be dumped has reference to objects or resources');
        }
    }

    public function fn_13()
    {
        $var_3 = include self::$var_1.'/containers/container9.php';
        $var_3->getDefinition('bar')->addTag('hot');
        $var_3->compile();
        $var_6 = new class_2($var_3);
        $var_9 = print_r($var_6->dump(['as_files' => true, 'file' => var_2, 'hot_path_tag' => 'hot']), true);
        if ('\\' === \var_20) {
            $var_9 = str_replace('\\\\Fixtures\\\\includes\\\\foo.php', '/Fixtures/includes/foo.php', $var_9);
        }
        $var_7->assertStringMatchesFormatFile(self::$var_1.'/php/services9_as_files.txt', $var_9);
    }

    public function fn_14()
    {
        $var_3 = include self::$var_1.'/containers/container19.php';
        $var_3->compile();
        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services19.php', $var_6->dump(), '->dump() dumps services with anonymous factories');
    }

    public function fn_15()
    {
        $var_32 = 'Symfony_DI_PhpDumper_Test_Unsupported_Characters';
        $var_3 = new class_1();
        $var_3->setParameter("'", 'oh-no');
        $var_3->register("foo*/oh-no", 'FooClass')->setPublic(true);
        $var_3->register('bar$', 'FooClass')->setPublic(true);
        $var_3->register('bar$!', 'FooClass')->setPublic(true);
        $var_3->compile();
        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_unsupported_characters.php', $var_6->dump(['class' => $var_32]));


        $var_7->assertTrue(method_exists($var_32, 'getFooOhNoService'));
        $var_7->assertTrue(method_exists($var_32, 'getBarService'));
        $var_7->assertTrue(method_exists($var_32, 'getBar2Service'));
    }

    public function fn_16()
    {
        $var_32 = 'Symfony_DI_PhpDumper_Test_Conflicting_Service_Ids';
        $var_3 = new class_1();
        $var_3->register('foo_bar', 'FooClass')->setPublic(true);
        $var_3->register('foobar', 'FooClass')->setPublic(true);
        $var_3->compile();
        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump(['class' => $var_32]));

        $var_7->assertTrue(method_exists($var_32, 'getFooBarService'));
        $var_7->assertTrue(method_exists($var_32, 'getFoobar2Service'));
    }

    public function fn_17()
    {
        $var_32 = 'Symfony_DI_PhpDumper_Test_Conflicting_Method_With_Parent';
        $var_3 = new class_1();
        $var_3->register('bar', 'FooClass')->setPublic(true);
        $var_3->register('foo_bar', 'FooClass')->setPublic(true);
        $var_3->compile();
        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump([
            'class' => $var_32,
            'base_class' => 'Symfony\Component\DependencyInjection\Tests\Fixtures\containers\CustomContainer',
        ]));

        $var_7->assertTrue(method_exists($var_32, 'getBar2Service'));
        $var_7->assertTrue(method_exists($var_32, 'getFoobar2Service'));
    }

    
    public function fn_18($var_34)
    {
        $var_3 = new class_1();
        $var_35 = new class_3('stdClass');
        $var_35->setPublic(true);
        $var_35->setFactory($var_34);
        $var_3->setDefinition('bar', $var_35);
        $var_3->compile();
        $var_6 = new class_2($var_3);
        $var_6->dump();
    }

    public function fn_19()
    {
        return [
            [['', 'method']],
            [['class', '']],
            [['...', 'method']],
            [['class', '...']],
        ];
    }

    public function fn_20()
    {
        $var_3 = include self::$var_1.'/containers/container9.php';
        $var_3->setParameter('foo_bar', 'foo_bar');
        $var_3->compile();
        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Aliases']));

        $var_3 = new \var_37();
        $var_38 = $var_3->get('foo');
        $var_7->assertSame($var_38, $var_3->get('alias_for_foo'));
        $var_7->assertSame($var_38, $var_3->get('alias_for_alias'));
    }

    public function fn_21()
    {
        $var_3 = new class_1();
        $var_3->compile();

        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Frozen_No_Aliases']));

        $var_3 = new \var_41();
        $var_7->assertFalse($var_3->has('foo'));
    }

    
    public function fn_22()
    {

        $var_3 = new \var_44();
        $var_3->get('decorator_service');
        $var_3->set('decorator_service', $var_46 = new \var_22());

        $var_7->assertSame($var_46, $var_3->get('decorator_service'), '->set() overrides an already defined service');
    }

    public function fn_23()
    {
        $var_3 = include self::$var_1.'/containers/container24.php';
        $var_3->compile();
        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services24.php', $var_6->dump());
    }

    public function fn_24()
    {
        $var_3 = include self::$var_1.'/containers/container_env_in_id.php';
        $var_3->compile();
        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_env_in_id.php', $var_6->dump());
    }

    public function fn_25()
    {
        $var_47 = mt_rand();
        putenv('Baz='.$var_47);
        $var_3 = new class_1();
        $var_48 = new class_8($var_3, new class_9(self::$var_1.'/yaml'));
        $var_48->load('services26.yml');
        $var_3->setParameter('env(json_file)', self::$var_1.'/array.json');
        $var_3->compile();
        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services26.php', $var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_EnvParameters', 'file' => self::$var_1.'/php/services26.php']));

        $var_3 = new \var_50();
        $var_7->assertSame($var_47, $var_3->getParameter('baz'));
        $var_7->assertSame([123, 'abc'], $var_3->getParameter('json'));
        $var_7->assertSame('sqlite:
        putenv('var_52');
    }

    public function fn_26()
    {
        $var_3 = new class_1();
        $var_3->setParameter('env(foo)', base64_encode('world'));
        $var_3->setParameter('hello', '%env(base64:foo)%');
        $var_3->compile(true);

        $var_53 = [
            'env(foo)' => 'd29ybGQ=',
            'hello' => 'world',
        ];
        $var_7->assertSame($var_53, $var_3->getParameterBag()->all());
    }

    public function fn_27()
    {
        $var_3 = new class_1();
        $var_3->setParameter('env(foo)', base64_encode('world'));
        $var_3->setParameter('hello', '%env(base64:foo)%');
        $var_3->compile();

        $var_6 = new class_2($var_3);
        $var_6->dump();

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_base64_env.php', $var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Base64Parameters']));

        $var_3 = new \var_56();
        $var_7->assertSame('world', $var_3->getParameter('hello'));
    }

    public function fn_28()
    {
        $var_3 = new class_1();
        $var_3->setParameter('env(foo)', str_rot13('world'));
        $var_3->setParameter('hello', '%env(rot13:foo)%');
        $var_3->register(var_57::var_32)->addTag('container.env_var_processor')->setPublic(true);
        $var_3->compile();

        $var_6 = new class_2($var_3);
        $var_6->dump();

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_rot13_env.php', $var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Rot13Parameters']));

        $var_3 = new \var_58();
        $var_7->assertSame('world', $var_3->getParameter('hello'));
    }

    public function fn_29()
    {
        $var_3 = new class_1();
        $var_3->setParameter('env(foo)', var_18);
        $var_3->setParameter('random', '%env(file:foo)%');
        $var_3->compile(true);

        $var_7->assertStringEqualsFile(var_18, $var_3->getParameter('random'));
    }

    
    public function fn_30()
    {
        $var_3 = new class_1();
        $var_3->getParameter('env(FOO)');
        $var_3->compile();
        $var_6 = new class_2($var_3);
        $var_6->dump();
    }

    
    public function fn_31()
    {
        $var_3 = new class_1();
        $var_3->setParameter('foo', '%bar%');
        $var_3->setParameter('bar', '%env(resolve:DUMMY_ENV_VAR)%');
        $var_3->compile();

        $var_6 = new class_2($var_3);
        $var_9 = $var_6->dump(['class' => $var_32 = var_59]);

        eval('?>'.$var_9);
        $var_3 = new $var_32();

        putenv('DUMMY_ENV_VAR=%foo%');
        try {
            $var_3->getParameter('bar');
        } finally {
            putenv('DUMMY_ENV_VAR');
        }
    }

    public function fn_32()
    {
        $var_3 = new class_1();
        $var_3->register('foo', 'stdClass')->addMethodCall('add', [new class_6('service_container')])->setPublic(false);
        $var_3->register('bar', 'stdClass')->addArgument(new class_6('foo'))->setPublic(true);
        $var_3->compile();

        $var_6 = new class_2($var_3);
        $var_7->assertStringEqualsFile(self::$var_1.'/php/services13.php', $var_6->dump(), '->dump() dumps inline definitions which reference service_container');
    }

    public function fn_33()
    {
        $var_3 = new class_1();
        $var_3->register('foo', 'stdClass')->setShared(false)->setLazy(true);
        $var_3->register('bar', 'stdClass')->addArgument(new class_6('foo', var_63\var_64\var_65\var_4::var_66, false));
        $var_3->compile();

        $var_6 = new class_2($var_3);
        $var_6->setProxyDumper(new \var_68());

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_non_shared_lazy.php', $var_6->dump());
    }

    public function fn_34()
    {

        $var_3 = new class_1();
        $var_3->register('foo', 'stdClass')->setPublic(true);
        $var_3->register('bar', 'MethodCallClass')
            ->setPublic(true)
            ->setProperty('simple', 'bar')
            ->setProperty('complex', new class_6('foo'))
            ->addMethodCall('callMe');
        $var_3->compile();

        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Properties_Before_Method_Calls']));

        $var_3 = new \var_70();
        $var_7->assertTrue($var_3->get('bar')->callPassed(), '->dump() initializes properties before method calls');
    }

    public function fn_35()
    {
        $var_3 = new class_1();
        $var_3->register('foo', 'stdClass')->addArgument(new class_6('bar'))->setPublic(true);
        $var_3->register('bar', 'stdClass')->setLazy(true)->addArgument(new class_6('foo'))->setPublic(true);
        $var_3->compile();

        $var_6 = new class_2($var_3);
        $var_6->setProxyDumper(new \var_68());
        $var_6->dump();

        $var_7->addToAssertionCount(1);

        $var_6 = new class_2($var_3);

        $var_73 = 'Circular reference detected for service "foo", path: "foo -> bar -> foo". Try running "composer require symfony/proxy-manager-bridge".';
        if (method_exists($var_7, 'expectException')) {
            $var_7->expectException(var_63\var_64\var_65\var_24\var_75::var_32);
            $var_7->expectExceptionMessage($var_73);
        } else {
            $var_7->setExpectedException(var_63\var_64\var_65\var_24\var_75::var_32, $var_73);
        }

        $var_6->dump();
    }

    public function fn_36()
    {
        $var_3 = new class_1();
        $var_3->register('foo', 'stdClass')->setLazy(true)->setPublic(true);
        $var_3->register('bar', 'stdClass')->setLazy(true)->setPublic(true);
        $var_3->compile();

        $var_6 = new class_2($var_3);
        $var_6->setProxyDumper(new \var_68());

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_dedup_lazy_proxy.php', $var_6->dump());
    }

    public function fn_37()
    {

        $var_3 = new class_1();
        $var_3->register('lazy_referenced', 'stdClass')->setPublic(true);
        $var_3
            ->register('lazy_context', 'LazyContext')
            ->setPublic(true)
            ->setArguments([
                new class_11(['k1' => new class_6('lazy_referenced'), 'k2' => new class_6('service_container')]),
                new class_11([]),
            ])
        ;
        $var_3->compile();

        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Lazy_Argument_Provide_Generator']));

        $var_3 = new \var_79();
        $var_80 = $var_3->get('lazy_context');

        $var_7->assertInstanceOf(var_63\var_64\var_65\var_81\var_82::var_32, $var_80->var_83);
        $var_7->assertInstanceOf(var_63\var_64\var_65\var_81\var_82::var_32, $var_80->var_84);
        $var_7->assertCount(2, $var_80->var_83);
        $var_7->assertCount(0, $var_80->var_84);

        $var_86 = -1;
        foreach ($var_80->var_83 as $var_87 => $var_88) {
            switch (++$var_86) {
                case 0:
                    $var_7->assertEquals('k1', $var_87);
                    $var_7->assertInstanceOf('stdCLass', $var_88);
                    break;
                case 1:
                    $var_7->assertEquals('k2', $var_87);
                    $var_7->assertInstanceOf('Symfony_DI_PhpDumper_Test_Lazy_Argument_Provide_Generator', $var_88);
                    break;
            }
        }

        $var_7->assertEmpty(iterator_to_array($var_80->var_84));
    }

    public function fn_38()
    {
        $var_3 = include self::$var_1.'/containers/container33.php';
        $var_3->compile();
        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services33.php', $var_6->dump());
    }

    public function fn_39()
    {
        $var_3 = new class_1();
        $var_3->register('foo_service', 'stdClass')->setArguments([new class_6('baz_service')])->setPublic(true);
        $var_3->register('bar_service', 'stdClass')->setArguments([new class_6('baz_service')])->setPublic(true);
        $var_3->register('baz_service', 'stdClass')->setPublic(false);
        $var_3->compile();

        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_private_frozen.php', $var_6->dump());
    }

    public function fn_40()
    {
        $var_3 = new class_1();
        $var_3->register('foo_service', var_63\var_64\var_65\var_90::var_32)
            ->setPublic(true)
            ->addArgument([
                'bar' => new class_12(new class_6('bar_service')),
                'baz' => new class_12(new class_13('baz_service', 'stdClass')),
                'nil' => $var_91 = new class_12(new class_6('nil')),
            ])
        ;

        
        $var_3->register('translator.loader_1', 'stdClass')->setPublic(true);
        $var_3->register('translator.loader_1_locator', var_63\var_64\var_65\var_90::var_32)
            ->setPublic(false)
            ->addArgument([
                'translator.loader_1' => new class_12(new class_6('translator.loader_1')),
            ]);
        $var_3->register('translator_1', var_63\var_64\var_65\var_92\var_93\var_94::var_32)
            ->setPublic(true)
            ->addArgument(new class_6('translator.loader_1_locator'));

        
        $var_3->register('translator.loader_2', 'stdClass')->setPublic(true);
        $var_3->register('translator.loader_2_locator', var_63\var_64\var_65\var_90::var_32)
            ->setPublic(false)
            ->addArgument([
                'translator.loader_2' => new class_12(new class_6('translator.loader_2')),
            ]);
        $var_3->register('translator_2', var_63\var_64\var_65\var_92\var_93\var_94::var_32)
            ->setPublic(true)
            ->addArgument(new class_6('translator.loader_2_locator'))
            ->addMethodCall('addResource', ['db', new class_6('translator.loader_2'), 'nl']);

        
        $var_3->register('translator.loader_3', 'stdClass')->setPublic(true);
        $var_3->register('translator.loader_3_locator', var_63\var_64\var_65\var_90::var_32)
            ->setPublic(false)
            ->addArgument([
                'translator.loader_3' => new class_12(new class_6('translator.loader_3')),
            ]);
        $var_3->register('translator_3', var_63\var_64\var_65\var_92\var_93\var_94::var_32)
            ->setPublic(true)
            ->addArgument(new class_6('translator.loader_3_locator'))
            ->addMethodCall('addResource', ['db', new class_6('translator.loader_3'), 'nl'])
            ->addMethodCall('addResource', ['db', new class_6('translator.loader_3'), 'en']);

        $var_91->setValues([null]);
        $var_3->register('bar_service', 'stdClass')->setArguments([new class_6('baz_service')])->setPublic(true);
        $var_3->register('baz_service', 'stdClass')->setPublic(false);
        $var_3->compile();

        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_locator.php', $var_6->dump());
    }

    public function fn_41()
    {
        $var_3 = new class_1();
        $var_3->register('foo_service', var_63\var_64\var_65\var_92\var_93\var_96::var_32)
            ->setPublic(true)
            ->setAutowired(true)
            ->addArgument(new class_6(var_98\var_99\var_100::var_32))
            ->addTag('container.service_subscriber', [
                'key' => 'bar',
                'id' => var_63\var_64\var_65\var_92\var_93\var_96::var_32,
            ])
        ;
        $var_3->register(var_63\var_64\var_65\var_92\var_93\var_96::var_32, var_63\var_64\var_65\var_92\var_93\var_96::var_32)->setPublic(true);

        $var_3->register(var_63\var_64\var_65\var_92\var_93\var_101::var_32, var_63\var_64\var_65\var_92\var_93\var_101::var_32)
            ->setPublic(false);
        $var_3->compile();

        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_subscriber.php', $var_6->dump());
    }

    public function fn_42()
    {

        $var_3 = new class_1();
        $var_3->register('not_invalid', 'BazClass')
            ->setPublic(false);
        $var_3->register('bar', 'BarClass')
            ->setPublic(true)
            ->addMethodCall('setBaz', [new class_6('not_invalid', var_63\var_64\var_65\var_100::var_102)]);
        $var_3->compile();

        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Private_With_Ignore_On_Invalid_Reference']));

        $var_3 = new \var_103();
        $var_7->assertInstanceOf('BazClass', $var_3->get('bar')->getBaz());
    }

    public function fn_43()
    {
        $var_3 = new class_1();
        $var_3->setParameter('array_1', [123]);
        $var_3->setParameter('array_2', [var_2]);
        $var_3->register('bar', 'BarClass')
            ->setPublic(true)
            ->addMethodCall('setBaz', ['%array_1%', '%array_2%', '%%array_1%%', [123]]);
        $var_3->compile();

        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_array_params.php', str_replace('\\\\Dumper', '/Dumper', $var_6->dump(['file' => self::$var_1.'/php/services_array_params.php'])));
    }

    public function fn_44()
    {
        $var_3 = new class_1();
        $var_3->register('private_bar', 'stdClass')
            ->setPublic(false);
        $var_3->register('private_foo', 'stdClass')
            ->setPublic(false);
        $var_3->register('public_foo', 'stdClass')
            ->setPublic(true)
            ->addArgument(new class_5('service("private_foo").bar'));

        $var_3->compile();
        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_private_in_expression.php', $var_6->dump());
    }

    public function fn_45()
    {
        $var_3 = include self::$var_1.'/containers/container_uninitialized_ref.php';
        $var_3->compile();
        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_uninitialized_ref.php', $var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Uninitialized_Reference']));


        $var_3 = new \var_105();

        $var_106 = $var_3->get('bar');

        $var_7->assertNull($var_106->var_108);
        $var_7->assertNull($var_106->var_109);
        $var_7->assertNull($var_106->var_110);
        $var_7->assertNull($var_106->closures[0]());
        $var_7->assertNull($var_106->closures[1]());
        $var_7->assertNull($var_106->closures[2]());
        $var_7->assertSame([], iterator_to_array($var_106->var_111));

        $var_3 = new \var_105();

        $var_3->get('foo1');
        $var_3->get('baz');

        $var_106 = $var_3->get('bar');

        $var_7->assertEquals(new \var_22(), $var_106->var_108);
        $var_7->assertNull($var_106->var_109);
        $var_7->assertEquals(new \var_22(), $var_106->var_110);
        $var_7->assertEquals(new \var_22(), $var_106->closures[0]());
        $var_7->assertNull($var_106->closures[1]());
        $var_7->assertEquals(new \var_22(), $var_106->closures[2]());
        $var_7->assertEquals(['foo1' => new \var_22(), 'foo3' => new \var_22()], iterator_to_array($var_106->var_111));
    }

    
    public function fn_46($var_112)
    {
        $var_3 = include self::$var_1.'/containers/container_almost_circular.php';
        $var_3->compile();
        $var_6 = new class_2($var_3);

        $var_3 = 'Symfony_DI_PhpDumper_Test_Almost_Circular_'.ucfirst($var_112);
        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_almost_circular_'.$var_112.'.php', $var_6->dump(['class' => $var_3]));


        $var_3 = new $var_3();

        $var_38 = $var_3->get('foo');
        $var_7->assertSame($var_38, $var_38->var_106->var_113->var_38);

        $var_109 = $var_3->get('foo2');
        $var_7->assertSame($var_109, $var_109->var_106->var_113->var_38);

        $var_7->assertSame([], (array) $var_3->get('foobar4'));

        $var_114 = $var_3->get('foo5');
        $var_7->assertSame($var_114, $var_114->var_106->var_38);

        $var_115 = $var_3->get('manager');
        $var_7->assertEquals(new \var_22(), $var_115);

        $var_115 = $var_3->get('manager2');
        $var_7->assertEquals(new \var_22(), $var_115);

        $var_116 = $var_3->get('foo6');
        $var_7->assertEquals((object) ['bar6' => (object) []], $var_116);

        $var_7->assertInstanceOf(\var_22::var_32, $var_3->get('root'));
    }

    public function fn_47()
    {
        yield ['public'];
        yield ['private'];
    }

    public function fn_48()
    {
        $var_3 = new class_1();

        $var_48 = new class_8($var_3, new class_9(self::$var_1.'/yaml'));
        $var_48->load('services_deep_graph.yml');

        $var_3->compile();

        $var_6 = new class_2($var_3);
        $var_6->dump();

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_deep_graph.php', $var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Deep_Graph']));


        $var_3 = new \var_117();

        $var_7->assertInstanceOf(var_118::var_32, $var_3->get('foo'));
        $var_7->assertEquals((object) ['p2' => (object) ['p3' => (object) []]], $var_3->get('foo')->var_119);
    }

    public function fn_49()
    {
        $var_3 = new class_1();

        $var_106 = (new class_3('App\Bar'))
            ->setProperty('foo', new class_6('App\Foo'));

        $var_120 = (new class_3('App\Baz'))
            ->setProperty('bar', $var_106)
            ->addArgument($var_106);

        $var_3->register('App\Foo')
            ->setPublic(true)
            ->addArgument($var_120);

        $var_121 = $var_3->getCompiler()->getPassConfig();
        $var_3->compile();

        $var_6 = new class_2($var_3);
        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_inline_self_ref.php', $var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Inline_Self_Ref']));
    }

    public function fn_50()
    {
        $var_3 = include self::$var_1.'/containers/container_inline_requires.php';
        $var_3->setParameter('inline_requires', true);
        $var_3->compile();
        $var_6 = new class_2($var_3);

        $var_9 = $var_6->dump(['hot_path_tag' => 'container.hot_path', 'inline_class_loader_parameter' => 'inline_requires', 'file' => self::$var_1.'/php/services_inline_requires.php']);
        if ('\\' === \var_20) {
            $var_9 = str_replace("'\\\\includes\\\\HotPath\\\\", "'/includes/HotPath/", $var_9);
        }

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_inline_requires.php', $var_9);
    }

    public function fn_51()
    {
        $var_3 = new class_1();
        $var_3->register('foo', '\\stdClass')->setPublic(true);
        $var_3->compile();

        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Literal_Class_With_Root_Namespace']));

        $var_3 = new \var_124();

        $var_7->assertInstanceOf('stdClass', $var_3->get('foo'));
    }

    public function fn_52()
    {
        $var_3 = new class_1(new class_4([
            'class' => 'stdClass',
        ]));

        $var_3->setDefinition('foo', new class_3(new class_15('class')));
        $var_3->setDefinition('bar', new class_3('stdClass', [
            new class_6('foo'),
        ]))->setPublic(true);

        $var_3->setParameter('inline_requires', true);
        $var_3->compile();

        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump([
            'class' => 'Symfony_DI_PhpDumper_Test_Object_Class_Name',
            'inline_class_loader_parameter' => 'inline_requires',
        ]));

        $var_3 = new \var_125();

        $var_7->assertInstanceOf('stdClass', $var_3->get('bar'));
    }

    public function fn_53()
    {
        $var_3 = new class_1();
        $var_3->register('foo', 'stdClass')->setPublic(true)->setSynthetic(true);
        $var_3->register('bar', 'stdClass')->setPublic(true)->setShared(false)
            ->setProperty('foo', new class_6('foo', var_63\var_64\var_65\var_4::var_127));

        $var_3->compile();

        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump([
            'class' => 'Symfony_DI_PhpDumper_Test_UninitializedSyntheticReference',
            'inline_class_loader_parameter' => 'inline_requires',
        ]));

        $var_3 = new \var_128();

        $var_7->assertEquals((object) ['foo' => null], $var_3->get('bar'));

        $var_3->set('foo', (object) [123]);
        $var_7->assertEquals((object) ['foo' => (object) [123]], $var_3->get('bar'));
    }

    public function fn_54()
    {
        $var_3 = new class_1();
        $var_48 = new class_8($var_3, new class_9(self::$var_1.'/yaml'));
        $var_48->load('services_adawson.yml');
        $var_3->compile();

        $var_6 = new class_2($var_3);
        $var_9 = $var_6->dump();
        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_adawson.php', $var_6->dump());
    }

    
    public function fn_55()
    {
        $var_3 = new class_1();
        $var_48 = new class_8($var_3, new class_9(self::$var_1.'/yaml'));
        $var_48->load('services_legacy_privates.yml');

        $var_3->setDefinition('private_child', new class_16('foo'));
        $var_3->setDefinition('private_parent', new class_16('private'));

        $var_3->getDefinition('private')->setPrivate(true);
        $var_3->getDefinition('private_not_inlined')->setPrivate(true);
        $var_3->getDefinition('private_not_removed')->setPrivate(true);
        $var_3->getDefinition('decorated_private')->setPrivate(true);
        $var_3->getDefinition('private_child')->setPrivate(true);
        $var_3->getAlias('decorated_private_alias')->setPrivate(true);
        $var_3->getAlias('private_alias')->setPrivate(true);

        $var_3->compile();
        $var_6 = new class_2($var_3);

        $var_7->assertStringEqualsFile(self::$var_1.'/php/services_legacy_privates.php', $var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Legacy_Privates', 'file' => self::$var_1.'/php/services_legacy_privates.php']));


        $var_3 = new \var_131();

        $var_3->get('private');
        $var_3->get('private_alias');
        $var_3->get('alias_to_private');
        $var_3->get('decorated_private');
        $var_3->get('decorated_private_alias');
        $var_3->get('private_not_inlined');
        $var_3->get('private_not_removed');
        $var_3->get('private_child');
        $var_3->get('private_parent');
        $var_3->get('public_child');
    }

    
    public function fn_56()
    {
        $var_3 = new class_1();
        $var_3->register('foo', 'stdClass')
            ->setPublic(false)
            ->setDeprecated(true);
        $var_3->register('bar', 'stdClass')
            ->setPublic(true)
            ->setProperty('foo', new class_6('foo'));

        $var_3->compile();

        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Private_Service_Triggers_Deprecation']));

        $var_3 = new \var_133();

        $var_3->get('bar');
    }

    
    public function fn_57()
    {
        $var_3 = new class_1(new class_4(['Foo' => 'bar', 'BAR' => 'foo']));
        $var_3->compile();

        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Parameter_With_Mixed_Case']));

        $var_3 = new \var_134();

        $var_7->assertSame('bar', $var_3->getParameter('foo'));
        $var_7->assertSame('bar', $var_3->getParameter('FOO'));
        $var_7->assertSame('foo', $var_3->getParameter('bar'));
        $var_7->assertSame('foo', $var_3->getParameter('BAR'));
    }

    
    public function fn_58()
    {
        $var_3 = new class_1(new class_4(['foo' => 'bar']));
        $var_3->compile();

        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Parameter_With_Lower_Case']));

        $var_3 = new \var_135();

        $var_7->assertSame('bar', $var_3->getParameter('FOO'));
    }

    
    public function fn_59()
    {
        $var_3 = new class_1();
        $var_3->register('Bar', 'stdClass')->setProperty('foo', new class_6('foo'))->setPublic(true);
        $var_3->register('Foo', 'stdClass')->setDeprecated();
        $var_3->compile();

        $var_6 = new class_2($var_3);
        eval('?>'.$var_6->dump(['class' => 'Symfony_DI_PhpDumper_Test_Reference_With_Lower_Case_Id']));

        $var_3 = new \var_136();

        $var_7->assertEquals((object) ['foo' => (object) []], $var_3->get('Bar'));
    }
}

class class_10 implements var_137
{
    public function fn_60($var_139, $var_140, \var_141 $var_138)
    {
        return str_rot13($var_138($var_140));
    }

    public static function fn_61()
    {
        return ['rot13' => 'string'];
    }
}

class class_14
{
    public $var_119;

    public function fn_62(\var_22 $var_142, \var_22 $var_143)
    {
        
        $var_7->var_119 = clone $var_143;
    }
}
