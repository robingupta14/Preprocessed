<?php






class class_0 extends var_0
{
    public function fn_0()
    {
        $var_1 = new class_1();

        $var_3->assertCount(1, $var_1->getDefinitions());
        $var_3->assertTrue($var_1->hasDefinition('service_container'));

        $var_8 = $var_1->getDefinition('service_container');
        $var_3->assertInstanceOf(var_11\var_12\var_13\var_14::var_15, $var_8);
        $var_3->assertTrue($var_8->isSynthetic());
        $var_3->assertSame(var_11\var_12\var_13\var_18::var_15, $var_8->getClass());
        $var_3->assertTrue($var_1->hasAlias(var_21\var_22\var_11\var_12\var_13\var_18::var_15));
        $var_3->assertTrue($var_1->hasAlias(var_11\var_12\var_13\var_18::var_15));
    }

    public function fn_1()
    {
        $var_1 = new class_1();
        $var_23 = [
            'foo' => new class_2('Bar\FooClass'),
            'bar' => new class_2('BarClass'),
        ];
        $var_1->setDefinitions($var_23);
        $var_3->assertEquals($var_23, $var_1->getDefinitions(), '->setDefinitions() sets the service definitions');
        $var_3->assertTrue($var_1->hasDefinition('foo'), '->hasDefinition() returns true if a service definition exists');
        $var_3->assertFalse($var_1->hasDefinition('foobar'), '->hasDefinition() returns false if a service definition does not exist');

        $var_1->setDefinition('foobar', $var_28 = new class_2('FooBarClass'));
        $var_3->assertEquals($var_28, $var_1->getDefinition('foobar'), '->getDefinition() returns a service definition if defined');
        $var_3->assertSame($var_1->setDefinition('foobar', $var_28 = new class_2('FooBarClass')), $var_28, '->setDefinition() implements a fluid interface by returning the service reference');

        $var_1->addDefinitions($var_30 = ['foobar' => new class_2('FooBarClass')]);
        $var_3->assertEquals(array_merge($var_23, $var_30), $var_1->getDefinitions(), '->addDefinitions() adds the service definitions');

        try {
            $var_1->getDefinition('baz');
            $var_3->fail('->getDefinition() throws a ServiceNotFoundException if the service definition does not exist');
        } catch (var_32 $var_33) {}
    }

    
    public function fn_2()
    {
        $var_8 = new class_2('stdClass');
        $var_8->setDeprecated(true);

        $var_1 = new class_1();
        $var_1->setDefinition('deprecated_foo', $var_8);
        $var_1->get('deprecated_foo');
    }

    public function fn_3()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'Bar\FooClass');
        $var_3->assertTrue($var_1->hasDefinition('foo'), '->register() registers a new service definition');
        $var_3->assertInstanceOf('Symfony\Component\DependencyInjection\Definition', $var_1->getDefinition('foo'), '->register() returns the newly created Definition instance');
    }

    public function fn_4()
    {
        $var_1 = new class_1();
        $var_1->autowire('foo', 'Bar\FooClass');

        $var_3->assertTrue($var_1->hasDefinition('foo'), '->autowire() registers a new service definition');
        $var_3->assertTrue($var_1->getDefinition('foo')->isAutowired(), '->autowire() creates autowired definitions');
    }

    public function fn_5()
    {
        $var_1 = new class_1();
        $var_3->assertFalse($var_1->has('foo'), '->has() returns false if the service does not exist');
        $var_1->register('foo', 'Bar\FooClass');
        $var_3->assertTrue($var_1->has('foo'), '->has() returns true if a service definition exists');
        $var_1->set('bar', new \var_41());
        $var_3->assertTrue($var_1->has('bar'), '->has() returns true if a service exists');
    }

    
    public function fn_6()
    {
        $var_1 = new class_1();
        $var_1->get('foo');
    }

    public function fn_7()
    {
        $var_1 = new class_1();

        $var_3->assertNull($var_1->get('foo', var_11\var_12\var_13\var_18::var_43), '->get() returns null if the service does not exist and NULL_ON_INVALID_REFERENCE is passed as a second argument');
    }

    
    public function fn_8()
    {
        $var_1 = new class_1();
        $var_1->register('baz', 'stdClass')->setArguments([new class_3('baz')]);
        $var_1->get('baz');
    }

    public function fn_9()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass');

        $var_3->assertTrue($var_1->get('bar') === $var_1->get('bar'), '->get() always returns the same instance if the service is shared');
    }

    public function fn_10()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'stdClass');

        $var_3->assertInternalType('object', $var_1->get('foo'), '->get() returns the service definition associated with the id');
    }

    public function fn_11()
    {
        $var_1 = new class_1();
        $var_1->set('bar', $var_46 = new \var_41());

        $var_3->assertSame($var_46, $var_1->get('bar'), '->get() returns the service associated with the id');
    }

    public function fn_12()
    {
        $var_1 = new class_1();
        $var_1->set('bar', $var_46 = new \var_41());
        $var_1->register('bar', 'stdClass');

        $var_3->assertSame($var_46, $var_1->get('bar'), '->get() returns the service associated with the id even if a definition has been defined');
    }

    public function fn_13()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass')->setShared(false);

        $var_3->assertNotSame($var_1->get('bar'), $var_1->get('bar'));
    }

    
    public function fn_14($var_49)
    {
        $var_1 = new class_1();
        $var_1->setAlias($var_49, 'foo');
    }

    
    public function fn_15($var_49)
    {
        $var_1 = new class_1();
        $var_1->setDefinition($var_49, new class_2('Foo'));
    }

    public function fn_16()
    {
        return [
            [''],
            ["\0"],
            ["\r"],
            ["\n"],
            ["'"],
            ['ab\\'],
        ];
    }

    
    public function fn_17()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'stdClass')->setSynthetic(true);

        
        try {
            $var_1->get('foo');
        } catch (var_52 $var_33) {}

        
        $var_1->get('foo');
    }

    public function fn_18()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'stdClass');
        $var_1->var_46 = $var_46 = new \var_41();
        $var_1->register('bar', 'stdClass');
        $var_3->assertEquals(
            [
                'service_container',
                'foo',
                'bar',
                'Psr\Container\ContainerInterface',
                'Symfony\Component\DependencyInjection\ContainerInterface',
            ],
            $var_1->getServiceIds(),
            '->getServiceIds() returns all defined service ids'
        );
    }

    public function fn_19()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'stdClass');
        $var_1->setAlias('bar', 'foo');
        $var_3->assertTrue($var_1->hasAlias('bar'), '->hasAlias() returns true if the alias exists');
        $var_3->assertFalse($var_1->hasAlias('foobar'), '->hasAlias() returns false if the alias does not exist');
        $var_3->assertEquals('foo', (string) $var_1->getAlias('bar'), '->getAlias() returns the aliased service');
        $var_3->assertTrue($var_1->has('bar'), '->setAlias() defines a new service');
        $var_3->assertSame($var_1->get('bar'), $var_1->get('foo'), '->setAlias() creates a service that is an alias to another one');

        try {
            $var_1->setAlias('foobar', 'foobar');
            $var_3->fail('->setAlias() throws an InvalidArgumentException if the alias references itself');
        } catch (\var_55 $var_33) {
            $var_3->assertEquals('An alias can not reference itself, got a circular reference on "foobar".', $var_33->getMessage(), '->setAlias() throws an InvalidArgumentException if the alias references itself');
        }

        try {
            $var_1->getAlias('foobar');
            $var_3->fail('->getAlias() throws an InvalidArgumentException if the alias does not exist');
        } catch (\var_55 $var_33) {
            $var_3->assertEquals('The service alias "foobar" does not exist.', $var_33->getMessage(), '->getAlias() throws an InvalidArgumentException if the alias does not exist');
        }
    }

    public function fn_20()
    {
        $var_1 = new class_1();
        $var_1->setAlias('bar', 'foo');
        $var_1->setAlias('foobar', 'foo');
        $var_1->setAlias('moo', new class_4('foo', false));

        $var_57 = $var_1->getAliases();
        $var_3->assertEquals('foo', (string) $var_57['bar']);
        $var_3->assertTrue($var_57['bar']->isPublic());
        $var_3->assertEquals('foo', (string) $var_57['foobar']);
        $var_3->assertEquals('foo', (string) $var_57['moo']);
        $var_3->assertFalse($var_57['moo']->isPublic());

        $var_1->register('bar', 'stdClass');
        $var_3->assertFalse($var_1->hasAlias('bar'));

        $var_1->set('foobar', 'stdClass');
        $var_1->set('moo', 'stdClass');
        $var_3->assertCount(2, $var_1->getAliases(), '->getAliases() does not return aliased services that have been overridden');
    }

    public function fn_21()
    {
        $var_1 = new class_1();
        $var_1->setAliases(['bar' => 'foo', 'foobar' => 'foo']);

        $var_57 = $var_1->getAliases();
        $var_3->assertArrayHasKey('bar', $var_57);
        $var_3->assertArrayHasKey('foobar', $var_57);
    }

    public function fn_22()
    {
        $var_1 = new class_1();
        $var_1->setAliases(['bar' => 'foo']);
        $var_1->addAliases(['foobar' => 'foo']);

        $var_57 = $var_1->getAliases();
        $var_3->assertArrayHasKey('bar', $var_57);
        $var_3->assertArrayHasKey('foobar', $var_57);
    }

    public function fn_23()
    {
        $var_1 = new class_1();
        $var_1->setAlias('alias', 'aliased');
        $var_1->set('aliased', new \var_41());

        $var_1->set('alias', $var_28 = new \var_41());
        $var_3->assertSame($var_28, $var_1->get('alias'), '->set() replaces an existing alias');
    }

    public function fn_24()
    {
        $var_1 = new class_1();

        $var_63 = new class_2('stdClass');
        $var_63->addMethodCall('setBar', [new class_3('bar', var_11\var_12\var_13\var_18::var_65)]);
        $var_1->setDefinition('aliased', $var_63);
        $var_1->setAlias('alias', 'aliased');

        $var_3->assertEquals(new \var_41(), $var_1->get('alias'));
    }

    public function fn_25()
    {
        $var_1 = new class_1();
        $var_1->setResourceTracking(false);
        $var_67 = $var_1->getCompiler()->getPassConfig()->getPasses();
        $var_1->addCompilerPass($var_72 = $var_3->getMockBuilder('Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface')->getMock(), var_11\var_12\var_13\var_75\var_76::var_77, -5);
        $var_1->addCompilerPass($var_78 = $var_3->getMockBuilder('Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface')->getMock(), var_11\var_12\var_13\var_75\var_76::var_77, 10);

        $var_79 = $var_1->getCompiler()->getPassConfig()->getPasses();
        $var_3->assertCount(\var_80($var_79) - 2, $var_67);
        
        $var_3->assertTrue(array_search($var_72, $var_79, true) > array_search($var_78, $var_79, true));
    }

    public function fn_26()
    {
        $var_1 = new class_1();
        $var_1->register('foo1', 'Bar\FooClass')->setFile(var_82.'/Fixtures/includes/foo.php');
        $var_1->register('foo2', 'Bar\FooClass')->setFile(var_82.'/Fixtures/includes/%file%.php');
        $var_1->setParameter('file', 'foo');
        $var_3->assertInstanceOf('\Bar\FooClass', $var_1->get('foo1'), '->createService() requires the file defined by the service definition');
        $var_3->assertInstanceOf('\Bar\FooClass', $var_1->get('foo2'), '->createService() replaces parameters in the file provided by the service definition');
    }

    public function fn_27()
    {
        $var_1 = new class_1();

        $var_1->register('foo1', 'Bar\FooClass')->setFile(var_82.'/Fixtures/includes/foo.php');
        $var_1->getDefinition('foo1')->setLazy(true);

        $var_85 = $var_1->get('foo1');

        $var_3->assertSame($var_85, $var_1->get('foo1'), 'The same proxy is retrieved on multiple subsequent calls');
        $var_3->assertSame('Bar\FooClass', \var_86($var_85));
    }

    public function fn_28()
    {
        $var_1 = new class_1();
        $var_1->register('foo1', '%class%');
        $var_1->setParameter('class', 'stdClass');
        $var_3->assertInstanceOf('\stdClass', $var_1->get('foo1'), '->createService() replaces parameters in the class provided by the service definition');
    }

    public function fn_29()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass');
        $var_1->register('foo1', 'Bar\FooClass')->addArgument(['foo' => '%value%', '%value%' => 'foo', new class_3('bar'), '%%unescape_it%%']);
        $var_1->setParameter('value', 'bar');
        $var_3->assertEquals(['foo' => 'bar', 'bar' => 'foo', $var_1->get('bar'), '%unescape_it%'], $var_1->get('foo1')->var_88, '->createService() replaces parameters and service references in the arguments provided by the service definition');
    }

    public function fn_30()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'Bar\FooClass')->setFactory('Bar\FooClass::getInstance');
        $var_1->register('qux', 'Bar\FooClass')->setFactory(['Bar\FooClass', 'getInstance']);
        $var_1->register('bar', 'Bar\FooClass')->setFactory([new class_2('Bar\FooClass'), 'getInstance']);
        $var_1->register('baz', 'Bar\FooClass')->setFactory([new class_3('bar'), 'getInstance']);

        $var_3->assertTrue($var_1->get('foo')->var_90, '->createService() calls the factory method to create the service instance');
        $var_3->assertTrue($var_1->get('qux')->var_90, '->createService() calls the factory method to create the service instance');
        $var_3->assertTrue($var_1->get('bar')->var_90, '->createService() uses anonymous service as factory');
        $var_3->assertTrue($var_1->get('baz')->var_90, '->createService() uses another service as factory');
    }

    public function fn_31()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass');
        $var_1->register('foo1', 'Bar\FooClass')->addMethodCall('setBar', [['%value%', new class_3('bar')]]);
        $var_1->setParameter('value', 'bar');
        $var_3->assertEquals(['bar', $var_1->get('bar')], $var_1->get('foo1')->var_46, '->createService() replaces the values in the method calls arguments');
    }

    public function fn_32()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass');
        $var_1->register('foo1', 'Bar\FooClass')->addMethodCall('setBar', [['%%unescape_it%%']]);
        $var_1->setParameter('value', 'bar');
        $var_3->assertEquals(['%unescape_it%'], $var_1->get('foo1')->var_46, '->createService() replaces the values in the method calls arguments');
    }

    public function fn_33()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass');
        $var_1->register('foo1', 'Bar\FooClass')->setProperty('bar', ['%value%', new class_3('bar'), '%%unescape_it%%']);
        $var_1->setParameter('value', 'bar');
        $var_3->assertEquals(['bar', $var_1->get('bar'), '%unescape_it%'], $var_1->get('foo1')->var_46, '->createService() replaces the values in the properties');
    }

    public function fn_34()
    {
        $var_1 = new class_1();
        $var_1->register('foo1', 'Bar\FooClass')->setConfigurator('sc_configure');
        $var_1->register('foo2', 'Bar\FooClass')->setConfigurator(['%class%', 'configureStatic']);
        $var_1->setParameter('class', 'BazClass');
        $var_1->register('baz', 'BazClass');
        $var_1->register('foo3', 'Bar\FooClass')->setConfigurator([new class_3('baz'), 'configure']);
        $var_1->register('foo4', 'Bar\FooClass')->setConfigurator([$var_1->getDefinition('baz'), 'configure']);
        $var_1->register('foo5', 'Bar\FooClass')->setConfigurator('foo');

        $var_3->assertTrue($var_1->get('foo1')->var_93, '->createService() calls the configurator');
        $var_3->assertTrue($var_1->get('foo2')->var_93, '->createService() calls the configurator');
        $var_3->assertTrue($var_1->get('foo3')->var_93, '->createService() calls the configurator');
        $var_3->assertTrue($var_1->get('foo4')->var_93, '->createService() calls the configurator');

        try {
            $var_1->get('foo5');
            $var_3->fail('->createService() throws an InvalidArgumentException if the configure callable is not a valid callable');
        } catch (\var_55 $var_33) {
            $var_3->assertEquals('The configure callable for class "Bar\FooClass" is not a callable.', $var_33->getMessage(), '->createService() throws an InvalidArgumentException if the configure callable is not a valid callable');
        }
    }

    public function fn_35()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass');
        $var_1
            ->register('lazy_context', 'LazyContext')
            ->setArguments([
                new class_5(['k1' => new class_3('bar'), new class_3('invalid', var_11\var_12\var_13\var_18::var_65)]),
                new class_5([]),
            ])
        ;

        $var_94 = $var_1->get('lazy_context');
        $var_3->assertInstanceOf(var_11\var_12\var_13\var_95\var_96::var_15, $var_94->var_97);
        $var_3->assertInstanceOf(var_11\var_12\var_13\var_95\var_96::var_15, $var_94->var_98);
        $var_3->assertCount(1, $var_94->var_97);
        $var_3->assertCount(0, $var_94->var_98);

        $var_99 = 0;
        foreach ($var_94->var_97 as $var_100 => $var_101) {
            ++$var_99;
            $var_3->assertEquals('k1', $var_100);
            $var_3->assertInstanceOf('\stdClass', $var_101);
        }

        
        $var_3->assertEquals(1, $var_99);

        $var_99 = 0;
        foreach ($var_94->var_98 as $var_100 => $var_101) {
            ++$var_99;
        }

        $var_3->assertEquals(0, $var_99);
    }

    
    public function fn_36()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'Bar\FooClass')->setSynthetic(true);
        $var_1->get('foo');
    }

    public function fn_37()
    {
        $var_1 = new class_1();
        $var_1->setParameter('bar', 'bar');
        $var_1->register('bar', 'BarClass');
        $var_1->register('foo', 'Bar\FooClass')->addArgument(['foo' => new class_6('service("bar").foo ~ parameter("bar")')]);
        $var_3->assertEquals('foobar', $var_1->get('foo')->var_88['foo']);
    }

    public function fn_38()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'Bar\FooClass');
        $var_3->assertEquals($var_1->get('foo'), $var_1->resolveServices(new class_3('foo')), '->resolveServices() resolves service references to service instances');
        $var_3->assertEquals(['foo' => ['foo', $var_1->get('foo')]], $var_1->resolveServices(['foo' => ['foo', new class_3('foo')]]), '->resolveServices() resolves service references to service instances in nested arrays');
        $var_3->assertEquals($var_1->get('foo'), $var_1->resolveServices(new class_6('service("foo")')), '->resolveServices() resolves expressions');
    }

    
    public function fn_39()
    {
        $var_1 = new class_1();
        $var_1->setDefinition('grandpa', new class_2('stdClass'));
        $var_1->setDefinition('parent', new class_7('grandpa'));
        $var_1->setDefinition('foo', new class_7('parent'));

        $var_1->get('foo');
    }

    public function fn_40()
    {
        $var_1 = new class_1();
        $var_1->setDefinition('foo', new class_8('stdClass'));

        $var_3->assertInstanceOf('stdClass', $var_1->get('foo'));
    }

    public function fn_41()
    {
        $var_103 = new class_1(new class_9(['bar' => 'foo']));
        $var_103->setResourceTracking(false);
        $var_104 = new class_1(new class_9(['foo' => 'bar']));
        $var_103->merge($var_104);
        $var_3->assertEquals(['bar' => 'foo', 'foo' => 'bar'], $var_103->getParameterBag()->all(), '->merge() merges current parameters with the loaded ones');

        $var_103 = new class_1(new class_9(['bar' => 'foo']));
        $var_103->setResourceTracking(false);
        $var_104 = new class_1(new class_9(['foo' => '%bar%']));
        $var_103->merge($var_104);
        $var_103->compile();
        $var_3->assertEquals(['bar' => 'foo', 'foo' => 'foo'], $var_103->getParameterBag()->all(), '->merge() evaluates the values of the parameters towards already defined ones');

        $var_103 = new class_1(new class_9(['bar' => 'foo']));
        $var_103->setResourceTracking(false);
        $var_104 = new class_1(new class_9(['foo' => '%bar%', 'baz' => '%foo%']));
        $var_103->merge($var_104);
        $var_103->compile();
        $var_3->assertEquals(['bar' => 'foo', 'foo' => 'foo', 'baz' => 'foo'], $var_103->getParameterBag()->all(), '->merge() evaluates the values of the parameters towards already defined ones');

        $var_103 = new class_1();
        $var_103->setResourceTracking(false);
        $var_103->register('foo', 'Bar\FooClass');
        $var_103->register('bar', 'BarClass');
        $var_104 = new class_1();
        $var_104->setDefinition('baz', new class_2('BazClass'));
        $var_104->setAlias('alias_for_foo', 'foo');
        $var_103->merge($var_104);
        $var_3->assertEquals(['service_container', 'foo', 'bar', 'baz'], array_keys($var_103->getDefinitions()), '->merge() merges definitions already defined ones');

        $var_57 = $var_103->getAliases();
        $var_3->assertArrayHasKey('alias_for_foo', $var_57);
        $var_3->assertEquals('foo', (string) $var_57['alias_for_foo']);

        $var_103 = new class_1();
        $var_103->setResourceTracking(false);
        $var_103->register('foo', 'Bar\FooClass');
        $var_104->setDefinition('foo', new class_2('BazClass'));
        $var_103->merge($var_104);
        $var_3->assertEquals('BazClass', $var_103->getDefinition('foo')->getClass(), '->merge() overrides already defined services');

        $var_103 = new class_1();
        $var_109 = new class_10();
        $var_109->get('env(Foo)');
        $var_104 = new class_1($var_109);
        $var_3->assertSame(['%env(Bar)%'], $var_104->resolveEnvPlaceholders([$var_109->get('env(Bar)')]));
        $var_103->merge($var_104);
        $var_3->assertEquals(['Foo' => 0, 'Bar' => 1], $var_103->getEnvCounters());

        $var_103 = new class_1();
        $var_104 = new class_1();
        $var_112 = $var_103->registerForAutoconfiguration('AInterface');
        $var_114 = $var_104->registerForAutoconfiguration('BInterface');
        $var_103->merge($var_104);
        $var_3->assertSame(['AInterface' => $var_112, 'BInterface' => $var_114], $var_103->getAutoconfiguredInstanceof());
    }

    
    public function fn_42()
    {
        $var_103 = new class_1();
        $var_104 = new class_1();
        $var_103->registerForAutoconfiguration('AInterface');
        $var_104->registerForAutoconfiguration('AInterface');
        $var_103->merge($var_104);
    }

    public function fn_43()
    {
        $_ENV['DUMMY_ENV_VAR'] = 'du%%y';
        $_SERVER['DUMMY_SERVER_VAR'] = 'ABC';
        $_SERVER['HTTP_DUMMY_VAR'] = 'DEF';

        $var_103 = new class_1();
        $var_103->setParameter('bar', '%% %env(DUMMY_ENV_VAR)% %env(DUMMY_SERVER_VAR)% %env(HTTP_DUMMY_VAR)%');
        $var_103->setParameter('env(HTTP_DUMMY_VAR)', '123');

        $var_3->assertSame('%% du%%%%y ABC 123', $var_103->resolveEnvPlaceholders('%bar%', true));

        unset($_ENV['DUMMY_ENV_VAR'], $_SERVER['DUMMY_SERVER_VAR'], $_SERVER['HTTP_DUMMY_VAR']);
    }

    public function fn_44()
    {
        $_ENV['ANOTHER_DUMMY_ENV_VAR'] = 'dummy';

        $var_116 = ['1' => 'one', '2' => 'two'];

        $var_103 = new class_1();
        $var_103->setParameter('dummy', '%env(ANOTHER_DUMMY_ENV_VAR)%');
        $var_103->setParameter('dummy2', $var_116);

        $var_103->resolveEnvPlaceholders('%dummy%', true);
        $var_103->resolveEnvPlaceholders('%dummy2%', true);

        $var_3->assertInternalType('array', $var_103->resolveEnvPlaceholders('%dummy2%', true));

        foreach ($var_116 as $var_117 => $var_118) {
            $var_3->assertArrayHasKey($var_117, $var_103->resolveEnvPlaceholders('%dummy2%', true));
        }

        unset($_ENV['ANOTHER_DUMMY_ENV_VAR']);
    }

    public function fn_45()
    {
        putenv('DUMMY_ENV_VAR=du%%y');
        $_SERVER['DUMMY_SERVER_VAR'] = 'ABC';
        $_SERVER['HTTP_DUMMY_VAR'] = 'DEF';

        $var_103 = new class_1();
        $var_103->setParameter('env(FOO)', 'Foo');
        $var_103->setParameter('env(DUMMY_ENV_VAR)', 'GHI');
        $var_103->setParameter('bar', '%% %env(DUMMY_ENV_VAR)% %env(DUMMY_SERVER_VAR)% %env(HTTP_DUMMY_VAR)%');
        $var_103->setParameter('foo', '%env(FOO)%');
        $var_103->setParameter('baz', '%foo%');
        $var_103->setParameter('env(HTTP_DUMMY_VAR)', '123');
        $var_103->register('teatime', 'stdClass')
            ->setProperty('foo', '%env(DUMMY_ENV_VAR)%')
            ->setPublic(true)
        ;
        $var_103->compile(true);

        $var_3->assertSame('% du%%y ABC 123', $var_103->getParameter('bar'));
        $var_3->assertSame('Foo', $var_103->getParameter('baz'));
        $var_3->assertSame('du%%y', $var_103->get('teatime')->var_28);

        unset($_SERVER['DUMMY_SERVER_VAR'], $_SERVER['HTTP_DUMMY_VAR']);
        putenv('DUMMY_ENV_VAR');
    }

    public function fn_46()
    {
        putenv('ARRAY={"foo":"bar"}');

        $var_103 = new class_1();
        $var_103->setParameter('foo', '%env(json:ARRAY)%');
        $var_103->compile(true);

        $var_3->assertSame(['foo' => 'bar'], $var_103->getParameter('foo'));

        putenv('ARRAY');
    }

    public function fn_47()
    {
        putenv('DUMMY_ENV_VAR=abc');
        putenv('ARRAY={"foo":"bar"}');

        $var_103 = new class_1();
        $var_103->setParameter('foo', '%env(json:ARRAY)%');
        $var_103->setParameter('bar', '%env(DUMMY_ENV_VAR)%');
        $var_103->compile(true);

        $var_3->assertSame(['foo' => 'bar'], $var_103->getParameter('foo'));
        $var_3->assertSame('abc', $var_103->getParameter('bar'));

        putenv('DUMMY_ENV_VAR');
        putenv('ARRAY');
    }

    
    public function fn_48()
    {
        putenv('ARRAY={"foo":"bar"}');

        $var_103 = new class_1();
        $var_103->setParameter('foo', 'ABC %env(json:ARRAY)%');
        $var_103->compile(true);

        putenv('ARRAY');
    }

    
    public function fn_49()
    {
        $var_103 = new class_1();
        $var_103->setParameter('foo', '%env(FOO)%');
        $var_103->compile(true);
    }

    public function fn_50()
    {
        putenv('DUMMY_FOO=some%foo%');
        putenv('DUMMY_BAR=%bar%');

        $var_103 = new class_1();
        $var_103->setParameter('foo', 'Foo%env(resolve:DUMMY_BAR)%');
        $var_103->setParameter('bar', 'Bar');
        $var_103->setParameter('baz', '%env(resolve:DUMMY_FOO)%');

        $var_103->compile(true);
        putenv('DUMMY_FOO');
        putenv('DUMMY_BAR');

        $var_3->assertSame('someFooBar', $var_103->getParameter('baz'));
    }

    public function fn_51()
    {
        $var_103 = new class_1();
        $var_103->setParameter('env(FAKE)', '123');

        $var_103->register('foo', 'stdClass')
            ->setPublic(true)
            ->setProperties([
                'fake' => '%env(int:FAKE)%',
            ]);

        $var_103->compile(true);

        $var_3->assertSame(123, $var_103->get('foo')->var_122);
    }

    public function fn_52()
    {
        $var_103 = new class_1();
        $var_103->setParameter('env(FAKE)', null);

        $var_103->register('foo', 'stdClass')
            ->setPublic(true)
            ->setProperties([
            'fake' => '%env(int:FAKE)%',
        ]);

        $var_103->compile(true);

        $var_3->assertNull($var_103->get('foo')->var_122);
    }

    public function fn_53()
    {
        $var_103 = include var_82.'/Fixtures/containers/container_env_in_id.php';
        $var_103->compile(true);

        $var_123 = [
            'service_container',
            'foo',
            'bar',
            'bar_%env(BAR)%',
        ];
        $var_3->assertSame($var_123, array_keys($var_103->getDefinitions()));

        $var_123 = [
            var_21\var_22\var_11\var_12\var_13\var_18::var_15 => true,
            var_11\var_12\var_13\var_18::var_15 => true,
            'baz_%env(BAR)%' => true,
            'bar_%env(BAR)%' => true,
        ];
        $var_3->assertSame($var_123, $var_103->getRemovedIds());

        $var_3->assertSame(['baz_bar'], array_keys($var_103->getDefinition('foo')->getArgument(1)));
    }

    
    public function fn_54()
    {
        putenv('DUMMY_ENV_VAR=some%foo%');

        $var_103 = new class_1();
        $var_103->setParameter('foo', '%bar%');
        $var_103->setParameter('bar', '%env(resolve:DUMMY_ENV_VAR)%');

        try {
            $var_103->compile(true);
        } finally {
            putenv('DUMMY_ENV_VAR');
        }
    }

    
    public function fn_55()
    {
        $var_103 = new class_1();
        $var_103->setResourceTracking(false);
        $var_103->compile();
        $var_103->merge(new class_1());
    }

    public function fn_56()
    {
        $var_1 = new class_1();
        $var_1
            ->register('foo', 'Bar\FooClass')
            ->addTag('foo', ['foo' => 'foo'])
            ->addTag('bar', ['bar' => 'bar'])
            ->addTag('foo', ['foofoo' => 'foofoo'])
        ;
        $var_3->assertEquals($var_1->findTaggedServiceIds('foo'), [
            'foo' => [
                ['foo' => 'foo'],
                ['foofoo' => 'foofoo'],
            ],
        ], '->findTaggedServiceIds() returns an array of service ids and its tag attributes');
        $var_3->assertEquals([], $var_1->findTaggedServiceIds('foobar'), '->findTaggedServiceIds() returns an empty array if there is annotated services');
    }

    public function fn_57()
    {
        $var_1 = new class_1();
        $var_1
            ->register('foo', 'Bar\FooClass')
            ->addTag('kernel.event_listener', ['foo' => 'foo'])
            ->addTag('kenrel.event_listener', ['bar' => 'bar'])
        ;
        $var_1->findTaggedServiceIds('kernel.event_listener');
        $var_3->assertEquals(['kenrel.event_listener'], $var_1->findUnusedTags(), '->findUnusedTags() returns an array with unused tags');
    }

    public function fn_58()
    {
        $var_103 = new class_1();
        $var_103->setDefinition('foo', $var_8 = new class_2('Bar\FooClass'));
        $var_103->setAlias('bar', 'foo');
        $var_103->setAlias('foobar', 'bar');
        $var_3->assertEquals($var_8, $var_103->findDefinition('foobar'), '->findDefinition() returns a Definition');
    }

    public function fn_59()
    {
        $var_103 = new class_1();

        $var_103->setResourceTracking(false);
        $var_103->addObjectResource(new \var_131());

        $var_3->assertEmpty($var_103->getResources(), 'No resources get registered without resource tracking');

        $var_103->setResourceTracking(true);
        $var_103->addObjectResource(new \var_131());

        $var_134 = $var_103->getResources();

        $var_3->assertCount(2, $var_134, '2 resources were registered');

        
        $var_135 = end($var_134);

        $var_3->assertInstanceOf('Symfony\Component\Config\Resource\FileResource', $var_135);
        $var_3->assertSame(realpath(var_82.'/Fixtures/includes/classes.php'), realpath($var_135->getResource()));
    }

    
    public function fn_60()
    {
        $var_103 = new class_1();

        $var_103->setResourceTracking(false);
        $var_103->addClassResource(new \var_138('BarClass'));

        $var_3->assertEmpty($var_103->getResources(), 'No resources get registered without resource tracking');

        $var_103->setResourceTracking(true);
        $var_103->addClassResource(new \var_138('BarClass'));

        $var_134 = $var_103->getResources();

        $var_3->assertCount(2, $var_134, '2 resources were registered');

        
        $var_135 = end($var_134);

        $var_3->assertInstanceOf('Symfony\Component\Config\Resource\FileResource', $var_135);
        $var_3->assertSame(realpath(var_82.'/Fixtures/includes/classes.php'), realpath($var_135->getResource()));
    }

    public function fn_61()
    {
        $var_103 = new class_1();

        $var_103->setResourceTracking(false);
        $var_139 = $var_103->getReflectionClass('BarClass');

        $var_3->assertEmpty($var_103->getResources(), 'No resources get registered without resource tracking');

        $var_103->setResourceTracking(true);
        $var_141 = $var_103->getReflectionClass('BarClass');
        $var_142 = $var_103->getReflectionClass('BarClass');

        $var_3->assertNull($var_103->getReflectionClass('BarMissingClass'));

        $var_3->assertEquals($var_139, $var_141);
        $var_3->assertSame($var_141, $var_142);

        $var_134 = $var_103->getResources();

        $var_3->assertCount(3, $var_134, '3 resources were registered');

        $var_3->assertSame('reflection.BarClass', (string) $var_134[1]);
        $var_3->assertSame('BarMissingClass', (string) end($var_134));
    }

    public function fn_62()
    {
        $var_103 = new class_1();

        $var_3->assertNull($var_103->getReflectionClass('int'));
        $var_3->assertNull($var_103->getReflectionClass('float'));
        $var_3->assertNull($var_103->getReflectionClass('string'));
        $var_3->assertNull($var_103->getReflectionClass('bool'));
        $var_3->assertNull($var_103->getReflectionClass('resource'));
        $var_3->assertNull($var_103->getReflectionClass('object'));
        $var_3->assertNull($var_103->getReflectionClass('array'));
        $var_3->assertNull($var_103->getReflectionClass('null'));
        $var_3->assertNull($var_103->getReflectionClass('callable'));
        $var_3->assertNull($var_103->getReflectionClass('iterable'));
        $var_3->assertNull($var_103->getReflectionClass('mixed'));
    }

    public function fn_63()
    {
        $var_103 = new class_1();

        $var_3->assertEmpty($var_103->getResources(), 'No resources get registered without resource tracking');

        $var_103->register('foo', 'BarClass')->setPublic(true);
        $var_103->getDefinition('foo')->setLazy(true);

        $var_103->compile();

        $var_143 = array_filter(
            $var_103->getResources(),
            function (var_144 $var_135) {
                return 'reflection.BarClass' === (string) $var_135;
            }
        );

        $var_3->assertNotEmpty($var_143);
    }

    public function fn_64()
    {
        $var_103 = new class_1();
        $var_103->addResource($var_147 = new class_11(var_82.'/Fixtures/xml/services1.xml'));
        $var_103->addResource($var_148 = new class_11(var_82.'/Fixtures/xml/services2.xml'));
        $var_134 = [];
        foreach ($var_103->getResources() as $var_135) {
            if (false === strpos($var_135, '.php')) {
                $var_134[] = $var_135;
            }
        }
        $var_3->assertEquals([$var_147, $var_148], $var_134, '->getResources() returns an array of resources read for the current configuration');
        $var_3->assertSame($var_103, $var_103->setResources([]));
        $var_3->assertEquals([], $var_103->getResources());
    }

    public function fn_65()
    {
        $var_103 = new class_1();
        $var_150 = new class_13();
        $var_147 = new class_11(var_82.'/Fixtures/xml/services1.xml');
        $var_148 = new class_11(var_82.'/Fixtures/xml/services2.xml');
        $var_151 = new class_14($var_152 = \var_153($var_148));

        $var_3->assertTrue($var_103->fileExists((string) $var_147) && $var_103->fileExists((string) $var_148) && $var_103->fileExists($var_152));

        $var_134 = [];
        foreach ($var_103->getResources() as $var_135) {
            if (false === strpos($var_135, '.php')) {
                $var_134[] = $var_135;
            }
        }

        $var_3->assertEquals([$var_150, $var_147, $var_148, $var_151], $var_134, '->getResources() returns an array of resources read for the current configuration');
    }

    public function fn_66()
    {
        $var_103 = new class_1();
        $var_103->setResourceTracking(false);

        $var_103->registerExtension($var_156 = new \var_157());
        $var_3->assertSame($var_103->getExtension('project'), $var_156, '->registerExtension() registers an extension');

        $var_3->{method_exists($var_3, $var_159 = 'expectException') ? $var_159 : 'setExpectedException'}('LogicException');
        $var_103->getExtension('no_registered');
    }

    public function fn_67()
    {
        $var_156 = $var_3->getMockBuilder('Symfony\\Component\\DependencyInjection\\Extension\\ExtensionInterface')->getMock();
        $var_156->expects($var_3->once())->method('getAlias')->will($var_3->returnValue('project'));
        $var_156->expects($var_3->never())->method('load');

        $var_103 = new class_1();
        $var_103->setResourceTracking(false);
        $var_103->registerExtension($var_156);
        $var_103->compile();
    }

    public function fn_68()
    {
        $var_156 = $var_3->getMockBuilder('Symfony\\Component\\DependencyInjection\\Extension\\ExtensionInterface')->getMock();
        $var_156->expects($var_3->exactly(2))->method('getAlias')->will($var_3->returnValue('project'));
        $var_156->expects($var_3->once())->method('load')->with([['foo' => 'bar']]);

        $var_103 = new class_1();
        $var_103->setResourceTracking(false);
        $var_103->registerExtension($var_156);
        $var_103->loadFromExtension('project', ['foo' => 'bar']);
        $var_103->compile();
    }

    public function fn_69()
    {
        $var_169 = new class_2('BarClass');
        $var_170 = new class_2('BarUserClass', [new class_3('bar')]);
        $var_103 = new class_1();
        $var_103->setResourceTracking(false);

        $var_169->setPublic(false);

        $var_103->addDefinitions([
            'bar' => $var_169,
            'bar_user' => $var_170->setPublic(true),
        ]);

        $var_103->compile();
        $var_3->assertInstanceOf('BarClass', $var_103->get('bar_user')->var_46);
    }

    
    public function fn_70()
    {
        $var_103 = new class_1();
        $var_103->setResourceTracking(false);
        $var_103->register('a', 'stdClass')->setPublic(true);
        $var_103->compile();
        $var_103->set('a', new \var_41());
    }

    public function fn_71()
    {
        $var_103 = new class_1();
        $var_103->compile();
        $var_103->set('a', $var_28 = new \var_41());
        $var_3->assertSame($var_28, $var_103->get('a'));
    }

    public function fn_72()
    {
        $var_103 = new class_1();
        $var_171 = new class_2('stdClass');
        $var_171->setSynthetic(true)->setPublic(true);
        $var_103->setDefinition('a', $var_171);
        $var_103->compile();
        $var_103->set('a', $var_147 = new \var_41());
        $var_3->assertEquals($var_147, $var_103->get('a'));
    }

    
    public function fn_73()
    {
        $var_103 = new class_1();
        $var_103->setResourceTracking(false);
        $var_103->compile();
        $var_103->setDefinition('a', new class_2());
    }

    public function fn_74()
    {
        $var_103 = new class_1();

        $var_172 = $var_103->getExtensionConfig('foo');
        $var_3->assertEmpty($var_172);

        $var_174 = ['foo' => 'bar'];
        $var_103->prependExtensionConfig('foo', $var_174);
        $var_172 = $var_103->getExtensionConfig('foo');
        $var_3->assertEquals([$var_174], $var_172);

        $var_176 = ['ding' => 'dong'];
        $var_103->prependExtensionConfig('foo', $var_176);
        $var_172 = $var_103->getExtensionConfig('foo');
        $var_3->assertEquals([$var_176, $var_174], $var_172);
    }

    public function fn_75()
    {
        $var_103 = new class_1();

        $var_177 = new class_2('AbstractClass');
        $var_177->setAbstract(true)->setPublic(true);

        $var_103->setDefinition('abstract_service', $var_177);
        $var_103->setAlias('abstract_alias', 'abstract_service')->setPublic(true);

        $var_103->compile();

        $var_3->assertSame('abstract_service', (string) $var_103->getAlias('abstract_alias'));
    }

    public function fn_76()
    {
        $var_179 = new class_15($var_103 = new class_1());
        $var_179->load(function (var_2 $var_103) {
            $var_103->set('a', new \var_181());
            $var_8 = new class_2('BazClass');
            $var_8->setLazy(true);
            $var_8->setPublic(true);
            $var_103->setDefinition('a', $var_8);
        });

        $var_103->setResourceTracking(true);

        $var_103->compile();

        $var_182 = new \var_183($var_103, 'resources');
        $var_182->setAccessible(true);
        $var_134 = $var_182->getValue($var_103);

        $var_186 = false;
        foreach ($var_134 as $var_135) {
            if ('reflection.BazClass' === (string) $var_135) {
                $var_186 = true;
                break;
            }
        }

        $var_3->assertTrue($var_186);
    }

    public function fn_77()
    {
        $var_103 = new class_1();

        $var_8 = new class_2('BarClass');

        $var_103->register('bar_user', 'BarUserClass')
            ->addArgument($var_8)
            ->setProperty('foo', $var_8);

        $var_103->register('bar', 'BarClass')
            ->setProperty('foo', $var_8)
            ->addMethodCall('setBaz', [$var_8]);

        $var_187 = $var_103->get('bar_user');
        $var_46 = $var_103->get('bar');

        $var_3->assertSame($var_187->var_28, $var_187->var_46);
        $var_3->assertSame($var_46->var_28, $var_46->getBaz());
        $var_3->assertNotSame($var_46->var_28, $var_187->var_28);
    }

    
    public function fn_78()
    {
        $var_1 = new class_1();

        $var_1->setAliases([
            'foo' => new class_4('app.test_class'),
            'app.test_class' => new class_4('App\\TestClass'),
            'App\\TestClass' => new class_4('app.test_class'),
        ]);

        $var_1->findDefinition('foo');
    }

    public function fn_79()
    {
        $var_103 = new class_1();
        $var_103->register('foo', 'stdClass');
        $var_103->register('bar', 'MethodCallClass')
            ->setPublic(true)
            ->setProperty('simple', 'bar')
            ->setProperty('complex', new class_3('foo'))
            ->addMethodCall('callMe');

        $var_103->compile();

        $var_3->assertTrue($var_103->get('bar')->callPassed(), '->compile() initializes properties before method calls');
    }

    public function fn_80()
    {
        $var_103 = new class_1();

        $var_103->register(var_150::var_15)->setPublic(true);
        $var_190 = $var_103->register('b', var_191.'\B');
        $var_190->setAutowired(true);
        $var_190->setPublic(true);

        $var_103->compile();

        $var_3->assertEquals(var_150::var_15, (string) $var_103->getDefinition('b')->getArgument(0));
    }

    public function fn_81()
    {
        $var_103 = new class_1();

        $var_193 = $var_103->register('Acme\UnknownClass');
        $var_194 = $var_103->register(var_11\var_12\var_13\var_195\var_196\var_197::var_15);
        $var_103->compile();

        $var_3->assertSame('Acme\UnknownClass', $var_193->getClass());
        $var_3->assertEquals(var_11\var_12\var_13\var_195\var_196\var_197::var_15, $var_194->getClass());
    }

    
    public function fn_82()
    {
        $var_103 = new class_1();

        $var_8 = $var_103->register(\var_198::var_15);
        $var_103->compile();
    }

    
    public function fn_83()
    {
        $var_103 = new class_1();

        $var_103->register('\\'.\var_198::var_15);
        $var_103->compile();
    }

    
    public function fn_84()
    {
        $var_103 = new class_1();

        $var_103->register('\\'.var_199::var_15);
        $var_103->compile();
    }

    
    public function fn_85()
    {
        $var_103 = new class_1();

        $var_8 = $var_103->register('123_abc');
        $var_103->compile();
    }

    
    public function fn_86()
    {
        $var_103 = new class_1();

        $var_8 = $var_103->register('\\foo');
        $var_103->compile();
    }

    public function fn_87()
    {
        $var_103 = new class_1();
        $var_103->register('foo_service', var_11\var_12\var_13\var_200::var_15)
            ->setPublic(true)
            ->addArgument([
                'bar' => new class_17(new class_3('bar_service')),
                'baz' => new class_17(new class_18('baz_service', 'stdClass')),
            ])
        ;
        $var_103->register('bar_service', 'stdClass')->setArguments([new class_3('baz_service')])->setPublic(true);
        $var_103->register('baz_service', 'stdClass')->setPublic(false);
        $var_103->compile();

        $var_3->assertInstanceOf(var_11\var_12\var_13\var_200::var_15, $var_28 = $var_103->get('foo_service'));
        $var_3->assertSame($var_103->get('bar_service'), $var_28->get('bar'));
    }

    public function fn_88()
    {
        $var_103 = include var_82.'/Fixtures/containers/container_uninitialized_ref.php';
        $var_103->compile();

        $var_46 = $var_103->get('bar');

        $var_3->assertNull($var_46->var_85);
        $var_3->assertNull($var_46->var_201);
        $var_3->assertNull($var_46->var_202);
        $var_3->assertNull($var_46->closures[0]());
        $var_3->assertNull($var_46->closures[1]());
        $var_3->assertNull($var_46->closures[2]());
        $var_3->assertSame([], iterator_to_array($var_46->var_203));

        $var_103 = include var_82.'/Fixtures/containers/container_uninitialized_ref.php';
        $var_103->compile();

        $var_103->get('foo1');
        $var_103->get('baz');

        $var_46 = $var_103->get('bar');

        $var_3->assertEquals(new \var_41(), $var_46->var_85);
        $var_3->assertNull($var_46->var_201);
        $var_3->assertEquals(new \var_41(), $var_46->var_202);
        $var_3->assertEquals(new \var_41(), $var_46->closures[0]());
        $var_3->assertNull($var_46->closures[1]());
        $var_3->assertEquals(new \var_41(), $var_46->closures[2]());
        $var_3->assertEquals(['foo1' => new \var_41(), 'foo3' => new \var_41()], iterator_to_array($var_46->var_203));
    }

    
    public function fn_89($var_204)
    {
        $var_103 = include var_82.'/Fixtures/containers/container_almost_circular.php';

        $var_28 = $var_103->get('foo');
        $var_3->assertSame($var_28, $var_28->var_46->var_205->var_28);

        $var_201 = $var_103->get('foo2');
        $var_3->assertSame($var_201, $var_201->var_46->var_205->var_28);

        $var_3->assertSame([], (array) $var_103->get('foobar4'));

        $var_206 = $var_103->get('foo5');
        $var_3->assertSame($var_206, $var_206->var_46->var_28);

        $var_207 = $var_103->get('manager');
        $var_3->assertEquals(new \var_41(), $var_207);

        $var_207 = $var_103->get('manager2');
        $var_3->assertEquals(new \var_41(), $var_207);

        $var_208 = $var_103->get('foo6');
        $var_3->assertEquals((object) ['bar6' => (object) []], $var_208);

        $var_3->assertInstanceOf(\var_41::var_15, $var_103->get('root'));
    }

    public function fn_90()
    {
        yield ['public'];
        yield ['private'];
    }

    public function fn_91()
    {
        $var_103 = new class_1();
        $var_112 = $var_103->registerForAutoconfiguration('AInterface');
        $var_114 = $var_103->registerForAutoconfiguration('BInterface');
        $var_3->assertSame(['AInterface' => $var_112, 'BInterface' => $var_114], $var_103->getAutoconfiguredInstanceof());

        
        $var_3->assertSame($var_112, $var_103->registerForAutoconfiguration('AInterface'));
    }

    
    public function fn_92()
    {
        $var_103 = new class_1();
        $var_103->register('foo', 'stdClass')
            ->setPublic(false)
            ->setDeprecated(true);
        $var_103->register('bar', 'stdClass')
            ->setPublic(true)
            ->setProperty('foo', new class_3('foo'));

        $var_103->compile();

        $var_103->get('bar');
    }

    
    public function fn_93()
    {
        $var_103 = new class_1(new class_9(['foo' => 'bar']));
        $var_103->register('foo', 'stdClass')
            ->setPublic(true)
            ->setProperty('foo', '%FOO%');

        $var_103->compile();

        $var_3->assertSame('bar', $var_103->get('foo')->var_28);
    }

    public function fn_94()
    {
        $var_103 = new class_1();
        $var_103->register('class.via.bindings', var_11\var_12\var_13\var_195\var_196\var_197::var_15)->setArguments([
            'via-bindings',
        ]);
        $var_103->register('class.via.argument', var_11\var_12\var_13\var_195\var_196\var_197::var_15)->setArguments([
            'via-argument',
        ]);
        $var_103->register('foo', var_11\var_12\var_13\var_195\var_196\var_209::var_15)->setPublic(true)->setBindings([
            var_11\var_12\var_13\var_195\var_196\var_197::var_15 => new class_3('class.via.bindings'),
            '$token' => '1234',
        ])->setArguments([
            '$class1' => new class_3('class.via.argument'),
        ]);

        $var_3->assertSame(['service_container', 'class.via.bindings', 'class.via.argument', 'foo', 'Psr\Container\ContainerInterface', 'Symfony\Component\DependencyInjection\ContainerInterface'], $var_103->getServiceIds());

        $var_103->compile();

        $var_3->assertSame('via-argument', $var_103->get('foo')->var_211->var_212);
        $var_3->assertSame('via-bindings', $var_103->get('foo')->var_213->var_212);
    }

    public function fn_95()
    {
        $var_103 = new class_1();
        $var_103->register('foo', 'stdClass')->setPublic(true)->setSynthetic(true);
        $var_103->register('bar', 'stdClass')->setPublic(true)->setShared(false)
            ->setProperty('foo', new class_3('foo', var_11\var_12\var_13\var_18::var_214));

        $var_103->compile();

        $var_3->assertEquals((object) ['foo' => null], $var_103->get('bar'));

        $var_103->set('foo', (object) [123]);
        $var_3->assertEquals((object) ['foo' => (object) [123]], $var_103->get('bar'));
    }

    public function fn_96()
    {
        $var_103 = new class_1();
        $var_103->register('foo', 'stdClass')
            ->setPublic(false)
            ->setProperty('bar', new class_3('foo'));
        $var_103->register('baz', 'stdClass')
            ->setPublic(false)
            ->setProperty('inner', new class_3('baz.inner'))
            ->setDecoratedService('foo');

        $var_103->compile();

        $var_3->assertSame(['service_container'], array_keys($var_103->getDefinitions()));
    }
}

class class_16
{
}

class class_12
{
}

class class_19
{
    public function fn_97(var_150 $var_147)
    {
    }
}
