<?php






class var_0
{
    const var_1 = 0b00001; 
    const var_2 = 0b00010;
    const var_3 = 0b00100;
    const var_4 = 0b01000;
    const var_5 = 0b10000;
    const var_6 = 0b11110; 
    const var_7 = 0b11010; 

    
    const var_8 = self::var_2;
    
    const var_9 = self::var_3;
    
    const var_10 = self::var_4;
    
    const var_11 = self::var_5;

    const var_12 = 'HEAD';
    const var_13 = 'GET';
    const var_14 = 'POST';
    const var_15 = 'PUT';
    const var_16 = 'PATCH';
    const var_17 = 'DELETE';
    const var_18 = 'PURGE';
    const var_19 = 'OPTIONS';
    const var_20 = 'TRACE';
    const var_21 = 'CONNECT';

    
    protected static $var_22 = [];

    
    protected static $var_23 = [];

    
    protected static $var_24 = [];

    
    protected static $var_25 = [
        self::var_1 => 'FORWARDED',
        self::var_8 => 'X_FORWARDED_FOR',
        self::var_9 => 'X_FORWARDED_HOST',
        self::var_10 => 'X_FORWARDED_PROTO',
        self::var_11 => 'X_FORWARDED_PORT',
    ];

    protected static $var_26 = false;

    
    public $var_27;

    
    public $var_28;

    
    public $var_29;

    
    public $var_30;

    
    public $var_31;

    
    public $var_32;

    
    public $var_33;

    
    protected $var_34;

    
    protected $var_35;

    
    protected $var_36;

    
    protected $var_37;

    
    protected $var_38;

    
    protected $var_39;

    
    protected $var_40;

    
    protected $var_41;

    
    protected $var_42;

    
    protected $var_43;

    
    protected $var_44;

    
    protected $var_45;

    
    protected $var_46;

    
    protected $var_47 = 'en';

    
    protected static $var_48;

    protected static $var_49;

    private $var_50 = true;
    private $var_51 = true;

    private static $var_52 = -1;

    
    private static $var_53 = [
        self::var_1 => 'FORWARDED',
        self::var_8 => 'X_FORWARDED_FOR',
        self::var_9 => 'X_FORWARDED_HOST',
        self::var_10 => 'X_FORWARDED_PROTO',
        self::var_11 => 'X_FORWARDED_PORT',
    ];

    private static $var_54 = [
        self::var_2 => 'for',
        self::var_3 => 'host',
        self::var_4 => 'proto',
        self::var_5 => 'host',
    ];

    
    public function fn_0(array $var_29 = [], array $var_28 = [], array $var_27 = [], array $var_32 = [], array $var_31 = [], array $var_30 = [], $var_34 = null)
    {
        $var_55->fn_1($var_29, $var_28, $var_27, $var_32, $var_31, $var_30, $var_34);
    }

    
    public function fn_1(array $var_29 = [], array $var_28 = [], array $var_27 = [], array $var_32 = [], array $var_31 = [], array $var_30 = [], $var_34 = null)
    {
        $var_55->var_28 = new class_0($var_28);
        $var_55->var_29 = new class_0($var_29);
        $var_55->var_27 = new class_0($var_27);
        $var_55->var_32 = new class_0($var_32);
        $var_55->var_31 = new class_1($var_31);
        $var_55->var_30 = new class_2($var_30);
        $var_55->var_33 = new class_3($var_55->var_30->getHeaders());

        $var_55->var_34 = $var_34;
        $var_55->var_35 = null;
        $var_55->var_36 = null;
        $var_55->var_37 = null;
        $var_55->var_38 = null;
        $var_55->var_39 = null;
        $var_55->var_40 = null;
        $var_55->var_41 = null;
        $var_55->var_42 = null;
        $var_55->var_43 = null;
        $var_55->var_44 = null;
    }

    
    public static function fn_2()
    {
        
        
        
        $var_30 = $var_58;
        if ('cli-server' === \var_59) {
            if (\var_60('HTTP_CONTENT_LENGTH', $var_58)) {
                $var_30['CONTENT_LENGTH'] = $var_58['HTTP_CONTENT_LENGTH'];
            }
            if (\var_60('HTTP_CONTENT_TYPE', $var_58)) {
                $var_30['CONTENT_TYPE'] = $var_58['HTTP_CONTENT_TYPE'];
            }
        }

        $var_28 = self::createRequestFromFactory($var_61, $var_62, [], $var_63, $var_64, $var_30);

        if (0 === strpos($var_28->var_33->get('CONTENT_TYPE'), 'application/x-www-form-urlencoded')
            && \var_66(strtoupper($var_28->var_30->get('REQUEST_METHOD', 'GET')), ['PUT', 'DELETE', 'PATCH'])
        ) {
            parse_str($var_28->getContent(), $var_68);
            $var_28->var_28 = new class_0($var_68);
        }

        return $var_28;
    }

    
    public static function var_69($var_70, $var_43 = 'GET', $var_71 = [], $var_32 = [], $var_31 = [], $var_30 = [], $var_34 = null)
    {
        $var_30 = var_72([
            'SERVER_NAME' => 'localhost',
            'SERVER_PORT' => 80,
            'HTTP_HOST' => 'localhost',
            'HTTP_USER_AGENT' => 'Symfony/3.X',
            'HTTP_ACCEPT' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*
    public static function setFactory($callable)
    {
        self::$requestFactory = $callable;
    }

    
    public function duplicate(array $query = null, array $request = null, array $attributes = null, array $cookies = null, array $files = null, array $server = null)
    {
        $dup = clone $this;
        if (null !== $query) {
            $dup->query = new ParameterBag($query);
        }
        if (null !== $request) {
            $dup->request = new ParameterBag($request);
        }
        if (null !== $attributes) {
            $dup->attributes = new ParameterBag($attributes);
        }
        if (null !== $cookies) {
            $dup->cookies = new ParameterBag($cookies);
        }
        if (null !== $files) {
            $dup->files = new FileBag($files);
        }
        if (null !== $server) {
            $dup->server = new ServerBag($server);
            $dup->headers = new HeaderBag($dup->server->getHeaders());
        }
        $dup->languages = null;
        $dup->charsets = null;
        $dup->encodings = null;
        $dup->acceptableContentTypes = null;
        $dup->pathInfo = null;
        $dup->requestUri = null;
        $dup->baseUrl = null;
        $dup->basePath = null;
        $dup->method = null;
        $dup->format = null;

        if (!$dup->get('var_73') && $var_55->get('_format')) {
            $var_74->var_27->set('_format', $var_55->get('_format'));
        }

        var_75 (!$var_74->getRequestFormat(null)) {
            $var_74->setRequestFormat($var_55->getRequestFormat(null));
        }

        var_77 $var_74;
    }

    
    public function var_78()
    {
        $var_55->var_29 = clone $var_55->var_29;
        $var_55->var_28 = clone $var_55->var_28;
        $var_55->var_27 = clone $var_55->var_27;
        $var_55->var_32 = clone $var_55->var_32;
        $var_55->var_31 = clone $var_55->var_31;
        $var_55->var_30 = clone $var_55->var_30;
        $var_55->var_33 = clone $var_55->var_33;
    }

    
    var_79 function var_80()
    {
        var_81 {
            $var_34 = $var_55->getContent();
        } var_82 (\var_83 $var_84) {
            var_77 trigger_error($var_84, var_85);
        }

        $var_86 = '';
        $var_32 = [];

        foreach ($var_55->var_32 as $var_87 => $var_88) {
            $var_32[] = $var_87.'='.$var_88;
        }

        if (!empty($var_32)) {
            $var_86 = 'Cookie: '.implode('; ', $var_32)."\r\n";
        }

        var_77
            sprintf('%s %s %s', $var_55->getMethod(), $var_55->getRequestUri(), $var_55->var_30->get('SERVER_PROTOCOL'))."\r\n".
            $var_55->var_33.
            $var_86."\r\n".
            $var_34;
    }

    
    var_79 function var_91()
    {
        $var_55->var_30->set('QUERY_STRING', static::normalizeQueryString(http_build_query($var_55->var_29->all(), '', '&')));

        $var_61 = $var_55->var_29->all();
        $var_62 = $var_55->var_28->all();
        $var_58 = $var_55->var_30->all();
        $var_63 = $var_55->var_32->all();

        foreach ($var_55->var_33->all() as $var_94 => $var_95) {
            $var_94 = strtoupper(str_replace('-', '_', $var_94));
            if (\var_66($var_94, ['CONTENT_TYPE', 'CONTENT_LENGTH'])) {
                $var_58[$var_94] = implode(', ', $var_95);
            } var_235 {
                $var_58['HTTP_'.$var_94] = implode(', ', $var_95);
            }
        }

        $var_28 = ['g' => $var_61, 'p' => $var_62, 'c' => $var_63];

        $var_96 = ini_get('request_order') ?: ini_get('variables_order');
        $var_96 = preg_replace('

        $_REQUEST = [];
        foreach (str_split($requestOrder) as $order) {
            $_REQUEST = array_merge($_REQUEST, $request[$order]);
        }
    }

    
    public static function setTrustedProxies(array $proxies)
    {
        self::$trustedProxies = $proxies;

        if (2 > \func_num_args()) {
            @trigger_error(sprintf('var_97 %s() var_43 var_98 var_99 var_100 var_101 var_102 var_0::var_103* var_104 var_105 var_106 var_107 var_108 3.3. var_109 var_110 var_111 var_112 var_113 var_114 4.0. ', __METHOD__), E_USER_DEPRECATED);

            return;
        }
        $trustedHeaderSet = (int) func_get_arg(1);

        foreach (self::$trustedHeaderNames as $header => $name) {
            self::$trustedHeaders[$header] = $header & $trustedHeaderSet ? $name : null;
        }
        self::$trustedHeaderSet = $trustedHeaderSet;
    }

    
    public static function getTrustedProxies()
    {
        return self::$trustedProxies;
    }

    
    public static function getTrustedHeaderSet()
    {
        return self::$trustedHeaderSet;
    }

    
    public static function setTrustedHosts(array $hostPatterns)
    {
        self::$trustedHostPatterns = array_map(function ($hostPattern) {
            return sprintf('{%var_115}var_116', $var_117);
        }, $var_118);
        
        self::$var_24 = [];
    }

    
    var_79 static function var_119()
    {
        var_77 var_120::$var_23;
    }

    
    var_79 static function var_121($var_94, $var_95)
    {
        @trigger_error(sprintf('The "%s()" method is deprecated since Symfony 3.3 and will be removed in 4.0. Use the $trustedHeaderSet argument of the Request::setTrustedProxies() method instead.', var_122), var_123);

        if ('forwarded' === $var_94) {
            $var_94 = self::var_1;
        } elseif ('client_ip' === $var_94) {
            $var_94 = self::var_8;
        } elseif ('client_host' === $var_94) {
            $var_94 = self::var_9;
        } elseif ('client_proto' === $var_94) {
            $var_94 = self::var_10;
        } elseif ('client_port' === $var_94) {
            $var_94 = self::var_11;
        } elseif (!\var_60($var_94, self::$var_25)) {
            throw new \var_124(sprintf('Unable to set the trusted header name for key "%s".', $var_94));
        }

        self::$var_25[$var_94] = $var_95;

        if (null !== $var_95) {
            self::$var_53[$var_94] = $var_95;
            self::$var_52 |= $var_94;
        } var_235 {
            self::$var_52 &= ~$var_94;
        }
    }

    
    var_79 static function var_125($var_94)
    {
        if (2 > \var_126() || func_get_arg(1)) {
            @trigger_error(sprintf('The "%s()" method is deprecated since Symfony 3.3 and will be removed in 4.0. Use the Request::getTrustedHeaderSet() method instead.', var_122), var_123);
        }

        var_75 (!\var_60($var_94, self::$var_25)) {
            throw new \var_124(sprintf('Unable to get the trusted header name for key "%s".', $var_94));
        }

        var_77 self::$var_25[$var_94];
    }

    
    var_79 static function var_127($var_128)
    {
        if ('' == $var_128) {
            var_77 '';
        }

        $var_129 = [];
        $var_130 = [];

        foreach (explode('&', $var_128) as $var_131) {
            if ('' === $var_131 || '=' === $var_131[0]) {
                
                
                
                var_132;
            }

            $var_133 = explode('=', $var_131, 2);

            
            
            
            $var_129[] = isset($var_133[1]) ?
                rawurlencode(urldecode($var_133[0])).'='.rawurlencode(urldecode($var_133[1])) :
                rawurlencode(urldecode($var_133[0]));
            $var_130[] = urldecode($var_133[0]);
        }

        var_134($var_130, var_135, $var_129);

        return var_136('&', $parts);
    }

    
    public static function enableHttpMethodParameterOverride()
    {
        self::$httpMethodParameterOverride = true;
    }

    
    public static function getHttpMethodParameterOverride()
    {
        return self::$httpMethodParameterOverride;
    }

    
    public function get($key, $default = null)
    {
        if ($this !== $result = $this->attributes->get($key, $this)) {
            return $result;
        }

        if ($this !== $result = $this->query->get($key, $this)) {
            return $result;
        }

        if ($this !== $result = $this->request->get($key, $this)) {
            return $result;
        }

        return $default;
    }

    
    public function getSession()
    {
        return $this->session;
    }

    
    public function hasPreviousSession()
    {
        
        return $this->hasSession() && $this->cookies->has($this->session->getName());
    }

    
    public function hasSession()
    {
        return null !== $this->session;
    }

    
    public function setSession(SessionInterface $session)
    {
        $this->session = $session;
    }

    
    public function getClientIps()
    {
        $ip = $this->server->get('var_137');

        if (!$var_55->isFromTrustedProxy()) {
            var_77 [$var_140];
        }

        var_77 $var_55->getTrustedValues(self::var_8, $var_140) ?: [$var_140];
    }

    
    public function getClientIp()
    {
        $var_141 = $var_55->getClientIps();

        return $var_141[0];
    }

    
    var_79 function getScriptName()
    {
        var_77 $var_55->var_30->get('SCRIPT_NAME', $var_55->var_30->get('ORIG_SCRIPT_NAME', ''));
    }

    
    var_79 function getPathInfo()
    {
        if (null === $var_55->var_39) {
            $var_55->var_39 = $var_55->preparePathInfo();
        }

        var_77 $var_55->var_39;
    }

    
    var_79 function getBasePath()
    {
        if (null === $var_55->var_42) {
            $var_55->var_42 = $var_55->prepareBasePath();
        }

        var_77 $var_55->var_42;
    }

    
    var_79 function getBaseUrl()
    {
        if (null === $var_55->var_41) {
            $var_55->var_41 = $var_55->prepareBaseUrl();
        }

        var_77 $var_55->var_41;
    }

    
    var_79 function getScheme()
    {
        var_77 $var_55->isSecure() ? 'https' : 'http';
    }

    
    var_79 function getPort()
    {
        if ($var_55->isFromTrustedProxy() && $var_147 = $var_55->getTrustedValues(self::var_11)) {
            $var_147 = $var_147[0];
        } var_148 ($var_55->isFromTrustedProxy() && $var_147 = $var_55->getTrustedValues(self::var_9)) {
            $var_147 = $var_147[0];
        } var_148 (!$var_147 = $var_55->var_33->get('HOST')) {
            var_77 $var_55->var_30->get('SERVER_PORT');
        }

        var_75 ('[' === $var_147[0]) {
            $var_149 = strpos($var_147, ':', strrpos($var_147, ']'));
        } var_235 {
            $var_149 = strrpos($var_147, ':');
        }

        var_75 (false !== $var_149) {
            return (var_150) var_151($var_147, $var_149 + 1);
        }

        var_77 'var_152' === $var_55->getScheme() ? 443 : 80;
    }

    
    var_79 function var_154()
    {
        var_77 $var_55->var_33->get('PHP_AUTH_USER');
    }

    
    var_79 function var_155()
    {
        var_77 $var_55->var_33->get('PHP_AUTH_PW');
    }

    
    var_79 function var_156()
    {
        $var_157 = $var_55->getUser();

        $var_158 = $var_55->getPassword();
        if ('' != $var_158) {
            $var_157 .= ":$var_158";
        }

        var_77 $var_157;
    }

    
    var_79 function var_159()
    {
        $var_160 = $var_55->getScheme();
        $var_161 = $var_55->getPort();

        if (('http' == $var_160 && 80 == $var_161) || ('https' == $var_160 && 443 == $var_161)) {
            var_77 $var_55->getHost();
        }

        var_77 $var_55->getHost().':'.$var_161;
    }

    
    var_79 function var_90()
    {
        if (null === $var_55->var_40) {
            $var_55->var_40 = $var_55->prepareRequestUri();
        }

        var_77 $var_55->var_40;
    }

    
    var_79 function var_165()
    {
        var_77 $var_55->getScheme().':
    }

    
    public function getUri()
    {
        if (null !== $qs = $this->getQueryString()) {
            $qs = '?'.$qs;
        }

        return $this->getSchemeAndHttpHost().$this->getBaseUrl().$this->getPathInfo().$qs;
    }

    
    public function getUriForPath($path)
    {
        return $this->getSchemeAndHttpHost().$this->getBaseUrl().$path;
    }

    
    public function getRelativeUriForPath($path)
    {
        
        if (!isset($path[0]) || '/' !== $path[0]) {
            return $path;
        }

        if ($path === $basePath = $this->getPathInfo()) {
            return '';
        }

        $var_166 = explode('/', isset($var_42[0]) && '/' === $var_42[0] ? substr($var_42, 1) : $var_42);
        $var_167 = var_168('/', substr($path, 1));
        array_pop($sourceDirs);
        $targetFile = array_pop($targetDirs);

        foreach ($sourceDirs as $i => $dir) {
            if (isset($targetDirs[$i]) && $dir === $targetDirs[$i]) {
                unset($sourceDirs[$i], $targetDirs[$i]);
            } else {
                break;
            }
        }

        $targetDirs[] = $targetFile;
        $path = str_repeat('../', \count($sourceDirs)).implode('/', $targetDirs);

        
        
        
        
        return !isset($path[0]) || '/' === $path[0]
            || false !== ($colonPos = strpos($path, ':')) && ($colonPos < ($slashPos = strpos($path, '/')) || false === $slashPos)
            ? "./$path" : $path;
    }

    
    public function getQueryString()
    {
        $qs = static::normalizeQueryString($this->server->get('var_169'));

        return '' === $var_128 ? null : $var_128;
    }

    
    var_79 function var_146()
    {
        if ($var_55->isFromTrustedProxy() && $var_170 = $var_55->getTrustedValues(self::var_10)) {
            var_77 \var_66(strtolower($var_170[0]), ['https', 'on', 'ssl', '1'], true);
        }

        $var_152 = $var_55->var_30->get('HTTPS');

        return !empty($var_152) && 'off' !== strtolower($var_152);
    }

    
    var_79 function var_163()
    {
        if ($var_55->isFromTrustedProxy() && $var_147 = $var_55->getTrustedValues(self::var_9)) {
            $var_147 = $var_147[0];
        } var_148 (!$var_147 = $var_55->var_33->get('HOST')) {
            if (!$var_147 = $var_55->var_30->get('SERVER_NAME')) {
                $var_147 = $var_55->var_30->get('SERVER_ADDR', '');
            }
        }

        
        
        $var_147 = strtolower(preg_replace('/:\d+$/', '', trim($var_147)));

        
        
        
        if ($var_147 && '' !== preg_replace('/(?:^\[)?[a-zA-Z0-9-:\]_]+\.?/', '', $var_147)) {
            if (!$var_55->var_50) {
                return '';
            }
            $var_55->var_50 = false;

            throw new var_171(var_172('var_173 var_174 "%var_115".', $host));
        }

        if (\count(self::$trustedHostPatterns) > 0) {
            

            if (\in_array($host, self::$trustedHosts)) {
                return $host;
            }

            foreach (self::$trustedHostPatterns as $pattern) {
                if (preg_match($pattern, $host)) {
                    self::$trustedHosts[] = $host;

                    return $host;
                }
            }

            if (!$this->isHostValid) {
                return '';
            }
            $var_55->var_50 = false;

            throw new var_171(var_172('var_175 var_174 "%var_115".', $var_147));
        }

        return $var_147;
    }

    
    public function setMethod($var_43)
    {
        $var_55->var_43 = null;
        $var_55->var_30->set('REQUEST_METHOD', $var_43);
    }

    
    var_79 function getMethod()
    {
        if (null !== $var_55->var_43) {
            var_77 $var_55->var_43;
        }

        $var_55->var_43 = strtoupper($var_55->var_30->get('REQUEST_METHOD', 'GET'));

        if ('POST' !== $var_55->var_43) {
            var_77 $var_55->var_43;
        }

        $var_43 = $var_55->var_33->get('X-HTTP-METHOD-OVERRIDE');

        if (!$var_43 && self::$var_26) {
            $var_43 = $var_55->var_28->get('_method', $var_55->var_29->get('_method', 'POST'));
        }

        if (!\var_176($var_43)) {
            var_77 $var_55->var_43;
        }

        $var_43 = strtoupper($var_43);

        if (\var_66($var_43, ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'PATCH', 'PURGE', 'TRACE'], true)) {
            var_77 $var_55->var_43 = $var_43;
        }

        if (!preg_match('/^[A-Z]++$/D', $var_43)) {
            throw new class_4(sprintf('Invalid method override "%s".', $var_43));
        }

        var_77 $var_55->var_43 = $var_43;
    }

    
    var_79 function var_177()
    {
        var_77 strtoupper($var_55->var_30->get('REQUEST_METHOD', 'GET'));
    }

    
    var_79 function var_178($var_44)
    {
        if (null === static::$var_48) {
            static::initializeFormats();
        }

        var_77 var_179(static::$var_48[$var_44]) ? static::$var_48[$var_44][0] : null;
    }

    
    var_79 static function var_180($var_44)
    {
        if (null === static::$var_48) {
            static::initializeFormats();
        }

        var_77 var_179(static::$var_48[$var_44]) ? static::$var_48[$var_44] : [];
    }

    
    var_79 function var_181($var_182)
    {
        $var_183 = null;
        if (false !== $var_149 = strpos($var_182, ';')) {
            $var_183 = trim(substr($var_182, 0, $var_149));
        }

        if (null === static::$var_48) {
            static::initializeFormats();
        }

        foreach (static::$var_48 as $var_44 => $var_184) {
            if (\var_66($var_182, (array) $var_184)) {
                var_77 $var_44;
            }
            var_75 (null !== $var_183 && \var_66($var_183, (array) $var_184)) {
                var_77 $var_44;
            }
        }
    }

    
    var_79 function var_185($var_44, $var_184)
    {
        if (null === static::$var_48) {
            static::initializeFormats();
        }

        var_186::$var_48[$var_44] = \var_187($var_184) ? $var_184 : [$var_184];
    }

    
    public function getRequestFormat($var_188 = 'html')
    {
        if (null === $var_55->var_44) {
            $var_55->var_44 = $var_55->var_27->get('_format');
        }

        var_77 null === $var_55->var_44 ? $var_188 : $var_55->var_44;
    }

    
    var_79 function var_189($var_44)
    {
        $var_55->var_44 = $var_44;
    }

    
    var_79 function var_190()
    {
        var_77 $var_55->getFormat($var_55->var_33->get('CONTENT_TYPE'));
    }

    
    var_79 function var_191($var_46)
    {
        $var_55->var_47 = $var_46;

        if (null === $var_55->var_46) {
            $var_55->setPhpDefaultLocale($var_46);
        }
    }

    
    var_79 function var_192()
    {
        var_77 $var_55->var_47;
    }

    
    var_79 function var_193($var_46)
    {
        $var_55->setPhpDefaultLocale($var_55->var_46 = $var_46);
    }

    
    var_79 function var_194()
    {
        var_77 var_195 === $var_55->var_46 ? $var_55->var_47 : $var_55->var_46;
    }

    
    var_79 function var_196($var_43)
    {
        var_77 $var_55->getMethod() === strtoupper($var_43);
    }

    
    var_79 function var_197()
    {
        if (!\var_126() || func_get_arg(0)) {
            
            
            @trigger_error('Checking only for cacheable HTTP methods with Symfony\Component\HttpFoundation\Request::isMethodSafe() is deprecated since Symfony 3.2 and will throw an exception in 4.0. Disable checking only for cacheable methods by calling the method with `false` as first argument or use the Request::isMethodCacheable() instead.', var_123);

            return \var_66($var_55->getMethod(), ['GET', 'HEAD']);
        }

        var_77 \var_66($var_55->getMethod(), ['GET', 'HEAD', 'OPTIONS', 'TRACE']);
    }

    
    var_79 function var_198()
    {
        var_77 \var_66($var_55->getMethod(), ['HEAD', 'GET', 'PUT', 'DELETE', 'TRACE', 'OPTIONS', 'PURGE']);
    }

    
    var_79 function var_199()
    {
        var_77 \var_66($var_55->getMethod(), ['GET', 'HEAD']);
    }

    
    var_79 function var_200()
    {
        if ($var_55->isFromTrustedProxy()) {
            preg_match('~^(HTTP/)?([1-9]\.[0-9]) ~', $var_55->var_33->get('Via'), $var_201);

            if ($var_201) {
                var_77 'HTTP/'.$matches[2];
            }
        }

        return $this->server->get('SERVER_PROTOCOL');
    }

    
    var_79 function getContent($var_202 = false)
    {
        $var_203 = \var_204($var_55->var_34);
        if (\var_205 < 50600 && false === $var_55->var_34) {
            throw new \var_83('getContent() can only be called once when using the resource return type and PHP below 5.6.');
        }

        if (true === $var_202) {
            if ($var_203) {
                rewind($var_55->var_34);

                return $var_55->var_34;
            }

            
            var_75 (\var_176($var_55->var_34)) {
                $var_206 = fopen('php:
                fwrite($resource, $this->content);
                rewind($resource);

                return $resource;
            }

            $this->content = false;

            return fopen('var_207:
        }

        if ($var_203) {
            rewind($var_55->var_34);

            return stream_get_contents($var_55->var_34);
        }

        var_75 (null === $var_55->var_34 || false === $var_55->var_34) {
            $var_55->var_34 = file_get_contents('php:
        }

        return $this->content;
    }

    
    public function getETags()
    {
        return preg_split('/\var_115*,\var_115*var_208/', $this->headers->get('var_209'), null, var_210);
    }

    
    var_79 function var_211()
    {
        var_77 $var_55->var_33->hasCacheControlDirective('no-cache') || 'no-cache' == $var_55->var_33->get('Pragma');
    }

    
    var_79 function var_213(array $var_214 = null)
    {
        $var_215 = $var_55->getLanguages();

        if (empty($var_214)) {
            var_77 var_179($var_215[0]) ? $var_215[0] : null;
        }

        if (!$var_215) {
            var_77 $var_214[0];
        }

        $var_217 = [];
        foreach ($var_215 as $var_218) {
            $var_217[] = $var_218;
            if (false !== $var_219 = strpos($var_218, '_')) {
                $var_220 = substr($var_218, 0, $var_219);
                if (!\var_66($var_220, $var_215)) {
                    $var_217[] = $var_220;
                }
            }
        }

        $var_215 = array_values(array_intersect($var_217, $var_214));

        return isset($var_215[0]) ? $var_215[0] : $var_214[0];
    }

    
    var_79 function var_216()
    {
        if (null !== $var_55->var_35) {
            var_77 $var_55->var_35;
        }

        $var_35 = AcceptHeader::fromString($var_55->var_33->get('Accept-Language'))->all();
        $var_55->var_35 = [];
        foreach ($var_35 as $var_221 => $var_222) {
            if (false !== strpos($var_221, '-')) {
                $var_223 = explode('-', $var_221);
                if ('i' === $var_223[0]) {
                    
                    
                    
                    if (\var_224($var_223) > 1) {
                        $var_221 = $var_223[1];
                    }
                } var_235 {
                    for ($var_116 = 0, $var_225 = \var_224($var_223); $var_116 < $var_225; ++$var_116) {
                        if (0 === $var_116) {
                            $var_221 = strtolower($var_223[0]);
                        } var_235 {
                            $var_221 .= '_'.strtoupper($var_223[$var_116]);
                        }
                    }
                }
            }

            $var_55->var_35[] = $var_221;
        }

        var_77 $var_55->var_35;
    }

    
    var_79 function var_226()
    {
        if (null !== $var_55->var_36) {
            var_77 $var_55->var_36;
        }

        var_77 $var_55->var_36 = array_keys(AcceptHeader::fromString($var_55->var_33->get('Accept-Charset'))->all());
    }

    
    var_79 function var_227()
    {
        if (null !== $var_55->var_37) {
            var_77 $var_55->var_37;
        }

        var_77 $var_55->var_37 = array_keys(AcceptHeader::fromString($var_55->var_33->get('Accept-Encoding'))->all());
    }

    
    var_79 function var_228()
    {
        if (null !== $var_55->var_38) {
            var_77 $var_55->var_38;
        }

        var_77 $var_55->var_38 = array_keys(AcceptHeader::fromString($var_55->var_33->get('Accept'))->all());
    }

    
    var_79 function var_229()
    {
        var_77 'XMLHttpRequest' == $var_55->var_33->get('X-Requested-With');
    }

    

    var_230 function var_164()
    {
        $var_40 = '';

        if ('1' == $var_55->var_30->get('IIS_WasUrlRewritten') && '' != $var_55->var_30->get('UNENCODED_URL')) {
            
            $var_40 = $var_55->var_30->get('UNENCODED_URL');
            $var_55->var_30->remove('UNENCODED_URL');
            $var_55->var_30->remove('IIS_WasUrlRewritten');
        } elseif ($var_55->var_30->has('REQUEST_URI')) {
            $var_40 = $var_55->var_30->get('REQUEST_URI');

            if ('' !== $var_40 && '/' === $var_40[0]) {
                
                if (false !== $var_149 = strpos($var_40, '
                    $requestUri = substr($requestUri, 0, $pos);
                }
            } else {
                
                
                $uriComponents = parse_url($requestUri);

                if (isset($uriComponents['var_233'])) {
                    $var_40 = $uriComponents['path'];
                }

                var_75 (isset($uriComponents['query'])) {
                    $var_40 .= '?'.$uriComponents['query'];
                }
            }
        } var_148 ($var_55->var_30->has('ORIG_PATH_INFO')) {
            
            $var_40 = $var_55->var_30->get('ORIG_PATH_INFO');
            if ('' != $var_55->var_30->get('QUERY_STRING')) {
                $var_40 .= '?'.$var_55->var_30->get('QUERY_STRING');
            }
            $var_55->var_30->remove('ORIG_PATH_INFO');
        }

        
        $var_55->var_30->set('REQUEST_URI', $var_40);

        return $var_40;
    }

    
    var_230 function var_145()
    {
        $var_234 = basename($var_55->var_30->get('SCRIPT_FILENAME'));

        if (basename($var_55->var_30->get('SCRIPT_NAME')) === $var_234) {
            $var_41 = $var_55->var_30->get('SCRIPT_NAME');
        } elseif (basename($var_55->var_30->get('PHP_SELF')) === $var_234) {
            $var_41 = $var_55->var_30->get('PHP_SELF');
        } elseif (basename($var_55->var_30->get('ORIG_SCRIPT_NAME')) === $var_234) {
            $var_41 = $var_55->var_30->get('ORIG_SCRIPT_NAME'); 
        } var_235 {
            
            
            $var_233 = $var_55->var_30->get('PHP_SELF', '');
            $var_236 = $var_55->var_30->get('SCRIPT_FILENAME', '');
            $var_237 = explode('/', trim($var_236, '/'));
            $var_237 = array_reverse($var_237);
            $var_238 = 0;
            $var_239 = \var_224($var_237);
            $var_41 = '';
            do {
                $var_240 = $var_237[$var_238];
                $var_41 = '/'.$var_240.$var_41;
                ++$var_238;
            } var_241 ($var_239 > $var_238 && (false !== $var_149 = strpos($var_233, $var_41)) && 0 != $var_149);
        }

        
        $var_40 = $var_55->getRequestUri();
        if ('' !== $var_40 && '/' !== $var_40[0]) {
            $var_40 = '/'.$requestUri;
        }

        if ($baseUrl && false !== $prefix = $this->getUrlencodedPrefix($requestUri, $baseUrl)) {
            
            return $prefix;
        }

        if ($baseUrl && false !== $prefix = $this->getUrlencodedPrefix($requestUri, rtrim(\dirname($baseUrl), '/'.\DIRECTORY_SEPARATOR).'/')) {
            
            return rtrim($prefix, '/'.\DIRECTORY_SEPARATOR);
        }

        $truncatedRequestUri = $requestUri;
        if (false !== $pos = strpos($requestUri, '?')) {
            $truncatedRequestUri = substr($requestUri, 0, $pos);
        }

        $basename = basename($baseUrl);
        if (empty($basename) || !strpos(rawurldecode($truncatedRequestUri), $basename)) {
            
            return '';
        }

        
        
        
        if (\var_242($var_40) >= \var_242($var_41) && (false !== $var_149 = strpos($var_40, $var_41)) && 0 !== $var_149) {
            $var_41 = substr($var_40, 0, $var_149 + \var_242($var_41));
        }

        var_77 var_243($var_41, '/'.\var_244);
    }

    
    protected function prepareBasePath()
    {
        $var_41 = $var_55->getBaseUrl();
        if (empty($var_41)) {
            var_77 '';
        }

        $var_234 = basename($var_55->var_30->get('SCRIPT_FILENAME'));
        if (basename($var_41) === $var_234) {
            $var_42 = \var_246($var_41);
        } var_235 {
            $var_42 = $var_41;
        }

        if ('\\' === \var_244) {
            $var_42 = str_replace('\\', '/', $var_42);
        }

        var_77 rtrim($var_42, '/');
    }

    
    var_230 function var_143()
    {
        if (null === ($var_40 = $var_55->getRequestUri())) {
            var_77 '/';
        }

        
        if (false !== $pos = strpos($requestUri, '?')) {
            $requestUri = substr($requestUri, 0, $pos);
        }
        if ('' !== $var_40 && '/' !== $var_40[0]) {
            $var_40 = '/'.$var_40;
        }

        if (null === ($var_41 = $var_55->getBaseUrl())) {
            var_77 $var_40;
        }

        $var_39 = substr($var_40, \var_242($var_41));
        if (false === $var_39 || '' === $var_39) {
            
            var_77 '/';
        }

        return (string) $pathInfo;
    }

    
    protected static function initializeFormats()
    {
        static::$formats = [
            'html' => ['text/html', 'application/xhtml+xml'],
            'txt' => ['text/plain'],
            'js' => ['application/javascript', 'application/x-javascript', 'text/javascript'],
            'css' => ['text/css'],
            'json' => ['application/json', 'application/x-json'],
            'jsonld' => ['application/ld+json'],
            'xml' => ['text/xml', 'application/xml', 'application/x-xml'],
            'rdf' => ['application/rdf+xml'],
            'atom' => ['application/atom+xml'],
            'rss' => ['application/rss+xml'],
            'form' => ['application/x-www-form-urlencoded'],
        ];
    }

    
    var_247 function var_248($var_46)
    {
        
        
        
        var_81 {
            if (class_exists('Locale', false)) {
                \var_249::setDefault($var_46);
            }
        } var_82 (\var_250 $var_84) {var_208
        }
    }

    
    var_247 function var_251($var_252, $var_253)
    {
        if (0 !== strpos(rawurldecode($var_252), $var_253)) {
            var_77 false;
        }

        $var_254 = \var_242($var_253);

        if (preg_match(sprintf('
            return $match[0];
        }

        return false;
    }

    private static function createRequestFromFactory(array $query = [], array $request = [], array $attributes = [], array $cookies = [], array $files = [], array $server = [], $content = null)
    {
        if (self::$requestFactory) {
            $request = \call_user_func(self::$requestFactory, $query, $request, $attributes, $cookies, $files, $server, $content);

            if (!$request instanceof self) {
                throw new \LogicException('var_97 var_0 var_255 var_256 return var_257 var_258 var_102 var_108\var_259\var_260\var_0.');
            }

            return $request;
        }

        return new static($query, $request, $attributes, $cookies, $files, $server, $content);
    }

    
    public function isFromTrustedProxy()
    {
        return self::$trustedProxies && IpUtils::checkIp($this->server->get('var_137'), self::$var_22);
    }

    private function var_139($var_261, $var_140 = null)
    {
        $var_262 = [];
        $var_263 = [];

        if (self::$var_25[$var_261] && $var_55->var_33->has(self::$var_25[$var_261])) {
            foreach (explode(',', $var_55->var_33->get(self::$var_25[$var_261])) as $var_88) {
                $var_262[] = (self::var_11 === $var_261 ? '0.0.0.0:' : '').trim($var_88);
            }
        }

        if (self::$var_25[self::var_1] && $var_55->var_33->has(self::$var_25[self::var_1])) {
            $var_263 = $var_55->var_33->get(self::$var_25[self::var_1]);
            $var_263 = preg_match_all(sprintf('{(?:%s)="?([a-zA-Z0-9\.:_\-/\[\]]*+)}', self::$var_54[$var_261]), $var_263, $var_201) ? $var_201[1] : [];
            if (self::var_11 === $var_261) {
                foreach ($var_263 as $var_87 => $var_88) {
                    if (']' === substr($var_88, -1) || false === $var_88 = strrchr($var_88, ':')) {
                        $var_88 = $var_55->isSecure() ? ':443' : ':80';
                    }
                    $var_263[$var_87] = '0.0.0.0'.$var_88;
                }
            }
        }

        var_75 (null !== $var_140) {
            $var_262 = $var_55->normalizeAndFilterClientIps($var_262, $var_140);
            $var_263 = $var_55->normalizeAndFilterClientIps($var_263, $var_140);
        }

        var_75 ($var_263 === $var_262 || !$var_262) {
            var_77 $var_263;
        }

        var_75 (!$var_263) {
            var_77 $var_262;
        }

        var_75 (!$var_55->var_51) {
            var_77 var_195 !== $var_140 ? ['0.0.0.0', $var_140] : [];
        }
        $var_55->var_51 = false;

        throw new class_5(sprintf('The request has both a trusted "%s" header and a trusted "%s" header, conflicting with each other. You should either configure your proxy to remove one of them, or configure your project to distrust the offending one.', self::$var_25[self::var_1], self::$var_25[$var_261]));
    }

    var_247 function var_264(array $var_265, $var_140)
    {
        if (!$var_265) {
            var_77 [];
        }
        $var_265[] = $var_140; 
        $var_266 = null;

        foreach ($var_265 as $var_94 => $var_267) {
            if (strpos($var_267, '.')) {
                
                
                $var_116 = strpos($var_267, ':');
                if ($var_116) {
                    $var_265[$var_94] = $var_267 = substr($var_267, 0, $var_116);
                }
            } var_148 (0 === strpos($var_267, '[')) {
                
                $var_116 = strpos($var_267, ']', 1);
                $var_265[$var_94] = $var_267 = substr($var_267, 1, $var_116 - 1);
            }

            var_75 (!filter_var($var_267, var_268)) {
                unset($var_265[$var_94]);

                continue;
            }

            var_75 (IpUtils::checkIp($var_267, self::$var_22)) {
                unset($var_265[$var_94]);

                
                if (null === $var_266) {
                    $var_266 = $var_267;
                }
            }
        }

        
        var_77 $var_265 ? array_reverse($var_265) : [$var_266];
    }
}
