<?php






class class_0 extends var_0
{
    public function fn_0()
    {
        $var_1 = new class_1();

        $var_3->assertCount(1, $var_1->getDefinitions());
        $var_3->assertTrue($var_1->hasDefinition('service_container'));

        $var_8 = $var_1->getDefinition('service_container');
        $var_3->assertInstanceOf(var_11\var_12\var_13\var_14::var_15, $var_8);
        $var_3->assertTrue($var_8->isSynthetic());
        $var_3->assertSame(var_11\var_12\var_13\var_18::var_15, $var_8->getClass());
        $var_3->assertTrue($var_1->hasAlias(var_21\var_22\var_11\var_12\var_13\var_18::var_15));
        $var_3->assertTrue($var_1->hasAlias(var_11\var_12\var_13\var_18::var_15));
    }

    public function fn_1()
    {
        $var_1 = new class_1();
        $var_23 = [
            'foo' => new class_2('Bar\FooClass'),
            'bar' => new class_2('BarClass'),
        ];
        $var_1->setDefinitions($var_23);
        $var_3->assertEquals($var_23, $var_1->getDefinitions(), '->setDefinitions() sets the service definitions');
        $var_3->assertTrue($var_1->hasDefinition('foo'), '->hasDefinition() returns true if a service definition exists');
        $var_3->assertFalse($var_1->hasDefinition('foobar'), '->hasDefinition() returns false if a service definition does not exist');

        $var_1->setDefinition('foobar', $var_28 = new class_2('FooBarClass'));
        $var_3->assertEquals($var_28, $var_1->getDefinition('foobar'), '->getDefinition() returns a service definition if defined');
        $var_3->assertSame($var_1->setDefinition('foobar', $var_28 = new class_2('FooBarClass')), $var_28, '->setDefinition() implements a fluid interface by returning the service reference');

        $var_1->addDefinitions($var_30 = ['foobar' => new class_2('FooBarClass')]);
        $var_3->assertEquals(array_merge($var_23, $var_30), $var_1->getDefinitions(), '->addDefinitions() adds the service definitions');

        try {
            $var_1->getDefinition('baz');
            $var_3->fail('->getDefinition() throws a ServiceNotFoundException if the service definition does not exist');
        } catch (var_32 $var_33) {}
    }

    
    public function fn_2()
    {
        $var_8 = new class_2('stdClass');
        $var_8->setDeprecated(true);

        $var_1 = new class_1();
        $var_1->setDefinition('deprecated_foo', $var_8);
        $var_1->get('deprecated_foo');
    }

    public function fn_3()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'Bar\FooClass');
        $var_3->assertTrue($var_1->hasDefinition('foo'), '->register() registers a new service definition');
        $var_3->assertInstanceOf('Symfony\Component\DependencyInjection\Definition', $var_1->getDefinition('foo'), '->register() returns the newly created Definition instance');
    }

    public function fn_4()
    {
        $var_1 = new class_1();
        $var_1->autowire('foo', 'Bar\FooClass');

        $var_3->assertTrue($var_1->hasDefinition('foo'), '->autowire() registers a new service definition');
        $var_3->assertTrue($var_1->getDefinition('foo')->isAutowired(), '->autowire() creates autowired definitions');
    }

    public function fn_5()
    {
        $var_1 = new class_1();
        $var_3->assertFalse($var_1->has('foo'), '->has() returns false if the service does not exist');
        $var_1->register('foo', 'Bar\FooClass');
        $var_3->assertTrue($var_1->has('foo'), '->has() returns true if a service definition exists');
        $var_1->set('bar', new \var_41());
        $var_3->assertTrue($var_1->has('bar'), '->has() returns true if a service exists');
    }

    
    public function fn_6()
    {
        $var_1 = new class_1();
        $var_1->get('foo');
    }

    public function fn_7()
    {
        $var_1 = new class_1();

        $var_3->assertNull($var_1->get('foo', var_11\var_12\var_13\var_18::var_43), '->get() returns null if the service does not exist and NULL_ON_INVALID_REFERENCE is passed as a second argument');
    }

    
    public function fn_8()
    {
        $var_1 = new class_1();
        $var_1->register('baz', 'stdClass')->setArguments([new class_3('baz')]);
        $var_1->get('baz');
    }

    public function fn_9()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass');

        $var_3->assertTrue($var_1->get('bar') === $var_1->get('bar'), '->get() always returns the same instance if the service is shared');
    }

    public function fn_10()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'stdClass');

        $var_3->assertInternalType('object', $var_1->get('foo'), '->get() returns the service definition associated with the id');
    }

    public function fn_11()
    {
        $var_1 = new class_1();
        $var_1->set('bar', $var_46 = new \var_41());

        $var_3->assertSame($var_46, $var_1->get('bar'), '->get() returns the service associated with the id');
    }

    public function fn_12()
    {
        $var_1 = new class_1();
        $var_1->set('bar', $var_46 = new \var_41());
        $var_1->register('bar', 'stdClass');

        $var_3->assertSame($var_46, $var_1->get('bar'), '->get() returns the service associated with the id even if a definition has been defined');
    }

    public function fn_13()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass')->setShared(false);

        $var_3->assertNotSame($var_1->get('bar'), $var_1->get('bar'));
    }

    
    public function fn_14()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'stdClass')->setSynthetic(true);

        
        try {
            $var_1->get('foo');
        } catch (var_50 $var_33) {}

        
        $var_1->get('foo');
    }

    public function fn_15()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'stdClass');
        $var_1->var_46 = $var_46 = new \var_41();
        $var_1->register('bar', 'stdClass');
        $var_3->assertEquals(
            [
                'service_container',
                'foo',
                'bar',
                'Psr\Container\ContainerInterface',
                'Symfony\Component\DependencyInjection\ContainerInterface',
            ],
            $var_1->getServiceIds(),
            '->getServiceIds() returns all defined service ids'
        );
    }

    public function fn_16()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'stdClass');
        $var_1->setAlias('bar', 'foo');
        $var_3->assertTrue($var_1->hasAlias('bar'), '->hasAlias() returns true if the alias exists');
        $var_3->assertFalse($var_1->hasAlias('foobar'), '->hasAlias() returns false if the alias does not exist');
        $var_3->assertEquals('foo', (string) $var_1->getAlias('bar'), '->getAlias() returns the aliased service');
        $var_3->assertTrue($var_1->has('bar'), '->setAlias() defines a new service');
        $var_3->assertSame($var_1->get('bar'), $var_1->get('foo'), '->setAlias() creates a service that is an alias to another one');

        try {
            $var_1->setAlias('foobar', 'foobar');
            $var_3->fail('->setAlias() throws an InvalidArgumentException if the alias references itself');
        } catch (\var_54 $var_33) {
            $var_3->assertEquals('An alias can not reference itself, got a circular reference on "foobar".', $var_33->getMessage(), '->setAlias() throws an InvalidArgumentException if the alias references itself');
        }

        try {
            $var_1->getAlias('foobar');
            $var_3->fail('->getAlias() throws an InvalidArgumentException if the alias does not exist');
        } catch (\var_54 $var_33) {
            $var_3->assertEquals('The service alias "foobar" does not exist.', $var_33->getMessage(), '->getAlias() throws an InvalidArgumentException if the alias does not exist');
        }
    }

    public function fn_17()
    {
        $var_1 = new class_1();
        $var_1->setAlias('bar', 'foo');
        $var_1->setAlias('foobar', 'foo');
        $var_1->setAlias('moo', new class_4('foo', false));

        $var_56 = $var_1->getAliases();
        $var_3->assertEquals('foo', (string) $var_56['bar']);
        $var_3->assertTrue($var_56['bar']->isPublic());
        $var_3->assertEquals('foo', (string) $var_56['foobar']);
        $var_3->assertEquals('foo', (string) $var_56['moo']);
        $var_3->assertFalse($var_56['moo']->isPublic());

        $var_1->register('bar', 'stdClass');
        $var_3->assertFalse($var_1->hasAlias('bar'));

        $var_1->set('foobar', 'stdClass');
        $var_1->set('moo', 'stdClass');
        $var_3->assertCount(2, $var_1->getAliases(), '->getAliases() does not return aliased services that have been overridden');
    }

    public function fn_18()
    {
        $var_1 = new class_1();
        $var_1->setAliases(['bar' => 'foo', 'foobar' => 'foo']);

        $var_56 = $var_1->getAliases();
        $var_3->assertArrayHasKey('bar', $var_56);
        $var_3->assertArrayHasKey('foobar', $var_56);
    }

    public function fn_19()
    {
        $var_1 = new class_1();
        $var_1->setAliases(['bar' => 'foo']);
        $var_1->addAliases(['foobar' => 'foo']);

        $var_56 = $var_1->getAliases();
        $var_3->assertArrayHasKey('bar', $var_56);
        $var_3->assertArrayHasKey('foobar', $var_56);
    }

    public function fn_20()
    {
        $var_1 = new class_1();
        $var_1->setAlias('alias', 'aliased');
        $var_1->set('aliased', new \var_41());

        $var_1->set('alias', $var_28 = new \var_41());
        $var_3->assertSame($var_28, $var_1->get('alias'), '->set() replaces an existing alias');
    }

    public function fn_21()
    {
        $var_1 = new class_1();

        $var_62 = new class_2('stdClass');
        $var_62->addMethodCall('setBar', [new class_3('bar', var_11\var_12\var_13\var_18::var_64)]);
        $var_1->setDefinition('aliased', $var_62);
        $var_1->setAlias('alias', 'aliased');

        $var_3->assertEquals(new \var_41(), $var_1->get('alias'));
    }

    public function fn_22()
    {
        $var_1 = new class_1();
        $var_1->setResourceTracking(false);
        $var_66 = $var_1->getCompiler()->getPassConfig()->getPasses();
        $var_1->addCompilerPass($var_71 = $var_3->getMockBuilder('Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface')->getMock(), var_11\var_12\var_13\var_74\var_75::var_76, -5);
        $var_1->addCompilerPass($var_77 = $var_3->getMockBuilder('Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface')->getMock(), var_11\var_12\var_13\var_74\var_75::var_76, 10);

        $var_78 = $var_1->getCompiler()->getPassConfig()->getPasses();
        $var_3->assertCount(\var_79($var_78) - 2, $var_66);
        
        $var_3->assertTrue(array_search($var_71, $var_78, true) > array_search($var_77, $var_78, true));
    }

    public function fn_23()
    {
        $var_1 = new class_1();
        $var_1->register('foo1', 'Bar\FooClass')->setFile(var_81.'/Fixtures/includes/foo.php');
        $var_1->register('foo2', 'Bar\FooClass')->setFile(var_81.'/Fixtures/includes/%file%.php');
        $var_1->setParameter('file', 'foo');
        $var_3->assertInstanceOf('\Bar\FooClass', $var_1->get('foo1'), '->createService() requires the file defined by the service definition');
        $var_3->assertInstanceOf('\Bar\FooClass', $var_1->get('foo2'), '->createService() replaces parameters in the file provided by the service definition');
    }

    public function fn_24()
    {
        $var_1 = new class_1();

        $var_1->register('foo1', 'Bar\FooClass')->setFile(var_81.'/Fixtures/includes/foo.php');
        $var_1->getDefinition('foo1')->setLazy(true);

        $var_84 = $var_1->get('foo1');

        $var_3->assertSame($var_84, $var_1->get('foo1'), 'The same proxy is retrieved on multiple subsequent calls');
        $var_3->assertSame('Bar\FooClass', \var_85($var_84));
    }

    public function fn_25()
    {
        $var_1 = new class_1();
        $var_1->register('foo1', '%class%');
        $var_1->setParameter('class', 'stdClass');
        $var_3->assertInstanceOf('\stdClass', $var_1->get('foo1'), '->createService() replaces parameters in the class provided by the service definition');
    }

    public function fn_26()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass');
        $var_1->register('foo1', 'Bar\FooClass')->addArgument(['foo' => '%value%', '%value%' => 'foo', new class_3('bar'), '%%unescape_it%%']);
        $var_1->setParameter('value', 'bar');
        $var_3->assertEquals(['foo' => 'bar', 'bar' => 'foo', $var_1->get('bar'), '%unescape_it%'], $var_1->get('foo1')->var_87, '->createService() replaces parameters and service references in the arguments provided by the service definition');
    }

    public function fn_27()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'Bar\FooClass')->setFactory('Bar\FooClass::getInstance');
        $var_1->register('qux', 'Bar\FooClass')->setFactory(['Bar\FooClass', 'getInstance']);
        $var_1->register('bar', 'Bar\FooClass')->setFactory([new class_2('Bar\FooClass'), 'getInstance']);
        $var_1->register('baz', 'Bar\FooClass')->setFactory([new class_3('bar'), 'getInstance']);

        $var_3->assertTrue($var_1->get('foo')->var_89, '->createService() calls the factory method to create the service instance');
        $var_3->assertTrue($var_1->get('qux')->var_89, '->createService() calls the factory method to create the service instance');
        $var_3->assertTrue($var_1->get('bar')->var_89, '->createService() uses anonymous service as factory');
        $var_3->assertTrue($var_1->get('baz')->var_89, '->createService() uses another service as factory');
    }

    public function fn_28()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass');
        $var_1->register('foo1', 'Bar\FooClass')->addMethodCall('setBar', [['%value%', new class_3('bar')]]);
        $var_1->setParameter('value', 'bar');
        $var_3->assertEquals(['bar', $var_1->get('bar')], $var_1->get('foo1')->var_46, '->createService() replaces the values in the method calls arguments');
    }

    public function fn_29()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass');
        $var_1->register('foo1', 'Bar\FooClass')->addMethodCall('setBar', [['%%unescape_it%%']]);
        $var_1->setParameter('value', 'bar');
        $var_3->assertEquals(['%unescape_it%'], $var_1->get('foo1')->var_46, '->createService() replaces the values in the method calls arguments');
    }

    public function fn_30()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass');
        $var_1->register('foo1', 'Bar\FooClass')->setProperty('bar', ['%value%', new class_3('bar'), '%%unescape_it%%']);
        $var_1->setParameter('value', 'bar');
        $var_3->assertEquals(['bar', $var_1->get('bar'), '%unescape_it%'], $var_1->get('foo1')->var_46, '->createService() replaces the values in the properties');
    }

    public function fn_31()
    {
        $var_1 = new class_1();
        $var_1->register('foo1', 'Bar\FooClass')->setConfigurator('sc_configure');
        $var_1->register('foo2', 'Bar\FooClass')->setConfigurator(['%class%', 'configureStatic']);
        $var_1->setParameter('class', 'BazClass');
        $var_1->register('baz', 'BazClass');
        $var_1->register('foo3', 'Bar\FooClass')->setConfigurator([new class_3('baz'), 'configure']);
        $var_1->register('foo4', 'Bar\FooClass')->setConfigurator([$var_1->getDefinition('baz'), 'configure']);
        $var_1->register('foo5', 'Bar\FooClass')->setConfigurator('foo');

        $var_3->assertTrue($var_1->get('foo1')->var_92, '->createService() calls the configurator');
        $var_3->assertTrue($var_1->get('foo2')->var_92, '->createService() calls the configurator');
        $var_3->assertTrue($var_1->get('foo3')->var_92, '->createService() calls the configurator');
        $var_3->assertTrue($var_1->get('foo4')->var_92, '->createService() calls the configurator');

        try {
            $var_1->get('foo5');
            $var_3->fail('->createService() throws an InvalidArgumentException if the configure callable is not a valid callable');
        } catch (\var_54 $var_33) {
            $var_3->assertEquals('The configure callable for class "Bar\FooClass" is not a callable.', $var_33->getMessage(), '->createService() throws an InvalidArgumentException if the configure callable is not a valid callable');
        }
    }

    public function fn_32()
    {
        $var_1 = new class_1();
        $var_1->register('bar', 'stdClass');
        $var_1
            ->register('lazy_context', 'LazyContext')
            ->setArguments([
                new class_5(['k1' => new class_3('bar'), new class_3('invalid', var_11\var_12\var_13\var_18::var_64)]),
                new class_5([]),
            ])
        ;

        $var_93 = $var_1->get('lazy_context');
        $var_3->assertInstanceOf(var_11\var_12\var_13\var_94\var_95::var_15, $var_93->var_96);
        $var_3->assertInstanceOf(var_11\var_12\var_13\var_94\var_95::var_15, $var_93->var_97);
        $var_3->assertCount(1, $var_93->var_96);
        $var_3->assertCount(0, $var_93->var_97);

        $var_98 = 0;
        foreach ($var_93->var_96 as $var_99 => $var_100) {
            ++$var_98;
            $var_3->assertEquals('k1', $var_99);
            $var_3->assertInstanceOf('\stdClass', $var_100);
        }

        
        $var_3->assertEquals(1, $var_98);

        $var_98 = 0;
        foreach ($var_93->var_97 as $var_99 => $var_100) {
            ++$var_98;
        }

        $var_3->assertEquals(0, $var_98);
    }

    
    public function fn_33()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'Bar\FooClass')->setSynthetic(true);
        $var_1->get('foo');
    }

    public function fn_34()
    {
        $var_1 = new class_1();
        $var_1->setParameter('bar', 'bar');
        $var_1->register('bar', 'BarClass');
        $var_1->register('foo', 'Bar\FooClass')->addArgument(['foo' => new class_6('service("bar").foo ~ parameter("bar")')]);
        $var_3->assertEquals('foobar', $var_1->get('foo')->var_87['foo']);
    }

    public function fn_35()
    {
        $var_1 = new class_1();
        $var_1->register('foo', 'Bar\FooClass');
        $var_3->assertEquals($var_1->get('foo'), $var_1->resolveServices(new class_3('foo')), '->resolveServices() resolves service references to service instances');
        $var_3->assertEquals(['foo' => ['foo', $var_1->get('foo')]], $var_1->resolveServices(['foo' => ['foo', new class_3('foo')]]), '->resolveServices() resolves service references to service instances in nested arrays');
        $var_3->assertEquals($var_1->get('foo'), $var_1->resolveServices(new class_6('service("foo")')), '->resolveServices() resolves expressions');
    }

    
    public function fn_36()
    {
        $var_1 = new class_1();
        $var_1->setDefinition('grandpa', new class_2('stdClass'));
        $var_1->setDefinition('parent', new class_7('grandpa'));
        $var_1->setDefinition('foo', new class_7('parent'));

        $var_1->get('foo');
    }

    public function fn_37()
    {
        $var_1 = new class_1();
        $var_1->setDefinition('foo', new class_8('stdClass'));

        $var_3->assertInstanceOf('stdClass', $var_1->get('foo'));
    }

    public function fn_38()
    {
        $var_102 = new class_1(new class_9(['bar' => 'foo']));
        $var_102->setResourceTracking(false);
        $var_103 = new class_1(new class_9(['foo' => 'bar']));
        $var_102->merge($var_103);
        $var_3->assertEquals(['bar' => 'foo', 'foo' => 'bar'], $var_102->getParameterBag()->all(), '->merge() merges current parameters with the loaded ones');

        $var_102 = new class_1(new class_9(['bar' => 'foo']));
        $var_102->setResourceTracking(false);
        $var_103 = new class_1(new class_9(['foo' => '%bar%']));
        $var_102->merge($var_103);
        $var_102->compile();
        $var_3->assertEquals(['bar' => 'foo', 'foo' => 'foo'], $var_102->getParameterBag()->all(), '->merge() evaluates the values of the parameters towards already defined ones');

        $var_102 = new class_1(new class_9(['bar' => 'foo']));
        $var_102->setResourceTracking(false);
        $var_103 = new class_1(new class_9(['foo' => '%bar%', 'baz' => '%foo%']));
        $var_102->merge($var_103);
        $var_102->compile();
        $var_3->assertEquals(['bar' => 'foo', 'foo' => 'foo', 'baz' => 'foo'], $var_102->getParameterBag()->all(), '->merge() evaluates the values of the parameters towards already defined ones');

        $var_102 = new class_1();
        $var_102->setResourceTracking(false);
        $var_102->register('foo', 'Bar\FooClass');
        $var_102->register('bar', 'BarClass');
        $var_103 = new class_1();
        $var_103->setDefinition('baz', new class_2('BazClass'));
        $var_103->setAlias('alias_for_foo', 'foo');
        $var_102->merge($var_103);
        $var_3->assertEquals(['service_container', 'foo', 'bar', 'baz'], array_keys($var_102->getDefinitions()), '->merge() merges definitions already defined ones');

        $var_56 = $var_102->getAliases();
        $var_3->assertArrayHasKey('alias_for_foo', $var_56);
        $var_3->assertEquals('foo', (string) $var_56['alias_for_foo']);

        $var_102 = new class_1();
        $var_102->setResourceTracking(false);
        $var_102->register('foo', 'Bar\FooClass');
        $var_103->setDefinition('foo', new class_2('BazClass'));
        $var_102->merge($var_103);
        $var_3->assertEquals('BazClass', $var_102->getDefinition('foo')->getClass(), '->merge() overrides already defined services');

        $var_102 = new class_1();
        $var_108 = new class_10();
        $var_108->get('env(Foo)');
        $var_103 = new class_1($var_108);
        $var_3->assertSame(['%env(Bar)%'], $var_103->resolveEnvPlaceholders([$var_108->get('env(Bar)')]));
        $var_102->merge($var_103);
        $var_3->assertEquals(['Foo' => 0, 'Bar' => 1], $var_102->getEnvCounters());

        $var_102 = new class_1();
        $var_103 = new class_1();
        $var_111 = $var_102->registerForAutoconfiguration('AInterface');
        $var_113 = $var_103->registerForAutoconfiguration('BInterface');
        $var_102->merge($var_103);
        $var_3->assertSame(['AInterface' => $var_111, 'BInterface' => $var_113], $var_102->getAutoconfiguredInstanceof());
    }

    
    public function fn_39()
    {
        $var_102 = new class_1();
        $var_103 = new class_1();
        $var_102->registerForAutoconfiguration('AInterface');
        $var_103->registerForAutoconfiguration('AInterface');
        $var_102->merge($var_103);
    }

    public function fn_40()
    {
        $_ENV['DUMMY_ENV_VAR'] = 'du%%y';
        $_SERVER['DUMMY_SERVER_VAR'] = 'ABC';
        $_SERVER['HTTP_DUMMY_VAR'] = 'DEF';

        $var_102 = new class_1();
        $var_102->setParameter('bar', '%% %env(DUMMY_ENV_VAR)% %env(DUMMY_SERVER_VAR)% %env(HTTP_DUMMY_VAR)%');
        $var_102->setParameter('env(HTTP_DUMMY_VAR)', '123');

        $var_3->assertSame('%% du%%%%y ABC 123', $var_102->resolveEnvPlaceholders('%bar%', true));

        unset($_ENV['DUMMY_ENV_VAR'], $_SERVER['DUMMY_SERVER_VAR'], $_SERVER['HTTP_DUMMY_VAR']);
    }

    public function fn_41()
    {
        $_ENV['ANOTHER_DUMMY_ENV_VAR'] = 'dummy';

        $var_115 = ['1' => 'one', '2' => 'two'];

        $var_102 = new class_1();
        $var_102->setParameter('dummy', '%env(ANOTHER_DUMMY_ENV_VAR)%');
        $var_102->setParameter('dummy2', $var_115);

        $var_102->resolveEnvPlaceholders('%dummy%', true);
        $var_102->resolveEnvPlaceholders('%dummy2%', true);

        $var_3->assertInternalType('array', $var_102->resolveEnvPlaceholders('%dummy2%', true));

        foreach ($var_115 as $var_116 => $var_117) {
            $var_3->assertArrayHasKey($var_116, $var_102->resolveEnvPlaceholders('%dummy2%', true));
        }

        unset($_ENV['ANOTHER_DUMMY_ENV_VAR']);
    }

    public function fn_42()
    {
        putenv('DUMMY_ENV_VAR=du%%y');
        $_SERVER['DUMMY_SERVER_VAR'] = 'ABC';
        $_SERVER['HTTP_DUMMY_VAR'] = 'DEF';

        $var_102 = new class_1();
        $var_102->setParameter('env(FOO)', 'Foo');
        $var_102->setParameter('env(DUMMY_ENV_VAR)', 'GHI');
        $var_102->setParameter('bar', '%% %env(DUMMY_ENV_VAR)% %env(DUMMY_SERVER_VAR)% %env(HTTP_DUMMY_VAR)%');
        $var_102->setParameter('foo', '%env(FOO)%');
        $var_102->setParameter('baz', '%foo%');
        $var_102->setParameter('env(HTTP_DUMMY_VAR)', '123');
        $var_102->register('teatime', 'stdClass')
            ->setProperty('foo', '%env(DUMMY_ENV_VAR)%')
            ->setPublic(true)
        ;
        $var_102->compile(true);

        $var_3->assertSame('% du%%y ABC 123', $var_102->getParameter('bar'));
        $var_3->assertSame('Foo', $var_102->getParameter('baz'));
        $var_3->assertSame('du%%y', $var_102->get('teatime')->var_28);

        unset($_SERVER['DUMMY_SERVER_VAR'], $_SERVER['HTTP_DUMMY_VAR']);
        putenv('DUMMY_ENV_VAR');
    }

    public function fn_43()
    {
        putenv('ARRAY={"foo":"bar"}');

        $var_102 = new class_1();
        $var_102->setParameter('foo', '%env(json:ARRAY)%');
        $var_102->compile(true);

        $var_3->assertSame(['foo' => 'bar'], $var_102->getParameter('foo'));

        putenv('ARRAY');
    }

    public function fn_44()
    {
        putenv('DUMMY_ENV_VAR=abc');
        putenv('ARRAY={"foo":"bar"}');

        $var_102 = new class_1();
        $var_102->setParameter('foo', '%env(json:ARRAY)%');
        $var_102->setParameter('bar', '%env(DUMMY_ENV_VAR)%');
        $var_102->compile(true);

        $var_3->assertSame(['foo' => 'bar'], $var_102->getParameter('foo'));
        $var_3->assertSame('abc', $var_102->getParameter('bar'));

        putenv('DUMMY_ENV_VAR');
        putenv('ARRAY');
    }

    
    public function fn_45()
    {
        putenv('ARRAY={"foo":"bar"}');

        $var_102 = new class_1();
        $var_102->setParameter('foo', 'ABC %env(json:ARRAY)%');
        $var_102->compile(true);

        putenv('ARRAY');
    }

    
    public function fn_46()
    {
        $var_102 = new class_1();
        $var_102->setParameter('foo', '%env(FOO)%');
        $var_102->compile(true);
    }

    public function fn_47()
    {
        putenv('DUMMY_FOO=some%foo%');
        putenv('DUMMY_BAR=%bar%');

        $var_102 = new class_1();
        $var_102->setParameter('foo', 'Foo%env(resolve:DUMMY_BAR)%');
        $var_102->setParameter('bar', 'Bar');
        $var_102->setParameter('baz', '%env(resolve:DUMMY_FOO)%');

        $var_102->compile(true);
        putenv('DUMMY_FOO');
        putenv('DUMMY_BAR');

        $var_3->assertSame('someFooBar', $var_102->getParameter('baz'));
    }

    public function fn_48()
    {
        $var_102 = new class_1();
        $var_102->setParameter('env(FAKE)', '123');

        $var_102->register('foo', 'stdClass')
            ->setPublic(true)
            ->setProperties([
                'fake' => '%env(int:FAKE)%',
            ]);

        $var_102->compile(true);

        $var_3->assertSame(123, $var_102->get('foo')->var_121);
    }

    public function fn_49()
    {
        $var_102 = new class_1();
        $var_102->setParameter('env(FAKE)', null);

        $var_102->register('foo', 'stdClass')
            ->setPublic(true)
            ->setProperties([
            'fake' => '%env(int:FAKE)%',
        ]);

        $var_102->compile(true);

        $var_3->assertNull($var_102->get('foo')->var_121);
    }

    public function fn_50()
    {
        $var_102 = include var_81.'/Fixtures/containers/container_env_in_id.php';
        $var_102->compile(true);

        $var_122 = [
            'service_container',
            'foo',
            'bar',
            'bar_%env(BAR)%',
        ];
        $var_3->assertSame($var_122, array_keys($var_102->getDefinitions()));

        $var_122 = [
            var_21\var_22\var_11\var_12\var_13\var_18::var_15 => true,
            var_11\var_12\var_13\var_18::var_15 => true,
            'baz_%env(BAR)%' => true,
            'bar_%env(BAR)%' => true,
        ];
        $var_3->assertSame($var_122, $var_102->getRemovedIds());

        $var_3->assertSame(['baz_bar'], array_keys($var_102->getDefinition('foo')->getArgument(1)));
    }

    
    public function fn_51()
    {
        putenv('DUMMY_ENV_VAR=some%foo%');

        $var_102 = new class_1();
        $var_102->setParameter('foo', '%bar%');
        $var_102->setParameter('bar', '%env(resolve:DUMMY_ENV_VAR)%');

        try {
            $var_102->compile(true);
        } finally {
            putenv('DUMMY_ENV_VAR');
        }
    }

    
    public function fn_52()
    {
        $var_102 = new class_1();
        $var_102->setResourceTracking(false);
        $var_102->compile();
        $var_102->merge(new class_1());
    }

    public function fn_53()
    {
        $var_1 = new class_1();
        $var_1
            ->register('foo', 'Bar\FooClass')
            ->addTag('foo', ['foo' => 'foo'])
            ->addTag('bar', ['bar' => 'bar'])
            ->addTag('foo', ['foofoo' => 'foofoo'])
        ;
        $var_3->assertEquals($var_1->findTaggedServiceIds('foo'), [
            'foo' => [
                ['foo' => 'foo'],
                ['foofoo' => 'foofoo'],
            ],
        ], '->findTaggedServiceIds() returns an array of service ids and its tag attributes');
        $var_3->assertEquals([], $var_1->findTaggedServiceIds('foobar'), '->findTaggedServiceIds() returns an empty array if there is annotated services');
    }

    public function fn_54()
    {
        $var_1 = new class_1();
        $var_1
            ->register('foo', 'Bar\FooClass')
            ->addTag('kernel.event_listener', ['foo' => 'foo'])
            ->addTag('kenrel.event_listener', ['bar' => 'bar'])
        ;
        $var_1->findTaggedServiceIds('kernel.event_listener');
        $var_3->assertEquals(['kenrel.event_listener'], $var_1->findUnusedTags(), '->findUnusedTags() returns an array with unused tags');
    }

    public function fn_55()
    {
        $var_102 = new class_1();
        $var_102->setDefinition('foo', $var_8 = new class_2('Bar\FooClass'));
        $var_102->setAlias('bar', 'foo');
        $var_102->setAlias('foobar', 'bar');
        $var_3->assertEquals($var_8, $var_102->findDefinition('foobar'), '->findDefinition() returns a Definition');
    }

    public function fn_56()
    {
        $var_102 = new class_1();

        $var_102->setResourceTracking(false);
        $var_102->addObjectResource(new \var_130());

        $var_3->assertEmpty($var_102->getResources(), 'No resources get registered without resource tracking');

        $var_102->setResourceTracking(true);
        $var_102->addObjectResource(new \var_130());

        $var_133 = $var_102->getResources();

        $var_3->assertCount(2, $var_133, '2 resources were registered');

        
        $var_134 = end($var_133);

        $var_3->assertInstanceOf('Symfony\Component\Config\Resource\FileResource', $var_134);
        $var_3->assertSame(realpath(var_81.'/Fixtures/includes/classes.php'), realpath($var_134->getResource()));
    }

    
    public function fn_57()
    {
        $var_102 = new class_1();

        $var_102->setResourceTracking(false);
        $var_102->addClassResource(new \var_137('BarClass'));

        $var_3->assertEmpty($var_102->getResources(), 'No resources get registered without resource tracking');

        $var_102->setResourceTracking(true);
        $var_102->addClassResource(new \var_137('BarClass'));

        $var_133 = $var_102->getResources();

        $var_3->assertCount(2, $var_133, '2 resources were registered');

        
        $var_134 = end($var_133);

        $var_3->assertInstanceOf('Symfony\Component\Config\Resource\FileResource', $var_134);
        $var_3->assertSame(realpath(var_81.'/Fixtures/includes/classes.php'), realpath($var_134->getResource()));
    }

    public function fn_58()
    {
        $var_102 = new class_1();

        $var_102->setResourceTracking(false);
        $var_138 = $var_102->getReflectionClass('BarClass');

        $var_3->assertEmpty($var_102->getResources(), 'No resources get registered without resource tracking');

        $var_102->setResourceTracking(true);
        $var_140 = $var_102->getReflectionClass('BarClass');
        $var_141 = $var_102->getReflectionClass('BarClass');

        $var_3->assertNull($var_102->getReflectionClass('BarMissingClass'));

        $var_3->assertEquals($var_138, $var_140);
        $var_3->assertSame($var_140, $var_141);

        $var_133 = $var_102->getResources();

        $var_3->assertCount(3, $var_133, '3 resources were registered');

        $var_3->assertSame('reflection.BarClass', (string) $var_133[1]);
        $var_3->assertSame('BarMissingClass', (string) end($var_133));
    }

    public function fn_59()
    {
        $var_102 = new class_1();

        $var_3->assertNull($var_102->getReflectionClass('int'));
        $var_3->assertNull($var_102->getReflectionClass('float'));
        $var_3->assertNull($var_102->getReflectionClass('string'));
        $var_3->assertNull($var_102->getReflectionClass('bool'));
        $var_3->assertNull($var_102->getReflectionClass('resource'));
        $var_3->assertNull($var_102->getReflectionClass('object'));
        $var_3->assertNull($var_102->getReflectionClass('array'));
        $var_3->assertNull($var_102->getReflectionClass('null'));
        $var_3->assertNull($var_102->getReflectionClass('callable'));
        $var_3->assertNull($var_102->getReflectionClass('iterable'));
        $var_3->assertNull($var_102->getReflectionClass('mixed'));
    }

    public function fn_60()
    {
        $var_102 = new class_1();

        $var_3->assertEmpty($var_102->getResources(), 'No resources get registered without resource tracking');

        $var_102->register('foo', 'BarClass')->setPublic(true);
        $var_102->getDefinition('foo')->setLazy(true);

        $var_102->compile();

        $var_142 = array_filter(
            $var_102->getResources(),
            function (var_143 $var_134) {
                return 'reflection.BarClass' === (string) $var_134;
            }
        );

        $var_3->assertNotEmpty($var_142);
    }

    public function fn_61()
    {
        $var_102 = new class_1();
        $var_102->addResource($var_146 = new class_11(var_81.'/Fixtures/xml/services1.xml'));
        $var_102->addResource($var_147 = new class_11(var_81.'/Fixtures/xml/services2.xml'));
        $var_133 = [];
        foreach ($var_102->getResources() as $var_134) {
            if (false === strpos($var_134, '.php')) {
                $var_133[] = $var_134;
            }
        }
        $var_3->assertEquals([$var_146, $var_147], $var_133, '->getResources() returns an array of resources read for the current configuration');
        $var_3->assertSame($var_102, $var_102->setResources([]));
        $var_3->assertEquals([], $var_102->getResources());
    }

    public function fn_62()
    {
        $var_102 = new class_1();
        $var_149 = new class_13();
        $var_146 = new class_11(var_81.'/Fixtures/xml/services1.xml');
        $var_147 = new class_11(var_81.'/Fixtures/xml/services2.xml');
        $var_150 = new class_14($var_151 = \var_152($var_147));

        $var_3->assertTrue($var_102->fileExists((string) $var_146) && $var_102->fileExists((string) $var_147) && $var_102->fileExists($var_151));

        $var_133 = [];
        foreach ($var_102->getResources() as $var_134) {
            if (false === strpos($var_134, '.php')) {
                $var_133[] = $var_134;
            }
        }

        $var_3->assertEquals([$var_149, $var_146, $var_147, $var_150], $var_133, '->getResources() returns an array of resources read for the current configuration');
    }

    public function fn_63()
    {
        $var_102 = new class_1();
        $var_102->setResourceTracking(false);

        $var_102->registerExtension($var_155 = new \var_156());
        $var_3->assertSame($var_102->getExtension('project'), $var_155, '->registerExtension() registers an extension');

        $var_3->{method_exists($var_3, $var_158 = 'expectException') ? $var_158 : 'setExpectedException'}('LogicException');
        $var_102->getExtension('no_registered');
    }

    public function fn_64()
    {
        $var_155 = $var_3->getMockBuilder('Symfony\\Component\\DependencyInjection\\Extension\\ExtensionInterface')->getMock();
        $var_155->expects($var_3->once())->method('getAlias')->will($var_3->returnValue('project'));
        $var_155->expects($var_3->never())->method('load');

        $var_102 = new class_1();
        $var_102->setResourceTracking(false);
        $var_102->registerExtension($var_155);
        $var_102->compile();
    }

    public function fn_65()
    {
        $var_155 = $var_3->getMockBuilder('Symfony\\Component\\DependencyInjection\\Extension\\ExtensionInterface')->getMock();
        $var_155->expects($var_3->exactly(2))->method('getAlias')->will($var_3->returnValue('project'));
        $var_155->expects($var_3->once())->method('load')->with([['foo' => 'bar']]);

        $var_102 = new class_1();
        $var_102->setResourceTracking(false);
        $var_102->registerExtension($var_155);
        $var_102->loadFromExtension('project', ['foo' => 'bar']);
        $var_102->compile();
    }

    public function fn_66()
    {
        $var_168 = new class_2('BarClass');
        $var_169 = new class_2('BarUserClass', [new class_3('bar')]);
        $var_102 = new class_1();
        $var_102->setResourceTracking(false);

        $var_168->setPublic(false);

        $var_102->addDefinitions([
            'bar' => $var_168,
            'bar_user' => $var_169->setPublic(true),
        ]);

        $var_102->compile();
        $var_3->assertInstanceOf('BarClass', $var_102->get('bar_user')->var_46);
    }

    
    public function fn_67()
    {
        $var_102 = new class_1();
        $var_102->setResourceTracking(false);
        $var_102->register('a', 'stdClass')->setPublic(true);
        $var_102->compile();
        $var_102->set('a', new \var_41());
    }

    public function fn_68()
    {
        $var_102 = new class_1();
        $var_102->compile();
        $var_102->set('a', $var_28 = new \var_41());
        $var_3->assertSame($var_28, $var_102->get('a'));
    }

    public function fn_69()
    {
        $var_102 = new class_1();
        $var_170 = new class_2('stdClass');
        $var_170->setSynthetic(true)->setPublic(true);
        $var_102->setDefinition('a', $var_170);
        $var_102->compile();
        $var_102->set('a', $var_146 = new \var_41());
        $var_3->assertEquals($var_146, $var_102->get('a'));
    }

    
    public function fn_70()
    {
        $var_102 = new class_1();
        $var_102->setResourceTracking(false);
        $var_102->compile();
        $var_102->setDefinition('a', new class_2());
    }

    public function fn_71()
    {
        $var_102 = new class_1();

        $var_171 = $var_102->getExtensionConfig('foo');
        $var_3->assertEmpty($var_171);

        $var_173 = ['foo' => 'bar'];
        $var_102->prependExtensionConfig('foo', $var_173);
        $var_171 = $var_102->getExtensionConfig('foo');
        $var_3->assertEquals([$var_173], $var_171);

        $var_175 = ['ding' => 'dong'];
        $var_102->prependExtensionConfig('foo', $var_175);
        $var_171 = $var_102->getExtensionConfig('foo');
        $var_3->assertEquals([$var_175, $var_173], $var_171);
    }

    public function fn_72()
    {
        $var_102 = new class_1();

        $var_176 = new class_2('AbstractClass');
        $var_176->setAbstract(true)->setPublic(true);

        $var_102->setDefinition('abstract_service', $var_176);
        $var_102->setAlias('abstract_alias', 'abstract_service')->setPublic(true);

        $var_102->compile();

        $var_3->assertSame('abstract_service', (string) $var_102->getAlias('abstract_alias'));
    }

    public function fn_73()
    {
        $var_178 = new class_15($var_102 = new class_1());
        $var_178->load(function (var_2 $var_102) {
            $var_102->set('a', new \var_180());
            $var_8 = new class_2('BazClass');
            $var_8->setLazy(true);
            $var_8->setPublic(true);
            $var_102->setDefinition('a', $var_8);
        });

        $var_102->setResourceTracking(true);

        $var_102->compile();

        $var_181 = new \var_182($var_102, 'resources');
        $var_181->setAccessible(true);
        $var_133 = $var_181->getValue($var_102);

        $var_185 = false;
        foreach ($var_133 as $var_134) {
            if ('reflection.BazClass' === (string) $var_134) {
                $var_185 = true;
                break;
            }
        }

        $var_3->assertTrue($var_185);
    }

    public function fn_74()
    {
        $var_102 = new class_1();

        $var_8 = new class_2('BarClass');

        $var_102->register('bar_user', 'BarUserClass')
            ->addArgument($var_8)
            ->setProperty('foo', $var_8);

        $var_102->register('bar', 'BarClass')
            ->setProperty('foo', $var_8)
            ->addMethodCall('setBaz', [$var_8]);

        $var_186 = $var_102->get('bar_user');
        $var_46 = $var_102->get('bar');

        $var_3->assertSame($var_186->var_28, $var_186->var_46);
        $var_3->assertSame($var_46->var_28, $var_46->getBaz());
        $var_3->assertNotSame($var_46->var_28, $var_186->var_28);
    }

    
    public function fn_75()
    {
        $var_1 = new class_1();

        $var_1->setAliases([
            'foo' => new class_4('app.test_class'),
            'app.test_class' => new class_4('App\\TestClass'),
            'App\\TestClass' => new class_4('app.test_class'),
        ]);

        $var_1->findDefinition('foo');
    }

    public function fn_76()
    {
        $var_102 = new class_1();
        $var_102->register('foo', 'stdClass');
        $var_102->register('bar', 'MethodCallClass')
            ->setPublic(true)
            ->setProperty('simple', 'bar')
            ->setProperty('complex', new class_3('foo'))
            ->addMethodCall('callMe');

        $var_102->compile();

        $var_3->assertTrue($var_102->get('bar')->callPassed(), '->compile() initializes properties before method calls');
    }

    public function fn_77()
    {
        $var_102 = new class_1();

        $var_102->register(var_149::var_15)->setPublic(true);
        $var_189 = $var_102->register('b', var_190.'\B');
        $var_189->setAutowired(true);
        $var_189->setPublic(true);

        $var_102->compile();

        $var_3->assertEquals(var_149::var_15, (string) $var_102->getDefinition('b')->getArgument(0));
    }

    public function fn_78()
    {
        $var_102 = new class_1();

        $var_192 = $var_102->register('Acme\UnknownClass');
        $var_193 = $var_102->register(var_11\var_12\var_13\var_194\var_195\var_196::var_15);
        $var_102->compile();

        $var_3->assertSame('Acme\UnknownClass', $var_192->getClass());
        $var_3->assertEquals(var_11\var_12\var_13\var_194\var_195\var_196::var_15, $var_193->getClass());
    }

    
    public function fn_79()
    {
        $var_102 = new class_1();

        $var_8 = $var_102->register(\var_197::var_15);
        $var_102->compile();
    }

    
    public function fn_80()
    {
        $var_102 = new class_1();

        $var_102->register('\\'.\var_197::var_15);
        $var_102->compile();
    }

    
    public function fn_81()
    {
        $var_102 = new class_1();

        $var_102->register('\\'.var_198::var_15);
        $var_102->compile();
    }

    
    public function fn_82()
    {
        $var_102 = new class_1();

        $var_8 = $var_102->register('123_abc');
        $var_102->compile();
    }

    
    public function fn_83()
    {
        $var_102 = new class_1();

        $var_8 = $var_102->register('\\foo');
        $var_102->compile();
    }

    public function fn_84()
    {
        $var_102 = new class_1();
        $var_102->register('foo_service', var_11\var_12\var_13\var_199::var_15)
            ->setPublic(true)
            ->addArgument([
                'bar' => new class_17(new class_3('bar_service')),
                'baz' => new class_17(new class_18('baz_service', 'stdClass')),
            ])
        ;
        $var_102->register('bar_service', 'stdClass')->setArguments([new class_3('baz_service')])->setPublic(true);
        $var_102->register('baz_service', 'stdClass')->setPublic(false);
        $var_102->compile();

        $var_3->assertInstanceOf(var_11\var_12\var_13\var_199::var_15, $var_28 = $var_102->get('foo_service'));
        $var_3->assertSame($var_102->get('bar_service'), $var_28->get('bar'));
    }

    public function fn_85()
    {
        $var_102 = include var_81.'/Fixtures/containers/container_uninitialized_ref.php';
        $var_102->compile();

        $var_46 = $var_102->get('bar');

        $var_3->assertNull($var_46->var_84);
        $var_3->assertNull($var_46->var_200);
        $var_3->assertNull($var_46->var_201);
        $var_3->assertNull($var_46->closures[0]());
        $var_3->assertNull($var_46->closures[1]());
        $var_3->assertNull($var_46->closures[2]());
        $var_3->assertSame([], iterator_to_array($var_46->var_202));

        $var_102 = include var_81.'/Fixtures/containers/container_uninitialized_ref.php';
        $var_102->compile();

        $var_102->get('foo1');
        $var_102->get('baz');

        $var_46 = $var_102->get('bar');

        $var_3->assertEquals(new \var_41(), $var_46->var_84);
        $var_3->assertNull($var_46->var_200);
        $var_3->assertEquals(new \var_41(), $var_46->var_201);
        $var_3->assertEquals(new \var_41(), $var_46->closures[0]());
        $var_3->assertNull($var_46->closures[1]());
        $var_3->assertEquals(new \var_41(), $var_46->closures[2]());
        $var_3->assertEquals(['foo1' => new \var_41(), 'foo3' => new \var_41()], iterator_to_array($var_46->var_202));
    }

    
    public function fn_86($var_203)
    {
        $var_102 = include var_81.'/Fixtures/containers/container_almost_circular.php';

        $var_28 = $var_102->get('foo');
        $var_3->assertSame($var_28, $var_28->var_46->var_204->var_28);

        $var_200 = $var_102->get('foo2');
        $var_3->assertSame($var_200, $var_200->var_46->var_204->var_28);

        $var_3->assertSame([], (array) $var_102->get('foobar4'));

        $var_205 = $var_102->get('foo5');
        $var_3->assertSame($var_205, $var_205->var_46->var_28);

        $var_206 = $var_102->get('manager');
        $var_3->assertEquals(new \var_41(), $var_206);

        $var_206 = $var_102->get('manager2');
        $var_3->assertEquals(new \var_41(), $var_206);

        $var_207 = $var_102->get('foo6');
        $var_3->assertEquals((object) ['bar6' => (object) []], $var_207);

        $var_3->assertInstanceOf(\var_41::var_15, $var_102->get('root'));
    }

    public function fn_87()
    {
        yield ['public'];
        yield ['private'];
    }

    public function fn_88()
    {
        $var_102 = new class_1();
        $var_111 = $var_102->registerForAutoconfiguration('AInterface');
        $var_113 = $var_102->registerForAutoconfiguration('BInterface');
        $var_3->assertSame(['AInterface' => $var_111, 'BInterface' => $var_113], $var_102->getAutoconfiguredInstanceof());

        
        $var_3->assertSame($var_111, $var_102->registerForAutoconfiguration('AInterface'));
    }

    
    public function fn_89()
    {
        $var_102 = new class_1();
        $var_102->register('foo', 'stdClass')
            ->setPublic(false)
            ->setDeprecated(true);
        $var_102->register('bar', 'stdClass')
            ->setPublic(true)
            ->setProperty('foo', new class_3('foo'));

        $var_102->compile();

        $var_102->get('bar');
    }

    
    public function fn_90()
    {
        $var_102 = new class_1(new class_9(['foo' => 'bar']));
        $var_102->register('foo', 'stdClass')
            ->setPublic(true)
            ->setProperty('foo', '%FOO%');

        $var_102->compile();

        $var_3->assertSame('bar', $var_102->get('foo')->var_28);
    }

    public function fn_91()
    {
        $var_102 = new class_1();
        $var_102->register('class.via.bindings', var_11\var_12\var_13\var_194\var_195\var_196::var_15)->setArguments([
            'via-bindings',
        ]);
        $var_102->register('class.via.argument', var_11\var_12\var_13\var_194\var_195\var_196::var_15)->setArguments([
            'via-argument',
        ]);
        $var_102->register('foo', var_11\var_12\var_13\var_194\var_195\var_208::var_15)->setPublic(true)->setBindings([
            var_11\var_12\var_13\var_194\var_195\var_196::var_15 => new class_3('class.via.bindings'),
            '$token' => '1234',
        ])->setArguments([
            '$class1' => new class_3('class.via.argument'),
        ]);

        $var_3->assertSame(['service_container', 'class.via.bindings', 'class.via.argument', 'foo', 'Psr\Container\ContainerInterface', 'Symfony\Component\DependencyInjection\ContainerInterface'], $var_102->getServiceIds());

        $var_102->compile();

        $var_3->assertSame('via-argument', $var_102->get('foo')->var_210->var_211);
        $var_3->assertSame('via-bindings', $var_102->get('foo')->var_212->var_211);
    }

    public function fn_92()
    {
        $var_102 = new class_1();
        $var_102->register('foo', 'stdClass')->setPublic(true)->setSynthetic(true);
        $var_102->register('bar', 'stdClass')->setPublic(true)->setShared(false)
            ->setProperty('foo', new class_3('foo', var_11\var_12\var_13\var_18::var_213));

        $var_102->compile();

        $var_3->assertEquals((object) ['foo' => null], $var_102->get('bar'));

        $var_102->set('foo', (object) [123]);
        $var_3->assertEquals((object) ['foo' => (object) [123]], $var_102->get('bar'));
    }

    public function fn_93()
    {
        $var_102 = new class_1();
        $var_102->register('foo', 'stdClass')
            ->setPublic(false)
            ->setProperty('bar', new class_3('foo'));
        $var_102->register('baz', 'stdClass')
            ->setPublic(false)
            ->setProperty('inner', new class_3('baz.inner'))
            ->setDecoratedService('foo');

        $var_102->compile();

        $var_3->assertSame(['service_container'], array_keys($var_102->getDefinitions()));
    }
}

class class_16
{
}

class class_12
{
}

class class_19
{
    public function fn_94(var_149 $var_146)
    {
    }
}
