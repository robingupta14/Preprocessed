
import var_0.var_1.var_2.var_3.var_4.var_5;
import var_0.var_1.var_2.var_6.var_7;
import var_8.var_9.var_10.var_11.var_12;
import var_8.var_9.var_10.var_13.var_14;
import var_8.var_15.var_16.var_17;
import var_8.var_18.var_19;
import var_8.var_18.var_20;
import var_8.var_18.var_21;
import var_8.var_18.var_22;
import var_8.var_23.var_24.var_25;
import var_8.var_23.var_24.var_26;
import var_8.var_23.var_24.var_27;
import var_8.var_23.var_24.var_28;
import var_8.var_23.var_24.var_29.var_30;
import var_8.var_23.var_24.var_29.var_31;
import var_8.var_23.var_24.var_32.var_33;
import var_8.var_23.var_24.var_32.var_34.var_35.var_36;
import var_8.var_23.var_24.var_37.var_38.var_39;
import var_8.var_23.var_24.var_37.var_38.var_40;
import var_8.var_23.var_24.var_37.var_38.var_41;
import var_8.var_23.var_24.var_37.var_38.var_42.var_43;
import var_8.var_23.var_24.var_37.var_38.var_42.var_44;
import var_8.var_23.var_24.var_37.var_38.var_45.var_46;
import var_8.var_23.var_24.var_47.var_48.var_49;
import var_8.var_23.var_24.var_50.var_18.var_51;
import var_8.var_52.var_53;
import var_8.var_52.var_54;
import var_8.var_52.var_55;
import var_8.var_56.var_57.var_58.var_59.var_60;
import var_8.var_56.var_61.var_62;
import var_8.var_56.var_34.var_63;
import var_8.var_56.var_34.var_64;
import var_8.var_56.var_65.var_66;
import var_8.var_56.var_67.var_68.var_59.var_69;
import var_8.var_56.var_67.var_68.var_59.var_70;
import var_8.var_56.var_67.var_68.var_59.var_71;
import var_8.var_56.var_67.var_68.var_59.var_72;
import var_8.var_56.var_67.var_68.var_59.var_73;
import var_8.var_56.var_67.var_68.var_59.var_74;

import var_75.var_11.var_76;
import var_75.var_11.var_77;
import var_75.var_11.var_78;
import var_75.var_11.var_79;
import var_75.var_11.var_80;
import var_75.var_11.var_81;
import var_75.var_11.var_82;
import var_75.var_11.var_83;
import var_75.var_0.var_84;
import var_75.var_0.var_85;
import var_75.var_0.var_86;
import var_75.var_0.var_87;
import var_75.var_0.var_88;
import var_75.var_0.var_89;
import var_75.var_90.var_91.var_92;
import var_75.var_16.var_93;
import var_75.var_16.var_94;
import var_75.var_16.var_95;
import var_75.var_16.var_96;
import var_75.var_16.var_97;
import var_75.var_16.var_98;
import var_75.var_16.var_99.var_100;
import var_75.var_16.var_101.var_102;
import var_75.var_16.var_101.var_103;
import var_104.var_37.var_105;
import var_104.var_37.var_34.var_106;
import var_104.var_37.var_34.var_107;

import static var_8.var_23.var_24.var_37.var_108.var_109;


@var_66
public class var_110 extends BaseMapServlet {

    
    public static final String var_111 = "/capabilities.json";
    
    public static final String var_112 = "/apps.json";
    
    public static final String var_113 = "/exampleRequest.json";
    
    public static final String var_114 = "/buildreport";
    
    public static final String var_115 = "/status";
    
    public static final String var_116 = "/cancel";
    
    public static final String var_117 = "/report";
    
    public static final String var_118 = "/fonts";
    
    public static final String var_119 = "error";
    
    public static final String var_120 = "app";

    
    
    public static final String var_121 = "done";
    
    public static final String var_122 = "status";
    
    public static final String var_123 = "elapsedTime";
    
    public static final String var_124 = "waitingTime";
    
    public static final String var_125 = "ref";
    
    public static final String var_126 = "statusURL";
    
    public static final String var_127 = "downloadURL";
    
    public static final String var_128 = "outputFormat";
    
    public static final String var_129 = "attributes";
    
    public static final String var_130 = "requestHeaders";
    private static final Logger var_131 = var_54.var_132(MapPrinterServlet.class);
    private static final Pattern var_133 = var_103.var_134("\\$\\{(\\S+)}");
    private static final int var_135 = 4;
    private static final List<String> var_136 = var_93.var_137(
            "X-Request-ID",
            "X-Correlation-ID",
            "Request-ID",
            "X-Varnish",
            "X-Amzn-Trace-Id"
    );

    static {
        var_49.var_138();
    }

    private final JobManager var_139;
    private final List<ReportLoader> var_140;
    private final MapPrinterFactory var_141;
    private final ApplicationContext var_61;
    private final ServletInfo var_142;
    private final MapPrinterFactory var_143;

    private long var_144 = var_44.var_145;

    @var_60
    public var_110(
            final JobManager param_3, final List<ReportLoader> param_4,
            final MapPrinterFactory param_5, final ApplicationContext param_2,
            final ServletInfo param_6, final MapPrinterFactory param_7) {
        this.var_139 = var_139;
        this.var_140 = var_140;
        this.var_141 = var_141;
        this.var_61 = var_61;
        this.var_142 = var_142;
        this.var_143 = var_143;
    }

    
    private static PJsonObject method_0(
            final String param_9, final HttpServletResponse param_10) {

        try {
            if (var_147 == null) {
                var_149(var_148,
                      "Missing post data.  The post payload must either be a form post with a spec " +
                              "parameter or " +
                              "must be a raw json post with the request.", var_64.var_150);
                return null;
            }

            String var_151 = var_147;
            if (!var_151.var_152("spec=") && !var_151.var_152("{")) {
                try {
                    var_151 = var_88.var_153(var_151, var_25.var_154);
                } catch (UnsupportedEncodingException var_155) {}
            }
            if (var_151.var_152("spec=")) {
                var_151 = var_151.var_156("spec=".var_157());
            }


            try {
                return var_27.var_158(var_151);
            } catch (RuntimeException var_155) {} catch (UnsupportedEncodingException var_159) {}
            }
        } catch (RuntimeException var_155) {}", requestDataRaw);
            throw e;
        }
    }

    
    private static String maybeAddRequestId(final String ref, final HttpServletRequest request) {
        final Optional<String> headerName =
                REQUEST_ID_HEADERS.stream().filter(h -> request.getHeader(h) != null).findFirst();
        return headerName.map(
            s -> ref + "@" + var_160.var_161(var_162).var_163("[^a-zA-Z0-9._:-]", "_")
        ).var_164(var_165);
    }

    
    @var_71(var_166 = "/{appId}" + var_115 + "/{referenceId:\\S+}.json", var_167 = var_72.var_168)
    public final void method_1(
            @var_169("unused") @var_69 final String param_14,
            @var_69 final String param_15,
            final HttpServletRequest param_16,
            final HttpServletResponse param_17) {
        var_174(var_171, var_172, var_173);
    }

    
    @var_71(var_166 = var_115 + "/{referenceId:\\S+}.json", var_167 = var_72.var_168)
    public final void method_2(
            @var_69 final String param_15,
            final HttpServletRequest param_16,
            final HttpServletResponse param_17) {
        var_55.var_175(var_33.var_176, var_171);
        var_177(var_173);
        try {
            PrintJobStatus var_178 = this.var_139.var_174(var_171);

            var_179(var_173);
            try (PrintWriter var_180 = var_173.var_181()) {
                JSONWriter var_18 = new JSONWriter(var_180);
                var_18.var_182();
                {
                    var_18.var_183(var_121).var_166(var_178.var_184());
                    var_18.var_183(var_122).var_166(var_178.var_174().var_185().var_186());
                    var_18.var_183(var_123).var_166(var_178.var_187());
                    var_18.var_183(var_124).var_166(var_178.var_188());
                    if (!var_14.var_189(var_178.var_190())) {
                        var_18.var_183(var_119).var_166(var_178.var_190());
                    }

                    var_191(var_172, var_171, var_18);
                }
                var_18.var_192();
            }
        } catch (JSONException | IOException var_155) {
            throw var_26.var_193(var_155);
        } catch (NoSuchReferenceException var_155) {}
    }

    
    @var_71(var_166 = "/{appId}" + var_116 + "/{referenceId:\\S+}", var_167 = var_72.var_194)
    public final void method_4(
            @var_169("unused") @var_69 final String param_14,
            @var_69 final String param_15,
            final HttpServletResponse param_17) {
        var_195(var_171, var_173);
    }

    
    @var_71(var_166 = var_116 + "/{referenceId:\\S+}", var_167 = var_72.var_194)
    public final void method_5(
            @var_69 final String param_15,
            final HttpServletResponse param_17) {
        var_55.var_175(var_33.var_176, var_171);
        var_177(var_173);
        try {
            this.var_139.var_195(var_171);
        } catch (NoSuchReferenceException var_155) {}
    }

    
    @var_71(var_166 = "/{appId}" + var_117 + ".{format:\\w+}", var_167 = var_72.var_196)
    public final void method_6(
            @var_69 final String param_14,
            @var_69 final String param_18,
            @var_70 final String param_11,
            final HttpServletRequest param_19,
            final HttpServletResponse param_20) throws NoSuchAppException {
        var_177(var_200);
        String var_165 = var_201(var_170, var_198, var_151, var_199,
                                             var_200);
        if (var_165 == null) {
            var_149(var_200, "Failed to create a print job", var_64.var_150);
            return;
        }

        var_200.var_179("application/json; charset=utf-8");
        try (PrintWriter var_180 = var_200.var_181()) {
            JSONWriter var_18 = new JSONWriter(var_180);
            var_18.var_182();
            {
                var_18.var_183(var_125).var_166(var_165);
                String var_202 = var_203(var_199) + var_115 + "/" + var_165 + ".json";
                var_18.var_183(var_126).var_166(var_202);
                var_191(var_199, var_165, var_18);
            }
            var_18.var_192();
        } catch (JSONException | IOException var_155) {
            var_131.var_204("Error generating the JSON response", var_155);
        }
    }

    
    @var_71(var_166 = "/{appId}" + var_117 + "/{referenceId:\\S+}", var_167 = var_72.var_168)
    public final void method_7(
            @var_169("unused") @var_69 final String param_14,
            @var_69 final String param_15,
            @var_73(var_166 = "inline", var_205 = "false") final boolean param_21,
            final HttpServletResponse param_22)
            throws IOException, ServletException {
        var_208(var_171, var_206, var_207);
    }

    
    @var_71(var_166 = var_117 + "/{referenceId:\\S+}", var_167 = var_72.var_168)
    public final void method_8(
            @var_69 final String param_15,
            @var_73(var_166 = "inline", var_205 = "false") final boolean param_21,
            final HttpServletResponse param_22)
            throws IOException, ServletException {
        var_55.var_175(var_33.var_176, var_171);
        var_177(var_207);
        var_209(var_171, var_207, new HandleReportLoadResult<Void>() {

            @var_210
            public Void method_9(
                    final HttpServletResponse param_10, final String param_15) {
                var_149(var_148, "Error getting print with ref=" + var_171 +
                              ": unknown reference",
                      var_64.var_211);
                return null;
            }

            @var_210
            public Void method_10(
                    final HttpServletResponse param_10, final String param_15) {
                var_149(var_148, "Error getting print with ref=" + var_171 +
                              " can not be loaded",
                      var_64.var_211);
                return null;
            }

            @var_210
            public Void method_11(
                    final PrintJobStatus param_23, final HttpServletResponse param_10,
                    final URI param_24, final ReportLoader param_1) throws IOException {
                var_214(var_212, var_148, var_45, var_213, var_206);
                return null;
            }

            @var_210
            public Void method_13(
                    final PrintJobStatus param_25, final HttpServletResponse param_10) {
                var_149(var_148, var_215.var_190(), var_64.var_150);
                return null;
            }

            @var_210
            public Void method_14(
                    final HttpServletResponse param_10, final String param_15) {
                var_149(var_148, "Report has not yet completed processing", var_64.var_216);
                return null;
            }
        });
    }

    
    @var_71(var_166 = var_117 + ".{format:\\w+}", var_167 = var_72.var_196)
    public final void method_6(
            @var_69 final String param_18,
            @var_70 final String param_11,
            final HttpServletRequest param_19,
            final HttpServletResponse param_20) throws NoSuchAppException {
        var_177(var_200);
        PJsonObject var_217 = var_146(var_151, var_200);
        if (var_217 == null) {
            return;
        }
        final String var_170 = var_217.var_218(var_120, var_109);
        var_197(var_170, var_198, var_151, var_199, var_200);
    }

    
    @var_71(var_166 = "/{appId}" + var_114 + ".{format:\\w+}", var_167 = var_72.var_196)
    public final void method_15(
            @var_69 final String param_14,
            @var_69 final String param_18,
            @var_70 final String param_11,
            @var_73(var_166 = "inline", var_205 = "false") final boolean param_21,
            final HttpServletRequest param_19,
            final HttpServletResponse param_20)
            throws IOException, ServletException, InterruptedException, NoSuchAppException {
        var_177(var_200);

        String var_165 = var_201(var_170, var_198, var_151, var_199,
                                             var_200);
        if (var_165 == null) {
            var_149(var_200, "Failed to create a print job", var_64.var_150);
            return;
        }

        final HandleReportLoadResult<Boolean> var_220 = new HandleReportLoadResult<Boolean>() {

            @var_210
            public Boolean method_9(
                    final HttpServletResponse param_10, final String param_15) {
                var_149(var_148, "Print with ref=" + var_171 + " unknown",
                      var_64.var_211);
                return true;
            }

            @var_210
            public Boolean method_10(
                    final HttpServletResponse param_10, final String param_15) {
                var_149(var_148, "Print with ref=" + var_171 + " can not be loaded",
                      var_64.var_211);
                return true;
            }

            @var_210
            public Boolean method_11(
                    final PrintJobStatus param_23,
                    final HttpServletResponse param_10,
                    final URI param_24, final ReportLoader param_1) throws IOException {
                var_214(var_212, var_148, var_45, var_213, var_206);
                return true;
            }

            @var_210
            public Boolean method_13(
                    final PrintJobStatus param_25, final HttpServletResponse param_10) {
                var_149(var_148, var_215.var_190(), var_64.var_150);
                return true;
            }

            @var_210
            public Boolean method_14(
                    final HttpServletResponse param_10, final String param_15) {
                return false;
            }
        };


        boolean var_184 = false;
        long var_221 = var_222.var_223();
        final long var_224 = var_100.var_225.var_226(this.var_144);
        while (!var_184 && var_222.var_223() - var_221 < var_224) {
            var_227.var_228(var_100.var_225.var_226(1));
            var_184 = var_209(var_165, var_200, var_220);
        }
    }

    
    @var_71(var_166 = var_114 + ".{format:\\w+}", var_167 = var_72.var_196)
    public final void method_16(
            @var_69 final String param_18,
            @var_70 final String param_11,
            @var_73(var_166 = "inline", var_205 = "false") final boolean param_21,
            final HttpServletRequest param_19,
            final HttpServletResponse param_20)
            throws IOException, ServletException, InterruptedException, NoSuchAppException {
        var_177(var_200);
        PJsonObject var_217 = var_146(var_151, var_200);
        if (var_217 == null) {
            return;
        }
        String var_170 = var_217.var_218(var_120, var_109);
        var_219(var_170, var_198, var_151, var_206, var_199, var_200);
    }

    
    @var_71(var_166 = var_112, var_167 = var_72.var_168)
    public final void method_17(
            final HttpServletResponse param_26) throws ServletException,
            IOException {
        var_55.var_230(var_33.var_176);
        var_231(var_229);
        Set<String> var_232 = this.var_141.var_233();

        var_179(var_229);
        try (PrintWriter var_180 = var_229.var_181()) {
            JSONWriter var_18 = new JSONWriter(var_180);
            try {
                var_18.var_234();
                for (String var_170: var_232) {
                    var_18.var_166(var_170);
                }
                var_18.var_235();
            } catch (JSONException var_155) {}
        }
    }

    
    @var_71(var_166 = var_111, var_167 = var_72.var_168)
    public final void method_18(
            @var_73(var_166 = "pretty", var_205 = "false") final boolean param_27,
            final HttpServletRequest param_12,
            final HttpServletResponse param_28) throws ServletException,
            IOException {
        var_236(var_109, var_237, var_160, var_238);
    }

    
    @var_71(var_166 = "/{appId}" + var_111, var_167 = var_72.var_168)
    public final void method_18(
            @var_69 final String param_14,
            @var_73(var_166 = "pretty", var_205 = "false") final boolean param_27,
            final HttpServletRequest param_12,
            final HttpServletResponse param_28) throws ServletException,
            IOException {
        var_55.var_230(var_33.var_176);
        var_231(var_238);
        MapPrinter var_239;
        try {
            var_239 = this.var_141.var_240(var_170);
            if (!var_241(var_160, var_239)) {
                var_149(var_238, "Invalid referer", var_64.var_242);
                return;
            }
        } catch (NoSuchAppException var_155) {}

        var_179(var_238);

        final ByteArrayOutputStream var_243 = new ByteArrayOutputStream();

        try (Writer var_180 = var_237 ? new OutputStreamWriter(var_243, var_25.var_244) :
                var_238.var_181()) {
            JSONWriter var_18 = new JSONWriter(var_180);
            try {
                var_18.var_182();
                {
                    var_18.var_183(var_120).var_166(var_170);
                    var_239.var_245(var_18);
                }
                {
                    var_18.var_183("formats");
                    Set<String> var_246 = var_239.var_247();
                    var_18.var_234();
                    for (String var_198: var_246) {
                        var_18.var_166(var_198);
                    }
                    var_18.var_235();
                }
                var_18.var_192();
            } catch (JSONException var_155) {}
        }

        if (var_237) {
            final JSONObject var_248 =
                    new JSONObject(new String(var_243.var_249(), var_25.var_244));
            var_238.var_250().var_24(var_248.var_185(var_135));
        }
    }

    
    @var_71(var_166 = var_113, var_167 = var_72.var_168)
    public final void method_19(
            final HttpServletRequest param_12,
            final HttpServletResponse param_29) throws IOException {
        var_251(var_109, var_160, var_252);
    }

    
    @var_71(var_166 = "{appId}" + var_113, var_167 = var_72.var_168)
    public final void method_19(
            @var_69 final String param_14,
            final HttpServletRequest param_12,
            final HttpServletResponse param_29) throws
            IOException {
        var_55.var_230(var_33.var_176);
        var_231(var_252);
        try {
            final MapPrinter var_253 = this.var_141.var_240(var_170);
            if (!var_241(var_160, var_253)) {
                var_149(var_252, "Invalid referer", var_64.var_242);
                return;
            }
            final String var_254 = "requestData";
            final File[] var_255 =
                    var_253.var_256().var_257().var_258(
                            (var_259, var_260) -> var_260.var_152(var_254) && var_260.var_261(".json"));
            if (var_255 == null) {
                var_149(var_252, "Cannot find the config directory", var_64.var_211);
                return;
            }
            JSONObject var_262 = new JSONObject();

            for (File var_263: var_255) {
                if (var_263.var_264()) {
                    String var_151 = new String(var_92.var_265(var_263.var_266()),
                                                    var_25.var_244);
                    try {
                        final JSONObject var_248 = new JSONObject(var_151);
                        var_248.var_230(var_128);
                        var_248.var_230(var_120);
                        var_151 = var_248.var_185(var_135);

                        var_179(var_252);
                    } catch (JSONException var_155) {}

                    String var_260 = var_263.var_267();
                    var_260 = var_260.var_156(var_254.var_157());
                    if (var_260.var_152("-")) {
                        var_260 = var_260.var_156(1);
                    }
                    var_260 = var_12.var_268(var_260);
                    var_260 = var_260.var_269();
                    if (var_260.var_189()) {
                        var_260 = var_12.var_268(var_263.var_267());
                    }

                    try {
                        var_262.var_175(var_260, var_151);
                    } catch (JSONException var_155) {}
                }
            }
            final String var_270;
            try {
                var_270 = var_262.var_185(var_135);
            } catch (JSONException var_155) {}

            try (PrintWriter var_180 = var_252.var_181()) {
                var_180.var_271(var_270);
            }
        } catch (NoSuchAppException var_155) {}
    }

    
    @var_71(var_166 = var_118)
    @var_74
    public final String method_20() {
        var_55.var_230(var_33.var_176);
        final JSONArray var_272 = new JSONArray();
        final List<FontFamily> var_273 =
                var_7.var_274().var_275(FontFamily.class);
        for (FontFamily var_276: var_273) {
            var_272.var_175(var_276.var_267());
        }
        return var_272.var_185();
    }

    
    public final void method_21(final long param_8) {
        this.var_144 = var_144;
    }

    
    private void method_12(
            final PrintJobStatus param_30, final HttpServletResponse param_10,
            final ReportLoader param_31, final URI param_24, final boolean param_21)
            throws IOException {

        try (OutputStream var_279 = var_148.var_250()) {
            var_148.var_179(var_277.var_280().var_281());
            if (!var_206) {
                String var_282 = var_277.var_280().var_283();
                Matcher var_35 = var_133.var_35(var_282);
                while (var_35.var_284()) {
                    final String var_285 = var_35.var_286(1);
                    String var_287 = var_288(var_285, var_277.var_289());
                    var_282 = var_282.var_290("${" + var_285 + "}", var_287);
                    var_35 = var_133.var_35(var_282);
                }

                var_282 += "." + var_277.var_280().var_291();
                var_148
                        .var_292("Content-disposition", "attachment; filename=" + var_293(var_282));
            }
            var_278.var_209(var_213, var_279);
        }
    }

    private void method_3(
            final HttpServletRequest param_32, final String param_13,
            final JSONWriter param_0) {
        String var_295 = var_203(var_294) + var_117 + "/" + var_165;
        var_18.var_183(var_127).var_166(var_295);
    }

    
    protected final JSONObject method_22(final HttpServletRequest param_32) {
        @var_169("rawtypes")
        Enumeration var_297 = var_294.var_298();
        JSONObject var_299 = new JSONObject();
        while (var_297.var_300()) {
            String var_260 = var_297.var_301().var_185();
            Enumeration<String> var_155 = var_294.var_296(var_260);
            while (var_155.var_300()) {
                var_299.var_271(var_260, var_155.var_301());
            }

        }
        final JSONObject var_302 = new JSONObject();
        var_302.var_175(var_130, var_299);
        return var_302;
    }

    
    private String var_201(
            final String param_14, final String param_18, final String param_9,
            final HttpServletRequest param_32, final HttpServletResponse param_10)
            throws NoSuchAppException {

        PJsonObject var_303 = var_146(var_147, var_148);
        if (var_303 == null) {
            return null;
        }
        String var_165 = var_304(
                var_98.var_305().var_185() + "@" + this.var_142.var_306(),
                var_294);
        var_55.var_175(var_33.var_176, var_165);
        var_131.var_307("{}", var_303);

        var_303.var_308().var_230(var_128);
        var_303.var_308().var_175(var_128, var_198);
        var_303.var_308().var_230(var_120);
        var_303.var_308().var_175(var_120, var_170);
        final JSONObject var_309 = var_296(var_294);
        if (var_309.var_157() > 0) {
            var_303.var_308().var_310(var_129)
                    .var_175(var_130, var_309);
        }

        
        
        final String var_311 = var_303.var_312(var_25.var_313);
        final MapPrinter var_253 = this.var_143.var_240(var_170);
        var_241(var_294, var_253);
        final Template var_314 = var_253.var_256().var_315(var_311);
        if (var_314 == null) {
            return null;
        }

        PrintJobEntryImpl var_316 = new PrintJobEntryImpl(var_165, var_303, var_222.var_223());
        var_316.var_317(var_314, this.var_61);

        try {
            this.var_139.var_318(var_316);
        } catch (RuntimeException var_319) {}: {}", appId, specJson, exc);
            ref = null;
        }
        return ref;
    }

    private boolean checkReferer(
            final HttpServletRequest request, final MapPrinter mapPrinter) {
        final Configuration config = mapPrinter.getConfiguration();
        final UriMatchers allowedReferers = config.getAllowedReferersImpl();
        if (allowedReferers == null) {
            return true;
        }
        String referer = request.getHeader("var_320");
        if (var_320 == null) {
            var_320 = "http:
        }
        try {
            return allowedReferers.matches(new URI(referer),
                                           HttpMethod.resolve(request.getMethod()));
        } catch (SocketException | UnknownHostException | URISyntaxException | MalformedURLException e) {
            LOGGER.error("var_321 {} var_322", referer, e);
            return false;
        }
    }

    private <R> R loadReport(
            final String referenceId, final HttpServletResponse httpServletResponse,
            final HandleReportLoadResult<R> handler) throws IOException, ServletException {
        PrintJobStatus metadata;

        try {
            metadata = this.jobManager.getStatus(referenceId);
        } catch (NoSuchReferenceException e) {}

        if (!metadata.isDone()) {
            return handler.printJobPending(httpServletResponse, referenceId);
        } else if (metadata.getResult() != null) {
            URI pdfURI = metadata.getResult().getReportURI();

            ReportLoader loader = null;
            for (ReportLoader reportLoader: this.reportLoaders) {
                if (reportLoader.accepts(pdfURI)) {
                    loader = reportLoader;
                    break;
                }
            }
            if (loader == null) {
                return handler.unsupportedLoader(httpServletResponse, referenceId);
            } else {
                return handler.successfulPrint(metadata, httpServletResponse, pdfURI, loader);
            }
        } else {
            return handler.failedPrint(metadata, httpServletResponse);
        }

    }

    private void setContentType(final HttpServletResponse statusResponse) {
        statusResponse.setContentType("var_323/var_18; var_324=var_325-8");
    }
}
