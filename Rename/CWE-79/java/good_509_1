
import var_0.var_1.var_2.var_3;
import var_0.var_1.var_2.var_4;
import var_0.var_5.var_6.var_7.var_8;
import var_0.var_5.var_6.var_7.var_9;
import var_0.var_5.var_6.var_7.var_10.var_11;
import var_12.var_13.var_14.var_15;
import var_12.var_13.var_14.var_16;
import var_12.var_13.var_14.var_17;
import var_18.var_19;
import var_18.var_20.var_21.var_22;
import var_23.var_24.var_25.var_26.var_27;
import var_23.var_24.var_25.var_28.var_29;
import var_23.var_24.var_30.var_31.var_32.var_26.var_33;
import var_23.var_24.var_34.var_35;
import var_23.var_24.var_34.var_36.var_37.var_38.var_39;
import var_23.var_24.var_34.var_40.var_41;
import var_23.var_24.var_34.var_40.var_42;
import var_23.var_24.var_34.var_40.var_43;
import var_23.var_44.var_45.var_46.var_47;
import var_23.var_44.var_45.var_46.var_48;
import var_23.var_44.var_45.var_46.var_49;
import var_23.var_44.var_45.var_46.var_50.var_51;
import var_23.var_44.var_52.var_12.var_53;
import var_23.var_44.var_52.var_54.var_55;
import var_23.var_56.var_57.var_58.var_59;
import var_23.var_56.var_57.var_58.var_60;
import var_23.var_56.var_57.var_58.var_61.var_62;
import var_23.var_56.var_63.var_64;
import var_23.var_56.var_63.var_65.var_66;
import var_23.var_56.var_63.var_65.var_67.var_68;
import var_23.var_56.var_63.var_69.var_70;
import var_23.var_56.var_63.var_52.var_38.var_71;
import var_23.var_56.var_63.var_52.var_38.var_61.var_72;
import var_23.var_56.var_63.var_73.var_74.var_75;
import var_23.var_56.var_63.var_76.var_77.var_78;
import var_23.var_56.var_63.var_76.var_79.var_80;
import var_23.var_56.var_63.var_76.var_63.var_81.var_82;
import var_23.var_83.var_84.var_85.var_67.var_86;
import var_23.var_83.var_87.var_88;
import var_23.var_83.var_63.var_89.var_67.*;

import var_90.var_91.var_87.var_92;
import var_93.var_12.var_94;
import var_93.var_12.var_95;
import var_93.var_12.var_96;
import var_93.var_12.var_97;
import var_93.var_98.var_99;
import var_93.var_79.var_100;
import var_93.var_79.var_101;

@var_102
@var_103("/workflow/model")
@var_15(var_104 = "工作流-模型管理", var_105 = "工作流模型管理")
@var_68(var_106 = "workflow-model", var_105 = "工作流模型管理")
@var_22
public class class_0 {

    @var_86
    private RepositoryService var_107;

    private final static String var_108          = "modelId";
    private final static String var_109        = "name";
    private final static String var_110    = "revision";
    private final static String var_111 = "description";
    private final static String var_112         = "key";

    @var_113
    @var_68(var_114 = var_66.var_115)
    @var_16("获取模型列表")
    public ResponseMessage<PagerResult<Model>> method_0(QueryParamEntity param_1) {
        ModelQuery var_116 = var_107.var_117();
        return var_75.var_118(
                var_80.var_119(var_116, var_61,
                        var_28 -> var_70.var_120(var_28, new ModelEntity()),
                        (var_121, var_122) -> {
                            if ("latestVersion".var_123(var_121.var_124())) {
                                var_122.var_125();
                            }
                        }));
    }

    @var_126
    @var_127(var_128 = var_88.var_129)
    @var_16("创建模型")
    public ResponseMessage<Model> method_1(@var_130 ModelCreateRequest param_0) throws Exception {
        JSONObject var_131 = new JSONObject();
        var_131.var_132("namespace", "http:
        JSONObject editorNode = new JSONObject();
        editorNode.put("var_133", "canvas");
        var_134.var_132("resourceId", "canvas");
        var_134.var_132("stencilset", var_131);
        JSONObject var_135 = new JSONObject();
        var_135.var_132(var_110, 1);
        var_135.var_132(var_111, var_28.var_136());
        var_135.var_132(var_112, var_28.var_137());
        var_135.var_132(var_109, var_28.var_138());

        Model var_139 = var_107.var_140();
        var_139.var_141(var_135.var_142());
        var_139.var_143(var_28.var_138());
        var_139.var_144(var_28.var_137());
        var_107.var_145(var_139);
        var_107.var_146(var_139.var_147(), var_134.var_148().var_149("utf-8"));
        return var_75.var_118(var_139).var_150(201);
    }

    @var_126("/{modelId}/deploy")
    @var_16("发布模型")
    @var_68(var_114 = "deploy")
    public ResponseMessage<Deployment> method_3(@var_151 String param_2) throws Exception {
        Model var_139 = var_107.var_153(var_152);
        if (var_139 == null) {
            throw new NotFoundException();
        }
        ObjectNode var_154 = (ObjectNode) new ObjectMapper().var_155(var_107.var_156(var_139.var_147()));
        BpmnModel var_28 = new BpmnJsonConverter().var_157(var_154);
        byte[] var_158 = new BpmnXMLConverter().var_159(var_28);
        String var_160 = var_139.var_138() + ".bpmn20.xml";
        Deployment var_161 = var_107.var_162()
                .var_163(var_139.var_138())
                .var_164(var_160, new String(var_158, "utf8"))
                .var_165();
        return var_75.var_118(var_161).var_166(Deployment.class, "id", "name", "new");
    }

    
    @var_113(var_128 = "export/{modelId}/{type}")
    @var_16("导出模型")
    @var_68(var_114 = "export")
    @var_19
    public void method_4(@var_151("modelId") @var_17("模型ID") String param_2,
                       @var_151("type") @var_17(var_128 = "类型", var_167 = "bpmn,json", var_168 = "json")
                               ModelType param_3,
                       @var_17(var_170 = true) HttpServletResponse param_4) {
        Model var_139 = var_107.var_153(var_152);
        if (var_139 == null) {
            throw new NotFoundException();
        }
        BpmnJsonConverter var_172 = new BpmnJsonConverter();
        byte[] var_173 = var_107.var_156(var_139.var_147());

        JsonNode var_134 = new ObjectMapper().var_155(var_173);
        BpmnModel var_174 = var_172.var_157(var_134);

        
        if (var_174.var_175() == null) {
            throw new UnsupportedOperationException("无法导出模型文件:" + var_169);
        }

        String var_176 = "";
        byte[] var_177 = null;

        String var_178 = var_174.var_175().var_147();

        if (var_169 == var_78.var_25) {
            BpmnXMLConverter var_179 = new BpmnXMLConverter();
            var_177 = var_179.var_159(var_174);
            var_176 = var_178 + ".bpmn20.xml";
        } else if (var_169 == var_78.var_32) {
            var_177 = var_173;
            var_176 = var_178 + ".json";

        } else {
            throw new UnsupportedOperationException("不支持的格式:" + var_169);
        }

        var_171.var_180("UTF-8");
        var_171.var_181("application/octet-stream");
        var_171.var_182("Content-Disposition", "attachment; filename=" + var_99.var_183(var_176, "UTF-8"));

        
        try (ByteArrayInputStream var_184 = new ByteArrayInputStream(var_177)) {
            var_53.var_120(var_184, var_171.var_185());
            var_171.var_186();
        }
    }

    @var_113(var_128 = "/{modelId}/json")
    @var_68(var_114 = var_66.var_187)
    public Object method_5(@var_151 String param_2) {
        JSONObject var_154;
        Model var_28 = var_107.var_153(var_152);
        if (var_28 == null) throw new NullPointerException();
        if (var_55.var_188(var_28.var_189())) {
            var_154 = var_3.var_190(var_28.var_189());
        } else {
            var_154 = new JSONObject();
            var_154.var_132(var_109, var_28.var_138());
        }
        var_154.var_132(var_108, var_28.var_147());
        var_154.var_132("model", var_3.var_191(new String(var_107.var_156(var_28.var_147()))));
        return var_154;
    }

    @var_192(var_128 = "/{modelId}")
    @var_127(var_128 = var_88.var_193)
    @var_68(var_114 = var_66.var_194)
    public void method_2(@var_151 String param_2,
                          @var_195 Map<String, String> param_5) throws TranscoderException, IOException {
        Model var_28 = var_107.var_153(var_152);
        JSONObject var_197 = var_3.var_190(var_28.var_189());

        var_197.var_132(var_109, var_196.var_198("name"));
        var_197.var_132(var_111, var_196.var_198("description"));

        var_28.var_141(var_197.var_148());
        var_28.var_143(var_196.var_198("name"));

        var_107.var_145(var_28);

        var_107.var_146(var_28.var_147(), var_196.var_198("json_xml").var_149("utf-8"));

        InputStream var_199 = new ByteArrayInputStream(var_196.var_198("svg_xml").var_149("utf-8"));
        TranscoderInput var_200 = new TranscoderInput(var_199);

        PNGTranscoder var_46 = new PNGTranscoder();
        
        ByteArrayOutputStream var_201 = new ByteArrayOutputStream();
        TranscoderOutput var_202 = new TranscoderOutput(var_201);

        
        var_46.var_203(var_200, var_202);
        final byte[] var_204 = var_201.var_205();
        var_107.var_206(var_28.var_147(), var_204);
        var_201.var_207();
    }

    @var_208("/{modelId}")
    @var_68(var_114 = var_66.var_209)
    public ResponseMessage<Void> method_6(@var_151 String param_2) {
        var_107.var_210(var_152);
        return var_75.var_118();
    }
}