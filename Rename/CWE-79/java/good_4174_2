
import var_0.var_1.var_2;
import var_0.var_3.var_4;
import var_0.var_3.var_5;
import var_0.var_6.var_7.var_8;
import var_0.var_6.var_7.var_9.var_10.var_11;
import var_0.var_6.var_7.var_12.var_13.var_14;
import var_0.var_6.var_7.var_15.var_1.var_16;
import var_0.var_17.var_18.var_19.var_20.var_21;
import var_0.var_17.var_22.var_23;
import var_0.var_17.var_24.var_25.var_26;
import var_0.var_17.var_24.var_25.var_27;
import var_0.var_17.var_28.var_10.var_29;
import var_0.var_17.var_28.var_30.var_31;
import var_0.var_17.var_28.var_32.var_33.var_34;
import var_0.var_17.var_12.var_33.var_35;

import var_36.var_37.var_38;
import var_36.var_39.var_40;
import var_36.var_13.var_41;
import var_36.var_13.var_42;

import static var_0.var_3.var_43.var_44;
import static var_0.var_3.var_43.var_45;
import static var_0.var_3.var_43.var_46;

@var_35(var_47 = {
        var_48.var_49
})
public class class_0 extends AbstractMapfishSpringTest {

    public static final String var_49 =
            "classpath:org/mapfish/print/servlet/mapfish-print-servlet.xml";

    @var_21
    private MapPrinterServlet var_50;
    @var_21
    private ServletMapPrinterFactory var_51;

    @var_4
    public void method_0() {
        var_34.var_52();
    }

    @var_5(var_53 = 60000)
    public void method_1() throws Exception {
        var_11.var_54("ROLE_USER", "ROLE_EDITOR");
        var_55();

        final MockHttpServletRequest var_56 = new MockHttpServletRequest();
        final MockHttpServletResponse var_57 = new MockHttpServletResponse();

        String var_58 = var_59();

        this.var_50.var_60("png", var_58, false,
                                               var_56, var_57);
        var_44(var_23.var_61.var_62(), var_57.var_63());

        var_64(var_57);
    }

    @var_5(var_53 = 60000, var_65 = AccessDeniedException.class)
    public void method_5() throws Exception {
        var_11.var_54("ROLE_USER");
        var_55();

        final MockHttpServletRequest var_56 = new MockHttpServletRequest();
        final MockHttpServletResponse var_57 = new MockHttpServletResponse();

        String var_58 = var_59();

        this.var_50.var_60("png", var_58, false,
                                               var_56, var_57);

    }

    @var_5(var_53 = 60000, var_65 = AuthenticationCredentialsNotFoundException.class)
    public void method_6() throws Exception {
        var_55();

        final MockHttpServletRequest var_56 = new MockHttpServletRequest();
        final MockHttpServletResponse var_57 = new MockHttpServletResponse();

        String var_58 = var_59();

        this.var_50.var_60("png", var_58, false,
                                               var_56, var_57);
    }

    @var_5(var_53 = 60000)
    public void method_7() throws Exception {
        var_11.var_54("ROLE_USER", "ROLE_EDITOR");
        var_55();

        final MockHttpServletRequest var_56 = new MockHttpServletRequest();
        final MockHttpServletResponse var_57 = new MockHttpServletResponse();

        String var_58 = var_59();

        this.var_50.var_66("png", var_58, var_56, var_57);
        var_44(var_23.var_61.var_62(), var_57.var_63());
        final JSONObject var_67 = new JSONObject(var_57.var_68());

        final String var_69 = var_67.var_70(var_71.var_72);
        String var_73 = var_67.var_70(var_71.var_74);

        
        boolean var_75 = false;
        while (!var_75) {
            MockHttpServletRequest var_76 = new MockHttpServletRequest("GET", var_73);
            MockHttpServletResponse var_77 = new MockHttpServletResponse();
            var_50.var_63(var_69, var_76, var_77);

            String var_78 = var_77.var_68();

            final PJsonObject var_79 = var_80(var_78);
            var_45(var_79.var_81(), var_79.var_82(var_71.var_83));

            var_75 = var_79.var_84(var_71.var_83);
            if (!var_75) {
                var_85.var_86(500);
            }
        }

        try {
            var_11.var_54("ROLE_USER");
            final MockHttpServletResponse var_87 = new MockHttpServletResponse();
            this.var_50.var_88(var_69, false, var_87);
            var_46("Expected an AccessDeniedException");
        } catch (AccessDeniedException var_89) {}
        var_34.var_52();

        try {
            final MockHttpServletResponse var_90 = new MockHttpServletResponse();
            this.var_50.var_88(var_69, false, var_90);
            var_44(var_23.var_91.var_62(), var_57.var_63());
            var_46("Expected an AuthenticationCredentialsNotFoundException");
        } catch (AuthenticationCredentialsNotFoundException var_89) {}
    }

    private byte[] method_4(MockHttpServletResponse param_0)
            throws IOException {
        byte[] var_93;
        var_93 = var_92.var_94();

        final String var_95 = var_92.var_96("Content-Type");
        var_44("image/png", var_95);
        final Calendar var_97 = var_41.var_98();
        int var_99 = var_97.var_100(var_41.var_101);
        String var_102 = var_92.var_96("Content-disposition").var_103("=")[1];
        var_44("test_report-" + var_99 + ".png", var_102);

        new ImageSimilarity(var_104(MapPrinterServletSecurityTest.class, "expectedSimpleImage.png"))
                .var_105(var_93, 1);
        return var_93;
    }

    private void method_2() throws URISyntaxException {
        final HashMap<String, String> var_106 = new HashMap<>();
        var_106.var_107("default",
                        var_104(MapPrinterServletSecurityTest.class, "config-security.yaml")
                                .var_108());
        var_51.var_109(var_106);
    }

    private String method_3() throws IOException {
        final PJsonObject var_110 =
                var_111(MapPrinterServletSecurityTest.class, "requestData.json");
        return var_110.var_112().var_81();
    }
}
