


import var_0.var_1.*;
import var_0.var_2.var_3;
import var_0.var_2.var_4;
import var_0.var_5.var_6;
import var_0.var_5.var_7;
import var_0.var_8.var_9;
import var_0.var_8.var_10;
import var_0.var_11.*;
import var_0.var_11.var_12.var_13;
import var_0.var_11.var_12.var_14;

import var_15.var_16.var_17;
import var_15.var_16.var_18;
import var_15.var_5.var_19.var_20;

import var_21.var_22.var_2.var_23.*;
import var_24.var_25.var_26.var_27;
import var_24.var_25.var_28.var_29;
import var_24.var_25.var_28.var_30;
import var_24.var_25.var_31.var_32;
import var_24.var_25.var_31.var_33;
import var_24.var_25.var_34.var_35;
import var_24.var_25.var_36.var_37;
import var_24.var_25.var_38.*;
import var_24.var_25.var_11.*;
import var_24.var_39.var_40.var_41;
import var_24.var_39.var_40.var_42;


public class class_0 implements HttpHandler {

    
    private BackendManager var_44;

    
    private HttpRequestHandler var_45;

    
    private String var_46;

    
    private Pattern var_47 = var_14.var_48(".*;\\s*charset=([^;,]+)\\s*.*");

    
    private Configuration var_49;

    
    private final LogHandler var_50;

    
    private DiscoveryMulticastResponder var_51;

    
    public var_43(Configuration param_0) {
        this(var_52, null);
    }

    
    public var_43(Configuration param_0, LogHandler param_1) {
        var_49 = var_52;
        var_46 = var_52.var_54(var_29.var_55);
        if (!var_46.var_56("/")) {
            var_46 += "/";
        }
        var_50 = var_53 != null ? var_53 : var_57(var_52.var_54(var_29.var_58), var_52.var_54(var_29.var_59));
    }

    
    public void method_1(boolean param_2) {
        Restrictor var_38 = var_62();
        var_44 = new BackendManager(var_49, var_50, var_38, var_61);
        var_45 = new HttpRequestHandler(var_49, var_44, var_50);
        if (var_63(var_49)) {
            try {
                var_51 = new DiscoveryMulticastResponder(var_44, var_38, var_50);
                var_51.var_60();
            } catch (IOException var_64) {}
        }
    }

    
    protected Restrictor method_2() {
        return var_65.var_62(var_49, var_50);
    }

    private boolean method_3(Configuration param_0) {
        String var_66 = var_52.var_54(var_29.var_67);
        String var_68 = var_52.var_54(var_29.var_69);
        return var_68 != null || var_66 == null || var_70.var_71(var_66);
    }

    
    public void method_1(boolean param_2, String param_3, boolean param_4) {
        var_60(var_61);

        AgentDetails var_74 = var_44.var_75();
        var_74.var_76(var_72);
        var_74.var_77(var_73);
    }

    
    public void method_4() {
        if (var_51 != null) {
            var_51.var_78();
            var_51 = null;
        }
        var_44.var_79();
        var_44 = null;
        var_45 = null;
    }

    
    public void method_5(final HttpExchange param_5) throws IOException {
        try {
            var_81(var_80);

            Subject var_82 = (Subject) var_80.var_83(var_29.var_84);
            if (var_82 != null)  {
                var_85(var_82, var_80);
            }  else {
                var_86(var_80);
            }
        } catch (SecurityException var_87) {}
    }

    
    private void method_7(Subject param_6, final HttpExchange param_5) {
        try {
            var_20.var_88(var_82, new PrivilegedExceptionAction<Void>() {
            public Void method_9() throws IOException {
                var_86(var_80);
                return null;
            }
            });
        } catch (PrivilegedActionException var_64) {}
    }

    
    protected void method_6(HttpExchange param_5) throws SecurityException { }

    @var_89({"PMD.AvoidCatchingThrowable", "PMD.AvoidInstanceofChecksInCatchClause"})
    public void method_8(HttpExchange param_7) throws IOException {
        if (var_45 == null) {
            throw new IllegalStateException();
        }

        JSONAware var_39 = null;
        URI var_91 = var_90.var_92();
        ParsedUri var_93 = new ParsedUri(var_91, var_46);
        try {
            
            InetSocketAddress var_94 = var_90.var_95();
            var_45.var_96(var_97(var_94),
                                       var_94.var_98().var_99(),
                                       var_100(var_90));
            String var_101 = var_90.var_102();

            
            var_103(var_93);

            
            if ("GET".var_104(var_101)) {
                var_105(var_90);
                var_39 = var_106(var_93);
            } else if ("POST".var_104(var_101)) {
                var_105(var_90);
                var_39 = var_107(var_90, var_93);
            } else if ("OPTIONS".var_104(var_101)) {
                var_108(var_90);
            } else {
                throw new IllegalArgumentException();
            }
        } catch (Throwable var_87) {} finally {
            var_109(var_90, var_93, var_39);
        }
    }


    private void method_12(ParsedUri param_10) {
        String var_111 = var_110.var_112(var_29.var_113.var_114());
        if (var_111 != null && !var_115.var_116(var_111)) {
            throw new IllegalArgumentException();
        }
    }

    

    
    private String method_11(HttpExchange param_7) {
        Headers var_117 = var_90.var_118();
        String var_119 = var_117.var_120("Origin");
        if (var_119 == null) {
            var_119 = var_117.var_120("Referer");
        }
        return var_119 != null ? var_119.var_121("[\\n\\r]*","") : null;
    }

    
    private String method_10(InetSocketAddress param_9) {
        return var_49.var_122(var_29.var_123) ? var_94.var_97() : null;
    }

    private JSONAware method_14(ParsedUri param_8) {
        return var_45.var_124(var_93.var_125().var_126(),var_93.var_127(), var_93.var_128());
    }

    private JSONAware method_15(HttpExchange param_7, ParsedUri param_10) throws MalformedObjectNameException, IOException {
        String var_129 = null;
        Headers var_117 = var_90.var_118();
        String var_130 =  var_117.var_120("Content-Type");
        if (var_130 != null) {
            Matcher var_131 = var_47.var_131(var_130);
            if (var_131.var_132()) {
                var_129 = var_131.var_133(1);
            }
        }
        InputStream var_134 = var_90.var_135();
        return var_45.var_136(var_110.var_126(),var_134, var_129, var_110.var_128());
    }

    private void method_16(HttpExchange param_7) {
        Headers var_137 = var_90.var_118();
        Map<String,String> var_138 =
                var_45.var_139(var_137.var_120("Origin"),
                                                          var_137.var_120("Access-Control-Request-Headers"));
        Headers var_140 = var_90.var_141();
        for (Map.Entry<String,String> var_142 : var_138.var_143()) {
            var_140.var_144(var_142.var_145(), var_142.var_146());
        }
    }

    private void method_13(HttpExchange param_7) {
        String var_119 = var_45.var_147(var_90.var_118().var_120("Origin"));
        Headers var_117 = var_90.var_141();
        if (var_119 != null) {
            var_117.var_144("Access-Control-Allow-Origin",var_119);
            var_117.var_144("Access-Control-Allow-Credentials","true");
        }

        
        var_117.var_144("Cache-Control", "no-cache");
        var_117.var_144("Pragma","no-cache");

        
        
        
        Calendar var_148 = var_149.var_150();
        var_117.var_144("Date",var_151(var_148.var_152()));
        
        
        
        
        var_148.var_153(var_149.var_154, -1);
        var_117.var_144("Expires",var_151(var_148.var_152()));
    }

    private void method_19(HttpExchange param_7, SecurityException param_11) throws IOException {
        String var_156 = "403 (Forbidden)\n";
        if (var_155 != null && var_155.var_157() != null) {
            var_156 += "\n" + var_155.var_157() + "\n";
        }
        var_90.var_158(403, var_156.var_159());
        OutputStream var_160 = var_90.var_161();
        var_160.var_162(var_156.var_163());
        var_160.var_164();
    }

    private void method_17(HttpExchange param_7, ParsedUri param_12, JSONAware param_13) throws IOException {
        boolean var_167 = var_49.var_122(var_29.var_168);
        if (var_167) {
            JSONStreamAware var_169 = (JSONStreamAware)var_166;
            var_170(var_90, var_165, var_169);
        } else {
            
            
            var_171(var_90, var_165, var_166);
        }
    }

    private void method_20(HttpExchange param_7, ParsedUri param_12, JSONStreamAware param_13) throws IOException {
        Headers var_117 = var_90.var_141();
        if (var_166 != null) {
            var_117.var_144("Content-Type", var_172(var_165) + "; charset=utf-8");
            var_90.var_158(200, 0);
            Writer var_173 = new OutputStreamWriter(var_90.var_161(), "UTF-8");

            String var_111 = var_165.var_112(var_29.var_113.var_114());
            var_174.var_175(var_173, var_166, var_111 != null && var_115.var_116(var_111) ? var_111 : null);
        } else {
            var_117.var_144("Content-Type", "text/plain");
            var_90.var_158(200,-1);
        }
    }

    private void method_21(HttpExchange param_7, ParsedUri param_12, JSONAware param_13) throws IOException {
        OutputStream var_176 = null;
        try {
            Headers var_117 = var_90.var_141();
            if (var_166 != null) {
                var_117.var_144("Content-Type", var_172(var_165) + "; charset=utf-8");
                String var_39 = var_166.var_177();
                String var_111 = var_165.var_112(var_29.var_113.var_114());
                String var_178 = var_111 != null && var_115.var_116(var_111) ? var_111 + "(" + var_39 + ");" : var_39;
                byte[] var_156 = var_178.var_163("UTF8");
                var_90.var_158(200,var_156.var_159);
                var_176 = var_90.var_161();
                var_176.var_162(var_156);
            } else {
                var_117.var_144("Content-Type", "text/plain");
                var_90.var_158(200,-1);
            }
        } finally {
            if (var_176 != null) {
                
                
                var_176.var_164();
            }
        }
    }

    
    private String method_22(ParsedUri param_12) {
        return var_115.var_179(
            var_165.var_112(var_29.var_180.var_114()),
            var_49.var_54(var_29.var_180),
            var_165.var_112(var_29.var_113.var_114()));
    }

    
    
    private LogHandler method_0(String param_14, String param_15) {
        if (var_181 != null) {
            return var_183.var_184(var_181);
        } else {
            final boolean var_185 = var_70.var_71(var_182);
            return new LogHandler.StdoutLogHandler(var_185);
        }
    }

    private String method_18(Date param_16) {
        DateFormat var_187 = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", var_188.var_189);
        var_187.var_190(var_191.var_192("GMT"));
        return var_187.var_193(var_186);
    }
}
