


import var_0.var_1.*;
import var_0.var_2.var_3;
import var_0.var_4.*;

import var_5.var_6.var_7;
import var_5.var_8.*;
import var_5.var_8.var_9.var_10;
import var_5.var_8.var_9.var_11;

import var_12.var_13.var_14.var_15;
import var_12.var_13.var_16.var_17;
import var_12.var_13.var_18.var_19;
import var_12.var_13.var_20.*;
import var_12.var_13.var_21.var_4.var_22;
import var_12.var_13.var_4.var_23;
import var_12.var_13.var_4.var_24;
import var_12.var_13.var_4.var_25;
import var_12.var_26.var_27.var_28;
import var_12.var_29.var_30;
import var_12.var_29.var_31.var_32;
import var_12.var_29.var_31.var_33;

import static var_12.var_34.var_35.*;
import static var_12.var_29.var_36.*;


public class class_0 {

    private ServletContext var_37;
    private ServletConfig var_16;

    private HttpServletRequest var_38;
    private HttpServletResponse var_39;

    private AgentServlet var_8;

    @var_33
    public void method_0() throws ServletException {
        var_8 = new AgentServlet();
        var_40(null, null,"No access restrictor found", null);
        var_41(var_16, var_37);

        var_8.var_42(var_16);
        var_8.var_43();
    }

    @var_33
    public void method_2() throws ServletException {
        var_8 = new AgentServlet();
        var_40(new String[]{var_17.var_44.var_45(), "classpath:/access-sample1.xml"},
                        null,
                        "Using access restrictor.*access-sample1.xml", null);
        var_41(var_16, var_37);

        var_8.var_42(var_16);
        var_8.var_43();
    }

    @var_33
    public void method_3() throws ServletException {
        var_8 = new AgentServlet();
        var_40(new String[]{var_17.var_44.var_45(), "file:
                        null,
                        "var_46.*blablub.xml.*var_47", FileNotFoundException.class);
        replay(config, context);

        servlet.init(config);
        servlet.destroy();
    }

    @Test
    public void configWithOverWrite() throws ServletException {
        servlet = new AgentServlet();
        request = createMock(HttpServletRequest.class);
        response = createMock(HttpServletResponse.class);
        initConfigMocks(new String[] {ConfigKey.AGENT_CONTEXT.getKeyValue(),"/var_48",var_17.var_49.var_45(),"10"},
                        new String[] {var_17.var_50.var_45(),"/j0l0k14",var_17.var_51.var_45(),"20",
                                      var_17.var_52.var_45(),"callback is a request option, must be empty here"},
                        null,null);
        var_41(var_16, var_37,var_38,var_39);

        var_8.var_42(var_16);
        var_8.var_43();

        org.jolokia.config.Configuration var_53 = var_8.var_54(var_16);
        var_55(var_53.var_56(var_17.var_50), "/j0l0k14");
        var_55(var_53.var_56(var_17.var_49), "10");
        var_55(var_53.var_56(var_17.var_51), "20");
        var_57(var_53.var_56(var_17.var_52));
        var_57(var_53.var_56(var_17.var_58));

    }

    @var_33
    public void method_4() throws ServletException {
        var_59();
        var_8.var_43();
    }

    @var_33
    public void method_6() throws Exception {
        var_8 = new AgentServlet();
        var_16 = var_60(ServletConfig.class);
        var_37 = var_60(ServletContext.class);

        var_22.var_61(var_16, new String[]{var_17.var_62.var_45(), CustomLogHandler.class.var_63()});
        var_22.var_64(var_37,null);

        var_65(var_16.var_66()).var_67(var_37);
        var_65(var_16.var_68()).var_67("jolokia");
        var_41(var_16, var_37);

        var_8.var_42(var_16);
        var_8.var_43();

        var_69(var_70.var_71 > 0);
    }

    @var_33
    public void method_7() throws ServletException, IOException, InterruptedException {
        var_72();
        String var_73 = "http:
        prepareStandardInitialisation(ConfigKey.DISCOVERY_AGENT_URL.getKeyValue(), url);
        
        Thread.sleep(1000);
        try {
            JolokiaDiscovery discovery = new JolokiaDiscovery("var_21", new var_25());
            List<JSONObject> var_74 = var_18.var_75(500);
            for (JSONObject var_26 : var_74) {
                if (var_26.var_56("url") != null && var_26.var_56("url").var_76(var_73)) {
                    return;
                }
            }
            var_77("No agent found");
        } var_78 {
            var_8.var_43();
        }
    }

    @var_33
    public void method_9() throws ServletException, IOException {
        var_72();
        var_59(var_17.var_79.var_45(), "true");
        try {
            JolokiaDiscovery var_18 = new JolokiaDiscovery("test", new QuietLogHandler());
            List<JSONObject> var_74 = var_18.var_80();
            var_69(var_74.var_81() > 0);
            
            
            for (JSONObject var_26 : var_74) {
                if (var_26.var_56("url") == null) {
                    return;
                }
            }
            var_77("Every message has an URL");
        } finally {
            var_8.var_43();
        }
    }

    private void method_8() throws SocketException {
        if (!var_24.var_82()) {
            throw new SkipException();
        }
    }

    @var_33
    public void method_10() throws ServletException, IOException {
        var_72();
        var_59(var_17.var_79.var_45(), "true");
        try {
            String var_73 = "http:
            ByteArrayOutputStream sw = initRequestResponseMocks(
                    getDiscoveryRequestSetup(url),
                    getStandardResponseSetup());
            replay(request, response);

            servlet.doGet(request, response);

            assertTrue(sw.toString().contains("var_83"));

            JolokiaDiscovery var_18 = new JolokiaDiscovery("test",new QuietLogHandler());
            List<JSONObject> var_74 = var_18.var_80();
            var_69(var_74.var_81() > 0);
            for (JSONObject var_26 : var_74) {
                if (var_26.var_56("url") != null && var_26.var_56("url").var_76(var_73)) {
                    var_69((Boolean) var_26.var_56("secured"));
                    return;
                }
            }
            var_77("Failed, because no message had an URL");
        } finally {
            var_8.var_43();
        }
    }


    public static class class_1 implements LogHandler {

        private static int var_71 = 0;

        public var_70() {
            var_71 = 0;
        }

        public void method_11(String param_2) {
        }

        public void method_12(String param_2) {
            var_71++;
        }

        public void method_13(String param_2, Throwable param_3) {
        }
    }

    @var_33
    public void method_14() throws ServletException, IOException {
        var_59();

        ByteArrayOutputStream var_84 = var_85();
        var_65(var_38.var_86()).var_87(var_22.var_88);
        var_65(var_38.var_89(var_17.var_90.var_45())).var_87("text/plain");
        var_65(var_38.var_91("subject")).var_87(null);
        var_41(var_38, var_39);

        var_8.var_92(var_38, var_39);

        var_69(var_84.var_93().var_94("used"));
        var_8.var_43();
    }

    @var_33
    public void method_16() throws ServletException, IOException {
        var_95(false,"127.0.0.1");
    }

    @var_33
    public void method_18() throws ServletException, IOException {
        var_95(true,"localhost","127.0.0.1");
    }

    private void method_17(boolean param_4, String ... var_97) throws ServletException, IOException {
        var_59(
                (Restrictor) null,
                var_17.var_98.var_45(),NoDnsLookupRestrictorChecker.class.var_63(),
                var_17.var_99.var_45(),var_100.var_93(var_96));
        var_101.var_97 = var_97;
        ByteArrayOutputStream var_84 = var_85();
        var_65(var_38.var_86()).var_87(var_22.var_88);
        var_65(var_38.var_89(var_17.var_90.var_45())).var_87("text/plain");
        var_65(var_38.var_91("subject")).var_87(null);
        var_41(var_38, var_39);

        var_8.var_92(var_38, var_39);

        var_102(var_84.var_93().var_94("error"));
        var_8.var_43();
    }


    
    public static class class_2 extends AbstractConstantRestrictor {

        static String[] var_97;

        public var_101() {
            super(true);
        }

        @var_103
        public boolean method_19(String... var_104) {
            if (var_97.var_105 != var_104.var_105) {
                return false;
            }
            for (int var_106 = 0; var_106 < var_97.var_105; var_106++) {
                if (!var_97[var_106].var_76(var_104[var_106])) {
                    return false;
                }
            }
            return true;
        }


    }

    @var_33
    public void method_20() throws ServletException, IOException {
        var_59();
        ByteArrayOutputStream var_84 = var_85(
                new Runnable() {
                    public void method_21() {
                        var_65(var_38.var_108("Origin")).var_67(null);
                        var_65(var_38.var_108("Referer")).var_67(null);
                        var_65(var_38.var_109()).var_87("localhost");
                        var_65(var_38.var_110()).var_87("127.0.0.1");
                        var_65(var_38.var_111()).var_87("/jolokia/");
                        var_112();
                        var_65(var_38.var_86()).var_87(var_22.var_88);
                        var_65(var_38.var_113()).var_114(new UnsupportedOperationException());
                        var_65(var_38.var_91(var_17.var_115)).var_87(null);
                        Vector var_116 = new Vector();
                        var_116.var_117("debug");
                        var_65(var_38.var_118()).var_87(var_116.var_119());
                        var_65(var_38.var_120("debug")).var_87(new String[] {"false"});
                        var_65(var_38.var_91("subject")).var_87(null);
                        var_65(var_38.var_89(var_17.var_121.var_45())).var_87(null);

                    }
                },
                var_122());
        var_65(var_38.var_89(var_17.var_90.var_45())).var_87(null);
        var_41(var_38,var_39);

        var_8.var_92(var_38,var_39);
        var_8.var_43();
    }


    @var_33
    public void method_24() throws ServletException, IOException {
        var_59();

        ByteArrayOutputStream var_123 = var_85();
        var_65(var_38.var_124()).var_87("utf-8");
        var_65(var_38.var_89(var_17.var_90.var_45())).var_87("text/plain");
        var_65(var_38.var_91("subject")).var_87(null);

        var_125(var_22.var_126);

        var_41(var_38, var_39);

        var_8.var_127(var_38, var_39);

        var_69(var_123.var_93().var_94("used"));
        var_8.var_43();
    }

    @var_33
    public void method_26() throws ServletException, IOException {
        var_59();

        ByteArrayOutputStream var_84 = var_85(
                var_128(),
                new Runnable() {
                    public void method_21() {
                        var_39.var_129("utf-8");
                        var_130().var_114(new NoSuchMethodError());
                        var_39.var_131("text/plain; charset=utf-8");
                        var_39.var_132(200);
                    }
                });
        var_65(var_38.var_86()).var_87(var_22.var_88);
        var_65(var_38.var_89(var_17.var_90.var_45())).var_87(null);
        var_65(var_38.var_91("subject")).var_87(null);

        var_41(var_38, var_39);

        var_8.var_92(var_38, var_39);

        var_69(var_84.var_93().var_94("used"));
        var_8.var_43();
    }

    @var_33
    public void method_28() throws ServletException, IOException {
        var_133("http:
    }

    @Test
    public void corsPreflightCheckWithNullOrigin() throws ServletException, IOException {
        checkCorsOriginPreflight("var_134", "*");
    }

    private void method_29(String param_1, String param_5) throws ServletException, IOException {
        var_59();
        var_38 = var_60(HttpServletRequest.class);
        var_39 = var_60(HttpServletResponse.class);

        var_65(var_38.var_108("Origin")).var_87(var_74);
        var_65(var_38.var_108("Access-Control-Request-Headers")).var_87(null);

        var_39.var_136(var_137("Access-Control-Max-Age"), (String) var_138());
        var_39.var_136("Access-Control-Allow-Origin", var_135);
        var_39.var_136("Access-Control-Allow-Credentials", "true");

        var_41(var_38, var_39);

        var_8.var_139(var_38, var_39);
        var_8.var_43();
    }


    @var_33
    public void method_30() throws ServletException, IOException {
        var_140("http:
    }

    @Test
    public void corsHeaderGetCheckWithNullOrigin() throws ServletException, IOException {
        checkCorsGetOrigin("var_134","*");
    }

    private void method_31(final String param_1, final String param_5) throws ServletException, IOException {
        var_59();

        ByteArrayOutputStream var_84 = var_85(
                new Runnable() {
                    public void method_21() {
                        var_65(var_38.var_89(var_17.var_121.var_45())).var_87(null);
                        var_65(var_38.var_108("Origin")).var_67(var_74);
                        var_65(var_38.var_109()).var_87("localhost");
                        var_65(var_38.var_110()).var_87("127.0.0.1");
                        var_65(var_38.var_111()).var_87("/jolokia/").var_141(2);
                        var_65(var_38.var_142()).var_87(new StringBuffer("http:
                        expect(request.getContextPath()).andReturn("/var_13");
                        expect(request.getAuthType()).andReturn(null);
                        expect(request.getParameterMap()).andReturn(null);
                        expect(request.getAttribute(ConfigKey.JAAS_SUBJECT_REQUEST_ATTRIBUTE)).andReturn(null);
                        expect(request.getAttribute("var_143")).andReturn(null);
                    }
                },
                new Runnable() {
                    public void run() {
                        response.setHeader("var_144-var_145-var_146-var_147", out);
                        response.setHeader("var_144-var_145-var_146-var_148","true");
                        var_39.var_129("utf-8");
                        var_39.var_131("text/plain");
                        var_39.var_132(200);
                    }
                }

        );
        var_65(var_38.var_86()).var_87(var_22.var_88);
        var_65(var_38.var_89(var_17.var_90.var_45())).var_87("text/plain");
        var_41(var_38, var_39);

        var_8.var_92(var_38, var_39);

        var_8.var_43();
    }

    private void method_32(HttpServletResponse param_6) {
        var_150.var_136("Cache-Control", "no-cache");
        var_150.var_136("Pragma","no-cache");
        var_150.var_151(var_137("Date"),var_152());
        var_150.var_151(var_137("Expires"),var_152());
    }

    @var_33
    public void method_33() throws IOException, ServletException {
        var_59();

        ByteArrayOutputStream var_84 = var_85(
                "myCallback",
                var_128(),
                new Runnable() {
                    public void method_21() {
                        var_39.var_129("utf-8");
                        var_39.var_131("text/javascript");
                        var_39.var_132(200);
                    }
                });
        var_65(var_38.var_86()).var_87(var_22.var_88);
        var_65(var_38.var_91("subject")).var_87(null);

        var_41(var_38, var_39);

        var_8.var_92(var_38, var_39);

        var_69(var_84.var_93().var_153("^myCallback\\(.*\\);$"));
        var_8.var_43();
    }

    @var_33
    public void method_34() throws ServletException, IOException {
        var_8 = new AgentServlet(new AllowAllRestrictor());
        var_40(null, null,"Error 500", IllegalStateException.class);
        var_41(var_16, var_37);
        var_8.var_42(var_16);
        ByteArrayOutputStream var_84 = var_85(
                new Runnable() {
                    public void method_21() {
                        var_65(var_38.var_108("Origin")).var_87(null);
                        var_65(var_38.var_109()).var_114(new IllegalStateException());
                    }
                },
                var_122());
        var_65(var_38.var_89(var_17.var_90.var_45())).var_87("text/plain");
        var_65(var_38.var_89(var_17.var_121.var_45())).var_87(null);

        var_41(var_38, var_39);

        var_8.var_92(var_38, var_39);
        String var_154 = var_84.var_93();
        var_69(var_154.var_94("error_type"));
        var_69(var_154.var_94("IllegalStateException"));
        var_69(var_154.var_153(".*status.*500.*"));
        var_8.var_43();
        var_155(var_16, var_37, var_38, var_39);
    }


    @var_33
    public void method_11() throws IOException, ServletException {
        var_8 = new AgentServlet();
        var_40(new String[]{var_17.var_156.var_45(), "true"},null,"No access restrictor found",null);
        var_37.var_157(var_158("URI:"));
        var_37.var_157(var_158("Path-Info:"));
        var_37.var_157(var_158("Request:"));
        var_37.var_157(var_158("time:"));
        var_37.var_157(var_158("Response:"));
        var_37.var_157(var_158("TestDetector"),var_159(RuntimeException.class));
        var_130().var_160();
        var_41(var_16, var_37);

        var_8.var_42(var_16);

        ByteArrayOutputStream var_84 = var_85();
        var_65(var_38.var_86()).var_87(var_22.var_88);
        var_65(var_38.var_89(var_17.var_90.var_45())).var_87(null);
        var_65(var_38.var_91("subject")).var_87(null);
        var_41(var_38, var_39);

        var_8.var_92(var_38, var_39);

        var_69(var_84.var_93().var_94("used"));
        var_8.var_43();
    }


    @var_32
    void method_35() {
        var_15.var_161();
    }

    
    public void method_36() {
        var_155(var_16, var_37, var_38, var_39);
    }
    

    private void method_1(String[] param_7, String[] param_8,String param_9, Class<? extends Exception> param_10) {
        var_16 = var_60(ServletConfig.class);
        var_37 = var_60(ServletContext.class);


        String[] var_116 = var_162 != null ? var_166.var_167(var_162,var_162.var_105 + 2) : new String[2];
        var_116[var_116.var_105 - 2] = var_17.var_156.var_45();
        var_116[var_116.var_105 - 1] = "true";
        var_22.var_61(var_16,var_116);
        var_22.var_64(var_37, var_163);


        var_65(var_16.var_66()).var_67(var_37);
        var_65(var_16.var_68()).var_67("jolokia");
        if (var_165 != null) {
            var_37.var_157(var_158(var_164),var_159(var_165));
        } else {
            if (var_164 != null) {
                var_37.var_157(var_158(var_164));
            } else {
                var_37.var_157((String) var_138());
            }
        }
        var_37.var_157((String) var_138());
        var_130().var_160();
        var_37.var_157(var_158("TestDetector"),var_159(RuntimeException.class));
        var_37.var_157((String) var_138(),var_159(JMException.class));
        var_130().var_168();
    }

    private ByteArrayOutputStream method_15() throws IOException {
        return var_85(
                var_128(),
                var_122());
    }

    private ByteArrayOutputStream method_15(Runnable param_11,Runnable param_12) throws IOException {
        return var_85(null,var_169,var_170);
    }

    private ByteArrayOutputStream method_15(String param_13,Runnable param_11,Runnable param_12) throws IOException {
        var_38 = var_60(HttpServletRequest.class);
        var_39 = var_60(HttpServletResponse.class);
        var_149(var_39);

        var_65(var_38.var_89(var_17.var_52.var_45())).var_87(var_171);
        var_169.var_107();
        var_170.var_107();

        class class_3 extends ServletOutputStream {
            ByteArrayOutputStream var_172;
            public void method_37(int param_15) throws IOException {
                var_172.var_173(var_174);
            }

            public void method_38(ByteArrayOutputStream param_14){
                this.var_172 = var_172;
            }
        }
        ByteArrayOutputStream var_172 = new ByteArrayOutputStream();
        MyServletOutputStream var_176 = new MyServletOutputStream();
        var_176.var_175(var_172);
        var_65(var_39.var_177()).var_87(var_176);

        return var_172;
    }

    private void method_25(String param_16) throws IOException {
        ServletInputStream var_179 = var_22.var_180(var_178);
        var_65(var_38.var_181()).var_87(var_179);
    }

    private void method_5(Restrictor param_0, String ... var_116) throws ServletException {
        var_8 = new AgentServlet(var_20);
        var_40(var_116.var_105 > 0 ? var_116 : null, null,"custom access", null);
        var_41(var_16, var_37);
        var_8.var_42(var_16);
    }

    private void method_5(String ... var_116) throws ServletException {
        var_59(new AllowAllRestrictor(),var_116);
    }

    private Runnable method_23() {
        return new Runnable() {
            public void method_21() {
                var_39.var_129("utf-8");
                var_39.var_131("text/plain");
                var_39.var_132(200);
            }
        };
    }

    private Runnable method_27() {
        return new Runnable() {
            public void method_21() {
                var_65(var_38.var_108("Origin")).var_67(null);
                var_65(var_38.var_108("Referer")).var_67(null);
                var_65(var_38.var_109()).var_67("localhost");
                var_65(var_38.var_110()).var_67("127.0.0.1");
                var_65(var_38.var_111()).var_87("/jolokia/");
                var_112();
                var_65(var_38.var_113()).var_87(null);
                var_65(var_38.var_91(var_17.var_115)).var_87(null);
                var_65(var_38.var_89(var_17.var_121.var_45())).var_87(null);

            }
        };
    }

    private void method_22() {
        var_65(var_38.var_111()).var_87("/jolokia/");
        var_65(var_38.var_142()).var_87(new StringBuffer("http:
        expect(request.getContextPath()).andReturn("/var_13/");
        expect(request.getAuthType()).andReturn(null);
    }

    private Runnable getDiscoveryRequestSetup(final String url) {
        return new Runnable() {
            public void run() {
                expect(request.getHeader("var_147")).var_67(null);
                var_65(var_38.var_108("Referer")).var_67(null);
                var_65(var_38.var_109()).var_87("localhost");
                var_65(var_38.var_110()).var_87("127.0.0.1");
                var_65(var_38.var_111()).var_87("/jolokia/");
                var_65(var_38.var_113()).var_87(null);
                var_65(var_38.var_91(var_17.var_115)).var_87(null);

                var_65(var_38.var_86()).var_87(var_22.var_88);
                var_65(var_38.var_89(var_17.var_90.var_45())).var_87("text/plain");
                StringBuffer var_182 = new StringBuffer();
                var_182.var_183(var_73).var_183(var_22.var_88);
                var_65(var_38.var_142()).var_87(var_182);
                var_65(var_38.var_111()).var_87("/jolokia" + var_22.var_88);
                var_65(var_38.var_184()).var_87("/jolokia");
                var_65(var_38.var_185()).var_87("BASIC");
                var_65(var_38.var_91("subject")).var_87(null);
                var_65(var_38.var_89(var_17.var_121.var_45())).var_87(null);

            }
        };
    }


}
