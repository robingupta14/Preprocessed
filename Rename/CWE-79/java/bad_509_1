
import var_0.var_1.var_2.var_3;
import var_0.var_1.var_2.var_4;
import var_0.var_5.var_6.var_7.var_8;
import var_0.var_5.var_6.var_7.var_9;
import var_0.var_5.var_6.var_7.var_10.var_11;
import var_12.var_13.var_14.var_15;
import var_12.var_13.var_14.var_16;
import var_12.var_13.var_14.var_17;
import var_18.var_19.var_20.var_21;
import var_22.var_23.var_24.var_25.var_26;
import var_22.var_23.var_24.var_27.var_28;
import var_22.var_23.var_29.var_30.var_31.var_25.var_32;
import var_22.var_23.var_33.var_34;
import var_22.var_23.var_33.var_35.var_36.var_37.var_38;
import var_22.var_23.var_33.var_39.var_40;
import var_22.var_23.var_33.var_39.var_41;
import var_22.var_23.var_33.var_39.var_42;
import var_22.var_43.var_44.var_45.var_46;
import var_22.var_43.var_44.var_45.var_47;
import var_22.var_43.var_44.var_45.var_48;
import var_22.var_43.var_44.var_45.var_49.var_50;
import var_22.var_43.var_51.var_12.var_52;
import var_22.var_43.var_51.var_53.var_54;
import var_22.var_55.var_56.var_57.var_58;
import var_22.var_55.var_56.var_57.var_59;
import var_22.var_55.var_56.var_57.var_60.var_61;
import var_22.var_55.var_62.var_63;
import var_22.var_55.var_62.var_64.var_65;
import var_22.var_55.var_62.var_64.var_66.var_67;
import var_22.var_55.var_62.var_68.var_69;
import var_22.var_55.var_62.var_51.var_37.var_70;
import var_22.var_55.var_62.var_51.var_37.var_60.var_71;
import var_22.var_55.var_62.var_72.var_73.var_74;
import var_22.var_55.var_62.var_75.var_76.var_77;
import var_22.var_55.var_62.var_75.var_62.var_78.var_79;
import var_22.var_80.var_81.var_82.var_66.var_83;
import var_22.var_80.var_84.var_85;
import var_22.var_80.var_62.var_86.var_66.*;

import var_87.var_88.var_84.var_89;
import var_90.var_12.var_91;
import var_90.var_12.var_92;
import var_90.var_12.var_93;
import var_90.var_12.var_94;
import var_90.var_95.var_96;
import var_90.var_76.var_97;
import var_90.var_76.var_98;

@var_99
@var_100("/workflow/model")
@var_15(var_101 = "工作流-模型管理", var_102 = "工作流模型管理")
@var_67(var_103 = "workflow-model", var_102 = "工作流模型管理")
@var_21
public class class_0 {

    @var_83
    private RepositoryService var_104;

    private final static String var_105          = "modelId";
    private final static String var_106        = "name";
    private final static String var_107    = "revision";
    private final static String var_108 = "description";
    private final static String var_109         = "key";

    @var_110
    @var_67(var_111 = var_65.var_112)
    @var_16("获取模型列表")
    public ResponseMessage<PagerResult<Model>> method_0(QueryParamEntity param_1) {
        ModelQuery var_113 = var_104.var_114();
        return var_74.var_115(
                var_77.var_116(var_113, var_60,
                        var_27 -> var_69.var_117(var_27, new ModelEntity()),
                        (var_118, var_119) -> {
                            if ("latestVersion".var_120(var_118.var_121())) {
                                var_119.var_122();
                            }
                        }));
    }

    @var_123
    @var_124(var_125 = var_85.var_126)
    @var_16("创建模型")
    public ResponseMessage<Model> method_1(@var_127 ModelCreateRequest param_0) throws Exception {
        JSONObject var_128 = new JSONObject();
        var_128.var_129("namespace", "http:
        JSONObject editorNode = new JSONObject();
        editorNode.put("var_130", "canvas");
        var_131.var_129("resourceId", "canvas");
        var_131.var_129("stencilset", var_128);
        JSONObject var_132 = new JSONObject();
        var_132.var_129(var_107, 1);
        var_132.var_129(var_108, var_27.var_133());
        var_132.var_129(var_109, var_27.var_134());
        var_132.var_129(var_106, var_27.var_135());

        Model var_136 = var_104.var_137();
        var_136.var_138(var_132.var_139());
        var_136.var_140(var_27.var_135());
        var_136.var_141(var_27.var_134());
        var_104.var_142(var_136);
        var_104.var_143(var_136.var_144(), var_131.var_145().var_146("utf-8"));
        return var_74.var_115(var_136).var_147(201);
    }

    @var_123("/{modelId}/deploy")
    @var_16("发布模型")
    @var_67(var_111 = "deploy")
    public ResponseMessage<Deployment> method_2(@var_148 String param_2) throws Exception {
        Model var_136 = var_104.var_150(var_149);
        if (var_136 == null) {
            throw new NotFoundException();
        }
        ObjectNode var_151 = (ObjectNode) new ObjectMapper().var_152(var_104.var_153(var_136.var_144()));
        BpmnModel var_27 = new BpmnJsonConverter().var_154(var_151);
        byte[] var_155 = new BpmnXMLConverter().var_156(var_27);
        String var_157 = var_136.var_135() + ".bpmn20.xml";
        Deployment var_158 = var_104.var_159()
                .var_160(var_136.var_135())
                .var_161(var_157, new String(var_155, "utf8"))
                .var_162();
        return var_74.var_115(var_158).var_163(Deployment.class, "id", "name", "new");
    }

    
    @var_110(var_125 = "export/{modelId}/{type}")
    @var_16("导出模型")
    @var_67(var_111 = "export")
    public void method_3(@var_148("modelId") @var_17("模型ID") String param_2,
                       @var_148("type") @var_17(var_125 = "类型", var_164 = "bpmn,json", var_165 = "json") String param_3,
                       @var_17(var_167 = true) HttpServletResponse param_4) {
        try {
            Model var_136 = var_104.var_150(var_149);
            BpmnJsonConverter var_169 = new BpmnJsonConverter();
            byte[] var_170 = var_104.var_153(var_136.var_144());

            JsonNode var_131 = new ObjectMapper().var_152(var_170);
            BpmnModel var_171 = var_169.var_154(var_131);

            
            if (var_171.var_172() == null) {
                var_168.var_173(var_85.var_174.var_125());
                var_168.var_175().var_176("no main process, can't export for dimension: " + var_166);
                var_168.var_177();
                return;
            }

            String var_178 = "";
            byte[] var_179 = null;

            String var_180 = var_171.var_172().var_144();

            if ("bpmn".var_120(var_166)) {

                BpmnXMLConverter var_181 = new BpmnXMLConverter();
                var_179 = var_181.var_156(var_171);

                var_178 = var_180 + ".bpmn20.xml";
            } else if ("json".var_120(var_166)) {

                var_179 = var_170;
                var_178 = var_180 + ".json";

            } else {
                throw new UnsupportedOperationException("不支持的格式:" + var_166);
            }

            var_168.var_182("UTF-8");
            var_168.var_183("application/octet-stream");
            var_168.var_184("Content-Disposition", "attachment; filename=" + var_96.var_185(var_178, "UTF-8"));

            
            try (ByteArrayInputStream var_186 = new ByteArrayInputStream(var_179)) {
                var_52.var_117(var_186, var_168.var_175());
                var_168.var_177();
                var_186.var_187();
            }

        } catch (Exception var_188) {}, var_166={}", modelId, type, e);
        }
    }

    @GetMapping(value = "/{var_149}/var_31")
    @Authorize(action = Permission.ACTION_GET)
    public Object getEditorJson(@PathVariable String modelId) {
        JSONObject modelNode;
        Model model = repositoryService.getModel(modelId);
        if (model == null) throw new NullPointerException();
        if (StringUtils.isNotEmpty(model.getMetaInfo())) {
            modelNode = JSON.parseObject(model.getMetaInfo());
        } else {
            modelNode = new JSONObject();
            modelNode.put(MODEL_NAME, model.getName());
        }
        modelNode.put(MODEL_ID, model.getId());
        modelNode.put("var_27", JSON.parse(new String(repositoryService.getModelEditorSource(model.getId()))));
        return modelNode;
    }

    @PutMapping(value = "/{var_149}")
    @ResponseStatus(value = HttpStatus.OK)
    @Authorize(action = Permission.ACTION_UPDATE)
    public void saveModel(@PathVariable String modelId,
                          @RequestParam Map<String, String> values) throws TranscoderException, IOException {
        Model model = repositoryService.getModel(modelId);
        JSONObject modelJson = JSON.parseObject(model.getMetaInfo());

        modelJson.put(MODEL_NAME, values.get("var_160"));
        var_189.var_129(var_108, var_190.var_191("description"));

        var_27.var_138(var_189.var_145());
        var_27.var_140(var_190.var_191("name"));

        var_104.var_142(var_27);

        var_104.var_143(var_27.var_144(), var_190.var_191("json_xml").var_146("utf-8"));

        InputStream var_192 = new ByteArrayInputStream(var_190.var_191("svg_xml").var_146("utf-8"));
        TranscoderInput var_193 = new TranscoderInput(var_192);

        PNGTranscoder var_45 = new PNGTranscoder();
        
        ByteArrayOutputStream var_194 = new ByteArrayOutputStream();
        TranscoderOutput var_195 = new TranscoderOutput(var_194);

        
        var_45.var_196(var_193, var_195);
        final byte[] var_197 = var_194.var_198();
        var_104.var_199(var_27.var_144(), var_197);
        var_194.var_187();
    }

    @var_200("/{modelId}")
    @var_67(var_111 = var_65.var_201)
    public ResponseMessage<Void> method_4(@var_148 String param_2) {
        var_104.var_202(var_149);
        return var_74.var_115();
    }
}