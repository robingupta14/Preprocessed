

import var_0.var_1.var_2.var_3.var_4;
import var_0.var_1.var_2.var_3.var_5;
import var_6.var_7.var_8;
import var_6.var_9.var_10;
import var_6.var_9.var_11;
import var_6.var_12.*;
import var_6.var_12.var_13.var_14;
import var_6.var_15.var_16;
import var_6.var_17.var_18;
import var_6.var_17.var_19;
import var_6.var_17.var_20;
import var_6.var_17.var_21;
import var_6.var_17.var_22;
import var_6.var_17.var_23.var_24;
import var_6.var_17.var_25.var_26;
import var_6.var_27.var_28;
import var_6.var_27.var_29;
import var_6.var_27.var_30;
import var_6.var_27.var_31;
import var_6.var_27.var_32;
import var_6.var_33.var_34;
import var_6.var_33.var_35;
import var_6.var_33.var_36;
import var_6.var_33.var_37;
import var_6.var_33.var_38;
import var_6.var_33.var_39;
import var_6.var_40.var_41;
import var_6.var_40.var_42;
import var_6.var_43.var_44;
import var_6.var_43.var_45;
import var_6.var_40.var_46;
import var_6.var_47.var_48;
import var_6.var_47.var_49;
import var_6.var_50.var_51;
import var_52.var_12.var_53;
import var_52.var_12.var_54;
import var_52.var_12.var_54.var_55;
import var_52.var_12.var_56;
import var_52.var_12.var_57;
import var_58.var_59.var_60.var_61.var_62;
import var_58.var_63.var_64.var_65.var_66;
import var_58.var_63.var_64.var_65.var_67;
import var_58.var_63.var_64.var_65.var_68;
import var_58.var_63.var_64.var_65.var_69;
import var_58.var_63.var_64.var_70.var_71.var_72;
import var_58.var_63.var_64.var_70.var_40.var_73;
import var_58.var_74.var_75.var_76.var_77;
import var_58.var_78.var_79.var_80;
import var_58.var_81.var_82.var_83;
import var_58.var_81.var_82.var_84;
import var_58.var_81.var_82.var_85;
import var_58.var_81.var_82.var_86;
import var_58.var_81.var_82.var_65.var_87.var_88;

import var_89.var_90.var_91;
import var_89.var_90.var_92.var_93;
import var_89.var_90.var_92.var_94;
import var_89.var_90.var_92.var_95;
import var_96.var_97.var_98;
import var_96.var_97.var_99;
import var_96.var_97.var_100;
import var_96.var_97.var_101;
import var_96.var_97.var_102;
import var_96.var_103.var_104.var_105;
import var_96.var_103.var_104.var_106;
import var_96.var_103.var_104.var_107;
import var_96.var_103.var_104.var_108;
import var_96.var_103.var_104.var_109;
import var_96.var_103.var_110.var_111;
import var_96.var_103.var_110.var_112;
import var_96.var_113.var_114;
import var_96.var_113.var_115;
import var_96.var_113.var_116;
import var_96.var_113.var_117;
import var_96.var_113.var_118;
import var_96.var_119.var_120;
import var_96.var_40.var_121;
import var_96.var_40.var_122;
import var_96.var_40.var_123;
import var_96.var_40.var_124;
import var_96.var_40.var_125;
import var_96.var_40.var_126;
import var_96.var_40.var_127;
import var_96.var_40.var_128;
import var_96.var_40.var_129;
import var_96.var_40.var_130;
import var_96.var_40.var_131;
import var_96.var_40.var_132;
import var_96.var_40.var_133;
import var_96.var_40.var_134;
import var_96.var_40.var_135;
import var_96.var_40.var_136.var_137;
import var_96.var_40.var_136.var_138;
import var_96.var_40.var_136.var_139;
import var_96.var_40.var_136.var_140;
import var_96.var_40.var_136.var_141;
import var_96.var_40.var_142.var_143;
import var_58.var_63.var_64.var_103.var_144;
import var_58.var_81.var_145.var_146;
import var_58.var_81.var_145.var_147.var_148;


public class class_0 {
    private static volatile int var_150 = 0;
    private int var_151;

    public var_149() {
        var_151 = var_150;
        
        
        var_150+=1000;
    }

    
    public String method_0() {
        return "id"+var_151++;
    }

    public static boolean method_1(Object param_2) {
        return var_152 instanceof ModelObject;
    }

    public static boolean method_2(Object param_2) {
        return var_152 instanceof ModelObjectWithContextMenu;
    }

    public static String method_3(Calendar param_3) {
        return var_154.var_155.var_156(var_153.var_157());
    }

    public static String method_4(Calendar param_3) {
        return var_154.var_158.var_156(var_153.var_157());
    }
    
    public static void method_5(JellyContext param_4) {
        String var_160 = var_84.var_161().var_162();

        Functions var_163 = new Functions();
        var_159.var_164("h", var_163);


        
        var_159.var_164("rootURL", var_160);

        
        var_159.var_164("resURL",var_160+var_165());
        var_159.var_164("imagesURL",var_160+var_165()+"/images");
    }

    
    public static <B> Class method_6(Class<? extends B> param_5, Class<B> param_0, int param_6) {
        Type var_168 = var_80.var_169(var_166,var_3);
        if (var_168 instanceof ParameterizedType) {
            ParameterizedType var_170 = (ParameterizedType) var_168;
            return var_80.var_171(var_80.var_172(var_170,var_167));
        } else {
            throw new AssertionError(var_166+" doesn't properly parameterize "+var_3);
        }
    }

    public JDK.DescriptorImpl method_7() {
        return var_56.var_173().var_174(JDK.DescriptorImpl.class);
    }

    
    public static String method_8(int param_7) {
        if(var_175==0)    return "\u00B10";   
        String var_176 = var_177.var_178(var_175);
        if(var_175>0)     return "+"+var_176;
        else        return var_176;
    }

    
    public static String method_9(int param_7) {
        if(var_175==0)    return "";
        String var_176 = var_177.var_178(var_175);
        if(var_175>0)     return "+"+var_176;
        else        return var_176;
    }

    
    public static String method_9(String param_9, int param_7, String param_10) {
        if(var_175==0)    return "";
        String var_176 = var_177.var_178(var_175);
        if(var_175>0)     return var_179+"+"+var_176+var_180;
        else        return var_179+var_176+var_180;
    }

    
    public static String method_10(int param_6, String param_11, String param_12) {
        StringBuilder var_183 = new StringBuilder();
        var_183.var_184(var_167).var_184(' ');
        if(var_167==1)
            var_183.var_184(var_181);
        else
            var_183.var_184(var_182);
        return var_183.var_178();
    }

    public static RunUrl method_11(StaplerRequest param_13) {
        List<Ancestor> var_186 = var_185.var_187();

        
        Ancestor var_188=null,var_189=null;
        for (Ancestor var_190 : var_186) {
            if(var_190.var_191() instanceof Run) {
                if(var_188==null) var_188=var_190;
                var_189=var_190;
            }
        }
        if(var_189==null) return null;    

        String var_192 = var_188.var_193().var_194()+'/';
        String var_3 = var_189.var_194();

        String var_195 = var_185.var_196();
        
        
        
        
        
        
        String var_197 = var_188.var_194();
        int var_198 = 0;
        
        for (int var_175 = var_197.var_199('/'); var_175 >= 0; var_175 = var_197.var_199('/', var_175 + 1)) var_198++;
        
        String var_200 = var_195.var_201("(?:/+[^/]*){" + var_198 + "}", "");

        return new RunUrl( (Run) var_188.var_191(), var_192, var_3, var_200);
    }

    
    public static Area method_13() {
        Cookie var_202 = var_149.var_203(var_84.var_161(),"screenResolution");
        if(var_202!=null)
            return var_41.var_204(var_202.var_205());
        return null;
    }

    
    public static final class class_1 {
        private final String var_192, var_3, var_200;
        private final Run var_207;


        public var_206(Run param_16, String param_14, String param_0, String param_15) {
            this.var_207 = var_207;
            this.var_192 = var_192;
            this.var_3 = var_3;
            this.var_200 = var_200;
        }

        public String method_15() {
            return var_3;
        }

        
        public String method_16() {
            return var_194(var_207.var_208());
        }

        
        public String method_17() {
            return var_194(var_207.var_209());
        }

        private String method_12(Run param_6) {
            if(var_167 ==null)
                return null;
            else {
                return var_192+var_167.var_210()+var_200;
            }
        }
    }

    public static Node.Mode[] method_18() {
        return var_211.var_212.var_213();
    }

    public static String method_19(List<Project> param_17) {
        return var_215.var_216(var_214);
    }

    
    public static Object method_20(boolean param_18, Object param_19, Object param_20) {
        return var_217 ? var_218 : var_219;
    }

    public static String method_21(String param_1, String param_10, String param_21) {
        return var_119 == null ? var_220 : var_119 + var_180;
    }

    public static Map method_22() {
        return new TreeMap<Object,Object>(var_221.var_222());
    }

    public static Map method_23() {
        return new TreeMap<String,String>(var_223.var_224);
    }

    public static boolean method_24() {
        return var_98.var_225==';';
    }

    public static List<LogRecord> method_25() {
        return var_56.var_226;
    }

    public static String method_26(LogRecord param_22) {
        return var_228.var_156(var_227);
    }

    public static Cookie method_14(HttpServletRequest param_13,String param_23) {
        Cookie[] var_230 = var_185.var_231();
        if(var_230!=null) {
            for (Cookie var_232 : var_230) {
                if(var_232.var_233().var_234(var_229)) {
                    return var_232;
                }
            }
        }
        return null;
    }

    public static String method_14(HttpServletRequest param_13,String param_23, String param_24) {
        Cookie var_166 = var_203(var_185, var_229);
        if(var_166==null || var_166.var_205()==null) return var_235;
        return var_166.var_205();
    }

    private static final Pattern var_236 = var_143.var_237("\\d+x\\d+");
    @var_146(NoExternalUse.class)
    public static String method_27(String param_25) throws SecurityException {
        if (!var_236.var_239(var_238).var_240()) {
            throw new SecurityException();
        }
        return var_238;
    }

    
    public static String method_28() {
        return var_241 ? "debug" : "min";
    }

    
    public static boolean var_241 = var_242.var_243("debug.YUI");

    
    public static <V> SortedMap<Integer,V> method_29(SortedMap<Integer,V> param_26, String param_27, String param_28) {
        if(var_245==null && var_246==null)      return var_244;
        if(var_246==null)
            return var_244.var_247(var_177.var_248(var_245)-1);
        if(var_245==null)
            return var_244.var_249(var_177.var_248(var_246));

        return var_244.var_250(var_177.var_248(var_246),var_177.var_248(var_245)-1);
    }

    private static final SimpleFormatter var_228 = new SimpleFormatter();

    
    public static void method_30(HttpServletRequest param_29, HttpServletResponse param_30, boolean param_31) {
        if(var_253)
            return;

        String var_254 = var_251.var_255("auto_refresh");
        boolean var_256 = var_257(var_251);
        if (var_254 != null) {
            var_256 = var_242.var_258(var_254);
            Cookie var_166 = new Cookie("hudson_auto_refresh", var_242.var_178(var_256));
            
            
            
            var_166.var_259("/");
            var_166.var_260(2592000); 
            var_252.var_261(var_166);
        }
        if (var_256) {
            var_252.var_262("Refresh", var_221.var_263("hudson.Functions.autoRefreshSeconds", "10"));
        }
    }

    public static boolean method_31(HttpServletRequest param_29) {
        String var_254 = var_251.var_255("auto_refresh");
        if (var_254 != null) {
            return var_242.var_258(var_254);
        }
        Cookie[] var_230 = var_251.var_231();
        if(var_230==null)
            return false; 

        for (Cookie var_166 : var_230) {
            if (var_166.var_233().var_234("hudson_auto_refresh")) {
                return var_242.var_258(var_166.var_205());
            }
        }
        return false;
    }

    
    public static String method_32(StaplerRequest param_13,Object param_32) {
        List var_265 = var_185.var_187();
        for( int var_175=var_265.var_266()-1; var_175>=0; var_175-- ) {
            Ancestor var_190 = (Ancestor) var_265.var_267(var_175);
            if(var_190.var_191()==var_264)
                return var_190.var_194();
        }
        return null;
    }

    
    public static String method_33() {
        List var_265 = var_84.var_161().var_187();
        for( int var_175=var_265.var_266()-1; var_175>=0; var_175-- ) {
            Ancestor var_190 = (Ancestor) var_265.var_267(var_175);
            if(var_190.var_191() instanceof SearchableModelObject)
                return var_190.var_194()+"/search/";
        }
        return null;
    }

    public static String method_34(String param_6) {
        if(var_167==null) return null;
        else        return var_167+' ';
    }

    
    public static String method_35(String param_33) {
        int var_175 = var_266.var_199('x');
        var_175 = var_177.var_248(var_175 > 0 ? var_266.var_268(0, var_175) : var_266) / 10;
        StringBuilder var_183 = new StringBuilder(30);
        for (int var_269 = 0; var_269 < var_175; var_269++)
            var_183.var_184("&nbsp;");
        return var_183.var_178();
    }

    public static String method_36(IOException param_34) {
        return var_154.var_270(var_271);
    }

    public static boolean method_37(String param_8) {
        if(var_176==null)     return false;
        return var_176.var_199('\r')>=0 || var_176.var_199('\n')>=0;
    }

    public static String method_38(String param_8) {
        return var_154.var_272(var_176);
    }

    public static String method_39(String param_8) {
        return var_154.var_273(var_176);
    }

    public static String method_40(String param_8) {
        return var_154.var_274(var_176);
    }

    public static String method_41(String param_8) {
        return var_176.var_275("&lt;","<").var_275("&gt;",">").var_275("&amp;","&");
    }

    public static String method_42(String param_1) {
        StringBuilder var_183 = new StringBuilder(var_119.var_276()+64);
        for( int var_175=0; var_175<var_119.var_276(); var_175++ ) {
            char var_277 = var_119.var_278(var_175);
            if(var_277=='<')
                var_183.var_184("&lt;");
            else
            if(var_277=='>')
                var_183.var_184("&gt;");
            else
            if(var_277=='&')
                var_183.var_184("&amp;");
            else
            if(var_277=='"')
                var_183.var_184("&quot;");
            else
            if(var_277=='\'')
                var_183.var_184("&#39;");
            else
                var_183.var_184(var_277);
        }
        return var_183.var_178();
    }

    public static void method_43(Permission param_35) throws IOException, ServletException {
        var_279(var_56.var_173(),var_280);
    }

    public static void method_43(AccessControlled param_36, Permission param_35) throws IOException, ServletException {
        if (var_280 != null) {
            var_281.var_279(var_280);
        }
    }

    
    public static void method_43(Object param_36, Permission param_35) throws IOException, ServletException {
        if (var_280 == null)
            return;
        
        if (var_281 instanceof AccessControlled)
            var_279((AccessControlled) var_281,var_280);
        else {
            List<Ancestor> var_282 = var_84.var_161().var_187();
            for(Ancestor var_190 : var_42.var_283(var_282)) {
                Object var_152 = var_190.var_191();
                if (var_152 instanceof AccessControlled) {
                    var_279((AccessControlled) var_152,var_280);
                    return;
                }
            }
            var_279(var_56.var_173(),var_280);
        }
    }

    
    public static boolean method_44(Permission param_35) throws IOException, ServletException {
        return var_284(var_56.var_173(),var_280);
    }

    
    public static boolean method_44(Object param_36, Permission param_35) throws IOException, ServletException {
        if (var_280 == null)
            return true;
        if (var_281 instanceof AccessControlled)
            return ((AccessControlled)var_281).var_284(var_280);
        else {
            List<Ancestor> var_282 = var_84.var_161().var_187();
            for(Ancestor var_190 : var_42.var_283(var_282)) {
                Object var_152 = var_190.var_191();
                if (var_152 instanceof AccessControlled) {
                    return ((AccessControlled)var_152).var_284(var_280);
                }
            }
            return var_56.var_173().var_284(var_280);
        }
    }

    public static void method_45(StaplerRequest param_13, StaplerResponse param_37, Object param_38, Permission param_35) throws IOException, ServletException {
        
        
        if(var_287!=null && !var_288.var_285(var_185, var_286)) {
            
            var_286.var_289(var_95.var_290);
            var_286.var_291().var_292();
            throw new ServletException();
        }

        
        if(var_280!=null)
            var_279(var_280);
    }

    
    public static String method_46(StaplerRequest param_13) {
        String var_293 = var_56.var_173().var_294();
        if(var_293 !=null)
            
            return var_293;
        StringBuilder var_183 = new StringBuilder();
        var_183.var_184(var_185.var_295()).var_184(":
        buf.append(req.getServerName());
        if(! (req.getScheme().equals("var_92") && req.getLocalPort()==80 || req.getScheme().equals("var_296") && req.getLocalPort()==443))
            buf.append(':').append(req.getLocalPort());
        buf.append(req.getContextPath()).append('/');
        return buf.toString();
    }

    
    public static String getFooterURL() {
        if(footerURL == null) {
            footerURL = System.getProperty("var_6.var_297");
            if(var_144.var_298(var_297)) {
                var_297 = "http:
            }
        }
        return footerURL;
    }
    private static String footerURL = null;

    public static List<JobPropertyDescriptor> getJobPropertyDescriptors(Class<? extends Job> clazz) {
        return JobPropertyDescriptor.getPropertyDescriptors(clazz);
    }

    public static List<Descriptor<BuildWrapper>> getBuildWrapperDescriptors(AbstractProject<?,?> project) {
        return BuildWrappers.getFor(project);
    }

    public static List<Descriptor<SecurityRealm>> getSecurityRealmDescriptors() {
        return SecurityRealm.all();
    }

    public static List<Descriptor<AuthorizationStrategy>> getAuthorizationStrategyDescriptors() {
        return AuthorizationStrategy.all();
    }

    public static List<Descriptor<Builder>> getBuilderDescriptors(AbstractProject<?,?> project) {
        return BuildStepDescriptor.filter(Builder.all(), project.getClass());
    }

    public static List<Descriptor<Publisher>> getPublisherDescriptors(AbstractProject<?,?> project) {
        return BuildStepDescriptor.filter(Publisher.all(), project.getClass());
    }

    public static List<SCMDescriptor<?>> getSCMDescriptors(AbstractProject<?,?> project) {
        return SCM._for(project);
    }

    public static List<Descriptor<ComputerLauncher>> getComputerLauncherDescriptors() {
        return Jenkins.getInstance().<ComputerLauncher,Descriptor<ComputerLauncher>>getDescriptorList(ComputerLauncher.class);
    }

    public static List<Descriptor<RetentionStrategy<?>>> getRetentionStrategyDescriptors() {
        return RetentionStrategy.all();
    }

    public static List<ParameterDescriptor> getParameterDescriptors() {
        return ParameterDefinition.all();
    }

    public static List<Descriptor<CaptchaSupport>> getCaptchaSupportDescriptors() {
        return CaptchaSupport.all();
    }

    public static List<Descriptor<ViewsTabBar>> getViewsTabBarDescriptors() {
        return ViewsTabBar.all();
    }

    public static List<Descriptor<MyViewsTabBar>> getMyViewsTabBarDescriptors() {
        return MyViewsTabBar.all();
    }

    public static List<NodePropertyDescriptor> getNodePropertyDescriptors(Class<? extends Node> clazz) {
        List<NodePropertyDescriptor> result = new ArrayList<NodePropertyDescriptor>();
        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.getInstance().getDescriptorList(NodeProperty.class);
        for (NodePropertyDescriptor npd : list) {
            if (npd.isApplicable(clazz)) {
                result.add(npd);
            }
        }
        return result;
    }

    
    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<GlobalConfigurationCategory> predicate) {
        ExtensionList<Descriptor> exts = Jenkins.getInstance().getExtensionList(Descriptor.class);
        List<Tag> r = new ArrayList<Tag>(exts.size());

        for (ExtensionComponent<Descriptor> c : exts.getComponents()) {
            Descriptor d = c.getInstance();
            if (d.getGlobalConfigPage()==null)  continue;

            if (d instanceof GlobalConfiguration) {
                if (predicate.apply(((GlobalConfiguration)d).getCategory()))
                    r.add(new Tag(c.ordinal(), d));
            } else {
                if (predicate.apply(GlobalConfigurationCategory.get(Unclassified.class)))
                    r.add(new Tag(0, d));
            }
        }
        Collections.sort(r);

        List<Descriptor> answer = new ArrayList<Descriptor>(r.size());
        for (Tag d : r) answer.add(d.d);

        return DescriptorVisibilityFilter.apply(Jenkins.getInstance(),answer);
    }

    
    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {
        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());
    }

    
    @Deprecated
    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {
        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));
    }

    
    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {
        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {
            public boolean apply(GlobalConfigurationCategory cat) {
                return cat instanceof GlobalConfigurationCategory.Unclassified;
            }
        });
    }
    
    private static class Tag implements Comparable<Tag> {
        double ordinal;
        String hierarchy;
        Descriptor d;

        Tag(double ordinal, Descriptor d) {
            this.ordinal = ordinal;
            this.d = d;
            this.hierarchy = buildSuperclassHierarchy(d.clazz, new StringBuilder()).toString();
        }

        private StringBuilder buildSuperclassHierarchy(Class c, StringBuilder buf) {
            Class sc = c.getSuperclass();
            if (sc!=null)   buildSuperclassHierarchy(sc,buf).append(':');
            return buf.append(c.getName());
        }

        public int compareTo(Tag that) {
            int r = Double.compare(this.ordinal, that.ordinal);
            if (r!=0)   return -r; 
            return this.hierarchy.compareTo(that.hierarchy);
        }
    }
    
    public static String getIconFilePath(Action a) {
        String name = a.getIconFileName();
        if (name==null)     return null;
        if (name.startsWith("/"))
            return name.substring(1);
        else
            return "var_299/24var_300/"+name;
    }

    
    public static int size2(Object o) throws Exception {
        if(o==null) return 0;
        return ASTSizeFunction.sizeOf(o,Introspector.getUberspect());
    }

    
    public static String getRelativeLinkTo(Item p) {
        Map<Object,String> ancestors = new HashMap<Object,String>();
        View view=null;

        StaplerRequest request = Stapler.getCurrentRequest();
        for( Ancestor a : request.getAncestors() ) {
            ancestors.put(a.getObject(),a.getRelativePath());
            if(a.getObject() instanceof View)
                view = (View) a.getObject();
        }

        String path = ancestors.get(p);
        if(path!=null)  return path;

        Item i=p;
        String url = "";
        while(true) {
            ItemGroup ig = i.getParent();
            url = i.getShortUrl()+url;

            if(ig== Jenkins.getInstance()) {
                assert i instanceof TopLevelItem;
                if(view!=null && view.contains((TopLevelItem)i)) {
                    
                    return ancestors.get(view)+'/'+url;
                } else {
                    
                    return request.getContextPath()+'/'+p.getUrl();
                }
            }

            path = ancestors.get(ig);
            if(path!=null)  return path+'/'+url;

            assert ig instanceof Item; 
            i = (Item) ig;
        }
    }

    public static Map<Thread,StackTraceElement[]> dumpAllThreads() {
        Map<Thread,StackTraceElement[]> sorted = new TreeMap<Thread,StackTraceElement[]>(new ThreadSorter());
        sorted.putAll(Thread.getAllStackTraces());
        return sorted;
    }

    @IgnoreJRERequirement
    public static ThreadInfo[] getThreadInfos() {
        ThreadMXBean mbean = ManagementFactory.getThreadMXBean();
        return mbean.dumpAllThreads(mbean.isObjectMonitorUsageSupported(),mbean.isSynchronizerUsageSupported());
    }

    public static ThreadGroupMap sortThreadsAndGetGroupMap(ThreadInfo[] list) {
        ThreadGroupMap sorter = new ThreadGroupMap();
        Arrays.sort(list, sorter);
        return sorter;
    }

    
    private static class ThreadSorterBase {
        protected Map<Long,String> map = new HashMap<Long,String>();

        private ThreadSorterBase() {
            ThreadGroup tg = Thread.currentThread().getThreadGroup();
            while (tg.getParent() != null) tg = tg.getParent();
            Thread[] threads = new Thread[tg.activeCount()*2];
            int threadsLen = tg.enumerate(threads, true);
            for (int i = 0; i < threadsLen; i++)
                map.put(threads[i].getId(), threads[i].getThreadGroup().getName());
        }

        protected int compare(long idA, long idB) {
            String tga = map.get(idA), tgb = map.get(idB);
            int result = (tga!=null?-1:0) + (tgb!=null?1:0);  
            if (result==0 && tga!=null)
                result = tga.compareToIgnoreCase(tgb);
            return result;
        }
    }

    public static class ThreadGroupMap extends ThreadSorterBase implements Comparator<ThreadInfo> {

        
        public String getThreadGroup(ThreadInfo ti) {
            return map.get(ti.getThreadId());
        }

        public int compare(ThreadInfo a, ThreadInfo b) {
            int result = compare(a.getThreadId(), b.getThreadId());
            if (result == 0)
                result = a.getThreadName().compareToIgnoreCase(b.getThreadName());
            return result;
        }
    }

    private static class ThreadSorter extends ThreadSorterBase implements Comparator<Thread> {

        public int compare(Thread a, Thread b) {
            int result = compare(a.getId(), b.getId());
            if (result == 0)
                result = a.getName().compareToIgnoreCase(b.getName());
            return result;
        }
    }

    
    @IgnoreJRERequirement
    public static boolean isMustangOrAbove() {
        try {
            System.console();
            return true;
        } catch(LinkageError e) {}
    }

    
    @IgnoreJRERequirement
    public static String dumpThreadInfo(ThreadInfo ti, ThreadGroupMap map) {
        String grp = map.getThreadGroup(ti);
        StringBuilder sb = new StringBuilder("\"" + var_301.var_302() + "\"" +
                                             " Id=" + var_301.var_303() + " Group=" +
                                             (var_304 != null ? var_304 : "?") + " " +
                                             var_301.var_305());
        if (var_301.var_306() != null) {
            var_307.var_184(" on " + var_301.var_306());
        }
        if (var_301.var_308() != null) {
            var_307.var_184(" owned by \"" + var_301.var_308() +
                      "\" Id=" + var_301.var_309());
        }
        if (var_301.var_310()) {
            var_307.var_184(" (suspended)");
        }
        if (var_301.var_311()) {
            var_307.var_184(" (in native)");
        }
        var_307.var_184('\n');
        StackTraceElement[] var_312 = var_301.var_313();
        for (int var_175=0; var_175 < var_312.var_276; var_175++) {
            StackTraceElement var_314 = var_312[var_175];
            var_307.var_184("\tat " + var_314.var_178());
            var_307.var_184('\n');
            if (var_175 == 0 && var_301.var_315() != null) {
                Thread.State var_316 = var_301.var_305();
                switch (var_316) {
                    case var_317:
                        var_307.var_184("\t-  blocked on " + var_301.var_315());
                        var_307.var_184('\n');
                        break;
                    case var_318:
                        var_307.var_184("\t-  waiting on " + var_301.var_315());
                        var_307.var_184('\n');
                        break;
                    case var_319:
                        var_307.var_184("\t-  waiting on " + var_301.var_315());
                        var_307.var_184('\n');
                        break;
                    default:
                }
            }

            for (MonitorInfo var_320 : var_301.var_321()) {
                if (var_320.var_322() == var_175) {
                    var_307.var_184("\t-  locked " + var_320);
                    var_307.var_184('\n');
                }
            }
       }

       LockInfo[] var_323 = var_301.var_324();
       if (var_323.var_276 > 0) {
           var_307.var_184("\n\tNumber of locked synchronizers = " + var_323.var_276);
           var_307.var_184('\n');
           for (LockInfo var_325 : var_323) {
               var_307.var_184("\t- " + var_325);
               var_307.var_184('\n');
           }
       }
       var_307.var_184('\n');
       return var_307.var_178();
    }

    public static <T> var_124<var_326> var_327() {
        return var_125.var_327();
    }

    public static String var_328(String param_8) {
        StringBuilder var_183 = new StringBuilder();
        for( int var_175=0; var_175<var_176.var_276(); var_175++ ) {
            char var_277 = var_176.var_278(var_175);
            switch(var_277) {
            case '\'':
                var_183.var_184("\\'");
                break;
            case '\\':
                var_183.var_184("\\\\");
                break;
            case '"':
                var_183.var_184("\\\"");
                break;
            default:
                var_183.var_184(var_277);
            }
        }
        return var_183.var_178();
    }

    
    public static String var_329(String param_8) {
        if(var_176==null || var_176.var_276()==0) return var_176;
        return var_330.var_331(var_176.var_278(0))+var_176.var_268(1);
    }

    public static String var_332() {
        return var_56.var_333;
    }

    
    public static String var_165() {
        return var_56.var_334;
    }

    public static String var_335(Object param_32, String param_39) {
        Class var_337 = var_264.var_338();

        if(var_264 instanceof Class)
            var_337 = (Class)var_264;
        if(var_264 instanceof Descriptor)
            var_337 = ((Descriptor)var_264).var_337;

        StringBuilder var_183 = new StringBuilder(var_84.var_161().var_162());
        var_183.var_184(var_56.var_339).var_184('/');
        var_183.var_184(var_337.var_233().var_275('.','/').var_275('$','/'));
        var_183.var_184('/').var_184(var_336);

        return var_183.var_178();
    }

    public static boolean var_340(Object param_32, String param_39) throws var_99 {
        if(var_264==null)    return false;
        return var_84.var_161().var_341(var_264,var_336)!=null;
    }

    
    public static boolean var_342(Boolean param_40) {
        if(var_343==null) return true;
        return var_343;
    }

    
    public static <T> var_326 var_344(T var_345, T var_235) {
        return var_345!=null ? var_345 : var_235;
    }

    public static String var_346(Throwable param_42) {
        StringWriter var_348 = new StringWriter();
        var_347.var_349(new PrintWriter(var_348));
        return var_348.var_178();
    }

    
    public static int var_350(String param_8) {
        if(var_176==null)     return 5;
        return var_351.var_352(5,var_353.var_354(var_176).var_276);
    }

    
    public static String var_355(Item param_7) {
        if (var_175 instanceof Job) {
            Job var_269 = (Job) var_175;
            switch (var_269.var_356().var_357()) {
            case var_358:
            case var_359:
            case var_360:
                return "Failure";
            case var_361:
                return "Success";
            case var_362:
            case var_363:
                return "Unknown";
            }
        }
        return "Unknown";
    }

    private static final Pattern var_353 = var_143.var_237("\r?\n");

    
    public static boolean var_364() {
        return var_56.var_365() instanceof AnonymousAuthenticationToken;
    }

    
    public static JellyContext var_366() {
        JellyContext var_159 = var_367.var_368.var_267();
        assert var_159!=null;
        return var_159;
    }

    
    public static String var_369(Script param_43) throws var_67 {
        StringWriter var_371 = new StringWriter();
        var_370.var_207(var_366(), var_69.var_372(var_371));
        return var_371.var_178();
    }

    
    public static <T> var_130<var_326> var_373(List<T> param_0, int param_44) {
        if(var_374<var_3.var_266())
            return var_3.var_373(0,var_374);
        else
            return var_3;
    }

    
    public static String var_375(String... var_376) {
        StringBuilder var_183 = new StringBuilder();
        for (String var_176 : var_376) {
            if (var_176.var_276()==0)  continue;

            if (var_183.var_276()>0) {
                if (var_183.var_278(var_183.var_276()-1)!='/')
                    var_183.var_184('/');
                if (var_176.var_278(0)=='/')   var_176=var_176.var_268(1);
            }
            var_183.var_184(var_176);
        }
        return var_183.var_178();
    }

    
    public static String var_377(String param_45,Action param_46) {
        String var_379 = var_378.var_380();
        if(var_379==null)   return null;    
        try {
            if (new URI(var_379).var_381()) {
                return var_379;
            }
        } catch (URISyntaxException var_382) {}: {1}", new Object[] {action, x});
            return null;
        }
        if(urlName.startsWith("/"))
            return joinPath(Stapler.getCurrentRequest().getContextPath(),urlName);
        else
            
            return joinPath(Stapler.getCurrentRequest().getContextPath()+'/'+itUrl,urlName);
    }

    
    public static String toEmailSafeString(String projectName) {
        
        StringBuilder buf = new StringBuilder(projectName.length());
        for( int i=0; i<projectName.length(); i++ ) {
            char ch = projectName.charAt(i);
            if(('a'<=ch && ch<='z')
            || ('z'<=ch && ch<='Z')
            || ('0'<=ch && ch<='9')
            || "-var_383.".indexOf(ch)>=0)
                buf.append(ch);
            else
                buf.append('_');    
        }
        return projectName;
    }

    public String getSystemProperty(String key) {
        return System.getProperty(key);
    }

    
    public String getServerName() {
        
        
        String url = Jenkins.getInstance().getRootUrl();
        try {
            if(url!=null) {
                String host = new URL(url).getHost();
                if(host!=null)
                    return host;
            }
        } catch (MalformedURLException e) {}
        return Stapler.getCurrentRequest().getServerName();
    }

    
    public String getCheckUrl(String userDefined, Object descriptor, String field) {
        if(userDefined!=null || field==null)   return userDefined;
        if (descriptor instanceof Descriptor) {
            Descriptor d = (Descriptor) descriptor;
            return d.getCheckUrl(field);
        }
        return null;
    }

    
    public boolean hyperlinkMatchesCurrentPage(String href) throws UnsupportedEncodingException {
        String url = Stapler.getCurrentRequest().getRequestURL().toString();
        if (href == null || href.length() <= 1) return ".".equals(href) && url.endsWith("/");
        url = URLDecoder.decode(url,"var_384-8");
        href = URLDecoder.decode(href,"var_384-8");
        if (url.endsWith("/")) url = url.substring(0, url.length() - 1);
        if (href.endsWith("/")) href = href.substring(0, href.length() - 1);

        return url.endsWith(href);
    }

    public <T> List<T> singletonList(T t) {
        return Collections.singletonList(t);
    }

    
    public static List<PageDecorator> getPageDecorators() {
        
        if(Jenkins.getInstance()==null)  return Collections.emptyList();
        return PageDecorator.all();
    }
    
    public static List<Descriptor<Cloud>> getCloudDescriptors() {
        return Cloud.all();
    }

    
    public String prepend(String prefix, String body) {
        if(body!=null && body.length()>0)
            return prefix+body;
        return body;
    }

    public static List<Descriptor<CrumbIssuer>> getCrumbIssuerDescriptors() {
        return CrumbIssuer.all();
    }

    public static String getCrumb(StaplerRequest req) {
        Jenkins h = Jenkins.getInstance();
        CrumbIssuer issuer = h != null ? h.getCrumbIssuer() : null;
        return issuer != null ? issuer.getCrumb(req) : "";
    }

    public static var_385 var_386() {
        var_56 var_163 = var_56.var_173();
        CrumbIssuer var_387 = var_163 != null ? var_163.var_388() : null;
        return var_387 != null ? var_387.var_389().var_386() : "";
    }

    public static Date var_390() {
        return new Date();
    }

    public static Locale var_391() {
        Locale var_392=null;
        StaplerRequest var_185 = var_84.var_161();
        if(var_185!=null)
            var_392 = var_185.var_393();
        if(var_392==null)
            var_392 = var_131.var_394();
        return var_392;
    }

    
    public static String var_395() {
        String var_396 = var_84.var_161().var_162();
        StringBuilder var_183 = new StringBuilder();
        for (ConsoleAnnotatorFactory var_188 : var_11.var_397()) {
            String var_336 = var_396 + "/extensionList/" + ConsoleAnnotatorFactory.class.var_233() + "/" + var_188.var_338().var_233();
            if (var_188.var_398())
                var_183.var_184("<script src='"+var_336+"/script.js'></script>");
            if (var_188.var_399())
                var_183.var_184("<link rel='stylesheet' type='text/css' href='"+var_336+"/style.css' />");
        }
        for (ConsoleAnnotationDescriptor var_400 : var_10.var_397()) {
            String var_336 = var_396+"/descriptor/"+var_400.var_337.var_233();
            if (var_400.var_398())
                var_183.var_184("<script src='"+var_336+"/script.js'></script>");
            if (var_400.var_399())
                var_183.var_184("<link rel='stylesheet' type='text/css' href='"+var_336+"/style.css' />");
        }
        return var_183.var_178();
    }

    
    public List<String> var_401() {
        while (true) {
            try {
                List<String> var_227 = new ArrayList<String>();
                Enumeration<String> var_271 = var_138.var_402().var_401();
                while (var_271.var_403())
                    var_227.var_404(var_271.var_405());
                return var_227;
            } catch (ConcurrentModificationException var_271) {}
        }
    }

    
    public String var_406(Object param_2) {
        if (var_152==null)    return null;
        if (var_152 instanceof Secret)    return ((Secret)var_152).var_407();
        return var_152.var_178();
    }

    public List var_408(Object param_4, Iterable param_47) {
        return var_410.var_411(var_159,var_409);
    }
    
    
    public static boolean var_412() {
        return var_413.var_414;
    }

    
    public static boolean var_415() {
        return var_242.var_243("hudson.security.ArtifactsPermission");
    }

    
    public static boolean var_416() {
        return var_242.var_243("hudson.security.WipeOutPermission");
    }

    public static String var_417(JellyContext param_4, String param_48) {
        return var_84.var_161().var_419(new RenderOnDemandClosure(var_159,var_418));
    }

    public static String var_420() {
        return var_421.var_420();
    }
    
    public static String var_422(String param_41) {
        String var_152 = var_420();
        var_84.var_161().var_423("currentDescriptorByNameUrl", var_345);

        return var_152;
    }

    public static void var_424(String param_49) {
        var_84.var_161().var_423("currentDescriptorByNameUrl", var_425);
    }

    public static List<String> var_426(String param_23) {
        List<String> var_227 = new ArrayList<String>();
        Enumeration var_271 = var_84.var_161().var_427(var_229);
        while (var_271.var_403()) {
            var_227.var_404(var_271.var_405().var_178());
        }
        return var_227;
    }

    
    public static Object var_428(Object param_2) {
        return var_152==null ? null : new RawHtmlArgument(var_152);
    }

    public static ArrayList<CLICommand> var_429() {
        ArrayList<CLICommand> var_397 = new ArrayList<CLICommand>(var_8.var_397());
        var_125.var_430(var_397, new Comparator<CLICommand>() {
            public int method_47(CLICommand param_50, CLICommand param_51) {
                return var_431.var_233().var_433(var_432.var_233());
            }
        });
        return var_397;
    }

    
    public static String var_434(User param_52, String param_53) {
        return var_39.var_437(var_435, var_436);
    }

    
    public String var_438(User param_52, String param_53) {
        return var_434(var_435,var_436);
    }
    
    
    
    public static String var_439(long param_33){
        String var_440 = "B";
        if(var_266 < 1024){
            return var_266 + " " + var_440;
        }
        Double var_441 = new Double(var_266);
        if(var_441>=1024){
            var_441 = var_441/1024;
            var_440 = "KB";
            if(var_441>=1024){
                var_441 = var_441/1024;
                var_440 = "MB";
                if(var_441>=1024){
                    var_441=var_441/1024;
                    var_440 = "GB";
                }
            }
        }
        DecimalFormat var_156 = new DecimalFormat();
        return var_156.var_156(var_441) + " " + var_440;
    }
}
