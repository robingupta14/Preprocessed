

import var_0.var_1.var_2.var_3.var_4;
import var_0.var_1.var_2.var_3.var_5;
import var_6.var_7.var_8;
import var_6.var_9.var_10;
import var_6.var_9.var_11;
import var_6.var_12.*;
import var_6.var_12.var_13.var_14;
import var_6.var_15.var_16;
import var_6.var_17.var_18;
import var_6.var_17.var_19;
import var_6.var_17.var_20;
import var_6.var_17.var_21;
import var_6.var_17.var_22;
import var_6.var_17.var_23.var_24;
import var_6.var_17.var_25.var_26;
import var_6.var_27.var_28;
import var_6.var_27.var_29;
import var_6.var_27.var_30;
import var_6.var_27.var_31;
import var_6.var_27.var_32;
import var_6.var_33.var_34;
import var_6.var_33.var_35;
import var_6.var_33.var_36;
import var_6.var_33.var_37;
import var_6.var_33.var_38;
import var_6.var_33.var_39;
import var_6.var_40.var_41;
import var_6.var_40.var_42;
import var_6.var_43.var_44;
import var_6.var_43.var_45;
import var_6.var_40.var_46;
import var_6.var_47.var_48;
import var_6.var_47.var_49;
import var_6.var_50.var_51;
import var_52.var_12.var_53;
import var_52.var_12.var_54;
import var_52.var_12.var_54.var_55;
import var_52.var_12.var_56;
import var_52.var_12.var_57;
import var_58.var_59.var_60.var_61.var_62;
import var_58.var_63.var_64.var_65.var_66;
import var_58.var_63.var_64.var_65.var_67;
import var_58.var_63.var_64.var_65.var_68;
import var_58.var_63.var_64.var_65.var_69;
import var_58.var_63.var_64.var_70.var_71.var_72;
import var_58.var_63.var_64.var_70.var_40.var_73;
import var_58.var_74.var_75.var_76.var_77;
import var_58.var_78.var_79.var_80;
import var_58.var_81.var_82.var_83;
import var_58.var_81.var_82.var_84;
import var_58.var_81.var_82.var_85;
import var_58.var_81.var_82.var_86;
import var_58.var_81.var_82.var_65.var_87.var_88;

import var_89.var_90.var_91;
import var_89.var_90.var_92.var_93;
import var_89.var_90.var_92.var_94;
import var_89.var_90.var_92.var_95;
import var_96.var_97.var_98;
import var_96.var_97.var_99;
import var_96.var_97.var_100;
import var_96.var_97.var_101;
import var_96.var_97.var_102;
import var_96.var_103.var_104.var_105;
import var_96.var_103.var_104.var_106;
import var_96.var_103.var_104.var_107;
import var_96.var_103.var_104.var_108;
import var_96.var_103.var_104.var_109;
import var_96.var_103.var_110.var_111;
import var_96.var_103.var_110.var_112;
import var_96.var_113.var_114;
import var_96.var_113.var_115;
import var_96.var_113.var_116;
import var_96.var_113.var_117;
import var_96.var_113.var_118;
import var_96.var_119.var_120;
import var_96.var_40.var_121;
import var_96.var_40.var_122;
import var_96.var_40.var_123;
import var_96.var_40.var_124;
import var_96.var_40.var_125;
import var_96.var_40.var_126;
import var_96.var_40.var_127;
import var_96.var_40.var_128;
import var_96.var_40.var_129;
import var_96.var_40.var_130;
import var_96.var_40.var_131;
import var_96.var_40.var_132;
import var_96.var_40.var_133;
import var_96.var_40.var_134;
import var_96.var_40.var_135;
import var_96.var_40.var_136.var_137;
import var_96.var_40.var_136.var_138;
import var_96.var_40.var_136.var_139;
import var_96.var_40.var_136.var_140;
import var_96.var_40.var_136.var_141;
import var_96.var_40.var_142.var_143;
import var_58.var_63.var_64.var_103.var_144;


public class class_0 {
    private static volatile int var_146 = 0;
    private int var_147;

    public var_145() {
        var_147 = var_146;
        
        
        var_146+=1000;
    }

    
    public String method_0() {
        return "id"+var_147++;
    }

    public static boolean method_1(Object param_2) {
        return var_148 instanceof ModelObject;
    }

    public static boolean method_2(Object param_2) {
        return var_148 instanceof ModelObjectWithContextMenu;
    }

    public static String method_3(Calendar param_3) {
        return var_150.var_151.var_152(var_149.var_153());
    }

    public static String method_4(Calendar param_3) {
        return var_150.var_154.var_152(var_149.var_153());
    }
    
    public static void method_5(JellyContext param_4) {
        String var_156 = var_84.var_157().var_158();

        Functions var_159 = new Functions();
        var_155.var_160("h", var_159);


        
        var_155.var_160("rootURL", var_156);

        
        var_155.var_160("resURL",var_156+var_161());
        var_155.var_160("imagesURL",var_156+var_161()+"/images");
    }

    
    public static <B> Class method_6(Class<? extends B> param_5, Class<B> param_0, int param_6) {
        Type var_164 = var_80.var_165(var_162,var_3);
        if (var_164 instanceof ParameterizedType) {
            ParameterizedType var_166 = (ParameterizedType) var_164;
            return var_80.var_167(var_80.var_168(var_166,var_163));
        } else {
            throw new AssertionError(var_162+" doesn't properly parameterize "+var_3);
        }
    }

    public JDK.DescriptorImpl method_7() {
        return var_56.var_169().var_170(JDK.DescriptorImpl.class);
    }

    
    public static String method_8(int param_7) {
        if(var_171==0)    return "\u00B10";   
        String var_172 = var_173.var_174(var_171);
        if(var_171>0)     return "+"+var_172;
        else        return var_172;
    }

    
    public static String method_9(int param_7) {
        if(var_171==0)    return "";
        String var_172 = var_173.var_174(var_171);
        if(var_171>0)     return "+"+var_172;
        else        return var_172;
    }

    
    public static String method_9(String param_9, int param_7, String param_10) {
        if(var_171==0)    return "";
        String var_172 = var_173.var_174(var_171);
        if(var_171>0)     return var_175+"+"+var_172+var_176;
        else        return var_175+var_172+var_176;
    }

    
    public static String method_10(int param_6, String param_11, String param_12) {
        StringBuilder var_179 = new StringBuilder();
        var_179.var_180(var_163).var_180(' ');
        if(var_163==1)
            var_179.var_180(var_177);
        else
            var_179.var_180(var_178);
        return var_179.var_174();
    }

    public static RunUrl method_11(StaplerRequest param_13) {
        List<Ancestor> var_182 = var_181.var_183();

        
        Ancestor var_184=null,var_185=null;
        for (Ancestor var_186 : var_182) {
            if(var_186.var_187() instanceof Run) {
                if(var_184==null) var_184=var_186;
                var_185=var_186;
            }
        }
        if(var_185==null) return null;    

        String var_188 = var_184.var_189().var_190()+'/';
        String var_3 = var_185.var_190();

        String var_191 = var_181.var_192();
        
        
        
        
        
        
        String var_193 = var_184.var_190();
        int var_194 = 0;
        
        for (int var_171 = var_193.var_195('/'); var_171 >= 0; var_171 = var_193.var_195('/', var_171 + 1)) var_194++;
        
        String var_196 = var_191.var_197("(?:/+[^/]*){" + var_194 + "}", "");

        return new RunUrl( (Run) var_184.var_187(), var_188, var_3, var_196);
    }

    
    public static Area method_13() {
        Cookie var_198 = var_145.var_199(var_84.var_157(),"screenResolution");
        if(var_198!=null)
            return var_41.var_200(var_198.var_201());
        return null;
    }

    
    public static final class class_1 {
        private final String var_188, var_3, var_196;
        private final Run var_203;


        public var_202(Run param_16, String param_14, String param_0, String param_15) {
            this.var_203 = var_203;
            this.var_188 = var_188;
            this.var_3 = var_3;
            this.var_196 = var_196;
        }

        public String method_15() {
            return var_3;
        }

        
        public String method_16() {
            return var_190(var_203.var_204());
        }

        
        public String method_17() {
            return var_190(var_203.var_205());
        }

        private String method_12(Run param_6) {
            if(var_163 ==null)
                return null;
            else {
                return var_188+var_163.var_206()+var_196;
            }
        }
    }

    public static Node.Mode[] method_18() {
        return var_207.var_208.var_209();
    }

    public static String method_19(List<Project> param_17) {
        return var_211.var_212(var_210);
    }

    
    public static Object method_20(boolean param_18, Object param_19, Object param_20) {
        return var_213 ? var_214 : var_215;
    }

    public static String method_21(String param_1, String param_10, String param_21) {
        return var_119 == null ? var_216 : var_119 + var_176;
    }

    public static Map method_22() {
        return new TreeMap<Object,Object>(var_217.var_218());
    }

    public static Map method_23() {
        return new TreeMap<String,String>(var_219.var_220);
    }

    public static boolean method_24() {
        return var_98.var_221==';';
    }

    public static List<LogRecord> method_25() {
        return var_56.var_222;
    }

    public static String method_26(LogRecord param_22) {
        return var_224.var_152(var_223);
    }

    public static Cookie method_14(HttpServletRequest param_13,String param_23) {
        Cookie[] var_226 = var_181.var_227();
        if(var_226!=null) {
            for (Cookie var_228 : var_226) {
                if(var_228.var_229().var_230(var_225)) {
                    return var_228;
                }
            }
        }
        return null;
    }

    public static String method_14(HttpServletRequest param_13,String param_23, String param_24) {
        Cookie var_162 = var_199(var_181, var_225);
        if(var_162==null || var_162.var_201()==null) return var_231;
        return var_162.var_201();
    }

    
    public static String method_27() {
        return var_232 ? "debug" : "min";
    }

    
    public static boolean var_232 = var_233.var_234("debug.YUI");

    
    public static <V> SortedMap<Integer,V> method_28(SortedMap<Integer,V> param_25, String param_26, String param_27) {
        if(var_236==null && var_237==null)      return var_235;
        if(var_237==null)
            return var_235.var_238(var_173.var_239(var_236)-1);
        if(var_236==null)
            return var_235.var_240(var_173.var_239(var_237));

        return var_235.var_241(var_173.var_239(var_237),var_173.var_239(var_236)-1);
    }

    private static final SimpleFormatter var_224 = new SimpleFormatter();

    
    public static void method_29(HttpServletRequest param_28, HttpServletResponse param_29, boolean param_30) {
        if(var_244)
            return;

        String var_245 = var_242.var_246("auto_refresh");
        boolean var_247 = var_248(var_242);
        if (var_245 != null) {
            var_247 = var_233.var_249(var_245);
            Cookie var_162 = new Cookie("hudson_auto_refresh", var_233.var_174(var_247));
            
            
            
            var_162.var_250("/");
            var_162.var_251(2592000); 
            var_243.var_252(var_162);
        }
        if (var_247) {
            var_243.var_253("Refresh", var_217.var_254("hudson.Functions.autoRefreshSeconds", "10"));
        }
    }

    public static boolean method_30(HttpServletRequest param_28) {
        String var_245 = var_242.var_246("auto_refresh");
        if (var_245 != null) {
            return var_233.var_249(var_245);
        }
        Cookie[] var_226 = var_242.var_227();
        if(var_226==null)
            return false; 

        for (Cookie var_162 : var_226) {
            if (var_162.var_229().var_230("hudson_auto_refresh")) {
                return var_233.var_249(var_162.var_201());
            }
        }
        return false;
    }

    
    public static String method_31(StaplerRequest param_13,Object param_31) {
        List var_256 = var_181.var_183();
        for( int var_171=var_256.var_257()-1; var_171>=0; var_171-- ) {
            Ancestor var_186 = (Ancestor) var_256.var_258(var_171);
            if(var_186.var_187()==var_255)
                return var_186.var_190();
        }
        return null;
    }

    
    public static String method_32() {
        List var_256 = var_84.var_157().var_183();
        for( int var_171=var_256.var_257()-1; var_171>=0; var_171-- ) {
            Ancestor var_186 = (Ancestor) var_256.var_258(var_171);
            if(var_186.var_187() instanceof SearchableModelObject)
                return var_186.var_190()+"/search/";
        }
        return null;
    }

    public static String method_33(String param_6) {
        if(var_163==null) return null;
        else        return var_163+' ';
    }

    
    public static String method_34(String param_32) {
        int var_171 = var_257.var_195('x');
        var_171 = var_173.var_239(var_171 > 0 ? var_257.var_259(0, var_171) : var_257) / 10;
        StringBuilder var_179 = new StringBuilder(30);
        for (int var_260 = 0; var_260 < var_171; var_260++)
            var_179.var_180("&nbsp;");
        return var_179.var_174();
    }

    public static String method_35(IOException param_33) {
        return var_150.var_261(var_262);
    }

    public static boolean method_36(String param_8) {
        if(var_172==null)     return false;
        return var_172.var_195('\r')>=0 || var_172.var_195('\n')>=0;
    }

    public static String method_37(String param_8) {
        return var_150.var_263(var_172);
    }

    public static String method_38(String param_8) {
        return var_150.var_264(var_172);
    }

    public static String method_39(String param_8) {
        return var_150.var_265(var_172);
    }

    public static String method_40(String param_8) {
        return var_172.var_266("&lt;","<").var_266("&gt;",">").var_266("&amp;","&");
    }

    public static String method_41(String param_1) {
        StringBuilder var_179 = new StringBuilder(var_119.var_267()+64);
        for( int var_171=0; var_171<var_119.var_267(); var_171++ ) {
            char var_268 = var_119.var_269(var_171);
            if(var_268=='<')
                var_179.var_180("&lt;");
            else
            if(var_268=='>')
                var_179.var_180("&gt;");
            else
            if(var_268=='&')
                var_179.var_180("&amp;");
            else
            if(var_268=='"')
                var_179.var_180("&quot;");
            else
            if(var_268=='\'')
                var_179.var_180("&#39;");
            else
                var_179.var_180(var_268);
        }
        return var_179.var_174();
    }

    public static void method_42(Permission param_34) throws IOException, ServletException {
        var_270(var_56.var_169(),var_271);
    }

    public static void method_42(AccessControlled param_35, Permission param_34) throws IOException, ServletException {
        if (var_271 != null) {
            var_272.var_270(var_271);
        }
    }

    
    public static void method_42(Object param_35, Permission param_34) throws IOException, ServletException {
        if (var_271 == null)
            return;
        
        if (var_272 instanceof AccessControlled)
            var_270((AccessControlled) var_272,var_271);
        else {
            List<Ancestor> var_273 = var_84.var_157().var_183();
            for(Ancestor var_186 : var_42.var_274(var_273)) {
                Object var_148 = var_186.var_187();
                if (var_148 instanceof AccessControlled) {
                    var_270((AccessControlled) var_148,var_271);
                    return;
                }
            }
            var_270(var_56.var_169(),var_271);
        }
    }

    
    public static boolean method_43(Permission param_34) throws IOException, ServletException {
        return var_275(var_56.var_169(),var_271);
    }

    
    public static boolean method_43(Object param_35, Permission param_34) throws IOException, ServletException {
        if (var_271 == null)
            return true;
        if (var_272 instanceof AccessControlled)
            return ((AccessControlled)var_272).var_275(var_271);
        else {
            List<Ancestor> var_273 = var_84.var_157().var_183();
            for(Ancestor var_186 : var_42.var_274(var_273)) {
                Object var_148 = var_186.var_187();
                if (var_148 instanceof AccessControlled) {
                    return ((AccessControlled)var_148).var_275(var_271);
                }
            }
            return var_56.var_169().var_275(var_271);
        }
    }

    public static void method_44(StaplerRequest param_13, StaplerResponse param_36, Object param_37, Permission param_34) throws IOException, ServletException {
        
        
        if(var_278!=null && !var_279.var_276(var_181, var_277)) {
            
            var_277.var_280(var_95.var_281);
            var_277.var_282().var_283();
            throw new ServletException();
        }

        
        if(var_271!=null)
            var_270(var_271);
    }

    
    public static String method_45(StaplerRequest param_13) {
        String var_284 = var_56.var_169().var_285();
        if(var_284 !=null)
            
            return var_284;
        StringBuilder var_179 = new StringBuilder();
        var_179.var_180(var_181.var_286()).var_180(":
        buf.append(req.getServerName());
        if(! (req.getScheme().equals("var_92") && req.getLocalPort()==80 || req.getScheme().equals("var_287") && req.getLocalPort()==443))
            buf.append(':').append(req.getLocalPort());
        buf.append(req.getContextPath()).append('/');
        return buf.toString();
    }

    
    public static String getFooterURL() {
        if(footerURL == null) {
            footerURL = System.getProperty("var_6.var_288");
            if(var_144.var_289(var_288)) {
                var_288 = "http:
            }
        }
        return footerURL;
    }
    private static String footerURL = null;

    public static List<JobPropertyDescriptor> getJobPropertyDescriptors(Class<? extends Job> clazz) {
        return JobPropertyDescriptor.getPropertyDescriptors(clazz);
    }

    public static List<Descriptor<BuildWrapper>> getBuildWrapperDescriptors(AbstractProject<?,?> project) {
        return BuildWrappers.getFor(project);
    }

    public static List<Descriptor<SecurityRealm>> getSecurityRealmDescriptors() {
        return SecurityRealm.all();
    }

    public static List<Descriptor<AuthorizationStrategy>> getAuthorizationStrategyDescriptors() {
        return AuthorizationStrategy.all();
    }

    public static List<Descriptor<Builder>> getBuilderDescriptors(AbstractProject<?,?> project) {
        return BuildStepDescriptor.filter(Builder.all(), project.getClass());
    }

    public static List<Descriptor<Publisher>> getPublisherDescriptors(AbstractProject<?,?> project) {
        return BuildStepDescriptor.filter(Publisher.all(), project.getClass());
    }

    public static List<SCMDescriptor<?>> getSCMDescriptors(AbstractProject<?,?> project) {
        return SCM._for(project);
    }

    public static List<Descriptor<ComputerLauncher>> getComputerLauncherDescriptors() {
        return Jenkins.getInstance().<ComputerLauncher,Descriptor<ComputerLauncher>>getDescriptorList(ComputerLauncher.class);
    }

    public static List<Descriptor<RetentionStrategy<?>>> getRetentionStrategyDescriptors() {
        return RetentionStrategy.all();
    }

    public static List<ParameterDescriptor> getParameterDescriptors() {
        return ParameterDefinition.all();
    }

    public static List<Descriptor<CaptchaSupport>> getCaptchaSupportDescriptors() {
        return CaptchaSupport.all();
    }

    public static List<Descriptor<ViewsTabBar>> getViewsTabBarDescriptors() {
        return ViewsTabBar.all();
    }

    public static List<Descriptor<MyViewsTabBar>> getMyViewsTabBarDescriptors() {
        return MyViewsTabBar.all();
    }

    public static List<NodePropertyDescriptor> getNodePropertyDescriptors(Class<? extends Node> clazz) {
        List<NodePropertyDescriptor> result = new ArrayList<NodePropertyDescriptor>();
        Collection<NodePropertyDescriptor> list = (Collection) Jenkins.getInstance().getDescriptorList(NodeProperty.class);
        for (NodePropertyDescriptor npd : list) {
            if (npd.isApplicable(clazz)) {
                result.add(npd);
            }
        }
        return result;
    }

    
    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(Predicate<GlobalConfigurationCategory> predicate) {
        ExtensionList<Descriptor> exts = Jenkins.getInstance().getExtensionList(Descriptor.class);
        List<Tag> r = new ArrayList<Tag>(exts.size());

        for (ExtensionComponent<Descriptor> c : exts.getComponents()) {
            Descriptor d = c.getInstance();
            if (d.getGlobalConfigPage()==null)  continue;

            if (d instanceof GlobalConfiguration) {
                if (predicate.apply(((GlobalConfiguration)d).getCategory()))
                    r.add(new Tag(c.ordinal(), d));
            } else {
                if (predicate.apply(GlobalConfigurationCategory.get(Unclassified.class)))
                    r.add(new Tag(0, d));
            }
        }
        Collections.sort(r);

        List<Descriptor> answer = new ArrayList<Descriptor>(r.size());
        for (Tag d : r) answer.add(d.d);

        return DescriptorVisibilityFilter.apply(Jenkins.getInstance(),answer);
    }

    
    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig() {
        return getSortedDescriptorsForGlobalConfig(Predicates.<GlobalConfigurationCategory>alwaysTrue());
    }

    
    @Deprecated
    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {
        return getSortedDescriptorsForGlobalConfig(Predicates.not(GlobalSecurityConfiguration.FILTER));
    }

    
    public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {
        return getSortedDescriptorsForGlobalConfig(new Predicate<GlobalConfigurationCategory>() {
            public boolean apply(GlobalConfigurationCategory cat) {
                return cat instanceof GlobalConfigurationCategory.Unclassified;
            }
        });
    }
    
    private static class Tag implements Comparable<Tag> {
        double ordinal;
        String hierarchy;
        Descriptor d;

        Tag(double ordinal, Descriptor d) {
            this.ordinal = ordinal;
            this.d = d;
            this.hierarchy = buildSuperclassHierarchy(d.clazz, new StringBuilder()).toString();
        }

        private StringBuilder buildSuperclassHierarchy(Class c, StringBuilder buf) {
            Class sc = c.getSuperclass();
            if (sc!=null)   buildSuperclassHierarchy(sc,buf).append(':');
            return buf.append(c.getName());
        }

        public int compareTo(Tag that) {
            int r = Double.compare(this.ordinal, that.ordinal);
            if (r!=0)   return -r; 
            return this.hierarchy.compareTo(that.hierarchy);
        }
    }
    
    public static String getIconFilePath(Action a) {
        String name = a.getIconFileName();
        if (name==null)     return null;
        if (name.startsWith("/"))
            return name.substring(1);
        else
            return "var_290/24var_291/"+name;
    }

    
    public static int size2(Object o) throws Exception {
        if(o==null) return 0;
        return ASTSizeFunction.sizeOf(o,Introspector.getUberspect());
    }

    
    public static String getRelativeLinkTo(Item p) {
        Map<Object,String> ancestors = new HashMap<Object,String>();
        View view=null;

        StaplerRequest request = Stapler.getCurrentRequest();
        for( Ancestor a : request.getAncestors() ) {
            ancestors.put(a.getObject(),a.getRelativePath());
            if(a.getObject() instanceof View)
                view = (View) a.getObject();
        }

        String path = ancestors.get(p);
        if(path!=null)  return path;

        Item i=p;
        String url = "";
        while(true) {
            ItemGroup ig = i.getParent();
            url = i.getShortUrl()+url;

            if(ig== Jenkins.getInstance()) {
                assert i instanceof TopLevelItem;
                if(view!=null && view.contains((TopLevelItem)i)) {
                    
                    return ancestors.get(view)+'/'+url;
                } else {
                    
                    return request.getContextPath()+'/'+p.getUrl();
                }
            }

            path = ancestors.get(ig);
            if(path!=null)  return path+'/'+url;

            assert ig instanceof Item; 
            i = (Item) ig;
        }
    }

    public static Map<Thread,StackTraceElement[]> dumpAllThreads() {
        Map<Thread,StackTraceElement[]> sorted = new TreeMap<Thread,StackTraceElement[]>(new ThreadSorter());
        sorted.putAll(Thread.getAllStackTraces());
        return sorted;
    }

    @IgnoreJRERequirement
    public static ThreadInfo[] getThreadInfos() {
        ThreadMXBean mbean = ManagementFactory.getThreadMXBean();
        return mbean.dumpAllThreads(mbean.isObjectMonitorUsageSupported(),mbean.isSynchronizerUsageSupported());
    }

    public static ThreadGroupMap sortThreadsAndGetGroupMap(ThreadInfo[] list) {
        ThreadGroupMap sorter = new ThreadGroupMap();
        Arrays.sort(list, sorter);
        return sorter;
    }

    
    private static class ThreadSorterBase {
        protected Map<Long,String> map = new HashMap<Long,String>();

        private ThreadSorterBase() {
            ThreadGroup tg = Thread.currentThread().getThreadGroup();
            while (tg.getParent() != null) tg = tg.getParent();
            Thread[] threads = new Thread[tg.activeCount()*2];
            int threadsLen = tg.enumerate(threads, true);
            for (int i = 0; i < threadsLen; i++)
                map.put(threads[i].getId(), threads[i].getThreadGroup().getName());
        }

        protected int compare(long idA, long idB) {
            String tga = map.get(idA), tgb = map.get(idB);
            int result = (tga!=null?-1:0) + (tgb!=null?1:0);  
            if (result==0 && tga!=null)
                result = tga.compareToIgnoreCase(tgb);
            return result;
        }
    }

    public static class ThreadGroupMap extends ThreadSorterBase implements Comparator<ThreadInfo> {

        
        public String getThreadGroup(ThreadInfo ti) {
            return map.get(ti.getThreadId());
        }

        public int compare(ThreadInfo a, ThreadInfo b) {
            int result = compare(a.getThreadId(), b.getThreadId());
            if (result == 0)
                result = a.getThreadName().compareToIgnoreCase(b.getThreadName());
            return result;
        }
    }

    private static class ThreadSorter extends ThreadSorterBase implements Comparator<Thread> {

        public int compare(Thread a, Thread b) {
            int result = compare(a.getId(), b.getId());
            if (result == 0)
                result = a.getName().compareToIgnoreCase(b.getName());
            return result;
        }
    }

    
    @IgnoreJRERequirement
    public static boolean isMustangOrAbove() {
        try {
            System.console();
            return true;
        } catch(LinkageError e) {}
    }

    
    @IgnoreJRERequirement
    public static String dumpThreadInfo(ThreadInfo ti, ThreadGroupMap map) {
        String grp = map.getThreadGroup(ti);
        StringBuilder sb = new StringBuilder("\"" + var_292.var_293() + "\"" +
                                             " Id=" + var_292.var_294() + " Group=" +
                                             (var_295 != null ? var_295 : "?") + " " +
                                             var_292.var_296());
        if (var_292.var_297() != null) {
            var_298.var_180(" on " + var_292.var_297());
        }
        if (var_292.var_299() != null) {
            var_298.var_180(" owned by \"" + var_292.var_299() +
                      "\" Id=" + var_292.var_300());
        }
        if (var_292.var_301()) {
            var_298.var_180(" (suspended)");
        }
        if (var_292.var_302()) {
            var_298.var_180(" (in native)");
        }
        var_298.var_180('\n');
        StackTraceElement[] var_303 = var_292.var_304();
        for (int var_171=0; var_171 < var_303.var_267; var_171++) {
            StackTraceElement var_305 = var_303[var_171];
            var_298.var_180("\tat " + var_305.var_174());
            var_298.var_180('\n');
            if (var_171 == 0 && var_292.var_306() != null) {
                Thread.State var_307 = var_292.var_296();
                switch (var_307) {
                    case var_308:
                        var_298.var_180("\t-  blocked on " + var_292.var_306());
                        var_298.var_180('\n');
                        break;
                    case var_309:
                        var_298.var_180("\t-  waiting on " + var_292.var_306());
                        var_298.var_180('\n');
                        break;
                    case var_310:
                        var_298.var_180("\t-  waiting on " + var_292.var_306());
                        var_298.var_180('\n');
                        break;
                    default:
                }
            }

            for (MonitorInfo var_311 : var_292.var_312()) {
                if (var_311.var_313() == var_171) {
                    var_298.var_180("\t-  locked " + var_311);
                    var_298.var_180('\n');
                }
            }
       }

       LockInfo[] var_314 = var_292.var_315();
       if (var_314.var_267 > 0) {
           var_298.var_180("\n\tNumber of locked synchronizers = " + var_314.var_267);
           var_298.var_180('\n');
           for (LockInfo var_316 : var_314) {
               var_298.var_180("\t- " + var_316);
               var_298.var_180('\n');
           }
       }
       var_298.var_180('\n');
       return var_298.var_174();
    }

    public static <T> var_124<var_317> var_318() {
        return var_125.var_318();
    }

    public static String var_319(String param_8) {
        StringBuilder var_179 = new StringBuilder();
        for( int var_171=0; var_171<var_172.var_267(); var_171++ ) {
            char var_268 = var_172.var_269(var_171);
            switch(var_268) {
            case '\'':
                var_179.var_180("\\'");
                break;
            case '\\':
                var_179.var_180("\\\\");
                break;
            case '"':
                var_179.var_180("\\\"");
                break;
            default:
                var_179.var_180(var_268);
            }
        }
        return var_179.var_174();
    }

    
    public static String var_320(String param_8) {
        if(var_172==null || var_172.var_267()==0) return var_172;
        return var_321.var_322(var_172.var_269(0))+var_172.var_259(1);
    }

    public static String var_323() {
        return var_56.var_324;
    }

    
    public static String var_161() {
        return var_56.var_325;
    }

    public static String var_326(Object param_31, String param_38) {
        Class var_328 = var_255.var_329();

        if(var_255 instanceof Class)
            var_328 = (Class)var_255;
        if(var_255 instanceof Descriptor)
            var_328 = ((Descriptor)var_255).var_328;

        StringBuilder var_179 = new StringBuilder(var_84.var_157().var_158());
        var_179.var_180(var_56.var_330).var_180('/');
        var_179.var_180(var_328.var_229().var_266('.','/').var_266('$','/'));
        var_179.var_180('/').var_180(var_327);

        return var_179.var_174();
    }

    public static boolean var_331(Object param_31, String param_38) throws var_99 {
        if(var_255==null)    return false;
        return var_84.var_157().var_332(var_255,var_327)!=null;
    }

    
    public static boolean var_333(Boolean param_39) {
        if(var_334==null) return true;
        return var_334;
    }

    
    public static <T> var_317 var_335(T var_336, T var_231) {
        return var_336!=null ? var_336 : var_231;
    }

    public static String var_337(Throwable param_41) {
        StringWriter var_339 = new StringWriter();
        var_338.var_340(new PrintWriter(var_339));
        return var_339.var_174();
    }

    
    public static int var_341(String param_8) {
        if(var_172==null)     return 5;
        return var_342.var_343(5,var_344.var_345(var_172).var_267);
    }

    
    public static String var_346(Item param_7) {
        if (var_171 instanceof Job) {
            Job var_260 = (Job) var_171;
            switch (var_260.var_347().var_348()) {
            case var_349:
            case var_350:
            case var_351:
                return "Failure";
            case var_352:
                return "Success";
            case var_353:
            case var_354:
                return "Unknown";
            }
        }
        return "Unknown";
    }

    private static final Pattern var_344 = var_143.var_355("\r?\n");

    
    public static boolean var_356() {
        return var_56.var_357() instanceof AnonymousAuthenticationToken;
    }

    
    public static JellyContext var_358() {
        JellyContext var_155 = var_359.var_360.var_258();
        assert var_155!=null;
        return var_155;
    }

    
    public static String var_361(Script param_42) throws var_67 {
        StringWriter var_363 = new StringWriter();
        var_362.var_203(var_358(), var_69.var_364(var_363));
        return var_363.var_174();
    }

    
    public static <T> var_130<var_317> var_365(List<T> param_0, int param_43) {
        if(var_366<var_3.var_257())
            return var_3.var_365(0,var_366);
        else
            return var_3;
    }

    
    public static String var_367(String... var_368) {
        StringBuilder var_179 = new StringBuilder();
        for (String var_172 : var_368) {
            if (var_172.var_267()==0)  continue;

            if (var_179.var_267()>0) {
                if (var_179.var_269(var_179.var_267()-1)!='/')
                    var_179.var_180('/');
                if (var_172.var_269(0)=='/')   var_172=var_172.var_259(1);
            }
            var_179.var_180(var_172);
        }
        return var_179.var_174();
    }

    
    public static String var_369(String param_44,Action param_45) {
        String var_371 = var_370.var_372();
        if(var_371==null)   return null;    
        try {
            if (new URI(var_371).var_373()) {
                return var_371;
            }
        } catch (URISyntaxException var_374) {}: {1}", new Object[] {action, x});
            return null;
        }
        if(urlName.startsWith("/"))
            return joinPath(Stapler.getCurrentRequest().getContextPath(),urlName);
        else
            
            return joinPath(Stapler.getCurrentRequest().getContextPath()+'/'+itUrl,urlName);
    }

    
    public static String toEmailSafeString(String projectName) {
        
        StringBuilder buf = new StringBuilder(projectName.length());
        for( int i=0; i<projectName.length(); i++ ) {
            char ch = projectName.charAt(i);
            if(('a'<=ch && ch<='z')
            || ('z'<=ch && ch<='Z')
            || ('0'<=ch && ch<='9')
            || "-var_375.".indexOf(ch)>=0)
                buf.append(ch);
            else
                buf.append('_');    
        }
        return projectName;
    }

    public String getSystemProperty(String key) {
        return System.getProperty(key);
    }

    
    public String getServerName() {
        
        
        String url = Jenkins.getInstance().getRootUrl();
        try {
            if(url!=null) {
                String host = new URL(url).getHost();
                if(host!=null)
                    return host;
            }
        } catch (MalformedURLException e) {}
        return Stapler.getCurrentRequest().getServerName();
    }

    
    public String getCheckUrl(String userDefined, Object descriptor, String field) {
        if(userDefined!=null || field==null)   return userDefined;
        if (descriptor instanceof Descriptor) {
            Descriptor d = (Descriptor) descriptor;
            return d.getCheckUrl(field);
        }
        return null;
    }

    
    public boolean hyperlinkMatchesCurrentPage(String href) throws UnsupportedEncodingException {
        String url = Stapler.getCurrentRequest().getRequestURL().toString();
        if (href == null || href.length() <= 1) return ".".equals(href) && url.endsWith("/");
        url = URLDecoder.decode(url,"var_376-8");
        href = URLDecoder.decode(href,"var_376-8");
        if (url.endsWith("/")) url = url.substring(0, url.length() - 1);
        if (href.endsWith("/")) href = href.substring(0, href.length() - 1);

        return url.endsWith(href);
    }

    public <T> List<T> singletonList(T t) {
        return Collections.singletonList(t);
    }

    
    public static List<PageDecorator> getPageDecorators() {
        
        if(Jenkins.getInstance()==null)  return Collections.emptyList();
        return PageDecorator.all();
    }
    
    public static List<Descriptor<Cloud>> getCloudDescriptors() {
        return Cloud.all();
    }

    
    public String prepend(String prefix, String body) {
        if(body!=null && body.length()>0)
            return prefix+body;
        return body;
    }

    public static List<Descriptor<CrumbIssuer>> getCrumbIssuerDescriptors() {
        return CrumbIssuer.all();
    }

    public static String getCrumb(StaplerRequest req) {
        Jenkins h = Jenkins.getInstance();
        CrumbIssuer issuer = h != null ? h.getCrumbIssuer() : null;
        return issuer != null ? issuer.getCrumb(req) : "";
    }

    public static var_377 var_378() {
        var_56 var_159 = var_56.var_169();
        CrumbIssuer var_379 = var_159 != null ? var_159.var_380() : null;
        return var_379 != null ? var_379.var_381().var_378() : "";
    }

    public static Date var_382() {
        return new Date();
    }

    public static Locale var_383() {
        Locale var_384=null;
        StaplerRequest var_181 = var_84.var_157();
        if(var_181!=null)
            var_384 = var_181.var_385();
        if(var_384==null)
            var_384 = var_131.var_386();
        return var_384;
    }

    
    public static String var_387() {
        String var_388 = var_84.var_157().var_158();
        StringBuilder var_179 = new StringBuilder();
        for (ConsoleAnnotatorFactory var_184 : var_11.var_389()) {
            String var_327 = var_388 + "/extensionList/" + ConsoleAnnotatorFactory.class.var_229() + "/" + var_184.var_329().var_229();
            if (var_184.var_390())
                var_179.var_180("<script src='"+var_327+"/script.js'></script>");
            if (var_184.var_391())
                var_179.var_180("<link rel='stylesheet' type='text/css' href='"+var_327+"/style.css' />");
        }
        for (ConsoleAnnotationDescriptor var_392 : var_10.var_389()) {
            String var_327 = var_388+"/descriptor/"+var_392.var_328.var_229();
            if (var_392.var_390())
                var_179.var_180("<script src='"+var_327+"/script.js'></script>");
            if (var_392.var_391())
                var_179.var_180("<link rel='stylesheet' type='text/css' href='"+var_327+"/style.css' />");
        }
        return var_179.var_174();
    }

    
    public List<String> var_393() {
        while (true) {
            try {
                List<String> var_223 = new ArrayList<String>();
                Enumeration<String> var_262 = var_138.var_394().var_393();
                while (var_262.var_395())
                    var_223.var_396(var_262.var_397());
                return var_223;
            } catch (ConcurrentModificationException var_262) {}
        }
    }

    
    public String var_398(Object param_2) {
        if (var_148==null)    return null;
        if (var_148 instanceof Secret)    return ((Secret)var_148).var_399();
        return var_148.var_174();
    }

    public List var_400(Object param_4, Iterable param_46) {
        return var_402.var_403(var_155,var_401);
    }
    
    
    public static boolean var_404() {
        return var_405.var_406;
    }

    
    public static boolean var_407() {
        return var_233.var_234("hudson.security.ArtifactsPermission");
    }

    
    public static boolean var_408() {
        return var_233.var_234("hudson.security.WipeOutPermission");
    }

    public static String var_409(JellyContext param_4, String param_47) {
        return var_84.var_157().var_411(new RenderOnDemandClosure(var_155,var_410));
    }

    public static String var_412() {
        return var_413.var_412();
    }
    
    public static String var_414(String param_40) {
        String var_148 = var_412();
        var_84.var_157().var_415("currentDescriptorByNameUrl", var_336);

        return var_148;
    }

    public static void var_416(String param_48) {
        var_84.var_157().var_415("currentDescriptorByNameUrl", var_417);
    }

    public static List<String> var_418(String param_23) {
        List<String> var_223 = new ArrayList<String>();
        Enumeration var_262 = var_84.var_157().var_419(var_225);
        while (var_262.var_395()) {
            var_223.var_396(var_262.var_397().var_174());
        }
        return var_223;
    }

    
    public static Object var_420(Object param_2) {
        return var_148==null ? null : new RawHtmlArgument(var_148);
    }

    public static ArrayList<CLICommand> var_421() {
        ArrayList<CLICommand> var_389 = new ArrayList<CLICommand>(var_8.var_389());
        var_125.var_422(var_389, new Comparator<CLICommand>() {
            public int method_46(CLICommand param_49, CLICommand param_50) {
                return var_423.var_229().var_425(var_424.var_229());
            }
        });
        return var_389;
    }

    
    public static String var_426(User param_51, String param_52) {
        return var_39.var_429(var_427, var_428);
    }

    
    public String var_430(User param_51, String param_52) {
        return var_426(var_427,var_428);
    }
    
    
    
    public static String var_431(long param_32){
        String var_432 = "B";
        if(var_257 < 1024){
            return var_257 + " " + var_432;
        }
        Double var_433 = new Double(var_257);
        if(var_433>=1024){
            var_433 = var_433/1024;
            var_432 = "KB";
            if(var_433>=1024){
                var_433 = var_433/1024;
                var_432 = "MB";
                if(var_433>=1024){
                    var_433=var_433/1024;
                    var_432 = "GB";
                }
            }
        }
        DecimalFormat var_152 = new DecimalFormat();
        return var_152.var_152(var_433) + " " + var_432;
    }
}
