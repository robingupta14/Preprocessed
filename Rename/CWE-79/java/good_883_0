
import var_0.var_1.var_2.var_3.var_4;
import var_0.var_1.var_2.var_3.var_5;
import var_0.var_1.var_2.var_3.var_6;
import var_0.var_1.var_2.var_7.var_8.var_9;
import var_0.var_1.var_2.var_7.var_8.var_10;
import var_0.var_1.var_2.var_7.var_11.var_12.var_13;
import var_0.var_1.var_2.var_7.var_14.var_15;
import var_0.var_1.var_2.var_16.var_8.var_17;
import var_0.var_1.var_2.var_16.var_8.var_18;
import var_0.var_1.var_2.var_16.var_19.var_8.var_20;
import var_0.var_1.var_2.var_16.var_19.var_8.var_21;
import var_0.var_1.var_2.var_16.var_19.var_8.var_22;
import var_0.var_1.var_2.var_16.var_19.var_23.var_24;
import var_0.var_1.var_2.var_25.var_7.var_26;
import var_0.var_1.var_2.var_27.var_28;
import var_29.var_30.var_31.var_32.var_33;
import var_29.var_30.var_31.var_34.var_35;
import var_29.var_30.var_31.var_34.var_36;
import var_29.var_30.var_37.var_38;
import var_29.var_30.var_37.var_39.var_40;
import var_29.var_30.var_37.var_41.var_42;
import var_29.var_43.var_2.var_44.var_7.var_45;
import var_29.var_43.var_2.var_44.var_7.var_45.var_46;
import var_29.var_43.var_2.var_44.var_7.var_45.var_47;
import var_29.var_43.var_2.var_44.var_7.var_48;
import var_29.var_43.var_2.var_44.var_7.var_49;
import var_29.var_43.var_2.var_50.var_7.var_8.var_51;
import var_29.var_43.var_2.var_50.var_7.var_8.var_52;
import var_29.var_43.var_2.var_50.var_7.var_8.var_53;
import var_29.var_54.var_55.var_56.var_57.var_58;
import var_29.var_54.var_59.var_60;
import var_29.var_61.var_62;

import var_63.var_64.var_65;
import var_63.var_64.var_37.var_66;
import var_67.var_32.var_68;
import var_67.var_32.var_69;
import var_67.var_70.var_71;
import var_67.var_27.*;

import static var_29.var_30.var_31.var_34.var_36.var_72;

public class var_73 {
	static final String var_74 = "resource";
	static final String var_75 = "http:
	private static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(BaseController.class);
	@Autowired
	protected TesterConfig myConfig;
	private Map<FhirVersionEnum, FhirContext> myContexts = new HashMap<FhirVersionEnum, FhirContext>();
	private List<String> myFilterHeaders;
	@Autowired
	private ITemplateEngine myTemplateEngine;

	public BaseController() {
		super();
	}

	protected IBaseResource addCommonParams(HttpServletRequest theServletRequest, final HomeRequest theRequest, final ModelMap theModel) {
		final String serverId = theRequest.getServerIdWithDefault(myConfig);
		final String serverBase = theRequest.getServerBase(theServletRequest, myConfig);
		final String serverName = theRequest.getServerName(myConfig);
		final String apiKey = theRequest.getApiKey(theServletRequest, myConfig);
		theModel.put("var_76", sanitizeInput(serverId));
		theModel.put("var_77", sanitizeInput(serverBase));
		theModel.put("var_78", sanitizeInput(serverName));
		theModel.put("var_79", sanitizeInput(apiKey));
		theModel.put("var_80", sanitizeInput(defaultString(theRequest.getResource())));
		theModel.put("var_81", sanitizeInput(theRequest.getEncoding()));
		theModel.put("var_82", sanitizeInput(theRequest.getPretty()));
		theModel.put("var_83", sanitizeInput(theRequest.get_summary()));
		theModel.put("var_84", myConfig.getIdToServerName());

		return loadAndAddConf(theServletRequest, theRequest, theModel);
	}

	private Header[] applyHeaderFilters(Header[] theAllHeaders) {
		if (myFilterHeaders == null || myFilterHeaders.isEmpty()) {
			return theAllHeaders;
		}
		ArrayList<Header> retVal = new ArrayList<Header>();
		for (Header next : theAllHeaders) {
			if (!myFilterHeaders.contains(next.getName().toLowerCase())) {
				retVal.add(next);
			}
		}
		return retVal.toArray(new Header[retVal.size()]);
	}

	private Header[] applyHeaderFilters(Map<String, List<String>> theAllHeaders) {
		ArrayList<Header> retVal = new ArrayList<Header>();
		for (String nextKey : theAllHeaders.keySet()) {
			for (String nextValue : theAllHeaders.get(nextKey)) {
				if (myFilterHeaders == null || !myFilterHeaders.contains(nextKey.toLowerCase())) {
					retVal.add(new BasicHeader(nextKey, nextValue));
				}
			}
		}
		return retVal.toArray(new Header[retVal.size()]);
	}

	private String format(String theResultBody, EncodingEnum theEncodingEnum) {
		String str = StringEscapeUtils.escapeHtml4(theResultBody);
		if (str == null || theEncodingEnum == null) {
			return str;
		}

		StringBuilder b = new StringBuilder();

		if (theEncodingEnum == EncodingEnum.JSON) {

			boolean inValue = false;
			boolean inQuote = false;
			for (int i = 0; i < str.length(); i++) {
				char prevChar = (i > 0) ? str.charAt(i - 1) : ' ';
				char nextChar = str.charAt(i);
				char nextChar2 = (i + 1) < str.length() ? str.charAt(i + 1) : ' ';
				char nextChar3 = (i + 2) < str.length() ? str.charAt(i + 2) : ' ';
				char nextChar4 = (i + 3) < str.length() ? str.charAt(i + 3) : ' ';
				char nextChar5 = (i + 4) < str.length() ? str.charAt(i + 4) : ' ';
				char nextChar6 = (i + 5) < str.length() ? str.charAt(i + 5) : ' ';
				if (inQuote) {
					b.append(nextChar);
					if (prevChar != '\\' && nextChar == '&' && nextChar2 == 'q' && nextChar3 == 'u' && nextChar4 == 'o' && nextChar5 == 't' && nextChar6 == ';') {
						b.append("var_85;</span>");
						i += 5;
						inQuote = false;
					} else if (nextChar == '\\' && nextChar2 == '"') {
						var_86.var_87("quot;</span>");
						var_88 += 5;
						var_89 = false;
					}
				} else {
					if (var_90 == ':') {
						var_91 = true;
						var_86.var_87(var_90);
					} else if (var_90 == '[' || var_90 == '{') {
						var_86.var_87("<span class='hlControl'>");
						var_86.var_87(var_90);
						var_86.var_87("</span>");
						var_91 = false;
					} else if (var_90 == '{' || var_90 == '}' || var_90 == ',') {
						var_86.var_87("<span class='hlControl'>");
						var_86.var_87(var_90);
						var_86.var_87("</span>");
						var_91 = false;
					} else if (var_90 == '&' && var_92 == 'q' && var_93 == 'u' && var_94 == 'o' && var_95 == 't' && var_96 == ';') {
						if (var_91) {
							var_86.var_87("<span class='hlQuot'>&quot;");
						} else {
							var_86.var_87("<span class='hlTagName'>&quot;");
						}
						var_89 = true;
						var_88 += 5;
					} else if (var_90 == ':') {
						var_86.var_87("<span class='hlControl'>");
						var_86.var_87(var_90);
						var_86.var_87("</span>");
						var_91 = true;
					} else {
						var_86.var_87(var_90);
					}
				}
			}

		} else {
			boolean var_89 = false;
			boolean var_97 = false;
			for (int var_88 = 0; var_88 < var_98.var_99(); var_88++) {
				char var_90 = var_98.var_100(var_88);
				char var_92 = (var_88 + 1) < var_98.var_99() ? var_98.var_100(var_88 + 1) : ' ';
				char var_93 = (var_88 + 2) < var_98.var_99() ? var_98.var_100(var_88 + 2) : ' ';
				char var_94 = (var_88 + 3) < var_98.var_99() ? var_98.var_100(var_88 + 3) : ' ';
				char var_95 = (var_88 + 4) < var_98.var_99() ? var_98.var_100(var_88 + 4) : ' ';
				char var_96 = (var_88 + 5) < var_98.var_99() ? var_98.var_100(var_88 + 5) : ' ';
				if (var_89) {
					var_86.var_87(var_90);
					if (var_90 == '&' && var_92 == 'q' && var_93 == 'u' && var_94 == 'o' && var_95 == 't' && var_96 == ';') {
						var_86.var_87("quot;</span>");
						var_88 += 5;
						var_89 = false;
					}
				} else if (var_97) {
					if (var_90 == '&' && var_92 == 'g' && var_93 == 't' && var_94 == ';') {
						var_86.var_87("</span><span class='hlControl'>&gt;</span>");
						var_97 = false;
						var_88 += 3;
					} else if (var_90 == ' ') {
						var_86.var_87("</span><span class='hlAttr'>");
						var_86.var_87(var_90);
					} else if (var_90 == '&' && var_92 == 'q' && var_93 == 'u' && var_94 == 'o' && var_95 == 't' && var_96 == ';') {
						var_86.var_87("<span class='hlQuot'>&quot;");
						var_89 = true;
						var_88 += 5;
					} else {
						var_86.var_87(var_90);
					}
				} else {
					if (var_90 == '&' && var_92 == 'l' && var_93 == 't' && var_94 == ';') {
						var_86.var_87("<span class='hlControl'>&lt;</span><span class='hlTagName'>");
						var_97 = true;
						var_88 += 3;
					} else {
						var_86.var_87(var_90);
					}
				}
			}
		}

		return var_86.var_101();
	}

	private String method_0(String param_0, String param_1) {
		String var_98 = var_104;
		if (var_98 == null) {
			return var_98;
		}

		try {
			var_98 = var_71.var_105(var_98, "UTF-8");
		} catch (UnsupportedEncodingException var_106) {}

		StringBuilder var_86 = new StringBuilder();
		var_86.var_87("<span class='hlUrlBase'>");

		boolean var_107 = false;
		for (int var_88 = 0; var_88 < var_98.var_99(); var_88++) {
			char var_90 = var_98.var_100(var_88);
			
			
			if (!var_107) {
				if (var_90 == '?') {
					var_107 = true;
					var_86.var_87("</span><wbr /><span class='hlControl'>?</span><span class='hlTagName'>");
				} else {
					if (var_88 == var_103.var_99()) {
						var_86.var_87("</span><wbr /><span class='hlText'>");
					}
					var_86.var_87(var_90);
				}
			} else {
				if (var_90 == '&') {
					var_86.var_87("</span><wbr /><span class='hlControl'>&amp;</span><span class='hlTagName'>");
				} else if (var_90 == '=') {
					var_86.var_87("</span><span class='hlControl'>=</span><span class='hlAttr'>");
					
					
				} else {
					var_86.var_87(var_90);
				}
			}
		}

		if (var_107) {
			var_86.var_87("</span>");
		}
		return var_86.var_101();
	}

	protected FhirContext method_1(HomeRequest param_3) {
		FhirVersionEnum var_110 = var_109.var_111(var_112);
		FhirContext var_113 = var_114.var_115(var_110);
		if (var_113 == null) {
			var_113 = var_116(var_110);
			var_114.var_117(var_110, var_113);
		}
		return var_113;
	}

	protected RuntimeResourceDefinition method_3(HomeRequest param_3, HttpServletRequest param_5) throws ServletException {
		String var_80 = var_36.var_72(var_118.var_119(var_74));
		RuntimeResourceDefinition var_120 = var_108(var_109).var_121(var_80);
		if (var_120 == null) {
			throw new ServletException("Invalid resourceName: " + var_80);
		}
		return var_120;
	}

	protected ResultType method_4(GenericClient param_6, Exception param_2, ModelMap param_7) {
		ResultType var_124;
		var_124 = var_125.var_126;
		var_127.var_128("Failed to invoke server", var_106);

		if (var_106 != null) {
			var_123.var_117("errorMsg", var_129("Error: " + var_106.var_130(), var_106));
		}

		return var_124;
	}

	private IBaseResource method_6(HttpServletRequest param_8, final HomeRequest param_3, final ModelMap param_7) {
		switch (var_109.var_111(var_112)) {
			case var_132:
				return var_133(var_131, var_109, var_123);
			case var_134:
				return var_135(var_131, var_109, var_123);
			case var_136:
				return var_137(var_131, var_109, var_123);
			case var_138:
			case var_139:
				break;
		}
		throw new IllegalStateException("Unknown version: " + var_109.var_111(var_112));
	}

	private IResource method_7(HttpServletRequest param_8, final HomeRequest param_3, final ModelMap param_7) {
		CaptureInterceptor var_140 = new CaptureInterceptor();
		GenericClient var_19 = var_109.var_141(var_131, var_108(var_109), var_112, var_140);

		ca.uhn.fhir.model.dstu2.resource.Conformance var_142;
		try {
			var_142 = (ca.uhn.fhir.model.dstu2.resource.Conformance) var_19.var_143().var_144(Conformance.class).var_145();
		} catch (Exception var_106) {}", e.toString());
			theModel.put("var_146", var_129("Failed to load conformance statement, error was: " + var_106.var_101(), var_106));
			var_142 = new ca.uhn.fhir.model.dstu2.resource.Conformance();
		}

		var_123.var_117("jsonEncodedConf", var_108(var_109).var_147().var_148(var_142));

		Map<String, Number> var_149 = new HashMap<String, Number>();
		long var_150 = 0;
		for (ca.uhn.fhir.model.dstu2.resource.Conformance.Rest var_151 : var_142.var_152()) {
			for (ca.uhn.fhir.model.dstu2.resource.Conformance.RestResource var_153 : var_151.var_154()) {
				List<ExtensionDt> var_155 = var_153.var_156(var_75);
				if (var_155 != null && var_155.var_157() > 0) {
					Number var_158 = ((DecimalDt) (var_155.var_115(0).var_159())).var_160();
					var_149.var_117(var_153.var_161().var_159(), var_158);
					var_150 += var_158.var_162();
				}
			}
		}
		var_123.var_117("resourceCounts", var_149);

		if (var_150 > 0) {
			for (ca.uhn.fhir.model.dstu2.resource.Conformance.Rest var_151 : var_142.var_152()) {
				var_163.var_164(var_151.var_154(), new Comparator<ca.uhn.fhir.model.dstu2.resource.Conformance.RestResource>() {
					@var_165
					public int method_10(ca.uhn.fhir.model.dstu2.resource.Conformance.RestResource param_9, ca.uhn.fhir.model.dstu2.resource.Conformance.RestResource param_10) {
						DecimalDt var_168 = new DecimalDt();
						List<ExtensionDt> var_169 = var_166.var_156(var_75);
						if (var_169 != null && var_169.var_157() > 0) {
							var_168 = (DecimalDt) var_169.var_115(0).var_159();
						}
						DecimalDt var_170 = new DecimalDt();
						List<ExtensionDt> var_171 = var_167.var_156(var_75);
						if (var_171 != null && var_171.var_157() > 0) {
							var_170 = (DecimalDt) var_171.var_115(0).var_159();
						}
						int var_113 = var_170.var_172(var_168);
						if (var_113 == 0) {
							var_113 = var_166.var_161().var_159().var_172(var_167.var_161().var_159());
						}
						return var_113;
					}
				});
			}
		}

		var_123.var_117("conf", var_142);
		var_123.var_117("requiredParamExtension", var_28.var_173);

		return var_142;
	}

	private IBaseResource method_8(HttpServletRequest param_8, final HomeRequest param_3, final ModelMap param_7) {
		CaptureInterceptor var_140 = new CaptureInterceptor();
		GenericClient var_19 = var_109.var_141(var_131, var_108(var_109), var_112, var_140);

		org.hl7.fhir.dstu3.model.CapabilityStatement var_174 = new CapabilityStatement();
		try {
			var_174 = var_19.var_143().var_144(org.hl7.fhir.dstu3.model.CapabilityStatement.class).var_145();
		} catch (Exception var_175) {}", ex.toString());
			theModel.put("var_146", var_129("Failed to load conformance statement, error was: " + var_175.var_101(), var_175));
		}

		var_123.var_117("jsonEncodedConf", var_108(var_109).var_147().var_148(var_174));

		Map<String, Number> var_149 = new HashMap<String, Number>();
		long var_150 = 0;

		for (CapabilityStatementRestComponent var_151 : var_174.var_152()) {
			for (CapabilityStatementRestResourceComponent var_153 : var_151.var_154()) {
				List<Extension> var_155 = var_153.var_176(var_75);
				if (var_155 != null && var_155.var_157() > 0) {
					Number var_158 = ((DecimalType) (var_155.var_115(0).var_159())).var_160();
					var_149.var_117(var_153.var_161().var_159(), var_158);
					var_150 += var_158.var_162();
				}
			}
		}

		var_123.var_117("resourceCounts", var_149);

		if (var_150 > 0) {
			for (CapabilityStatementRestComponent var_151 : var_174.var_152()) {
				var_163.var_164(var_151.var_154(), new Comparator<CapabilityStatementRestResourceComponent>() {
					@var_165
					public int method_10(CapabilityStatementRestResourceComponent param_9, CapabilityStatementRestResourceComponent param_10) {
						DecimalType var_168 = new DecimalType();
						List<Extension> var_169 = var_166.var_176(var_75);
						if (var_169 != null && var_169.var_157() > 0) {
							var_168 = (DecimalType) var_169.var_115(0).var_159();
						}
						DecimalType var_170 = new DecimalType();
						List<Extension> var_171 = var_167.var_176(var_75);
						if (var_171 != null && var_171.var_157() > 0) {
							var_170 = (DecimalType) var_171.var_115(0).var_159();
						}
						int var_113 = var_170.var_172(var_168);
						if (var_113 == 0) {
							var_113 = var_166.var_161().var_159().var_172(var_167.var_161().var_159());
						}
						return var_113;
					}
				});
			}
		}

		var_123.var_117("requiredParamExtension", var_28.var_173);

		var_123.var_117("conf", var_174);
		return var_174;
	}

	private IBaseResource method_9(HttpServletRequest param_8, final HomeRequest param_3, final ModelMap param_7) {
		CaptureInterceptor var_140 = new CaptureInterceptor();
		GenericClient var_19 = var_109.var_141(var_131, var_108(var_109), var_112, var_140);

		org.hl7.fhir.r4.model.CapabilityStatement var_174 = new org.hl7.fhir.r4.model.CapabilityStatement();
		try {
			var_174 = var_19.var_143().var_144(org.hl7.fhir.r4.model.CapabilityStatement.class).var_145();
		} catch (Exception var_175) {}", ex.toString());
			theModel.put("var_146", var_129("Failed to load conformance statement, error was: " + var_175.var_101(), var_175));
		}

		var_123.var_117("jsonEncodedConf", var_108(var_109).var_147().var_148(var_174));

		Map<String, Number> var_149 = new HashMap<String, Number>();
		long var_150 = 0;

		for (org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestComponent var_151 : var_174.var_152()) {
			for (org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestResourceComponent var_153 : var_151.var_154()) {
				List<org.hl7.fhir.r4.model.Extension> var_155 = var_153.var_176(var_75);
				if (var_155 != null && var_155.var_157() > 0) {
					Number var_158 = ((org.hl7.fhir.r4.model.DecimalType) (var_155.var_115(0).var_159())).var_160();
					var_149.var_117(var_153.var_161().var_159(), var_158);
					var_150 += var_158.var_162();
				}
			}
		}

		var_123.var_117("resourceCounts", var_149);

		if (var_150 > 0) {
			for (org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestComponent var_151 : var_174.var_152()) {
				var_163.var_164(var_151.var_154(), new Comparator<org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestResourceComponent>() {
					@var_165
					public int method_10(org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestResourceComponent param_9, org.hl7.fhir.r4.model.CapabilityStatement.CapabilityStatementRestResourceComponent param_10) {
						org.hl7.fhir.r4.model.DecimalType var_168 = new org.hl7.fhir.r4.model.DecimalType();
						List<org.hl7.fhir.r4.model.Extension> var_169 = var_166.var_176(var_75);
						if (var_169 != null && var_169.var_157() > 0) {
							var_168 = (org.hl7.fhir.r4.model.DecimalType) var_169.var_115(0).var_159();
						}
						org.hl7.fhir.r4.model.DecimalType var_170 = new org.hl7.fhir.r4.model.DecimalType();
						List<org.hl7.fhir.r4.model.Extension> var_171 = var_167.var_176(var_75);
						if (var_171 != null && var_171.var_157() > 0) {
							var_170 = (org.hl7.fhir.r4.model.DecimalType) var_171.var_115(0).var_159();
						}
						int var_113 = var_170.var_172(var_168);
						if (var_113 == 0) {
							var_113 = var_166.var_161().var_159().var_172(var_167.var_161().var_159());
						}
						return var_113;
					}
				});
			}
		}

		var_123.var_117("requiredParamExtension", var_28.var_173);

		var_123.var_117("conf", var_174);
		return var_174;
	}

	protected String method_11(ModelMap param_7) {
		return "[server=" + var_123.var_115("serverId") + "] - ";
	}

	protected FhirContext method_2(FhirVersionEnum param_4) {
		FhirContext var_113;
		var_113 = new FhirContext(var_110);
		return var_113;
	}

	private String method_12(HomeRequest param_3, EncodingEnum param_11, String param_1) {
		try {
			IBaseResource var_179 = var_178.var_180(var_108(var_109)).var_181(var_104);
			String var_113;
			if (var_179 instanceof IResource) {
				IResource var_12 = (IResource) var_179;
				var_113 = var_12.var_182().var_183().var_184();
			} else if (var_179 instanceof IDomainResource) {
				var_113 = ((IDomainResource) var_179).var_182().var_185();
			} else {
				var_113 = null;
			}
			return var_36.var_72(var_113);
		} catch (Exception var_106) {}
	}

	protected String method_13(String param_12) {
		if (var_186 == null) {
			return "";
		}
		String var_113 = var_186.var_187();

		StringBuilder var_86 = new StringBuilder();
		for (int var_88 = 0; var_88 < var_113.var_99(); var_88++) {
			char var_90 = var_113.var_100(var_88);
			int var_188 = var_90;
			if (var_188 == 65533) {
				var_86.var_87(' ');
				continue;
			}
			if (var_188 == 160) {
				var_86.var_87(' ');
				continue;
			}
			if (var_188 == 194) {
				var_86.var_87(' ');
				continue;
			}
			var_86.var_87(var_90);
		}
		var_113 = var_86.var_101();
		return var_113;
	}

	protected void method_14(GenericClient param_6, ResultType param_13, ModelMap param_14, long param_15, String param_16,
																	 CaptureInterceptor param_17, HomeRequest param_3) {
		try {



















			IHttpRequest var_194 = var_193.var_195();
			IHttpResponse var_196 = var_193.var_197();
			String var_198 = null;
			String var_199 = null;
			String var_200 = null;
			String var_201 = null;
			String var_202 = null;
			String var_203 = null;
			ContentType var_204 = null;
			if (var_194 != null) {
				var_198 = var_194.var_205();
				var_199 = var_194.var_206();
				var_200 = var_194.var_207();
			}
			if (var_196 != null) {
				var_201 = "HTTP " + var_196.var_208() + " " + var_196.var_209();
				var_196.var_210();
				var_202 = var_33.var_101(var_196.var_211(), var_17.var_212);

				List<String> var_213 = var_196.var_214(var_17.var_215);
				if (var_213 != null && var_213.var_216() == false) {
					var_204 = var_40.var_217(var_213.var_115(0));
					var_203 = var_204.var_218();
				}
			}

			EncodingEnum var_219 = var_18.var_220(var_203);
			String var_221 = "";

			StringBuilder var_222 = new StringBuilder();
			IBaseResource var_223 = null;

			FhirContext var_3 = var_108(var_109);
			if (var_219 == null) {
				var_222.var_87("Non-FHIR response");
			} else {
				switch (var_219) {
					case var_224:
						if (var_189 == var_125.var_225) {
							var_221 = var_177(var_109, var_219, var_202);
							var_222.var_87("JSON resource");
						} else if (var_189 == var_125.var_226) {
							var_222.var_87("JSON bundle");
							var_223 = var_3.var_147().var_181(var_202);
						}
						break;
					case var_227:
					default:
						if (var_189 == var_125.var_225) {
							var_221 = var_177(var_109, var_219, var_202);
							var_222.var_87("XML resource");
						} else if (var_189 == var_125.var_226) {
							var_222.var_87("XML bundle");
							var_223 = var_3.var_228().var_181(var_202);
						}
						break;
				}
			}

			var_222.var_87(" (").var_87(var_72(var_202).var_99() + " bytes)");

			Header[] var_229 = var_194 != null ? var_230(var_194.var_231()) : new Header[0];
			Header[] var_232 = var_196 != null ? var_230(var_196.var_231()) : new Header[0];

			var_190.var_117("outcomeDescription", var_192);
			var_190.var_117("resultDescription", var_222.var_101());
			var_190.var_117("action", var_200);
			var_190.var_117("ri", var_223 instanceof IAnyResource);
			var_190.var_117("riBundle", var_223);
			var_190.var_117("resultStatus", var_201);

			var_190.var_117("requestUrl", var_199);
			var_190.var_117("requestUrlText", var_102(var_122.var_233(), var_199));

			String var_234 = var_235(var_198, var_219);
			var_190.var_117("requestBody", var_234);

			String var_236 = var_235(var_202, var_219);
			var_190.var_117("resultBody", var_236);

			var_190.var_117("resultBodyIsLong", var_236.var_99() > 1000);
			var_190.var_117("requestHeaders", var_229);
			var_190.var_117("responseHeaders", var_232);
			var_190.var_117("narrative", var_221);
			var_190.var_117("latencyMs", var_191);

		} catch (Exception var_106) {}

	}

	
	protected String method_5(String param_18, Exception param_19) {
		return var_237;
	}

	protected enum enum_0 {
		var_226, var_126, var_225, var_238
	}

	public static class class_0 implements IClientInterceptor {

		private IHttpRequest var_239;
		private IHttpResponse var_240;


		public IHttpRequest method_15() {
			return var_239;
		}

		public IHttpResponse method_16() {
			return var_240;
		}





		@var_165
		public void method_17(IHttpRequest param_3) {
			assert var_239 == null;

			var_239 = var_109;
		}

		@var_165
		public void method_18(IHttpResponse param_20) throws IOException {
			assert var_240 == null;
			var_240 = var_241;














		}






















	}

	private static String method_19(String param_21) {
		String var_113 = var_242;
		if (var_113 != null) {
			for (int var_88 = 0; var_88 < var_113.var_99(); var_88++) {
				char var_90 = var_113.var_100(var_88);
				switch (var_90) {
					case '\'':
					case '"':
					case '<':
					case '>':
						var_113 = var_113.var_243(var_90, '_');
				}
			}
		}
		return var_113;
	}

}
