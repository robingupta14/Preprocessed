











namespace ns_0
{
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public class class_0 : IHtmlSanitizer
    {
        
        
        
        
        
        
        
        
        public HtmlSanitizer(IEnumerable<string> var_0 = null, IEnumerable<string> var_1 = null,
            IEnumerable<string> var_2 = null, IEnumerable<string> var_3 = null, IEnumerable<string> var_4 = null)
        {
            AllowedTags = new HashSet<string>(var_0 ?? DefaultAllowedTags, StringComparer.OrdinalIgnoreCase);
            AllowedSchemes = new HashSet<string>(var_1 ?? DefaultAllowedSchemes, StringComparer.OrdinalIgnoreCase);
            AllowedAttributes = new HashSet<string>(var_2 ?? DefaultAllowedAttributes, StringComparer.OrdinalIgnoreCase);
            UriAttributes = new HashSet<string>(var_3 ?? DefaultUriAttributes, StringComparer.OrdinalIgnoreCase);
            AllowedCssProperties = new HashSet<string>(var_4 ?? DefaultAllowedCssProperties, StringComparer.OrdinalIgnoreCase);
            AllowedAtRules = new HashSet<CssRuleType>(DefaultAllowedAtRules);
            AllowedClasses = new HashSet<string>(DefaultAllowedClasses, StringComparer.OrdinalIgnoreCase);
        }

        
        
        
        public static bool DefaultKeepChildNodes { get; set; } = false;

        
        
        
        public bool KeepChildNodes { get; set; } = DefaultKeepChildNodes;

        
        
        
        public static Func<HtmlParser> DefaultHtmlParserFactory { get; set; } = CreateParser;

        
        
        
        public Func<HtmlParser> HtmlParserFactory { get; set; } = DefaultHtmlParserFactory;

        
        
        
        public static IMarkupFormatter DefaultOutputFormatter { get; set; } = HtmlFormatter.Instance;

        
        
        
        public IMarkupFormatter OutputFormatter { get; set; } = DefaultOutputFormatter;

        
        
        
        
        
        
        public ISet<CssRuleType> AllowedAtRules { get; private set; }

        
        
        
        public static ISet<CssRuleType> DefaultAllowedAtRules { get; } = new HashSet<CssRuleType>() { CssRuleType.Style, CssRuleType.Namespace };

        
        
        
        
        
        
        public ISet<string> AllowedSchemes { get; private set; }

        
        
        
        public static ISet<string> DefaultAllowedSchemes { get; } = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "http", "https" };

        
        
        
        
        
        
        public ISet<string> AllowedTags { get; private set; }

        
        
        
        public static ISet<string> DefaultAllowedTags { get; } = new HashSet<string>(StringComparer.OrdinalIgnoreCase) {
            
            "a", "abbr", "acronym", "address", "area", "b",
            "big", "blockquote", "br", "button", "caption", "center", "cite",
            "code", "col", "colgroup", "dd", "del", "dfn", "dir", "div", "dl", "dt",
            "em", "fieldset", "font", "form", "h1", "h2", "h3", "h4", "h5", "h6",
            "hr", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "map",
            "menu", "ol", "optgroup", "option", "p", "pre", "q", "s", "samp",
            "select", "small", "span", "strike", "strong", "sub", "sup", "table",
            "tbody", "td", "textarea", "tfoot", "th", "thead", "tr", "tt", "u",
            "ul", "var",
            
            
            "section", "nav", "article", "aside", "header", "footer", "main",
            
            "figure", "figcaption",
            
            "data", "time", "mark", "ruby", "rt", "rp", "bdi", "wbr",
            
            "datalist", "keygen", "output", "progress", "meter",
            
            "details", "summary", "menuitem",
            
            "html", "head", "body"
        };

        
        
        
        
        
        
        public ISet<string> AllowedAttributes { get; private set; }

        
        
        
        public bool AllowDataAttributes { get; set; }

        
        
        
        public static ISet<string> DefaultAllowedAttributes { get; }  = new HashSet<string>(StringComparer.OrdinalIgnoreCase) {
            
            "abbr", "accept", "accept-charset", "accesskey",
            "action", "align", "alt", "axis", "bgcolor", "border", "cellpadding",
            "cellspacing", "char", "charoff", "charset", "checked", "cite", 
            "clear", "cols", "colspan", "color", "compact", "coords", "datetime",
            "dir", "disabled", "enctype", "for", "frame", "headers", "height",
            "href", "hreflang", "hspace",  "ismap", "label", "lang",
            "longdesc", "maxlength", "media", "method", "multiple", "name",
            "nohref", "noshade", "nowrap", "prompt", "readonly", "rel", "rev",
            "rows", "rowspan", "rules", "scope", "selected", "shape", "size",
            "span", "src", "start", "style", "summary", "tabindex", "target", "title",
            "type", "usemap", "valign", "value", "vspace", "width",
            
            "high", 
            "keytype", 
            "list", 
            "low", 
            "max", 
            "min", 
            "novalidate", 
            "open", 
            "optimum", 
            "pattern", 
            "placeholder", 
            "pubdate", 
            "radiogroup", 
            "required", 
            "reversed", 
            "spellcheck", 
            "step", 
            "wrap", 
            "challenge", 
            "contenteditable", 
            "draggable", 
            "dropzone", 
            "autocomplete", 
            "autosave", 
        };

        
        
        
        
        
        
        public ISet<string> UriAttributes { get; private set; }

        
        
        
        public static ISet<string> DefaultUriAttributes { get; } = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "action", "background", "dynsrc", "href", "lowsrc", "src" };

        
        
        
        
        
        
        public ISet<string> AllowedCssProperties { get; private set; }

        
        
        
        public static ISet<string> DefaultAllowedCssProperties { get; } = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
        {
            
            "background",
            "background-attachment",
            "background-clip",
            "background-color",
            "background-image",
            "background-origin",
            "background-position",
            "background-repeat",
            "background-repeat-x", 
            "background-repeat-y",
            "background-size",
            "border",
            "border-bottom",
            "border-bottom-color",
            "border-bottom-left-radius",
            "border-bottom-right-radius",
            "border-bottom-style",
            "border-bottom-width",
            "border-collapse",
            "border-color",
            "border-image",
            "border-image-outset",
            "border-image-repeat",
            "border-image-slice",
            "border-image-source",
            "border-image-width",
            "border-left",
            "border-left-color",
            "border-left-style",
            "border-left-width",
            "border-radius",
            "border-right",
            "border-right-color",
            "border-right-style",
            "border-right-width",
            "border-spacing",
            "border-style",
            "border-top",
            "border-top-color",
            "border-top-left-radius",
            "border-top-right-radius",
            "border-top-style",
            "border-top-width",
            "border-width",
            "bottom",
            "caption-side",
            "clear",
            "clip",
            "color",
            "content",
            "counter-increment",
            "counter-reset",
            "cursor",
            "direction",
            "display",
            "empty-cells",
            "float",
            "font",
            "font-family",
            "font-feature-settings",
            "font-kerning",
            "font-language-override",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-synthesis",
            "font-variant",
            "font-variant-alternates",
            "font-variant-caps",
            "font-variant-east-asian",
            "font-variant-ligatures",
            "font-variant-numeric",
            "font-variant-position",
            "font-weight",
            "height",
            "left",
            "letter-spacing",
            "line-height",
            "list-style",
            "list-style-image",
            "list-style-position",
            "list-style-type",
            "margin",
            "margin-bottom",
            "margin-left",
            "margin-right",
            "margin-top",
            "max-height",
            "max-width",
            "min-height",
            "min-width",
            "opacity",
            "orphans",
            "outline",
            "outline-color",
            "outline-offset",
            "outline-style",
            "outline-width",
            "overflow",
            "overflow-wrap",
            "overflow-x",
            "overflow-y",
            "padding",
            "padding-bottom",
            "padding-left",
            "padding-right",
            "padding-top",
            "page-break-after",
            "page-break-before",
            "page-break-inside",
            "quotes",
            "right",
            "table-layout",
            "text-align",
            "text-decoration",
            "text-decoration-color",
            "text-decoration-line",
            "text-decoration-skip",
            "text-decoration-style",
            "text-indent",
            "text-transform",
            "top",
            "unicode-bidi",
            "vertical-align",
            "visibility",
            "white-space",
            "widows",
            "width",
            "word-spacing",
            "z-index"
        };

        private Regex var_5;

        
        
        
        
        
        
        public Regex DisallowCssPropertyValue
        {
            get { return var_5 ?? var_16; }
            set { var_5 = value; }
        }

        
        
        
        public static ISet<string> DefaultAllowedClasses { get; } = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

        
        
        
        
        
        
        public ISet<string> AllowedClasses { get; private set; }

        
        
        
        public event EventHandler<PostProcessDomEventArgs> var_6;
        
        
        
        public event EventHandler<PostProcessNodeEventArgs> var_7;
        
        
        
        public event EventHandler<RemovingTagEventArgs> var_8;
        
        
        
        public event EventHandler<RemovingAttributeEventArgs> var_9;
        
        
        
        public event EventHandler<RemovingStyleEventArgs> var_10;
        
        
        
        public event EventHandler<RemovingAtRuleEventArgs> var_11;
        
        
        
        public event EventHandler<RemovingCommentEventArgs> var_12;
        
        
        
        public event EventHandler<RemovingCssClassEventArgs> var_13;
        
        
        
        public event EventHandler<FilterUrlEventArgs> var_14;

        
        
        
        
        protected virtual void fn_0(PostProcessDomEventArgs var_15)
        {
            var_6?.Invoke(this, var_15);
        }

        
        
        
        
        protected virtual void fn_1(PostProcessNodeEventArgs var_15)
        {
            var_7?.Invoke(this, var_15);
        }

        
        
        
        
        protected virtual void fn_2(RemovingTagEventArgs var_15)
        {
            var_8?.Invoke(this, var_15);
        }

        
        
        
        
        protected virtual void fn_3(RemovingAttributeEventArgs var_15)
        {
            var_9?.Invoke(this, var_15);
        }

        
        
        
        
        protected virtual void fn_4(RemovingStyleEventArgs var_15)
        {
            var_10?.Invoke(this, var_15);
        }

        
        
        
        
        protected virtual void fn_5(RemovingAtRuleEventArgs var_15)
        {
            var_11?.Invoke(this, var_15);
        }

        
        
        
        
        protected virtual void fn_6(RemovingCommentEventArgs var_15)
        {
            var_12?.Invoke(this, var_15);
        }

        
        
        
        public static readonly Regex var_16 = new Regex(@"[<>]", RegexOptions.Compiled);

        
        
        
        
        protected virtual void fn_7(RemovingCssClassEventArgs var_15)
        {
            var_13?.Invoke(this, var_15);
        }

        
        
        
        
        protected virtual void fn_8(FilterUrlEventArgs var_15)
        {
            var_14?.Invoke(this, var_15);
        }

        
        
        
        
        
        private static IEnumerable<INode> fn_9(INode var_17)
        {
            if (var_17 == null) yield break;

            foreach (var node in var_17.ChildNodes)
            {
                yield return node;
                foreach (var child in GetAllNodes(node).Where(var_18 => var_18 != null))
                {
                    yield return child;
                }
            }
        }

        
        
        
        
        
        
        
        public string fn_10(string var_19, string var_20 = "", IMarkupFormatter var_21 = null)
        {
            using (var var_17 = SanitizeDom(var_19, var_20))
            {
                var var_22 = var_17.Body.ChildNodes.ToHtml(var_21 ?? OutputFormatter);
                return var_22;
            }
        }

        
        
        
        
        
        
        public IHtmlDocument fn_11(string var_19, string var_20 = "")
        {
            var var_23 = HtmlParserFactory();
            var var_17 = var_23.ParseDocument("<html><body>" + var_19);

            DoSanitize(var_17, var_17.Body, var_20);

            return var_17;
        }

        
        
        
        
        
        
        
        
        public IHtmlDocument fn_11(IHtmlDocument var_24, IHtmlElement var_25 = null, string var_20 = "")
        {
            DoSanitize(var_24, var_25 ?? (IParentNode) var_24, var_20);
            return var_24;
        }

        
        
        
        
        
        
        
        public string fn_12(string var_19, string var_20 = "", IMarkupFormatter var_21 = null)
        {
            var var_23 = HtmlParserFactory();
            var var_17 = var_23.ParseDocument(var_19);

            DoSanitize(var_17, var_17, var_20);

            var var_22 = var_17.ToHtml(var_21 ?? OutputFormatter);

            return var_22;
        }

        
        
        
        
        
        
        
        public string fn_12(Stream var_19, string var_20 = "", IMarkupFormatter var_21 = null)
        {
            var var_23 = HtmlParserFactory();
            var var_17 = var_23.ParseDocument(var_19);

            DoSanitize(var_17, var_17, var_20);

            var var_22 = var_17.ToHtml(var_21 ?? OutputFormatter);

            return var_22;
        }

        
        
        
        
        private static HtmlParser fn_13()
        {
            return new HtmlParser(new HtmlParserOptions(), BrowsingContext.New(new Configuration().WithCss(new CssParserOptions
            {
                IsIncludingUnknownDeclarations = true,
                IsIncludingUnknownRules = true,
                IsToleratingInvalidSelectors = true,
            })));
        }

        
        
        
        
        
        private void fn_14(INode var_25)
        {
            foreach (var comment in GetAllNodes(var_25).OfType<IComment>().ToList())
            {
                var var_15 = new RemovingCommentEventArgs { Comment = comment };
                OnRemovingComment(var_15);
                if (!var_15.Cancel)
                    comment.Remove();
            }
        }

        private void fn_15(IHtmlDocument var_17, IParentNode var_25, string var_20 = "")
        {
            
            foreach (var var_37 in var_25.QuerySelectorAll("*").Where(var_26 => !IsAllowedTag(var_26)).ToList())
            {
                RemoveTag(var_37, RemoveReason.NotAllowedTag);
            }

            SanitizeStyleSheets(var_17, var_20);

            
            foreach (var var_37 in var_25.QuerySelectorAll("*").ToList())
            {
                
                foreach (var var_36 in var_37.Attributes.Where(var_27 => !IsAllowedAttribute(var_27)).ToList())
                {
                    RemoveAttribute(var_37, var_36, RemoveReason.NotAllowedAttribute);
                }

                
                foreach (var var_36 in var_37.Attributes.Where(IsUriAttribute).ToList())
                {
                    var var_28 = SanitizeUrl(var_36.Value, var_20);
                    if (var_28 == null)
                        RemoveAttribute(var_37, var_36, RemoveReason.NotAllowedUrlValue);
                    else
                        var_37.SetAttribute(var_36.Name, var_28);
                }

                
                var var_29 = string.IsNullOrEmpty(var_37.GetAttribute("style"));
                SanitizeStyle(var_37, var_20);

                
                foreach (var var_36 in var_37.Attributes.ToList())
                {
                    
                    
                    if (var_36.Value.Contains("&{"))
                    {
                        RemoveAttribute(var_37, var_36, RemoveReason.NotAllowedValue);
                    }
                    else
                    {
                        if (AllowedClasses.Any() && var_36.Name == "class")
                        {
                            var var_30 = var_37.ClassList.Except(AllowedClasses).ToArray();

                            foreach (var removedClass in var_30)
                                RemoveCssClass(var_37, removedClass, RemoveReason.NotAllowedCssClass);

                            if (!var_37.ClassList.Any())
                                RemoveAttribute(var_37, var_36, RemoveReason.ClassAttributeEmpty);
                        }
                        else if (!var_29 && var_36.Name == "style" && string.IsNullOrEmpty(var_36.Value))
                        {
                            RemoveAttribute(var_37, var_36, RemoveReason.StyleAttributeEmpty);
                        }
                    }
                }
            }

            RemoveComments(var_25 as INode);

            DoPostProcess(var_17, var_25 as INode);
        }

        private void fn_16(IHtmlDocument var_17, string var_20)
        {
            foreach (var styleSheet in var_17.StyleSheets.OfType<ICssStyleSheet>())
            {
                var var_31 = styleSheet.OwnerNode;

                for (int var_32 = 0; var_32 < styleSheet.Rules.Length;)
                {
                    var var_33 = styleSheet.Rules[var_32];
                    if (!SanitizeStyleRule(var_33, var_31, var_20) && RemoveAtRule(var_31, var_33))
                        styleSheet.RemoveAt(var_32);
                    else var_32++;
                }

                var_31.InnerHtml = styleSheet.ToCss();
            }
        }

        private bool fn_17(ICssRule var_33, IElement var_31, string var_20)
        {
            if (!AllowedAtRules.Contains(var_33.Type)) return false;

            if (var_33 is ICssStyleRule styleRule)
            {
                SanitizeStyleDeclaration(var_31, styleRule.Style, var_20);
            }
            else
            {
                if (var_33 is ICssGroupingRule groupingRule)
                {
                    for (int var_32 = 0; var_32 < groupingRule.Rules.Length;)
                    {
                        var var_34 = groupingRule.Rules[var_32];
                        if (!SanitizeStyleRule(var_34, var_31, var_20) && RemoveAtRule(var_31, var_34))
                            groupingRule.RemoveAt(var_32);
                        else var_32++;
                    }
                }
                else if (var_33 is ICssPageRule pageRule)
                {
                    SanitizeStyleDeclaration(var_31, pageRule.Style, var_20);
                }
                else if (var_33 is ICssKeyframesRule keyFramesRule)
                {
                    foreach (var var_34 in keyFramesRule.Rules.OfType<ICssKeyframeRule>().ToList())
                    {
                        if (!SanitizeStyleRule(var_34, var_31, var_20) && RemoveAtRule(var_31, var_34))
                            keyFramesRule.Remove(var_34.KeyText);
                    }
                }
                else if (var_33 is ICssKeyframeRule keyFrameRule)
                {
                    SanitizeStyleDeclaration(var_31, keyFrameRule.Style, var_20);
                }
            }

            return true;
        }

        
        
        
        
        
        private void fn_18(IHtmlDocument var_17, INode var_25)
        {
            if (var_7 != null)
            {
                var_17.Normalize();
                var var_35 = GetAllNodes(var_25).ToList();

                foreach (var node in var_35)
                {
                    var var_15 = new PostProcessNodeEventArgs { Document = var_17, Node = node };
                    OnPostProcessNode(var_15);
                    if (var_15.ReplacementNodes.Any())
                    {
                        ((IChildNode)node).Replace(var_15.ReplacementNodes.ToArray());
                    }
                }
            }

            if (var_6 != null)
            {
                var var_15 = new PostProcessDomEventArgs { Document = var_17 };
                OnPostProcessDom(var_15);
            }
        }

        
        
        
        
        
        private bool fn_19(IAttr var_36)
        {
            return UriAttributes.Contains(var_36.Name);
        }

        
        
        
        
        
        private bool fn_20(IElement var_37)
        {
            return AllowedTags.Contains(var_37.NodeName);
        }

        
        
        
        
        
        private bool fn_21(IAttr var_36)
        {
            return AllowedAttributes.Contains(var_36.Name)
                
                || (AllowDataAttributes && var_36.Name != null && var_36.Name.StartsWith("data-", StringComparison.OrdinalIgnoreCase));
        }

        
        private static readonly Regex var_38 = new Regex(@"\\([0-9a-fA-F]{1,6})\s?|\\([^\r\n\f0-9a-fA-F'""{};:()#*])", RegexOptions.Compiled);
        private static readonly Regex var_39 = new Regex(@"/\*.*?\*/", RegexOptions.Compiled);
        
        private static readonly Regex var_40 = new Regex(@"[eE\uFF25\uFF45][xX\uFF38\uFF58][pP\uFF30\uFF50][rR\u0280\uFF32\uFF52][eE\uFF25\uFF45][sS\uFF33\uFF53]{2}[iI\u026A\uFF29\uFF49][oO\uFF2F\uFF4F][nN\u0274\uFF2E\uFF4E]", RegexOptions.Compiled);
        private static readonly Regex var_41 = new Regex(@"[Uu][Rr\u0280][Ll\u029F]\s*\(\s*(['""]?)\s*([^'"")\s]+)\s*(['""]?)\s*", RegexOptions.Compiled);

        
        
        
        
        
        protected void fn_22(IElement var_42, string var_20)
        {
            
            
            var var_36 = var_42.GetAttribute("style");
            if (var_36 == null) return;
            if (var_42.GetStyle() == null)
            {
                var_42.RemoveAttribute("style");
                return;
            }
            var_42.SetAttribute("style", var_42.GetStyle().ToCss());

            var var_43 = var_42.GetStyle();
            if (var_43 == null || var_43.Length == 0) return;

            SanitizeStyleDeclaration(var_42, var_43, var_20);
        }

        private void fn_23(IElement var_42, ICssStyleDeclaration var_43, string var_20)
        {
            var var_44 = new List<Tuple<ICssProperty, RemoveReason>>();
            var var_45 = new Dictionary<string, string>();

            foreach (var var_58 in var_43)
            {
                var var_46 = DecodeCss(var_58.Name);
                var var_47 = DecodeCss(var_58.Value);

                if (!AllowedCssProperties.Contains(var_46))
                {
                    var_44.Add(new Tuple<ICssProperty, RemoveReason>(var_58, RemoveReason.NotAllowedStyle));
                    continue;
                }

                if (var_40.IsMatch(var_47) || DisallowCssPropertyValue.IsMatch(var_47))
                {
                    var_44.Add(new Tuple<ICssProperty, RemoveReason>(var_58, RemoveReason.NotAllowedValue));
                    continue;
                }

                var var_48 = var_41.Matches(var_47);

                if (var_48.Count > 0)
                {
                    if (var_48.Cast<Match>().Any(var_49 => SanitizeUrl(var_49.Groups[2].Value, var_20) == null))
                        var_44.Add(new Tuple<ICssProperty, RemoveReason>(var_58, RemoveReason.NotAllowedUrlValue));
                    else
                    {
                        var var_50 = var_41.Replace(var_47, var_49 => "url(" + var_49.Groups[1].Value + SanitizeUrl(var_49.Groups[2].Value, var_20) + var_49.Groups[3].Value);
                        if (var_50 != var_47)
                        {
                            if (var_46 != var_58.Name)
                            {
                                var_44.Add(new Tuple<ICssProperty, RemoveReason>(var_58, RemoveReason.NotAllowedUrlValue));
                            }
                            var_45[var_46] = var_50;
                        }
                    }
                }
            }

            foreach (var var_58 in var_45)
            {
                var_43.SetProperty(var_58.Key, var_58.Value);
            }

            foreach (var var_58 in var_44)
            {
                RemoveStyle(var_42, var_43, var_58.Item1, var_58.Item2);
            }
        }

        
        
        
        
        
        protected static string fn_24(string var_51)
        {
            var var_52 = var_38.Replace(var_51, var_49 =>
            {
                if (var_49.Groups[1].Success)
                    return ((char)int.Parse(var_49.Groups[1].Value, NumberStyles.HexNumber)).ToString();
                var var_26 = var_49.Groups[2].Value;
                return var_26 == "\\" ? @"\\" : var_26;
            });

            var_52 = var_39.Replace(var_52, var_49 => "");

            return var_52;
        }

        private static readonly Regex var_53 = new Regex(@"^\s*([^\/#]*?)(?:\:|&#0*58|&#x0*3a)", RegexOptions.Compiled | RegexOptions.IgnoreCase);

        
        
        
        
        
        protected Iri fn_25(string var_28)
        {
            var var_54 = var_53.Match(var_28);

            if (var_54.Success)
            {
                var var_55 = var_54.Groups[1].Value;
                return AllowedSchemes.Contains(var_55, StringComparer.OrdinalIgnoreCase) ? new Iri { Value = var_28, Scheme = var_55 } : null;
            }

            return new Iri { Value = var_28 };
        }

        
        
        
        
        
        
        protected virtual string fn_26(string var_28, string var_20)
        {
            var var_56 = GetSafeIri(var_28);

            if (var_56 != null && !var_56.IsAbsolute && !string.IsNullOrEmpty(var_20))
            {
                
                if (Uri.TryCreate(var_20, UriKind.Absolute, out Uri baseUri))
                {
                    try
                    {
                        return new Uri(baseUri, var_56.Value).AbsoluteUri;
                    }
#pragma warning disable CA1031 
                    catch (UriFormatException)
                    {
                        var_56 = null;
                    }
#pragma warning restore CA1031 
                }
                else var_56 = null;
            }

            var var_15 = new FilterUrlEventArgs { OriginalUrl = var_28, SanitizedUrl = var_56?.Value };
            OnFilteringUrl(var_15);

            return var_15.SanitizedUrl;
        }

        
        
        
        
        
        private void fn_27(IElement var_37, RemoveReason var_57)
        {
            var var_15 = new RemovingTagEventArgs { Tag = var_37, Reason = var_57 };
            OnRemovingTag(var_15);
            if (!var_15.Cancel)
            {
                if (KeepChildNodes && var_37.HasChildNodes)
                    var_37.Replace(var_37.ChildNodes.ToArray());
                else
                    var_37.Remove();
            }
        }

        
        
        
        
        
        
        private void fn_28(IElement var_37, IAttr var_36, RemoveReason var_57)
        {
            var var_15 = new RemovingAttributeEventArgs { Tag = var_37, Attribute = var_36, Reason = var_57 };
            OnRemovingAttribute(var_15);
            if (!var_15.Cancel) var_37.RemoveAttribute(var_36.Name);
        }

        
        
        
        
        
        
        
        private void fn_29(IElement var_37, ICssStyleDeclaration var_43, ICssProperty var_58, RemoveReason var_57)
        {
            var var_15 = new RemovingStyleEventArgs { Tag = var_37, Style = var_58, Reason = var_57 };
            OnRemovingStyle(var_15);
            if (!var_15.Cancel) var_43.RemoveProperty(var_58.Name);
        }

        
        
        
        
        
        
        private bool fn_30(IElement var_37, ICssRule var_33)
        {
            var var_15 = new RemovingAtRuleEventArgs { Tag = var_37, Rule = var_33 };
            OnRemovingAtRule(var_15);
            return !var_15.Cancel;
        }

        
        
        
        
        
        
        private void fn_31(IElement var_37, string var_59, RemoveReason var_57)
        {
            var var_15 = new RemovingCssClassEventArgs { Tag = var_37, CssClass = var_59, Reason = var_57 };
            OnRemovingCssClass(var_15);
            if (!var_15.Cancel) var_37.ClassList.Remove(var_59);
        }
    }
}
