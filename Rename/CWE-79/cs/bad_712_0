






namespace ns_0
{
    public class class_0 : IPlugin
    {
        public static string var_0
            = @"{0} Snapshot of {1}";

        public static string var_1
            = @"Snapshot of <i>{0}</i> generated by <a href=""https:

        public static bool Humanize = true;

        private IAppHost AppHost { get; set; }

        public const string ModelKey = "Model";
        public const string var_2 = "__errorStatus";

        public void fn_0(IAppHost var_3)
        {
            AppHost = var_3;
            
            var_3.ContentTypes.RegisterAsync(MimeTypes.Html, SerializeToStreamAsync, null);
            var_3.ContentTypes.RegisterAsync(MimeTypes.JsonReport, SerializeToStreamAsync, null);

            var_3.Config.DefaultContentType = MimeTypes.Html;
            var_3.Config.IgnoreFormatsInMetadata.Add(MimeTypes.Html.ToContentFormat());
            var_3.Config.IgnoreFormatsInMetadata.Add(MimeTypes.JsonReport.ToContentFormat());
        }

        public async Task fn_1(IRequest var_4, object var_5, Stream var_6)
        {
            var var_7 = var_4.Response;
            if (var_4.GetItem("HttpResult") is IHttpResult httpResult && httpResult.Headers.ContainsKey(HttpHeaders.Location) 
                && httpResult.StatusCode != System.Net.HttpStatusCode.Created)  
                return;

            try
            {
                if (var_7.StatusCode >= 400)
                {
                    var var_8 = var_5.GetResponseStatus();
                    var_4.Items[var_2] = var_8;
                }

                if (var_5 is CompressedResult)
                {
                    if (var_7.Dto != null)
                        var_5 = var_7.Dto;
                    else 
                        throw new ArgumentException();
                }

                foreach (var viewEngine in AppHost.ViewEngines)
                {
                    var var_9 = await viewEngine.ProcessRequestAsync(var_4, var_5, var_6);
                    if (var_9)
                        return;
                }
            }
            catch (Exception ex)
            {
                if (var_7.StatusCode < 400)
                    throw;

                
                
                var_5 = DtoUtils.CreateErrorResponse(var_4.Dto, ex);
            }

            
            if (var_4.ResponseContentType == MimeTypes.PlainText)
            {
                var_4.ResponseContentType = MimeTypes.Html;
                var_7.ContentType = MimeTypes.Html;
            }

            if (var_4.ResponseContentType != MimeTypes.Html && var_4.ResponseContentType != MimeTypes.JsonReport) 
                return;

            var var_10 = var_5.GetDto();
            if (!(var_10 is string html))
            {
                
                var var_11 = JsonDataContractSerializer.Instance.SerializeToString(var_10) ?? "null";
                var_11 = var_11.Replace("<", "&lt;").Replace(">", "&gt;");

                var var_12 = var_4.ResolveAbsoluteUrl()
                    .Replace("format=html", "")
                    .Replace("format=shtm", "")
                    .TrimEnd('?', '&');

                var_12 += var_12.Contains("?") ? "&" : "?";

                var var_13 = DateTime.UtcNow;
                var var_14 = var_4.OperationName ?? var_10.GetType().GetOperationName();

                html = HtmlTemplates.GetHtmlFormatTemplate()
                    .Replace("${Dto}", var_11)
                    .Replace("${Title}", string.Format(var_0, var_14, var_13))
                    .Replace("${MvcIncludes}", MiniProfiler.Profiler.RenderIncludes().ToString())
                    .Replace("${Header}", string.Format(var_1, var_14, var_13))
                    .Replace("${ServiceUrl}", var_12)
                    .Replace("${Humanize}", Humanize.ToString().ToLower());
            }

            var var_15 = html.ToUtf8Bytes();
            await var_6.WriteAsync(var_15, 0, var_15.Length);
        }
    }
}