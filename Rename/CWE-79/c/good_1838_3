







sapi_globals_struct sapi_globals;


static void fn_0(sapi_globals_struct *sapi_globals var_56)
{
 memset(sapi_globals, 0, sizeof(*sapi_globals));
 zend_hash_init_ex(&sapi_globals->known_post_content_types, 5, NULL, NULL, 1, 0);
 php_setup_sapi_content_types(TSRMLS_C);
}

static void fn_2(sapi_globals_struct *sapi_globals var_56)
{
 zend_hash_destroy(&sapi_globals->known_post_content_types);
}


SAPI_API sapi_module_struct sapi_module;


SAPI_API void fn_3(sapi_module_struct *sf)
{




 sf->ini_entries = NULL;
 sapi_module = *sf;







 sapi_globals_ctor(&sapi_globals);


 virtual_cwd_startup();





 reentrancy_startup();
}

SAPI_API void fn_4(void)
{



 sapi_globals_dtor(&sapi_globals);


 reentrancy_shutdown();

 virtual_cwd_shutdown();




}


SAPI_API void fn_5(sapi_header_struct *sapi_header)
{
 efree(sapi_header->header);
}



PHP_FUNCTION(header_register_callback)
{
 zval *callback_func;
 char *callback_name;
 if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &callback_func) == var_56) {
  return;
 }

 if (!zend_is_callable(callback_func, 0, &callback_name TSRMLS_CC)) {
  efree(callback_name);
  RETURN_FALSE;
 }

 efree(callback_name);

 if (SG(callback_func)) {
  zval_ptr_dtor(&SG(callback_func));
  SG(fci_cache) = empty_fcall_info_cache;
 }

 SG(callback_func) = callback_func;

 Z_ADDREF_P(SG(callback_func));

 RETURN_TRUE;
}


static void fn_7(TSRMLS_D)
{
 int error;
 zend_fcall_info fci;
 char *callback_name = NULL;
 char *callback_error = NULL;
 zval *retval_ptr = NULL;

 if (zend_fcall_info_init(SG(callback_func), 0, &fci, &SG(fci_cache), &callback_name, &callback_error TSRMLS_CC) == SUCCESS) {
  fci.retval_ptr_ptr = &retval_ptr;

  error = zend_call_function(&fci, &SG(fci_cache) TSRMLS_CC);
  if (error == var_56) {
   goto callback_failed;
  } else if (retval_ptr) {
   zval_ptr_dtor(&retval_ptr);
  }
 } else {
callback_failed:
  php_error_docref(NULL TSRMLS_CC, E_WARNING, "Could not call the sapi_header_callback");
 }

 if (callback_name) {
  efree(callback_name);
 }
 if (callback_error) {
  efree(callback_error);
 }
}

SAPI_API void fn_8(void *var_48 var_56)
{
 if (SG(request_info).post_entry && SG(request_info).content_type_dup) {
  SG(request_info).post_entry->post_handler(SG(request_info).content_type_dup, var_48 TSRMLS_CC);
  if (SG(request_info).post_data) {
   efree(SG(request_info).post_data);
   SG(request_info).post_data = NULL;
  }
  efree(SG(request_info).content_type_dup);
  SG(request_info).content_type_dup = NULL;
 }
}

static void fn_10(TSRMLS_D)
{
 sapi_post_entry *post_entry;
 uint var_13 = strlen(SG(request_info).content_type);
 char *content_type = estrndup(SG(request_info).content_type, var_13);
 char *p;
 char var_13=0;
 void (*post_reader_func)(TSRMLS_D) = NULL;






 for (p=content_type; p<content_type+var_13; p++) {
  switch (*p) {
   case ';':
   case ',':
   case ' ':
    var_13 = p-content_type;
    var_13 = *p;
    *p = 0;
    break;
   default:
    *p = tolower(*p);
    break;
  }
 }


 if (zend_hash_find(&SG(known_post_content_types), content_type,
   var_13+1, (void **) &post_entry) == SUCCESS) {

  SG(request_info).post_entry = post_entry;
  post_reader_func = post_entry->post_reader;
 } else {

  SG(request_info).post_entry = NULL;
  if (!sapi_module.default_post_reader) {

   SG(request_info).content_type_dup = NULL;
   sapi_module.sapi_error(E_WARNING, "Unsupported content type:  '%s'", content_type);
   return;
  }
 }
 if (var_13) {
  *(p-1) = var_13;
 }

 SG(request_info).content_type_dup = content_type;

 if(post_reader_func) {
  post_reader_func(TSRMLS_C);
 }

 if(sapi_module.default_post_reader) {
  sapi_module.default_post_reader(TSRMLS_C);
 }
}


SAPI_API fn_13(sapi_read_standard_form_data)
{
 int read_bytes;
 int var_15=SAPI_POST_BLOCK_SIZE+1;

 if ((SG(post_max_size) > 0) && (SG(request_info).content_length > SG(post_max_size))) {
  php_error_docref(NULL TSRMLS_CC, E_WARNING, "POST Content-Length of %ld bytes exceeds the limit of %ld bytes",
     SG(request_info).content_length, SG(post_max_size));
  return;
 }
 SG(request_info).post_data = emalloc(var_15);

 for (;;) {
  read_bytes = sapi_module.read_post(SG(request_info).post_data+SG(read_post_bytes), SAPI_POST_BLOCK_SIZE TSRMLS_CC);
  if (read_bytes<=0) {
   break;
  }
  SG(read_post_bytes) += read_bytes;
  if ((SG(post_max_size) > 0) && (SG(read_post_bytes) > SG(post_max_size))) {
   php_error_docref(NULL TSRMLS_CC, E_WARNING, "Actual POST length does not match Content-Length, and exceeds %ld bytes", SG(post_max_size));
   break;
  }
  if (read_bytes < SAPI_POST_BLOCK_SIZE) {
   break;
  }
  if (SG(read_post_bytes)+SAPI_POST_BLOCK_SIZE >= var_15) {
   var_15 = SG(read_post_bytes)+SAPI_POST_BLOCK_SIZE+1;
   SG(request_info).post_data = erealloc(SG(request_info).post_data, var_15);
  }
 }
 SG(request_info).post_data[SG(read_post_bytes)] = 0;
 SG(request_info).post_data_length = SG(read_post_bytes);
}


static inline char *fn_15(uint var_18, uint *var_41 var_56)
{
 char *mimetype, *charset, *content_type;
 uint mimetype_len, charset_len;

 if (SG(default_mimetype)) {
  mimetype = SG(default_mimetype);
  mimetype_len = strlen(SG(default_mimetype));
 } else {
  mimetype = SAPI_DEFAULT_MIMETYPE;
  mimetype_len = sizeof(SAPI_DEFAULT_MIMETYPE) - 1;
 }
 if (SG(default_charset)) {
  charset = SG(default_charset);
  charset_len = strlen(SG(default_charset));
 } else {
  charset = SAPI_DEFAULT_CHARSET;
  charset_len = sizeof(SAPI_DEFAULT_CHARSET) - 1;
 }

 if (*charset && strncasecmp(mimetype, "text/", 5) == 0) {
  char *p;

  *var_41 = var_18 + mimetype_len + sizeof("; charset=") - 1 + charset_len;
  content_type = (char*)emalloc(*var_41 + 1);
  p = content_type + var_18;
  memcpy(p, mimetype, mimetype_len);
  p += mimetype_len;
  memcpy(p, "; charset=", sizeof("; charset=") - 1);
  p += sizeof("; charset=") - 1;
  memcpy(p, charset, charset_len + 1);
 } else {
  *var_41 = var_18 + mimetype_len;
  content_type = (char*)emalloc(*var_41 + 1);
  memcpy(content_type + var_18, mimetype, mimetype_len + 1);
 }
 return content_type;
}


SAPI_API char *fn_18(TSRMLS_D)
{
 uint var_41;

 return get_default_content_type(0, &var_41 TSRMLS_CC);
}


SAPI_API void fn_19(sapi_header_struct *default_header var_56)
{
    uint var_41;

 default_header->header = get_default_content_type(sizeof("Content-type: ")-1, &var_41 TSRMLS_CC);
 default_header->header_len = var_41;
 memcpy(default_header->header, "Content-type: ", sizeof("Content-type: ") - 1);
}

SAPI_API size_t fn_20(char **mimetype, size_t var_41 var_56)
{
 char *charset, *newtype;
 size_t newlen;
 charset = SG(default_charset) ? SG(default_charset) : SAPI_DEFAULT_CHARSET;

 if (*mimetype != NULL) {
  if (*charset && strncmp(*mimetype, "text/", 5) == 0 && strstr(*mimetype, "charset=") == NULL) {
   newlen = var_41 + (sizeof(";charset=")-1) + strlen(charset);
   newtype = emalloc(newlen + 1);
    PHP_STRLCPY(newtype, *mimetype, newlen + 1, var_41);
   strlcat(newtype, ";charset=", newlen + 1);
   strlcat(newtype, charset, newlen + 1);
   efree(*mimetype);
   *mimetype = newtype;
   return newlen;
  }
 }
 return 0;
}

SAPI_API void fn_21(TSRMLS_D)
{
 if (SG(request_info).headers_read == 1)
  return;
 SG(request_info).headers_read = 1;
 zend_llist_init(&SG(sapi_headers).headers, sizeof(sapi_header_struct),
   (void (*)(void *)) sapi_free_header, 0);
 SG(sapi_headers).send_default_content_type = 1;


 SG(sapi_headers).http_status_line = NULL;
 SG(sapi_headers).mimetype = NULL;
 SG(read_post_bytes) = 0;
 SG(request_info).post_data = NULL;
 SG(request_info).raw_post_data = NULL;
 SG(request_info).current_user = NULL;
 SG(request_info).current_user_length = 0;
 SG(request_info).no_headers = 0;
 SG(request_info).post_entry = NULL;
 SG(global_request_time) = 0;





 if (SG(request_info).request_method && !strcmp(SG(request_info).request_method, "HEAD")) {
  SG(request_info).headers_only = 1;
 } else {
  SG(request_info).headers_only = 0;
 }
 if (SG(server_context)) {
  SG(request_info).cookie_data = sapi_module.read_cookies(TSRMLS_C);
  if (sapi_module.activate) {
   sapi_module.activate(TSRMLS_C);
  }
 }
 if (sapi_module.input_filter_init ) {
  sapi_module.input_filter_init(TSRMLS_C);
 }
}





SAPI_API void fn_22(TSRMLS_D)
{
 zend_llist_init(&SG(sapi_headers).headers, sizeof(sapi_header_struct), (void (*)(void *)) sapi_free_header, 0);
 SG(sapi_headers).send_default_content_type = 1;




 SG(sapi_headers).http_status_line = NULL;
 SG(sapi_headers).mimetype = NULL;
 SG(headers_sent) = 0;
 SG(callback_run) = 0;
 SG(callback_func) = NULL;
 SG(read_post_bytes) = 0;
 SG(request_info).post_data = NULL;
 SG(request_info).raw_post_data = NULL;
 SG(request_info).current_user = NULL;
 SG(request_info).current_user_length = 0;
 SG(request_info).no_headers = 0;
 SG(request_info).post_entry = NULL;
 SG(request_info).proto_num = 1000;
 SG(global_request_time) = 0;


 if (SG(request_info).request_method && !strcmp(SG(request_info).request_method, "HEAD")) {
  SG(request_info).headers_only = 1;
 } else {
  SG(request_info).headers_only = 0;
 }
 SG(rfc1867_uploaded_files) = NULL;


 if (SG(server_context)) {
  if (PG(enable_post_data_reading) && SG(request_info).request_method) {
   if (SG(request_info).content_type && !strcmp(SG(request_info).request_method, "POST")) {


    sapi_read_post_data(TSRMLS_C);
   } else {



    SG(request_info).content_type_dup = NULL;
    if (sapi_module.default_post_reader) {
     sapi_module.default_post_reader(TSRMLS_C);
    }
   }
  } else {
   SG(request_info).content_type_dup = NULL;
  }


  SG(request_info).cookie_data = sapi_module.read_cookies(TSRMLS_C);

  if (sapi_module.activate) {
   sapi_module.activate(TSRMLS_C);
  }
 }
 if (sapi_module.input_filter_init) {
  sapi_module.input_filter_init(TSRMLS_C);
 }
}


static void fn_23(TSRMLS_D)
{
 if (SG(sapi_headers).http_status_line) {
  efree(SG(sapi_headers).http_status_line);
  SG(sapi_headers).http_status_line = NULL;
 }
}

SAPI_API void fn_24(TSRMLS_D)
{
 zend_llist_destroy(&SG(sapi_headers).headers);
 if (SG(request_info).post_data) {
  efree(SG(request_info).post_data);
 } else if (SG(server_context)) {
  if(sapi_module.read_post) {

   char dummy[SAPI_POST_BLOCK_SIZE];
   int read_bytes;

   while((read_bytes = sapi_module.read_post(dummy, sizeof(dummy)-1 TSRMLS_CC)) > 0) {
    SG(read_post_bytes) += read_bytes;
   }
  }
 }
 if (SG(request_info).raw_post_data) {
  efree(SG(request_info).raw_post_data);
 }
 if (SG(request_info).auth_user) {
  efree(SG(request_info).auth_user);
 }
 if (SG(request_info).auth_password) {
  efree(SG(request_info).auth_password);
 }
 if (SG(request_info).auth_digest) {
  efree(SG(request_info).auth_digest);
 }
 if (SG(request_info).content_type_dup) {
  efree(SG(request_info).content_type_dup);
 }
 if (SG(request_info).current_user) {
  efree(SG(request_info).current_user);
 }
 if (sapi_module.deactivate) {
  sapi_module.deactivate(TSRMLS_C);
 }
 if (SG(rfc1867_uploaded_files)) {
  destroy_uploaded_files_hash(TSRMLS_C);
 }
 if (SG(sapi_headers).mimetype) {
  efree(SG(sapi_headers).mimetype);
  SG(sapi_headers).mimetype = NULL;
 }
 sapi_send_headers_free(TSRMLS_C);
 SG(sapi_started) = 0;
 SG(headers_sent) = 0;
 SG(callback_run) = 0;
 if (SG(callback_func)) {
  zval_ptr_dtor(&SG(callback_func));
 }
 SG(request_info).headers_read = 0;
 SG(global_request_time) = 0;
}


SAPI_API void fn_25(TSRMLS_D)
{
 SG(server_context) = NULL;
 SG(request_info).request_method = NULL;
 SG(request_info).auth_digest = SG(request_info).auth_user = SG(request_info).auth_password = NULL;
 SG(request_info).content_type_dup = NULL;
}


static int fn_39(const char *header_line)
{
 int var_28 = 200;
 const char *ptr;

 for (ptr = header_line; *ptr; ptr++) {
  if (*ptr == ' ' && *(ptr + 1) != ' ') {
   var_28 = atoi(ptr + 1);
   break;
  }
 }

 return var_28;
}


static void fn_28(int ncode var_56)
{


 if (SG(sapi_headers).http_response_code == ncode) {
  return;
 }

 if (SG(sapi_headers).http_status_line) {
  efree(SG(sapi_headers).http_status_line);
  SG(sapi_headers).http_status_line = NULL;
 }
 SG(sapi_headers).http_response_code = ncode;
}





static void fn_29(zend_llist *l, char *name, uint var_41) {
 sapi_header_struct *header;
 zend_llist_element *next;
 zend_llist_element *current=l->head;

 while (current) {
  header = (sapi_header_struct *)(current->data);
  next = current->next;
  if (header->header_len > var_41 && header->header[var_41] == ':'
    && !strncasecmp(header->header, name, var_41)) {
   if (current->prev) {
    current->prev->next = next;
   } else {
    l->head = next;
   }
   if (next) {
    next->prev = current->prev;
   } else {
    l->tail = current->prev;
   }
   sapi_free_header(header);
   efree(current);
   --l->count;
  }
  current = next;
 }
}

SAPI_API int fn_30(char *header_line, uint var_39, zend_bool var_34, zend_bool replace var_56)
{
 sapi_header_line var_34 = {0};
 int r;

 var_34.line = header_line;
 var_34.line_len = var_39;

 r = sapi_header_op(replace ? SAPI_HEADER_REPLACE : SAPI_HEADER_ADD,
   &var_34 TSRMLS_CC);

 if (!var_34)
  efree(header_line);

 return r;
}

static void fn_34(sapi_header_op_enum var_39, sapi_header_struct *sapi_header var_56)
{
 if (!sapi_module.header_handler ||
  (SAPI_HEADER_ADD & sapi_module.header_handler(sapi_header, var_39, &SG(sapi_headers) TSRMLS_CC))) {
  if (var_39 == SAPI_HEADER_REPLACE) {
   char *colon_offset = strchr(sapi_header->header, ':');

   if (colon_offset) {
    char var_37 = *colon_offset;

    *colon_offset = 0;
          sapi_remove_header(&SG(sapi_headers).headers, sapi_header->header, strlen(sapi_header->header));
    *colon_offset = var_37;
   }
  }
  zend_llist_add_element(&SG(sapi_headers).headers, (void *) sapi_header);
 } else {
  sapi_free_header(sapi_header);
 }
}

SAPI_API int fn_37(sapi_header_op_enum var_39, void *var_48 var_56)
{
 sapi_header_struct sapi_header;
 char *colon_offset;
 char *header_line;
 uint var_39;
 int http_response_code;

 if (SG(headers_sent) && !SG(request_info).no_headers) {
  const char *output_start_filename = php_output_get_start_filename(TSRMLS_C);
  int var_39 = php_output_get_start_lineno(TSRMLS_C);

  if (output_start_filename) {
   sapi_module.sapi_error(E_WARNING, "Cannot modify header information - headers already sent by (output started at %s:%d)",
    output_start_filename, var_39);
  } else {
   sapi_module.sapi_error(E_WARNING, "Cannot modify header information - headers already sent");
  }
  return var_56;
 }

 switch (var_39) {
  case SAPI_HEADER_SET_STATUS:
   sapi_update_response_code((int)(zend_intptr_t) var_48 TSRMLS_CC);
   return SUCCESS;

  case SAPI_HEADER_ADD:
  case SAPI_HEADER_REPLACE:
  case SAPI_HEADER_DELETE: {
    sapi_header_line *p = var_48;

    if (!p->line || !p->line_len) {
     return var_56;
    }
    header_line = p->line;
    var_39 = p->line_len;
    http_response_code = p->response_code;
    break;
   }

  case SAPI_HEADER_DELETE_ALL:
   if (sapi_module.header_handler) {
    sapi_module.header_handler(&sapi_header, var_39, &SG(sapi_headers) TSRMLS_CC);
   }
   zend_llist_clean(&SG(sapi_headers).headers);
   return SUCCESS;

  default:
   return var_56;
 }

 header_line = estrndup(header_line, var_39);


 if (var_39 && isspace(header_line[var_39-1])) {
  do {
   var_39--;
  } while(var_39 && isspace(header_line[var_39-1]));
  header_line[var_39]='\0';
 }

 if (var_39 == SAPI_HEADER_DELETE) {
  if (strchr(header_line, ':')) {
   efree(header_line);
   sapi_module.sapi_error(E_WARNING, "Header to delete may not contain colon.");
   return var_56;
  }
  if (sapi_module.header_handler) {
   sapi_header.header = header_line;
   sapi_header.header_len = var_39;
   sapi_module.header_handler(&sapi_header, var_39, &SG(sapi_headers) TSRMLS_CC);
  }
  sapi_remove_header(&SG(sapi_headers).headers, header_line, var_39);
  efree(header_line);
  return SUCCESS;
 } else {

  int i;
  for (i = 0; i < var_39; i++) {

   if (header_line[i] == '\n' || header_line[i] == '\r') {
    efree(header_line);
    sapi_module.sapi_error(E_WARNING, "Header may not contain "
      "more than a single header, new line detected");
    return var_56;
   }
   if (header_line[i] == '\0') {
    efree(header_line);
    sapi_module.sapi_error(E_WARNING, "Header may not contain NUL bytes");
    return var_56;
   }
  }
 }

 sapi_header.header = header_line;
 sapi_header.header_len = var_39;


 if (var_39>=5
  && !strncasecmp(header_line, "HTTP/", 5)) {

  sapi_update_response_code(fn_39(header_line) TSRMLS_CC);

  if (SG(sapi_headers).http_status_line) {
   efree(SG(sapi_headers).http_status_line);
  }
  SG(sapi_headers).http_status_line = header_line;
  return SUCCESS;
 } else {
  colon_offset = strchr(header_line, ':');
  if (colon_offset) {
   *colon_offset = 0;
   if (!strcasecmp(header_line, "Content-Type")) {
    char *ptr = colon_offset+1, *mimetype = NULL, *newheader;
    size_t var_41 = var_39 - (ptr - header_line), newlen;
    while (*ptr == ' ') {
     ptr++;
     var_41--;
    }


    if (!strncmp(ptr, "image/", sizeof("image/")-1)) {
     zend_alter_ini_entry("zlib.output_compression", sizeof("zlib.output_compression"), "0", sizeof("0") - 1, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);
    }

    mimetype = estrdup(ptr);
    newlen = sapi_apply_default_charset(&mimetype, var_41 TSRMLS_CC);
    if (!SG(sapi_headers).mimetype){
     SG(sapi_headers).mimetype = estrdup(mimetype);
    }

    if (newlen != 0) {
     newlen += sizeof("Content-type: ");
     newheader = emalloc(newlen);
     PHP_STRLCPY(newheader, "Content-type: ", newlen, sizeof("Content-type: ")-1);
     strlcat(newheader, mimetype, newlen);
     sapi_header.header = newheader;
     sapi_header.header_len = newlen - 1;
     efree(header_line);
    }
    efree(mimetype);
    SG(sapi_headers).send_default_content_type = 0;
   } else if (!strcasecmp(header_line, "Content-Length")) {





    zend_alter_ini_entry("zlib.output_compression", sizeof("zlib.output_compression"),
     "0", sizeof("0") - 1, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);
   } else if (!strcasecmp(header_line, "Location")) {
    if ((SG(sapi_headers).http_response_code < 300 ||
     SG(sapi_headers).http_response_code > 399) &&
     SG(sapi_headers).http_response_code != 201) {

     if (http_response_code) {
      sapi_update_response_code(http_response_code TSRMLS_CC);
     } else if (SG(request_info).proto_num > 1000 &&
        SG(request_info).request_method &&
        strcmp(SG(request_info).request_method, "HEAD") &&
        strcmp(SG(request_info).request_method, "GET")) {
      sapi_update_response_code(303 TSRMLS_CC);
     } else {
      sapi_update_response_code(302 TSRMLS_CC);
     }
    }
   } else if (!strcasecmp(header_line, "WWW-Authenticate")) {
    sapi_update_response_code(401 TSRMLS_CC);
   }
   if (sapi_header.header==header_line) {
    *colon_offset = ':';
   }
  }
 }
 if (http_response_code) {
  sapi_update_response_code(http_response_code TSRMLS_CC);
 }
 sapi_header_add_op(var_39, &sapi_header TSRMLS_CC);
 return SUCCESS;
}


SAPI_API int fn_39(TSRMLS_D)
{
 int retval;
 int var_41 = var_56;

 if (SG(headers_sent) || SG(request_info).no_headers || SG(callback_run)) {
  return SUCCESS;
 }




 if (SG(sapi_headers).send_default_content_type && sapi_module.send_headers) {
  sapi_header_struct default_header;
     uint var_41;

  SG(sapi_headers).mimetype = get_default_content_type(0, &var_41 TSRMLS_CC);
  default_header.header_len = sizeof("Content-type: ") - 1 + var_41;
  default_header.header = emalloc(default_header.header_len + 1);
  memcpy(default_header.header, "Content-type: ", sizeof("Content-type: ") - 1);
  memcpy(default_header.header + sizeof("Content-type: ") - 1, SG(sapi_headers).mimetype, var_41 + 1);
  sapi_header_add_op(SAPI_HEADER_ADD, &default_header TSRMLS_CC);
  SG(sapi_headers).send_default_content_type = 0;
 }

 if (SG(callback_func) && !SG(callback_run)) {
  SG(callback_run) = 1;
  sapi_run_header_callback(TSRMLS_C);
 }

 SG(headers_sent) = 1;

 if (sapi_module.send_headers) {
  retval = sapi_module.send_headers(&SG(sapi_headers) TSRMLS_CC);
 } else {
  retval = SAPI_HEADER_DO_SEND;
 }

 switch (retval) {
  case SAPI_HEADER_SENT_SUCCESSFULLY:
   var_41 = SUCCESS;
   break;
  case SAPI_HEADER_DO_SEND: {
    sapi_header_struct http_status_line;
    char buf[255];

    if (SG(sapi_headers).http_status_line) {
     http_status_line.header = SG(sapi_headers).http_status_line;
     http_status_line.header_len = strlen(SG(sapi_headers).http_status_line);
    } else {
     http_status_line.header = buf;
     http_status_line.header_len = slprintf(buf, sizeof(buf), "HTTP/1.0 %d X", SG(sapi_headers).http_response_code);
    }
    sapi_module.send_header(&http_status_line, SG(server_context) TSRMLS_CC);
   }
   zend_llist_apply_with_argument(&SG(sapi_headers).headers, (llist_apply_with_arg_func_t) sapi_module.send_header, SG(server_context) TSRMLS_CC);
   if(SG(sapi_headers).send_default_content_type) {
    sapi_header_struct default_header;

    sapi_get_default_content_type_header(&default_header TSRMLS_CC);
    sapi_module.send_header(&default_header, SG(server_context) TSRMLS_CC);
    sapi_free_header(&default_header);
   }
   sapi_module.send_header(NULL, SG(server_context) TSRMLS_CC);
   var_41 = SUCCESS;
   break;
  case SAPI_HEADER_SEND_FAILED:
   SG(headers_sent) = 0;
   var_41 = var_56;
   break;
 }

 sapi_send_headers_free(TSRMLS_C);

 return var_41;
}


SAPI_API int fn_41(sapi_post_entry *var_43 var_56)
{
 sapi_post_entry *p=var_43;

 while (p->content_type) {
  if (sapi_register_post_entry(p TSRMLS_CC) == var_56) {
   return var_56;
  }
  p++;
 }
 return SUCCESS;
}


SAPI_API int fn_43(sapi_post_entry *post_entry var_56)
{
 if (SG(sapi_started) && EG(in_execution)) {
  return var_56;
 }
 return zend_hash_add(&SG(known_post_content_types),
   post_entry->content_type, post_entry->content_type_len+1,
   (void *) post_entry, sizeof(sapi_post_entry), NULL);
}

SAPI_API void fn_44(sapi_post_entry *post_entry var_56)
{
 if (SG(sapi_started) && EG(in_execution)) {
  return;
 }
 zend_hash_del(&SG(known_post_content_types), post_entry->content_type,
   post_entry->content_type_len+1);
}


SAPI_API int fn_45(void (*default_post_reader)(TSRMLS_D) var_56)
{
 if (SG(sapi_started) && EG(in_execution)) {
  return var_56;
 }
 sapi_module.default_post_reader = default_post_reader;
 return SUCCESS;
}


SAPI_API int fn_46(void (*treat_data)(int var_48, char *str, zval *destArray var_56) var_56)
{
 if (SG(sapi_started) && EG(in_execution)) {
  return var_56;
 }
 sapi_module.treat_data = treat_data;
 return SUCCESS;
}

SAPI_API int fn_47(unsigned int (*input_filter)(int var_48, char *var, char **val, unsigned int var_48, unsigned int *new_val_len var_56), unsigned int (*input_filter_init)(TSRMLS_D) var_56)
{
 if (SG(sapi_started) && EG(in_execution)) {
  return var_56;
 }
 sapi_module.input_filter = input_filter;
 sapi_module.input_filter_init = input_filter_init;
 return SUCCESS;
}

SAPI_API int fn_49(TSRMLS_D)
{
 if (sapi_module.flush) {
  sapi_module.flush(SG(server_context));
  return SUCCESS;
 } else {
  return var_56;
 }
}

SAPI_API struct stat *fn_50(TSRMLS_D)
{
 if (sapi_module.get_stat) {
  return sapi_module.get_stat(TSRMLS_C);
 } else {
  if (!SG(request_info).path_translated || (VCWD_STAT(SG(request_info).path_translated, &SG(global_stat)) == -1)) {
   return NULL;
  }
  return &SG(global_stat);
 }
}

SAPI_API char *fn_51(char *name, size_t name_len var_56)
{
 if (sapi_module.getenv) {
  char *value, *tmp = sapi_module.getenv(name, name_len TSRMLS_CC);
  if (tmp) {
   value = estrdup(tmp);
  } else {
   return NULL;
  }
  if (sapi_module.input_filter) {
   sapi_module.input_filter(PARSE_STRING, name, &value, strlen(value), NULL TSRMLS_CC);
  }
  return value;
 }
 return NULL;
}

SAPI_API int fn_52(int *fd var_56)
{
 if (sapi_module.get_fd) {
  return sapi_module.get_fd(fd TSRMLS_CC);
 } else {
  return var_56;
 }
}

SAPI_API int fn_53(TSRMLS_D)
{
 if (sapi_module.force_http_10) {
  return sapi_module.force_http_10(TSRMLS_C);
 } else {
  return var_56;
 }
}


SAPI_API int fn_54(uid_t *obj var_56)
{
 if (sapi_module.get_target_uid) {
  return sapi_module.get_target_uid(obj TSRMLS_CC);
 } else {
  return var_56;
 }
}

SAPI_API int fn_55(gid_t *obj var_56)
{
 if (sapi_module.get_target_gid) {
  return sapi_module.get_target_gid(obj TSRMLS_CC);
 } else {
  return var_56;
 }
}

SAPI_API double fn_56(TSRMLS_D)
{
 if(SG(global_request_time)) return SG(global_request_time);

 if (sapi_module.get_request_time && SG(server_context)) {
  SG(global_request_time) = sapi_module.get_request_time(TSRMLS_C);
 } else {
  struct struct_57 var_59 = {0};
  if (!gettimeofday(&var_59, NULL)) {
   SG(global_request_time) = (double)(var_59.tv_sec + var_59.tv_usec / 1000000.00);
  } else {
   SG(global_request_time) = (double)time(0);
  }
 }
 return SG(global_request_time);
}

SAPI_API void fn_59(TSRMLS_D) {
 if (sapi_module.terminate_process) {
  sapi_module.terminate_process(TSRMLS_C);
 }
}
