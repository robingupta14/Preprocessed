



from MoinMoin import log
var_0 = MoinMoin.log.getLogger(__name__)

from MoinMoin import config, error, util, wikiutil, web
from MoinMoin import datastruct
from MoinMoin.auth import MoinAuth
from MoinMoin.events import PageChangedEvent, PageRenamedEvent
from MoinMoin.events import PageDeletedEvent, PageCopiedEvent
from MoinMoin.events import PageRevertedEvent, FileAttachedEvent
from MoinMoin.packages import packLine
from MoinMoin.security import AccessControlList

var_1 = None
var_2 = None
var_3 = {}


def function_0(var_5):
    
    try:
        var_7 = __import__(var_5, globals(), {})
        var_8 = os.var_65.getmtime(var_7.__file__)
    except ImportError:
        raise
    except IndentationError, err:
        var_0.exceptionYour source code / config file is not correctly indented!
        var_14 =  % {
    err: err,
}
        raise MoinMoin.error.ConfigurationError(var_14)
    except Exception, err:
        var_0.exceptionAn exception happened.
        var_14 = %var_9: %var_9 % (err.__class__.__name__, str(err))
        raise MoinMoin.error.ConfigurationError(var_14)
    return var_7, var_8


def function_1():
    
    global var_1, var_2
    if var_1 is None:
        try:
            var_10, var_2 = var_11
        except ImportError, err:
            if var_10 in str(err):
                
                var_0.debugcould not import var_10, mapping all URLs to wikiconfig
                var_2 = 0
                var_1 = [(wikiconfig, re.compile.), ] 
            else:
                
                raise
        else:
            var_0.var_74(using farm config: %var_9 % os.var_65.var_70(var_10.__file__))
            try:
                var_12 = []
                for var_5, var_13 in var_10.wikis:
                    var_12.append((var_5, re.compile(var_13)))
                var_1 = var_12
            except AttributeError:
                var_0.errorrequired 'wikis' list missing in var_10
                var_14 = 
                raise MoinMoin.error.ConfigurationError(var_14)
    return var_1


def function_2(var_5):
    
    global var_2
    try:
        var_7, var_8 = _importConfigModule(var_5)
        var_15 = getattr(var_7, Config)
        var_16 = var_15(var_5)
        var_16.var_21 = max(var_8, var_2)
        var_0.var_74(using wiki config: %var_9 % os.var_65.var_70(var_7.__file__))
    except ImportError, err:
        var_0.exceptionCould not import.
        var_14 =  % {
    err: err,
}
        raise MoinMoin.error.ConfigurationError(var_14)
    except AttributeError, err:
        var_0.exceptionAn exception occurred.
        var_14 =  % {
    var_5: var_5,
    err: err,
}
        raise MoinMoin.error.ConfigurationError(var_14)

    return var_16


def function_3(var_17):
    
    for var_5, var_13 in _url_re_list():
        var_18 = var_13.var_18(var_17)
        if var_18:
            return var_5
    raise MoinMoin.error.NoConfigMatchedError


def function_4(var_17):
    
    var_19 = _getConfigName(var_17)
    try:
        var_16 = var_3[var_19]
    except KeyError:
        var_16 = _makeConfig(var_19)
        var_16 = var_3.setdefault(var_19, var_16)
    return var_16




def function_5(var_20):
    return var_20


class class_0:
    
    pass


class class_1(object):
    

    
    
    var_21 = None
    var_22 = None
    var_12 = None
    var_23 = None
    var_24 = None
    var_25 = None
    var_26 = None
    var_27 = None
    var_28 = None
    var_29 = None
    var_30 = None
    var_31 = None
    var_32 = None
    
    var_33 = None

    def function_6(var_34, var_22):
        
        var_34.var_22 = var_22
        var_34.var_12 = CacheClass()

        from MoinMoin.Page import ItemCache
        var_34.var_12.meta = var_36
        var_34.var_12.pagelists = var_37

        if var_34.config_check_enabled:
            var_34._config_check()

        
        var_34.var_32 = os.var_65.var_70(os.var_65.join(os.var_65.dirname(__file__), os.var_65.pardir))
        var_38 = os.var_65.normpath(var_34.var_38)
        var_34.var_38 = var_38
        for dirname in ('user', 'cache', 'plugin'):
            var_5 = dirname + _dir
            if not getattr(var_34, var_5, None):
                setattr(var_34, var_5, os.var_65.var_70(os.var_65.join(var_38, dirname)))
        
        for dirname in ('session',):
            var_5 = dirname + _dir
            if not getattr(var_34, var_5, None):
                setattr(var_34, var_5, os.var_65.var_70(os.var_65.join(var_34.cache_dir, __%s__ % dirname)))

        
        var_34._decode()

        
        var_34.var_12.page_category_regex = re.compile(var_34.page_category_regex, re.UNICODE)
        var_34.var_12.page_dict_regex = re.compile(var_34.page_dict_regex, re.UNICODE)
        var_34.var_12.page_group_regex = re.compile(var_34.page_group_regex, re.UNICODE)
        var_34.var_12.page_template_regex = re.compile(var_34.page_template_regex, re.UNICODE)

        
        var_34.var_12.page_category_regexact = re.compile(^%var_9$ % var_34.page_category_regex, re.UNICODE)
        var_34.var_12.page_dict_regexact = re.compile(^%var_9$ % var_34.page_dict_regex, re.UNICODE)
        var_34.var_12.page_group_regexact = re.compile(^%var_9$ % var_34.page_group_regex, re.UNICODE)
        var_34.var_12.page_template_regexact = re.compile(^%var_9$ % var_34.page_template_regex, re.UNICODE)

        var_34.var_12.ua_spiders = var_34.ua_spiders and re.compile(var_34.ua_spiders, re.IGNORECASE)

        var_34._check_directories()

        if not isinstance(var_34.superuser, list):
            var_14 = 
            raise MoinMoin.error.ConfigurationError(var_14)

        if not isinstance(var_34.actions_superuser, list):
            var_14 = 
            raise MoinMoin.error.ConfigurationError(var_14)

        
        
        
        if not (isinstance(var_34.cookie_lifetime, tuple) and len(var_34.cookie_lifetime) == 2):
            var_0.error(wiki configuration has an invalid setting:  +
                          cookie_lifetime = %r % (var_34.cookie_lifetime, ))
            try:
                var_39 = var_34.anonymous_session_lifetime
                var_0.warning(wiki configuration has an unsupported setting:  +
                                anonymous_session_lifetime = %r -  % var_39 +
                                please remove it.)
                if var_39 is None:
                    var_39 = 0
                var_39 = float(var_39)
            except:
                
                var_39 = 0
            try:
                var_40 = int(var_34.cookie_lifetime)
            except:
                
                var_40 = 12
            var_34.cookie_lifetime = (var_39, var_40)
            var_0.warning(using cookie_lifetime = %r -  % (var_34.cookie_lifetime, ) +
                            please fix your wiki configuration.)

        var_34._loadPluginModule()

        
        var_34._fillDicts()

        
        var_34.language_default = var_34.language_default.lower()

        
        if var_34.logo_string is None:
            var_34.logo_string = var_34.sitename

        

        
        
        
        
        if var_34.chart_options:
            try:
            except ImportError:
                var_34.chart_options = None

        
        var_34.var_25 = ['setuid']
        var_34.var_27 = []
        var_41 = []
        for auth in var_34.auth:
            if not auth.var_5:
                raise MoinMoin.error.ConfigurationErrorAuth methods must have a var_5.
            if auth.var_5 in var_41:
                raise MoinMoin.error.ConfigurationErrorAuth method names must be unique.
            var_41.append(auth.var_5)
            if auth.logout_possible and auth.var_5:
                var_34.var_25.append(auth.var_5)
            for input in auth.login_inputs:
                if not input in var_34.var_27:
                    var_34.var_27.append(input)
        var_34.var_26 = len(var_34.var_27) > 0
        var_34.auth_methods = var_41

        
        var_34.var_28 = {}

        
        
        var_34.navi_bar = [elem % var_34 for elem in var_34.navi_bar]

        
        if var_34.xapian_search:
            try:
            except ImportError, err:
                var_34.xapian_search = False
                var_0.error(xapian_search was auto-disabled because python-xapian is not installed [%var_9]. % str(err))

        
        var_34.var_31 = []

        
        var_34.var_23 = (var_34.mail_smarthost is not None or var_34.mail_sendmail is not None) and var_34.mail_from
        var_34.var_23 = var_34.var_23 and True or False

        
        var_34.var_24 = var_34.notification_bot_uri is not None

        
        if var_34.var_24:
            from xmlrpclib import Server
            var_34.notification_server = Server(var_34.notification_bot_uri, )

        
        var_34.var_29 = var_34.var_30 = var_34.var_48 = None

        var_34.var_12.acl_rights_before = AccessControlList(var_34, [var_34.acl_rights_before])
        var_34.var_12.acl_rights_default = AccessControlList(var_34, [var_34.acl_rights_default])
        var_34.var_12.acl_rights_after = AccessControlList(var_34, [var_34.acl_rights_after])

        var_42 = var_34.url_prefix_action
        if var_42 is not None and var_42.endswith/: 
            var_34.url_prefix_action = var_42[:-1]

        if var_34.url_prefix_local is None:
            var_34.url_prefix_local = var_34.url_prefix_static

        if var_34.url_prefix_fckeditor is None:
            var_34.url_prefix_fckeditor = var_34.url_prefix_local + /applets/FCKeditor

        if var_34.var_45 is None:  
            var_34.var_45 = var_34.calc_secrets()

        var_43 = ['action/cache', 'wikiutil/tickets', 'xmlrpc/ProcessMail', 'xmlrpc/RemoteScript']
        if var_34.var_24:
            var_43.appendjabberbot
        if var_34.textchas:
            var_43.appendsecurity/textcha

        var_44 = 10
        if isinstance(var_34.var_45, str):
            if len(var_34.var_45) < var_44:
                raise MoinMoin.error.ConfigurationError(The var_45 = '...' wiki config setting is a way too short string (minimum length is %d chars)! % (
                    var_44))
            
            var_45 = {}
            for var_75 in var_43:
                var_45[var_75] = var_34.var_45
            var_34.var_45 = var_45

        
        for secret_key_name in var_43:
            try:
                var_46 = var_34.var_45[secret_key_name]
                if len(var_46) < var_44:
                    raise ValueError
            except (KeyError, ValueError):
                raise MoinMoin.error.ConfigurationError(You must set a (at least %d chars long) var_46 string for var_45['%s']! % (
                    var_44, secret_key_name))

        if var_34.password_scheme not in MoinMoin.config.password_schemes_configurable:
            raise MoinMoin.error.ConfigurationError(not supported: password_scheme = %r % var_34.password_scheme)

        if var_34.passlib_support:
            try:
                from passlib.context import CryptContext
            except ImportError, err:
                raise MoinMoin.error.ConfigurationError(Wiki is configured to use passlib, but importing passlib failed [%var_9]! % str(err))
            try:
                var_34.var_12.pwd_context = CryptContext(**var_34.passlib_crypt_context)
            except (ValueError, KeyError, TypeError, UserWarning), err:
                
                
                
                raise MoinMoin.error.ConfigurationError(passlib_crypt_context configuration is invalid [%var_9]. % str(err))
        elif var_34.password_scheme == {PASSLIB}:
            raise MoinMoin.error.ConfigurationErrorpasslib_support is switched off, thus you can't use password_scheme = '{PASSLIB}'.

    def function_7(var_34):
        
        var_47 = ['data_dir', 'data_underlay_dir', 'language_default', 'mail_smarthost', 'mail_from', 'page_front_page', 'theme_default', 'sitename', 'logo_string', 'interwikiname', 'user_homewiki', 'acl_rights_before']
        var_46 = 
        for varname in var_47:
            var = getattr(var_34, varname, None)
            if isinstance(var, (str, unicode)):
                var_46 += repr(var)
        return var_46

    var_48 = None
    def function_8(var_34):
        
        if var_34.var_48 is None:
            var_34.var_48 = wikiMoinMoin.util.MetaDict(os.var_65.join(var_34.var_38, meta), var_34.cache_dir)
        return var_34.var_48
    var_49 = property(load_meta_dict)

    
    def function_9(var_50):
        def function_10(var_34):
            if getattr(var_34, var_50, None) is None:
                var_34.load_IWID()
            return getattr(var_34, var_50)
        return property(getter)
    var_51 = var_52
    var_53 = var_54

    
    var_55 = None
    def function_11():
        def function_10(var_34):
            if var_34.var_55 is None:
                var_34.var_55 = MoinMoin.events.get_handlers(var_34)
            return var_34.var_55

        def function_12(var_34, var_56):
            var_34.var_55 = var_56

        return property(getter, setter)
    var_57 = make_event_handlers_prop()

    def function_13(var_34):
        
        try:
            var_51 = var_34.var_49[IWID]
        except KeyError:
            var_51 = MoinMoin.util.random_string16.encodehex + - + str(int(time.time()))
            var_34.var_49[IWID] = var_51
            var_34.var_49.sync()

        var_34.var_29 = var_51
        if var_34.interwikiname is not None:
            var_34.var_30 = packLine([var_51, var_34.interwikiname])
        else:
            var_34.var_30 = packLine([var_51])

    def function_14(var_34):
        
        var_58 = ["%s" % var_5 for var_5 in dir(var_34)
                  if not var_5.startswith_ and
                  var_5 not in DefaultConfig.__dict__ and
                  not isinstance(getattr(var_34, var_5), (type(sys), type(DefaultConfig)))]
        if var_58:
            var_14 =  % <built-in method join of str object at 0x7f0736130e30>(var_58)
            raise MoinMoin.error.ConfigurationError(var_14)

    def function_15(var_34):
        
        var_59 = utf-8
        var_60 = var_61

        var_62 = ('sitename', 'interwikiname', 'user_homewiki', 'logo_string', 'navi_bar', 'page_front_page', 'page_category_regex', 'page_dict_regex', 'page_group_regex', 'page_template_regex', 'page_license_page', 'page_local_spelling_words', 'acl_rights_default', 'acl_rights_before', 'acl_rights_after', 'mail_from', 'quicklinks_default', 'subscribed_pages_default')

        for var_5 in var_62:
            var_50 = getattr(var_34, var_5, None)
            if var_50:
                
                if isinstance(var_50, str):
                    try:
                        setattr(var_34, var_5, unicode(var_50, var_59))
                    except UnicodeError:
                        raise MoinMoin.error.ConfigurationError(var_60 %
                                                       {var_5: var_5})
                
                elif isinstance(var_50, list):
                    for i in xrange(len(var_50)):
                        var_63 = var_50[i]
                        if isinstance(var_63, str):
                            try:
                                var_50[i] = unicode(var_63, var_59)
                            except UnicodeError:
                                raise MoinMoin.error.ConfigurationError(var_60 %
                                                               {var_5: var_5})

    def function_16(var_34):
        
        var_64 = os.F_OK | os.R_OK | os.W_OK | os.X_OK
        for var_50 in ('data_dir', 'data_underlay_dir'):
            var_65 = getattr(var_34, var_50)

            
            if var_50 == data_underlay_dir and not var_65:
                continue

            var_66 = os.var_65.join(var_65, pages)
            if not (os.var_65.isdir(var_66) and os.access(var_66, var_64)):
                var_14 =  % {var_50: var_50, var_65: var_65, }
                raise MoinMoin.error.ConfigurationError(var_14)

    def function_17(var_34):
        

        var_67 = [var_34.plugin_dir] + var_34.var_67
        var_34._plugin_modules = []

        try:
            
            imp.acquire_lock()
            try:
                for pdir in var_67:
                    var_68 = p_%var_9 % hashlib.new(sha1, pdir).hexdigest()
                    var_69 = %var_9.%var_9 % (var_34.var_22, var_68)
                    
                    if not var_69 in sys.modules:
                        
                        var_70 = os.var_65.var_70(pdir)
                        var_71, var_72 = os.var_65.split(var_70)
                        var_73, var_65, var_74 = imp.find_module(var_72, [var_71])
                        try:
                            
                            var_7 = imp.load_module(var_69, var_73, var_65, var_74)
                            setattr(sys.modules[var_34.var_22], var_68, var_7)
                        finally:
                            
                            if var_73:
                                var_73.close()
                    if var_69 not in var_34._plugin_modules:
                        var_34._plugin_modules.append(var_69)
            finally:
                imp.release_lock()
        except ImportError, err:
            var_14 =  % {
    var_65: pdir,
    err: str(err),
}
            raise MoinMoin.error.ConfigurationError(var_14)

    def function_18(var_34):
        
        
        for var_75, var_76 in DefaultConfig.user_checkbox_defaults.items():
            if var_75 not in var_34.user_checkbox_defaults:
                var_34.user_checkbox_defaults[var_75] = var_76

    def function_19(var_34, var_63):
        
        return getattr(var_34, var_63)


class class_2(ConfigFunctionality):
    
    
    
    
    

var_77 = <function <lambda> at 0x7f07361249a0>


def _default_password_checker(var_16, request, username, password,
                              min_length=6, min_different=4):
    
    _ = request.getText
    
    if len(password) < min_length:
        return _Password is too short.
    if len(set(password)) < min_different:
        return _Password has not enough different characters.

    var_78 = username.lower()
    var_79 = password.lower()
    if username in password or password in username or \
       var_78 in var_79 or var_79 in var_78:
        return _Password is too easy (password contains var_5 or var_5 contains password).

    var_80 = (ur"`1234567890-=qwertyuiop[]\asdfghjkl;'zxcvbnm,./", 
                 ur"^1234567890ߴqwertzuiop�+asdfghjkl��
                ) 
    for kbd in var_80:
        var_81 = kbd[::-1]
        if password in kbd or password in var_81 or \
           var_79 in kbd or var_79 in var_81:
            return _Password is too easy (keyboard sequence).
    return None


class DefaultExpression(object):
    def function_6(var_34, var_82):
        var_34.var_20 = var_82
        var_34.var_76 = eval(var_82)







options_no_group_name = {
  
  attachment_extension: ('Mapping of attachment extensions to actions', None, (('extensions_mapping', {'.tdraw': {'modify': 'twikidraw'}, '.adraw': {'modify': 'anywikidraw'}}, 'file extension -> do -> action'),)),
  
  datastruct: ('Datastruct settings', None, (('dicts', <function <lambda> at 0x7f07361245e0>, 'function f(cfg, request) that returns a backend which is used to access dicts definitions.'), ('groups', <function <lambda> at 0x7f0736124400>, 'function f(cfg, request) that returns a backend which is used to access groups definitions.'))),
  
  session: (Session settings, Session-related settings, see HelpOnSessions., (
    (session_service, DefaultExpressionMoinMoin.web.session.FileSessionService(),
     The session service.),
    ('cookie_name', None, 'The variable part of the session cookie name. (None = determine from URL, siteidmagic = use siteid, any other string = use that)'),
    ('cookie_secure', None, 'Use secure cookie. (None = auto-enable secure cookie for https, True = ever use secure cookie, False = never use secure cookie).'),
    ('cookie_httponly', False, 'Use a httponly cookie that can only be used by the server, not by clientside scripts.'),
    ('cookie_domain', None, 'Domain used in the session cookie. (None = do not specify domain).'),
    ('cookie_path', None, 'Path used in the session cookie (None = auto-detect). Please only set if you know exactly what you are doing.'),
    ('cookie_lifetime', (0, 12), 'Session lifetime [h] of (anonymous, logged-in) users (see HelpOnSessions for details).'),
  )),
  
  auth: (Authentication / Authorization / Security settings, None, (
    ('superuser', [], 'List of trusted user names with wiki system administration super powers (not to be confused with ACL admin rights!). Used for e.g. software installation, language installation via SystemPagesSetup and more. See also HelpOnSuperUser.'),
    (auth, DefaultExpression[MoinAuth()],
     list of auth objects, to be called in this order (see HelpOnAuthentication)),
    ('auth_methods_trusted', ['http', 'given', 'xmlrpc_applytoken'], 'authentication methods for which users should be included in the special "Trusted" ACL group.'),
    ('secrets', None),
    ('DesktopEdition', False, "if True, give all local users special powers - ''only use this for a local desktop wiki!''"),
    ('SecurityPolicy', None, 'Class object hook for implementing security restrictions or relaxations'),
    ('actions_superuser', ['newaccount'], 'Restrict actions to superuser only (list of strings)'),
    ('actions_excluded', ['xmlrpc', 'MyPages', 'CopyPage'], 'Exclude unwanted actions (list of strings)'),

    ('allow_xslt', False, 'if True, enables XSLT processing via 4Suite (Note that this is DANGEROUS. It enables anyone who can edit the wiki to get  and to insert  into your wiki pages, which is why this setting defaults to `False` (XSLT disabled). Do not set it to other values, except if you know what you do and if you have very trusted editors only).'),

    (password_checker, DefaultExpression_default_password_checker,
     checks whether a password is acceptable (default check is length >= 6, at least 4 different chars, no keyboard sequence, not username used somehow (you can switch this off by using `None`)),

    ('password_scheme', '{PASSLIB}', 'Either "{PASSLIB}" (default) to use passlib for creating and upgrading password hashes (see also passlib_crypt_context for passlib configuration), or "{SSHA}" (or any other of the builtin password schemes) to not use passlib (not recommended).'),

    ('passlib_support', True, 'If True (default), import passlib and support password hashes offered by it.'),

    (passlib_crypt_context, dict(
        
        
        
        
        
        
        
        schemes=['sha512_crypt'],
        
        
        
        
        
        
        
        
        
        
    ),
    passlib CryptContext arguments, see passlib docs),

    ('recovery_token_lifetime', 12, 'how long the password recovery token is valid [h]'),
  )),
  
  spam_leech_dos: ('Anti-Spam/Leech/DOS', 'These settings help limiting ressource usage and avoiding abuse.', (('hosts_deny', [], 'List of denied IPs; if an IP ends with a dot, it denies a whole subnet (class A, B or C)'), ('surge_action_limits', {'all': (30, 30), 'default': (30, 60), 'show': (30, 60), 'recall': (10, 120), 'raw': (20, 40), 'diff': (30, 60), 'fullsearch': (10, 120), 'edit': (30, 300), 'rss_rc': (1, 60), 'AttachFile': (300, 30), 'cache': (600, 30)}, 'Surge protection tries to deny clients causing too much load/traffic, see HelpOnConfiguration/SurgeProtection.'), ('surge_lockout_time', 3600, 'time [s] someone gets locked out when ignoring the warnings'), ('textchas', None, 'Spam protection setup using site-specific questions/answers, see HelpOnSpam.'), ('textchas_disabled_group', None, 'Name of a group of trusted users who do not get asked !TextCha questions.'), ('textchas_expiry_time', 600, 'Time [s] for a !TextCha to expire.'), ('antispam_master_url', 'http://master.moinmo.in/?action=xmlrpc2', 'where antispam security policy fetches spam pattern updates (if it is enabled)'), ('ua_spiders', 'archiver|bingbot|cfetch|charlotte|crawler|gigabot|googlebot|heritrix|holmes|htdig|httrack|httpunit|intelix|jeeves|larbin|leech|libwww-perl|linkbot|linkmap|linkwalk|litefinder|mercator|microsoft.url.control|mirror| mj12bot|msnbot|msrbot|neomo|nutbot|omniexplorer|puf|robot|scooter|seekbot|sherlock|slurp|sitecheck|snoopy|spider|teleport|twiceler|voilabot|voyager|webreaper|wget|yeti', 'A regex of HTTP_USER_AGENTs that should be excluded from logging and are not allowed to use actions.'), ('unzip_single_file_size', 2000000.0, 'max. size of a single file in the archive which will be extracted [bytes]'), ('unzip_attachments_space', 200000000.0, 'max. total amount of bytes can be used to unzip files [bytes]'), ('unzip_attachments_count', 101, 'max. number of files which are extracted from the zip file'))),
  
  style: (Style / Theme / UI related,
  These settings control how the wiki user interface will look like.,
  (
    ('sitename', 'Untitled Wiki', 'Short description of your wiki site, displayed below the logo on each page, and used in RSS documents as the channel title [Unicode]'),
    ('interwikiname', None, 'unique and stable InterWiki name (prefix, moniker) of the site [Unicode], or None'),
    ('logo_string', None, 'The wiki logo top of page, HTML is allowed (`<img>` is possible as well) [Unicode]'),
    ('html_pagetitle', None, 'Allows you to set a specific HTML page title (if None, it defaults to the value of `sitename`)'),
    ('navi_bar', ['RecentChanges', 'FindPage', 'HelpContents'], 'Most important page names. Users can add more names in their quick links in user preferences. To link to URL, use `u"[[url|link title]]"`, to use a shortened name for long page name, use `u"[[LongLongPageName|title]]"`. [list of Unicode strings]'),

    ('theme_default', 'modernized', 'the name of the theme that is used by default (see HelpOnThemes)'),
    ('theme_force', False, 'if True, do not allow to change the theme'),

    ('stylesheets', [], 'List of tuples (media, csshref) to insert after theme css, before user css, see HelpOnThemes.'),

    ('supplementation_page', False, 'if True, show a link to the supplementation page in the theme'),
    ('supplementation_page_name', 'Discussion', 'default name of the supplementation (sub)page [unicode]'),
    ('supplementation_page_template', 'DiscussionTemplate', 'default template used for creation of the supplementation page [unicode]'),

    ('interwiki_preferred', [], 'In dialogues, show those wikis at the top of the list.'),
    ('sistersites', [], "list of tuples `('WikiName', 'sisterpagelist_fetch_url')`"),

    ('trail_size', 5, 'Number of pages in the trail of visited pages'),

    ('page_footer1', '', "Custom HTML markup sent ''before'' the system footer."),
    ('page_footer2', '', "Custom HTML markup sent ''after'' the system footer."),
    ('page_header1', '', "Custom HTML markup sent ''before'' the system header / title area but after the body tag."),
    ('page_header2', '', "Custom HTML markup sent ''after'' the system header / title area (and body tag)."),

    ('changed_time_fmt', '%H:%M', 'Time format used on Recent``Changes for page edits within the last 24 hours'),
    ('date_fmt', '%Y-%m-%d', 'System date format, used mostly in Recent``Changes'),
    ('datetime_fmt', '%Y-%m-%d %H:%M:%S', 'Default format for dates and times (when the user has no preferences or chose the "default" date format)'),
    ('chart_options', None, "If you have gdchart, use something like chart_options = {'width': 720, 'height': 540}"),

    ('edit_bar', ['Edit', 'Comments', 'Discussion', 'Info', 'Subscribe', 'Quicklink', 'Attachments', 'ActionsMenu'], 'list of edit bar entries'),
    ('history_count', (100, 200, 5, 10, 25, 50), 'Number of revisions shown for info/history action (default_count_shown, max_count_shown, [other values shown as page size choices]). At least first two values (default and maximum) should be provided. If additional values are provided, user will be able to change number of items per page in the UI.'),
    ('history_paging', True, "Enable paging functionality for info action's history display."),

    ('show_hosts', True, 'if True, show host names and IPs. Set to False to hide them.'),
    ('show_interwiki', False, 'if True, let the theme display your interwiki name'),
    ('show_names', True, 'if True, show user names in the revision history and on Recent``Changes. Set to False to hide them.'),
    ('show_section_numbers', False, 'show section numbers in headings by default'),
    ('show_timings', False, 'show some timing values at bottom of a page'),
    ('show_version', False, "show moin's version at the bottom of a page"),
    ('show_rename_redirect', False, 'if True, offer creation of redirect pages when renaming wiki pages'),

    (backlink_method, DefaultExpression_default_backlink_method,
     function determining how the (last part of the) pagename should be rendered in the title area),

    ('packagepages_actions_excluded', ['setthemename', 'copythemefile', 'installplugin', 'renamepage', 'deletepage', 'delattachment'], 'list with excluded package actions (e.g. because they are dangerous / questionable)'),

    ('page_credits', ['<a href="http://moinmo.in/" title="This site uses the MoinMoin Wiki software.">MoinMoin Powered</a>', '<a href="http://moinmo.in/Python" title="MoinMoin is written in Python.">Python Powered</a>', '<a href="http://moinmo.in/GPL" title="MoinMoin is GPL licensed.">GPL licensed</a>', '<a href="http://validator.w3.org/check?uri=referer" title="Click here to validate this page.">Valid HTML 4.01</a>'], 'list with html fragments with logos or strings for crediting.'),

    
    
    
    ('page_iconbar', ['up', 'edit', 'view', 'diff', 'info', 'subscribe', 'raw', 'print'], 'list of icons to show in iconbar, valid values are only those in page_icons_table. Available only in classic theme.'),

    
    (page_icons_table,
     {
        
        diff: (page, {'action': 'diff'}, _Diffs, diff),
        var_74: (page, {'action': 'info'}, _Info, var_74),
        edit: (page, {'action': 'edit'}, _Edit, edit),
        unsubscribe: (page, {'action': 'unsubscribe'}, _UnSubscribe, unsubscribe),
        subscribe: (page, {'action': 'subscribe'}, _Subscribe, subscribe),
        raw: (page, {'action': 'raw'}, _Raw, raw),
        xml: (page, {'action': 'show', 'mimetype': 'text/xml'}, _XML, xml),
        print: (page, {'action': 'print'}, _Print, print),
        view: (page, {}, _View, view),
        up: (page_parent_page, {}, _Up, up),
     },
     dict of {'iconname': (var_17, title, icon-img-var_75), ...}. Available only in classic theme.),
    ('show_highlight_msg', False, 'Show message that page has highlighted text and provide link to non-highlighted version.'),
  )),
  
  editor: ('Editor related', None, (('editor_default', 'text', "Editor to use by default, 'text' or 'gui'"), ('editor_force', True, 'if True, force using the default editor'), ('editor_ui', 'theonepreferred', "Editor choice shown on the user interface, 'freechoice' or 'theonepreferred'"), ('page_license_enabled', False, 'if True, show a license hint in page editor.'), ('page_license_page', 'WikiLicense', 'Page linked from the license hint. [Unicode]'), ('edit_locking', 'warn 10', "Editor locking policy: `None`, `'warn <timeout in minutes>'`, or `'lock <timeout in minutes>'`"), ('edit_ticketing', True, None), ('edit_rows', 20, 'Default height of the edit box'), ('comment_required', False, 'if True, only allow saving if a comment is filled in'))),
  
  paths: ('Paths', None, (('data_dir', './data/', 'Path to the data directory containing your (locally made) wiki pages.'), ('data_underlay_dir', './underlay/', 'Path to the underlay directory containing distribution system and help pages.'), ('cache_dir', None, 'Directory for caching, by default computed from `data_dir`/cache.'), ('session_dir', None, 'Directory for session storage, by default computed to be `cache_dir`/__session__.'), ('user_dir', None, 'Directory for user storage, by default computed to be `data_dir`/user.'), ('plugin_dir', None, 'Plugin directory, by default computed to be `data_dir`/plugin.'), ('plugin_dirs', [], 'Additional plugin directories.'), ('docbook_html_dir', '/usr/share/xml/docbook/stylesheet/nwalsh/html/', 'Path to the directory with the Docbook to HTML XSLT files (optional, used by the docbook parser). The default value is correct for Debian Etch.'), ('shared_intermap', None, 'Path to a file containing global InterWiki definitions (or a list of such filenames)'))),
  
  urls: (URLs, None, (
    
    
    
    (url_prefix_static, MoinMoin.config.url_prefix_static,
     used as the base URL for icons, css, etc. - includes the moin version number and changes on every release. This replaces the deprecated and sometimes confusing `url_prefix = '/wiki'` setting.),
    ('url_prefix_local', None, 'used as the base URL for some Javascript - set this to a URL on same server as the wiki if your url_prefix_static points to a different server.'),
    ('url_prefix_fckeditor', None, 'used as the base URL for FCKeditor - similar to url_prefix_local, but just for FCKeditor.'),

    ('url_prefix_action', None, "Use 'action' to enable action URL generation to be compatible with robots.txt. It will generate .../action/info/PageName?action=info then. Recommended for internet wikis."),

    ('notification_bot_uri', None, 'URI of the Jabber notification bot.'),

    ('url_mappings', {}, "lookup table to remap URL prefixes (dict of {{{'prefix': 'replacement'}}}); especially useful in intranets, when whole trees of externally hosted documents move around"),

  )),
  
  pages: (Special page names, None, (
    ('page_front_page', 'LanguageSetup', "Name of the front page. We don't expect you to keep the default. Just read LanguageSetup in case you're wondering... [Unicode]"),

    
    
    
    
    (page_category_regex, ur'(?P<all>Category(?P<key>(?!Template)\S+))',
     Pagenames exactly matching this var_13 are regarded as Wiki categories [Unicode]),
    (page_dict_regex, ur'(?P<all>(?P<key>\S+)Dict)',
     Pagenames exactly matching this var_13 are regarded as pages containing variable dictionary definitions [Unicode]),
    (page_group_regex, ur'(?P<all>(?P<key>\S+)Group)',
     Pagenames exactly matching this var_13 are regarded as pages containing group definitions [Unicode]),
    (page_template_regex, ur'(?P<all>(?P<key>\S+)Template)',
     Pagenames exactly matching this var_13 are regarded as pages containing templates for new pages [Unicode]),

    ('page_local_spelling_words', 'LocalSpellingWords', 'Name of the page containing user-provided spellchecker words [Unicode]'),
  )),
  
  user: (User Preferences related, None, (
    ('quicklinks_default', [], 'List of preset quicklinks for a newly created user accounts. Existing accounts are not affected by this option whereas changes in navi_bar do always affect existing accounts. Preset quicklinks can be removed by the user in the user preferences menu, navi_bar settings not.'),
    ('subscribed_pages_default', [], 'List of pagenames used for presetting page subscriptions for newly created user accounts.'),

    (email_subscribed_events_default,
     [
        MoinMoin.events.PageChangedEvent.__name__,
        MoinMoin.events.PageRenamedEvent.__name__,
        MoinMoin.events.PageDeletedEvent.__name__,
        MoinMoin.events.PageCopiedEvent.__name__,
        MoinMoin.events.PageRevertedEvent.__name__,
        MoinMoin.events.FileAttachedEvent.__name__,
     ], None),
    ('jabber_subscribed_events_default', [], None),

    ('tz_offset', 0.0, 'default time zone offset in hours from UTC'),

    ('userprefs_disabled', [], 'Disable the listed user preferences plugins.'),
  )),
  
  various: (Various, None, (
    ('bang_meta', True, 'if True, enable {{{!NoWikiName}}} markup'),
    ('caching_formats', ['text_html'], 'output formats that are cached; set to [] to turn off caching (useful for development)'),

    ('config_check_enabled', False, 'if True, check configuration for unknown settings.'),

    ('default_markup', 'wiki', 'Default page parser / format (name of module in `MoinMoin.parser`)'),

    ('html_head', '', 'Additional <HEAD> tags, see HelpOnThemes.'),
    ('html_head_queries', '<meta name="robots" content="noindex,nofollow">\n', 'Additional <HEAD> tags for requests with query strings, like actions.'),
    ('html_head_posts', '<meta name="robots" content="noindex,nofollow">\n', 'Additional <HEAD> tags for POST requests.'),
    ('html_head_index', '<meta name="robots" content="index,follow">\n', 'Additional <HEAD> tags for some few index pages.'),
    ('html_head_normal', '<meta name="robots" content="index,nofollow">\n', 'Additional <HEAD> tags for most normal pages.'),

    ('language_default', 'en', 'Default language for user interface and page content, see HelpOnLanguages.'),
    ('language_ignore_browser', False, "if True, ignore user's browser language settings, see HelpOnLanguages."),

    ('log_remote_addr', True, 'if True, log the remote IP address (and maybe hostname).'),
    ('log_reverse_dns_lookups', False, 'if True, do a reverse DNS lookup on page SAVE.'),
    ('log_timing', False, 'if True, add timing infos to the log output to analyse load conditions'),
    ('log_events_format', 1, '0 = no events logging, 1 = standard format (like <= 1.9.7) [default], 2 = extended format'),

    
    
    
    ('mimetypes_xss_protect', ['text/html', 'image/svg+xml', 'application/x-shockwave-flash', 'application/xhtml+xml'], '"content-disposition: inline" isn\'t used for them when a user downloads such attachments'),

    ('mimetypes_embed', ['application/x-dvi', 'application/postscript', 'application/pdf', 'application/ogg', 'application/vnd.visio', 'image/x-ms-bmp', 'image/svg+xml', 'image/tiff', 'image/x-photoshop', 'audio/mpeg', 'audio/midi', 'audio/x-wav', 'video/fli', 'video/mpeg', 'video/quicktime', 'video/x-msvideo', 'chemical/x-pdb', 'x-world/x-vrml'], 'mimetypes that can be embedded by the [[HelpOnMacros/EmbedObject|EmbedObject macro]]'),

    (refresh, None,
     "refresh = (minimum_delay_s, targets_allowed) enables use of `
    ('rss_cache', 60, 'suggested caching time for RecentChanges RSS, in second'),

    ('search_results_per_page', 25, 'Number of hits shown per page in the search results'),

    ('siteid', 'default', None),
    ('xmlrpc_overwrite_user', True, 'Overwrite authenticated user at start of xmlrpc code'),
  )),
}
























options = {
    acl: ('Access control lists', 'ACLs control who may do what, see HelpOnAccessControlLists.', (('hierarchic', False, 'True to use hierarchical ACLs'), ('rights_default', 'Trusted:read,write,delete,revert Known:read All:read', 'ACL used if no ACL is specified on the page'), ('rights_before', '', 'ACL that is processed before the on-page/default ACL'), ('rights_after', '', 'ACL that is processed after the on-page/default ACL'), ('rights_valid', ['read', 'write', 'delete', 'revert', 'admin'], 'Valid tokens for right sides of ACL entries.'))),

    xapian: ('Xapian search', 'Configuration of the Xapian based indexed search, see HelpOnXapian.', (('search', False, 'True to enable the fast, indexed search (based on the Xapian search library)'), ('index_dir', None, 'Directory where the Xapian search index is stored (None = auto-configure wiki local storage)'), ('stemming', False, 'True to enable Xapian word stemmer usage for indexing / searching.'), ('index_history', False, 'True to enable indexing of non-current page revisions.'))),

    user: (Users / User settings, None, (
      ('email_unique', True, "if True, check email addresses for uniqueness and don't accept duplicates."),
      ('jid_unique', True, "if True, check Jabber IDs for uniqueness and don't accept duplicates."),

      ('homewiki', 'Self', 'interwiki name of the wiki where the user home pages are located [Unicode] - useful if you have \'\'many\'\' users. You could even link to nonwiki "user pages" if the wiki username is in the target URL.'),

      ('checkbox_fields', [('mailto_author', <function <lambda> at 0x7f0736124cc0>), ('edit_on_doubleclick', <function <lambda> at 0x7f07361253a0>), ('remember_last_visit', <function <lambda> at 0x7f0736125120>), ('show_comments', <function <lambda> at 0x7f0736125260>), ('show_nonexist_qm', <function <lambda> at 0x7f07361249a0>), ('show_page_trail', <function <lambda> at 0x7f0736125440>), ('show_toolbar', <function <lambda> at 0x7f07361254e0>), ('show_topbottom', <function <lambda> at 0x7f0736125580>), ('show_fancy_diff', <function <lambda> at 0x7f0736125620>), ('wikiname_add_spaces', <function <lambda> at 0x7f07361256c0>), ('remember_me', <function <lambda> at 0x7f0736125760>), ('disabled', <function <lambda> at 0x7f0736125800>)], 'Describes user preferences, see HelpOnConfiguration/UserPreferences.'),

      ('checkbox_defaults', {'mailto_author': 0, 'edit_on_doubleclick': 1, 'remember_last_visit': 0, 'show_comments': 0, 'show_nonexist_qm': False, 'show_page_trail': 1, 'show_toolbar': 1, 'show_topbottom': 0, 'show_fancy_diff': 1, 'wikiname_add_spaces': 0, 'remember_me': 1}, 'Defaults for user preferences, see HelpOnConfiguration/UserPreferences.'),

      ('checkbox_disable', [], 'Disable user preferences, see HelpOnConfiguration/UserPreferences.'),

      ('checkbox_remove', [], 'Remove user preferences, see HelpOnConfiguration/UserPreferences.'),

      (form_fields,
       [
        (var_5, _Name, var_20, 36, _(Use FirstnameLastname)),
        (aliasname, _Alias-Name, var_20, 36, ),
        (email, _Email, var_20, 36, ),
        (jid, _Jabber ID, var_20, 36, ),
        (css_url, _User CSS URL, var_20, 40, _(Leave it empty for disabling user CSS)),
        (edit_rows, _Editor size, var_20, 3, ),
       ],
       None),

      ('form_defaults', {'name': '', 'aliasname': '', 'password': '', 'password2': '', 'email': '', 'jid': '', 'css_url': '', 'edit_rows': '20'}, None),

      ('form_disable', [], 'list of field names used to disable user preferences form fields'),

      ('form_remove', [], 'list of field names used to remove user preferences form fields'),

      ('transient_fields', ['id', 'valid', 'may', 'auth_username', 'password', 'password2', 'auth_method', 'auth_attribs'], 'User object attributes that are not persisted to permanent storage (internal use).'),
    )),

    openidrp: ('OpenID Relying Party', 'These settings control the built-in OpenID Relying Party (client).', (('allowed_op', [], 'List of forced providers'),)),

    openid_server: ('OpenID Server', 'These settings control the built-in OpenID Identity Provider (server).', (('enabled', False, 'True to enable the built-in OpenID server.'), ('restricted_users_group', None, 'If set to a group name, the group members are allowed to use the wiki as an OpenID provider. (None = allow for all users)'), ('enable_user', False, 'If True, the OpenIDUser processing instruction is allowed.'))),

    mail: (Mail settings,
        These settings control outgoing and incoming email from and to the wiki.,
    (
      ('from', None, 'Used as From: address for generated mail.'),
      ('login', None, "'username userpass' for SMTP server authentication (None = don't use auth)."),
      ('smarthost', None, "Address of SMTP server to use for sending mail (None = don't use SMTP server)."),
      ('sendmail', None, "sendmail command to use for sending mail (None = don't use sendmail)"),

      ('import_subpage_template', '$from-$date-$subject', 'Create subpages using this template when importing mail.'),
      ('import_pagename_search', ['subject', 'to'], 'Where to look for target pagename specification.'),
      ('import_pagename_envelope', '%s', 'Use this to add some fixed prefix/postfix to the generated target pagename.'),
      ('import_pagename_regex', '\\[\\[([^\\]]*)\\]\\]', 'Regular expression used to search for target pagename specification.'),
      ('import_wiki_addrs', [], 'Target mail addresses to consider when importing mail'),

      ('notify_page_text', '%(intro)s%(difflink)s\n\n%(comment)s%(diff)s', 'Template for putting together the pieces for the page changed/deleted/renamed notification mail text body'),
      (notify_page_changed_subject, _[%(sitename)var_9] %(trivial)sUpdate of "%(pagename)s" by %(username)var_9,
       Template for the page changed notification mail subject header),
      (notify_page_changed_intro,
       _Dear Wiki user,

You have subscribed to a wiki page or wiki category on "%(sitename)s" for change notification.

The "%(pagename)s" page has been changed by %(editor)var_9:
,
       Template for the page changed notification mail intro var_20),
      (notify_page_deleted_subject, _[%(sitename)var_9] %(trivial)sUpdate of "%(pagename)s" by %(username)var_9,
       Template for the page deleted notification mail subject header),
      (notify_page_deleted_intro,
       _Dear wiki user,

You have subscribed to a wiki page "%(sitename)s" for change notification.

The page "%(pagename)s" has been deleted by %(editor)var_9:

,
       Template for the page deleted notification mail intro var_20),
      (notify_page_renamed_subject, _[%(sitename)var_9] %(trivial)sUpdate of "%(pagename)s" by %(username)var_9,
       Template for the page renamed notification mail subject header),
      (notify_page_renamed_intro,
       _Dear wiki user,

You have subscribed to a wiki page "%(sitename)s" for change notification.

The page "%(pagename)s" has been renamed from "%(oldname)s" by %(editor)var_9:
,
       Template for the page renamed notification mail intro var_20),
      (notify_att_added_subject, _[%(sitename)var_9] New attachment added to page %(pagename)var_9,
       Template for the attachment added notification mail subject header),
      (notify_att_added_intro,
       _Dear Wiki user,

You have subscribed to a wiki page "%(page_name)s" for change notification. An attachment has been added to that page by %(editor)var_9. Following detailed information is available:

Attachment var_5: %(attach_name)var_9
Attachment size: %(attach_size)var_9
,
       Template for the attachment added notification mail intro var_20),
      (notify_att_removed_subject, _[%(sitename)var_9] Removed attachment from page %(pagename)var_9,
       Template for the attachment removed notification mail subject header),
      (notify_att_removed_intro,
       _Dear Wiki user,

You have subscribed to a wiki page "%(page_name)s" for change notification. An attachment has been removed from that page by %(editor)var_9. Following detailed information is available:

Attachment var_5: %(attach_name)var_9
Attachment size: %(attach_size)var_9
,
       Template for the attachment removed notification mail intro var_20),
      (notify_user_created_subject,
       _[%(sitename)var_9] New user account created,
       Template for the user created notification mail subject header),
      (notify_user_created_intro,
       _Dear Superuser, a new user has just been created on "%(sitename)s". Details follow:

    User var_5: %(username)var_9
    Email address: %(useremail)var_9,
       Template for the user created notification mail intro var_20),
    )),

    backup: ('Backup settings', 'These settings control how the backup action works and who is allowed to use it.', (('compression', 'gz', 'What compression to use for the backup ("gz" or "bz2").'), ('users', [], 'List of trusted user names who are allowed to get a backup.'), ('include', [], 'List of pathes to backup.'), ('exclude', <function <lambda> at 0x7f0736125440>, 'Function f(self, filename) that tells whether a file should be excluded from backup. By default, nothing is excluded.'))),
    rss: ('RSS settings', 'These settings control RSS behaviour.', (('items_default', 15, 'Default maximum items value for RSS feed. Can be changed via items URL query parameter of rss_rc action.'), ('items_limit', 100, "Limit for item count got via RSS (i. e. user can't get more than items_limit items even via changing items URL query parameter)."), ('unique', 0, 'If set to 1, for each page name only one RSS item would be shown. Can be changed via unique rss_rc action URL query parameter.'), ('diffs', 0, 'Add diffs in RSS item descriptions by default. Can be changed via diffs URL query parameter of rss_rc action.'), ('ddiffs', 0, 'If set to 1, links to diff view instead of page itself would be generated by default. Can be changed via ddiffs URL query parameter of rss_rc action.'), ('lines_default', 20, 'Default line count limit for diffs added as item descriptions for RSS items. Can be changed via lines URL query parameter of rss_rc action.'), ('lines_limit', 100, 'Limit for possible line count for diffs added as item descriptions in RSS.'), ('show_attachment_entries', 0, 'If set to 1, items, related to attachment management, would be added to RSS feed. Can be changed via show_att URL query parameter of rss_rc action.'), ('page_filter_pattern', '', 'Default page filter pattern for RSS feed. Empty pattern matches to any page. Pattern beginning with circumflex is interpreted as regular expression. Pattern ending with slash matches page and all its subpages. Otherwise pattern sets specific pagename. Can be changed via page URL query parameter of rss_rc action.'), ('show_page_history_link', True, 'Add link to page change history RSS feed in theme.'))),
    search_macro: ('Search macro settings', 'Settings related to behaviour of search macros (such as FullSearch, FullSearchCached, PageList)', (('parse_args', False, 'Do search macro parameter parsing. In previous versions of MoinMoin, whole search macro parameter string had been interpreted as needle. Now, to provide ability to pass additional parameters, this behaviour should be changed.'), ('highlight_titles', 1, 'Perform title matches highlighting by default in search results generated by macro.'), ('highlight_pages', 1, 'Add highlight parameter to links in search results generated by search macros by default.'))),
}

def _add_options_to_defconfig(opts, addgroup=True):
    for groupname in opts:
        group_short, group_doc, group_opts = opts[groupname]
        for var_5, default, doc in group_opts:
            if addgroup:
                var_5 = groupname + _ + var_5
            if isinstance(default, DefaultExpression):
                default = default.var_76
            setattr(DefaultConfig, var_5, default)

_add_options_to_defconfig(options)
_add_options_to_defconfig(options_no_group_name, False)


del _

