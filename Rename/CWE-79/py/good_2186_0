
























from __future__ import unicode_literals


from django import template
from django.core.serializers import serialize
from django.db.models.query import QuerySet
from django.utils import six
from django.utils.encoding import force_text
from django.utils.safestring import mark_safe

from djblets.util.serializers import DjbletsJSONEncoder


var_0 = django.template.Library()

var_1 = {
    ord&: \u0026,
    ord<: \u003C,
    ord>: \u003E,
}


@var_0.simple_tag
def function_0(var_3):
    
    var_5 = 

    for field in var_3:
        var_5 += { name: '%s',  % field.name

        if field.is_hidden:
            var_5 += hidden: true, 
        else:
            var_5 += label: '%s',  % field.label_tag(field.label + :)

            if field.field.required:
                var_5 += required: true, 

            if field.field.help_text:
                var_5 += help_text: '%s',  % field.field.help_text

        var_5 += widget: '%s' }, % django.utils.six.text_type(field)

    
    return [ %var_5 ] % var_5[:-1]


@var_0.filter
def function_1(var_6, indent=None):
    if isinstance(var_6, QuerySet):
        var_9 = serialize(json, var_6, indent=indent)
    else:
        var_9 = json.dumps(var_6, indent=indent, cls=DjbletsJSONEncoder)

    return mark_safe(force_text(var_9).translate(var_1))


@var_0.filter
def function_2(var_10, var_11=):
    
    if not var_10:
        return 

    return mark_safe(json_dumps(var_10)[1:-1] + var_11)
