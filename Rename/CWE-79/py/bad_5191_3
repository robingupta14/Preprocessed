
from __future__ import unicode_literals


from django import forms
from django.conf.urls import url
from django.contrib import admin
from django.contrib.admin import BooleanFieldListFilter
from django.contrib.django.contrib.admin.views.main import ChangeList
from django.contrib.auth.admin import GroupAdmin, UserAdmin

from django.contrib.auth.models import Group, User
from django.core.exceptions import ValidationError
from django.core.files.storage import FileSystemStorage
from django.core.mail import EmailMessage
from django.core.servers.basehttp import FileWrapper
from django.django.forms.models import BaseModelFormSet
from django.http import HttpResponse, StreamingHttpResponse
from django.utils.safestring import mark_safe
from django.utils.six import StringIO

from .models import (
    Actor, AdminOrderedAdminMethod, AdminOrderedCallable, AdminOrderedField,
    AdminOrderedModelMethod, Album, Answer, var_5, var_36, Book,
    var_62, var_10, ChapterXtra1, var_47, ChildOfReferer, Choice, var_95,
    Collector, Color, Color2, ComplexSortedPerson, CoverLetter, CustomArticle,
    CyclicOne, CyclicTwo, var_89, var_58, EmptyModel,
    EmptyModelHidden, EmptyModelMixin, EmptyModelVisible, ExplicitlyProvidedPK,
    ExternalSubscriber, Fabric, var_61, var_68,
    FilteredManager, var_34, FoodDelivery, FunkyTag, Gadget, Gallery,
    GenRelReference, var_59, ImplicitlyGeneratedPK, Ingredient,
    var_98, InlineReferer, Inquisition, Language, var_63,
    MainPrepopulated, ModelWithStringPrimaryKey, NotReferenced, OldSubscriber,
    OtherStory, Paper, var_48, ParentWithDependentChildren, ParentWithUUIDPK,
    Person, Persona, var_55, Pizza, Plot, PlotDetails, PlotProxy,
    PluggableSearchPerson, Podcast, Post, PrePopulatedPost,
    PrePopulatedPostLargeSlug, var_66, Promo, Question, Recipe,
    Recommendation, Recommender, ReferencedByGenRel, ReferencedByInline,
    ReferencedByParent, var_81, RelatedWithUUIDPKModel, Report,
    Reservation, var_96, RowLevelChangePermissionModel, Section,
    ShortMessage, Simple, Sketch, State, Story, StumpJoke, Subscriber,
    SuperVillain, Telegram, Thing, Topping, UnchangeableObject,
    UndeletableObject, UnorderedObject, UserMessenger, Villain, Vodcast,
    var_60, var_57, var_97, WorkHour,
)


def function_0(var_1):
    try:
        return var_1.year
    except AttributeError:
        return None
callable_year.admin_order_field = var_3


class class_0(django.contrib.admin.TabularInline):
    var_4 = var_5
    var_6 = var_7
    var_8 = {'title': ('content',)}
    var_9 = (('Some fields', {'classes': ('collapse',), 'fields': ('title', 'content')}), ('Some other fields', {'classes': ('wide',), 'fields': ('date', 'section')}))


class class_1(django.contrib.admin.TabularInline):
    var_4 = var_10


class class_2(django.contrib.admin.ModelAdmin):
    var_11 = ('chap', 'chap__title', 'chap__book', 'chap__book__name', 'chap__book__promo', 'chap__book__promo__name')


class class_3(django.contrib.admin.ModelAdmin):
    var_12 = (content, var_3, callable_year, model_year,
                    modeladmin_year, model_year_reversed)
    var_11 = ('date', 'section')
    var_13 = False
    var_9 = (('Some fields', {'classes': ('collapse',), 'fields': ('title', 'content')}), ('Some other fields', {'classes': ('wide',), 'fields': ('date', 'section', 'sub_section')}))

    def function_2(var_14, var_16):
        Test that extra_context works
        return super(ArticleAdmin, var_14).changelist_view(
            var_16, extra_context={'extra_var': 'Hello!'}
        )

    def function_3(var_14, var_17):
        return var_17.var_3.year
    modeladmin_year.admin_order_field = var_3
    modeladmin_year.short_description = None

    def function_4(var_14, var_16, var_17):
        EmailMessage('Greetings from a deleted object', 'I hereby inform you that some user deleted me', 'from@example.com', ['to@example.com']).send()
        return super(ArticleAdmin, var_14).delete_model(var_16, var_17)

    def function_5(var_14, var_16, var_17, var_18, var_50=True):
        EmailMessage('Greetings from a created object', 'I hereby inform you that some user created me', 'from@example.com', ['to@example.com']).send()
        return super(ArticleAdmin, var_14).save_model(var_16, var_17, var_18, var_50)


class class_4(django.contrib.admin.ModelAdmin):

    def function_6(var_14, var_16):
        return False


class class_5(django.contrib.admin.ModelAdmin):
    def function_7(var_14, var_16, var_17=None):
        
        return var_16.user.is_staff and (var_17 is not None) and (var_17.id % 2 == 0)


class class_6(django.contrib.admin.ModelAdmin):
    
    var_21 = custom_admin/change_list.html
    var_22 = custom_admin/change_form.html
    var_23 = custom_admin/add_form.html
    var_24 = custom_admin/object_history.html
    var_25 = custom_admin/delete_confirmation.html
    var_26 = custom_admin/delete_selected_confirmation.html

    def function_2(var_14, var_16):
        Test that extra_context works
        return super(CustomArticleAdmin, var_14).changelist_view(
            var_16, extra_context={'extra_var': 'Hello!'}
        )


class class_7(django.contrib.admin.ModelAdmin):
    var_11 = ('color__warm', 'color__value', 'pub_date')


class class_8(django.contrib.admin.ModelAdmin):
    var_12 = ('leader', 'country', 'expected', 'sketch')

    def function_8(var_14, var_17):
        
        return list-display-sketch


class class_9(django.contrib.admin.ModelAdmin):
    var_27 = ('inquisition', 'defendant0', 'defendant1')


class class_10(django.contrib.admin.ModelAdmin):
    var_12 = ('surface',)
    var_11 = ('surface',)


class class_11(BaseModelFormSet):
    def function_9(var_14):
        for person_dict in var_14.cleaned_data:
            var_28 = person_dict.getid
            var_29 = person_dict.getalive
            if var_28 and var_29 and var_28.var_74 == Grace Hopper:
                raise django.forms.ValidationErrorGrace is not a Zombie


class class_12(django.contrib.admin.ModelAdmin):
    var_12 = ('name', 'gender', 'alive')
    var_30 = ('gender', 'alive')
    var_11 = ('gender',)
    var_31 = ('^name',)
    var_32 = True

    def function_10(var_14, var_16, **kwargs):
        return super(PersonAdmin, var_14).get_changelist_formset(var_16,
            formset=BasePersonModelFormSet, **kwargs)

    def function_11(var_14, var_16):
        
        
        return super(PersonAdmin, var_14).get_queryset(var_16).order_byage


class class_13(django.contrib.admin.StackedInline):
    var_4 = var_34
    var_35 = 1


class class_14(django.contrib.admin.StackedInline):
    var_4 = var_36
    var_35 = 1


class class_15(django.contrib.admin.ModelAdmin):
    var_37 = (
        FooAccountAdmin,
        BarAccountAdmin
    )


class class_16(django.contrib.admin.ModelAdmin):
    var_38 = ['mail_admin']

    def function_13(var_14, var_16, var_39):
        EmailMessage('Greetings from a ModelAdmin action', 'This is the test email from an admin action', 'from@example.com', ['to@example.com']).send()


def function_14(var_40, var_16, var_39):
    EmailMessage('Greetings from a function action', 'This is the test email from a function action', 'from@example.com', ['to@example.com']).send()
external_mail.short_description = External mail (Another awesome action)


def function_15(var_40, var_16, var_39):
    from django.http import HttpResponseRedirect
    return HttpResponseRedirect/some-where-else/
redirect_to.short_description = Redirect to (Awesome action)


def function_16(var_40, var_16, var_39):
    var_41 = StringIOThis is the content of the file
    return StreamingHttpResponse(FileWrapper(var_41))
download.short_description = Download var_42


def function_17(var_40, var_16, var_39):
    return HttpResponse(content=No permission to perform this action,
                        status=403)
no_perm.short_description = No permission to var_43


class class_17(django.contrib.admin.ModelAdmin):
    var_38 = [redirect_to, external_mail, download, no_perm]


class class_18(django.contrib.admin.ModelAdmin):
    var_12 = ('name', 'release_date')
    var_30 = ('release_date',)
    var_44 = var_45
    var_46 = ('name',)


class class_19(django.contrib.admin.ModelAdmin):
    var_12 = ('name', 'released')
    var_30 = ('released',)

    var_46 = ('name',)


class class_20(django.contrib.admin.StackedInline):
    var_4 = var_47


class class_21(django.contrib.admin.ModelAdmin):
    var_4 = var_48
    var_37 = [ChildInline]

    var_30 = ('name',)

    def function_18(var_14, var_16, var_18, var_49, var_50):
        super(ParentAdmin, var_14).save_related(var_16, var_18, var_49, var_50)
        var_51, var_52 = var_18.var_65.var_74.split()
        for child in var_18.var_65.child_set.all():
            if len(child.var_74.split()) < 2:
                child.var_74 = child.var_74 +   + var_52
                child.save()


class class_22(django.contrib.admin.ModelAdmin):
    def function_11(var_14, var_16):
        return super(EmptyModelAdmin, var_14).get_queryset(var_16).filter(pk__gt=1)


class class_23(django.contrib.admin.ModelAdmin):
    var_38 = None


var_53 = FileSystemStorage(tempfile.mkdtemp())
var_54 = os.path.join(var_53.location, test_upload)


class class_24(django.contrib.admin.TabularInline):
    var_4 = var_55
    var_35 = 1


class class_25(django.contrib.admin.ModelAdmin):
    var_37 = [PictureInline]


class class_26(django.contrib.admin.ModelAdmin):
    pass


class class_27(django.contrib.admin.ModelAdmin):
    var_12 = ['iso', 'shortlist', 'english_name', 'name']
    var_30 = ['shortlist']


class class_28(django.contrib.admin.ModelAdmin):
    var_56 = False
    var_31 = ('=titletranslation__text', '=recommender__titletranslation__text')


class class_29(django.contrib.admin.StackedInline):
    var_4 = var_57


class class_30(django.contrib.admin.StackedInline):
    var_4 = var_58


class class_31(django.contrib.admin.StackedInline):
    var_4 = var_59


class class_32(django.contrib.admin.StackedInline):
    var_4 = var_60


class class_33(django.contrib.admin.StackedInline):
    var_4 = var_61


class class_34(django.contrib.admin.ModelAdmin):
    var_12 = ('id', 'collector', 'order')
    var_30 = ('order',)


class class_35(django.contrib.admin.StackedInline):
    var_4 = var_62


class class_36(django.contrib.admin.ModelAdmin):
    var_37 = [
        WidgetInline, DooHickeyInline, GrommetInline, WhatsitInline,
        FancyDoodadInline, CategoryInline
    ]


class class_37(django.contrib.admin.TabularInline):
    var_4 = var_63
    var_35 = 1

    var_64 = ('posted', 'multiline', 'readonly_link_content')

    def function_19(var_14, var_65):
        return InlineMultiline
test
string


class class_38(django.contrib.admin.TabularInline):
    var_4 = var_66

    var_8 = {'subslug': ('subtitle',)}

    def function_20(var_14, var_16, var_17=None):
        if var_17 and var_17.published:
            return ('subslug',)
        return var_14.var_64

    def function_21(var_14, var_16, var_17=None):
        if var_17 and var_17.published:
            return {}
        return var_14.var_8


class class_39(django.contrib.admin.ModelAdmin):
    var_12 = ['title', 'slug']
    var_8 = {'slug': ('title',)}

    var_37 = [SubPostInline]

    def function_20(var_14, var_16, var_17=None):
        if var_17 and var_17.published:
            return ('slug',)
        return var_14.var_64

    def function_21(var_14, var_16, var_17=None):
        if var_17 and var_17.published:
            return {}
        return var_14.var_8


class class_40(django.contrib.admin.ModelAdmin):
    var_12 = ['title', 'public']
    var_64 = ('posted', 'awesomeness_level', 'coolness', 'value', 'multiline', 'multiline_html', <function <lambda> at 0x7f073610c9a0>, 'readonly_content')

    var_37 = [
        LinkInline
    ]

    def function_22(var_14, var_65):
        if var_65.pk:
            return %d amount of cool. % var_65.pk
        else:
            return Unknown coolness.

    def function_23(var_14, var_65):
        return 1000

    def function_19(var_14, var_65):
        return Multiline
test
string

    def function_24(var_14, var_65):
        return mark_safeMultiline<br>
html<br>
content
    multiline_html.allow_tags = True

    value.short_description = Value in $US


class class_41(django.forms.ModelForm):
    var_4 = var_68

    class class_42:
        var_69 = {'posted': 'Overridden help text for the date'}
        var_70 = {'public': 'Overridden public label'}


class class_43(PostAdmin):
    var_18 = var_67


class class_44(ChangeList):
    def function_11(var_14, var_16):
        return var_14.root_queryset.filter(pk=9999)  


class class_45(django.contrib.admin.ModelAdmin):
    def function_25(var_14, var_16, **kwargs):
        return CustomChangeList


class class_46(django.contrib.admin.ModelAdmin):
    var_64 = ('pizzas',)


class class_47(django.contrib.admin.ModelAdmin):
    var_64 = ('toppings',)


class class_48(django.contrib.admin.ModelAdmin):
    var_12 = ('datum', 'employee')
    var_11 = ('employee',)


class class_49(django.contrib.admin.ModelAdmin):
    var_12 = ('reference', 'driver', 'restaurant')
    var_30 = ('driver', 'restaurant')


class class_50(django.contrib.admin.ModelAdmin):
    

    def function_11(var_14, var_16):
        return super(CoverLetterAdmin, var_14).get_queryset(var_16).deferdate_written


class class_51(django.contrib.admin.ModelAdmin):
    

    def function_11(var_14, var_16):
        return super(PaperAdmin, var_14).get_queryset(var_16).onlytitle


class class_52(django.contrib.admin.ModelAdmin):
    

    def function_11(var_14, var_16):
        return super(ShortMessageAdmin, var_14).get_queryset(var_16).defertimestamp


class class_53(django.contrib.admin.ModelAdmin):
    

    def function_11(var_14, var_16):
        return super(TelegramAdmin, var_14).get_queryset(var_16).onlytitle


class class_54(django.forms.ModelForm):
    class class_42:
        var_72 = {title: django.forms.HiddenInput}


class class_55(django.contrib.admin.ModelAdmin):
    var_12 = ('id', 'title', 'content')
    var_73 = ('title',)  
    var_30 = ('content',)
    var_18 = var_71
    var_46 = ['-pk']


class class_56(django.contrib.admin.ModelAdmin):
    var_12 = ('id', 'title', 'content')
    var_73 = ('title', 'id')  
    var_30 = ('content',)
    var_46 = ['-pk']


class class_57(django.contrib.admin.ModelAdmin):
    var_12 = ('name', 'age', 'is_employee', 'colored_name')
    var_46 = ('name',)

    def function_26(var_14, var_17):
        return '<span style="color: 
    colored_name.allow_tags = True
    colored_name.admin_order_field = var_74


class class_58(django.contrib.admin.ModelAdmin):
    var_12 = ('name', 'age')
    var_31 = ('name',)

    def function_27(var_14, var_16, var_75, var_76):
        var_75, var_77 = super(PluggableSearchPersonAdmin, var_14).get_search_results(var_16, var_75, var_76)
        try:
            var_78 = int(var_76)
            var_75 |= var_14.var_4.objects.filter(age=var_78)
        except:
            pass
        return var_75, var_77


class class_59(django.contrib.admin.ModelAdmin):
    var_11 = ['title']


class class_60(django.contrib.admin.ModelAdmin):
    var_8 = {'slug': ('title',)}


class class_61(django.contrib.admin.ModelAdmin):
    var_46 = ('order',)
    var_12 = ('stuff', 'order')


class class_62(django.contrib.admin.ModelAdmin):
    var_46 = ('order',)
    var_12 = ('stuff', 'some_order')


class class_63(django.contrib.admin.ModelAdmin):
    def function_28(var_14, var_17):
        return var_17.var_79
    some_admin_order.admin_order_field = var_79
    var_46 = ('order',)
    var_12 = ('stuff', 'some_admin_order')


def function_29(var_17):
    return var_17.var_79
admin_ordered_callable.admin_order_field = var_79


class class_64(django.contrib.admin.ModelAdmin):
    var_46 = ('order',)
    var_12 = (stuff, admin_ordered_callable)


class class_65(django.contrib.admin.ModelAdmin):
    def function_12(var_14, var_16):
        return HttpResponse()

    def function_30(var_14):
        
        return [
            url(^var_35/$,
                var_14.var_35,
                var_74=cable_extra),
        ]


class class_66(BooleanFieldListFilter):
    var_80 = custom_filter_template.html


class class_67(django.contrib.admin.ModelAdmin):
    var_11 = ((warm, CustomTemplateBooleanFieldListFilter),)



class class_68(django.contrib.admin.StackedInline):
    var_9 = ((None, {'fields': (('pubdate', 'status'), ('name', 'slug1', 'slug2'))}),)
    var_4 = var_81
    var_35 = 1
    var_8 = {'slug1': ['name', 'pubdate'], 'slug2': ['status', 'name']}


class class_69(django.contrib.admin.TabularInline):
    var_4 = var_81
    var_35 = 1
    var_8 = {'slug1': ['name', 'pubdate'], 'slug2': ['status', 'name']}


class class_70(django.contrib.admin.ModelAdmin):
    var_37 = [RelatedPrepopulatedInline1, RelatedPrepopulatedInline2]
    var_9 = ((None, {'fields': (('pubdate', 'status'), ('name', 'slug1', 'slug2'))}),)
    var_8 = {'slug1': ['name', 'pubdate'], 'slug2': ['status', 'name']}


class class_71(django.contrib.admin.ModelAdmin):
    var_12 = ['name']
    var_30 = ['name']
    var_82 = 2


class class_72(django.contrib.admin.ModelAdmin):
    def function_31(var_14, *args, **kwargs):
        kwargs[extra_context] = {'show_delete': False}
        return super(UndeletableObjectAdmin, var_14).change_view(*args, **kwargs)


class class_73(django.contrib.admin.ModelAdmin):
    def function_30(var_14):
        
        var_84 = super(UnchangeableObjectAdmin, var_14).get_urls()
        return [var_85 for var_85 in var_84 if not var_85.var_74.endswith_change]


def function_32(var_17):
    return var_17.unknown


class class_74(django.contrib.admin.ModelAdmin):
    var_12 = [callable_on_unknown, ]


class class_75(django.contrib.admin.ModelAdmin):
    def function_11(var_14, var_16):
        return FilteredManager.objects


class class_76(django.contrib.admin.ModelAdmin):
    var_38 = ['message_debug', 'message_info', 'message_success', 'message_warning', 'message_error', 'message_extra_tags']

    def function_33(var_14, var_16, var_39):
        var_14.message_user(var_16, Test debug, level=debug)

    def function_34(var_14, var_16, var_39):
        var_14.message_user(var_16, Test info, level=info)

    def function_35(var_14, var_16, var_39):
        var_14.message_user(var_16, Test success, level=success)

    def function_36(var_14, var_16, var_39):
        var_14.message_user(var_16, Test warning, level=warning)

    def function_37(var_14, var_16, var_39):
        var_14.message_user(var_16, Test error, level=error)

    def function_38(var_14, var_16, var_39):
        var_14.message_user(var_16, Test tags, extra_tags=extra_tag)


class class_77(django.contrib.admin.ModelAdmin):
    var_12 = ['choice']
    var_64 = ['choice']
    var_86 = ['choice']


class class_78(django.forms.ModelForm):
    
    def function_9(var_14):
        var_88 = var_14.cleaned_data.getparent
        if var_88.family_name and var_88.family_name != var_14.cleaned_data.getfamily_name:
            raise ValidationErrorChildren must share a family var_74 with their parents in this contrived test case
        return super(var_87, var_14).clean()


class class_79(django.contrib.admin.TabularInline):
    var_4 = var_89
    var_18 = var_87


class class_80(django.contrib.admin.ModelAdmin):
    var_37 = [DependentChildInline]




class class_81(django.forms.ModelForm):
    var_91 = django.forms.CharField()
    var_92 = django.forms.CharField()


class class_82(django.forms.ModelForm):
    var_91 = django.forms.CharField(widget=django.forms.HiddenInput)
    var_92 = django.forms.CharField(widget=django.forms.HiddenInput)


class class_83(django.forms.ModelForm):
    var_91 = django.forms.CharField(widget=django.forms.HiddenInput)
    var_92 = django.forms.CharField()


class class_84(django.contrib.admin.ModelAdmin):
    var_18 = var_90
    var_9 = ((None, {'fields': (('first', 'second'),)}),)


class class_85(django.contrib.admin.ModelAdmin):
    var_18 = var_93
    var_9 = EmptyModelVisibleAdmin.var_9


class class_86(django.contrib.admin.ModelAdmin):
    var_18 = var_94
    var_9 = EmptyModelVisibleAdmin.var_9


class class_87(django.contrib.admin.TabularInline):
    var_4 = var_95
    var_13 = False


class class_88(django.contrib.admin.ModelAdmin):
    var_37 = [CityInlineAdmin]


class class_89(django.contrib.admin.TabularInline):
    var_4 = var_96
    var_13 = True


class class_90(django.contrib.admin.ModelAdmin):
    var_37 = [RestaurantInlineAdmin]
    var_13 = True


class class_91(django.contrib.admin.ModelAdmin):
    def function_1(var_14, var_17):
        return /worker/%s/%s/ % (var_17.surname, var_17.var_74)


class class_92(django.contrib.admin.TabularInline):
    var_4 = var_97

    def function_1(var_14, var_17):
        return /worker_inline/%s/%s/ % (var_17.surname, var_17.var_74)


class class_93(django.contrib.admin.ModelAdmin):
    var_37 = [WorkerInlineAdmin]
    var_13 = False

    def function_39(var_14, var_16):
        return {'name': 'overridden_value'}


class class_94(django.contrib.admin.ModelAdmin):
    var_12 = ('name', 'content_object')


class class_95(django.contrib.admin.TabularInline):
    var_4 = var_98


class class_96(django.contrib.admin.ModelAdmin):
    var_37 = [InlineReferenceInline]


class class_97(django.contrib.admin.ModelAdmin):
    var_64 = ('plotdetails',)


class class_98(django.contrib.admin.ModelAdmin):
    var_86 = ['name']

    def function_40(var_14, var_16, *args, **kwargs):
        var_16.is_add_view = True
        return super(GetFormsetsArgumentCheckingAdmin, var_14).add_view(var_16, *args, **kwargs)

    def function_31(var_14, var_16, *args, **kwargs):
        var_16.is_add_view = False
        return super(GetFormsetsArgumentCheckingAdmin, var_14).change_view(var_16, *args, **kwargs)

    def function_41(var_14, var_16, var_17=None):
        if var_16.is_add_view and var_17 is not None:
            raise Exception()
        if not var_16.is_add_view and var_17 is None:
            raise Exception()
        return super(GetFormsetsArgumentCheckingAdmin, var_14).get_formsets_with_inlines(var_16, var_17)


var_99 = django.contrib.admin.AdminSite(var_74=admin)
var_99.site_url = /my-var_99-url/
var_99.register(var_5, ArticleAdmin)
var_99.register(CustomArticle, CustomArticleAdmin)
var_99.register(Section, var_32=True, var_37=[ArticleInline], var_64=['name_property'])
var_99.register(ModelWithStringPrimaryKey)
var_99.register(Color)
var_99.register(Thing, ThingAdmin)
var_99.register(Actor)
var_99.register(Inquisition, InquisitionAdmin)
var_99.register(Sketch, SketchAdmin)
var_99.register(Person, PersonAdmin)
var_99.register(Persona, PersonaAdmin)
var_99.register(Subscriber, SubscriberAdmin)
var_99.register(ExternalSubscriber, ExternalSubscriberAdmin)
var_99.register(OldSubscriber, OldSubscriberAdmin)
var_99.register(Podcast, PodcastAdmin)
var_99.register(Vodcast, VodcastAdmin)
var_99.register(var_48, ParentAdmin)
var_99.register(EmptyModel, EmptyModelAdmin)
var_99.register(Fabric, FabricAdmin)
var_99.register(Gallery, GalleryAdmin)
var_99.register(var_55, PictureAdmin)
var_99.register(Language, LanguageAdmin)
var_99.register(Recommendation, RecommendationAdmin)
var_99.register(Recommender)
var_99.register(Collector, CollectorAdmin)
var_99.register(var_62, CategoryAdmin)
var_99.register(Post, PostAdmin)
var_99.register(var_68, FieldOverridePostAdmin)
var_99.register(Gadget, GadgetAdmin)
var_99.register(Villain)
var_99.register(SuperVillain)
var_99.register(Plot)
var_99.register(PlotDetails)
var_99.register(PlotProxy, PlotReadonlyAdmin)
var_99.register(CyclicOne)
var_99.register(CyclicTwo)
var_99.register(WorkHour, WorkHourAdmin)
var_99.register(Reservation)
var_99.register(FoodDelivery, FoodDeliveryAdmin)
var_99.register(RowLevelChangePermissionModel, RowLevelChangePermissionModelAdmin)
var_99.register(Paper, PaperAdmin)
var_99.register(CoverLetter, CoverLetterAdmin)
var_99.register(ShortMessage, ShortMessageAdmin)
var_99.register(Telegram, TelegramAdmin)
var_99.register(Story, StoryAdmin)
var_99.register(OtherStory, OtherStoryAdmin)
var_99.register(Report, ReportAdmin)
var_99.register(MainPrepopulated, MainPrepopulatedAdmin)
var_99.register(UnorderedObject, UnorderedObjectAdmin)
var_99.register(UndeletableObject, UndeletableObjectAdmin)
var_99.register(UnchangeableObject, UnchangeableObjectAdmin)
var_99.register(State, StateAdmin)
var_99.register(var_95, CityAdmin)
var_99.register(var_96, RestaurantAdmin)
var_99.register(var_97, WorkerAdmin)
var_99.register(FunkyTag, FunkyTagAdmin)
var_99.register(ReferencedByParent)
var_99.register(ChildOfReferer)
var_99.register(ReferencedByInline)
var_99.register(InlineReferer, InlineRefererAdmin)
var_99.register(ReferencedByGenRel)
var_99.register(GenRelReference)










var_99.register(Book, var_37=[ChapterInline])
var_99.register(Promo)
var_99.register(ChapterXtra1, ChapterXtra1Admin)
var_99.register(Pizza, PizzaAdmin)
var_99.register(Topping, ToppingAdmin)
var_99.register(Album, AlbumAdmin)
var_99.register(Question)
var_99.register(Answer)
var_99.register(PrePopulatedPost, PrePopulatedPostAdmin)
var_99.register(ComplexSortedPerson, ComplexSortedPersonAdmin)
var_99.register(FilteredManager, CustomManagerAdmin)
var_99.register(PluggableSearchPerson, PluggableSearchPersonAdmin)
var_99.register(PrePopulatedPostLargeSlug, PrePopulatedPostLargeSlugAdmin)
var_99.register(AdminOrderedField, AdminOrderedFieldAdmin)
var_99.register(AdminOrderedModelMethod, AdminOrderedModelMethodAdmin)
var_99.register(AdminOrderedAdminMethod, AdminOrderedAdminMethodAdmin)
var_99.register(AdminOrderedCallable, AdminOrderedCallableAdmin)
var_99.register(Color2, CustomTemplateFilterColorAdmin)
var_99.register(Simple, AttributeErrorRaisingAdmin)
var_99.register(UserMessenger, MessageTestingAdmin)
var_99.register(Choice, ChoiceList)
var_99.register(ParentWithDependentChildren, ParentWithDependentChildrenAdmin)
var_99.register(EmptyModelHidden, EmptyModelHiddenAdmin)
var_99.register(EmptyModelVisible, EmptyModelVisibleAdmin)
var_99.register(EmptyModelMixin, EmptyModelMixinAdmin)
var_99.register(StumpJoke)
var_99.register(Recipe)
var_99.register(Ingredient)
var_99.register(NotReferenced)
var_99.register(ExplicitlyProvidedPK, GetFormsetsArgumentCheckingAdmin)
var_99.register(ImplicitlyGeneratedPK, GetFormsetsArgumentCheckingAdmin)

var_99.register(User, UserAdmin)
var_99.register(Group, GroupAdmin)


var_100 = django.contrib.admin.AdminSite(var_74=namespaced_admin)
var_100.register(User, UserAdmin)
var_100.register(Group, GroupAdmin)
var_100.register(ParentWithUUIDPK)
var_100.register(
    RelatedWithUUIDPKModel,
    var_12=['pk', 'parent'],
    var_30=['parent'],
    var_27=['parent'],
)

var_101 = django.contrib.admin.AdminSite(var_74=admin7)
var_101.register(var_5, ArticleAdmin2)
