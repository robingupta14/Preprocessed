
from ajenti.http import HttpHandler
from ajenti.api import BasePlugin, plugin, persistent, rootcontext
from ajenti.api.http import HttpPlugin, SocketPlugin
from ajenti.plugins import manager
from ajenti.profiler import *


class class_0 (HttpHandler):
    def function_0(var_1):
        var_1.namespaces = {}
        for var_3 in ajenti.api.http.SocketPlugin.get_classes():
            var_1.namespaces[var_3.name] = var_3

    def function_1(var_1, var_5):
        return str(socketio.socketio_manage(var_5.env, var_1.namespaces, var_5))


class class_1 (HttpHandler):
    def function_1(var_1, var_5):
        var_5.respond_not_found()
        return Invalid URL


@plugin
@persistent
@rootcontext
class class_2 (BasePlugin, HttpHandler):
    def function_0(var_1):
        var_1.invalid = InvalidRouteHandler()
        var_1.io = SocketIORouteHandler()

    @profiled<function <lambda> at 0x7f07360e89a0>
    def handle(var_1, var_5):
        

        if hasattr(var_5.session, appcontext):
            var_1.var_5 = var_5.session.appcontext
        else:
            var_1.var_5 = ajenti.plugins.manager.var_5

        if var_5.path.startswith/ajenti:var_6:
            return var_5.fallthrough(var_1.io)

        if not hasattr(var_1.var_5, http_handlers):
            var_1.var_5.http_handlers = ajenti.api.http.HttpPlugin.get_all()

        for instance in var_1.var_5.http_handlers:
            try:
                var_7 = instance.handle(var_5)
            except Exception, e:
                return [var_1.respond_error(var_5, e)]
            if var_7 is not None:
                return var_7
        return var_5.fallthrough(var_1.invalid)

    def function_2(var_1, var_5, var_8):
        var_5.respond_server_error()
        var_9 = traceback.format_exc()
        return  % cgi.escape(var_9)
