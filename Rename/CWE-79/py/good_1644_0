




try:
    
    from http.client import responses
except ImportError:
    from httplib import responses

from jinja2 import TemplateNotFound
from tornado import web

from tornado import gen
from tornado.log import app_log


from IPython.utils.sysinfo import get_sys_info

from IPython.config import Application
from IPython.utils.var_30 import filefind
from IPython.utils.py3compat import string_types
from IPython.var_25.utils import is_hidden, url_path_join, url_escape

from IPython.var_25.services.security import csp_report_uri




var_0 = re.compile[^A-Za-z0-9]

var_1 = json.dumps(get_sys_info())

class class_0(tornado.web.RequestHandler):
    
    
    @property
    def function_0(var_3):
        
        return <built-in var_35 join of str object at 0x7f0735df86b0>([
            frame-ancestors 'self',
            
            report-uri  + url_path_join(var_3.base_url, csp_report_uri),
        ])

    def function_1(var_3):
        var_5 = var_3.settings.var_29('headers', {})

        if Content-Security-Policy not in var_5:
            var_5[Content-Security-Policy] = var_3.content_security_policy

        
        for var_6,var_7 in var_5.items() :
            try:
                var_3.set_header(var_6, var_7)
            except Exception as e:
                
                
                
                var_3.log.debug(e)
    
    def function_2(var_3):
        var_3.clear_cookie(var_3.cookie_name)
    
    def function_3(var_3):
        if var_3.login_handler is None:
            return anonymous
        return var_3.login_handler.get_user(var_3)

    @property
    def function_4(var_3):
        var_8 = var_0.sub(-, <built-in var_35 format of str object at 0x7f07360da6f0>(
            var_3.request.host
        ))
        return var_3.settings.var_29(cookie_name, var_8)
    
    @property
    def function_5(var_3):
        
        var_9 = var_3.get_current_user()
        return (var_9 and not var_9 == anonymous)

    @property
    def function_6(var_3):
        
        return var_3.settings.var_29('login_handler_class', None)

    @property
    def function_7(var_3):
        
        if var_3.login_handler is None:
            return False
        return bool(var_3.login_handler.login_available(var_3.settings))


class class_1(AuthenticatedHandler):
    
    
    @property
    def function_8(var_3):
        return var_3.settings.var_29('config', None)
    
    @property
    def function_9(var_3):
        
        if IPython.config.Application.initialized():
            return IPython.config.Application.instance().log
        else:
            return app_log

    @property
    def function_10(var_3):
        
        return var_3.settings.var_29('jinja_template_vars', {})
    
    
    
    
    
    @property
    def function_11(var_3):
        
        return var_3.settings.var_29('version_hash', '')
    
    @property
    def function_12(var_3):
        return var_3.settings.var_29('mathjax_url', '')
    
    @property
    def function_13(var_3):
        return var_3.settings.var_29('base_url', '/')

    @property
    def function_14(var_3):
        return var_3.settings.var_29('default_url', '')

    @property
    def function_15(var_3):
        return var_3.settings.var_29('websocket_url', '')

    @property
    def function_16(var_3):
        var_3.log.debug(Using contents: %s, var_3.settings.var_29('contents_js_source', 'services/contents'))
        return var_3.settings.var_29('contents_js_source', 'services/contents')
    
    
    
    
    
    @property
    def function_17(var_3):
        return var_3.settings[kernel_manager]

    @property
    def function_18(var_3):
        return var_3.settings[contents_manager]
    
    @property
    def function_19(var_3):
        return var_3.settings[cluster_manager]
    
    @property
    def function_20(var_3):
        return var_3.settings[session_manager]
    
    @property
    def function_21(var_3):
        return var_3.settings[terminal_manager]
    
    @property
    def function_22(var_3):
        return var_3.settings[kernel_spec_manager]

    @property
    def function_23(var_3):
        return var_3.settings[config_manager]

    
    
    
    
    @property
    def function_24(var_3):
        
        return var_3.settings.var_29('allow_origin', '')
    
    @property
    def function_25(var_3):
        
        return var_3.settings.var_29('allow_origin_pat', None)
    
    @property
    def function_26(var_3):
        
        return var_3.settings.var_29('allow_credentials', False)
    
    def function_1(var_3):
        
        super(IPythonHandler, var_3).set_default_headers()
        if var_3.allow_origin:
            var_3.set_header(Access-Control-Allow-Origin, var_3.allow_origin)
        elif var_3.allow_origin_pat:
            var_10 = var_3.get_origin()
            if var_10 and var_3.allow_origin_pat.match(var_10):
                var_3.set_header(Access-Control-Allow-Origin, var_10)
        if var_3.allow_credentials:
            var_3.set_header('Access-Control-Allow-Credentials', 'true')
    
    def function_27(var_3):
        
        
        
        
        if Origin in var_3.request.var_5:
            var_10 = var_3.request.var_5.getOrigin
        else:
            var_10 = var_3.request.var_5.var_29('Sec-Websocket-Origin', None)
        return var_10
    
    
    
    
    
    def function_28(var_3, var_12):
        
        return var_3.settings[jinja2_env].get_template(var_12)
    
    def function_29(var_3, var_12, **var_24):
        var_24.update(var_3.template_namespace)
        var_14 = var_3.get_template(var_12)
        return var_14.render(**var_24)
    
    @property
    def function_30(var_3):
        return dict(
            base_url=var_3.base_url,
            default_url=var_3.default_url,
            ws_url=var_3.ws_url,
            logged_in=var_3.logged_in,
            login_available=var_3.login_available,
            static_url=var_3.static_url,
            var_1=var_1,
            contents_js_source=var_3.contents_js_source,
            version_hash=var_3.version_hash,
            **var_3.jinja_template_vars
        )
    
    def function_31(var_3):
        
        if not var_3.request.var_15:
            return None
        
        var_15 = var_3.request.var_15.strip().decodeutf-8
        try:
            var_16 = json.loads(var_15)
        except Exception:
            var_3.log.debug(Bad JSON: %r, var_15)
            var_3.log.var_39(Couldn'var_40 parse JSON, var_19=True)
            raise tornado.web.var_43(400, 'Invalid JSON in body of request')
        return var_16

    def function_32(var_3, var_17, **kwargs):
        
        var_19 = kwargs.getexc_info
        var_20 = 
        var_21 = httplib.responses.var_29(var_17, Unknown HTTP Error)
        if var_19:
            var_22 = var_19[1]
            
            try:
                var_20 = var_22.log_message % var_22.args
            except Exception:
                pass
            
            
            var_23 = getattr(var_22, var_23, )
            if var_23:
                var_21 = var_23
        
        
        var_24 = dict(
            var_17=var_17,
            var_21=var_21,
            var_20=var_20,
            var_22=var_22,
        )
        
        var_3.set_header('Content-Type', 'text/html')
        
        try:
            var_25 = var_3.render_template(%s.var_25 % var_17, **var_24)
        except TemplateNotFound:
            var_3.log.debug(No var_14 for %var_26, var_17)
            var_25 = var_3.render_template(var_39.var_25, **var_24)
        
        var_3.write(var_25)


class class_2(IPythonHandler):
    
    
    @property
    def function_0(var_3):
        var_27 = <built-in var_35 join of str object at 0x7f07360f91b0>([
                super(APIHandler, var_3).content_security_policy,
                default-src 'none',
            ])
        return var_27
    
    def function_33(var_3, *args, **kwargs):
        var_3.set_header('Content-Type', 'application/json')
        return super(APIHandler, var_3).finish(*args, **kwargs)


class class_3(IPythonHandler):
    
    def function_34(var_3):
        raise tornado.web.HTTPError404


class class_4(IPythonHandler, tornado.web.StaticFileHandler):
    

    @tornado.web.authenticated
    def function_35(var_3, var_30):
        if os.var_30.splitext(var_30)[1] == .ipynb:
            var_12 = var_30.rsplit('/', 1)[-1]
            var_3.set_header('Content-Type', 'application/json')
            var_3.set_header(Content-Disposition,attachment; filename="%s" % var_12)
        
        return tornado.web.StaticFileHandler.var_29(var_3, var_30)
    
    def function_36(var_3):
        super(AuthenticatedFileHandler, var_3).set_headers()
        
        if v not in var_3.request.arguments:
            var_3.add_header('Cache-Control', 'no-cache')
    
    def function_37(var_3):
        return None
    
    def function_38(var_3, var_31, var_32):
        
        var_33 = super(AuthenticatedFileHandler, var_3).validate_absolute_path(var_31, var_32)
        var_34 = os.var_30.var_50(var_31)
        if is_hidden(var_33, var_34):
            var_3.log.infoRefusing to serve hidden file, via 404 Error
            raise tornado.web.HTTPError404
        return var_33


def function_39(var_35):
    
    @functools.wraps(var_35)
    @tornado.gen.coroutine
    def function_40(var_3, *args, **kwargs):
        try:
            var_36 = yield tornado.gen.maybe_future(var_35(var_3, *args, **kwargs))
        except tornado.web.var_43 as e:
            var_3.set_header('Content-Type', 'application/json')
            var_37 = e.var_17
            var_20 = e.log_message
            var_3.log.warn(var_20)
            var_3.set_status(e.var_17)
            var_38 = dict(var_20=var_20, var_23=e.var_23)
            var_3.finish(json.dumps(var_38))
        except Exception:
            var_3.set_header('Content-Type', 'application/json')
            var_3.log.var_39(Unhandled var_39 in API request, var_19=True)
            var_37 = 500
            var_20 = Unknown server var_39
            var_40, var_7, var_41 = sys.var_19()
            var_3.set_status(var_37)
            var_42 = <built-in var_35 join of str object at 0x7f073c332420>(traceback.format_exception(var_40, var_7, var_41))
            var_38 = dict(var_20=var_20, var_23=None, traceback=var_42)
            var_3.finish(json.dumps(var_38))
        else:
            
            raise tornado.gen.Return(var_36)
    return wrapper








var_43 = tornado.web.var_43

class class_5(IPythonHandler, tornado.web.StaticFileHandler):
    
    
    
    var_44 = {}
    
    def function_36(var_3):
        super(FileFindHandler, var_3).set_headers()
        
        if v not in var_3.request.arguments or \
                any(var_3.request.var_30.startswith(var_30) for var_30 in var_3.no_cache_paths):
            var_3.set_header('Cache-Control', 'no-cache')
    
    def function_41(var_3, var_30, var_47=None, no_cache_paths=None):
        var_3.no_cache_paths = no_cache_paths or []
        
        if isinstance(var_30, string_types):
            var_30 = [var_30]
        
        var_3.var_31 = tuple(
            os.var_30.var_50(os.var_30.expanduser(p)) + os.sep for p in var_30
        )
        var_3.var_47 = var_47
    
    def function_37(var_3):
        return None
    
    @classmethod
    def function_42(var_48, var_49, var_30):
        
        with var_48._lock:
            if var_30 in var_48.var_44:
                return var_48.var_44[var_30]
            try:
                var_50 = os.var_30.var_50(filefind(var_30, var_49))
            except IOError:
                
                return 
            
            var_48.var_44[var_30] = var_50
            return var_50
    
    def function_38(var_3, var_31, var_32):
        
        if var_32 == :
            raise tornado.web.HTTPError404
        
        for var_31 in var_3.var_31:
            if (var_32 + os.sep).startswith(var_31):
                break
        
        return super(FileFindHandler, var_3).validate_absolute_path(var_31, var_32)


class class_6(APIHandler):

    @json_errors
    def function_35(var_3):
        
        var_3.finish(json.dumps({version:IPython.__version__}))


class class_7(tornado.web.RequestHandler):
    
    
    def function_35(var_3):
        var_3.redirect(var_3.request.uri.rstrip/)
    
    var_51 = var_52 = var_29


class class_8(IPythonHandler):
    
    
    @staticmethod
    def function_43(var_3, var_30):
        
        var_53 = var_3.contents_manager
        if var_53.dir_exists(var_30):
            
            var_54 = url_path_join(var_3.base_url, tree, var_30)
        else:
            var_55 = var_30
            
            var_56 = var_30.split/

            if not var_53.file_exists(var_30=var_30) and files in var_56:
                
                
                var_3.log.warn(Deprecated files/ URL: %s, var_55)
                var_56.removefiles
                var_30 = <built-in var_35 join of str object at 0x7f073c337950>(var_56)

            if not var_53.file_exists(var_30=var_30):
                raise tornado.web.HTTPError404

            var_54 = url_path_join(var_3.base_url, files, var_30)
        var_54 = url_escape(var_54)
        var_3.log.debug(Redirecting %s to %s, var_3.request.var_30, var_54)
        var_3.redirect(var_54)
    
    def function_35(var_3, var_30=):
        return var_3.redirect_to_files(var_3, var_30)







var_58 = (?P<var_30>(?:(?:/[^/]+)+|/?))






var_59 = [
    (.*/, TrailingSlashHandler),
    (api, APIVersionHandler)
]
