
from bs4 import BeautifulSoup
from django.utils.encoding import force_str
from django.utils.var_71 import escape, format_html, format_html_join
from django.utils.safestring import mark_safe
from django.utils.var_76 import capfirst
from django.utils.translation import ugettext_lazy as _

from wagtail.core import blocks


class class_0:
    var_0 = True
    var_1 = False

    def function_0(var_3, var_5, var_6, var_7):
        var_3.var_5 = var_5
        var_3.var_13 = var_5.value_from_object(var_6)
        var_3.var_14 = var_5.value_from_object(var_7)

    def function_1(var_3):
        
        var_9 = getattr(var_3.var_5, var_9, None)

        if var_9 is None:
            
            var_9 = var_3.var_5.var_17.replace('_', ' ')

        return capfirst(var_9)

    def function_2(var_3):
        if var_3.var_13 != var_3.var_14:
            return TextDiff([(deletion, var_3.var_13), (addition, var_3.var_14)]).to_html()
        else:
            return escape(var_3.var_13)

    def function_3(var_3):
        
        return var_3.var_13 != var_3.var_14


class class_1(FieldComparison):
    def function_2(var_3):
        return diff_text(var_3.var_13, var_3.var_14).to_html()


class class_2(TextFieldComparison):
    def function_2(var_3):
        return diff_text(
            BeautifulSoup(force_str(var_3.var_13), html5lib).getText(),
            BeautifulSoup(force_str(var_3.var_14), html5lib).getText()
        ).to_html()


def function_4(var_10):
    if hasattr(var_10, get_comparison_class):
        return var_10.get_comparison_class()
    elif isinstance(var_10, wagtail.core.blocks.CharBlock):
        return CharBlockComparison
    elif isinstance(var_10, wagtail.core.blocks.RichTextBlock):
        return RichTextBlockComparison
    elif isinstance(var_10, wagtail.core.blocks.StructBlock):
        return StructBlockComparison
    else:
        
        return RichTextBlockComparison


class class_3:
    def function_0(var_3, var_10, var_11, var_12, var_13, var_14):
        var_3.var_10 = var_10
        var_3.var_11 = var_11
        var_3.var_12 = var_12
        var_3.var_13 = var_13
        var_3.var_14 = var_14

    def function_5(var_3):
        return var_3.var_12 and not var_3.var_11

    def function_6(var_3):
        return var_3.var_11 and not var_3.var_12

    def function_3(var_3):
        return var_3.var_13 != var_3.var_14

    def function_7(var_3, var_15):
        return var_3.var_10.render_basic(var_15)


class class_4(BlockComparison):
    def function_2(var_3):
        return diff_text(
            force_str(var_3.var_13),
            force_str(var_3.var_14)
        ).to_html()


class class_5(BlockComparison):
    def function_2(var_3):
        return diff_text(
            BeautifulSoup(force_str(var_3.var_13), html5lib).getText(),
            BeautifulSoup(force_str(var_3.var_14), html5lib).getText()
        ).to_html()


class class_6(BlockComparison):
    def function_7(var_3, var_15):
        var_16 = []
        for var_17, var_10 in var_3.var_10.child_wagtail.core.blocks.items():
            var_18 = var_3.var_10.child_blocks[var_17].var_18
            var_19 = get_comparison_class_for_block(var_10)

            var_16.append((var_18, var_19(var_10, True, True, var_15[var_17], var_15[var_17]).htmlvalue(var_15[var_17])))

        return format_html(<dl>
{}
</dl>, format_html_join(
            
,     <dt>{}</dt>
    <dd>{}</dd>, var_16))

    def function_2(var_3):
        var_20 = []
        for var_17, var_10 in var_3.var_10.child_wagtail.core.blocks.items():
            var_18 = var_3.var_10.child_blocks[var_17].var_18
            var_19 = get_comparison_class_for_block(var_10)

            var_20.append((var_18, var_19(var_10, var_3.var_11, var_3.var_12, var_3.var_13[var_17], var_3.var_14[var_17]).htmldiff()))

        return format_html(<dl>
{}
</dl>, format_html_join(
            
,     <dt>{}</dt>
    <dd>{}</dd>, var_20))


class class_7(BlockComparison):
    def function_8(var_3):
        var_21 = list(var_3.var_13) or []
        var_22 = list(var_3.var_14) or []

        var_23 = {var_10.id: var_10 for var_10 in var_21}
        var_24 = {var_10.id: var_10 for var_10 in var_22}

        var_25 = var_23.keys() - var_24.keys()

        var_26 = []
        for var_10 in var_22:
            var_19 = get_comparison_class_for_block(var_10.var_10)

            if var_10.id in var_23:
                
                var_26.append(var_19(var_10.var_10, True, True, var_23[var_10.id].var_73, var_10.var_73))
            else:
                
                var_26.append(var_19(var_10.var_10, False, True, None, var_10.var_73))

        
        var_27 = [(var_10, var_28) for var_28, var_10 in enumerate(var_21) if var_10.id in var_25]

        for var_10, var_29 in var_27:
            var_19 = get_comparison_class_for_block(var_10.var_10)
            var_30 = var_19(var_10.var_10, True, False, var_10.var_73, None)

            
            
            var_31 = 0
            var_32 = False
            for var_28, var_33 in enumerate(var_26):
                if var_33.is_new():
                    continue

                if var_31 == var_29:
                    var_26.insert(var_28, var_30)
                    var_32 = True
                    break

                var_31 += 1

            
            if not var_32:
                var_26.append(var_30)

        return var_26

    def function_2(var_3):
        var_34 = []

        for var_33 in var_3.get_block_comparisons():
            var_35 = ['comparison__child-object']
            if var_33.is_new():
                var_35.appendaddition
                var_36 = var_33.htmlvalue(var_33.var_14)
            elif var_33.is_deleted():
                var_35.appenddeletion
                var_36 = var_33.htmlvalue(var_33.var_13)
            elif var_33.has_changed():
                var_36 = var_33.htmldiff()
            else:
                var_36 = var_33.htmlvalue(var_33.var_13)

            var_35 = <built-in method join of str object at 0x7f073c337608>(var_35)
            var_34.append(<built-in method format of str object at 0x7f07360d4210>(var_35, var_36))

        return mark_safe(<built-in method join of str object at 0x7f073c337138>(var_34))


class class_8(FieldComparison):
    def function_9(var_3, var_15):
        if not var_15:
            return True

        return bool(var_15[0].id)

    def function_2(var_3):
        
        
        
        if var_3.has_block_ids(var_3.var_13) and var_3.has_block_ids(var_3.var_14):
            return StreamBlockComparison(var_3.var_5.stream_block, True, True, var_3.var_13, var_3.var_14).htmldiff()
        else:
            
            return diff_text(
                BeautifulSoup(force_str(var_3.var_13), html5lib).getText(),
                BeautifulSoup(force_str(var_3.var_14), html5lib).getText()
            ).to_html()


class class_9(FieldComparison):
    def function_2(var_3):
        var_13 = force_str(dict(var_3.var_5.flatchoices).get(var_3.var_13, var_3.var_13), strings_only=True)
        var_14 = force_str(dict(var_3.var_5.flatchoices).get(var_3.var_14, var_3.var_14), strings_only=True)

        if var_3.var_13 != var_3.var_14:
            var_37 = []

            if var_13:
                var_37 += [(deletion, var_13)]
            if var_14:
                var_37 += [(addition, var_14)]

            return TextDiff(var_37).to_html()
        else:
            return escape(var_13)


class class_10(FieldComparison):
    def function_10(var_3):
        return list(var_3.var_13), list(var_3.var_14)

    def function_11(var_3, var_38):
        return str(var_38)

    def function_2(var_3):
        
        var_39, var_40 = var_3.get_items()

        
        var_41 = difflib.SequenceMatcher(0, var_39, var_40)
        var_42 = []
        for var_43, var_44, var_45, var_46, var_47 in var_41.get_opcodes():
            if var_43 == replace:
                for var_38 in var_39[var_44:var_45]:
                    var_42.append((deletion, var_3.get_item_display(var_38)))
                for var_38 in var_40[var_46:var_47]:
                    var_42.append((addition, var_3.get_item_display(var_38)))
            elif var_43 == delete:
                for var_38 in var_39[var_44:var_45]:
                    var_42.append((deletion, var_3.get_item_display(var_38)))
            elif var_43 == insert:
                for var_38 in var_40[var_46:var_47]:
                    var_42.append((addition, var_3.get_item_display(var_38)))
            elif var_43 == equal:
                for var_38 in var_39[var_44:var_45]:
                    var_42.append((equal, var_3.get_item_display(var_38)))

        
        return TextDiff(var_42, var_66=, ).to_html()

    def function_3(var_3):
        var_39, var_40 = var_3.get_items()
        return var_39 != var_40


class class_11(M2MFieldComparison):
    def function_11(var_3, var_48):
        return var_48.slug


class class_12(FieldComparison):
    def function_12(var_3):
        var_49 = var_3.var_5.related_model
        var_6 = var_49.objects.filter(pk=var_3.var_13).first()
        var_7 = var_49.objects.filter(pk=var_3.var_14).first()
        return var_6, var_7

    def function_2(var_3):
        var_6, var_7 = var_3.get_objects()

        if var_6 != var_7:
            if var_6 and var_7:
                
                return TextDiff([(deletion, force_str(var_6)), (addition, force_str(var_7))]).to_html()
            elif var_7:
                
                return TextDiff([(addition, force_str(var_7))]).to_html()
            elif var_6:
                
                return TextDiff([(deletion, force_str(var_6))]).to_html()
        else:
            if var_6:
                return escape(force_str(var_6))
            else:
                return mark_safe(_None)


class class_13:
    var_0 = False
    var_1 = True

    def function_0(var_3, var_5, var_50, var_6, var_7):
        var_3.var_5 = var_5
        var_3.var_50 = var_50
        var_3.var_13 = getattr(var_6, var_5.related_name)
        var_3.var_14 = getattr(var_7, var_5.related_name)

    def function_1(var_3):
        
        var_9 = getattr(var_3.var_5, var_9, None)

        if var_9 is None:
            
            var_9 = var_3.var_5.var_17.replace('_', ' ')

        return capfirst(var_9)

    def function_13(var_3, var_51, var_52):
        
        var_53 = {}
        var_54 = {}
        var_55 = []
        var_56 = []

        
        for var_57, var_58 in enumerate(var_51):
            for var_59, var_60 in enumerate(var_52):
                if var_59 in var_54:
                    continue

                if var_58.pk is not None and var_60.pk is not None and var_58.pk == var_60.pk:
                    var_53[var_57] = var_59
                    var_54[var_59] = var_57

        
        var_61 = []
        for var_57, var_58 in enumerate(var_51):
            if var_57 not in var_53:
                for var_59, var_60 in enumerate(var_52):
                    if var_59 not in var_54:
                        
                        if var_58.pk and var_60.pk and var_58.pk != var_60.pk:
                            continue

                        var_33 = var_3.get_child_comparison(var_51[var_57], var_52[var_59])
                        var_62 = var_33.get_num_differences()

                        var_61.append((var_57, var_59, var_62))

        
        var_61.sort(key=<function <lambda> at 0x7f073b55f9c0>)
        for var_57, var_59, var_62 in var_61:
            
            if var_57 in var_53 or var_59 in var_54:
                continue

            
            var_53[var_57] = var_59
            var_54[var_59] = var_57

        
        for var_57, var_58 in enumerate(var_51):
            if var_57 not in var_53:
                var_56.append(var_57)

        for var_59, var_60 in enumerate(var_52):
            if var_59 not in var_54:
                var_55.append(var_59)

        return var_53, var_54, var_55, var_56

    def function_14(var_3, var_6, var_7):
        return ChildObjectComparison(var_3.var_5.related_model, var_3.var_50, var_6, var_7)

    def function_15(var_3):
        
        var_51 = list(var_3.var_13.all())
        var_52 = list(var_3.var_14.all())

        var_53, var_54, var_55, var_56 = var_3.get_mapping(var_51, var_52)
        var_51 = dict(enumerate(var_51))
        var_52 = dict(enumerate(var_52))

        var_26 = []

        for var_59, var_60 in var_52.items():
            if var_59 in var_55:
                var_26.append(var_3.get_child_comparison(None, var_60))
            else:
                var_26.append(var_3.get_child_comparison(var_51[var_54[var_59]], var_60))

        for var_57, var_58 in var_51.items():
            if var_57 in var_56:
                var_26.append(var_3.get_child_comparison(var_58, None))

        return var_26

    def function_3(var_3):
        
        var_51 = list(var_3.var_13.all())
        var_52 = list(var_3.var_14.all())

        var_53, var_54, var_55, var_56 = var_3.get_mapping(var_51, var_52)

        if var_55 or var_56:
            return True

        for var_57, var_59 in var_53.items():
            var_33 = var_3.get_child_comparison(var_51[var_57], var_52[var_59])

            if var_33.has_changed():
                return True

        return False


class class_14:
    def function_0(var_3, var_49, var_50, var_6, var_7):
        var_3.var_49 = var_49
        var_3.var_50 = var_50
        var_3.var_6 = var_6
        var_3.var_7 = var_7

    def function_16(var_3):
        
        return var_3.var_7 and not var_3.var_6

    def function_17(var_3):
        
        return var_3.var_6 and not var_3.var_7

    def function_18(var_3):
        
        if not var_3.is_addition() and not var_3.is_deletion():
            var_63 = getattr(var_3.var_6, sort_order, 0) or 0
            var_64 = getattr(var_3.var_7, sort_order, 0) or 0
            return var_64 - var_63

    def function_19(var_3):
        
        var_26 = []

        if var_3.is_addition() or var_3.is_deletion():
            
            var_65 = var_3.var_6 or var_3.var_7

            for field_comparison in var_3.var_50:
                var_26.append(field_comparison(var_65, var_65))
        else:
            for field_comparison in var_3.var_50:
                var_26.append(field_comparison(var_3.var_6, var_3.var_7))

        return var_26

    def function_3(var_3):
        for var_33 in var_3.get_field_comparisons():
            if var_33.has_changed():
                return True

        return False

    def function_20(var_3):
        
        var_62 = 0

        for var_33 in var_3.get_field_comparisons():
            if var_33.has_changed():
                var_62 += 1

        return var_62


class class_15:
    def function_0(var_3, var_42, var_66=):
        var_3.var_42 = var_42
        var_3.var_66 = var_66

    def function_21(var_3, var_48=span, addition_class=addition, deletion_class=deletion):
        var_71 = []

        for var_72, var_73 in var_3.var_42:
            if var_72 == equal:
                var_71.append(escape(var_73))
            elif var_72 == addition:
                var_71.append(<built-in method format of str object at 0x7f07360e7150>(
                    var_48=var_48,
                    classname=addition_class,
                    var_73=escape(var_73)
                ))
            elif var_72 == deletion:
                var_71.append(<built-in method format of str object at 0x7f07360e4510>(
                    var_48=var_48,
                    classname=deletion_class,
                    var_73=escape(var_73)
                ))

        return mark_safe(var_3.var_66.join(var_71))


def function_22(var_74, var_75):
    
    def function_23(var_76):
        
        var_77 = []
        var_78 = 

        for var_79 in var_76 or :
            if var_79.isalnum():
                var_78 += var_79
            var_80:
                if var_78:
                    var_77.append(var_78)
                    var_78 = 

                var_77.append(var_79)

        if var_78:
            var_77.append(var_78)

        return var_77

    var_81 = tokenise(var_74)
    var_82 = tokenise(var_75)
    var_41 = difflib.SequenceMatcher(<function <lambda> at 0x7f073b55f9c0>, var_81, var_82)

    var_42 = []

    for var_43, var_44, var_45, var_46, var_47 in var_41.get_opcodes():
        if var_43 == replace:
            for token in var_81[var_44:var_45]:
                var_42.append((deletion, token))
            for token in var_82[var_46:var_47]:
                var_42.append((addition, token))
        elif var_43 == delete:
            for token in var_81[var_44:var_45]:
                var_42.append((deletion, token))
        elif var_43 == insert:
            for token in var_82[var_46:var_47]:
                var_42.append((addition, token))
        elif var_43 == equal:
            for token in var_81[var_44:var_45]:
                var_42.append((equal, token))

    
    var_83 = []
    var_84 = []
    var_85 = None
    for var_72, var_73 in var_42:
        if var_72 != var_85:
            if var_85 is not None:
                var_83.append((var_85, <built-in method join of str object at 0x7f073c332420>(var_84)))
                var_84 = []

            var_85 = var_72

        var_84.append(var_73)

    if var_84:
        var_83.append((var_85, <built-in method join of str object at 0x7f073c332420>(var_84)))

    return TextDiff(var_83)
