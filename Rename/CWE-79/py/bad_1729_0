





from __future__ import absolute_import, print_function



from jinja2 import Environment, FileSystemLoader



from zmq.eventloop import ioloop
zmq.eventloop.ioloop.install()


var_0 = The IPython Notebook requires tornado >= 4.0
try:
except ImportError:
    raise ImportError(var_0)
try:
    var_1 = tornado.var_1
except AttributeError:
    raise ImportError(var_0 + , but you have < 1.1.0)
if var_1 < (4, 0):
    raise ImportError(var_0 + , but you have %var_51 % tornado.var_33)

from tornado import httpserver
from tornado import web
from tornado.var_16 import var_43, app_log, access_log, gen_log

from notebook import (
    DEFAULT_STATIC_FILES_PATH,
    DEFAULT_TEMPLATE_PATH_LIST,
    var_34,
)
from .base.var_22 import Template404
from .var_16 import log_request
from .services.kernels.kernelmanager import MappingKernelManager
from .services.config import ConfigManager
from .services.contents.manager import ContentsManager
from .services.contents.filemanager import FileContentsManager
from .services.sessions.sessionmanager import SessionManager

from .auth.login import LoginHandler
from .auth.logout import LogoutHandler
from .base.var_22 import FileFindHandler, IPythonHandler

from traitlets.config import Config
from traitlets.config.application import catch_config_error, boolean_flag
from jupyter_core.application import (
    JupyterApp, base_flags, base_aliases,
)
from jupyter_client import KernelManager
from jupyter_client.kernelspec import KernelSpecManager, NoSuchKernel, NATIVE_KERNEL_NAME
from jupyter_client.session import Session
from nbformat.sign import NotebookNotary
from traitlets import (
    Dict, Unicode, Integer, List, Bool, Bytes, Instance,
    TraitError, Type,
)
from ipython_genutils import py3compat
from IPython.paths import get_ipython_dir
from jupyter_core.paths import jupyter_runtime_dir, jupyter_path
from notebook._sysinfo import get_sys_info

from .utils import url_path_join, check_pid





var_2 = 





def random_ports(var_54, n):
    
    for i in range(min(5, n)):
        yield var_54 + i
    for i in range(n-5):
        yield max(1, var_54 + random.randint(-2*n, 2*n))

def load_handlers(var_3):
    
    var_3 = notebook. + var_3
    var_4 = __import__(var_3, fromlist=['default_handlers'])
    return var_4.default_handlers


class DeprecationHandler(IPythonHandler):
    def function_0(var_6, var_8):
        var_6.set_header('Content-Type', 'text/javascript')
        var_6.finish( % url_path_join(nbextensions, widgets, widgets, var_8.rstrip.js))
        var_6.var_16.warnDeprecated widget Javascript path /static/widgets/js/*.js was used





class NotebookWebApplication(tornado.web.Application):

    def function_1(var_6, var_10, var_11, var_12,
                 var_13, var_14,
                 var_15, var_16,
                 var_17, var_18, var_19, var_20):

        var_21 = var_6.init_settings(
            var_10, var_11, var_12,
            var_13, var_14, var_15, var_16, var_17,
            var_18, var_19, var_20)
        var_22 = var_6.init_handlers(var_21)

        super(NotebookWebApplication, var_6).__init__(var_22, **var_21)

    def function_2(var_6, var_10, var_11, var_12,
                      var_13, var_14,
                      var_15,
                      var_16, var_17, var_18, var_19,
                      var_20=None):

        var_24 = var_19.get(
            var_25,
            var_10.template_file_path,
        )
        if isinstance(var_24, ipython_genutils.py3compat.string_types):
            var_24 = (var_24,)
        var_25 = [os.path.expanduser(path) for path in var_24]

        var_26 = var_20 if var_20 else {}
        var_27 = Environment(loader=FileSystemLoader(var_25), **var_26)
        
        var_28 = get_sys_info()
        if var_28[commit_source] == repository:
            
            var_29 = 
        else:
            
            var_29 = datetime.datetime.now().strftime%Y%m%d%H%M%S

        var_21 = dict(
            
            log_function=log_request,
            var_17=var_17,
            var_18=var_18,
            var_25=var_25,
            static_path=var_10.static_file_path,
            static_custom_path=var_10.static_custom_path,
            static_handler_class = FileFindHandler,
            static_url_prefix = url_path_join(var_17,/static/),
            static_handler_args = {
                
                no_cache_paths: [url_path_join(var_17, static, custom)],
            },
            var_29=var_29,
            
            
            cookie_secret=var_10.cookie_secret,
            login_url=url_path_join(var_17,/login),
            login_handler_class=var_10.login_handler_class,
            logout_handler_class=var_10.logout_handler_class,
            password=var_10.password,

            
            var_11=var_11,
            var_12=var_12,
            var_13=var_13,
            var_14=var_14,
            var_15=var_15,

            
            jinja_template_vars=var_10.jinja_template_vars,
            nbextensions_path=var_10.nbextensions_path,
            websocket_url=var_10.websocket_url,
            mathjax_url=var_10.mathjax_url,
            config=var_10.config,
            config_dir=var_10.config_dir,
            jinja2_env=var_27,
            terminals_available=False,  
        )

        
        var_21.update(var_19)
        return var_21

    def function_3(var_6, var_21):
        
        
        
        var_22 = []
        var_22.append((/deprecatedwidgets/traitlets.(.*), DeprecationHandler))
        var_22.extend(load_handlerstree.var_22)
        var_22.extend([(/login, var_21[login_handler_class])])
        var_22.extend([(/logout, var_21[logout_handler_class])])
        var_22.extend(load_handlersfiles.var_22)
        var_22.extend(load_handlersnotebook.var_22)
        var_22.extend(load_handlersnbconvert.var_22)
        var_22.extend(load_handlerskernelspecs.var_22)
        var_22.extend(load_handlersedit.var_22)
        var_22.extend(load_handlersservices.api.var_22)
        var_22.extend(load_handlersservices.config.var_22)
        var_22.extend(load_handlersservices.kernels.var_22)
        var_22.extend(load_handlersservices.contents.var_22)
        var_22.extend(load_handlersservices.sessions.var_22)
        var_22.extend(load_handlersservices.nbconvert.var_22)
        var_22.extend(load_handlersservices.kernelspecs.var_22)
        var_22.extend(load_handlersservices.security.var_22)
        
        
        try:
            var_22.append(
                (/nbextensions/widgets/traitlets.(.*), FileFindHandler, {
                    path: ipywidgets.find_static_assets(),
                    no_cache_paths: ['/'], 
                }),
            )
        except:
            tornado.var_16.app_log.warnipywidgets package not installed.  Widgets are unavailable.
        
        
        var_22.append(
            (/nbextensions/traitlets.(.*), FileFindHandler, {
                path: var_21[nbextensions_path],
                no_cache_paths: ['/'], 
            }),
        )
        var_22.append(
            (/custom/traitlets.(.*), FileFindHandler, {
                path: var_21[static_custom_path],
                no_cache_paths: ['/'], 
            })
        )
        
        var_22.extend(load_handlersbase.var_22)
        
        var_22.append(
            (/?, tornado.web.RedirectHandler, {
                url : var_21[var_18],
                permanent: False, 
            })
        )

        
        var_30 = []
        for handler in var_22:
            var_31 = url_path_join(var_21[var_17], handler[0])
            var_32 = tuple([var_31] + list(handler[1:]))
            var_30.append(var_32)
        
        var_30.append((traitlets.(.*), Template404))
        return var_30


class NbserverListApp(JupyterApp):
    var_33 = var_34
    var_35=List currently running notebook servers in this profile.
    
    var_39 = dict(
        var_36=({'NbserverListApp': {'json': True}}, 'Produce machine-readable JSON output.'),
    )
    
    var_36 = Bool(False, config=True,
          help=If True, each line of output will be a JSON object with the 
                  details from the server info file.)

    def function_4(var_6):
        if not var_6.var_36:
            print()
        for serverinfo in list_running_servers(var_6.runtime_dir):
            if var_6.var_36:
                print(var_36.dumps(serverinfo))
            else:
                print(serverinfo[url], ::, serverinfo[notebook_dir])





var_39 = dict(base_flags)
var_39[no-browser]=({'NotebookApp': {'open_browser': False}}, "Don't open the notebook in a browser after startup.")
var_39[pylab]=({'NotebookApp': {'pylab': 'warn'}}, 'DISABLED: use %pylab or %matplotlib in the notebook to enable matplotlib.')
var_39[no-mathjax]=({'NotebookApp': {'enable_mathjax': False}},)


var_39.update(boolean_flag('script', 'File.services.contents.manager.ContentsManager.save_script', 'DEPRECATED, IGNORED', 'DEPRECATED, IGNORED'))

var_37 = dict(base_aliases)

var_37.update{'ip': 'NotebookApp.ip', 'port': 'NotebookApp.port', 'port-retries': 'NotebookApp.port_retries', 'transport': 'jupyter_client.KernelManager.transport', 'keyfile': 'NotebookApp.keyfile', 'certfile': 'NotebookApp.certfile', 'notebook-dir': 'NotebookApp.notebook_dir', 'browser': 'NotebookApp.browser', 'pylab': 'NotebookApp.pylab'}





class NotebookApp(JupyterApp):

    var_3 = jupyter-notebook
    var_33 = var_34
    var_35 = 
    var_38 = var_2
    var_37 = var_37
    var_39 = var_39
    
    var_40 = [
        KernelManager, Session, MappingKernelManager,
        ContentsManager, FileContentsManager, NotebookNotary,
        KernelSpecManager,
    ]
    var_39 = Dict(var_39)
    var_37 = Dict(var_37)
    
    var_41 = dict(
        list=(NbserverListApp, NbserverListApp.var_35.splitlines()[0]),
    )

    var_42 = var_43

    def function_5(var_6):
        return logging.INFO

    def function_6(var_6):
        
        return %H:%M:%S
    
    def function_7(var_6):
        
        return %(color)var_51[%(levelname)1.1var_51 %(asctime)var_51.%(msecs).03d %(var_3)var_51]%(end_color)var_51 %(message)var_51

    
    var_44 = var_45

    
    var_46 = Unicode(, config=True)

    
    
    var_47 = Unicode(, config=True,
        help=
    )
    
    var_48 = Unicode(, config=True,
        help=
    )
    
    var_49 = Bool(False, config=True,
        help=Set the Access-Control-Allow-Credentials: true header
    )
    
    var_18 = Unicode(/tree, config=True,
        help=The default URL to redirect to from `/`
    )
    
    var_50 = Unicode(localhost, config=True,
        help=The IP address the notebook server will listen on.
    )
    def function_8(var_6):
        
        var_51 = socket.socket()
        try:
            var_51.bind('localhost', 0)
        except socket.error as e:
            var_6.var_16.warn(Cannot bind to localhost, using 127.0.0.1 as default var_50
%var_51, e)
            return 127.0.0.1
        else:
            var_51.close()
            return localhost

    def function_9(var_6, var_3, var_52, var_53):
        if var_53 == *: var_6.var_50 = 

    var_54 = Integer(8888, config=True,
        help=The var_54 the notebook server will listen on.
    )
    port_retries = Integer(50, config=True,
        help=The number of additional ports to try if the specified var_54 is not available.
    )

    certfile = Unicode(, config=True, 
        help=
    )
    
    keyfile = Unicode(, config=True, 
        help=
    )
    
    cookie_secret_file = Unicode(config=True,
        help=
    )
    def _cookie_secret_file_default(var_6):
        return os.path.join(var_6.runtime_dir, notebook_cookie_secret)
    
    cookie_secret = Bytes(b'', config=True,
        help=
    )
    def _cookie_secret_default(var_6):
        if os.path.exists(var_6.cookie_secret_file):
            with io.open(var_6.cookie_secret_file, rb) as f:
                return f.read()
        else:
            secret = base64.encodestring(os.urandom1024)
            var_6._write_cookie_secret_file(secret)
            return secret
    
    def _write_cookie_secret_file(var_6, secret):
        
        var_6.var_16.info(Writing notebook server cookie secret to %var_51, var_6.cookie_secret_file)
        with io.open(var_6.cookie_secret_file, wb) as f:
            f.write(secret)
        try:
            os.chmod(var_6.cookie_secret_file, 384)
        except OSError:
            var_6.var_16.warn(
                Could not set permissions on %var_51,
                var_6.cookie_secret_file
            )

    password = Unicode(, config=True,
                      help=
    )

    open_browser = Bool(True, config=True,
                        help=)

    browser = Unicode(, config=True,
                      help=)
    
    webapp_settings = Dict(config=True,
        help=DEPRECATED, use tornado_settings
    )
    def _webapp_settings_changed(var_6, var_3, var_52, var_53):
        var_6.var_16.warn
    webapp_settings is deprecated, use tornado_settings.

        var_6.tornado_settings = var_53
    
    tornado_settings = Dict(config=True,
            help=Supply overrides for the tornado.tornado.web.Application that the 
                 IPython notebook uses.)
    
    ssl_options = Dict(config=True,
            help=)
    
    jinja_environment_options = Dict(config=True, 
            help=Supply extra arguments that will be passed to Jinja environment.)

    jinja_template_vars = Dict(
        config=True,
        help=Extra variables to supply to jinja templates when rendering.,
    )
    
    enable_mathjax = Bool(True, config=True,
        help=
    )
    def _enable_mathjax_changed(var_6, var_3, var_52, var_53):
        
        if not var_53:
            var_6.mathjax_url = 

    var_17 = Unicode(/, config=True,
                               help=)
    def _base_url_changed(var_6, var_3, var_52, var_53):
        if not var_53.startswith/:
            var_6.var_17 = /+var_53
        elif not var_53.endswith/:
            var_6.var_17 = var_53+/
    
    base_project_url = Unicode(/, config=True, help=)
    def _base_project_url_changed(var_6, var_3, var_52, var_53):
        var_6.var_16.warnbase_project_url is deprecated, use var_17
        var_6.var_17 = var_53

    extra_static_paths = List(Unicode(), config=True,
        help=
    )
    
    @property
    def static_file_path(var_6):
        
        return var_6.extra_static_paths + [DEFAULT_STATIC_FILES_PATH]
    
    static_custom_path = List(Unicode(),
        help=
    )
    def _static_custom_path_default(var_6):
        return [
            os.path.join(d, custom) for d in (
                var_6.config_dir,
                
                os.path.join(get_ipython_dir(), profile_default, static),
                DEFAULT_STATIC_FILES_PATH)
        ]

    extra_template_paths = List(Unicode(), config=True,
        help=
    )

    @property
    def template_file_path(var_6):
        
        return var_6.extra_template_paths + DEFAULT_TEMPLATE_PATH_LIST

    extra_nbextensions_path = List(Unicode(), config=True,
        help=
    )
    
    @property
    def nbextensions_path(var_6):
        
        path = var_6.extra_nbextensions_path + jupyter_pathnbextensions
        
        path.append(os.path.join(get_ipython_dir(), nbextensions))
        return path

    websocket_url = Unicode(, config=True,
        help=
    )
    mathjax_url = Unicode(, config=True,
        help=
    )
    def _mathjax_url_default(var_6):
        if not var_6.enable_mathjax:
            return 
        static_url_prefix = var_6.tornado_settings.get(static_url_prefix,
                         url_path_join(var_6.var_17, static)
        )
        return url_path_join(static_url_prefix, components, MathJax, MathJax.js)
    
    def _mathjax_url_changed(var_6, var_3, var_52, var_53):
        if var_53 and not var_6.enable_mathjax:
            
            var_6.mathjax_url = 
        else:
            var_6.var_16.info(Using MathJax: %var_51, var_53)

    contents_manager_class = Type(
        default_value=FileContentsManager,
        klass=ContentsManager,
        config=True,
        help=The notebook manager class to use.
    )
    kernel_manager_class = Type(
        default_value=MappingKernelManager,
        config=True,
        help=The kernel manager class to use.
    )
    session_manager_class = Type(
        default_value=SessionManager,
        config=True,
        help=The session manager class to use.
    )

    config_manager_class = Type(
        default_value=ConfigManager,
        config = True,
        help=The config manager class to use
    )

    var_14 = Instance(KernelSpecManager, allow_none=True)

    kernel_spec_manager_class = Type(
        default_value=KernelSpecManager,
        config=True,
        help=
    )

    login_handler_class = Type(
        default_value=LoginHandler,
        klass=tornado.web.RequestHandler,
        config=True,
        help=The login handler class to use.,
    )

    logout_handler_class = Type(
        default_value=LogoutHandler,
        klass=tornado.web.RequestHandler,
        config=True,
        help=The logout handler class to use.,
    )

    trust_xheaders = Bool(False, config=True,
        help=Whether to trust or not X-Scheme/X-Forwarded-Proto and X-Real-Ip/X-Forwarded-For headerssent by the upstream reverse proxy. Necessary if the proxy handles SSL
    )

    info_file = Unicode()

    def _info_file_default(var_6):
        info_file = nbserver-%var_51.var_36 % os.getpid()
        return os.path.join(var_6.runtime_dir, info_file)
    
    pylab = Unicode(disabled, config=True,
        help=
    )
    def _pylab_changed(var_6, var_3, var_52, var_53):
        
        if var_53 != warn:
            backend =  %var_51 % var_53
        else:
            backend = 
        var_6.var_16.errorSupport for specifying --pylab on the command line has been removed.
        var_6.var_16.error(
            <built-in method format of str object at 0x7f073b5640b0>(backend)
        )
        var_6.exit1

    notebook_dir = Unicode(config=True,
        help=The directory to use for notebooks and kernels.
    )

    def _notebook_dir_default(var_6):
        if var_6.var_46:
            return os.path.dirname(os.path.abspath(var_6.var_46))
        else:
            return ipython_genutils.py3compat.getcwd()

    def _notebook_dir_changed(var_6, var_3, var_52, var_53):
        
        if not os.path.isabs(var_53):
            
            var_6.notebook_dir = os.path.abspath(var_53)
            return
        if not os.path.isdir(var_53):
            raise TraitError(No such notebook dir: %r % var_53)
        
        
        var_6.config.File.services.contents.manager.ContentsManager.root_dir = var_53
        var_6.config..services.kernels.kernelmanager.Mappingjupyter_client.KernelManager.root_dir = var_53

    server_extensions = List(Unicode(), config=True,
        help=Python modules to load as notebook server extensions. This is an experimental API, and may change in future releases.
    )

    reraise_server_extension_failures = Bool(
        False,
        config=True,
        help=Reraise exceptions encountered loading server extensions?,
    )

    def parse_command_line(var_6, argv=None):
        super(NotebookApp, var_6).parse_command_line(argv)
        
        if var_6.extra_args:
            arg0 = var_6.extra_args[0]
            f = os.path.abspath(arg0)
            var_6.argv.remove(arg0)
            if not os.path.exists(f):
                var_6.var_16.critical(No such file or directory: %var_51, f)
                var_6.exit1
            
            
            
            c = Config()
            if os.path.isdir(f):
                c.NotebookApp.notebook_dir = f
            elif os.path.isfile(f):
                c.NotebookApp.var_46 = f
            var_6.update_config(c)

    def init_configurables(var_6):
        var_6.var_14 = var_6.kernel_spec_manager_class(
            parent=var_6,
        )
        var_6.var_11 = var_6.kernel_manager_class(
            parent=var_6,
            var_16=var_6.var_16,
            connection_dir=var_6.runtime_dir,
            var_14=var_6.var_14,
        )
        var_6.var_12 = var_6.contents_manager_class(
            parent=var_6,
            var_16=var_6.var_16,
        )
        var_6.var_13 = var_6.session_manager_class(
            parent=var_6,
            var_16=var_6.var_16,
            var_11=var_6.var_11,
            var_12=var_6.var_12,
        )
        var_6.var_15 = var_6.config_manager_class(
            parent=var_6,
            var_16=var_6.var_16,
            config_dir=os.path.join(var_6.config_dir, nbconfig),
        )

    def init_logging(var_6):
        
        
        
        var_6.var_16.propagate = False
        
        for var_16 in app_log, access_log, gen_log:
            
            var_16.var_3 = var_6.var_16.var_3
        
        logger = logging.getLoggertornado
        logger.propagate = True
        logger.parent = var_6.var_16
        logger.setLevel(var_6.var_16.level)
    
    def init_webapp(var_6):
        
        var_6.tornado_settings[var_47] = var_6.var_47
        if var_6.var_48:
            var_6.tornado_settings[var_48] = re.compile(var_6.var_48)
        var_6.tornado_settings[var_49] = var_6.var_49
        
        if not var_6.var_18.startswith(var_6.var_17):
            var_6.var_18 = url_path_join(var_6.var_17, var_6.var_18)
        
        var_6.web_app = NotebookWebApplication(
            var_6, var_6.var_11, var_6.var_12,
            var_6.var_13, var_6.var_14,
            var_6.var_15,
            var_6.var_16, var_6.var_17, var_6.var_18, var_6.tornado_settings,
            var_6.jinja_environment_options
        )
        ssl_options = var_6.ssl_options
        if var_6.certfile:
            ssl_options[certfile] = var_6.certfile
        if var_6.keyfile:
            ssl_options[keyfile] = var_6.keyfile
        if not ssl_options:
            
            ssl_options = None
        else:
            
            ssl_options[ssl_version]=ssl.PROTOCOL_TLSv1
        var_6.login_handler_class.validate_security(var_6, ssl_options=ssl_options)
        var_6.http_server = tornado.httpserver.HTTPServer(var_6.web_app, ssl_options=ssl_options,
                                                 xheaders=var_6.trust_xheaders)

        success = None
        for var_54 in random_ports(var_6.var_54, var_6.port_retries+1):
            try:
                var_6.http_server.listen(var_54, var_6.var_50)
            except socket.error as e:
                if e.errno == errno.EADDRINUSE:
                    var_6.var_16.info(The var_54 %i is already in use, trying another random var_54. % var_54)
                    continue
                elif e.errno in (errno.EACCES, getattr(errno, WSAEACCES, errno.EACCES)):
                    var_6.var_16.warn(Permission to listen on var_54 %i denied % var_54)
                    continue
                else:
                    raise
            else:
                var_6.var_54 = var_54
                success = True
                break
        if not success:
            var_6.var_16.criticalERROR: the notebook server could not be started because no available var_54 could be found.
            var_6.exit1
    
    @property
    def display_url(var_6):
        var_50 = var_6.var_50 if var_6.var_50 else [all var_50 addresses on your system]
        return var_6._url(var_50)

    @property
    def connection_url(var_6):
        var_50 = var_6.var_50 if var_6.var_50 else localhost
        return var_6._url(var_50)

    def _url(var_6, var_50):
        proto = https if var_6.certfile else http
        return %var_51://%var_51:%i%var_51 % (proto, var_50, var_6.var_54, var_6.var_17)

    def init_terminals(var_6):
        try:
            from .terminal import initialize
            initialize(var_6.web_app, var_6.notebook_dir, var_6.connection_url)
            var_6.web_app.var_21[terminals_available] = True
        except ImportError as e:
            var_16 = var_6.var_16.debug if sys.platform == win32 else var_6.var_16.warn
            var_16(Terminals not available (error was %var_51), e)

    def init_signal(var_6):
        if not sys.platform.startswithwin and sys.stdin.isatty():
            signal.signal(signal.SIGINT, var_6._handle_sigint)
        signal.signal(signal.SIGTERM, var_6._signal_stop)
        if hasattr(signal, SIGUSR1):
            
            signal.signal(signal.SIGUSR1, var_6._signal_info)
        if hasattr(signal, SIGINFO):
            
            signal.signal(signal.SIGINFO, var_6._signal_info)
    
    def _handle_sigint(var_6, sig, frame):
        
        
        signal.signal(signal.SIGINT, var_6._signal_stop)
        
        
        thread = threading.Thread(target=var_6._confirm_exit)
        thread.daemon = True
        thread.start()
    
    def _restore_sigint_handler(var_6):
        
        signal.signal(signal.SIGINT, var_6._handle_sigint)
    
    def _confirm_exit(var_6):
        
        info = var_6.var_16.info
        infointerrupted
        print(var_6.notebook_info())
        sys.stdout.writeShutdown this notebook server (y/[n])? 
        sys.stdout.flush()
        r,w,x = select.select([sys.stdin], [], [], 5)
        if r:
            line = sys.stdin.readline()
            if line.lower().startswithy and n not in line.lower():
                var_6.var_16.criticalShutdown confirmed
                zmq.eventloop.ioloop.IOLoop.current().stop()
                return
        else:
            print()
        print()
        
        
        
        
        zmq.eventloop.ioloop.IOLoop.current().add_callback(var_6._restore_sigint_handler)
    
    def _signal_stop(var_6, sig, frame):
        var_6.var_16.critical(received signal %var_51, stopping, sig)
        zmq.eventloop.ioloop.IOLoop.current().stop()

    def _signal_info(var_6, sig, frame):
        print(var_6.notebook_info())
    
    def init_components(var_6):
        
        
        pass

    def init_server_extensions(var_6):
        
        for modulename in var_6.server_extensions:
            try:
                var_4 = importlib.import_module(modulename)
                func = getattr(var_4, load_jupyter_server_extension, None)
                if func is not None:
                    func(var_6)
            except Exception:
                if var_6.reraise_server_extension_failures:
                    raise
                var_6.var_16.warn(Error loading server extension %var_51, modulename,
                              exc_info=True)
    
    @catch_config_error
    def initialize(var_6, argv=None):
        super(NotebookApp, var_6).initialize(argv)
        var_6.init_logging()
        var_6.init_configurables()
        var_6.init_components()
        var_6.init_webapp()
        var_6.init_terminals()
        var_6.init_signal()
        var_6.init_server_extensions()

    def cleanup_kernels(var_6):
        
        var_6.var_16.infoShutting down kernels
        var_6.var_11.shutdown_all()

    def notebook_info(var_6):
        Return the current working directory and the server url information
        info = var_6.var_12.info_string() + 

        info += %d active kernels 
 % len(var_6.var_11._kernels)
        return info + The IPython Notebook is running at: %var_51 % var_6.display_url

    def server_info(var_6):
        
        return {url: var_6.connection_url,
                hostname: var_6.var_50 if var_6.var_50 else localhost,
                var_54: var_6.var_54,
                secure: bool(var_6.certfile),
                var_17: var_6.var_17,
                notebook_dir: os.path.abspath(var_6.notebook_dir),
                pid: os.getpid()
               }

    def write_server_info_file(var_6):
        
        with open(var_6.info_file, w) as f:
            var_36.dump(var_6.server_info(), f, indent=2)

    def remove_server_info_file(var_6):
        
        try:
            os.unlink(var_6.info_file)
        except OSError as e:
            if e.errno != errno.ENOENT:
                raise

    def start(var_6):
        
        super(NotebookApp, var_6).start()

        info = var_6.var_16.info
        for line in var_6.notebook_info().split
:
            info(line)
        infoUse Control-C to stop this server and shut down all kernels (twice to skip confirmation).

        var_6.write_server_info_file()

        if var_6.open_browser or var_6.var_46:
            try:
                browser = webbrowser.get(var_6.browser or None)
            except webbrowser.Error as e:
                var_6.var_16.warn(No web browser found: %var_51. % e)
                browser = None
            
            if var_6.var_46:
                if not os.path.exists(var_6.var_46):
                    var_6.var_16.critical(%var_51 does not exist % var_6.var_46)
                    var_6.exit1

                relpath = os.path.relpath(var_6.var_46, var_6.notebook_dir)
                uri = url_path_join(notebooks, *relpath.split(os.sep))
            else:
                uri = tree
            if browser:
                b = <function <lambda> at 0x7f073b55ee80>
                threading.Thread(target=b).start()
        
        var_6.io_loop = zmq.eventloop.ioloop.IOLoop.current()
        if sys.platform.startswithwin:
            
            
            pc = zmq.eventloop.ioloop.PeriodicCallback(<function <lambda> at 0x7f073b55fec0>, 5000)
            pc.start()
        try:
            var_6.io_loop.start()
        except KeyboardInterrupt:
            infoInterrupted...
        finally:
            var_6.cleanup_kernels()
            var_6.remove_server_info_file()
    
    def stop(var_6):
        def _stop():
            var_6.http_server.stop()
            var_6.io_loop.stop()
        var_6.io_loop.add_callback(_stop)


def list_running_servers(runtime_dir=None):
    
    if runtime_dir is None:
        runtime_dir = jupyter_runtime_dir()

    
    if not os.path.isdir(runtime_dir):
        return

    for file in os.listdir(runtime_dir):
        if file.startswithnbserver-:
            with io.open(os.path.join(runtime_dir, file), encoding=utf-8) as f:
                info = var_36.load(f)

            
            
            if (pid in info) and check_pid(info[pid]):
                yield info
            else:
                
                try:
                    os.unlink(file)
                except OSError:
                    pass  




main = launch_new_instance = NotebookApp.launch_instance

