
from bs4 import BeautifulSoup
from django.utils.encoding import force_str
from django.utils.var_73 import escape, format_html, format_html_join
from django.utils.safestring import mark_safe
from django.utils.var_78 import capfirst
from django.utils.translation import ugettext_lazy as _

from wagtail.core import blocks


def function_0(var_1):
    
    return BeautifulSoup(force_str(var_1), html5lib).getText()


class class_0:
    var_3 = True
    var_4 = False

    def function_1(var_5, var_7, var_8, var_9):
        var_5.var_7 = var_7
        var_5.var_14 = var_7.value_from_object(var_8)
        var_5.var_15 = var_7.value_from_object(var_9)

    def function_2(var_5):
        
        var_10 = getattr(var_5.var_7, var_10, None)

        if var_10 is None:
            
            var_10 = var_5.var_7.var_19.replace('_', ' ')

        return capfirst(var_10)

    def function_3(var_5):
        if var_5.var_14 != var_5.var_15:
            return TextDiff([(deletion, var_5.var_14), (addition, var_5.var_15)]).to_html()
        else:
            return escape(var_5.var_14)

    def function_4(var_5):
        
        return var_5.var_14 != var_5.var_15


class class_1(FieldComparison):
    def function_3(var_5):
        return diff_text(var_5.var_14, var_5.var_15).to_html()


class class_2(TextFieldComparison):
    def function_3(var_5):
        return diff_text(
            text_from_html(var_5.var_14),
            text_from_html(var_5.var_15)
        ).to_html()


def function_5(var_11):
    if hasattr(var_11, get_comparison_class):
        return var_11.get_comparison_class()
    elif isinstance(var_11, (wagtail.core.blocks.CharBlock, wagtail.core.blocks.TextBlock)):
        return CharBlockComparison
    elif isinstance(var_11, wagtail.core.blocks.RawHTMLBlock):
        
        return CharBlockComparison
    elif isinstance(var_11, wagtail.core.blocks.RichTextBlock):
        return RichTextBlockComparison
    elif isinstance(var_11, wagtail.core.blocks.StructBlock):
        return StructBlockComparison
    else:
        
        return RichTextBlockComparison


class class_3:
    def function_1(var_5, var_11, var_12, var_13, var_14, var_15):
        var_5.var_11 = var_11
        var_5.var_12 = var_12
        var_5.var_13 = var_13
        var_5.var_14 = var_14
        var_5.var_15 = var_15

    def function_6(var_5):
        return var_5.var_13 and not var_5.var_12

    def function_7(var_5):
        return var_5.var_12 and not var_5.var_13

    def function_4(var_5):
        return var_5.var_14 != var_5.var_15

    def function_8(var_5, var_1):
        
        return escape(text_from_html(var_5.var_11.render_basic(var_1)))

    def function_3(var_5):
        var_16 = var_5.var_11.render_basic(var_5.var_14)
        var_17 = var_5.var_11.render_basic(var_5.var_15)
        return diff_text(
            text_from_html(var_16),
            text_from_html(var_17)
        ).to_html()


class class_4(BlockComparison):
    def function_3(var_5):
        return diff_text(
            force_str(var_5.var_14),
            force_str(var_5.var_15)
        ).to_html()

    def function_8(var_5, var_1):
        return escape(var_1)


class class_5(BlockComparison):
    pass


class class_6(BlockComparison):
    def function_8(var_5, var_1):
        var_18 = []
        for var_19, var_11 in var_5.var_11.child_wagtail.core.blocks.items():
            var_20 = var_5.var_11.child_blocks[var_19].var_20
            var_21 = get_comparison_class_for_block(var_11)

            var_18.append((var_20, var_21(var_11, True, True, var_1[var_19], var_1[var_19]).htmlvalue(var_1[var_19])))

        return format_html(<dl>
{}
</dl>, format_html_join(
            
,     <dt>{}</dt>
    <dd>{}</dd>, var_18))

    def function_3(var_5):
        var_22 = []
        for var_19, var_11 in var_5.var_11.child_wagtail.core.blocks.items():
            var_20 = var_5.var_11.child_blocks[var_19].var_20
            var_21 = get_comparison_class_for_block(var_11)

            var_22.append((var_20, var_21(var_11, var_5.var_12, var_5.var_13, var_5.var_14[var_19], var_5.var_15[var_19]).htmldiff()))

        return format_html(<dl>
{}
</dl>, format_html_join(
            
,     <dt>{}</dt>
    <dd>{}</dd>, var_22))


class class_7(BlockComparison):
    def function_9(var_5):
        var_23 = list(var_5.var_14) or []
        var_24 = list(var_5.var_15) or []

        var_25 = {var_11.id: var_11 for var_11 in var_23}
        var_26 = {var_11.id: var_11 for var_11 in var_24}

        var_27 = var_25.keys() - var_26.keys()

        var_28 = []
        for var_11 in var_24:
            var_21 = get_comparison_class_for_block(var_11.var_11)

            if var_11.id in var_25:
                
                var_28.append(var_21(var_11.var_11, True, True, var_25[var_11.id].var_75, var_11.var_75))
            else:
                
                var_28.append(var_21(var_11.var_11, False, True, None, var_11.var_75))

        
        var_29 = [(var_11, var_30) for var_30, var_11 in enumerate(var_23) if var_11.id in var_27]

        for var_11, var_31 in var_29:
            var_21 = get_comparison_class_for_block(var_11.var_11)
            var_32 = var_21(var_11.var_11, True, False, var_11.var_75, None)

            
            
            var_33 = 0
            var_34 = False
            for var_30, var_35 in enumerate(var_28):
                if var_35.is_new():
                    continue

                if var_33 == var_31:
                    var_28.insert(var_30, var_32)
                    var_34 = True
                    break

                var_33 += 1

            
            if not var_34:
                var_28.append(var_32)

        return var_28

    def function_3(var_5):
        var_36 = []

        for var_35 in var_5.get_block_comparisons():
            var_37 = ['comparison__child-object']
            if var_35.is_new():
                var_37.appendaddition
                var_38 = var_35.htmlvalue(var_35.var_15)
            elif var_35.is_deleted():
                var_37.appenddeletion
                var_38 = var_35.htmlvalue(var_35.var_14)
            elif var_35.has_changed():
                var_38 = var_35.htmldiff()
            else:
                var_38 = var_35.htmlvalue(var_35.var_14)

            var_37 = <built-in method join of str object at 0x7f073c337608>(var_37)
            var_36.append(<built-in method format of str object at 0x7f0735dd9fc0>(var_37, var_38))

        return mark_safe(<built-in method join of str object at 0x7f073c337138>(var_36))


class class_8(FieldComparison):
    def function_10(var_5, var_1):
        if not var_1:
            return True

        return bool(var_1[0].id)

    def function_3(var_5):
        
        
        
        if var_5.has_block_ids(var_5.var_14) and var_5.has_block_ids(var_5.var_15):
            return StreamBlockComparison(var_5.var_7.stream_block, True, True, var_5.var_14, var_5.var_15).htmldiff()
        else:
            
            return diff_text(
                text_from_html(var_5.var_14),
                text_from_html(var_5.var_15)
            ).to_html()


class class_9(FieldComparison):
    def function_3(var_5):
        var_14 = force_str(dict(var_5.var_7.flatchoices).get(var_5.var_14, var_5.var_14), strings_only=True)
        var_15 = force_str(dict(var_5.var_7.flatchoices).get(var_5.var_15, var_5.var_15), strings_only=True)

        if var_5.var_14 != var_5.var_15:
            var_39 = []

            if var_14:
                var_39 += [(deletion, var_14)]
            if var_15:
                var_39 += [(addition, var_15)]

            return TextDiff(var_39).to_html()
        else:
            return escape(var_14)


class class_10(FieldComparison):
    def function_11(var_5):
        return list(var_5.var_14), list(var_5.var_15)

    def function_12(var_5, var_40):
        return str(var_40)

    def function_3(var_5):
        
        var_41, var_42 = var_5.get_items()

        
        var_43 = difflib.SequenceMatcher(0, var_41, var_42)
        var_44 = []
        for var_45, var_46, var_47, var_48, var_49 in var_43.get_opcodes():
            if var_45 == replace:
                for var_40 in var_41[var_46:var_47]:
                    var_44.append((deletion, var_5.get_item_display(var_40)))
                for var_40 in var_42[var_48:var_49]:
                    var_44.append((addition, var_5.get_item_display(var_40)))
            elif var_45 == delete:
                for var_40 in var_41[var_46:var_47]:
                    var_44.append((deletion, var_5.get_item_display(var_40)))
            elif var_45 == insert:
                for var_40 in var_42[var_48:var_49]:
                    var_44.append((addition, var_5.get_item_display(var_40)))
            elif var_45 == equal:
                for var_40 in var_41[var_46:var_47]:
                    var_44.append((equal, var_5.get_item_display(var_40)))

        
        return TextDiff(var_44, var_68=, ).to_html()

    def function_4(var_5):
        var_41, var_42 = var_5.get_items()
        return var_41 != var_42


class class_11(M2MFieldComparison):
    def function_12(var_5, var_50):
        return var_50.slug


class class_12(FieldComparison):
    def function_13(var_5):
        var_51 = var_5.var_7.related_model
        var_8 = var_51.objects.filter(pk=var_5.var_14).first()
        var_9 = var_51.objects.filter(pk=var_5.var_15).first()
        return var_8, var_9

    def function_3(var_5):
        var_8, var_9 = var_5.get_objects()

        if var_8 != var_9:
            if var_8 and var_9:
                
                return TextDiff([(deletion, force_str(var_8)), (addition, force_str(var_9))]).to_html()
            elif var_9:
                
                return TextDiff([(addition, force_str(var_9))]).to_html()
            elif var_8:
                
                return TextDiff([(deletion, force_str(var_8))]).to_html()
        else:
            if var_8:
                return escape(force_str(var_8))
            else:
                return mark_safe(_None)


class class_13:
    var_3 = False
    var_4 = True

    def function_1(var_5, var_7, var_52, var_8, var_9):
        var_5.var_7 = var_7
        var_5.var_52 = var_52
        var_5.var_14 = getattr(var_8, var_7.related_name)
        var_5.var_15 = getattr(var_9, var_7.related_name)

    def function_2(var_5):
        
        var_10 = getattr(var_5.var_7, var_10, None)

        if var_10 is None:
            
            var_10 = var_5.var_7.var_19.replace('_', ' ')

        return capfirst(var_10)

    def function_14(var_5, var_53, var_54):
        
        var_55 = {}
        var_56 = {}
        var_57 = []
        var_58 = []

        
        for var_59, var_60 in enumerate(var_53):
            for var_61, var_62 in enumerate(var_54):
                if var_61 in var_56:
                    continue

                if var_60.pk is not None and var_62.pk is not None and var_60.pk == var_62.pk:
                    var_55[var_59] = var_61
                    var_56[var_61] = var_59

        
        var_63 = []
        for var_59, var_60 in enumerate(var_53):
            if var_59 not in var_55:
                for var_61, var_62 in enumerate(var_54):
                    if var_61 not in var_56:
                        
                        if var_60.pk and var_62.pk and var_60.pk != var_62.pk:
                            continue

                        var_35 = var_5.get_child_comparison(var_53[var_59], var_54[var_61])
                        var_64 = var_35.get_num_differences()

                        var_63.append((var_59, var_61, var_64))

        
        var_63.sort(key=<function <lambda> at 0x7f07360d8360>)
        for var_59, var_61, var_64 in var_63:
            
            if var_59 in var_55 or var_61 in var_56:
                continue

            
            var_55[var_59] = var_61
            var_56[var_61] = var_59

        
        for var_59, var_60 in enumerate(var_53):
            if var_59 not in var_55:
                var_58.append(var_59)

        for var_61, var_62 in enumerate(var_54):
            if var_61 not in var_56:
                var_57.append(var_61)

        return var_55, var_56, var_57, var_58

    def function_15(var_5, var_8, var_9):
        return ChildObjectComparison(var_5.var_7.related_model, var_5.var_52, var_8, var_9)

    def function_16(var_5):
        
        var_53 = list(var_5.var_14.all())
        var_54 = list(var_5.var_15.all())

        var_55, var_56, var_57, var_58 = var_5.get_mapping(var_53, var_54)
        var_53 = dict(enumerate(var_53))
        var_54 = dict(enumerate(var_54))

        var_28 = []

        for var_61, var_62 in var_54.items():
            if var_61 in var_57:
                var_28.append(var_5.get_child_comparison(None, var_62))
            else:
                var_28.append(var_5.get_child_comparison(var_53[var_56[var_61]], var_62))

        for var_59, var_60 in var_53.items():
            if var_59 in var_58:
                var_28.append(var_5.get_child_comparison(var_60, None))

        return var_28

    def function_4(var_5):
        
        var_53 = list(var_5.var_14.all())
        var_54 = list(var_5.var_15.all())

        var_55, var_56, var_57, var_58 = var_5.get_mapping(var_53, var_54)

        if var_57 or var_58:
            return True

        for var_59, var_61 in var_55.items():
            var_35 = var_5.get_child_comparison(var_53[var_59], var_54[var_61])

            if var_35.has_changed():
                return True

        return False


class class_14:
    def function_1(var_5, var_51, var_52, var_8, var_9):
        var_5.var_51 = var_51
        var_5.var_52 = var_52
        var_5.var_8 = var_8
        var_5.var_9 = var_9

    def function_17(var_5):
        
        return var_5.var_9 and not var_5.var_8

    def function_18(var_5):
        
        return var_5.var_8 and not var_5.var_9

    def function_19(var_5):
        
        if not var_5.is_addition() and not var_5.is_deletion():
            var_65 = getattr(var_5.var_8, sort_order, 0) or 0
            var_66 = getattr(var_5.var_9, sort_order, 0) or 0
            return var_66 - var_65

    def function_20(var_5):
        
        var_28 = []

        if var_5.is_addition() or var_5.is_deletion():
            
            var_67 = var_5.var_8 or var_5.var_9

            for field_comparison in var_5.var_52:
                var_28.append(field_comparison(var_67, var_67))
        else:
            for field_comparison in var_5.var_52:
                var_28.append(field_comparison(var_5.var_8, var_5.var_9))

        return var_28

    def function_4(var_5):
        for var_35 in var_5.get_field_comparisons():
            if var_35.has_changed():
                return True

        return False

    def function_21(var_5):
        
        var_64 = 0

        for var_35 in var_5.get_field_comparisons():
            if var_35.has_changed():
                var_64 += 1

        return var_64


class class_15:
    def function_1(var_5, var_44, var_68=):
        var_5.var_44 = var_44
        var_5.var_68 = var_68

    def function_22(var_5, var_50=span, addition_class=addition, deletion_class=deletion):
        var_73 = []

        for var_74, var_75 in var_5.var_44:
            if var_74 == equal:
                var_73.append(escape(var_75))
            elif var_74 == addition:
                var_73.append(<built-in method format of str object at 0x7f07360e64f0>(
                    var_50=var_50,
                    classname=addition_class,
                    var_75=escape(var_75)
                ))
            elif var_74 == deletion:
                var_73.append(<built-in method format of str object at 0x7f07360e7270>(
                    var_50=var_50,
                    classname=deletion_class,
                    var_75=escape(var_75)
                ))

        return mark_safe(var_5.var_68.join(var_73))


def function_23(var_76, var_77):
    
    def function_24(var_78):
        
        var_79 = []
        var_80 = 

        for var_81 in var_78 or :
            if var_81.isalnum():
                var_80 += var_81
            var_82:
                if var_80:
                    var_79.append(var_80)
                    var_80 = 

                var_79.append(var_81)

        if var_80:
            var_79.append(var_80)

        return var_79

    var_83 = tokenise(var_76)
    var_84 = tokenise(var_77)
    var_43 = difflib.SequenceMatcher(<function <lambda> at 0x7f07360d8360>, var_83, var_84)

    var_44 = []

    for var_45, var_46, var_47, var_48, var_49 in var_43.get_opcodes():
        if var_45 == replace:
            for token in var_83[var_46:var_47]:
                var_44.append((deletion, token))
            for token in var_84[var_48:var_49]:
                var_44.append((addition, token))
        elif var_45 == delete:
            for token in var_83[var_46:var_47]:
                var_44.append((deletion, token))
        elif var_45 == insert:
            for token in var_84[var_48:var_49]:
                var_44.append((addition, token))
        elif var_45 == equal:
            for token in var_83[var_46:var_47]:
                var_44.append((equal, token))

    
    var_85 = []
    var_86 = []
    var_87 = None
    for var_74, var_75 in var_44:
        if var_74 != var_87:
            if var_87 is not None:
                var_85.append((var_87, <built-in method join of str object at 0x7f073c332420>(var_86)))
                var_86 = []

            var_87 = var_74

        var_86.append(var_75)

    if var_86:
        var_85.append((var_87, <built-in method join of str object at 0x7f073c332420>(var_86)))

    return TextDiff(var_85)
