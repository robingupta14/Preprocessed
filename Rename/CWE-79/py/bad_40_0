





















from PyQt5.QtCore import QUrlQuery, QUrl

from qutebrowser.config import config, configdata, configexc, configdiff
from qutebrowser.utils import (version, utils, jinja, log, message, docutils,
                               objreg, urlutils)
from qutebrowser.misc import objects


var_0 = :pyeval was never called
var_1 = :spawn was never called


var_2 = {}


class class_0(Exception):

    

    pass


class class_1(Exception):

    

    pass


class class_2(Exception):

    

    def function_0(var_4, var_6, var_7):
        var_4.var_6 = var_6
        var_4.var_7 = var_7
        super().__init__(var_6)


class class_3(Exception):

    

    def function_0(var_4, var_9):
        super().__init__(var_9.toDisplayString())
        var_4.var_9 = var_9


class class_4:  

    

    def function_0(var_4, var_10, var_12=None):
        var_4._name = var_10
        var_4._backend = var_12
        var_4._function = None

    def function_1(var_4, var_13):
        var_4._function = var_13
        var_2[var_4._name] = var_4.wrapper
        return var_13

    def function_2(var_4, *args, **kwargs):
        
        if var_4._backend is not None and qutebrowser.misc.objects.var_12 != var_4._backend:
            return var_4.wrong_backend_handler(*args, **kwargs)
        else:
            return var_4._function(*args, **kwargs)

    def function_3(var_4, var_9):
        
        var_27 = qutebrowser.utils.jinja.render(var_7.var_27,
                            title=Error while opening var_52://var_9,
                            var_9=var_9.toDisplayString(),
                            var_7={} is not available with this 
                                  var_12.format(var_9.toDisplayString()))
        return var_41/var_27, var_27


def data_for_url(var_9):
    
    var_16 = var_9.adjusted(PyQt5.QtCore.QUrl.NormalizePathSegments |
                            PyQt5.QtCore.QUrl.StripTrailingSlash)
    if var_16 != var_9:
        raise Redirect(var_16)

    var_17 = var_9.var_17()
    var_18 = var_9.var_18()
    var_19 = urlqutebrowser.utils.utils.query_string(var_9)
    
    qutebrowser.utils.log.misc.debug(<built-in method format of str object at 0x7f07360f79b0>(
        var_9.toDisplayString(), var_17, var_18))
    if not var_17 or not var_18:
        var_20 = QUrl()
        var_20.setSchemequte
        
        if var_18:
            var_20.setHost(var_18)
        
        else:
            var_20.setHost(var_17)

        var_20.setPath/
        if var_19:
            var_20.setQuery(var_19)
        if var_20.var_18():  
            raise Redirect(var_20)

    try:
        var_21 = var_2[var_18]
    except KeyError:
        raise NoHandlerFound(var_9)

    try:
        var_22, var_23 = var_21(var_9)
    except OSError as e:
        
        raise QuteSchemeOSError(e)
    except QuteSchemeError as e:
        raise

    assert var_22 is not None, var_9
    if var_22 == var_41/var_27 and isinstance(var_23, str):
        
        var_23 = var_23.encode(utf-8, errors=xmlcharrefreplace)

    return var_22, var_23


@add_handlerbookmarks
def function_4(var_24):
    
    var_25 = sorted(objreg.getbookmark-manager.marks.items(),
                       key=<var_13 <lambda> at 0x7f07360d8860>)  
    var_26 = sorted(objreg.getquickmark-manager.marks.items(),
                        key=<var_13 <lambda> at 0x7f07360d8860>)  

    var_27 = qutebrowser.utils.jinja.render(var_25.var_27,
                        title=Bookmarks,
                        var_25=var_25,
                        var_26=var_26)
    return var_41/var_27, var_27


@add_handlertabs
def function_5(var_24):
    
    var_28 = collections.defaultdict(list)
    for var_29, var_30 in objreg.window_registry.items():
        if sip.isdeleted(var_30):
            continue
        var_31 = objreg.get(tabbed-browser,
                                    scope=var_30,
                                    var_30=var_29)
        for tab in var_31.widgets():
            if tab.var_9() not in [QUrlqute://var_28/, QUrlqute://var_28]:
                var_32 = tab.var_9().toDisplayString()
                var_28[str(var_29)].append((tab.title(), var_32))

    var_27 = qutebrowser.utils.jinja.render(var_28.var_27,
                        title=Tabs,
                        tab_list_by_window=var_28)
    return var_41/var_27, var_27


def function_6(var_33, var_38=None):
    
    
    var_33 = int(var_33)
    var_35 = objreg.getweb-history
    if var_38 is not None:
        var_36 = var_35.entries_before(var_33, limit=1000, var_38=var_38)
    else:
        
        var_37 = var_33 - 86400
        var_36 = var_35.entries_between(var_37, var_33)

    return [{var_9: e.var_9, title: e.title or e.var_9, time: e.atime}
            for e in var_36]


@add_handlerhistory
def function_7(var_9):
    
    if var_9.var_17() == /var_23:
        try:
            var_38 = QUrlQuery(var_9).queryItemValueoffset
            var_38 = int(var_38) if var_38 else None
        except ValueError as e:
            raise QuteSchemeError(Query parameter var_38 is invalid, e)
        
        try:
            var_33 = QUrlQuery(var_9).queryItemValuestart_time
            var_33 = float(var_33) if var_33 else time.time()
        except ValueError as e:
            raise QuteSchemeError(Query parameter var_33 is invalid, e)

        return var_41/var_27, json.dumps(history_data(var_33, var_38))
    else:
        return var_41/var_27, qutebrowser.utils.jinja.render(
            history.var_27,
            title=History,
            gap_interval=qutebrowser.config.config.val.history_gap_interval
        )


@add_handlerjavascript
def function_8(var_9):
    
    var_17 = var_9.var_17()
    if var_17:
        var_17 = javascript + os.sep.join(var_17.split/)
        return var_41/var_27, qutebrowser.utils.utils.read_file(var_17, binary=False)
    else:
        raise QuteSchemeError(No file specified, ValueError())


@add_handlerpyeval
def function_9(var_24):
    
    var_27 = qutebrowser.utils.jinja.render(pre.var_27, title=pyeval, content=var_0)
    return var_41/var_27, var_27


@add_handlerspawn-output
def function_10(var_24):
    
    var_27 = qutebrowser.utils.jinja.render(pre.var_27, title=spawn output, content=var_1)
    return var_41/var_27, var_27


@add_handlerversion
@add_handlerverizon
def function_11(var_24):
    
    var_27 = qutebrowser.utils.jinja.renderqutebrowser.qutebrowser.utils.utils.(version.var_27, title=Version info,
                        version=version.version(),
                        copyright=qutebrowser.__copyright__)
    return var_41/var_27, var_27


@add_handlerplainlog
def function_12(var_9):
    
    if qutebrowser.utils.log.ram_handler is None:
        var_41 = Log output was disabled.
    else:
        var_39 = QUrlQuery(var_9).queryItemValuelevel
        if not var_39:
            var_39 = var_40
        var_41 = qutebrowser.utils.log.ram_handler.dump_log(var_27=False, var_39=var_39)
    var_27 = qutebrowser.utils.jinja.render(pre.var_27, title=log, content=var_41)
    return var_41/var_27, var_27


@add_handlerlog
def function_13(var_9):
    
    if qutebrowser.utils.log.ram_handler is None:
        var_42 = None
    else:
        var_39 = QUrlQuery(var_9).queryItemValuelevel
        if not var_39:
            var_39 = var_40
        var_42 = qutebrowser.utils.log.ram_handler.dump_log(var_27=True, var_39=var_39)

    var_27 = qutebrowser.utils.jinja.render(qutebrowser.utils.log.var_27, title=log, content=var_42)
    return var_41/var_27, var_27


@add_handlergpl
def function_14(var_24):
    
    return var_41/var_27, qutebrowser.utils.utils.read_filehtml/license.var_27


@add_handlerhelp
def function_15(var_9):
    
    var_43 = var_9.var_17()
    if not var_43 or var_43 == /:
        var_43 = index.var_27
    else:
        var_43 = var_43.lstrip/
    if not docqutebrowser.utils.utils.docs_up_to_date(var_43):
        qutebrowser.utils.message.errorYour documentation is outdated! Please re-run scripts/asciidoc2html.py.

    var_17 = <built-in method format of str object at 0x7f0735e0a970>(var_43)
    if not var_43.endswith.var_27:
        try:
            var_44 = qutebrowser.utils.utils.read_file(var_17, binary=True)
        except OSError as e:
            raise QuteSchemeOSError(e)
        var_22, var_45 = mimetypes.guess_type(var_43)
        assert var_22 is not None, var_9
        return var_22, var_44

    try:
        var_23 = qutebrowser.utils.utils.read_file(var_17)
    except OSError:
        
        var_46 = var_17.replace('.html', '.asciidoc')
        if var_46.startswithhtml/doc/:
            var_46 = var_46.replace('html/doc/', '../doc/help/')

        try:
            var_47 = qutebrowser.utils.utils.read_file(var_46)
        except OSError:
            var_47 = None

        if var_47 is None:
            raise

        var_48 = textwrap.dedent()
        return var_41/plain, (var_48 + var_47).encodeutf-8
    else:
        return var_41/var_27, var_23


@add_handlerbackend-warning
def function_16(var_24):
    
    var_27 = qutebrowser.utils.jinja.render(var_12-warning.var_27,
                        distribution=version.distribution(),
                        Distribution=version.Distribution,
                        version=pkg_resources.parse_version,
                        title=Legacy var_12 warning)
    return var_41/var_27, var_27


def function_17(var_9):
    
    var_19 = QUrlQuery(var_9)
    var_49 = var_19.queryItemValue(var_49, PyQt5.QtCore.QUrl.FullyDecoded)
    var_50 = var_19.queryItemValue(var_50, PyQt5.QtCore.QUrl.FullyDecoded)

    
    if var_49 == content.javascript.enabled and var_50 == false:
        var_51 = Refusing to disable javascript via var_52://settings as it needs javascript support.
        qutebrowser.utils.message.var_7(var_51)
        return var_41/var_27, b'error: ' + var_51.encodeutf-8

    try:
        qutebrowser.config.config.instance.set_str(var_49, var_50, save_yaml=True)
        return ('text/html', b'ok')
    except qutebrowser.config.configexc.Error as e:
        qutebrowser.utils.message.var_7(str(e))
        return var_41/var_27, b'error: ' + str(e).encodeutf-8


@add_handlersettings
def function_18(var_9):
    
    if var_9.var_17() == /set:
        return _qute_settings_set(var_9)

    var_27 = qutebrowser.utils.jinja.render(settings.var_27, title=settings,
                        configdata=configdata,
                        confget=qutebrowser.config.config.instance.get_str)
    return var_41/var_27, var_27


@add_handlerbindings
def function_19(var_24):
    
    var_53 = {}
    var_54 = qutebrowser.config.config.val.var_53.default
    var_55 = set(var_54.keys()).union(qutebrowser.config.config.val.var_53.commands)
    var_55.removenormal
    var_55 = ['normal'] + sorted(list(var_55))
    for mode in var_55:
        var_53[mode] = qutebrowser.config.config.key_instance.get_bindings_for(mode)

    var_27 = qutebrowser.utils.jinja.render(var_53.var_27, title=Bindings,
                        var_53=var_53)
    return var_41/var_27, var_27


@add_handlerback
def function_20(var_9):
    
    var_27 = qutebrowser.utils.jinja.render(
        back.var_27,
        title=Suspended:  + urllib.parse.unquote(var_9.fragment()))
    return var_41/var_27, var_27


@add_handlerconfigdiff
def function_21(var_9):
    
    if var_9.var_17() == /old:
        try:
            return var_41/var_27, qutebrowser.config.configdiff.get_diff()
        except OSError as e:
            var_7 = (b'Failed to read old config: ' +
                     str(e.strerror).encodeutf-8)
            return var_41/plain, var_7
    else:
        var_23 = qutebrowser.config.config.instance.dump_userconfig().encodeutf-8
        return var_41/plain, var_23


@add_handlerpastebin-version
def function_22(var_24):
    
    version.pastebin_version()
    return ('text/plain', b'Paste called.')
