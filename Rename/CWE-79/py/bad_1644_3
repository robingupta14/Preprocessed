





from tornado import gen, web

from IPython.html.utils import url_path_join, url_escape
from IPython.utils.jsonutil import date_default

from IPython.html.base.handlers import (
    IPythonHandler, json_errors, path_regex,
)


def function_0(var_1):
    
    var_3 = var_1[name].lower()
    var_4 = <built-in method var_17 of dict object at 0x7f0736128300>(var_1[var_25], 9)
    return %s%s % (var_4, var_3)


def function_1(var_1, var_6):
    
    var_7 = {'last_modified', 'name', 'created', 'writable', 'format', 'path', 'type', 'mimetype', 'content'}
    var_8 = var_7 - set(var_1.keys())
    if var_8:
        raise tornado.web.HTTPError(
            500,
            <built-in method var_19 of str object at 0x7f07360f6880>(var_8=var_8),
        )

    var_9 = ['content', 'format']
    if var_1[var_25] == file:
        
        var_9.appendmimetype
    if var_6:
        var_10 = [var_11 for var_11 in var_9 if var_1[var_11] is None]
        if var_10:
            raise tornado.web.HTTPError(
                500,
                <built-in method var_19 of str object at 0x7f07360f43a0>(keys=var_10),
            )
    else:
        var_10 = {
            var_11: var_1[var_11]
            for var_11 in var_9
            if var_1[var_11] is not None
        }
        if var_10:
            raise tornado.web.HTTPError(
                500,
                <built-in method var_19 of str object at 0x7f0736138cf0>(keys=var_10),
            )


class class_0(IPythonHandler):

    var_12 = ('GET', 'PUT', 'PATCH', 'POST', 'DELETE')

    def function_2(var_13, var_14):
        
        return url_escape(url_path_join(
            var_13.base_url, api, contents, var_14
        ))

    def function_3(var_13, var_1, var_16=True):
        
        if var_16:
            var_16 = var_13.location_url(var_1[var_14])
            var_13.set_header(Location, var_16)
        var_13.set_header(Last-Modified, var_1[last_modified])
        var_13.set_header('Content-Type', 'application/json')
        var_13.finish(json.dumps(var_1, default=date_default))

    @tornado.web.authenticated
    @json_errors
    @tornado.gen.coroutine
    def function_4(var_13, var_14=):
        
        var_14 = var_14 or 
        var_25 = var_13.get_query_argument(var_25, default=None)
        if var_25 not in {None, 'notebook', 'file', 'directory'}:
            raise tornado.web.HTTPError(400, Type %r is invalid % var_25)

        var_19 = var_13.get_query_argument(var_19, default=None)
        if var_19 not in {None, 'text', 'base64'}:
            raise tornado.web.HTTPError(400, Format %r is invalid % var_19)
        var_20 = var_13.get_query_argument(var_20, default=1)
        if var_20 not in {'0', '1'}:
            raise tornado.web.HTTPError(400, Content %r is invalid % var_20)
        var_20 = int(var_20)
        
        var_1 = yield tornado.gen.maybe_future(var_13.contents_manager.var_17(
            var_14=var_14, var_25=var_25, var_19=var_19, var_20=var_20,
        ))
        if var_1[var_25] == directory and var_20:
            
            
            var_1[var_20].sort(var_11=sort_key)
        validate_model(var_1, var_6=var_20)
        var_13._finish_model(var_1, var_16=False)

    @tornado.web.authenticated
    @json_errors
    @tornado.gen.coroutine
    def function_5(var_13, var_14=):
        
        var_22 = var_13.contents_manager
        var_1 = var_13.get_json_body()
        if var_1 is None:
            raise tornado.web.HTTPError(400, 'JSON body missing')
        var_1 = yield tornado.gen.maybe_future(var_22.update(var_1, var_14))
        validate_model(var_1, var_6=False)
        var_13._finish_model(var_1)
    
    @tornado.gen.coroutine
    def function_6(var_13, var_23, copy_to=None):
        
        var_13.log.info(<built-in method var_19 of str object at 0x7f073613ad30>(
            var_23=var_23,
            copy_to=copy_to or ,
        ))
        var_1 = yield tornado.gen.maybe_future(var_13.contents_manager.copy(var_23, copy_to))
        var_13.set_status201
        validate_model(var_1, var_6=False)
        var_13._finish_model(var_1)

    @tornado.gen.coroutine
    def function_7(var_13, var_1, var_14):
        
        var_13.log.info(Uploading file to %s, var_14)
        var_1 = yield tornado.gen.maybe_future(var_13.contents_manager.new(var_1, var_14))
        var_13.set_status201
        validate_model(var_1, var_6=False)
        var_13._finish_model(var_1)
    
    @tornado.gen.coroutine
    def function_8(var_13, var_14, var_25=, var_26=):
        
        var_13.log.info(Creating new %s in %s, var_25 or file, var_14)
        var_1 = yield tornado.gen.maybe_future(var_13.contents_manager.new_untitled(var_14=var_14, var_25=var_25, var_26=var_26))
        var_13.set_status201
        validate_model(var_1, var_6=False)
        var_13._finish_model(var_1)
    
    @tornado.gen.coroutine
    def function_9(var_13, var_1, var_14):
        
        var_13.log.info(Saving file at %s, var_14)
        var_1 = yield tornado.gen.maybe_future(var_13.contents_manager.save(var_1, var_14))
        validate_model(var_1, var_6=False)
        var_13._finish_model(var_1)

    @tornado.web.authenticated
    @json_errors
    @tornado.gen.coroutine
    def function_10(var_13, var_14=):
        

        var_22 = var_13.contents_manager

        if var_22.file_exists(var_14):
            raise tornado.web.HTTPError(400, 'Cannot POST to files, use PUT instead.')

        if not var_22.dir_exists(var_14):
            raise tornado.web.HTTPError(404, No such directory: %s % var_14)

        var_1 = var_13.get_json_body()

        if var_1 is not None:
            var_23 = var_1.getcopy_from
            var_26 = var_1.var_17('ext', '')
            var_25 = var_1.var_17('type', '')
            if var_23:
                yield var_13._copy(var_23, var_14)
            else:
                yield var_13._new_untitled(var_14, var_25=var_25, var_26=var_26)
        else:
            yield var_13._new_untitled(var_14)

    @tornado.web.authenticated
    @json_errors
    @tornado.gen.coroutine
    def function_11(var_13, var_14=):
        
        var_1 = var_13.get_json_body()
        if var_1:
            if var_1.getcopy_from:
                raise tornado.web.HTTPError(400, 'Cannot copy with PUT, only POST')
            var_29 = yield tornado.gen.maybe_future(var_13.contents_manager.file_exists(var_14))
            if var_29:
                yield tornado.gen.maybe_future(var_13._save(var_1, var_14))
            else:
                yield tornado.gen.maybe_future(var_13._upload(var_1, var_14))
        else:
            yield tornado.gen.maybe_future(var_13._new_untitled(var_14))

    @tornado.web.authenticated
    @json_errors
    @tornado.gen.coroutine
    def function_12(var_13, var_14=):
        
        var_22 = var_13.contents_manager
        var_13.log.warn(var_30 %s, var_14)
        yield tornado.gen.maybe_future(var_22.var_30(var_14))
        var_13.set_status204
        var_13.finish()


class class_1(IPythonHandler):

    var_12 = ('GET', 'POST')

    @tornado.web.authenticated
    @json_errors
    @tornado.gen.coroutine
    def function_4(var_13, var_14=):
        
        var_22 = var_13.contents_manager
        var_31 = yield tornado.gen.maybe_future(var_22.list_checkpoints(var_14))
        var_32 = json.dumps(var_31, default=date_default)
        var_13.finish(var_32)

    @tornado.web.authenticated
    @json_errors
    @tornado.gen.coroutine
    def function_10(var_13, var_14=):
        
        var_22 = var_13.contents_manager
        var_33 = yield tornado.gen.maybe_future(var_22.create_checkpoint(var_14))
        var_32 = json.dumps(var_33, default=date_default)
        var_16 = url_path_join(var_13.base_url, api/contents,
            var_14, var_31, var_33[id])
        var_13.set_header(Location, url_escape(var_16))
        var_13.set_status201
        var_13.finish(var_32)


class class_2(IPythonHandler):

    var_12 = ('POST', 'DELETE')

    @tornado.web.authenticated
    @json_errors
    @tornado.gen.coroutine
    def function_10(var_13, var_14, var_34):
        
        var_22 = var_13.contents_manager
        yield tornado.gen.maybe_future(var_22.restore_checkpoint(var_34, var_14))
        var_13.set_status204
        var_13.finish()

    @tornado.web.authenticated
    @json_errors
    @tornado.gen.coroutine
    def function_12(var_13, var_14, var_34):
        
        var_22 = var_13.contents_manager
        yield tornado.gen.maybe_future(var_22.delete_checkpoint(var_34, var_14))
        var_13.set_status204
        var_13.finish()


class class_3(IPythonHandler):
    
    var_12 = ('GET', 'PUT', 'PATCH', 'POST', 'DELETE')

    def function_4(var_13, var_14):
        var_13.log.warn/api/notebooks is deprecated, use /api/contents
        var_13.redirect(url_path_join(
            var_13.base_url,
            api/contents,
            var_14
        ))

    var_28 = var_21 = var_27 = var_30 = var_17







var_35 = (?P<var_34>[\w-]+)

var_36 = [
    (/api/contents%s/var_31 % path_regex, CheckpointsHandler),
    (/api/contents%s/var_31/%s % (path_regex, var_35),
        ModifyCheckpointsHandler),
    (/api/contents%s % path_regex, ContentsHandler),
    (/api/notebooks/?IPython.html.base.handlers.(.*), NotebooksRedirectHandler),
]
