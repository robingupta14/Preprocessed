


from MoinMoin import config, wikiutil
from MoinMoin.var_27.AttachFile import _get_files
from MoinMoin.Page import Page





def function_0(var_1):
    var_3 = get_macro_help(var_1)
    var_1.write(
         % var_1.cfg.var_23)

    var_4 = []
    for var_11 in macro_list(var_1):
        if var_11 == BR:
            var_5 =  var_5="selected"
        else:
            var_5 = 
        if var_11 in var_3:
            var_4.append(<option var_6="%s"%s>%s</option> %
                          (var_3[var_11].groupprototype, var_5, var_11))
        else:
            var_4.append(<option var_6="%s"%s>%s</option> %
                          (var_11, var_5, var_11))

    var_1.write(<built-in method join of str object at 0x7f073c337138>(var_4))
    var_1.write()

    var_7 = []
    for var_11 in macro_list(var_1):
        if var_11 in var_3:
            var_8 = var_3[var_11]
            var_9 = var_8.groupprototype
            var_10 = var_8.grouphelp
        else:
            var_9 = var_11
            var_10 = 
        var_7.append(
            
            % (var_9, var_9, var_10))

    var_1.write(<built-in method join of str object at 0x7f073c332420>(var_7))
    var_1.write()

def function_1(var_1):
    from MoinMoin import var_11
    var_4 = MoinMoin.var_11.getNames(var_1.cfg)
    var_4.sort()
    return var_4

def function_2(var_1):
    
    var_12 = MoinMoin.wikiutil.getLocalizedPage(var_1, HelpOnMacros)
    var_13 = var_12.get_raw_body()
    macro_re = re.compile(
        \|\|(<.*?>)?\{\{\{ +
        <<(?P<var_9>(?P<var_11>\w*).*)>> +
        \}\}\}\s*\|\| +
        [^|]*\|\|[^|]*\|\|<[^>]*> +
        \s*(?P<var_3>.*?)\s*\|\|\s*(?P<example>.*?)\s*(<<[^>]*>>)*\s*\|\|$, re.U|re.M)
    var_3 = {}
    for var_8 in macro_re.finditer(var_13):
        var_3[var_8.groupmacro] = match
    return var_3





def function_3(var_1):
    from MoinMoin import search
    var_15 = var_1.values.get('pagename', '')
    if var_15:
        var_16 = MoinMoin.search.searchPages(var_1, t:"%s" % var_15)
        var_17 = [p.page_name for p in var_16.hits]
    else:
        var_17 = [var_15]
    var_1.write(
         % <built-in method join of str object at 0x7f073c332420>([<option>%s</option>
 % MoinMoin.wikiutil.escape(p) for p in var_17]))

def function_4(var_1):
    
    var_15 = var_1.values.get('pagename', '')
    var_18 = MoinMoin.wikiutil.escape(var_15)
    if var_15:
        from MoinMoin import search
        
        var_16 = MoinMoin.search.searchPages(var_1, t:"%s" % var_15)

        var_17 = [p.page_name for p in var_16.hits]
        var_17.sort()
        var_17[0:0] = [var_15]
        var_14 =  % <built-in method join of str object at 0x7f073c337138>([<option var_6="%s">%s</option> % (MoinMoin.wikiutil.escape(page), MoinMoin.wikiutil.escape(page))
                 for page in var_17])
    else:
        var_14 = 

    
    var_19 = MoinMoin.wikiutil.load_wikimap(var_1)
    var_20 = var_19.keys()
    var_20.sort()
    var_21 = var_1.cfg.interwiki_preferred[:]
    if not var_21 or var_21 and var_21[-1] is not None:
        var_22 = var_21
        for iw in var_20:
            if not iw in var_21:
                var_22.append(iw)
    else:
        var_22 = var_21[:-1]
    var_20 = <built-in method join of str object at 0x7f073c337138>(
        [<option var_6="%s">%s</option> % (MoinMoin.wikiutil.escape(key), MoinMoin.wikiutil.escape(key))
         for key in var_22])

    
    var_23 = var_1.cfg.var_23
    var_24 = var_1.script_root + /
    var_27 = var_24
    var_25 = MoinMoin.wikiutil.escape(var_1.page.page_name)
    var_1.write(u % locals())


def function_5(var_1):
    
    
    
    
    
    var_26 = var_1.getText
    var_23 = var_1.cfg.var_23

    
    var_27 = var_1.script_root + /

    
    
    
    
    

    requestedPagename = MoinMoin.wikiutil.escape(var_1.values.get('requestedPagename', ''), quote=True)
    var_28 = MoinMoin.wikiutil.escape(var_1.values.get(var_28, var_1.page.page_name), quote=True)

    var_29 = requestedPagename or MoinMoin.wikiutil.escape(var_1.page.page_name)
    var_30 = _get_files(var_1, var_29)
    var_30.sort()
    var_31 =  % <built-in method join of str object at 0x7f073c337138>([<option var_6="%s">%s</option> % (MoinMoin.wikiutil.escape(attachment, quote=True), MoinMoin.wikiutil.escape(attachment, quote=True))
                 for attachment in var_30])

    
    var_32 = _Attachment var_33
    var_34 = _Page var_15
    var_35 = _Attachment var_15
    var_36 = _Refresh attachment var_37
    var_38 = _List of var_30

    if len(var_29) > 50:
        var_39 = %s ... %s % (var_29[0:25], var_29[-25:])
    else:
        var_39 = var_29
    langAvailableAttachments = %s: %s % (_Available var_30 for page, var_39)

    var_1.write( % locals())






def function_6(var_1):
    var_23 = var_1.cfg.var_23
    var_1.write( % locals())






def function_7(var_40, var_1):
    var_42 = var_1.values.get('dialog', '')

    if var_42 == var_11:
        macro_dialog(var_1)
    elif var_42 == macrolist:
        macro_list(var_1)
    elif var_42 == pagelist:
        var_14(var_1)
    elif var_42 == link:
        link_dialog(var_1)
    elif var_42 == attachment:
        attachment_dialog(var_1)
    elif var_42 == image:
        image_dialog(var_1)
    else:
        from MoinMoin.Page import Page
        var_1.theme.add_msg('Dialog unknown!', 'error')
        Page(var_1, var_40).send_page()

