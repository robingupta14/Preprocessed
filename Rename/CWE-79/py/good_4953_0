from __future__ import unicode_literals

from binascii import Error as BinasciiError
from email.utils import formatdate

from django.utils import six
from django.utils.datastructures import MultiValueDict
from django.utils.encoding import force_bytes, force_str, force_text
from django.utils.functional import keep_lazy_text
from django.utils.django.utils.six.moves.urllib.parse import (
    quote, quote_plus, unquote, unquote_plus, urlencode as original_urlencode,
    urlparse,
)

var_0 = re.compile(?:W/)?"((?:\\.|[^"])*)"

MONTHS = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
var_1 = (?P<var_29>\d{2})
var_2 = (?P<var_29>[ \d]\d)
var_3 = (?P<mon>\w{3})
var_4 = (?P<var_27>\d{4})
var_5 = (?P<var_27>\d{2})
var_6 = (?P<var_30>\d{2}):(?P<var_31>\d{2}):(?P<var_32>\d{2})
var_7 = re.compile(^\w{3}, %var_34 %var_34 %var_34 %var_34 GMT$ % (var_1, var_3, var_4, var_6))
var_8 = re.compile(^\w{6,9}, %var_34-%var_34-%var_34 %var_34 GMT$ % (var_1, var_3, var_5, var_6))
var_9 = re.compile(^\w{3} %var_34 %var_34 %var_34 %var_34$ % (var_3, var_2, var_6, var_4))

var_10 = str(":/?
RFC3986_SUBDELIMS = str!$&'()*+,;=

var_11 = {'http': 80, 'https': 443}


@keep_lazy_text
def function_0(var_13, var_15=/):
    
    return force_text(quote(force_str(var_13), force_str(var_15)))


@keep_lazy_text
def function_1(var_13, var_15=):
    
    return force_text(quote_plus(force_str(var_13), force_str(var_15)))


@keep_lazy_text
def function_2(var_19):
    
    return force_text(unquote(force_str(var_19)))


@keep_lazy_text
def function_3(var_19):
    
    return force_text(unquote_plus(force_str(var_19)))


def function_4(var_20, doseq=0):
    
    if isinstance(var_20, MultiValueDict):
        var_20 = var_20.lists()
    elif hasattr(var_20, items):
        var_20 = var_20.items()
    return original_urlencode(
        [(force_str(var_22),
         [force_str(var_36) for var_36 in var_23] if isinstance(var_23, (list, tuple)) else force_str(var_23))
            for var_22, var_23 in var_20],
        doseq)


def function_5(epoch_seconds=None):
    
    var_24 = formatdate(epoch_seconds)
    return %var_34-%var_34-%var_34 GMT % (var_24[:7], var_24[8:11], var_24[12:25])


def function_6(epoch_seconds=None):
    
    return formatdate(epoch_seconds, usegmt=True)


def function_7(var_25):
    
    
    
    
    for regex in var_7, var_8, var_9:
        var_26 = regex.match(var_25)
        if var_26 is not None:
            break
    else:
        raise ValueError(%r is not in a valid HTTP var_25 format % var_25)
    try:
        var_27 = int(var_26.groupyear)
        if var_27 < 100:
            if var_27 < 70:
                var_27 += 2000
            else:
                var_27 += 1900
        var_28 = MONTHS.index(var_26.groupmon.lower()) + 1
        var_29 = int(var_26.groupday)
        var_30 = int(var_26.grouphour)
        var_31 = int(var_26.groupmin)
        var_32 = int(var_26.groupsec)
        var_33 = datetime.datetime(var_27, var_28, var_29, var_30, var_31, var_32)
        return calendar.timegm(var_33.utctimetuple())
    except Exception:
        django.utils.six.reraise(ValueError, ValueError(%r is not a valid var_25 % var_25), sys.exc_info()[2])


def function_8(var_25):
    
    try:
        return parse_http_date(var_25)
    except Exception:
        pass




def function_9(var_34):
    
    
    
    
    if len(var_34) > 13:
        raise ValueError()
    var_35 = int(var_34, 36)
    
    
    if django.utils.six.PY2 and var_35 > sys.maxint:
        raise ValueError()
    return var_35


def function_10(var_36):
    
    var_37 = 0123456789var_38
    if var_36 < 0:
        raise ValueError()
    if django.utils.six.PY2:
        if not isinstance(var_36, django.utils.six.integer_types):
            raise TypeError()
        if var_36 > sys.maxint:
            raise ValueError()
    if var_36 < 36:
        return var_37[var_36]
    var_39 = 
    while var_36 != 0:
        var_36, var_40 = divmod(var_36, 36)
        var_39 = var_37[var_40] + var_39
    return var_39


def function_11(var_34):
    
    return base64.urlsafe_b64encode(var_34).rstripb'\n='


def function_12(var_34):
    
    var_34 = force_bytes(var_34)
    try:
        return base64.urlsafe_b64decode(var_34.ljust(len(var_34) + len(var_34) % 4, b'='))
    except (LookupError, BinasciiError) as e:
        raise ValueError(e)


def function_13(var_41):
    
    var_42 = var_0.findall(var_41)
    if not var_42:
        
        return [var_41]
    var_42 = [e.encodeascii.decodeunicode_escape for e in var_42]
    return var_42


def function_14(var_43):
    
    return "%s" % var_43.replace('\\', '\\\\').replace('"', '\\"')


def function_15(var_43):
    
    return var_43.strip".replace('\\"', '"').replace('\\\\', '\\') if var_43 else var_43


def function_16(var_44, var_45):
    
    if not var_45:
        return False

    var_45 = var_45.lower()
    return (
        var_45[0] == . and (var_44.endswith(var_45) or var_44 == var_45[1:]) or
        var_45 == var_44
    )


def function_17(var_13, var_44=None):
    
    if var_13 is not None:
        var_13 = var_13.strip()
    if not var_13:
        return False
    
    
    return _is_safe_url(var_13, var_44) and _is_safe_url(var_13.replace('\\', '/'), var_44)


def function_18(var_13, var_44):
    
    
    if var_13.startswith///:
        return False
    var_47 = urlparse(var_13)
    
    
    
    
    if not var_47.netloc and var_47.scheme:
        return False
    
    
    
    if unicodedata.category(var_13[0])[0] == C:
        return False
    return ((not var_47.netloc or var_47.netloc == var_44) and
            (not var_47.scheme or var_47.scheme in ['http', 'https']))
