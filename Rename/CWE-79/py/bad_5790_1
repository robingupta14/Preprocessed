from email.utils import formatdate

from django.utils.datastructures import MultiValueDict
from django.utils.encoding import smart_str, force_unicode
from django.utils.functional import allow_lazy

var_0 = re.compile(?:W/)?"((?:\\.|[^"])*)"

MONTHS = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
var_1 = (?P<var_31>\d{2})
var_2 = (?P<var_31>[ \d]\d)
var_3 = (?P<mon>\w{3})
var_4 = (?P<var_29>\d{4})
var_5 = (?P<var_29>\d{2})
var_6 = (?P<var_32>\d{2}):(?P<var_33>\d{2}):(?P<var_34>\d{2})
var_7 = re.compile(^\w{3}, %var_36 %var_36 %var_36 %var_36 GMT$ % (var_1, var_3, var_4, var_6))
var_8 = re.compile(^\w{6,9}, %var_36-%var_36-%var_36 %var_36 GMT$ % (var_1, var_3, var_5, var_6))
var_9 = re.compile(^\w{3} %var_36 %var_36 %var_36 %var_36$ % (var_3, var_2, var_6, var_4))

def function_0(var_12, var_14=/):
    
    return force_unicode(urllib.quote(smart_str(var_12), smart_str(var_14)))
var_10 = allow_lazy(var_10, unicode)

def function_1(var_12, var_14=):
    
    return force_unicode(urllib.quote_plus(smart_str(var_12), smart_str(var_14)))
var_17 = allow_lazy(var_17, unicode)

def function_2(var_20):
    
    return force_unicode(urllib.unquote(smart_str(var_20)))
var_19 = allow_lazy(var_19, unicode)

def function_3(var_20):
    
    return force_unicode(urllib.unquote_plus(smart_str(var_20)))
var_21 = allow_lazy(var_21, unicode)

def function_4(var_22, doseq=0):
    
    if isinstance(var_22, MultiValueDict):
        var_22 = var_22.lists()
    elif hasattr(var_22, items):
        var_22 = var_22.items()
    return urllib.urlencode(
        [(smart_str(var_24),
         isinstance(var_25, (list,tuple)) and [smart_str(var_38) for var_38 in var_25] or smart_str(var_25))
            for var_24, var_25 in var_22],
        doseq)

def function_5(epoch_seconds=None):
    
    var_26 = formatdate(epoch_seconds)
    return %var_36-%var_36-%var_36 GMT % (var_26[:7], var_26[8:11], var_26[12:25])

def function_6(epoch_seconds=None):
    
    var_26 = formatdate(epoch_seconds)
    return %var_36 GMT % var_26[:25]

def function_7(var_27):
    
    
    
    
    for regex in var_7, var_8, var_9:
        var_28 = regex.match(var_27)
        if var_28 is not None:
            break
    else:
        raise ValueError(%r is not in a valid HTTP var_27 format % var_27)
    try:
        var_29 = int(var_28.groupyear)
        if var_29 < 100:
            if var_29 < 70:
                var_29 += 2000
            else:
                var_29 += 1900
        var_30 = MONTHS.index(var_28.groupmon.lower()) + 1
        var_31 = int(var_28.groupday)
        var_32 = int(var_28.grouphour)
        var_33 = int(var_28.groupmin)
        var_34 = int(var_28.groupsec)
        var_35 = datetime.datetime(var_29, var_30, var_31, var_32, var_33, var_34)
        return calendar.timegm(var_35.utctimetuple())
    except Exception:
        raise ValueError(%r is not a valid var_27 % var_27)

def function_8(var_27):
    
    try:
        return parse_http_date(var_27)
    except Exception:
        pass



def function_9(var_36):
    
    
    
    
    if len(var_36) > 13:
        raise ValueError()
    var_37 = int(var_36, 36)
    
    if var_37 > sys.maxint:
        raise ValueError()
    return var_37

def function_10(var_38):
    
    var_39 = 0123456789var_40
    var_41 = 0
    if not 0 <= var_38 <= sys.maxint:
        raise ValueError()
    
    while True:
        var_41 += 1
        if var_38 < 36 ** var_41:
            var_41 -= 1
            break
    var_42 = []
    
    while var_41 >= 0:
        var_43 = 36 ** var_41
        var_42.append(var_39[var_38 // var_43])
        var_38 = var_38 % var_43
        var_41 -= 1
    return <built-in method join of str object at 0x7f073c332420>(var_42)

def function_11(var_44):
    
    var_45 = var_0.findall(var_44)
    if not var_45:
        
        return [var_44]
    var_45 = [e.decodestring_escape for e in var_45]
    return var_45

def function_12(var_46):
    
    return "%s" % var_46.replace('\\', '\\\\').replace('"', '\\"')

if sys.version_info >= (2, 6):
    def function_13(var_47, var_48):
        
        var_49, var_50 = urlparse.urlparse(var_47), urlparse.urlparse(var_48)
        return (var_49.scheme, var_49.hostname, var_49.port) == (var_50.scheme, var_50.hostname, var_50.port)
else:
    
    
    
    def function_13(var_47, var_48):
        
        var_49, var_50 = urlparse.urlparse(var_47), urlparse.urlparse(var_48)
        return var_49[0:2] == var_50[0:2]

def function_14(var_12, host=None):
    
    if not var_12:
        return False
    var_52 = urlparse.urlparse(var_12)[1]
    return not var_52 or var_52 == host
