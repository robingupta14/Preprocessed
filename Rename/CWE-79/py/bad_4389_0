from typing import Any, List


from .rest_api import ValidationError


var_0 = ['a', 'img', 'br', 'p', 'span', 'blockquote', 'strike', 'del', 'ins', 'strong', 'u', 'em', 'sup', 'sub', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ol', 'ul', 'li', 'table', 'caption', 'thead', 'tbody', 'th', 'tr', 'td', 'div']
var_1 = var_0 + ['video']


def function_0(tag: str, name: str, var_7: str) -> bool:
    return True


var_3 = var_2
var_4 = ['color', 'background-color', 'height', 'width', 'text-align', 'vertical-align', 'float', 'text-decoration', 'margin', 'padding', 'line-height', 'max-width', 'min-width', 'max-height', 'min-height', 'overflow', 'word-break', 'word-wrap']


def function_1(var_5: str) -> str:
    
    return base_validate_html(var_5, var_0)


def function_2(var_5: str) -> str:
    
    return base_validate_html(var_5, var_1)


def function_3(var_5: str, allowed_tags: List[str]) -> str:
    
    var_5 = var_5.replace('\t', '')
    return bleach.clean(
        var_5, tags=allowed_tags, attributes=var_3, styles=var_4
    )


def function_4(json: Any, max_depth: int) -> Any:
    

    if max_depth == 0:
        raise ValidationError{'detail': 'The JSON is too nested.'}

    if isinstance(json, dict):
        return {var_6: validate_json(var_7, max_depth - 1) for var_6, var_7 in json.items()}
    if isinstance(json, list):
        return [validate_json(item, max_depth - 1) for item in json]
    if isinstance(json, str):
        return validate_html_strict(json)

    return json
