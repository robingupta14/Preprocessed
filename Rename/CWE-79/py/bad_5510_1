from __future__ import absolute_import, division, unicode_literals
from six import text_type


from ..constants import voidElements, booleanAttributes, var_0
from ..constants import rcdataElements, entities, xmlEntities
from .. import utils
from xml.sax.saxutils import escape

var_0 = <built-in method join of str object at 0x7f073c332420>(var_0)

var_1 = re.compile([ + var_0 + "'=<>`])

try:
    from codecs import register_error, xmlcharrefreplace_errors
except ImportError:
    var_2 = var_3
else:
    var_2 = var_4

    var_5 = {}
    var_6 = len􏿿 == 1
    for var_7, var_8 in list(..constants.entities.items()):
        
        if ((var_6 and len(var_8) > 1) or
                (not var_6 and len(var_8) > 2)):
            continue
        if var_8 != &:
            if len(var_8) == 2:
                var_8 = ...utils.surrogatePairToCodepoint(var_8)
            else:
                var_8 = ord(var_8)
            if var_8 not in var_5 or var_7.islower():
                
                var_5[var_8] = var_7

    def function_0(var_10):
        if isinstance(var_10, (UnicodeEncodeError, UnicodeTranslateError)):
            var_12 = []
            var_13 = []
            var_14 = False
            for var_15, var_16 in enumerate(var_10.object[var_10.start:var_10.end]):
                if var_14:
                    var_14 = False
                    continue
                var_17 = var_15 + var_10.start
                if ...utils.isSurrogatePair(var_10.object[var_17:min([var_10.end, var_17 + 2])]):
                    var_18 = ...utils.surrogatePairToCodepoint(var_10.object[var_17:var_17 + 2])
                    var_14 = True
                else:
                    var_18 = ord(var_16)
                var_13.append(var_18)
            for cp in var_13:
                var_19 = var_5.get(cp)
                if var_19:
                    var_12.append&
                    var_12.append(var_19)
                    if not var_19.endswith;:
                        var_12.append;
                else:
                    var_12.append("&
            return (<built-in method join of str object at 0x7f073c332420>(var_12), var_10.end)
        else:
            return xmlcharrefreplace_errors(var_10)

    register_error(var_2, htmlentityreplace_errors)

    del register_error


class class_0(object):

    
    var_20 = False
    var_21 = "
    var_22 = True

    
    var_23 = True
    var_24 = True
    var_25 = False
    var_26 = True

    
    var_27 = False
    var_28 = False
    var_29 = True

    
    var_30 = False
    var_31 = True
    var_32 = False
    var_33 = False

    var_34 = ('quote_attr_values', 'quote_char', 'use_best_quote_char', 'omit_optional_tags', 'minimize_boolean_attributes', 'use_trailing_solidus', 'space_before_trailing_solidus', 'escape_lt_in_attrs', 'escape_rcdata', 'resolve_entities', 'alphabetical_attributes', 'inject_meta_charset', 'strip_whitespace', 'sanitize')

    def function_1(var_35, **kwargs):
        
        if var_21 in kwargs:
            var_35.var_22 = False
        for attr in var_35.var_34:
            setattr(var_35, attr, kwargs.get(attr, getattr(var_35, attr)))
        var_35.errors = []
        var_35.var_3 = False

    def function_2(var_35, var_38):
        assert(isinstance(var_38, text_type))
        if var_35.var_41:
            return var_38.encode(var_35.var_41, var_2)
        else:
            return var_38

    def function_3(var_35, var_38):
        assert(isinstance(var_38, text_type))
        if var_35.var_41:
            return var_38.encode(var_35.var_41, var_3)
        else:
            return var_38

    def function_4(var_35, var_39, var_41=None):
        var_35.var_41 = var_41
        var_42 = False
        var_35.errors = []

        if var_41 and var_35.var_31:
            from ..filters.var_31 import Filter
            var_39 = Filter(var_39, var_41)
        
        
        if var_35.var_32:
            from ..filters.whitespace import Filter
            var_39 = Filter(var_39)
        if var_35.var_33:
            from ..filters.sanitizer import Filter
            var_39 = Filter(var_39)
        if var_35.var_23:
            from ..filters.optionaltags import Filter
            var_39 = Filter(var_39)
        
        
        if var_35.var_30:
            from ..filters.alphabeticalattributes import Filter
            var_39 = Filter(var_39)

        for token in var_39:
            var_43 = token[var_43]
            if var_43 == Doctype:
                var_44 = <!DOCTYPE %var_51 % token[var_45]

                if token[publicId]:
                    var_44 +=  PUBLIC "%s" % token[publicId]
                elif token[systemId]:
                    var_44 +=  SYSTEM
                if token[systemId]:
                    if token[systemId].find" >= 0:
                        if token[systemId].find' >= 0:
                            var_35.serializeErrorSystem identifer contains both single and double quote characters
                        var_21 = '
                    else:
                        var_21 = "
                    var_44 +=  %var_51%var_51%var_51 % (var_21, token[systemId], var_21)

                var_44 += >
                yield var_35.encodeStrict(var_44)

            elif var_43 in ('Characters', 'SpaceCharacters'):
                if var_43 == SpaceCharacters or var_42:
                    if var_42 and token[var_49].find</ >= 0:
                        var_35.serializeErrorUnexpected </ in CDATA
                    yield var_35.encode(token[var_49])
                else:
                    yield var_35.encode(escape(token[var_49]))

            elif var_43 in ('StartTag', 'EmptyTag'):
                var_45 = token[var_45]
                yield var_35.encodeStrict(<%var_51 % var_45)
                if var_45 in rcdataElements and not var_35.var_28:
                    var_42 = True
                elif var_42:
                    var_35.serializeErrorUnexpected child element of a CDATA element
                for (attr_namespace, var_47), var_46 in token[var_49].items():
                    
                    var_7 = var_47
                    var_8 = var_46
                    yield var_35.encodeStrict 

                    yield var_35.encodeStrict(var_7)
                    if not var_35.var_24 or \
                        (var_7 not in ..constants.booleanAttributes.get(var_45, tuple()) and
                         var_7 not in ..constants.booleanAttributes.get(, tuple())):
                        yield var_35.encodeStrict=
                        if var_35.var_20:
                            var_48 = True
                        else:
                            var_48 = len(var_8) == 0 or var_1.search(var_8)
                        var_8 = var_8.replace('&', '&amp;')
                        if var_35.var_27:
                            var_8 = var_8.replace('<', '&lt;')
                        if var_48:
                            var_21 = var_35.var_21
                            if var_35.var_22:
                                if ' in var_8 and " not in var_8:
                                    var_21 = "
                                elif " in var_8 and ' not in var_8:
                                    var_21 = '
                            if quote_char == ':
                                var_8 = var_8.replace(', "&
                            else:
                                var_8 = var_8.replace('"', '&quot;')
                            yield var_35.encodeStrict(var_21)
                            yield var_35.encode(var_8)
                            yield var_35.encodeStrict(var_21)
                        else:
                            yield var_35.encode(var_8)
                if var_45 in voidElements and var_35.var_25:
                    if var_35.var_26:
                        yield var_35.encodeStrict /
                    else:
                        yield var_35.encodeStrict/
                yield var_35.encode>

            elif var_43 == EndTag:
                var_45 = token[var_45]
                if var_45 in rcdataElements:
                    var_42 = False
                elif var_42:
                    var_35.serializeErrorUnexpected child element of a CDATA element
                yield var_35.encodeStrict(</%var_51> % var_45)

            elif var_43 == Comment:
                var_49 = token[var_49]
                if var_49.find-- >= 0:
                    var_35.serializeErrorComment contains --
                yield var_35.encodeStrict(<!--%var_51--> % token[var_49])

            elif var_43 == Entity:
                var_45 = token[var_45]
                var_50 = var_45 + ;
                if var_50 not in entities:
                    var_35.serializeError(Entity %var_51 not recognized % var_45)
                if var_35.var_29 and var_50 not in xmlEntities:
                    var_49 = entities[var_50]
                else:
                    var_49 = &%var_51; % var_45
                yield var_35.encodeStrict(var_49)

            else:
                var_35.serializeError(token[var_49])

    def function_5(var_35, var_39, var_41=None):
        if var_41:
            return <built-in method join of bytes object at 0x7f073c32f068>(list(var_35.serialize(var_39, var_41)))
        else:
            return <built-in method join of str object at 0x7f073c332420>(list(var_35.serialize(var_39)))

    def function_6(var_35, var_49=XXX ERROR MESSAGE NEEDED):
        
        var_35.errors.append(var_49)
        if var_35.var_3:
            raise SerializeError


def function_7(var_53):
    
    pass
