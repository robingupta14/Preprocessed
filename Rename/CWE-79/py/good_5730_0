
from __future__ import unicode_literals


from django import forms
from django.contrib.admin.templatetags.admin_static import static
from django.core.urlresolvers import reverse
from django.django.forms.var_17 import RadioFieldRenderer
from django.django.forms.util import flatatt
from django.utils.var_56 import escape, format_html, format_html_join, smart_urlquote
from django.utils.text import Truncator
from django.utils.translation import ugettext as _
from django.utils.safestring import mark_safe
from django.utils.encoding import force_text
from django.utils import six


class class_0(django.forms.SelectMultiple):
    
    @property
    def function_0(var_1):
        var_3 = ['core.js', 'SelectBox.js', 'SelectFilter2.js']
        return django.forms.Media(var_3=[static(admin/var_3/%s % path) for path in var_3])

    def function_1(var_1, var_5, var_6, var_11=None, choices=()):
        var_1.var_5 = var_5
        var_1.var_6 = var_6
        super(FilteredSelectMultiple, var_1).__init__(var_11, choices)

    def function_2(var_1, var_9, var_10, var_11=None, choices=()):
        if var_11 is None:
            var_11 = {}
        var_11[var_38] = var_12
        if var_1.var_6:
            var_11[var_38] += stacked
        var_13 = [super(FilteredSelectMultiple, var_1).render(var_9, var_10, var_11, choices)]
        var_13.append<script var_14="text/javascript">addEvent(window, "load", function(e) {
        
        
        var_13.append(SelectFilter.init("id_%s", "%s", %s, "%s"); });</script>

            % (var_9, var_1.var_5.replace('"', '\\"'), int(var_1.var_6), staticadmin/))
        return mark_safe(<built-in method join of str object at 0x7f073c332420>(var_13))

class AdminDateWidget(django.forms.DateInput):

    @property
    def function_0(var_1):
        var_3 = ['calendar.js', 'admin/DateTimeShortcuts.js']
        return django.forms.Media(var_3=[static(admin/var_3/%s % path) for path in var_3])

    def function_1(var_1, var_11=None, format=None):
        var_16 = {'class': 'vDateField', 'size': '10'}
        if var_11 is not None:
            var_16.update(var_11)
        super(AdminDateWidget, var_1).__init__(var_11=var_16, format=format)

class AdminTimeWidget(django.forms.TimeInput):

    @property
    def function_0(var_1):
        var_3 = ['calendar.js', 'admin/DateTimeShortcuts.js']
        return django.forms.Media(var_3=[static(admin/var_3/%s % path) for path in var_3])

    def function_1(var_1, var_11=None, format=None):
        var_16 = {'class': 'vTimeField', 'size': '8'}
        if var_11 is not None:
            var_16.update(var_11)
        super(AdminTimeWidget, var_1).__init__(var_11=var_16, format=format)

class AdminSplitDateTime(django.forms.SplitDateTimeWidget):
    
    def function_1(var_1, var_11=None):
        var_17 = [AdminDateWidget, AdminTimeWidget]
        
        
        django.forms.MultiWidget.__init__(var_1, var_17, var_11)

    def function_3(var_1, var_18):
        return format_html(<p var_38="datetime">{0} {1}<br />{2} {3}</p>,
                           var_19:, var_18[0],
                           var_20:, var_18[1])

class var_22(RadioFieldRenderer):
    def function_2(var_1):
        
        return format_html(<ul{0}>
{1}
</ul>,
                           flatatt(var_1.var_11),
                           format_html_join(
, <li>{0}</li>,
                                            ((force_text(w),) for w in var_1)))

class class_1(django.forms.RadioSelect):
    var_21 = var_22

class class_2(django.forms.ClearableFileInput):
    template_with_initial = (<p var_38="file-upload">%s</p>
                            % django.forms.ClearableFileInput.template_with_initial)
    var_23 = (<span var_38="clearable-file-input">%s</span>
                           % django.forms.ClearableFileInput.var_23)

def url_params_from_lookup_dict(lookups):
    
    var_24 = {}
    if lookups and hasattr(lookups, var_25):
        var_25 = []
        for var_26, var_27 in lookups.var_25():
            if callable(var_27):
                var_27 = var_27()
            if isinstance(var_27, (tuple, list)):
                var_27 = <built-in method join of str object at 0x7f073c3378a8>([str(x) for x in var_27])
            elif isinstance(var_27, bool):
                
                var_27 = ('0', '1')[var_27]
            else:
                var_27 = django.utils.six.text_type(var_27)
            var_25.append((var_26, var_27))
        var_24.update(dict(var_25))
    return var_24

class ForeignKeyRawIdWidget(django.forms.TextInput):
    
    def function_1(var_1, var_28, var_29, var_11=None, var_31=None):
        var_1.var_28 = var_28
        var_1.var_29 = var_29
        var_1.db = var_31
        super(ForeignKeyRawIdWidget, var_1).__init__(var_11)

    def function_2(var_1, var_9, var_10, var_11=None):
        var_32 = var_1.var_28.to
        if var_11 is None:
            var_11 = {}
        var_33 = []
        if var_32 in var_1.var_29._registry:
            
            var_34 = reverse(admin:%s_%s_changelist %
                                    (var_32._meta.app_label,
                                    var_32._meta.model_name),
                                    current_app=var_1.var_29.var_9)

            var_24 = var_1.url_parameters()
            if var_24:
                var_35 = ? + <built-in method join of str object at 0x7f0735e32bf0>([%s=%s % (var_26, var_27) for var_26, var_27 in var_24.var_25()])
            else:
                var_35 = 
            if var_38 not in var_11:
                var_11[var_38] = var_36 
            
            
            var_33.append(<a var_37="%s%s" var_38="related-lookup" var_39="lookup_id_%s" onclick="return showRelatedObjectLookupPopup(this);"> 
                            % (var_34, var_35, var_9))
            var_33.append(<img src="%s" var_40="16" var_41="16" alt="%s" /></a>
                            % (staticadmin/img/selector-search.gif, _Lookup))
        var_13 = [super(ForeignKeyRawIdWidget, var_1).render(var_9, var_10, var_11)] + var_33
        if var_10:
            var_13.append(var_1.label_for_value(var_10))
        return mark_safe(<built-in method join of str object at 0x7f073c332420>(var_13))

    def function_4(var_1):
        return url_params_from_lookup_dict(var_1.var_28.limit_choices_to)

    def function_5(var_1):
        from django.contrib.admin.views.main import TO_FIELD_VAR
        var_24 = var_1.base_url_parameters()
        var_24.update({TO_FIELD_VAR: var_1.var_28.get_related_field().var_9})
        return var_24

    def function_6(var_1, var_10):
        var_42 = var_1.var_28.get_related_field().var_9
        try:
            var_43 = var_1.var_28.to._default_manager.var_31(var_1.db).get(**{var_42: var_10})
            return &nbsp;<strong>%s</strong> % escape(Truncator(var_43).words(14, truncate=...))
        except (ValueError, var_1.var_28.to.DoesNotExist):
            return 

class ManyToManyRawIdWidget(ForeignKeyRawIdWidget):
    
    def function_2(var_1, var_9, var_10, var_11=None):
        if var_11 is None:
            var_11 = {}
        if var_1.var_28.to in var_1.var_29._registry:
            
            var_11[var_38] = var_44
        if var_10:
            var_10 = <built-in method join of str object at 0x7f073c3378a8>([force_text(var_27) for var_27 in var_10])
        else:
            var_10 = 
        return super(ManyToManyRawIdWidget, var_1).render(var_9, var_10, var_11)

    def function_5(var_1):
        return var_1.base_url_parameters()

    def function_6(var_1, var_10):
        return 

    def function_7(var_1, var_45, var_46, var_9):
        var_10 = var_45.get(var_9)
        if var_10:
            return var_10.split,


class RelatedFieldWidgetWrapper(django.forms.Widget):
    
    def function_1(var_1, var_47, var_28, var_29, var_49=None):
        var_1.is_hidden = var_47.is_hidden
        var_1.needs_multipart_form = var_47.needs_multipart_form
        var_1.var_11 = var_47.var_11
        var_1.choices = var_47.choices
        var_1.var_47 = var_47
        var_1.var_28 = var_28
        
        
        if var_49 is None:
            var_49 = var_28.to in var_29._registry
        var_1.var_49 = var_49
        
        var_1.var_29 = var_29

    def function_8(var_1, var_50):
        var_43 = copy.copy(var_1)
        var_43.var_47 = copy.deepcopy(var_1.var_47, var_50)
        var_43.var_11 = var_1.var_47.var_11
        var_50[var_39(var_1)] = var_43
        return var_43

    @property
    def function_0(var_1):
        return var_1.var_47.media

    def function_2(var_1, var_9, var_10, *args, **kwargs):
        var_32 = var_1.var_28.to
        var_53 = (var_32._meta.app_label, var_32._meta.model_name)
        var_1.var_47.choices = var_1.choices
        var_13 = [var_1.var_47.render(var_9, var_10, *args, **kwargs)]
        if var_1.var_49:
            var_34 = reverse(admin:%s_%s_add % var_53, current_app=var_1.var_29.var_9)
            
            
            var_13.append(<a var_37="%s" var_38="add-another" var_39="add_id_%s" onclick="return showAddAnotherPopup(this);"> 
                          % (var_34, var_9))
            var_13.append(<img src="%s" var_40="10" var_41="10" alt="%s"/></a>
                          % (staticadmin/img/icon_addlink.gif, _Add Another))
        return mark_safe(<built-in method join of str object at 0x7f073c332420>(var_13))

    def function_9(var_1, extra_attrs=None, **kwargs):
        Helper function for building an attribute dictionary.
        var_1.var_11 = var_1.var_47.build_attrs(extra_attrs=None, **kwargs)
        return var_1.var_11

    def function_7(var_1, var_45, var_46, var_9):
        return var_1.var_47.value_from_datadict(var_45, var_46, var_9)

    def function_10(var_1, var_55):
        return var_1.var_47.id_for_label(var_55)

class AdminTextareaWidget(django.forms.Textarea):
    def function_1(var_1, var_11=None):
        var_16 = {'class': 'vLargeTextField'}
        if var_11 is not None:
            var_16.update(var_11)
        super(AdminTextareaWidget, var_1).__init__(var_11=var_16)

class AdminTextInputWidget(django.forms.TextInput):
    def function_1(var_1, var_11=None):
        var_16 = {'class': 'vTextField'}
        if var_11 is not None:
            var_16.update(var_11)
        super(AdminTextInputWidget, var_1).__init__(var_11=var_16)

class AdminEmailInputWidget(django.forms.EmailInput):
    def function_1(var_1, var_11=None):
        var_16 = {'class': 'vTextField'}
        if var_11 is not None:
            var_16.update(var_11)
        super(AdminEmailInputWidget, var_1).__init__(var_11=var_16)

class AdminURLFieldWidget(django.forms.URLInput):
    def function_1(var_1, var_11=None):
        var_16 = {'class': 'vURLField'}
        if var_11 is not None:
            var_16.update(var_11)
        super(AdminURLFieldWidget, var_1).__init__(var_11=var_16)

    def function_2(var_1, var_9, var_10, var_11=None):
        var_56 = super(AdminURLFieldWidget, var_1).render(var_9, var_10, var_11)
        if var_10:
            var_10 = force_text(var_1._format_value(var_10))
            var_16 = {var_37: smart_urlquote(var_10)}
            var_56 = format_html(
                <p var_38="url">{0} <a{1}>{2}</a><br />{3} {4}</p>,
                _Currently:, flatatt(var_16), var_10,
                _Change:, var_56
            )
        return var_56


class AdminIntegerFieldWidget(django.forms.TextInput):
    var_57 = var_58

    def function_1(var_1, var_11=None):
        var_16 = {var_38: var_1.var_57}
        if var_11 is not None:
            var_16.update(var_11)
        super(AdminIntegerFieldWidget, var_1).__init__(var_11=var_16)

class AdminBigIntegerFieldWidget(AdminIntegerFieldWidget):
    var_57 = var_59

class AdminCommaSeparatedIntegerFieldWidget(django.forms.TextInput):
    def function_1(var_1, var_11=None):
        var_16 = {'class': 'vCommaSeparatedIntegerField'}
        if var_11 is not None:
            var_16.update(var_11)
        super(AdminCommaSeparatedIntegerFieldWidget, var_1).__init__(var_11=var_16)
