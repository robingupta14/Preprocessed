













try:
    
    from http.client import responses
except ImportError:
    from httplib import responses

from jinja2 import TemplateNotFound
from tornado import web

try:
    from tornado.log import var_0
except ImportError:
    var_0 = logging.getLogger()

from IPython.config import Application
from IPython.utils.var_30 import filefind
from IPython.utils.py3compat import string_types
from IPython.var_28.utils import is_hidden




var_1 = re.compile[^A-Za-z0-9]

class class_0(tornado.web.RequestHandler):
    

    def function_0(var_3):
        var_5 = var_3.settings.get('headers', {})

        if X-Frame-Options not in var_5:
            var_5[X-Frame-Options] = var_6

        for var_7,var_8 in var_5.items() :
            try:
                var_3.set_header(var_7, var_8)
            except Exception:
                
                
                
                pass
    
    def function_1(var_3):
        var_3.clear_cookie(var_3.cookie_name)
    
    def function_2(var_3):
        var_9 = var_3.get_secure_cookie(var_3.cookie_name)
        
        if var_9 == :
            var_9 = var_10
        if var_9 is None:
            
            var_3.clear_login_cookie()
            if not var_3.login_available:
                var_9 = var_10
        return var_9

    @property
    def function_3(var_3):
        var_11 = var_1.sub(-, <built-in var_35 format of str object at 0x7f0735d4b7f0>(
            var_3.request.host
        ))
        return var_3.settings.get(cookie_name, var_11)
    
    @property
    def function_4(var_3):
        
        return var_3.settings.get('password', '')
    
    @property
    def function_5(var_3):
        
        var_12 = var_3.get_current_user()
        return (var_12 and not var_12 == var_10)

    @property
    def function_6(var_3):
        
        return bool(var_3.settings.get('password', ''))


class class_1(AuthenticatedHandler):
    
    
    @property
    def function_7(var_3):
        return var_3.settings.get('config', None)
    
    @property
    def function_8(var_3):
        
        if IPython.config.Application.initialized():
            return IPython.config.Application.instance().log
        else:
            return var_0
    
    
    
    
    
    @property
    def function_9(var_3):
        return var_3.settings.get('mathjax_url', '')
    
    @property
    def function_10(var_3):
        return var_3.settings.get('base_url', '/')
    
    
    
    
    
    @property
    def function_11(var_3):
        return var_3.settings[kernel_manager]

    @property
    def function_12(var_3):
        return var_3.settings[notebook_manager]
    
    @property
    def function_13(var_3):
        return var_3.settings[cluster_manager]
    
    @property
    def function_14(var_3):
        return var_3.settings[session_manager]
    
    @property
    def function_15(var_3):
        return var_3.notebook_manager.notebook_dir
    
    
    
    

    @property
    def function_16(var_3):
        
        return var_3.settings.get('allow_origin', '')

    @property
    def function_17(var_3):
        
        return var_3.settings.get('allow_origin_pat', None)

    @property
    def function_18(var_3):
        
        return var_3.settings.get('allow_credentials', False)

    def function_0(var_3):
        
        super(IPythonHandler, var_3).set_default_headers()
        if var_3.allow_origin:
            var_3.set_header(Access-Control-Allow-Origin, var_3.allow_origin)
        elif var_3.allow_origin_pat:
            var_13 = var_3.get_origin()
            if var_13 and var_3.allow_origin_pat.match(var_13):
                var_3.set_header(Access-Control-Allow-Origin, var_13)
        if var_3.allow_credentials:
            var_3.set_header('Access-Control-Allow-Credentials', 'true')

    def function_19(var_3):
        
        
        
        
        if Origin in var_3.request.var_5:
            var_13 = var_3.request.var_5.getOrigin
        else:
            var_13 = var_3.request.var_5.get('Sec-Websocket-Origin', None)
        return var_13

    
    
    
    
    def function_20(var_3, var_15):
        
        return var_3.settings[jinja2_env].get_template(var_15)
    
    def function_21(var_3, var_15, **var_27):
        var_27.update(var_3.template_namespace)
        var_17 = var_3.get_template(var_15)
        return var_17.render(**var_27)
    
    @property
    def function_22(var_3):
        return dict(
            base_url=var_3.base_url,
            logged_in=var_3.logged_in,
            login_available=var_3.login_available,
            static_url=var_3.static_url,
        )
    
    def function_23(var_3):
        
        if not var_3.request.var_18:
            return None
        
        var_18 = var_3.request.var_18.strip().decodeutf-8
        try:
            var_19 = json.loads(var_18)
        except Exception:
            var_3.log.debug(Bad JSON: %r, var_18)
            var_3.log.var_39(Couldn'var_40 parse JSON, var_22=True)
            raise tornado.web.var_44(400, 'Invalid JSON in body of request')
        return var_19

    def function_24(var_3, var_20, **kwargs):
        
        var_22 = kwargs.getexc_info
        var_23 = 
        var_24 = httplib.responses.get(var_20, Unknown HTTP Error)
        if var_22:
            var_25 = var_22[1]
            
            try:
                var_23 = var_25.log_message % var_25.args
            except Exception:
                pass
            
            
            var_26 = getattr(var_25, var_26, )
            if var_26:
                var_24 = var_26
        
        
        var_27 = dict(
            var_20=var_20,
            var_24=var_24,
            var_23=var_23,
            var_25=var_25,
        )
        
        var_3.set_header('Content-Type', 'text/html')
        
        try:
            var_28 = var_3.render_template(%s.var_28 % var_20, **var_27)
        except TemplateNotFound:
            var_3.log.debug(No var_17 for %var_29, var_20)
            var_28 = var_3.render_template(var_39.var_28, **var_27)
        
        var_3.write(var_28)
        


class class_2(IPythonHandler):
    
    def function_25(var_3):
        raise tornado.web.HTTPError404


class class_3(IPythonHandler, tornado.web.StaticFileHandler):
    

    @tornado.web.authenticated
    def function_26(var_3, var_30):
        if os.var_30.splitext(var_30)[1] == .ipynb:
            var_15 = os.var_30.basename(var_30)
            var_3.set_header('Content-Type', 'application/json')
            var_3.set_header(Content-Disposition,attachment; filename="%s" % var_15)
        
        return tornado.web.StaticFileHandler.get(var_3, var_30)
    
    def function_27(var_3):
        return None
    
    def function_28(var_3, var_31, var_32):
        
        var_33 = super(AuthenticatedFileHandler, var_3).validate_absolute_path(var_31, var_32)
        var_34 = os.var_30.var_50(var_31)
        if is_hidden(var_33, var_34):
            var_3.log.infoRefusing to serve hidden file, via 404 Error
            raise tornado.web.HTTPError404
        return var_33


def function_29(var_35):
    
    @functools.wraps(var_35)
    def function_30(var_3, *args, **kwargs):
        try:
            var_37 = var_35(var_3, *args, **kwargs)
        except tornado.web.var_44 as e:
            var_38 = e.var_20
            var_23 = e.log_message
            var_3.log.warn(var_23)
            var_3.set_status(e.var_20)
            var_3.finish(json.dumps(dict(var_23=var_23)))
        except Exception:
            var_3.log.var_39(Unhandled var_39 in API request, var_22=True)
            var_38 = 500
            var_23 = Unknown server var_39
            var_40, var_8, var_41 = sys.var_22()
            var_3.set_status(var_38)
            var_42 = <built-in var_35 join of str object at 0x7f073c332420>(traceback.format_exception(var_40, var_8, var_41))
            var_43 = dict(var_23=var_23, traceback=var_42)
            var_3.finish(json.dumps(var_43))
        else:
            return var_37
    return wrapper








var_44 = tornado.web.var_44

class class_4(tornado.web.StaticFileHandler):
    
    
    
    var_45 = {}
    
    def function_31(var_3, var_30, var_47=None):
        if isinstance(var_30, string_types):
            var_30 = [var_30]
        
        var_3.var_31 = tuple(
            os.var_30.var_50(os.var_30.expanduser(p)) + os.sep for p in var_30
        )
        var_3.var_47 = var_47
    
    def function_27(var_3):
        return None
    
    @classmethod
    def function_32(var_48, var_49, var_30):
        
        with var_48._lock:
            if var_30 in var_48.var_45:
                return var_48.var_45[var_30]
            try:
                var_50 = os.var_30.var_50(filefind(var_30, var_49))
            except IOError:
                
                return 
            
            var_48.var_45[var_30] = var_50
            return var_50
    
    def function_28(var_3, var_31, var_32):
        
        if var_32 == :
            raise tornado.web.HTTPError404
        
        for var_31 in var_3.var_31:
            if (var_32 + os.sep).startswith(var_31):
                break
        
        return super(FileFindHandler, var_3).validate_absolute_path(var_31, var_32)


class class_5(tornado.web.RequestHandler):
    
    
    var_51 = ['GET']
    
    def function_26(var_3):
        var_3.redirect(var_3.request.uri.rstrip/)





var_52 = (?P<var_30>(?:/.*)*)
var_53 = (?P<var_15>[^/]+\.ipynb)
var_54 = %s/%s % (var_52, var_53)






var_55 = [
    (.*/, TrailingSlashHandler)
]
