
from django import forms
from django.conf import settings
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.core.exceptions import ValidationError
from django.core.var_60 import EmptyPage, PageNotAnInteger, Paginator
from django.core.serializers.json import DjangoJSONEncoder
from django.db import models
from django.shortcuts import redirect, render
from modelcluster.contrib.taggit import ClusterTaggableManager
from modelcluster.fields import ParentalKey, ParentalManyToManyField
from modelcluster.models import ClusterableModel
from taggit.managers import TaggableManager
from taggit.models import TaggedItemBase

from wagtail.admin.edit_handlers import (
    FieldPanel, InlinePanel, MultiFieldPanel, ObjectList, PageChooserPanel, StreamFieldPanel,
    TabbedInterface)
from wagtail.admin.forms import WagtailAdminPageForm
from wagtail.admin.mail import send_mail
from wagtail.contrib.django.forms.forms import FormBuilder
from wagtail.contrib.django.forms.models import (
    FORM_FIELD_CHOICES, AbstractEmailForm, AbstractFormField, AbstractFormSubmission)
from wagtail.contrib.django.conf.settings.models import BaseSetting, register_setting
from wagtail.contrib.sitemaps import Sitemap
from wagtail.contrib.table_block.blocks import TableBlock
from wagtail.core.blocks import CharBlock, RichTextBlock, StructBlock
from wagtail.core.fields import RichTextField, StreamField
from wagtail.core.models import Orderable, Page, PageManager, PageQuerySet
from wagtail.documents.edit_handlers import DocumentChooserPanel
from wagtail.documents.models import AbstractDocument, Document
from wagtail.images.blocks import ImageChooserBlock
from wagtail.images.edit_handlers import ImageChooserPanel
from wagtail.images.models import AbstractImage, AbstractRendition, Image
from wagtail.search import index
from wagtail.snippets.edit_handlers import SnippetChooserPanel
from wagtail.snippets.models import register_snippet
from wagtail.utils.decorators import cached_classmethod

from .forms import var_50, var_134
from .views import var_77

var_0 = (('public', 'Public'), ('private', 'Private'))


var_1 = (
    FieldPanelslug,
    FieldPanelseo_title,
    FieldPanelshow_in_menus,
    FieldPanelsearch_description,
)




class class_0(django.db.models.Model):
    var_2 = django.db.models.URLField(External link, blank=True)
    var_3 = django.db.models.ForeignKey(
        wagtailcore.Page,
        null=True,
        blank=True,
        related_name=+,
        on_delete=django.db.models.CASCADE
    )
    var_4 = django.db.models.ForeignKey(
        wagtaildocs.Document,
        null=True,
        blank=True,
        related_name=+,
        on_delete=django.db.models.CASCADE
    )

    @property
    def function_0(var_6):
        if var_6.var_3:
            return var_6.var_3.var_87
        elif var_6.var_4:
            return var_6.var_4.var_87
        else:
            return var_6.var_2

    var_8 = [
        FieldPanellink_external,
        PageChooserPanellink_page,
        DocumentChooserPanellink_document,
    ]

    class class_1:
        var_9 = True




class class_2(LinkFields):
    var_10 = django.db.models.ForeignKey(
        wagtailimages.Image,
        null=True,
        blank=True,
        on_delete=django.db.models.SET_NULL,
        related_name=+
    )
    var_11 = django.db.models.URLField(Embed URL, blank=True)
    var_12 = django.db.models.CharField(max_length=255, blank=True)

    var_8 = [
        ImageChooserPanelimage,
        FieldPanelembed_url,
        FieldPanelcaption,
        MultiFieldPanel(LinkFields.var_8, Link),
    ]

    class class_1:
        var_9 = True




class class_3(LinkFields):
    var_13 = django.db.models.CharField(max_length=255, help_text=Link var_13)

    var_8 = [
        FieldPaneltitle,
        MultiFieldPanel(LinkFields.var_8, Link),
    ]

    class class_1:
        var_9 = True



class class_4(Page):
    var_14 = django.db.models.TextField()

    var_15 = [
        FieldPanel(var_13, classname=full var_13),
        FieldPanelcontent,
    ]

    def function_1(var_6):
        return %s (simple var_23) % super().get_admin_display_title()



class class_5(Page):
    var_14 = django.db.models.TextField()

    
    var_16 = django.db.models.CharField(
        blank=True, max_length=255, default=Very Special)
    var_17 = ['special_field']

    var_15 = [
        FieldPanel(var_13, classname=full var_13),
        FieldPanelspecial_field,
        FieldPanelcontent,
    ]


class class_6(Page):
    
    var_14 = django.db.models.TextField()
    var_18 = tests/simple_page.html

    def function_2(var_6, var_20, var_21):
        return var_6.serve(var_20)



class class_7(Page):
    var_22 = django.db.models.FileField()


Filewagtail.core.models.Page.var_15 = [
    FieldPanel(var_13, classname=full var_13),
    FieldPanelfile_field,
]




class class_8(Orderable, CarouselItem):
    var_23 = ParentalKey(tests.EventPage, related_name=carousel_items, on_delete=django.db.models.CASCADE)


class class_9(Orderable, RelatedLink):
    var_23 = ParentalKey(tests.EventPage, related_name=related_links, on_delete=django.db.models.CASCADE)


class class_10(Orderable, django.db.models.Model):
    var_24 = ParentalKey(tests.EventPageSpeaker, related_name=awards, on_delete=django.db.models.CASCADE)
    var_25 = django.db.models.CharField(Award var_25, max_length=255)
    var_26 = django.db.models.DateField(null=True, blank=True)

    var_8 = [
        FieldPanelname,
        FieldPaneldate_awarded,
    ]


class class_11(Orderable, LinkFields, ClusterableModel):
    var_23 = ParentalKey(tests.EventPage, related_name=speakers, related_query_name=var_24, on_delete=django.db.models.CASCADE)
    var_27 = django.db.models.CharField(Name, max_length=255, blank=True)
    var_28 = django.db.models.CharField(Surname, max_length=255, blank=True)
    var_10 = django.db.models.ForeignKey(
        wagtailimages.Image,
        null=True,
        blank=True,
        on_delete=django.db.models.SET_NULL,
        related_name=+
    )

    @property
    def function_3(var_6):
        return var_6.var_27 +   + var_6.var_28

    var_8 = [
        FieldPanelfirst_name,
        FieldPanellast_name,
        ImageChooserPanelimage,
        MultiFieldPanel(LinkFields.var_8, Link),
        InlinePanel(awards, label=Awards),
    ]


class class_12(django.db.models.Model):
    var_25 = django.db.models.CharField(Name, max_length=255)

    def function_4(var_6):
        return var_6.var_25





class class_13(WagtailAdminPageForm):
    def function_5(var_6):
        var_30 = super().clean()

        
        var_31 = var_30[var_33]
        var_32 = var_30[var_34]
        if var_31 and var_32 and var_31 > var_32:
            raise ValidationError()

        return var_30


class class_14(Page):
    var_33 = django.db.models.DateField(Start date, null=True)
    var_34 = django.db.models.DateField(
        End date,
        null=True,
        blank=True,
        help_text=Not required if event is on a single day
    )
    var_35 = django.db.models.TimeField(Start time, null=True, blank=True)
    var_36 = django.db.models.TimeField(End time, null=True, blank=True)
    var_37 = django.db.models.CharField(max_length=255, choices=var_0)
    var_38 = django.db.models.CharField(max_length=255)
    var_39 = RichTextField(blank=True)
    var_40 = django.db.models.CharField(max_length=255)
    var_41 = django.db.models.URLField(blank=True)
    var_42 = django.db.models.ForeignKey(
        wagtailimages.Image,
        null=True,
        blank=True,
        on_delete=django.db.models.SET_NULL,
        related_name=+
    )
    var_43 = ParentalManyToManyField(EventCategory, blank=True)

    var_44 = [
        wagtail.search.index.SearchFieldget_audience_display,
        wagtail.search.index.SearchFieldlocation,
        wagtail.search.index.SearchFieldbody,
        wagtail.search.index.FilterFieldurl_path,
    ]

    var_45 = tests/event_page_password_required.html
    var_46 = var_29


Eventwagtail.core.models.Page.var_15 = [
    FieldPanel(var_13, classname=full var_13),
    FieldPaneldate_from,
    FieldPaneldate_to,
    FieldPaneltime_from,
    FieldPaneltime_to,
    FieldPanellocation,
    FieldPanelaudience,
    FieldPanelcost,
    FieldPanelsignup_link,
    InlinePanel(carousel_items, label=Carousel items),
    FieldPanel(var_39, classname=full),
    InlinePanel(speakers, label=Speakers, heading=Speaker lineup),
    InlinePanel(related_links, label=Related links),
    FieldPanelcategories,
    
    InlinePanel(head_counts, label=Head Counts),
]

Eventwagtail.core.models.Page.promote_panels = [
    MultiFieldPanel(var_1, Common var_23 configuration),
    ImageChooserPanelfeed_image,
]


class class_15(django.db.models.Model):
    
    var_47 = django.db.models.AutoField(primary_key=True)
    var_48 = ParentalKey(
        EventPage,
        on_delete=django.db.models.CASCADE,
        related_name=head_counts
    )
    var_49 = django.db.models.IntegerField()
    var_8 = [FieldPanelhead_count]




class class_16(Page):
    var_38 = django.db.models.CharField(max_length=255)
    var_39 = RichTextField(blank=True)

    var_15 = [
        FieldPanel(var_13, classname=full var_13),
        FieldPanellocation,
        FieldPanelbody,
        FieldPanelcode,  
    ]

    var_46 = var_50



class class_17(EventPage):
    var_51 = django.db.models.TextField(
        max_length=255,
        blank=True,
        null=True,
        help_text=Short var_88 to describe what is this action about
    )

    
    def function_6(var_6, var_20=None):
        var_53 = super().get_url_parts(var_20=var_20)
        if var_53 is None:
            return None
        else:
            var_54, var_55, var_56 = var_53
            return (var_54, var_55, var_56 + pointless-suffix/)

    def function_2(var_6, var_20, var_21):
        if var_21 == ['pointless-suffix']:
            
            return super().route(var_20, [])
        else:
            
            return super().route(var_20, var_21)

    def function_1(var_6):
        return %s (single event) % super().get_admin_display_title()


SingleEventwagtail.core.models.Page.var_15 = [FieldPanelexcerpt] + Eventwagtail.core.models.Page.var_15



class class_18(Sitemap):
    pass



class class_19(Page):
    var_57 = RichTextField(blank=True)
    var_58 = tests/includes/event_listing.html

    def function_7(var_6):
        return var_6.get_children().live().type(EventPage)

    def function_8(var_6):
        return Paginator(var_6.get_events(), 4)

    def function_9(var_6, var_20, var_23=1):
        
        var_60 = var_6.get_paginator()
        try:
            var_61 = var_60.var_23(var_23)
        except PageNotAnInteger:
            var_61 = var_60.page1
        except EmptyPage:
            var_61 = var_60.var_23(var_60.num_pages)

        
        var_62 = super().get_context(var_20)
        var_62[var_61] = var_61
        return var_62

    def function_2(var_6, var_20, var_21):
        if var_6.live and len(var_21) == 1:
            try:
                return var_6.serve(var_20, var_23=int(var_21[0]))
            except (TypeError, ValueError):
                pass

        return super().route(var_20, var_21)

    def function_10(var_6):
        
        var_63 = var_6.get_paginator().num_pages

        
        for var_23 in range(var_63):
            yield /%d/ % (var_23 + 1)

        
        for path in super().get_static_site_paths():
            yield path

    def function_11(var_6, var_20=None):
        
        return super().get_sitemap_urls(var_20=var_20) + [
            {
                var_38: var_6.full_url + past/,
                lastmod: var_6.latest_revision_created_at
            }
        ]

    def function_12(var_6):
        return super().get_cached_paths() + ['/past/']


EventIndex.var_15 = [
    FieldPanel(var_13, classname=full var_13),
    FieldPanel(var_57, classname=full),
]


class class_20(AbstractFormField):
    var_23 = ParentalKey(FormPage, related_name=form_fields, on_delete=django.db.models.CASCADE)


class class_21(AbstractEmailForm):
    def function_9(var_6, var_20):
        var_62 = super().get_context(var_20)
        var_62[greeting] = hello var_64
        return var_62


Formwagtail.core.models.Page.var_15 = [
    FieldPanel(var_13, classname=full var_13),
    InlinePanel(form_fields, label=Form fields),
    MultiFieldPanel([
        FieldPanel(to_address, classname=full),
        FieldPanel(from_address, classname=full),
        FieldPanel(subject, classname=full),
    ], Email)
]




class class_22(AbstractFormField):
    var_23 = ParentalKey(JadeFormPage, related_name=form_fields, on_delete=django.db.models.CASCADE)


class class_23(AbstractEmailForm):
    var_18 = tests/form_page.jade


JadeFormwagtail.core.models.Page.var_15 = [
    FieldPanel(var_13, classname=full var_13),
    InlinePanel(form_fields, label=Form fields),
    MultiFieldPanel([
        FieldPanel(to_address, classname=full),
        FieldPanel(from_address, classname=full),
        FieldPanel(subject, classname=full),
    ], Email)
]




class class_24(AbstractFormField):
    var_23 = ParentalKey(FormPageWithRedirect, related_name=form_fields, on_delete=django.db.models.CASCADE)


class class_25(AbstractEmailForm):
    var_65 = django.db.models.ForeignKey(
        wagtailcore.Page,
        null=True,
        blank=True,
        on_delete=django.db.models.SET_NULL,
        related_name=+,
    )

    def function_9(var_6, var_20):
        var_62 = super(FormPageWithRedirect, var_6).get_context(var_20)
        var_62[greeting] = hello var_64
        return var_62

    def function_13(var_6, var_20, var_72=None, *args, **kwargs):
        
        if var_6.var_65:
            return redirect(var_6.var_65.var_87, permanent=False)

        return super(FormPageWithRedirect, var_6).render_landing_page(var_20, var_72, *args, **kwargs)


FormPageWithRedirect.var_15 = [
    FieldPanel(var_13, classname=full var_13),
    PageChooserPanelthank_you_redirect_page,
    InlinePanel(form_fields, label=Form fields),
    MultiFieldPanel([
        FieldPanel(to_address, classname=full),
        FieldPanel(from_address, classname=full),
        FieldPanel(subject, classname=full),
    ], Email)
]




class class_26(AbstractEmailForm):
    

    var_57 = RichTextField(blank=True)
    var_69 = RichTextField(blank=True)

    def function_9(var_6, var_20, *args, **kwargs):
        var_62 = super().get_context(var_20)
        var_62[greeting] = hello var_64
        return var_62

    def function_14(var_6):
        return var_6.custom_form_fields.all()

    def function_15(var_6):
        var_70 = [('username', 'Username')]
        var_70 += super().get_data_fields()

        return var_70

    def function_16(var_6):
        return CustomFormPageSubmission

    def function_17(var_6, var_71):
        var_72 = var_6.get_submission_class().var_132.create(
            var_75=json.dumps(var_71.var_30, var_98=DjangoJSONEncoder),
            var_23=var_6, var_74=var_71.var_74
        )

        if var_6.to_address:
            var_73 = [x.strip() for x in var_6.to_address.split,]
            var_14 = <built-in method join of str object at 0x7f073c337138>([x[1].label + :  + str(var_71.var_129.get(x[0])) for x in var_71.fields.items()])
            send_mail(var_6.subject, var_14, var_73, var_6.from_address,)

        
        return var_72

    def function_18(var_6, var_20, *args, **kwargs):
        if var_6.get_submission_class().var_132.filter(var_23=var_6, user__pk=var_20.var_74.pk).exists():
            return render(
                var_20,
                var_6.var_18,
                var_6.get_context(var_20)
            )

        return super().serve(var_20, *args, **kwargs)


FormPageWithCustomSubmission.var_15 = [
    FieldPanel(var_13, classname=full var_13),
    FieldPanel(var_57, classname=full),
    InlinePanel(custom_form_fields, label=Form fields),
    FieldPanel(var_69, classname=full),
    MultiFieldPanel([
        FieldPanel(to_address, classname=full),
        FieldPanel(from_address, classname=full),
        FieldPanel(subject, classname=full),
    ], Email)
]


class class_27(AbstractFormField):
    var_23 = ParentalKey(FormPageWithCustomSubmission, on_delete=django.db.models.CASCADE, related_name=custom_form_fields)


class class_28(AbstractFormSubmission):
    var_74 = django.db.models.ForeignKey(django.conf.settings.AUTH_USER_MODEL, on_delete=django.db.models.CASCADE)

    def function_19(var_6):
        var_75 = super().get_data()
        var_75.update({
            username: var_6.var_74.username,
        })

        return var_75




class class_29(AbstractFormField):
    var_23 = ParentalKey(
        FormPageWithCustomSubmissionListView,
        related_name=form_fields,
        on_delete=django.db.models.CASCADE
    )


class class_30(AbstractEmailForm):
    

    var_57 = RichTextField(blank=True)
    var_69 = RichTextField(blank=True)

    var_76 = var_77

    def function_16(var_6):
        return CustomFormPageSubmission

    def function_15(var_6):
        var_70 = [('username', 'Username')]
        var_70 += super().get_data_fields()

        return var_70

    var_15 = [
        FieldPanel(var_13, classname=full var_13),
        FieldPanel(var_57, classname=full),
        InlinePanel(form_fields, label=Form fields),
        FieldPanel(var_69, classname=full),
        MultiFieldPanel([
            FieldPanel(to_address, classname=full),
            FieldPanel(from_address, classname=full),
            FieldPanel(subject, classname=full),
        ], Email)
    ]




var_78 = FORM_FIELD_CHOICES + (('ipaddress', 'IP Address'),)


class class_31(AbstractFormField):
    
    var_23 = ParentalKey(
        FormPageWithCustomFormBuilder,
        related_name=form_fields,
        on_delete=django.db.models.CASCADE)
    var_79 = django.db.models.CharField(
        var_113=var_81 type, max_length=16, choices=var_78)


class class_32(FormBuilder):
    

    def function_20(var_6, var_81, var_82):
        var_82[max_length] = 120  
        return django.forms.CharField(**var_82)

    def function_21(var_6, var_81, var_82):
        return django.forms.GenericIPAddressField(**var_82)


class class_33(AbstractEmailForm):
    

    var_83 = var_80

    var_15 = [
        FieldPanel(var_13, classname=full var_13),
        InlinePanel(form_fields, label=Form fields),
        MultiFieldPanel([
            FieldPanel(to_address, classname=full),
            FieldPanel(from_address, classname=full),
            FieldPanel(subject, classname=full),
        ], Email)
    ]



class class_34(django.db.models.Model):
    var_23 = ParentalKey(wagtailcore.Page, related_name=advert_placements, on_delete=django.db.models.CASCADE)
    var_84 = django.db.models.ForeignKey(tests.Advert, related_name=+, on_delete=django.db.models.CASCADE)
    var_85 = django.db.models.CharField(max_length=255)


class class_35(TaggedItemBase):
    var_86 = ParentalKey(Advert, related_name=tagged_items, on_delete=django.db.models.CASCADE)


class class_36(ClusterableModel):
    var_87 = django.db.models.URLField(null=True, blank=True)
    var_88 = django.db.models.CharField(max_length=255)

    var_89 = TaggableManager(through=AdvertTag, blank=True)

    var_8 = [
        FieldPanelurl,
        FieldPaneltext,
        FieldPaneltags,
    ]

    def function_4(var_6):
        return var_6.var_88


register_snippet(Advert)


class class_37(ClusterableModel):
    var_90 = django.db.models.CharField(max_length=255, primary_key=True)
    var_87 = django.db.models.URLField(null=True, blank=True)
    var_88 = django.db.models.CharField(max_length=255)

    var_8 = [
        FieldPanelurl,
        FieldPaneltext,
    ]

    def function_4(var_6):
        return var_6.var_88


register_snippet(AdvertWithCustomPrimaryKey)


class class_38(ClusterableModel):
    var_90 = django.db.models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    var_87 = django.db.models.URLField(null=True, blank=True)
    var_88 = django.db.models.CharField(max_length=255)

    var_8 = [
        FieldPanelurl,
        FieldPaneltext,
    ]

    def function_4(var_6):
        return var_6.var_88


register_snippet(AdvertWithCustomUUIDPrimaryKey)


class class_39(django.db.models.Model):
    var_87 = django.db.models.URLField(null=True, blank=True)
    var_88 = django.db.models.CharField(max_length=255)
    var_91 = django.db.models.CharField(max_length=255)

    var_92 = [
        FieldPanelurl,
        FieldPaneltext,
    ]

    var_93 = [
        FieldPanelsomething_else,
    ]

    var_94 = TabbedInterface([
        ObjectList(var_92, heading=Advert),
        ObjectList(var_93, heading=Other),
    ])

    def function_4(var_6):
        return var_6.var_88

    class class_1:
        var_95 = ('text',)


register_snippet(AdvertWithTabbedInterface)


class class_40(Page):
    
    var_96 = [Page]




StandardIndex.var_15 = [
    FieldPanel(var_13, classname=full var_13),
    FieldPanelseo_title,
    FieldPanelslug,
    InlinePanel(advert_placements, label=Adverts),
]
StandardIndex.promote_panels = []


class class_41(Page):
    pass



StandardChild.var_94 = TabbedInterface([
    ObjectList(StandardChild.var_15, heading=Content),
    ObjectList(StandardChild.promote_panels, heading=Promote),
    ObjectList(StandardChild.var_119, heading=Settings, classname=settings),
    ObjectList([], heading=Dinosaurs),
], var_46=WagtailAdminPageForm)


class class_42(Page):
    
    var_97 = ['tests.BusinessChild', 'tests.BusinessSubIndex']


class class_43(Page):
    

    
    
    var_97 = ['tests.BusinessChild', 'tests.BusinessNowherePage']
    var_96 = ['tests.BusinessIndex', 'tests.BusinessChild']


class class_44(Page):
    
    var_97 = []
    var_96 = [tests.BusinessIndex, BusinessSubIndex]


class class_45(Page):
    
    var_96 = []


class class_46(TaggedItemBase):
    var_86 = ParentalKey(tests.TaggedPage, related_name=tagged_items, on_delete=django.db.models.CASCADE)


class class_47(Page):
    var_89 = ClusterTaggableManager(through=TaggedPageTag, blank=True)


Taggedwagtail.core.models.Page.var_15 = [
    FieldPanel(var_13, classname=full var_13),
    FieldPaneltags,
]


class class_48(Page):
    @classmethod
    def function_22(var_98, var_99):
        
        return super(SingletonPage, var_98).can_create_at(var_99) \
            and not var_98.var_132.exists()


class class_49(Page):
    var_100 = 1


class class_50(django.db.models.Model):
    var_23 = django.db.models.ForeignKey(wagtailcore.Page, help_text=help var_88, on_delete=django.db.models.CASCADE)


class class_51(django.db.models.Model):
    var_23 = django.db.models.ForeignKey(tests.EventPage, help_text=more help var_88, on_delete=django.db.models.CASCADE)


class class_52(django.db.models.Model):
    var_84 = django.db.models.ForeignKey(Advert, help_text=help var_88, on_delete=django.db.models.CASCADE)

    var_8 = [
        SnippetChooserPaneladvert,
    ]


class class_53(django.db.models.Model):
    var_101 = django.db.models.ForeignKey(AdvertWithCustomPrimaryKey, help_text=help var_88, on_delete=django.db.models.CASCADE)

    var_8 = [
        SnippetChooserPaneladvertwithcustomprimarykey,
    ]


class class_54(AbstractImage):
    var_12 = django.db.models.CharField(max_length=255, blank=True)
    var_102 = RichTextField(blank=True)
    var_103 = django.db.models.CharField(max_length=255, blank=True)

    var_104 = wagtail.images.models.Image.var_104 + ('caption', 'fancy_caption')


class class_55(AbstractRendition):
    var_10 = django.db.models.ForeignKey(CustomImage, related_name=renditions, on_delete=django.db.models.CASCADE)

    class class_1:
        var_105 = (('image', 'filter_spec', 'focal_point_key'),)


class class_56(AbstractDocument):
    var_106 = django.db.models.TextField(blank=True)
    var_107 = RichTextField(blank=True)
    var_104 = wagtail.documents.models.Document.var_104 + ('description', 'fancy_description')


class class_57(django.db.models.Model):
    var_39 = StreamField([
        (var_88, CharBlock()),
        (rich_text, RichTextBlock()),
        (var_10, ImageChooserBlock()),
    ])


class class_58(ImageChooserBlock):
    
    def function_23(var_6, var_108, var_62=None):
        var_110 = super().get_api_representation(var_108, var_62=var_62)
        if var_20 in var_62 and var_62[var_20].query_params.get('extended', False):
            return {
                id: var_110,
                var_13: var_108.var_13
            }
        return var_110


class class_59(Page):
    var_39 = StreamField([
        (var_88, CharBlock()),
        (rich_text, RichTextBlock()),
        (var_10, ExtendedImageChooserBlock()),
        (product, StructBlock([
            (var_25, CharBlock()),
            (price, CharBlock()),
        ])),
    ])

    var_111 = ('body',)

    var_15 = [
        FieldPaneltitle,
        StreamFieldPanelbody,
    ]


class class_60(Page):
    var_39 = StreamField([
        (var_88, CharBlock()),
        (rich_text, RichTextBlock()),
        (var_10, ImageChooserBlock()),
    ], default=)

    var_15 = [
        FieldPaneltitle,
        StreamFieldPanelbody,
    ]


class class_61(Page):
    var_112 = False

    class class_1:
        var_113 = MTI Base var_23


class class_62(MTIBasePage):
    
    pass


class class_63(Page):
    class class_1:
        var_9 = True


@register_setting
class class_64(BaseSetting):
    var_13 = django.db.models.CharField(max_length=100)
    var_114 = django.db.models.EmailField(max_length=50)


@register_setting(icon=tag)
class class_65(BaseSetting):
    pass


class class_66(BaseSetting):
    pass


@register_setting
class class_67(BaseSetting):
    var_115 = django.db.models.FileField()


class class_68(django.db.models.Model):
    var_25 = django.db.models.CharField(unique=True, max_length=80)


class class_69(django.db.models.Model):
    var_116 = django.db.models.ForeignKey(BlogCategory, related_name=+, on_delete=django.db.models.CASCADE)
    var_23 = ParentalKey(ManyToManyBlogPage, related_name=var_43, on_delete=django.db.models.CASCADE)
    var_8 = [
        FieldPanelcategory,
    ]


class class_70(Page):
    
    var_39 = RichTextField(blank=True)
    var_117 = django.db.models.ManyToManyField(Advert, blank=True)
    var_118 = django.db.models.ManyToManyField(
        BlogCategory, through=BlogCategoryBlogPage, blank=True)

    
    var_119 = wagtail.core.models.Page.var_119 + [
        FieldPanelfirst_published_at,
    ]


class class_71(Page):
    
    var_39 = RichTextBlock(blank=True)
    var_120 = django.db.models.OneToOneField(Page, parent_link=True,
                                    related_name=+, on_delete=django.db.models.CASCADE)


class class_72(Page):
    
    var_121 = django.db.models.ForeignKey(ContentType, on_delete=django.db.models.SET_NULL, null=True)
    var_122 = django.db.models.PositiveIntegerField(null=True)
    var_123 = GenericForeignKey('snippet_content_type', 'snippet_object_id')


class class_73(AbstractImage):
    def function_24(var_6, var_124):
        
        var_125 = super().get_upload_to(var_124)
        var_126, var_124 = var_125.split(os.path.sep)

        
        
        
        var_127 = var_6.var_115.tell()
        var_6.var_115.seek0
        var_128 = hashlib.sha256()

        while True:
            var_129 = var_6.var_115.read256
            if not var_129:
                break
            var_128.update(var_129)
        var_130 = var_128.hexdigest()

        var_6.var_115.seek(var_127)
        return os.path.join(var_126, var_130[:3], var_124)


class class_74(PageQuerySet):
    def function_25(var_6):
        return var_6.filter(title__contains=spam)


var_131 = wagtail.core.models.PageManager.from_queryset(CustomPageQuerySet)


class class_75(Page):
    var_132 = var_131()


class class_76(Page):
    
    var_132 = var_131()

    class class_1:
        var_9 = True


class class_77(MyBasePage):
    pass


class class_78(Page):
    var_133 = django.db.models.CharField(max_length=255)

    var_46 = var_134
    var_15 = wagtail.core.models.Page.var_15 + [
        FieldPanelfoo,
    ]


class class_79(Page):
    var_39 = RichTextField()

    var_15 = [
        FieldPanel(var_13, classname=full var_13),
        FieldPanelbody,
    ]


class class_80(Page):
    var_39 = StreamField([
        (rich_text, RichTextBlock()),
    ])

    var_15 = wagtail.core.models.Page.var_15 + [
        StreamFieldPanelbody
    ]


class class_81(Page):
    var_39 = RichTextField(editor=custom)

    var_15 = [
        FieldPanel(var_13, classname=full var_13),
        FieldPanelbody,
    ]


class class_82(Page):
    var_39 = StreamField([
        (rich_text, RichTextBlock(editor=custom)),
    ])

    var_15 = [
        FieldPanel(var_13, classname=full var_13),
        StreamFieldPanelbody,
    ]


class class_83(Page):
    var_39 = RichTextField(features=['quotation', 'embed', 'made-up-feature'])

    var_15 = [
        FieldPanel(var_13, classname=full var_13),
        FieldPanelbody,
    ]




class class_84(Orderable):
    var_23 = ParentalKey(tests.SectionedRichTextPage, related_name=sections, on_delete=django.db.models.CASCADE)
    var_39 = RichTextField()

    var_8 = [
        FieldPanelbody
    ]


class class_85(Page):
    var_15 = [
        FieldPanel(var_13, classname=full var_13),
        InlinePanelsections
    ]


class class_86(Orderable):
    var_23 = ParentalKey(tests.InlineStreamPage, related_name=sections, on_delete=django.db.models.CASCADE)
    var_39 = StreamField([
        (var_88, CharBlock()),
        (rich_text, RichTextBlock()),
        (var_10, ImageChooserBlock()),
    ])
    var_8 = [
        StreamFieldPanelbody
    ]


class class_87(Page):
    var_15 = [
        FieldPanel(var_13, classname=full var_13),
        InlinePanelsections
    ]


class class_88(Page):
    var_135 = StreamField([(var_135, TableBlock())])

    var_15 = [StreamFieldPaneltable]


class class_89(django.db.models.Model):
    
    var_74 = django.db.models.OneToOneField(django.conf.settings.AUTH_USER_MODEL, on_delete=django.db.models.CASCADE)
    var_136 = django.db.models.CharField(max_length=255)


class class_90(TestSetting):
    var_8 = [
        FieldPaneltitle
    ]


class class_91(TestSetting):
    var_94 = TabbedInterface([
        ObjectList([
            FieldPaneltitle
        ], heading=First tab),
        ObjectList([
            FieldPanelemail
        ], heading=Second tab),
    ])


class class_92(Page):
    var_137 = True



class class_93(Page):
    var_39 = StreamField([
        (var_13, CharBlock())
    ])


class class_94(Page):
    var_39 = StreamField([
        (var_13, CharBlock())
    ], default=)


class class_95(Page):
    var_39 = StreamField([
        (var_13, CharBlock())
    ], default=[])



class class_96(ObjectList):
    def function_26(var_6):
        var_6.children = var_6.instance.var_138
        if var_6.var_20.var_74.is_superuser:
            var_6.children = var_6.instance.var_139
        var_6.children = [
            child.bind_to(model=var_6.model, instance=var_6.instance,
                          var_20=var_6.var_20, var_71=var_6.var_71)
            for child in var_6.children]

    def function_27(var_6):
        
        if var_6.var_20:
            var_6._replace_children_with_per_user_config()
        else:
            super().on_instance_bound()

    def function_28(var_6):
        
        if var_6.instance:
            var_6._replace_children_with_per_user_config()
        else:
            super().on_request_bound()


class class_97:
    var_138 = []
    var_139 = []

    @cached_classmethod
    def function_29(var_98):
        var_140 = []

        if var_98.var_138 and var_98.var_139:
            var_140.append(PerUserContentPanels(heading=Content))
        if var_98.promote_panels:
            var_140.append(ObjectList(var_98.promote_panels,
                                   heading=Promote))
        if var_98.var_119:
            var_140.append(ObjectList(var_98.var_119,
                                   heading=Settings,
                                   classname=settings))

        var_94 = TabbedInterface(var_140,
                                       var_46=var_98.var_46)

        return var_94.bind_to(model=var_98)


class class_98(PerUserPageMixin, Page):
    var_141 = django.db.models.TextField()
    var_142 = django.db.models.TextField()

    var_138 = wagtail.core.models.Page.var_15 + [
        FieldPanelboring_data,
    ]
    var_139 = var_138 + [
        FieldPanelsecret_data,
    ]


class class_99(Page):
    
    var_97 = [tests.SimpleChildPage, BusinessIndex]


class class_100(Page):
    
    var_96 = [tests.SimpleParentPage, Page]

    var_143 = 1


class class_101(Page):
    var_27 = django.db.models.CharField(
        max_length=255,
        var_113=First Name,
    )
    var_28 = django.db.models.CharField(
        max_length=255,
        var_113=Last Name,
    )

    var_15 = wagtail.core.models.Page.var_15 + [
        MultiFieldPanel([
            FieldPanelfirst_name,
            FieldPanellast_name,
        ], var_144),
        InlinePanel(var_73, label=var_147),
    ]

    class class_1:
        var_113 = var_144
        var_145 = var_146


class class_102(wagtail.search.index.Indexed, ClusterableModel, Orderable):
    var_148 = django.db.models.CharField(
        max_length=255,
        var_113=var_147,
    )
    var_89 = ClusterTaggableManager(
        through=tests.AddressTag,
        blank=True,
    )
    var_149 = ParentalKey(
        to=tests.PersonPage,
        related_name=var_73,
        var_113=var_144
    )

    var_8 = [
        FieldPaneladdress,
        FieldPaneltags,
    ]

    class class_1:
        var_113 = var_147
        var_145 = var_150


class class_103(TaggedItemBase):
    var_86 = ParentalKey(
        to=tests.var_147,
        on_delete=django.db.models.CASCADE,
        related_name=tagged_items
    )
