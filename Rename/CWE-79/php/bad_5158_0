<?php





abstract class class_0 extends var_0
{
    
    public static function fn_0()
    {
        return __(
            'Displays a TIME, TIMESTAMP, DATETIME or numeric unix timestamp'
            . ' column as formatted date. The first option is the offset (in'
            . ' hours) which will be added to the timestamp (Default: 0). Use'
            . ' second option to specify a different date/time format string.'
            . ' Third option determines whether you want to see local date or'
            . ' UTC one (use "local" or "utc" strings) for that. According to'
            . ' that, date format has different value - for "local" see the'
            . ' documentation for PHP\'s strftime() function and for "utc" it'
            . ' is done using gmdate() function.'
        );
    }

    
    public function fn_1($var_1, $var_2 = array(), $var_3 = '')
    {
        

        
        if (empty($var_2[0])) {
            $var_2[0] = 0;
        }

        if (empty($var_2[2])) {
            $var_2[2] = 'local';
        } else {
            $var_2[2] = mb_strtolower($var_2[2]);
        }

        if (empty($var_2[1])) {
            if ($var_2[2] == 'local') {
                $var_2[1] = __('%B %d, %Y at %I:%M %p');
            } else {
                $var_2[1] = 'Y-m-d  H:i:s';
            }
        }

        $var_4 = -1;

        
        
        
        if ($var_3->var_5 == 'int') {
            $var_4 = $var_1;

            
            
            
            
        } else {
            if (preg_match('/^(\d{2}){3,7}$/', $var_1)) {

                if (mb_strlen($var_1) == 14 || mb_strlen($var_1) == 8) {
                    $var_6 = 4;
                } else {
                    $var_6 = 2;
                }

                $var_7 = array();
                $var_7['year'] = (int)
                mb_substr($var_1, 0, $var_6);
                $var_7['month'] = (int)
                mb_substr($var_1, $var_6, 2);
                $var_7['day'] = (int)
                mb_substr($var_1, $var_6 + 2, 2);
                $var_7['hour'] = (int)
                mb_substr($var_1, $var_6 + 4, 2);
                $var_7['minute'] = (int)
                mb_substr($var_1, $var_6 + 6, 2);
                $var_7['second'] = (int)
                mb_substr($var_1, $var_6 + 8, 2);

                if (checkdate($var_7['month'], $var_7['day'], $var_7['year'])) {
                    $var_4 = mktime(
                        $var_7['hour'],
                        $var_7['minute'],
                        $var_7['second'],
                        $var_7['month'],
                        $var_7['day'],
                        $var_7['year']
                    );
                }
                
                
            } else {
                if (preg_match('/^[0-9]\d{1,9}$/', $var_1)) {
                    $var_4 = (int)$var_1;
                } else {
                    $var_4 = strtotime($var_1);
                }
            }
        }

        
        if ($var_4 < 0 && preg_match('/^[1-9]\d{1,9}$/', $var_1)) {
            $var_4 = $var_1;
        }

        
        if ($var_4 >= 0) {
            $var_4 -= $var_2[0] * 60 * 60;
            $var_8 = $var_1;
            if ($var_2[2] == 'local') {
                $var_9 = var_10\var_11\var_12::localisedDate(
                    $var_4,
                    $var_2[1]
                );
            } elseif ($var_2[2] == 'utc') {
                $var_9 = gmdate($var_2[1], $var_4);
            } else {
                $var_9 = 'INVALID DATE TYPE';
            }
            $var_1 = '<dfn onclick="alert(\'' . $var_8 . '\');" title="'
                . $var_8 . '">' . $var_9 . '</dfn>';
        }

        return $var_1;
    }

    

    
    public static function fn_2()
    {
        return "Date Format";
    }
}
