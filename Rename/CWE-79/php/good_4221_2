<?php


class var_0 extends var_1
{
    
    function fn_0($var_3)
    {
        return preg_replace('/<!-- [a-z]+ (ignored|not allowed) -->/', '', $var_3);
    }


    
    function fn_1()
    {
        
        $var_3 = '<a href="data:text/html,&lt;script&gt;alert(document.cookie)&lt;/script&gt;">Firefox</a>'
            .'<a href="vbscript:alert(document.cookie)">Internet Explorer</a></p>'
            .'<A href="data:text/html,&lt;script&gt;alert(document.cookie)&lt;/script&gt;">Firefox</a>'
            .'<A HREF="vbscript:alert(document.cookie)">Internet Explorer</a>'
            .'<a href="data:application/xhtml+xml;base64,PGh0bW">CLICK ME</a>'; 

        $var_4 = new class_0;
        $var_6 = $var_4->wash($var_3);

        $var_8->assertNotRegExp('/data:text/', $var_6, "Remove data:text/html links");
        $var_8->assertNotRegExp('/vbscript:/', $var_6, "Remove vbscript: links");
        $var_8->assertNotRegExp('/data:application/', $var_6, "Remove data:application links");
    }

    
    function fn_2()
    {
        $var_3 = "<p><a href=\"\nhttp:

        $var_4 = new rcube_washtml;
        $var_6 = $var_4->var_7($var_3);

        $var_8->var_10('|href="var_11:
    }

    
    function var_12()
    {
        $var_3 = '<p><area href="data:text/html,&lt;script&gt;alert(document.cookie)&lt;/script&gt;">'
            . '<area href="vbscript:alert(document.cookie)">Internet Explorer</p>'
            . '<area href="javascript:alert(document.domain)" shape=default>'
            . '<p><AREA HREF="data:text/html,&lt;script&gt;alert(document.cookie)&lt;/script&gt;">'
            . '<Area href="vbscript:alert(document.cookie)">Internet Explorer</p>'
            . '<area HREF="javascript:alert(document.domain)" shape=default>';

        $var_4 = new class_0;
        $var_6 = $var_4->wash($var_3);

        $var_8->assertNotRegExp('/data:text/', $var_6, "data:text/html in area href");
        $var_8->assertNotRegExp('/vbscript:/', $var_6, "vbscript: in area href");
        $var_8->assertNotRegExp('/javascript:/', $var_6, "javascript: in area href");
    }

    
    function var_13()
    {
        $var_4 = new class_0;

        $var_3   = "<!--[if gte mso 10]><p>p1</p><!--><p>p2</p>";
        $var_6 = $var_8->fn_0($var_4->wash($var_3));

        $var_8->var_14('<p>p2</p>', $var_6, "HTML conditional comments (

        $var_3   = "<!--var_15><var_16>var_17</var_16>";
        $var_6 = $var_8->var_2($var_4->var_7($var_3));

        $var_8->var_14('<p>test</p>', $var_6, "var_18 var_19 var_20 (

        $var_3   = "<p>para1</p><!-- comment --><p>para2</p>";
        $var_6 = $var_8->fn_0($var_4->wash($var_3));

        $var_8->assertEquals('<p>para1</p><p>para2</p>', $var_6, "HTML comments - simple comment");

        $var_3   = "<p>para1</p><!-- <hr> comment --><p>para2</p>";
        $var_6 = $var_8->fn_0($var_4->wash($var_3));

        $var_8->assertEquals('<p>para1</p><p>para2</p>', $var_6, "HTML comments - tags inside (

        $var_3   = "<var_16>var_21</var_16><!-- var_22 => var_22 --><var_16>var_23</var_16>";
        $var_6 = $var_8->var_2($var_4->var_7($var_3));

        $var_8->var_14('<p>para1</p><p>para2</p>', $var_6, "var_18 var_20 - var_24 var_25");

        $var_3   = "<p><!-- span>1</span -->\n<span>2</span>\n<!-- >3</span --><span>4</span></p>";
        $var_6 = $var_8->fn_0($var_4->wash($var_3));

        $var_8->var_14("<p>\n<span>2</span>\n<span>4</span></p>", $var_6, "HTML comments (
    }

    
    function test_self_closing()
    {
        $var_3 = "<var_26>var_17";

        $var_4 = new class_0;
        $var_6 = $var_4->wash($var_3);

        $var_8->var_10('|<textarea>test</textarea>|', $var_6, "Self-closing textarea (
    }

    
    function test_closing_tag_attrs()
    {
        $var_3 = "<var_27 var_28=\"http:

        $var_4 = new rcube_washtml;
        $var_6 = $var_4->var_7($var_3);

        $var_8->var_10('|</a>|', $var_6, "var_29 var_30 var_31 (
    }

    
    function test_lists()
    {
        $var_32 = array(
            array(
                "<ol><li>First</li><li>Second</li><ul><li>First sub</li></ul><li>Third</li></ol>",
                "<ol><li>First</li><li>Second<ul><li>First sub</li></ul></li><li>Third</li></ol>"
            ),
            array(
                "<ol><li>First<ul><li>First sub</li></ul></li></ol>",
                "<ol><li>First<ul><li>First sub</li></ul></li></ol>",
            ),
            array(
                "<ol><li>First<ol><li>First sub</li></ol></li></ol>",
                "<ol><li>First<ol><li>First sub</li></ol></li></ol>",
            ),
            array(
                "<ul><li>First</li><ul><li>First sub</li><ul><li>sub sub</li></ul></ul><li></li></ul>",
                "<ul><li>First<ul><li>First sub<ul><li>sub sub</li></ul></li></ul></li><li></li></ul>",
            ),
            array(
                "<ul><li>First</li><li>second</li><ul><ul><li>sub sub</li></ul></ul></ul>",
                "<ul><li>First</li><li>second<ul><ul><li>sub sub</li></ul></ul></li></ul>",
            ),
            array(
                "<ol><ol><ol></ol></ol></ol>",
                "<ol><ol><ol></ol></ol></ol>",
            ),
            array(
                "<div><ol><ol><ol></ol></ol></ol></div>",
                "<div><ol><ol><ol></ol></ol></ol></div>",
            ),
        );

        foreach ($var_32 as $var_33) {
            var_5::var_34($var_33[0]);

            $var_8->var_35($var_33[1], $var_33[0], "Broken nested lists (
        }
    }

    
    function test_color_style()
    {
        $var_3 = "<var_16 var_36=\"font-size: 10px; color: rgb(241, 245, 218)\">a</p>";

        $var_4 = new class_0;
        $var_6 = $var_4->wash($var_3);

        $var_8->assertRegExp('|color: rgb\(241, 245, 218\)|', $var_6, "Color style (
        $var_8->var_10('|font-size: 10px|', $var_6, "var_37-var_38 var_36");
    }

    
    function test_style_unicode()
    {
        $var_3 = "<html><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />
            <body><span style='font-family:\"新細明體\",\"serif\";color:red'>test</span></body></html>";

        $var_4 = new class_0;
        $var_6 = $var_4->wash($var_3);

        $var_8->var_10('|style="font-family: \&quot;新細明體\&quot;,\&quot;serif\&quot;; color: red"|', $var_6, "Unicode chars in style attribute - quoted (

        $var_3 = "<var_3><var_39 var_11-var_40=\"Content-Type\" content=\"text/html; charset=utf-8\" />
            <body><span style='font-family:新細明體;color:red'>test</span></body></html>";

        $var_4 = new class_0;
        $var_6 = $var_4->wash($var_3);

        $var_8->var_10('|style="font-family: 新細明體; color: red"|', $var_6, "Unicode chars in style attribute (
    }

    
    function test_style_body_attrs()
    {
        $var_3 = "<var_3><var_39 var_11-var_40=\"Content-Type\" content=\"text/html; charset=utf-8\" />
            <body bgcolor=\"
            </body></html>";

        $var_4 = new class_0(array('html_elements' => array('body')));
        $var_6 = $var_4->wash($var_3);

        $var_8->var_10('|bgcolor="
        $this->assertRegExp('|var_41="
        $var_8->assertRegExp('|background="
        $this->assertRegExp('|var_42="
        $var_8->var_10('|alink="
        $this->assertRegExp('|var_43="
    }

    
    function test_style_wash()
    {
        $var_3 = "<var_16 var_36=\"line-height: 1; height: 10\">a</p>";

        $var_4 = new class_0;
        $var_6 = $var_4->wash($var_3);

        $var_8->assertRegExp('|line-height: 1;|', $var_6, "Untouched line-height (
        $var_8->var_10('|; height: 10px|', $var_6, "var_44 var_45 var_46");

        $var_3     = "<div style=\"padding: 0px\n   20px;border:1px solid 
        $var_47 = "<var_48 var_36=\"padding: 0px 20px; border: 1px solid 

        $var_4 = new rcube_washtml;
        $var_6 = $var_4->var_7($var_3);

        $var_8->var_49(strpos($var_6, $var_47) !== false, "var_50-var_51 and new-var_52 var_53 class_1");
    }

    
    function var_54()
    {
        $var_3 = "<img style=aaa:'\"/onerror=alert(1)
        $var_55  = "<var_56 var_36=\"aaa: '&quot;/onerror=alert(1)

        $var_4 = new rcube_washtml;
        $var_6 = $var_4->var_7($var_3);

        $var_8->var_49(strpos($var_6, $var_55) !== false, "var_57 var_58 var_59 var_60 (

        $var_3 = "<img style=aaa:'&quot;/onerror=alert(1)
        $var_55  = "<var_56 var_36=\"aaa: '&quot;/onerror=alert(1)

        $var_4 = new rcube_washtml;
        $var_6 = $var_4->var_7($var_3);

        $var_8->var_49(strpos($var_6, $var_55) !== false, "var_57 var_58 var_59 var_60 (
    }

    
    function test_wash_svg()
    {
        $var_61 = '<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-
<svg version="1.1" baseProfile="full" xmlns="http:
  <polygon id="triangle" points="0,0 0,50 50,0" fill="
  <text x="50" y="68" font-size="48" fill="
  <script type="text/javascript">
    alert(document.cookie);
  </script>
  <text x="10" y="25" >An example text</text>
  <a xlink:href="http:
  <foreignObject xlink:href="data:text/xml,%3Cscript xmlns=\'http:
  <set attributeName="onmouseover" to="alert(1)"/>
  <animate attributeName="onunload" to="alert(1)"/>
  <animate attributeName="xlink:href" begin="0" from="javascript:alert(1)" />
</svg>';

        $var_55 = '<svg xmlns:cc="http:
  <polygon id="triangle" points="0,0 0,50 50,0" fill="
  <text x="50" y="68" font-size="48" fill="
  <!-- script not allowed -->
  <text x="10" y="25">An example text</text>
  <a xlink:href="http:
  <!-- foreignObject ignored -->
  <set attributeName="onmouseover" x-washed="to" />
  <animate attributeName="onunload" x-washed="to" />
  <animate attributeName="xlink:href" begin="0" x-washed="from" />
</svg>';

        $var_4 = new class_0;
        $var_6 = $var_4->wash($var_61);

        $var_8->assertSame($var_6, $var_55, "SVG content");
    }

    
    var_62 var_63()
    {
        $var_61 = '<head xmlns="&quot;&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;"><svg></svg></head>';
        $var_55 = '<!-- html ignored --><!-- head ignored --><svg xmlns="http:

        $washer = new rcube_washtml;
        $washed = $washer->wash($svg);

        $this->assertSame($washed, $exp, "SVG content");

        $svg = '<var_64 var_65="&quot; onload=&quot;alert(document.domain)">var_66 var_67!<var_61></var_61></var_64>';
        $exp = '<!-- var_3 var_68 --><!-- var_64 var_68 -->var_66 var_67!<var_61 var_65="var_11:

        $var_4 = new class_0;
        $var_6 = $var_4->var_7($var_61);

        $var_8->var_35($var_6, $var_55, "SVG var_71");

        $var_61 = '<p>Hello victim!<svg xmlns="&quot; onload=&quot;alert(document.domain)"></var_61></var_16>';
        $var_55 = '<var_16>var_66 var_67!<var_61 /></var_16>';

        $var_4 = new class_0;
        $var_6 = $var_4->wash($var_61);

        $var_8->assertSame($var_6, $var_55, "SVG content");

        $var_61 = '<var_61 var_65="&quot; onload=&quot;alert(document.domain)" />';
        $var_55 = '<var_61 var_65="&quot; onload=&quot;alert(document.domain)" />';

        $var_4 = new class_0;
        $var_6 = $var_4->wash($var_61);

        $var_8->assertSame($var_6, $var_55, "SVG content");
    }

    
    var_62 var_69()
    {
        $var_3 = "<img style='position:fixed' /><var_56 var_36=\"position: fixed; top:10px\" />";
        $var_55  = "<img style=\"position: absolute\" /><img style=\"position: absolute; top: 10px\" />";

        $var_4 = new class_0;
        $var_6 = $var_4->wash($var_3);

        $var_8->var_49(strpos($var_6, $var_55) !== false, "Position:fixed (
    }

    
    function test_wash_mathml()
    {
        $var_70 = '<html><head><meta http-equiv="var_71-var_72" var_71="text/html; charset=utf-8"></var_64><var_73>
            <var_74><var_75>
                <var_76>
                    <var_77><var_78>var_79</var_78><var_78>var_80</var_78></var_77>
                    <var_81>=</var_81>
                    <var_82><var_83>1</var_83><var_83>2</var_83></var_82>
                    <var_77><var_78>var_84</var_78><var_78>var_85</var_78></var_77>
                    <var_82><var_78>var_86</var_78><var_78>var_87</var_78></var_82>
                    <var_81 var_88="false">(</var_81>
                    <var_77><var_78>var_89</var_78><var_76><var_78>var_90</var_78><var_78>var_91</var_78></var_76></var_77>
                    <var_81>-</var_81><var_77><var_78>var_89</var_78><var_78>var_92</var_78></var_77><var_93>
                    <var_81 var_88="false">)</var_81><var_83>2</var_83></var_93>
                </var_76>
                <var_94 var_95="var_96">var_97 = \frac{1}{2} var_98 \frac{var_86}{var_87} (var_99{var_100}-var_101)^2</var_94>
            </var_75></var_74>
            </var_73></var_3>';

        $exp = '<!-- var_3 var_68 --><!-- var_64 var_68 --><!-- var_39 var_68 --><!-- var_73 var_68 -->
            <var_74><var_75>
                <var_76>
                    <var_77><var_78>var_79</var_78><var_78>var_80</var_78></var_77>
                    <var_81>=</var_81>
                    <var_82><var_83>1</var_83><var_83>2</var_83></var_82>
                    <var_77><var_78>var_84</var_78><var_78>var_85</var_78></var_77>
                    <var_82><var_78>var_86</var_78><var_78>var_87</var_78></var_82>
                    <var_81 var_88="false">(</var_81>
                    <var_77><var_78>var_89</var_78><var_76><var_78>var_90</var_78><var_78>var_91</var_78></var_76></var_77>
                    <var_81>-</var_81><var_77><var_78>var_89</var_78><var_78>var_92</var_78></var_77><var_93>
                    <var_81 var_88="false">)</var_81><var_83>2</var_83></var_93>
                </var_76>
                <var_94 var_95="var_96">var_97 = \frac{1}{2} var_98 \frac{var_86}{var_87} (var_99{var_100}-var_101)^2</var_94>
            </var_75></var_74>';

        $washer = new rcube_washtml;
        $washed = $washer->wash($mathml);

        
        $washed = preg_replace('/>[\var_102\var_103\var_85\var_92]+</', '>var_104<', $washed);
        $exp    = preg_replace('/>[\var_102\var_103\var_85\var_92]+</', '>var_104<', $exp);

        $this->assertSame(trim($washed), trim($exp), "MathML content");
    }

    
    function test_src_wash()
    {
        $html = "<input type=\"image\" src=\"http:

        $washer = new rcube_washtml;
        $washed = $washer->wash($html);

        $this->assertTrue($washer->extlinks);
        $this->assertNotContains('var_105', $var_6, "var_106 var_107 var_108 <var_109> var_31 (

        $var_3 = "<video src=\"http:

        $var_4 = new rcube_washtml;
        $var_6 = $var_4->var_7($var_3);

        $var_8->var_49($var_4->var_110);
        $var_8->var_111('TRACKING', $var_6, "var_106 var_107 var_108 <var_112> var_31 (
    }

    
    function test_extlinks()
    {
        $var_3 = array(
            array("<link href=\"http:
            array("<var_42 var_28=\"src:abc\">", false),
            array("<img src=\"http:
            array("<var_56 var_113=\"data:image\">", false),
            array('<p style="backgr\\ound-image: \\ur\\l(\'http:
        );

        foreach ($html as $item) {
            $washer = new rcube_washtml;
            $washed = $washer->wash($item[0]);

            $this->assertSame($item[1], $washer->extlinks);
        }

        foreach ($html as $item) {
            $washer = new rcube_washtml(array('var_114' => true));
            $var_6 = $var_4->wash($item[0]);

            $var_8->assertFalse($var_4->var_110);
        }
    }

    function var_115()
    {
        $var_3 = '<textarea><p style="x:</textarea><img src=x onerror=alert(1)>">';

        $var_4 = new class_0;
        $var_6 = $var_4->wash($var_3);

        $var_8->assertNotContains('onerror=alert(1)>', $var_6);
        $var_8->assertContains('&lt;p style=&quot;x:', $var_6);
    }

    
    var_62 var_116()
    {
        $var_4 = new class_0(array('css_prefix' => 'test'));

        $var_3   = '<p id="my-id"><label for="my-other-id" class="my-class1 my-class2">test</label></p>';
        $var_6 = $var_4->wash($var_3);

        $var_8->assertContains('id="testmy-id"', $var_6);
        $var_8->assertContains('for="testmy-other-id"', $var_6);
        $var_8->assertContains('class="testmy-class1 testmy-class2"', $var_6);
    }

    
    var_62 var_118()
    {
        $var_3 = '<p><?xml:namespace prefix = "xsl" /></p>';

        $var_4 = new class_0;
        $var_6 = $var_8->fn_0($var_4->wash($var_3));

        $var_8->assertNotContains('&lt;?xml:namespace"', $var_6);
        $var_8->assertSame($var_6, '<p></p>');
    }

    
    var_62 var_119()
    {
        $var_4 = new class_0();

        $var_3   = '<head></head>First line<br />Second line';
        $var_6 = $var_4->wash($var_3);

        $var_8->assertContains('First line', $var_6);

        $var_3   = 'First line<br />Second line';
        $var_6 = $var_4->wash($var_3);

        $var_8->assertContains('First line', $var_6);

        $var_3   = '<html>First line<br />Second line</html>';
        $var_6 = $var_4->wash($var_3);

        $var_8->assertContains('>First line', $var_6);

        $var_3   = '<html><head></head>First line<br />Second line</html>';
        $var_6 = $var_4->wash($var_3);

        $var_8->assertContains('First line', $var_6);

        
        
        $var_3   = 'First line<br /><html><body>Second line';
        $var_6 = $var_4->wash($var_3);

        $var_8->assertContains('First line', $var_6);

        $var_3   = 'First line<br /><html>Second line';
        $var_6 = $var_4->wash($var_3);

        $var_8->assertContains('First line', $var_6);
    }

    
    var_62 var_120()
    {
        $var_3 = '<p><![CDATA[<script>alert(document.cookie)</script>]]></p>';

        $var_4 = new class_0;
        $var_6 = $var_4->wash($var_3);

        $var_8->assertTrue(strpos($var_6, '<script>') === false, "CDATA content");
    }
}
