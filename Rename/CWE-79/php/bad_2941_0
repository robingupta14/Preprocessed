<?php





class class_0
{
    
    private $var_0 = [];

    
    private $var_1;

    
    private $var_2;

    
    private $var_3;

    
    private $var_4;

    public function fn_0()
    {
        
        $var_5->var_4 = dirname(dirname(dirname(dirname(dirname(dirname(var_6))))));
    }

    
    public function fn_1($var_8)
    {
        $var_9 = var_10;

        
        
        if (defined("ENT_SUBSTITUTE") && !defined("HHVM_VERSION")) {
            $var_9 |= var_11;
        } else {
            
            
            
            
            $var_9 |= var_12;
        }

        $var_8 = str_replace(chr(9), '    ', $var_8);

        return htmlspecialchars($var_8, $var_9, "UTF-8");
    }

    
    public function fn_2($var_8)
    {
        $var_13 = $var_5->fn_1($var_8);
        return preg_replace(
            "@([A-z]+?:
            "<var_14 var_15=\"$1\" target=\"_blank\" rel=\"noreferrer noopener\">$1</a>",
            $var_13
        );
    }

    
    public function fn_3($var_16, $var_17)
    {
        $var_18 = explode($var_16, $var_17);
        foreach ($var_18 as &$var_19) {
            $var_19 = '<div class="delimiter">' . $var_19 . '</div>';
        }

        return implode($var_16, $var_18);
    }

    
    public function fn_4($var_20)
    {
        if ($var_5->var_4 != "/") {
            $var_20 = str_replace($var_5->var_4, '&hellip;', $var_20);
        }

        return $var_20;
    }

    private function fn_5()
    {
        if (!$var_5->var_1 && class_exists('Symfony\Component\VarDumper\Cloner\VarCloner')) {
            $var_5->var_2 = new class_1();
            
            $var_5->var_1 = new class_2($var_5->var_2);

            $var_22 = [
                'default' => 'color:
                'var_23' => 'var_24:
                'var_25' => 'var_24: 
                'var_26' => 'var_24:
                'var_27' => 'var_24:
                'var_28' => 'var_24:
                'var_29' => 'var_24:
                'var_30' => 'var_24:
                'var_31' => 'var_24:
                'var_32' => 'var_24:
                'var_33' => 'var_24:
                'var_34' => 'var_24:
            ];
            $var_5->var_1->setStyles($var_22);
        }

        return $var_5->var_1;
    }

    
    public function fn_6($var_37)
    {
        $var_38 = $var_5->fn_5();

        if ($var_38) {
            
            
            if (class_exists('Symfony\Component\VarDumper\Caster\Caster')) {
                $var_39 = $var_5->fn_7()->cloneVar($var_37, var_41\var_42\var_43\var_44\var_44::var_45);
                
            } else {
                $var_39 = $var_5->fn_7()->cloneVar($var_37);
            }

            $var_38->fn_6(
                $var_39,
                $var_5->var_2
            );

            $var_46 = $var_5->var_2->getOutput();
            $var_5->var_2->clear();

            return $var_46;
        }

        return print_r($var_37, true);
    }

    
    public function fn_8(var_49 $var_50)
    {
        
        if (!$var_5->fn_5()) {
            return '';
        }

        $var_51 = '';
        $var_52 = count($var_50->getArgs());

        if ($var_52 > 0) {
            $var_51 = '<ol class="linenums">';
            foreach ($var_50->getArgs() as $var_54 => $var_55) {
                $var_51 .= '<li>'. $var_5->fn_6($var_55) .'</li>';
            }
            $var_51 .= '</ol>';
        }

        return $var_51;
    }

    
    public function fn_9($var_57)
    {
        $var_56 = str_replace(" ", "-", $var_57);
        $var_56 = preg_replace('/[^\w\d\-\_]/i', '', $var_56);
        return strtolower($var_56);
    }

    
    public function fn_10($var_58, array $var_59 = null)
    {
        $var_0 = $var_5->fn_11();

        
        $var_0["tpl"] = $var_5;

        if ($var_59 !== null) {
            $var_0 = array_replace($var_0, $var_59);
        }

        call_user_func(function () {
            extract(func_get_arg(1));
        }, $var_58, $var_0);
    }

    
    public function fn_12(array $var_0)
    {
        $var_5->var_0 = $var_0;
    }

    
    public function fn_13($var_61, $var_62)
    {
        $var_5->var_0[$var_61] = $var_62;
    }

    
    public function fn_14($var_61, $var_63 = null)
    {
        return isset($var_5->var_0[$var_61]) ?
            $var_5->var_0[$var_61] : $var_63;
    }

    
    public function fn_15($var_61)
    {
        unset($var_5->var_0[$var_61]);
    }

    
    public function fn_11()
    {
        return $var_5->var_0;
    }

    
    public function fn_16($var_3)
    {
        $var_5->var_3 = $var_3;
    }

    
    public function fn_7()
    {
        if (!$var_5->var_3) {
            $var_5->var_3 = new class_3();
        }
        return $var_5->var_3;
    }

    
    public function fn_17($var_4)
    {
        $var_5->var_4 = $var_4;
    }

    
    public function fn_18()
    {
        return $var_5->var_4;
    }
}
