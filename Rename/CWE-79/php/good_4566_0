<?php

class class_0 extends var_0
{
    const var_1 = 'Y-mm-dd';
    const var_2 = 1;

    private $var_3;
    private $var_4;
    private $var_5;
    private $var_6;
    private $var_7;
    private $var_8;
    private $var_9;
    private $var_10;
    private $var_11;

    public function fn_0()
    {
        $var_12->var_13 = 'helpers/calendar/';
        $var_12->var_14 = 'calendar.tpl';
        parent::fn_0();
    }

    public function fn_1($var_15)
    {
        if (!is_array($var_15) && !$var_15 instanceof var_16) {
            throw new class_1('Actions value must be an traversable array');
        }

        $var_12->var_3 = $var_15;

        return $var_12;
    }

    public function fn_2()
    {
        if (!isset($var_12->var_3)) {
            $var_12->var_3 = array();
        }

        return $var_12->var_3;
    }

    public function fn_3($var_15)
    {
        if (!is_array($var_15) && !$var_15 instanceof var_16) {
            throw new class_1('Actions value must be an traversable array');
        }

        $var_12->var_4 = $var_15;

        return $var_12;
    }

    public function fn_4()
    {
        if (!isset($var_12->var_4)) {
            $var_12->var_4 = array();
        }

        return $var_12->var_4;
    }

    public function fn_5($var_15)
    {
        $var_12->var_5 = $var_15;

        return $var_12;
    }

    public function fn_6()
    {
        return $var_12->var_5;
    }

    public function fn_7($var_15)
    {
        $var_12->var_6 = $var_15;

        return $var_12;
    }

    public function fn_8()
    {
        return $var_12->var_6;
    }

    public function fn_9($var_15)
    {
        $var_12->var_7 = (int) $var_15;

        return $var_12;
    }

    public function fn_10()
    {
        if (!isset($var_12->var_7)) {
            $var_12->var_7 = self::var_2;
        }

        return $var_12->var_7;
    }

    public function fn_11($var_15)
    {
        if (!is_string($var_15)) {
            throw new class_1('Date format must be a string');
        }

        $var_12->var_8 = $var_15;

        return $var_12;
    }

    public function fn_12()
    {
        if (!isset($var_12->var_8)) {
            $var_12->var_8 = self::var_1;
        }

        return $var_12->var_8;
    }

    public function fn_13($var_15 = '')
    {
        if (empty($var_15)) {
            $var_15 = strtotime('-31 days');
        }

        if (!is_string($var_15)) {
            throw new class_1('Date must be a string');
        }

        $var_12->var_9 = date('Y-m-d', strtotime($var_15));

        return $var_12;
    }

    public function fn_14()
    {
        if (!isset($var_12->var_9)) {
            $var_12->fn_13();
        }

        return $var_12->var_9;
    }

    public function fn_15($var_15 = '')
    {
        if (empty($var_15)) {
            $var_15 = strtotime('-31 days');
        }

        if (!is_string($var_15)) {
            throw new class_1('Date must be a string');
        }

        $var_12->var_10 = date('Y-m-d', strtotime($var_15));

        return $var_12;
    }

    public function fn_16()
    {
        if (!isset($var_12->var_10)) {
            $var_12->fn_15();
        }

        return $var_12->var_10;
    }

    public function fn_17($var_15)
    {
        $var_12->var_11 = (bool) $var_15;

        return $var_12;
    }

    public function fn_18($var_27)
    {
        if (!isset($var_12->var_3)) {
            $var_12->var_3 = array();
        }

        $var_12->var_3[] = $var_27;

        return $var_12;
    }

    public function fn_19($var_27)
    {
        if (!isset($var_12->var_4)) {
            $var_12->var_4 = array();
        }

        $var_12->var_4[] = $var_27;

        return $var_12;
    }

    public function fn_20()
    {
        $var_28 = Context::getContext();
        $var_29 = str_ireplace(var_30, '', var_31);
        $var_29 = preg_replace('/^' . preg_quote(var_32, '/') . '/', '', $var_29);
        $var_33 = ((Validate::isLoadedObject($var_28->var_34)
            && $var_28->var_34->var_33) ? $var_28->var_34->var_33 : 'default');

        if (!file_exists(var_35 . $var_33 . var_32
            . 'template')) {
            $var_33 = 'default';
        }

        if ($var_28->var_36->var_37) {
            $var_38 = '<script type="text/javascript" src="' . var_39 . $var_29
                . '/themes/' . $var_33 . '/js/date-range-picker.js"></script>';
            $var_38 .= '<script type="text/javascript" src="' . var_39 . $var_29
                . '/themes/' . $var_33 . '/js/calendar.js"></script>';
        } else {
            $var_38 = '';
            $var_28->var_36->addJs(var_39 . $var_29
                . '/themes/' . $var_33 . '/js/date-range-picker.js');
            $var_28->var_36->addJs(var_39 . $var_29
                . '/themes/' . $var_33 . '/js/calendar.js');
        }

        $var_12->var_41 = $var_12->createTemplate($var_12->var_14);
        $var_12->var_41->assign(array(
            'date_format' => $var_12->fn_12(),
            'date_from' => $var_12->fn_14(),
            'date_to' => $var_12->fn_16(),
            'compare_date_from' => $var_12->fn_6(),
            'compare_date_to' => $var_12->fn_8(),
            'actions' => $var_12->fn_2(),
            'compare_actions' => $var_12->fn_4(),
            'compare_option' => $var_12->fn_10(),
            'is_rtl' => $var_12->fn_21(),
        ));

        $var_38 .= parent::fn_20();

        return $var_38;
    }

    public function fn_21()
    {
        if (!isset($var_12->var_11)) {
            $var_12->var_11 = Context::getContext()->var_45->var_46;
        }

        return $var_12->var_11;
    }
}
