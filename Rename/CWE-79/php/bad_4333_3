<?php





abstract class class_0 implements var_1
{

    
    protected $var_2 = [];

    
    static private $var_3 = [];

    
    protected $var_4;

    
    protected $var_5 = [];

    
    protected $var_6 = [];

    
    protected $var_7;

    
    protected $var_8;

    
    protected $var_9 = null;

    
    protected $var_10;

    
    protected $var_11 = null;

    
    protected $var_12 = null;

    
    public function fn_0(array $var_5)
    {
        $var_13->var_5 = $var_5;
    }

    
    public function fn_1(var_14 $var_8)
    {
        $var_13->var_8 = $var_8;
        $var_13->var_7 = $var_8->getVariableProvider();
        $var_13->var_10 = $var_8->getViewHelperVariableContainer();
    }

    
    public function fn_2()
    {
        if ($var_13->var_11 === null) {
            
            return !$var_13->fn_3();
        }
        return $var_13->var_11;
    }

    
    public function fn_3()
    {
        return $var_13->var_12 !== false;
    }

    
    protected function fn_4($var_18, $var_19, $var_20, $var_21 = false, $var_22 = null)
    {
        if (array_key_exists($var_18, $var_13->var_2)) {
            throw new class_1(
                'Argument "' . $var_18 . '" has already been defined, thus it should not be defined again.',
                1253036401
            );
        }
        $var_13->var_2[$var_18] = new class_2($var_18, $var_19, $var_20, $var_21, $var_22);
        return $var_13;
    }

    
    protected function fn_5($var_18, $var_19, $var_20, $var_21 = false, $var_22 = null)
    {
        if (!array_key_exists($var_18, $var_13->var_2)) {
            throw new class_1(
                'Argument "' . $var_18 . '" has not been defined, thus it can\'t be overridden.',
                1279212461
            );
        }
        $var_13->var_2[$var_18] = new class_2($var_18, $var_19, $var_20, $var_21, $var_22);
        return $var_13;
    }

    
    public function fn_6(var_23 $var_24)
    {
        $var_13->var_4 = $var_24;
    }

    
    public function fn_7(array $var_6)
    {
        $var_13->var_6 = $var_6;
    }

    
    public function fn_8(\var_25 $var_9)
    {
        $var_13->var_9 = $var_9;
    }

    
    public function fn_9()
    {
        $var_13->fn_10();
        $var_13->fn_11();

        return $var_13->fn_12();
    }

    
    protected function fn_12()
    {
        if (method_exists($var_13, 'render')) {
            return call_user_func([$var_13, 'render']);
        }
        if ((new \var_29($var_13, 'renderStatic'))->getDeclaringClass()->getName() !== var_0::var_32) {
            
            
            return static::fn_23($var_13->var_5, $var_13->fn_13(), $var_13->var_8);
        }
        throw new class_1(
            sprintf(
                'ViewHelper class "%s" does not declare a "render()" method and inherits the default "renderStatic". ' .
                'Executing this ViewHelper would cause infinite recursion - please either implement "render()" or ' .
                '"renderStatic()" on your ViewHelper class',
                get_class($var_13)
            )
        );
    }

    
    public function fn_11()
    {
    }

    
    public function fn_14()
    {
        if ($var_13->var_9 !== null) {
            $var_35 = $var_13->var_9;
            return $var_35();
        }
        return $var_13->var_4->evaluateChildNodes($var_13->var_8);
    }

    
    protected function fn_13()
    {
        $var_37 = clone $var_13;
        return function() use ($var_37) {
            return $var_37->fn_14();
        };
    }

    
    public function fn_15()
    {
        $var_39 = get_class($var_13);
        if (isset(self::$var_3[$var_39])) {
            $var_13->var_2 = self::$var_3[$var_39];
        } else {
            $var_13->fn_16();
            self::$var_3[$var_39] = $var_13->var_2;
        }
        return $var_13->var_2;
    }

    
    public function fn_10()
    {
        $var_2 = $var_13->fn_15();
        foreach ($var_2 as $var_41 => $var_42) {
            if ($var_13->fn_17($var_41)) {
                $var_44 = $var_13->var_5[$var_41];
                $var_19 = $var_42->getType();
                if ($var_44 !== $var_42->getDefaultValue() && $var_19 !== 'mixed') {
                    $var_47 = is_object($var_44) ? get_class($var_44) : gettype($var_44);
                    if (!$var_13->fn_18($var_19, $var_44)) {
                        throw new \var_49(
                            'The argument "' . $var_41 . '" was registered with type "' . $var_19 . '", but is of type "' .
                            $var_47 . '" in view helper "' . get_class($var_13) . '".',
                            1256475113
                        );
                    }
                }
            }
        }
    }

    
    protected function fn_18($var_19, $var_44)
    {
        if ($var_19 === 'object') {
            if (!is_object($var_44)) {
                return false;
            }
        } elseif ($var_19 === 'array' || substr($var_19, -2) === '[]') {
            if (!is_array($var_44) && !$var_44 instanceof \var_50 && !$var_44 instanceof \var_51 && !empty($var_44)) {
                return false;
            } elseif (substr($var_19, -2) === '[]') {
                $var_52 = $var_13->fn_19($var_44);
                if ($var_52 === null) {
                    return true;
                }
                return $var_13->fn_18(substr($var_19, 0, -2), $var_52);
            }
        } elseif ($var_19 === 'string') {
            if (is_object($var_44) && !method_exists($var_44, '__toString')) {
                return false;
            }
        } elseif ($var_19 === 'boolean' && !is_bool($var_44)) {
            return false;
        } elseif (class_exists($var_19) && $var_44 !== null && !$var_44 instanceof $var_19) {
            return false;
        } elseif (is_object($var_44) && !is_a($var_44, $var_19, true)) {
            return false;
        }
        return true;
    }

    
    protected function fn_19($var_44)
    {
        if (is_array($var_44)) {
            return reset($var_44);
        } elseif ($var_44 instanceof \var_51) {
            foreach ($var_44 as $var_54) {
                return $var_54;
            }
        }
        return null;
    }

    
    public function fn_16()
    {
    }

    
    protected function fn_17($var_41)
    {
        return isset($var_13->var_5[$var_41]);
    }

    
    public function fn_20(array $var_5)
    {
    }

    
    public function fn_21(array $var_5)
    {
        if (!empty($var_5)) {
            throw new class_1(
                sprintf(
                    'Undeclared arguments passed to ViewHelper %s: %s. Valid arguments are: %s',
                    get_class($var_13),
                    implode(', ', array_keys($var_5)),
                    implode(', ', array_keys($var_13->var_2))
                )
            );
        }
    }

    
    public function fn_22($var_55, $var_56, &$var_57, var_23 $var_24, var_58 $var_59)
    {
        return sprintf(
            '%s::renderStatic(%s, %s, $renderingContext)',
            get_class($var_13),
            $var_55,
            $var_56
        );
    }

    
    public static function fn_23(array $var_5, \var_25 $var_9, var_14 $var_8)
    {
        $var_60 = get_called_class();
        return $var_8->getViewHelperInvoker()->invoke($var_60, $var_5, $var_8, $var_9);
    }

    
    public static function fn_24(var_23 $var_24, array $var_5, var_63 $var_64)
    {
    }

    
    public function fn_25()
    {
    }
}
