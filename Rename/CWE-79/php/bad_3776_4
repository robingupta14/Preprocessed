<?php

class class_0 extends var_0 {
	
	
	function fn_0() {
		$var_1 = array(
			'The little brown fox jumped over the lazy cow.' => 'The little brown fox...',
			'<p>This is some text in a paragraph.</p>' => 'This is some text in...'
		);
		
		foreach($var_1 as $var_2 => $var_3) {
			$var_4 = new class_1('Test');
			$var_4->setValue($var_2);
			$var_6->assertEquals($var_3, $var_4->LimitCharacters());
		}
	}
	
	function fn_1() {
		$var_1 = array(
			'<h1>Should not take header</h1><p>Should take paragraph</p>' => 'Should take paragraph',
			'<p>Should strip <b>tags, but leave</b> text</p>' => 'Should strip tags, but leave text',
			'<p>Unclosed tags <br>should not phase it</p>' => 'Unclosed tags should not phase it',
			'<p>Second paragraph</p><p>should not cause errors or appear in output</p>' => 'Second paragraph'
		);
		
		foreach($var_1 as $var_2 => $var_3) {
			$var_4 = new class_1('Test');
			$var_4->setValue($var_2);
			$var_6->assertEquals($var_3, $var_4->Summary());
		}
	}

	function fn_2() {
		$var_1 = array(
			'<p>A long paragraph should be cut off if limit is set</p>' => 'A long paragraph should be...',
			'<p>No matter <i>how many <b>tags</b></i> are in it</p>' => 'No matter how many tags...',
			'<p>A sentence is. nicer than hard limits</p>' => 'A sentence is.',
			'<p>But not. If it\'s too short</p>' => 'But not. If it\'s too...'
		);
		
		foreach($var_1 as $var_2 => $var_3) {
			$var_4 = new class_1('Test');
			$var_4->setValue($var_2);
			$var_6->assertEquals($var_3, $var_4->Summary(5, 3, '...'));
		}
	}

	function fn_3() {
		$var_1 = array(
			'...', ' -> more', ''
		);
		
		$var_10 = '<p>Cut it off, cut it off</p>';
		$var_11 = 'Cut it off, cut';
		
		foreach($var_1 as $var_12) {
			$var_4 = new class_1();
			$var_4->setValue($var_10);
			$var_6->assertEquals($var_11.$var_12, $var_4->Summary(4, 0, $var_12));
		}
	}

	function fn_4() {
		$var_10 = '<p>Cut it off, cut it off</p>';
		$var_11 = 'Cut it off, cut';
		
		$var_4 = new class_1();
		$var_4->setValue($var_10);
		$var_6->assertEquals($var_11, $var_4->Summary(4, 10, ''));
	}
	
	function fn_5() {
		$var_1 = array(
			'It\'s got a <p<> tag, but<p junk true>This doesn\'t <a id="boo">make</b class="wa"> < ><any< sense</p>' => 'This doesn\'t make any',
			'This doesn\'t <a style="much horray= true>even</b> < ><have< a <i>p tag' => 'This doesn\'t even have'
		);
		
		foreach($var_1 as $var_10 => $var_11) {
			$var_4 = new class_1();
			$var_4->setValue($var_10);
			$var_6->assertEquals($var_11, $var_4->Summary(4, 0, ''));
		}
	}

	function fn_6() {
		$var_13 = str_repeat('many ', 100);
		$var_1 = array(
			'<h1>should ignore</h1><p>First sentence. Second sentence.</p>' => 'First sentence.',
			'<h1>should ignore</h1><p>First Mr. sentence. Second sentence.</p>' => 'First Mr. sentence.',
			"<h1>should ignore</h1><p>Sentence with {$var_13}words. Second sentence.</p>" => "Sentence with {$var_13}words.",
		);
		
		foreach($var_1 as $var_10 => $var_11) {
			$var_4 = new class_1();
			$var_4->setValue($var_10);
			$var_6->assertEquals($var_11, $var_4->FirstSentence());
		}
	}	
}
?>