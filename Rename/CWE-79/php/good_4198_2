<?php

declare(strict_types=1);




class class_0 implements var_0
{

    
    private $var_1 = [];

    
    protected $var_2;

    
    protected $var_3 = [
        'value' => null,
    ];

    
    protected $var_4 = [
        'name',
    ];

    
    protected $var_5;

    
    protected $var_6 = [
        'title',
        'placeholder',
        'help',
    ];

    
    protected $var_7 = [
        'accesskey',
        'class',
        'dir',
        'hidden',
        'id',
        'lang',
        'spellcheck',
        'style',
        'tabindex',
        'title',
        'xml:lang',
        'autocomplete',
        'data-*',
    ];

    
    protected $var_8 = [];

    
    public function fn_0(string $var_9, array $var_10): var_11
    {
        $var_10 = collect($var_10)->map(static function ($var_13) {
            return $var_13 instanceof var_14 ? $var_13() : $var_13;
        });

        if (method_exists($var_15, $var_9)) {
            $var_15->$var_9($var_10);
        }

        return $var_15->fn_1($var_9, $var_10->first() ?? true);
    }

    
    public function fn_2($var_18): var_11
    {
        return $var_15->fn_1('value', $var_18);
    }

    
    public function fn_1(string $var_19, $var_18 = true): var_11
    {
        $var_15->var_3[$var_19] = $var_18;

        return $var_15;
    }

    
    protected function fn_3(): var_11
    {
        collect($var_15->var_4)
            ->filter(function ($var_22) {
                return ! array_key_exists($var_22, $var_15->var_3);
            })
            ->each(function ($var_22) {
                throw new class_1($var_22);
            });

        return $var_15;
    }

    
    public function fn_4()
    {
        if (! $var_15->isSee()) {
            return;
        }

        $var_15
            ->fn_3()
            ->fn_5()
            ->fn_6()
            ->fn_7()
            ->fn_8()
            ->fn_9();

        $var_31 = $var_15->fn_10();
        $var_15->fn_1('id', $var_31);

        $var_33 = $var_15->fn_11();

        return view($var_15->var_2, array_merge($var_15->fn_12(), [
            'attributes'     => $var_15->fn_13(),
            'dataAttributes' => $var_15->fn_14(),
            'id'             => $var_31,
            'old'            => $var_15->fn_15(),
            'slug'           => $var_15->fn_16(),
            'oldName'        => $var_15->fn_17(),
            'typeForm'       => $var_15->var_5 ?? $var_15->fn_18()->var_5,
        ]))
            ->withErrors($var_33);
    }

    
    private function fn_8(): var_11
    {
        $var_43 = $var_15->fn_19('lang');

        collect($var_15->var_3)
            ->intersectByKeys(array_flip($var_15->var_6))
            ->each(function ($var_18, $var_19) use ($var_43) {
                $var_15->fn_1($var_19, __($var_18, [], $var_43));
            });

        return $var_15;
    }

    
    public function fn_12(): array
    {
        return $var_15->var_3;
    }

    
    protected function fn_13(): var_46
    {
        $var_47 = array_merge($var_15->var_7, $var_15->var_8);

        $var_3 = collect($var_15->fn_12())
            ->filter(function ($var_18, $var_22) use ($var_47) {
                return var_48\var_49\var_50::is($var_47, $var_22);
            })->toArray();

        return (new class_2())
            ->merge($var_3);
    }

    
    protected function fn_14(): var_46
    {
        return $var_15->fn_13()->filter(function ( $var_18, $var_19) {
            return var_48\var_49\var_50::startsWith($var_19, 'data-');
        });
    }

    
    protected function fn_10(): ?string
    {
        $var_31 = $var_15->fn_19('id');

        if ($var_31 !== null) {
            return (string) $var_31;
        }

        $var_43 = $var_15->fn_19('lang');
        $var_53 = $var_15->fn_19('name');
        $var_54 = sha1(json_encode($var_15->fn_12()));

        return var_48\var_49\var_50::slug("field-$var_43-$var_53-$var_54");
    }

    
    public function fn_19(string $var_19, $var_18 = null)
    {
        if (! isset($var_15->var_3[$var_19])) {
            return $var_18;
        }

        return $var_15->var_3[$var_19];
    }

    
    protected function fn_16(): string
    {
        return var_48\var_49\var_50::slug($var_15->fn_19('name'));
    }

    
    public function fn_15()
    {
        return old($var_15->fn_17());
    }

    
    public function fn_17(): string
    {
        return (string) var_48\var_49\var_50::of($var_15->fn_19('name'))
            ->replace(['][', '['], '.')
            ->replace([']'], '');
    }

    
    private function fn_9(): var_11
    {
        if (! $var_15->fn_20()) {
            return $var_15;
        }

        $var_57 = $var_15->fn_19('class');

        return $var_15->fn_1('class', $var_57.' is-invalid');
    }

    
    private function fn_20(): bool
    {
        return optional(session('errors'))->has($var_15->fn_17()) ?? false;
    }

    
    protected function fn_5()
    {
        $var_9 = $var_15->fn_19('name');
        $var_59 = $var_15->fn_19('prefix');
        $var_43 = $var_15->fn_19('lang');

        if ($var_59 !== null && $var_43 !== null) {
            return $var_15->fn_1('name', $var_59.'['.$var_43.']'.$var_9);
        }

        if ($var_59 !== null) {
            return $var_15->fn_1('name', $var_59.$var_9);
        }

        if ($var_43 !== null) {
            return $var_15->fn_1('name', $var_43.'['.$var_9.']');
        }

        return $var_15;
    }

    
    protected function fn_6()
    {
        $var_18 = $var_15->fn_15() ?? $var_15->fn_19('value');

        if ($var_18 instanceof var_14) {
            $var_18 = $var_18($var_15->var_3);
        }

        return $var_15->fn_1('value', $var_18);
    }

    
    public static function fn_21($var_60): var_61
    {
        return var_62\var_63\var_64\var_61::make(is_callable($var_60) ? $var_60() : $var_60);
    }

    
    public function fn_18(): var_11
    {
        $var_15->var_5 = 'platform::partials.fields.vertical';

        return $var_15;
    }

    
    public function fn_22(): var_11
    {
        $var_15->var_5 = 'platform::partials.fields.clear';

        return $var_15;
    }

    
    public function fn_23(): var_11
    {
        $var_15->var_5 = 'platform::partials.fields.horizontal';

        return $var_15;
    }

    
    public function fn_24(): var_11
    {
        $var_15->fn_1('hr');

        return $var_15;
    }

    
    public function fn_25(var_14 $var_65)
    {
        $var_15->var_1[] = $var_65;

        return $var_15;
    }

    
    public function fn_7(): var_11
    {
        foreach ($var_15->var_1 as $var_66) {
            $var_66->call($var_15);
        }

        return $var_15;
    }

    
    private function fn_11()
    {
        $var_33 = session()->fn_19('errors', new class_3());

        return $var_33->getMessages();
    }

    
    public function fn_26(): string
    {
        $var_2 = $var_15->fn_4();

        if (is_string($var_2)) {
            return $var_2;
        }

        if (is_a($var_2, var_48\var_69\var_69::var_57)) {
            return (string) $var_2->fn_4();
        }

        return '';
    }
}
