<?php






class var_0 extends var_1 {

	
	private $var_2;
	
	private $var_3;
	
	private $var_4;
	
	private $var_5;
	
	private $var_6;
	
	private $var_7;

	function fn_0() {
		parent::fn_0();

		$var_8->var_3 = $var_8->getMockBuilder('Sabre\HTTP\RequestInterface')->getMock();
		$var_8->var_2 = $var_8->getMockBuilder('Sabre\HTTP\ResponseInterface')->getMock();
		$var_8->var_5 = $var_8->getMockBuilder('Sabre\DAV\Server')->getMock();
		$var_8->var_6 = $var_8->getMockBuilder('Sabre\DAV\Tree')->disableOriginalConstructor()->getMock();
		$var_8->var_5->var_6 = $var_8->var_6;
		$var_8->var_7 = $var_8->getMockBuilder('\OCP\ILogger')->getMock();

		$var_8->var_4 = $var_8->getMock('OCA\DAV\CardDAV\ImageExportPlugin', ['getPhoto'], [$var_8->var_7]);
		$var_8->var_4->initialize($var_8->var_5);
	}

	
	public function fn_1($var_13) {
		$var_8->var_3->expects($var_8->once())->method('getQueryParameters')->willReturn($var_13);
		$var_18 = $var_8->var_4->httpGet($var_8->var_3, $var_8->var_2);
		$var_8->assertTrue($var_18);
	}

	public function fn_2() {
		return [
			[[]],
			[['1']],
			[['foo' => 'bar']],
		];
	}

	public function fn_3() {
		$var_8->var_3->expects($var_8->once())->method('getQueryParameters')->willReturn(['photo' => true]);
		$var_8->var_3->expects($var_8->once())->method('getPath')->willReturn('/files/welcome.txt');
		$var_8->var_6->expects($var_8->once())->method('getNodeForPath')->with('/files/welcome.txt')->willReturn(null);
		$var_18 = $var_8->var_4->httpGet($var_8->var_3, $var_8->var_2);
		$var_8->assertTrue($var_18);
	}

	
	public function fn_4($var_22, $var_23) {
		$var_8->var_3->expects($var_8->once())->method('getQueryParameters')->willReturn(['photo' => true]);
		$var_8->var_3->expects($var_8->once())->method('getPath')->willReturn('/files/welcome.txt');

		$var_24 = $var_8->getMockBuilder('Sabre\CardDAV\Card')->disableOriginalConstructor()->getMock();
		$var_8->var_6->expects($var_8->once())->method('getNodeForPath')->with('/files/welcome.txt')->willReturn($var_24);

		$var_8->var_4->expects($var_8->once())->method('getPhoto')->willReturn($var_23);

		if (is_string($var_22)) {
			$var_8->var_2->expects($var_8->exactly(2))->method('setHeader')->withConsecutive(
				['Content-Type', $var_22],
				['Content-Disposition', 'attachment']);
			$var_8->var_2->expects($var_8->once())->method('setStatus')->with(200);
			$var_8->var_2->expects($var_8->once())->method('setBody');
		}

		$var_18 = $var_8->var_4->httpGet($var_8->var_3, $var_8->var_2);
		$var_8->assertEquals(!is_string($var_22), $var_18);
	}

	public function fn_5() {
		return [
			[true, null],
			['image/jpeg', ['Content-Type' => 'image/jpeg', 'body' => '1234']],
		];
	}

	
	public function fn_6($var_28, $var_29) {
		
		$var_24 = $var_8->getMockBuilder('Sabre\CardDAV\Card')->disableOriginalConstructor()->getMock();
		$var_24->expects($var_8->once())->method('get')->willReturn($var_29);

		$var_8->var_4 = new class_0($var_8->var_7);
		$var_8->var_4->initialize($var_8->var_5);

		$var_18 = $var_8->var_4->getPhoto($var_24);
		$var_8->assertEquals($var_28, $var_18);
	}

	public function var_31() {
		return [
			'empty vcard' => [false, ''],
			'vcard without PHOTO' => [false, "BEGIN:VCARD\r\nVERSION:3.0\r\nPRODID:-
			'vcard 3 with PHOTO' => [['Content-Type' => 'image/jpeg', 'body' => '12345'], "var_32:var_33\var_34\var_35:3.0\var_34\var_36:-
			'vcard 3 with PHOTO URL' => [false, "BEGIN:VCARD\r\nVERSION:3.0\r\nPRODID:-
			'vcard 4 with PHOTO' => [['Content-Type' => 'image/jpeg', 'body' => '12345'], "var_32:var_33\var_34\var_35:4.0\var_34\var_36:-
			'vcard 4 with PHOTO URL' => [false, "BEGIN:VCARD\r\nVERSION:4.0\r\nPRODID:-
			'vcard 3 with bad PHOTO' => [['Content-Type' => 'application/octet-stream', 'body' => '12345'], "var_32:var_33\var_34\var_35:3.0\var_34\var_36:-
			'vcard 4 with bad PHOTO' => [['Content-Type' => 'application/octet-stream', 'body' => '12345'], "BEGIN:VCARD\r\nVERSION:4.0\r\nvar_37:-
		];
	}
}
