<?php






class class_0 extends var_0 {

	
	private $var_1;
	
	private $var_2;
	
	private $var_3;
	
	private $var_4;
	
	private $var_5;
	
	private $var_6;

	function fn_0() {
		parent::fn_0();

		$var_7->var_2 = $var_7->getMockBuilder('Sabre\HTTP\RequestInterface')->getMock();
		$var_7->var_1 = $var_7->getMockBuilder('Sabre\HTTP\ResponseInterface')->getMock();
		$var_7->var_4 = $var_7->getMockBuilder('Sabre\DAV\Server')->getMock();
		$var_7->var_5 = $var_7->getMockBuilder('Sabre\DAV\Tree')->disableOriginalConstructor()->getMock();
		$var_7->var_4->var_5 = $var_7->var_5;
		$var_7->var_6 = $var_7->getMockBuilder('\OCP\ILogger')->getMock();

		$var_7->var_3 = $var_7->getMockBuilder('OCA\DAV\CardDAV\ImageExportPlugin')
			->setMethods(['getPhoto'])
			->setConstructorArgs([$var_7->var_6])
			->getMock();
		$var_7->var_3->initialize($var_7->var_4);
	}

	
	public function fn_1($var_14) {
		$var_7->var_2->expects($var_7->once())->method('getQueryParameters')->willReturn($var_14);
		$var_19 = $var_7->var_3->httpGet($var_7->var_2, $var_7->var_1);
		$var_7->assertTrue($var_19);
	}

	public function fn_2() {
		return [
			[[]],
			[['1']],
			[['foo' => 'bar']],
		];
	}

	public function fn_3() {
		$var_7->var_2->expects($var_7->once())->method('getQueryParameters')->willReturn(['photo' => true]);
		$var_7->var_2->expects($var_7->once())->method('getPath')->willReturn('/files/welcome.txt');
		$var_7->var_5->expects($var_7->once())->method('getNodeForPath')->with('/files/welcome.txt')->willReturn(null);
		$var_19 = $var_7->var_3->httpGet($var_7->var_2, $var_7->var_1);
		$var_7->assertTrue($var_19);
	}

	
	public function fn_4($var_23, $var_24) {
		$var_7->var_2->expects($var_7->once())->method('getQueryParameters')->willReturn(['photo' => true]);
		$var_7->var_2->expects($var_7->once())->method('getPath')->willReturn('/files/welcome.txt');

		$var_25 = $var_7->getMockBuilder('Sabre\CardDAV\Card')->disableOriginalConstructor()->getMock();
		$var_7->var_5->expects($var_7->once())->method('getNodeForPath')->with('/files/welcome.txt')->willReturn($var_25);

		$var_7->var_3->expects($var_7->once())->method('getPhoto')->willReturn($var_24);

		if (!$var_23) {
			$var_7->var_1
				->expects($var_7->at(0))
				->method('setHeader')
				->with('Content-Type', $var_24['Content-Type']);
			$var_7->var_1
				->expects($var_7->at(1))
				->method('setHeader')
				->with('Content-Disposition', 'attachment');
			$var_7->var_1
				->expects($var_7->once())
				->method('setStatus');
			$var_7->var_1
				->expects($var_7->once())
				->method('setBody');
		}

		$var_19 = $var_7->var_3->httpGet($var_7->var_2, $var_7->var_1);
		$var_7->assertEquals($var_23, $var_19);
	}

	public function fn_5() {
		return [
			[true, null],
			[false, ['Content-Type' => 'image/jpeg', 'body' => '1234']],
		];
	}

	
	public function fn_6($var_23, $var_28) {
		
		$var_25 = $var_7->getMockBuilder('Sabre\CardDAV\Card')->disableOriginalConstructor()->getMock();
		$var_25->expects($var_7->once())->method('get')->willReturn($var_28);

		$var_7->var_3 = new class_1($var_7->var_6);
		$var_7->var_3->initialize($var_7->var_4);

		$var_19 = $var_7->var_3->getPhoto($var_25);
		$var_7->assertEquals($var_23, $var_19);
	}

	public function fn_7() {
		return [
			'empty vcard' => [
				false,
				''
			],
			'vcard without PHOTO' => [
				false,
				"BEGIN:VCARD\r\nVERSION:3.0\r\nPRODID:-
			],
			'vcard 3 with PHOTO' => [
				[
					'Content-Type' => 'image/jpeg',
					'body' => '12345'
				],
				"var_30:var_31\var_32\var_33:3.0\var_32\var_34:-
			],
			'vcard 3 with PHOTO URL' => [
				false,
				"BEGIN:VCARD\r\nVERSION:3.0\r\nPRODID:-
			],
			'vcard 4 with PHOTO' => [
				[
					'Content-Type' => 'image/jpeg',
					'body' => '12345'
				],
				"var_30:var_31\var_32\var_33:4.0\var_32\var_34:-
			],
			'vcard 4 with PHOTO URL' => [
				false,
				"BEGIN:VCARD\r\nVERSION:4.0\r\nPRODID:-
			],
			'vcard 4 with PHOTO AND INVALID MIMEtYPE' => [
				[
					'Content-Type' => 'application/octet-stream',
					'body' => '12345'
				],
				"var_30:var_31\var_32\var_33:4.0\var_32\var_34:-
			],
		];
	}
}
