<?php

class class_0 extends var_0 {
	
	
	function fn_0() {
		$var_1 = SiteConfig::current_site_config();
		$var_2 = $var_1->var_3;
		$var_1->var_3 = '';
		$var_1->write();
		
		class_8::set_theme('mytheme');
		$var_5->assertEquals('mytheme', class_8::current_theme(), 'Current theme is the default - user has not defined one');

		$var_1->var_3 = 'myusertheme';
		$var_1->write();

		
		$var_7 = new class_1();
		$var_7->handleRequest(new class_2('GET', '/'));

		$var_5->assertEquals('myusertheme', class_8::current_theme(), 'Current theme is a user defined one');

		
		$var_1->var_3 = $var_2;
		$var_1->write();
	}
	
	
	function fn_1() {
		$var_9 = new class_3(array(
			'Var' => 'var value'
		));
		
		$var_10 = $var_9->renderWith("SSViewerTestPartialTemplate");
		$var_5->assertEquals('Test partial template: var value', trim(preg_replace("/<!--.*-->/U",'',$var_10)));
	}
	
	function fn_2() {
		$var_12 = $var_5->getMock("Requirements_Backend", array("javascript", "css"));
		$var_14 = 'sapphire/tests/forms/a.js';
		$var_15 = 'sapphire/tests/forms/a.js';
		
		$var_12->expects($var_5->once())->method('javascript')->with($var_14);
		$var_12->expects($var_5->once())->method('css')->with($var_15);
		
		Requirements::set_backend($var_12);
		
		$var_9 = new class_3(array());
		
		$var_20 = class_8::fromString(<<<SS
		<% require javascript($var_14) %>
		<% require css($var_15) %>
SS
);
		$var_21 = $var_20->process($var_9);
		$var_5->assertFalse((bool)trim($var_21), "Should be no content in this return.");
	}
	
	function fn_3() {
		$var_20 = class_8::fromString(<<<SS
This is my template<%-- this is a comment --%>This is some content<%-- this is another comment --%>This is the final content
SS
);
		$var_24 = $var_20->process(new class_3(array()));
		
		$var_5->assertEquals("This is my templateThis is some contentThis is the final content", preg_replace("/\n?<!--.*-->\n?/U",'',$var_24));
	}
	
	function fn_4() {
		
		$var_20 = class_8::fromString(<<<SS
\$TestObject.methodWithOneArgument(one)
SS
);
		$var_25 = new class_4();
		$var_5->assertEquals(
			$var_20->process(new class_3(array('TestObject'=>$var_25))),
			"arg1:one",
			"Object method calls in dot notation work with one argument"
		);
		
		
		$var_20 = class_8::fromString(<<<SS
\$TestObject.methodWithTwoArguments(one,two)
SS
);
		$var_25 = new class_4();
		$var_5->assertEquals(
			$var_20->process(new class_3(array('TestObject'=>$var_25))),
			"arg1:one,arg2:two",
			"Object method calls in dot notation work with two arguments"
		);
	}
	
	function fn_5() {
		
		$var_26 = class_8::fromString('<?xml version="1.0" encoding="UTF-8"?>
			<!DOCTYPE html PUBLIC "-
			<html>
				<head><% base_tag %></head>
				<body><p>test</p><body>
			</html>');
		$var_5->assertRegExp('/<head><base href=".*" \/><\/head>/', $var_26->process(new class_5()));
			
		
		$var_29 = class_8::fromString('<!DOCTYPE html>
			<html>
				<head><% base_tag %></head>
				<body><p>test</p><body>
			</html>');
		$var_5->assertRegExp('/<head><base href=".*"><!--\[if lte IE 6\]><\/base><!\[endif\]--><\/head>/', $var_29->process(new class_5()));
			
			
		$var_30 = class_8::fromString('<!DOCTYPE HTML PUBLIC "-
			<html>
				<head><% base_tag %></head>
				<body><p>test</p><body>
			</html>');
		$var_5->assertRegExp('/<head><base href=".*"><!--\[if lte IE 6\]><\/base><!\[endif\]--><\/head>/', $var_30->process(new class_5()));

		
		$var_31 = new class_6();
		
		$var_32 = new class_7($var_26->process(new class_5()));
		$var_31->html($var_32);
		$var_5->assertRegExp('/<head><base href=".*"><!--\[if lte IE 6\]><\/base><!\[endif\]--><\/head>/', $var_32->getBody());

		$var_32 = new class_7($var_26->process(new class_5()));
		$var_31->xhtml($var_32);
		$var_5->assertRegExp('/<head><base href=".*" \/><\/head>/', $var_32->getBody());
	}
	
	function fn_6() {
		$var_36 = class_8::getOption('rewriteHashlinks');
		class_8::setOption('rewriteHashlinks', true);
		
		
		$var_37 = Convert::raw2att($_SERVER['REQUEST_URI']);
		
		$var_38 = var_39 . '/SSViewerTest_testRewriteHashlinks_' . sha1(rand()) . '.ss';
		
		
		file_put_contents($var_38, '<!DOCTYPE html>
			<html>
				<head><% base_tag %></head>
				<body>
				<a class="inline" href="
				$InsertedLink
				<body>
			</html>');
		$var_40 = new class_8($var_38);
		$var_25 = new class_5();
		$var_25->var_41 = '<a class="inserted" href="
		$result = $tmpl->process($obj);
		$this->assertContains(
			'<var_42 var_43="inserted" var_44="' . $var_37 . '
			$var_10
		);
		$var_5->var_45(
			'<a class="var_46" var_44="' . $var_37 . '
			$var_10
		);
		
		unlink($var_38);
		
		SSViewer::setOption('rewriteHashlinks', $var_36);
	}
	
	function testRewriteHashlinksInPhpMode() {
		$var_36 = SSViewer::getOption('rewriteHashlinks');
		SSViewer::setOption('rewriteHashlinks', 'php');
		
		$var_38 = TEMP_FOLDER . '/SSViewerTest_testRewriteHashlinksInPhpMode_' . sha1(rand()) . '.ss';
		
		
		file_put_contents($var_38, '<!DOCTYPE html>
			<html>
				<head><% base_tag %></head>
				<body>
				<a class="var_46" var_44="
				$var_41
				<body>
			</html>');
		$var_40 = new SSViewer($var_38);
		$var_25 = new ViewableData();
		$var_25->var_41 = '<a class="var_47" var_44="
		$var_10 = $var_40->var_22($var_25);
		$var_5->var_45(
			'<a class="var_47" var_44="<?php 
		
		
		
		
		
		
		var_48($var_38);
		
		class_8::setOption('rewriteHashlinks', $var_36);
	}
}

class class_4 extends var_28 implements var_49 {
	function fn_7($var_50) {
		return "arg1:{$var_50}";
	}
	
	function fn_8($var_50, $var_51) {
		return "arg1:{$var_50},arg2:{$var_51}";
	}
}