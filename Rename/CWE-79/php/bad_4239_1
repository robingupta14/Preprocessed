<?php






class class_0
{
    
    static $var_0 = array('a', 'abbr', 'acronym', 'address', 'area', 'b',
        'basefont', 'bdo', 'big', 'blockquote', 'br', 'caption', 'center',
        'cite', 'code', 'col', 'colgroup', 'dd', 'del', 'dfn', 'dir', 'div', 'dl',
        'dt', 'em', 'fieldset', 'font', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i',
        'ins', 'label', 'legend', 'li', 'map', 'menu', 'nobr', 'ol', 'p', 'pre', 'q',
        's', 'samp', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'table',
        'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'tt', 'u', 'ul', 'var', 'wbr', 'img',
        'video', 'source',
        
        'button', 'input', 'textarea', 'select', 'option', 'optgroup',
        
        'svg', 'altglyph', 'altglyphdef', 'altglyphitem', 'animate',
        'animatecolor', 'animatetransform', 'circle', 'clippath', 'defs', 'desc',
        'ellipse', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line',
        'lineargradient', 'marker', 'mask', 'mpath', 'path', 'pattern',
        'polygon', 'polyline', 'radialgradient', 'rect', 'set', 'stop', 'switch', 'symbol',
        'text', 'textpath', 'tref', 'tspan', 'use', 'view', 'vkern', 'filter',
         
        'feblend', 'fecolormatrix', 'fecomponenttransfer', 'fecomposite',
        'feconvolvematrix', 'fediffuselighting', 'fedisplacementmap',
        'feflood', 'fefunca', 'fefuncb', 'fefuncg', 'fefuncr', 'fegaussianblur',
        'feimage', 'femerge', 'femergenode', 'femorphology', 'feoffset',
        'fespecularlighting', 'fetile', 'feturbulence',
        
        'math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr',
        'mmuliscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow',
        'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd',
        'mtext', 'mtr', 'munder', 'munderover', 'maligngroup', 'malignmark',
        'mprescripts', 'semantics', 'annotation', 'annotation-xml', 'none',
        'infinity', 'matrix', 'matrixrow', 'ci', 'cn', 'sep', 'apply',
        'plus', 'minus', 'eq', 'power', 'times', 'divide', 'csymbol', 'root',
        'bvar', 'lowlimit', 'uplimit',
    );

    
    static $var_1 = array('script', 'applet', 'embed', 'object', 'style');

    
    static $var_2 = array('name', 'class', 'title', 'alt', 'width', 'height',
        'align', 'nowrap', 'col', 'row', 'id', 'rowspan', 'colspan', 'cellspacing',
        'cellpadding', 'valign', 'bgcolor', 'color', 'border', 'bordercolorlight',
        'bordercolordark', 'face', 'marginwidth', 'marginheight', 'axis', 'border',
        'abbr', 'char', 'charoff', 'clear', 'compact', 'coords', 'vspace', 'hspace',
        'cellborder', 'size', 'lang', 'dir', 'usemap', 'shape', 'media',
        'background', 'src', 'poster', 'href',
        
        'type', 'rows', 'cols', 'disabled', 'readonly', 'checked', 'multiple', 'value',
        
        'accent-height', 'accumulate', 'additive', 'alignment-baseline', 'alphabetic',
        'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseprofile',
        'baseline-shift', 'begin', 'bias', 'by', 'clip', 'clip-path', 'clip-rule',
        'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile',
        'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction',
        'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity',
        'fill-rule', 'filter', 'flood-color', 'flood-opacity', 'font-family', 'font-size',
        'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'from',
        'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform',
        'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints',
        'keysplines', 'keytimes', 'lengthadjust', 'letter-spacing', 'kernelmatrix',
        'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid',
        'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits',
        'maskunits', 'max', 'mask', 'mode', 'min', 'numoctaves', 'offset', 'operator',
        'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order',
        'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits',
        'points', 'preservealpha', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount',
        'repeatdur', 'restart', 'rotate', 'scale', 'seed', 'shape-rendering', 'show', 'specularconstant',
        'specularexponent', 'spreadmethod', 'stddeviation', 'stitchtiles', 'stop-color',
        'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap',
        'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width',
        'surfacescale', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration',
        'text-rendering', 'textlength', 'to', 'u1', 'u2', 'unicode', 'values', 'viewbox',
        'visibility', 'vert-adv-y', 'version', 'vert-origin-x', 'vert-origin-y', 'word-spacing',
        'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2',
        'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan',
        
        'accent', 'accentunder', 'bevelled', 'close', 'columnalign', 'columnlines',
        'columnspan', 'denomalign', 'depth', 'display', 'displaystyle', 'encoding', 'fence',
        'frame', 'largeop', 'length', 'linethickness', 'lspace', 'lquote',
        'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize',
        'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign',
        'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel',
        'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator',
        'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset',
        'fontsize', 'fontweight', 'fontstyle', 'fontfamily', 'groupalign', 'edge', 'side',
    );

    
    static $var_3 = array('area', 'base', 'br', 'col', 'command', 'embed', 'hr',
        'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr',
        
        'sep', 'infinity', 'in', 'plus', 'eq', 'power', 'times', 'divide', 'root',
        'maligngroup', 'none', 'mprescripts',
    );

    
    public $var_4 = false;

    
    private $var_5 = array();

    
    private $var_6 = array();

    
    private $var_7 = array();

    
    private $var_8 = array();

    
    private $var_9 = array();

    
    private $var_10 = array();

    
    private $var_11;

    private $var_12 = false;


    
    public function fn_0($var_13 = array())
    {
        $var_14->var_7   = array_flip((array)$var_13['html_elements']) + array_flip(self::$var_0);
        $var_14->var_10    = array_flip((array)$var_13['html_attribs']) + array_flip(self::$var_2);
        $var_14->var_8 = array_flip((array)$var_13['ignore_elements']) + array_flip(self::$var_1);
        $var_14->var_9   = array_flip((array)$var_13['void_elements']) + array_flip(self::$var_3);

        unset($var_13['html_elements'], $var_13['html_attribs'], $var_13['ignore_elements'], $var_13['void_elements']);

        $var_14->var_5 = $var_13 + array('show_washed' => true, 'allow_remote' => false, 'cid_map' => array());
    }

    
    public function fn_1($var_15, $var_16)
    {
        $var_14->var_6[$var_15] = $var_16;
    }

    
    private function fn_2($var_18)
    {
        $var_19 = array();

        
        $var_18 = preg_replace('/[\n\r\s\t]+/', ' ', $var_18);

        
        $var_18 = rcube_utils::xss_entity_decode($var_18);

        foreach (explode(';', $var_18) as $var_20) {
            if (preg_match('/^\s*([a-z\\\-]+)\s*:\s*(.*)\s*$/i', $var_20, $var_21)) {
                $var_22 = $var_21[1];
                $var_23   = $var_21[2];
                $var_24 = '';

                foreach ($var_14->fn_3($var_23) as $var_26) {
                    if (preg_match('/^url\(/i', $var_26)) {
                        if (preg_match('/^url\(\s*[\'"]?([^\'"\)]*)[\'"]?\s*\)/iu', $var_26, $var_21)) {
                            if ($var_27 = $var_14->fn_4($var_21[1])) {
                                $var_24 .= ' url(' . htmlspecialchars($var_27, var_29) . ')';
                            }
                        }
                    }
                    else if (!preg_match('/^(behavior|expression)/i', $var_26)) {
                        
                        if (!strcasecmp($var_22, 'position') && !strcasecmp($var_26, 'fixed')) {
                            $var_26 = 'absolute';
                        }

                        
                        $var_24 .= ' ' . $var_26;

                        
                        if (preg_match('/^(left|right|top|bottom|width|height)/i', $var_22)
                            && preg_match('/^[0-9]+$/', $var_26)
                        ) {
                            $var_24 .= 'px';
                        }
                    }
                }

                if (isset($var_24[0])) {
                    $var_19[] = $var_22 . ':' . $var_24;
                }
            }
        }

        return implode('; ', $var_19);
    }

    
    private function fn_5($var_31)
    {
        $var_19 = '';
        $var_32 = array();

        foreach ($var_31->var_33 as $var_34 => $var_35) {
            $var_36   = strtolower($var_34);
            $var_24 = $var_35->var_37;

            if ($var_36 == 'style' && ($var_18 = $var_14->fn_2($var_24))) {
                
                $var_19 .= ' style="' . str_replace('"', '&quot;', $var_18) . '"';
            }
            else if (isset($var_14->var_10[$var_36])) {
                $var_24 = trim($var_24);
                $var_38   = null;

                
                if ($var_36 == 'to' || $var_36 == 'from') {
                    $var_36 = strtolower($var_31->getAttribute('attributeName'));
                    if ($var_36 && !isset($var_14->var_10[$var_36])) {
                        $var_36 = null;
                    }
                }

                if ($var_14->fn_6($var_31->var_41, $var_36)) {
                    $var_38 = $var_14->fn_4($var_24, true);
                }
                else if ($var_14->fn_7($var_31->var_41, $var_36)) {
                    if (!preg_match('!^(javascript|vbscript|data:)!i', $var_24)
                        && preg_match('!^([a-z][a-z0-9.+-]+:|
                    ) {
                        $out = $value;
                    }
                }
                else if ($this->is_funciri_attribute($node->nodeName, $key)) {
                    if (preg_match('/^[var_43-var_44:]*var_27\(/var_45', $var_26)) {
                        if (preg_match('/^([a-z:]*url)\(\s*[\'"]?([^\'"\)]*)[\'"]?\s*\)/iu', $var_24, $var_21)) {
                            if ($var_27 = $var_14->fn_4($var_21[2])) {
                                $var_19 .= ' ' . $var_35->var_41 . '="' . $var_21[1] . '(' . htmlspecialchars($var_27, var_29) . ')'
                                     . substr($var_26, strlen($var_21[0])) . '"';
                                continue;
                            }
                        }
                        else {
                            $var_38 = $var_24;
                        }
                    }
                    else {
                        $var_38 = $var_24;
                    }
                }
                else if ($var_36) {
                   $var_38 = $var_24;
                }

                if ($var_38 !== null && $var_38 !== '') {
                    $var_19 .= ' ' . $var_35->var_41 . '="' . htmlspecialchars($var_38, var_29) . '"';
                }
                else if ($var_24) {
                    $var_32[] = htmlspecialchars($var_35->var_41, var_29);
                }
            }
            else {
                $var_32[] = htmlspecialchars($var_35->var_41, var_29);
            }
        }

        if (!empty($var_32) && $var_14->var_5['show_washed']) {
            $var_19 .= ' x-washed="' . implode(' ', $var_32) . '"';
        }

        return $var_19;
    }

    
    private function fn_4($var_46, $var_47 = false)
    {
        if (($var_48 = $var_14->var_5['cid_map'][$var_46])
            || ($var_48 = $var_14->var_5['cid_map'][$var_14->var_5['base_url'].$var_46])
        ) {
            return $var_48;
        }

        
        if ($var_46[0] == '
            return $uri;
        }

        if (preg_match('/^(var_49|var_50|var_51):.+/var_45', $var_46)) {
            if ($var_14->var_5['allow_remote']) {
                return $var_46;
            }

            $var_14->var_4 = true;
            if ($var_47 && $var_14->var_5['blocked_src']) {
                return $var_14->var_5['blocked_src'];
            }
        }
        else if (preg_match('/^data:image.+/i', $var_46)) { 
            return $var_46;
        }
    }

    
    private function fn_7($var_52, $var_35)
    {
        return ($var_52 == 'a' || $var_52 == 'area') && $var_35 == 'href';
    }

    
    private function fn_6($var_52, $var_35)
    {
        return $var_35 == 'background'
            || $var_35 == 'color-profile' 
            || ($var_35 == 'poster' && $var_52 == 'video')
            || ($var_35 == 'src' && preg_match('/^(img|image|source|input|video|audio)$/i', $var_52))
            || ($var_52 == 'image' && $var_35 == 'href'); 
    }

    
    private function fn_8($var_52, $var_35)
    {
        return in_array($var_35, array('fill', 'filter', 'stroke', 'marker-start',
            'marker-end', 'marker-mid', 'clip-path', 'mask', 'cursor'));
    }

    
    private function fn_9($var_31, $var_54 = 20)
    {
        if (!$var_31->hasChildNodes()) {
            return '';
        }

        $var_54++;

        if ($var_14->var_11 > 0 && $var_54 == $var_14->var_11 - 1) {
            
            if (!$var_14->var_56) {
                $var_14->var_56 = true;
                rcube::raise_error(array('code' => 500, 'type' => 'php',
                    'line' => var_57, 'file' => var_58,
                    'message' => "Maximum nesting level exceeded (xdebug.max_nesting_level={$var_14->var_11})"),
                    true, false);
            }
            return '<!-- ignored -->';
        }

        $var_31 = $var_31->var_59;
        $var_60 = '';

        do {
            switch ($var_31->var_61) {
            case var_62: 
                $var_15 = strtolower($var_31->var_41);
                if ($var_16 = $var_14->var_6[$var_15]) {
                    $var_60 .= call_user_func($var_16, $var_15,
                        $var_14->fn_5($var_31), $var_14->fn_9($var_31, $var_54), $var_14);
                }
                else if (isset($var_14->var_7[$var_15])) {
                    $var_63 = $var_14->fn_9($var_31, $var_54);
                    $var_60 .= '<' . $var_31->var_41;

                    if ($var_15 == 'svg') {
                        $var_64 = new class_1($var_31->var_65);
                        foreach ($var_64->query('namespace::*') as $var_67) {
                            if ($var_67->var_41 != 'xmlns:xml') {
                                $var_60 .= sprintf(' %s="%s"',
                                    $var_67->var_41,
                                    htmlspecialchars($var_67->var_37, var_29, $var_14->var_5['charset'])
                                );
                            }
                        }
                    }
                    else if ($var_15 == 'textarea' && strpos($var_63, '<') !== false) {
                        $var_63 = htmlspecialchars($var_63, var_29);
                    }

                    $var_60 .= $var_14->fn_5($var_31);

                    if ($var_63 === '' && ($var_14->var_12 || isset($var_14->var_9[$var_15]))) {
                        $var_60 .= ' />';
                    }
                    else {
                        $var_60 .= '>' . $var_63 . '</' . $var_31->var_41 . '>';
                    }
                }
                else if (isset($var_14->var_8[$var_15])) {
                    $var_60 .= '<!-- ' . htmlspecialchars($var_31->var_41, var_29) . ' not allowed -->';
                }
                else {
                    $var_60 .= '<!-- ' . htmlspecialchars($var_31->var_41, var_29) . ' ignored -->';
                    $var_60 .= $var_14->fn_9($var_31, $var_54); 
                }
                break;

            case var_68:
            case var_69:
                $var_60 .= htmlspecialchars($var_31->var_37);
                break;

            case var_70:
                $var_60 .= $var_14->fn_9($var_31, $var_54);
                break;
            }
        }
        while($var_31 = $var_31->var_71);

        return $var_60;
    }

    
    public function fn_10($var_72)
    {
        
        $var_31 = new class_2('1.0', $var_14->var_5['charset']);
        $var_14->var_4 = false;

        $var_72 = $var_14->fn_11($var_72);

        
        if (preg_match('/<base\s+href=[\'"]*([^\'"]+)/is', $var_72, $var_74)) {
            $var_14->var_5['base_url'] = $var_74[1];
        }
        else {
            $var_14->var_5['base_url'] = '';
        }

        
        $var_14->var_11 = (int) @ini_get('xdebug.max_nesting_level');

        
        $var_14->var_12 = !preg_match('/<(html|head|body)/i', $var_72) && stripos($var_72, '<svg') !== false;
        $var_75       = $var_14->var_12 ? 'loadXML' : 'loadHTML';
        $var_76      = 0;

        
        if (var_77 >= 50400) {
            $var_76 = var_78 | var_79 | var_80;
            @$var_31->{$var_75}($var_72, $var_76);
        }
        else {
            @$var_31->{$var_75}($var_72);
        }

        return $var_14->fn_9($var_31);
    }

    
    public function fn_12($var_81)
    {
        return $var_14->var_5[$var_81];
    }

    
    private function fn_11($var_72)
    {
        $var_72 = trim($var_72);

        
        $var_82 = array(
            
            '/(<\/nobr>)(\s+)(<nobr>)/i',
            
            '/<title[^>]*>[^<]*<\/title>/i',
            
            '/<\!doctype[^>]+>[^<]*/im',
            
            '/^(\0\0\xFE\xFF|\xFF\xFE\0\0|\xFE\xFF|\xFF\xFE|\xEF\xBB\xBF)/',
            
            '/<html\s[^>]+>/i',
        );

        $var_83 = array(
            '\\1'.' &nbsp; '.'\\3',
            '',
            '',
            '',
            '<html>',
        );

        $var_72 = preg_replace($var_82, $var_83, trim($var_72));

        
        $var_84 = array(
            "\xe2\x80\x98", 
            "\xe2\x80\x99", 
            "\xe2\x80\x9c", 
            "\xe2\x80\x9d", 
            "\xe2\x80\x94", 
            "\xe2\x80\xa6"  
        );

        $var_85 = array(
            "'",
            "'",
            '"',
            '"',
            '&mdash;',
            '...'
        );

        $var_72 = str_replace($var_84, $var_85, $var_72);

        
        if ($var_72 === null && ($var_86 = preg_last_error()) != var_87) {
            $var_88 = "Could not clean up HTML message! PCRE Error: $var_86.";

            if ($var_86 == var_89) {
                $var_88 .= " Consider raising pcre.backtrack_limit!";
            }
            if ($var_86 == var_90) {
                $var_88 .= " Consider raising pcre.recursion_limit!";
            }

            rcube::raise_error(array('code' => 620, 'type' => 'php',
                'line' => var_57, 'file' => var_58,
                'message' => $var_88), true, false);

            return '';
        }

        
        

        
        $var_72 = preg_replace_callback('/(<(?!\!)[\/]*)([^\s>]+)([^>]*)/', array($var_14, 'html_tag_callback'), $var_72);

        
        
        
        $var_72 = preg_replace('/<!--[a-zA-Z0-9]+>/', '', $var_72);

        
        self::fix_broken_lists($var_72);

        
        $var_72 = self::fn_14($var_72);

        return $var_72;
    }

    
    public static function fn_13($var_74)
    {
        
        if (substr($var_74[3], -2) == '--') {
            $var_74[0] = '';
            return implode('', $var_74);
        }

        $var_91 = $var_74[2];
        $var_91 = preg_replace(array(
            '/:.*$/',                
            '/[^a-z0-9_\[\]\!?-]/i', 
        ), '', $var_91);

        
        if ($var_74[1] == '</') {
            $var_74[3] = '';
        }

        return $var_74[1] . $var_91 . $var_74[3];
    }

    
    public static function fn_14($var_92)
    {
        
        if (preg_match('!(<base.*href=["\']?)([hftps]{3,5}:
            $replacer = new rcube_base_replacer($regs[2]);
            $body     = $replacer->replace($body);
        }

        return $body;
    }

    
    public static function fix_broken_lists(&$html)
    {
        
        foreach (array('var_93', 'ul') as $var_52) {
            $var_94 = 0;
            while (($var_94 = stripos($var_72, '<' . $var_52, $var_94)) !== false) {
                $var_94++;

                
                if (!in_array($var_72[$var_94+2], array(' ', '>'))) {
                    continue;
                }

                $var_13      = $var_94;
                $var_95  = false;
                $var_96 = 0;

                while (($var_13 = strpos($var_72, '<', $var_13)) !== false) {
                    $var_97 = strtolower(substr($var_72, $var_13, 4));

                    
                    if ($var_97 == '<li>' || $var_97 == '<li ') {
                        $var_95 = true;
                        $var_13 += 4;
                    }
                    
                    else if ($var_97 == '</li' && in_array($var_72[$var_13+4], array(' ', '>'))) {
                        $var_96 = $var_13;
                        $var_13 += 4;
                        $var_95 = false;
                    }
                    
                    else if ($var_97 == '</' . $var_52 && in_array($var_72[$var_13+4], array(' ', '>'))) {
                        break;
                    }
                    
                    else if (!$var_95 && $var_96 && ($var_97 == '<ol>' || $var_97 == '<ol ' || $var_97 == '<ul>' || $var_97 == '<ul ')) {
                        
                        $var_98 = substr($var_97, 1, 2);
                        $var_99    = $var_13;
                        do {
                            $var_100 = stripos($var_72, '<' . $var_98, $var_99+1);
                            $var_99 = stripos($var_72, '</' . $var_98, $var_99+1);
                        }
                        while ($var_100 !== false && $var_99 !== false && $var_99 > $var_100);

                        
                        if ($var_99 === false) {
                            break;
                        }

                        
                        $var_101     = strpos($var_72, '>', $var_99);
                        $var_102     = $var_101 - $var_13 + 1;
                        $var_98 = substr($var_72, $var_13, $var_102);

                        
                        $var_72    = substr_replace($var_72, '', $var_13, $var_102);
                        $var_72    = substr_replace($var_72, $var_98, $var_96, 0);

                        $var_13 = $var_101;
                    }
                    else {
                        $var_13++;
                    }
                }
            }
        }
    }

    
    protected function fn_3($var_18)
    {
        $var_94 = 0;

        
        while (($var_94 = strpos($var_18, '', $var_94+2);

            if ($var_101 === false) {
                $var_18 = substr($var_18, 0, $var_94);
            }
            else {
                $var_18 = substr_replace($var_18, '', $var_94, $var_101 - $var_94 + 2);
            }
        }

        $var_18  = trim($var_18);
        $var_103 = strlen($var_18);
        $var_19 = array();

        
        for ($var_13=$var_45=0; $var_45 < $var_103; $var_45++) {
            if (($var_18[$var_45] == "\"" || $var_18[$var_45] == "'") && $var_18[$var_45-1] != "\\") {
                if ($var_104 == $var_18[$var_45]) {
                    $var_104 = false;
                }
                else if (!$var_104) {
                    $var_104 = $var_18[$var_45];
                }
            }

            if (!$var_104 && $var_18[$var_45] == ' ' && !preg_match('/[,\(]/', $var_18[$var_45-1])) {
                $var_19[] = substr($var_18, $var_13, $var_45 - $var_13);
                $var_13 = $var_45 + 1;
            }
        }

        $var_19[] = (string) substr($var_18, $var_13);

        return $var_19;
    }
}
