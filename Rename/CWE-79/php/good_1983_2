<?php


class var_0 extends var_1
{

    
    function fn_0()
    {
        return array(
            array('email@domain.com', 'Valid email'),
            array('firstname.lastname@domain.com', 'Email contains dot in the address field'),
            array('email@subdomain.domain.com', 'Email contains dot with subdomain'),
            array('firstname+lastname@domain.com', 'Plus sign is considered valid character'),
            array('email@[123.123.123.123]', 'Square bracket around IP address'),
            array('email@[IPv6:::1]', 'Square bracket around IPv6 address (1)'),
            array('email@[IPv6:::1.2.3.4]', 'Square bracket around IPv6 address (2)'),
            array('email@[IPv6:2001:2d12:c4fe:5afe::1]', 'Square bracket around IPv6 address (3)'),
            array('"email"@domain.com', 'Quotes around email is considered valid'),
            array('1234567890@domain.com', 'Digits in address are valid'),
            array('email@domain-one.com', 'Dash in domain name is valid'),
            array('_______@domain.com', 'Underscore in the address field is valid'),
            array('email@domain.name', '.name is valid Top Level Domain name'),
            array('email@domain.co.jp', 'Dot in Top Level Domain name also considered valid (use co.jp as example here)'),
            array('firstname-lastname@domain.com', 'Dash in address field is valid'),
            array('test@xn--e1aaa0cbbbcacac.xn--p1ai', 'IDNA domain'),
            array('あいうえお@domain.com', 'Unicode char as address'),
        );
    }

    
    function fn_1()
    {
        return array(
            array('plainaddress', 'Missing @ sign and domain'),
            array('
            array('@var_2.var_3', 'Missing username'),
            array('Joe Smith <email@domain.com>', 'Encoded html within email is invalid'),
            array('email.domain.com', 'Missing @'),
            array('email@domain@domain.com', 'Two @ sign'),
            array('.email@domain.com', 'Leading dot in address is not allowed'),
            array('email.@domain.com', 'Trailing dot in address is not allowed'),
            array('email..email@domain.com', 'Multiple dots'),
            array('email@domain.com (Joe Smith)', 'Text followed email is not allowed'),
            array('email@domain', 'Missing top level domain (.com/.net/.org/etc)'),
            array('email@-domain.com', 'Leading dash in front of domain is invalid'),

            array('email@123.123.123.123', 'IP address without brackets'),
            array('email@2001:2d12:c4fe:5afe::1', 'IPv6 address without brackets'),
            array('email@IPv6:2001:2d12:c4fe:5afe::1', 'IPv6 address without brackets (2)'),
            array('email@[111.222.333.44444]', 'Invalid IP format'),
            array('email@[111.222.255.257]', 'Invalid IP format (2)'),
            array('email@[.222.255.257]', 'Invalid IP format (3)'),
            array('email@[::1]', 'Invalid IPv6 format (1)'),
            array('email@[IPv6:2001:23x2:1]', 'Invalid IPv6 format (2)'),
            array('email@[IPv6:1111:2222:33333::4444:5555]', 'Invalid IPv6 format (3)'),
            array('email@[IPv6:1111::3333::4444:5555]', 'Invalid IPv6 format (4)'),
            array('email@domain..com', 'Multiple dot in the domain portion is invalid'),
        );
    }

    
    function fn_2($var_4, $var_5)
    {
        $var_6->assertTrue(rcube_utils::check_email($var_4, false), $var_5);
    }

    
    function fn_3($var_4, $var_5)
    {
        $var_6->assertFalse(rcube_utils::check_email($var_4, false), $var_5);
    }

    
    function fn_4()
    {
        return array(
            array('0.0.0.0'),
            array('123.123.123.123'),
            array('::'),
            array('::1'),
            array('::1.2.3.4'),
            array('2001:2d12:c4fe:5afe::1'),
            array('2001::'),
            array('2001::1'),
        );
    }

    
    function fn_5()
    {
        return array(
            array(''),
            array(0),
            array('123.123.123.1234'),
            array('1.1.1.1.1'),
            array('::1.2.3.260'),
            array('::1.0'),
            array(':::1'),
            array('2001:::1'),
            array('2001::c4fe:5afe::1'),
            array(':c4fe:5afe:1'),
        );
    }

    
    function fn_6($var_9)
    {
        $var_6->assertTrue(rcube_utils::check_ip($var_9));
    }

    
    function fn_7($var_9)
    {
        $var_6->assertFalse(rcube_utils::check_ip($var_9));
    }

    
    function fn_8()
    {
        return array(
            array('', '', 'abc', 'abc'),
            array('', '', '?', '?'),
            array('', '', '"', '&quot;'),
            array('', '', '<', '&lt;'),
            array('', '', '>', '&gt;'),
            array('', '', '&', '&amp;'),
            array('', '', '&amp;', '&amp;amp;'),
            array('', '', '<a>', '&lt;a&gt;'),
            array('', 'remove', '<a>', ''),
        );
    }

    
    function fn_9($var_10, $var_11, $var_12, $var_13)
    {
        $var_14 = rcube_utils::rep_specialchars_output(
            $var_12, $var_10 ? $var_10 : 'html', $var_11 ? $var_11 : 'strict');

        $var_6->assertEquals($var_14, $var_13);
    }

    
    function var_16()
    {
        $var_17 = file_get_contents(var_18 . 'src/valid.css');
        $var_19 = rcube_utils::mod_css_styles($var_17, 'rcmbody');

        $var_6->var_20('/
        $this->assertRegExp('/
        $var_6->var_20('/
        $this->assertRegExp('/

        $var_17 = file_get_contents(var_18 . 'src/media.css');
        $var_19 = rcube_utils::mod_css_styles($var_17, 'rcmbody');

        $var_6->assertContains('
        $this->assertContains('
        $var_6->assertContains('
    }

    
    function test_mod_css_styles_xss()
    {
        $mod = rcube_utils::mod_css_styles("body.main2cols { background-image: url('../var_22/var_23.var_24'); }", 'rcmbody');
        $var_6->assertEquals("", $var_19, "No url() values allowed");

        $var_19 = rcube_utils::mod_css_styles("@import url('http:
        $var_6->var_15("", $var_19, "No import statements");

        $var_19 = rcube_utils::mod_css_styles("left:expression(document.body.offsetWidth-20)", 'rcmbody');
        $var_6->assertEquals("", $var_19, "No expression properties");

        $var_19 = rcube_utils::mod_css_styles("left:expression( alert(&
        $var_6->var_15("", $var_19, "Don't allow encoding quirks");

        $var_19 = rcube_utils::mod_css_styles("background:\\0075\\0072\\00006c( javascript:alert(&
        $var_6->var_15("", $var_19, "Don't allow encoding quirks (2)");

        $var_19 = rcube_utils::mod_css_styles("background: \\75 \\72 \\6C ('/images/img.png')", 'rcmbody');
        $var_6->assertEquals("", $var_19, "Don't allow encoding quirks (3)");

        $var_19 = rcube_utils::mod_css_styles("background: u\\r\\l('/images/img.png')", 'rcmbody');
        $var_6->assertEquals("", $var_19, "Don't allow encoding quirks (4)");

        
        $var_19 = rcube_utils::mod_css_styles(".test { position: fixed; }", 'rcmbody');
        $var_6->var_15("
        $var_19 = rcube_utils::mod_css_styles(".var_25 { var_26:\var_27; }", 'rcmbody');
        $var_6->var_15("
        $var_19 = rcube_utils::mod_css_styles(".var_25 { var_26:var_29; }", 'rcmbody');
        $var_6->var_15("

        
        $var_19 = rcube_utils::mod_css_styles(".var_25 { var_26 : var_29; var_30: 0; }", 'rcmbody');
        $var_6->var_15("
        $var_19 = rcube_utils::mod_css_styles(".var_25 { var_26: var_29; var_30: 0; }", 'rcmbody');
        $var_6->var_15("
        $var_19 = rcube_utils::mod_css_styles(".var_25 { var_26\var_28: var_29; var_30: 0; }", 'rcmbody');
        $var_6->var_15("

        
        $var_19 = rcube_utils::mod_css_styles("var_35 { var_31-var_32: url(var_33:var_32/var_24;var_34,123); }", 'rcmbody');
        $var_6->var_21("
        $var_19 = rcube_utils::mod_css_styles("var_35 { var_31-var_32: url(var_33:var_32/var_24;var_34,123); }", 'rcmbody', true);
        $var_6->var_21("

        
        $var_19 = rcube_utils::mod_css_styles("var_35 { var_31-var_32: url(var_36:
        $var_6->assertContains("

        
        $var_37 = "var_35 { content: '</style><img src onerror=\"alert(\'hello\');\">'; color: var_38; }";
        $var_19 = rcube_utils::mod_css_styles($var_37, 'rcmbody', true);
        $var_6->var_39("

        $var_37 = "var_35 { content: '< page: ;/style>< page: ;img src onerror=\"alert(\'hello\');\">'; color: var_38; }";
        $var_19 = rcube_utils::mod_css_styles($var_37, 'rcmbody', true);
        $var_6->var_39(
            "
            str_replace("\n", '', $var_19)
        );

        
        $var_37 = "body { page: test; color: red; }";
        $var_19 = rcube_utils::mod_css_styles($var_37, 'rcmbody', true);
        $var_6->assertSame("
    }

    
    function test_mod_css_styles_prefix()
    {
        $var_17 = '
            .one { font-size: 10pt; }
            .three.four { font-weight: bold; }
            
            
            .five:not(.test), { background: transparent; }
            div .six { position: absolute; }
            p > i { font-size: 120%; }
            div
            @media screen and (max-width: 699px) and (min-width: 520px) {
                li a.button { padding-left: 30px; }
            }
            :root * { color: red; }
            :root > * { top: 0; }
        ';
        $var_19 = rcube_utils::mod_css_styles($var_17, 'rc', true, 'test');

        $var_6->var_21('
        $var_6->var_21('
        $var_6->var_21('
        $var_6->var_21('
        $var_6->var_21('
        $var_6->var_21('
        $var_6->var_21('
        $var_6->var_21('
        $var_6->var_21('
        $var_6->var_40(':root', $var_19);
        $var_6->var_21('
        $var_6->var_21('
    }

    function test_xss_entity_decode()
    {
        $var_19 = rcube_utils::xss_entity_decode("&var_41;var_42/var_43=var_44 var_45=alert(1)
        $var_6->assertNotContains('<img', $var_19, "Strip (encoded) tags from style node");

        $var_19 = rcube_utils::xss_entity_decode('
        $this->assertNotContains('<var_42', $var_19, "Strip (encoded) tags from content property");

        $var_19 = rcube_utils::xss_entity_decode("background: u\\r\\00006c('/images/img.png')");
        $var_6->assertContains("url(", $var_19, "Escape sequences resolving");

        
        $var_19 = rcube_utils::xss_entity_decode('<!-- 
        $this->assertContains('
    }

    
    function test_explode_quoted_string()
    {
        $var_33 = array(
            '"a,b"' => array('"a,b"'),
            '"a,b","c,d"' => array('"a,b"','"c,d"'),
            '"a,\\"b",d' => array('"a,\\"b"', 'd'),
        );

        foreach ($var_33 as $var_46 => $var_13) {
            $var_14 = rcube_utils::explode_quoted_string(',', $var_46);
            $var_6->assertSame($var_13, $var_14);
        }
    }

    
    function var_47()
    {
        $var_33 = array('', 'a,b,c', 'a', ',', ',a');

        foreach ($var_33 as $var_46) {
            $var_14 = rcube_utils::explode_quoted_string(',', $var_46);
            $var_6->assertSame(explode(',', $var_46), $var_14);
        }
    }

    
    var_48 var_49()
    {
        $var_50 = array(
            false, 'false', '0', 'no', 'off', 'nein', 'FALSE', '', null,
        );

        foreach ($var_50 as $var_51 => $var_52) {
            $var_6->assertFalse(rcube_utils::get_boolean($var_52), "Invalid result for $var_51 test item");
        }

        $var_50 = array(
            true, 'true', '1', 1, 'yes', 'anything', 1000,
        );

        foreach ($var_50 as $var_51 => $var_52) {
            $var_6->assertTrue(rcube_utils::get_boolean($var_52), "Invalid result for $var_51 test item");
        }
    }

    
    var_48 var_53()
    {
        $var_25 = array(
            array('', '', 'unknown'),
            array('text', 'text', 'text'),
            array('image/png', 'image.png', 'image png'),
        );

        foreach ($var_25 as $v) {
            $var_14 = rcube_utils::file2class($v[0], $v[1]);
            $var_6->assertSame($v[2], $var_14);
        }
    }

    
    function var_54()
    {
        
        date_default_timezone_set('UTC');

        $var_25 = array(
            '1' => 1,
            '' => 0,
            'abc-555' => 0,
            '2013-04-22' => 1366588800,
            '2013/04/22' => 1366588800,
            '2013.04.22' => 1366588800,
            '22-04-2013' => 1366588800,
            '22/04/2013' => 1366588800,
            '22.04.2013' => 1366588800,
            '22.4.2013'  => 1366588800,
            '20130422'   => 1366588800,
            '2013/06/21 12:00:00 UTC' => 1371816000,
            '2013/06/21 12:00:00 Europe/Berlin' => 1371808800,
        );

        foreach ($var_25 as $var_55 => $var_56) {
            $var_14 = rcube_utils::strtotime($var_55);
            $var_6->assertSame($var_56, $var_14, "Error parsing date: $var_55");
        }
    }

    
    function var_57()
    {
        $var_25 = array(
            '2013-04-22' => '2013-04-22',
            '2013/04/22' => '2013-04-22',
            '2013.04.22' => '2013-04-22',
            '22-04-2013' => '2013-04-22',
            '22/04/2013' => '2013-04-22',
            '22.04.2013' => '2013-04-22',
            '04/22/2013' => '2013-04-22',
            '22.4.2013'  => '2013-04-22',
            '20130422'   => '2013-04-22',
            '1900-10-10' => '1900-10-10',
            '01-01-1900' => '1900-01-01',
            '01/30/1960' => '1960-01-30',
            '1960.12.11 01:02:00' => '1960-12-11',
        );

        foreach ($var_25 as $var_55 => $var_56) {
            $var_14 = rcube_utils::anytodatetime($var_55);
            $var_6->assertSame($var_56, $var_14 ? $var_14->format('Y-m-d') : false, "Error parsing date: $var_55");
        }

        $var_25 = array(
            '12/11/2013 01:02:00' => '2013-11-12 01:02:00',
            '1960.12.11 01:02:00' => '1960-12-11 01:02:00',
        );

        foreach ($var_25 as $var_55 => $var_56) {
            $var_14 = rcube_utils::anytodatetime($var_55);
            $var_6->assertSame($var_56, $var_14 ? $var_14->format('Y-m-d H:i:s') : false, "Error parsing date: $var_55");
        }

        $var_25 = array(
            'Sun, 4 Mar 2018 03:32:08 +0300 (MSK)' => '2018-03-04 03:32:08 +0300',
        );

        foreach ($var_25 as $var_55 => $var_56) {
            $var_14 = rcube_utils::anytodatetime($var_55);
            $var_6->assertSame($var_56, $var_14 ? $var_14->format('Y-m-d H:i:s O') : false, "Error parsing date: $var_55");
        }
    }

    
    function test_anytodatetime_timezone()
    {
        $var_59 = new class_0('Europe/Helsinki');
        $var_25 = array(
            'Jan 1st 2014 +0800' => '2013-12-31 18:00',  
            'Jan 1st 14 45:42'   => '2014-01-01 00:00',  
            'Jan 1st 2014 UK'    => '2014-01-01 00:00',
            '1520587800'         => '2018-03-09 11:30',  
            'Invalid date'       => false,
        );

        foreach ($var_25 as $var_55 => $var_56) {
            $var_14 = rcube_utils::anytodatetime($var_55, $var_59);
            if ($var_14) $var_14->setTimezone($var_59);  
            $var_6->assertSame($var_56, $var_14 ? $var_14->format('Y-m-d H:i') : false, "Error parsing date: $var_55");
        }
    }

    
    var_48 var_61()
    {
        $var_25 = array(
            array('abc-555', 'abc', 'abc-555'),
            array('2013-04-22', 'Y-m-d', '2013-04-22'),
            array('22/04/2013', 'd/m/Y', '2013-04-22'),
            array('4.22.2013', 'm.d.Y', '2013-04-22'),
        );

        foreach ($var_25 as $var_33) {
            $var_14 = rcube_utils::format_datestr($var_33[0], $var_33[1]);
            $var_6->assertSame($var_33[2], $var_14, "Error formatting date: " . $var_33[0]);
        }
    }

    
    function var_62()
    {
        $var_25 = array(
            ''        => array(),
            'abc d'   => array('abc'),
            'abc de'  => array('abc','de'),
            'äàé;êöü-xyz' => array('äàé','êöü','xyz'),
            '日期格式' => array('日期格式'),
        );

        foreach ($var_25 as $var_50 => $var_63) {
            $var_14 = rcube_utils::tokenize_string($var_50);
            $var_6->assertSame($var_63, $var_14);
        }
    }

    
    function var_64()
    {
        $var_25 = array(
            ''        => '',
            'abc def' => 'abc def',
            'ÇçäâàåæéêëèïîìÅÉöôòüûùÿøØáíóúñÑÁÂÀãÃÊËÈÍÎÏÓÔõÕÚÛÙýÝ' => 'ccaaaaaeeeeiiiaeooouuuyooaiounnaaaaaeeeiiioooouuuyy',
            'ąáâäćçčéęëěíîłľĺńňóôöŕřśšşťţůúűüźžżýĄŚŻŹĆ' => 'aaaaccceeeeiilllnnooorrsssttuuuuzzzyaszzc',
            'ßs'  => 'sss',
            'Xae' => 'xa',
            'Xoe' => 'xo',
            'Xue' => 'xu',
            '项目' => '项目',
        );

        
        if (var_65 > 50303) {
            $var_25['ß']  = '';
            $var_25['日'] = '';
        }

        var_66 ($var_25 as $var_50 => $var_63) {
            $var_14 = rcube_utils::normalize_string($var_50);
            $var_6->assertSame($var_63, $var_14, "Error normalizing '$var_50'");
        }
    }

    
    var_48 var_67()
    {
        $var_25 = array(
            array('', 'test', false),
            array('test', 'test', true),
            array('test', 'none', false),
            array('test', 'test xyz', false),
            array('test xyz', 'test xyz', true),
            array('this is test', 'test', true),
            
            array('this is test ' . base64_decode('R0lGODlhDwAPAIAAAMDAwAAAACH5BAEAAAAALAAAAAAPAA8AQAINhI+py+0Po5y02otnAQA7'), 'test', true),
            array('this is test ' . base64_decode('R0lGODlhDwAPAIAAAMDAwAAAACH5BAEAAAAALAAAAAAPAA8AQAINhI+py+0Po5y02otnAQA7'), 'none', false),
        );

        foreach ($var_25 as $var_51 => $params) {
            $var_14 = rcube_utils::words_match($params[0], $params[1]);
            $var_6->assertSame($params[2], $var_14, "words_match() at index $var_51");
        }
    }

    
    function var_68()
    {
        if (strtoupper(substr(var_69, 0, 3)) == 'WIN') {
            $var_25 = array(
                '' => false,
                "C:\\" => true,
                'some/path' => false,
            );
        }
        else {
            $var_25 = array(
                '' => false,
                '/path' => true,
                'some/path' => false,
            );
        }

        var_66 ($var_25 as $var_50 => $var_63) {
            $var_14 = rcube_utils::is_absolute_path($var_50);
            $var_6->assertSame($var_63, $var_14);
        }
    }

    
    var_48 var_70()
    {
        $var_6->assertRegexp('/^[a-zA-Z0-9]{15}$/', rcube_utils::random_bytes(15));
        $var_6->assertSame(15, strlen(rcube_utils::random_bytes(15, true)));
        $var_6->assertSame(1, strlen(rcube_utils::random_bytes(1)));
        $var_6->assertSame(0, strlen(rcube_utils::random_bytes(0)));
        $var_6->assertSame(0, strlen(rcube_utils::random_bytes(-1)));
    }

    
    var_48 var_72()
    {

        

        return var_73(
            array('test@vermögensberater', 'test@xn--vermgensberater-ctb'),
            array('test@vermögensberatung', 'test@xn--vermgensberatung-pwb'),
            array('test@グーグル', 'test@xn--qcka1pmc'),
            array('test@谷歌', 'test@xn--flw351e'),
            array('test@中信', 'test@xn--fiq64b'),
            array('test@рф.ru', 'test@xn--p1ai.ru'),
            array('test@δοκιμή.gr', 'test@xn--jxalpdlp.gr'),
            array('test@gwóźdź.pl', 'test@xn--gwd-hna98db.pl'),
            array('рф.ru@рф.ru', 'рф.ru@xn--p1ai.ru'),
            array('vermögensberater', 'xn--vermgensberater-ctb'),
            array('vermögensberatung', 'xn--vermgensberatung-pwb'),
            array('グーグル', 'xn--qcka1pmc'),
            array('谷歌', 'xn--flw351e'),
            array('中信', 'xn--fiq64b'),
            array('рф.ru', 'xn--p1ai.ru'),
            array('δοκιμή.gr', 'xn--jxalpdlp.gr'),
            array('gwóźdź.pl', 'xn--gwd-hna98db.pl'),
            array('fußball.de', 'xn--fuball-cta.de'),
        );
    }

    
    var_48 var_74($var_75, $var_76)
    {
        $var_6->assertEquals(rcube_utils::idn_to_ascii($var_75), $var_76);
    }

    
    var_48 var_77($var_75, $var_76)
    {
        $var_6->assertEquals(rcube_utils::idn_to_utf8($var_76), $var_75);
    }

    
    var_48 var_78()
    {
        $var_6->assertEquals(rcube_utils::idn_to_ascii('H.S'), 'H.S');
        $var_6->assertEquals(rcube_utils::idn_to_ascii('d.-h.lastname'), 'd.-h.lastname');
    }

    
    var_48 var_79()
    {
        return var_73(
            array('%z', 'hostname', 'hostname'),
            array('%z', 'domain.tld', 'domain.tld'),
            array('%z', 'host.domain.tld', 'domain.tld'),
            array('%z', 'host1.host2.domain.tld', 'host2.domain.tld'),
        );
    }

    
    var_48 var_80($var_81, $var_82, $var_14)
    {
        $var_6->assertEquals(rcube_utils::parse_host($var_81, $var_82), $var_14);
    }
}
