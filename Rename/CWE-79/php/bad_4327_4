<?php namespace var_0\var_1;


class class_0 extends var_2
{
    
    protected function fn_0($var_4)
    {
        return new \var_5\var_6\var_7(base_path('tests/test-data/test-file.txt'), $var_4, 'text/plain', 55, null, true);
    }

    
    protected function fn_1($var_9, $var_10 = 0)
    {
        $var_11 = $var_12->fn_0($var_9);
        return $var_12->call('POST', '/attachments/upload', ['uploaded_to' => $var_10], [], ['file' => $var_11], []);
    }

    
    protected function fn_2()
    {
        $var_15 = $var_12->var_16->make(\var_18\var_1\var_19::var_20);
        foreach (var_18\var_1\var_21::all() as $var_11) {
            $var_15->deleteFile($var_11);
        }
    }

    public function fn_3()
    {
        $var_23 = var_18\var_24\var_25::first();
        $var_12->asAdmin();
        $var_27 = $var_12->getAdmin();
        $var_4 = 'upload_test_file.txt';

        $var_29 = [
            'name' => $var_4,
            'uploaded_to'=> $var_23->var_30,
            'extension' => 'txt',
            'order' => 1,
            'created_by' => $var_27->var_30,
            'updated_by' => $var_27->var_30,
        ];

        $var_31 = $var_12->fn_1($var_4, $var_23->var_30);
        $var_31->assertStatus(200);

        $var_33 = var_18\var_1\var_21::query()->orderBy('id', 'desc')->first();
        $var_29['path'] = $var_33->var_36;

        $var_31->assertJson($var_29);
        $var_12->assertDatabaseHas('attachments', $var_29);

        $var_12->fn_2();
    }

    public function fn_4()
    {
        $var_23 = var_18\var_24\var_25::first();
        $var_4 = 'upload_test_file.txt';


        $var_31 = $var_12->asAdmin()->fn_1($var_4, $var_23->var_30);
        $var_31->assertStatus(200);

        $var_33 = var_18\var_1\var_21::query()->orderBy('id', 'desc')->first();
        $var_12->assertStringNotContainsString($var_4, $var_33->var_36);
        $var_12->assertStringEndsWith('.txt', $var_33->var_36);
    }

    public function fn_5()
    {
        $var_23 = var_18\var_24\var_25::first();
        $var_12->asAdmin();
        $var_4 = 'upload_test_file.txt';

        $var_31 = $var_12->fn_1($var_4, $var_23->var_30);
        $var_31->assertStatus(200);
        $var_33 = var_18\var_1\var_21::orderBy('id', 'desc')->take(1)->first();

        $var_42 = $var_12->get($var_23->getUrl());
        $var_42->assertSeeText($var_4);
        $var_42->assertSee($var_33->getUrl());

        $var_47 = $var_12->get($var_33->getUrl());
        $var_47->assertSee('Hi, This is a test file for testing the upload process.');

        $var_12->fn_2();
    }

    public function fn_6()
    {
        $var_23 = var_18\var_24\var_25::first();
        $var_27 = $var_12->getAdmin();
        $var_12->asAdmin();

        $var_48 = $var_12->call('POST', 'attachments/link', [
            'attachment_link_url' => 'https:
            'var_49' => 'var_50 var_21 var_51',
            'attachment_link_uploaded_to' => $var_23->var_30,
        ]);

        $var_52 = [
            'path' => 'https:
            'var_9' => 'var_50 var_21 var_51',
            'uploaded_to' => $var_23->var_30,
            'created_by' => $var_27->var_30,
            'updated_by' => $var_27->var_30,
            'external' => true,
            'order' => 1,
            'extension' => ''
        ];

        $var_48->assertStatus(200);
        $var_12->assertDatabaseHas('attachments', $var_52);
        $var_33 = var_18\var_1\var_21::orderBy('id', 'desc')->take(1)->first();

        $var_42 = $var_12->get($var_23->getUrl());
        $var_42->assertSeeText('Example Attachment Link');
        $var_42->assertSee($var_33->getUrl());

        $var_47 = $var_12->get($var_33->getUrl());
        $var_47->assertRedirect('https:

        $this->deleteUploads();
    }

    public function test_attachment_updating()
    {
        $page = BookStack\Entities\Page::first();
        $this->asAdmin();

        $this->call('var_54', 'attachments/link', [
            'attachment_link_url' => 'https:
            'var_49' => 'var_50 var_21 var_51',
            'attachment_link_uploaded_to' => $var_23->var_30,
        ]);

        $var_55 = var_18\var_1\var_21::first()->var_30;

        $var_56 = $var_12->call('PUT', 'attachments/' . $var_55, [
            'attachment_edit_name' => 'My new attachment name',
            'attachment_edit_url' => 'https:
        ]);

        $expectedData = [
            'var_30' => $var_55,
            'path' => 'https:
            'var_9' => 'var_57 new class_1 var_9',
            'uploaded_to' => $var_23->var_30
        ];

        $var_56->assertStatus(200);
        $var_12->assertDatabaseHas('attachments', $var_52);

        $var_12->fn_2();
    }

    public function fn_7()
    {
        $var_23 = var_18\var_24\var_25::first();
        $var_12->asAdmin();
        $var_4 = 'deletion_test.txt';
        $var_12->fn_1($var_4, $var_23->var_30);

        $var_33 = var_18\var_1\var_21::query()->orderBy('id', 'desc')->first();
        $var_58 = storage_path($var_33->var_36);
        $var_12->assertTrue(file_exists($var_58), 'File at path ' . $var_58 . ' does not exist');

        $var_33 = var_18\var_1\var_21::first();
        $var_12->delete($var_33->getUrl());

        $var_12->assertDatabaseMissing('attachments', [
            'name' => $var_4
        ]);
        $var_12->assertFalse(file_exists($var_58), 'File at path ' . $var_58 . ' was not deleted as expected');

        $var_12->fn_2();
    }

    public function fn_8()
    {
        $var_23 = var_18\var_24\var_25::first();
        $var_12->asAdmin();
        $var_4 = 'deletion_test.txt';
        $var_12->fn_1($var_4, $var_23->var_30);

        $var_33 = var_18\var_1\var_21::query()->orderBy('id', 'desc')->first();
        $var_58 = storage_path($var_33->var_36);

        $var_12->assertTrue(file_exists($var_58), 'File at path ' . $var_58 . ' does not exist');
        $var_12->assertDatabaseHas('attachments', [
            'name' => $var_4
        ]);

        $var_12->call('DELETE', $var_23->getUrl());

        $var_12->assertDatabaseMissing('attachments', [
            'name' => $var_4
        ]);
        $var_12->assertFalse(file_exists($var_58), 'File at path ' . $var_58 . ' was not deleted as expected');

        $var_12->fn_2();
    }

    public function fn_9()
    {
        $var_27 = $var_12->getAdmin();
        $var_63 = $var_12->getViewer();
        $var_23 = var_18\var_24\var_25::first(); 

        $var_12->actingAs($var_27);
        $var_4 = 'permission_test.txt';
        $var_12->fn_1($var_4, $var_23->var_30);
        $var_33 = var_18\var_1\var_21::orderBy('id', 'desc')->take(1)->first();

        $var_23->var_66 = true;
        $var_23->permissions()->delete();
        $var_23->save();
        $var_23->rebuildPermissions();
        $var_23->load('jointPermissions');

        $var_12->actingAs($var_63);
        $var_47 = $var_12->get($var_33->getUrl());
        $var_47->assertStatus(404);
        $var_47->assertSee("Attachment not found");

        $var_12->fn_2();
    }
}
