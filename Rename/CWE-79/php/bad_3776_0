<?php

class var_0 extends var_1 {
	
	public static $var_2 = 'xml';
	
	
	function fn_0($var_3 = 20, $var_4 = "...") {
		$var_5 = trim(strip_tags($var_6->var_5));
		return (strlen($var_5) > $var_3) ? substr($var_5, 0, $var_3) . $var_4 : $var_5;
	}

	
	public function var_7($var_8 = 50, $var_9 = 15, $var_4 = '...') {
		$var_10 = false;

		
		if (class_exists('SimpleXMLElement')) {
			$var_11 = new class_0();
			
			
			set_error_handler(create_function('$no, $str', 'throw new Exception("HTML Parse Error: ".$str);'), var_12);
			
			$var_5 = str_replace('&nbsp;', ' ', $var_6->var_5);
			try { $var_13 = $var_11->loadHTML('<meta content="text/html; charset=utf-8" http-equiv="Content-type"/>' . $var_5); }
			catch (var_15 $var_16) {}
			restore_error_handler();
			
			if ($var_13) {
				$var_17 = simplexml_import_dom($var_11);
				$var_13 = $var_17->var_18('
				if (!empty($res)) $str = strip_tags($res[0]->asXML());
			}
		}
		
		
		if (!$str) {
			
			if (preg_match('{<p(\s[^<>]*var_19)?>(.*[A-Za-z]+.*)</p>}', $this->value, $matches)) $str = $matches[2];
			
			else $str = $this->value;
			
			
			$str = preg_replace('{</?[a-zA-Z]+[^<>]*>}', '', $str); 
			$str = preg_replace('{</|<|>}', '', $str); 
		}
		
		
		$words = preg_split('/\s+/', $str);
		if ($maxWords == -1 || count($words) <= $maxWords) return implode(' ', $words);

		
		for ($i = $maxWords; $i >= $maxWords - $flex && $i >= 0; $i--) {
			if (preg_match('/\.$/', $words[$i]) && !preg_match('/(Dr|Mr|Mrs|Ms|Miss|Sr|Jr|No)\.$/i', $words[$i])) {
				return implode(' ', array_slice($words, 0, $i+1));
			}
		}
		
		
		return implode(' ', array_slice($words, 0, $maxWords)) . $add;
	}
	
	
	function FirstSentence() {
		
		$paragraph = $this->Summary(-1);
		
		
		$words = preg_split('/\s+/', $paragraph);
		foreach ($words as $i => $word) {
			if (preg_match('/\.$/', $word) && !preg_match('/(Dr|Mr|Mrs|Ms|Miss|Sr|Jr|No)\.$/i', $word)) {
				return implode(' ', array_slice($words, 0, $i+1));
			}
		}
		
		
		return $this->Summary();
	}	
	
	public function forTemplate() {
		return ShortcodeParser::get_active()->parse($this->value);
	}
	
	public function hasValue() {
		return parent::hasValue() && $this->value != '<p></p>';
	}
	
	public function scaffoldFormField($title = null, $params = null) {
		return new HtmlEditorField($this->name, $title);
	}
	
	public function scaffoldSearchField($title = null) {
		return new TextField($this->name, $title);
	}

}

?>