<?php




class class_0
{
    
    static $var_0 = array('a', 'abbr', 'acronym', 'address', 'area', 'b',
        'basefont', 'bdo', 'big', 'blockquote', 'br', 'caption', 'center',
        'cite', 'code', 'col', 'colgroup', 'dd', 'del', 'dfn', 'dir', 'div', 'dl',
        'dt', 'em', 'fieldset', 'font', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i',
        'ins', 'label', 'legend', 'li', 'map', 'menu', 'nobr', 'ol', 'p', 'pre', 'q',
        's', 'samp', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'table',
        'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'tt', 'u', 'ul', 'var', 'wbr', 'img',
        'video', 'source',
        
        'button', 'input', 'textarea', 'select', 'option', 'optgroup',
        
        'svg', 'altglyph', 'altglyphdef', 'altglyphitem', 'animate',
        'animatecolor', 'animatetransform', 'circle', 'clippath', 'defs', 'desc',
        'ellipse', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line',
        'lineargradient', 'marker', 'mask', 'mpath', 'path', 'pattern',
        'polygon', 'polyline', 'radialgradient', 'rect', 'set', 'stop', 'switch', 'symbol',
        'text', 'textpath', 'tref', 'tspan', 'use', 'view', 'vkern', 'filter',
         
        'feblend', 'fecolormatrix', 'fecomponenttransfer', 'fecomposite',
        'feconvolvematrix', 'fediffuselighting', 'fedisplacementmap',
        'feflood', 'fefunca', 'fefuncb', 'fefuncg', 'fefuncr', 'fegaussianblur',
        'feimage', 'femerge', 'femergenode', 'femorphology', 'feoffset',
        'fespecularlighting', 'fetile', 'feturbulence',
        
        'math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr',
        'mmuliscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow',
        'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd',
        'mtext', 'mtr', 'munder', 'munderover', 'maligngroup', 'malignmark',
        'mprescripts', 'semantics', 'annotation', 'annotation-xml', 'none',
        'infinity', 'matrix', 'matrixrow', 'ci', 'cn', 'sep', 'apply',
        'plus', 'minus', 'eq', 'power', 'times', 'divide', 'csymbol', 'root',
        'bvar', 'lowlimit', 'uplimit',
    );

    
    static $var_1 = array('script', 'applet', 'embed', 'object', 'style');

    
    static $var_2 = array('name', 'class', 'title', 'alt', 'width', 'height',
        'align', 'nowrap', 'col', 'row', 'id', 'rowspan', 'colspan', 'cellspacing',
        'cellpadding', 'valign', 'bgcolor', 'color', 'border', 'bordercolorlight',
        'bordercolordark', 'face', 'marginwidth', 'marginheight', 'axis', 'border',
        'abbr', 'char', 'charoff', 'clear', 'compact', 'coords', 'vspace', 'hspace',
        'cellborder', 'size', 'lang', 'dir', 'usemap', 'shape', 'media',
        'background', 'src', 'poster', 'href', 'headers',
        
        'type', 'rows', 'cols', 'disabled', 'readonly', 'checked', 'multiple', 'value', 'for',
        
        'accent-height', 'accumulate', 'additive', 'alignment-baseline', 'alphabetic',
        'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseprofile',
        'baseline-shift', 'begin', 'bias', 'by', 'clip', 'clip-path', 'clip-rule',
        'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile',
        'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction',
        'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity',
        'fill-rule', 'filter', 'flood-color', 'flood-opacity', 'font-family', 'font-size',
        'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'from',
        'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform',
        'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints',
        'keysplines', 'keytimes', 'lengthadjust', 'letter-spacing', 'kernelmatrix',
        'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid',
        'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits',
        'maskunits', 'max', 'mask', 'mode', 'min', 'numoctaves', 'offset', 'operator',
        'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order',
        'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits',
        'points', 'preservealpha', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount',
        'repeatdur', 'restart', 'rotate', 'scale', 'seed', 'shape-rendering', 'show', 'specularconstant',
        'specularexponent', 'spreadmethod', 'stddeviation', 'stitchtiles', 'stop-color',
        'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap',
        'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width',
        'surfacescale', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration',
        'text-rendering', 'textlength', 'to', 'u1', 'u2', 'unicode', 'values', 'viewbox',
        'visibility', 'vert-adv-y', 'version', 'vert-origin-x', 'vert-origin-y', 'word-spacing',
        'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2',
        'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan',
        
        'accent', 'accentunder', 'bevelled', 'close', 'columnalign', 'columnlines',
        'columnspan', 'denomalign', 'depth', 'display', 'displaystyle', 'encoding', 'fence',
        'frame', 'largeop', 'length', 'linethickness', 'lspace', 'lquote',
        'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize',
        'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign',
        'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel',
        'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator',
        'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset',
        'fontsize', 'fontweight', 'fontstyle', 'fontfamily', 'groupalign', 'edge', 'side',
    );

    
    static $var_3 = array('area', 'base', 'br', 'col', 'command', 'embed', 'hr',
        'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr',
        
        'sep', 'infinity', 'in', 'plus', 'eq', 'power', 'times', 'divide', 'root',
        'maligngroup', 'none', 'mprescripts',
    );

    
    static $var_4 = array('alink', 'background', 'bgcolor', 'link', 'text', 'vlink');

    
    public $var_5 = false;

    
    private $var_6 = array();

    
    private $var_7 = array();

    
    private $var_8 = array();

    
    private $var_9 = array();

    
    private $var_10 = array();

    
    private $var_11 = array();

    
    private $var_12;

    
    private $var_13;

    
    private $var_14 = false;


    
    public function fn_0($var_15 = array())
    {
        $var_16->var_8   = array_flip((array)$var_15['html_elements']) + array_flip(self::$var_0);
        $var_16->var_11    = array_flip((array)$var_15['html_attribs']) + array_flip(self::$var_2);
        $var_16->var_9 = array_flip((array)$var_15['ignore_elements']) + array_flip(self::$var_1);
        $var_16->var_10   = array_flip((array)$var_15['void_elements']) + array_flip(self::$var_3);
        $var_16->var_12      = is_string($var_15['css_prefix']) && strlen($var_15['css_prefix']) ? $var_15['css_prefix'] : null;

        unset($var_15['html_elements'], $var_15['html_attribs'], $var_15['ignore_elements'], $var_15['void_elements'], $var_15['css_prefix']);

        $var_16->var_6 = $var_15 + array('show_washed' => true, 'allow_remote' => false, 'cid_map' => array());
    }

    
    public function fn_1($var_17, $var_18)
    {
        $var_16->var_7[$var_17] = $var_18;
    }

    
    private function fn_2($var_20)
    {
        $var_21 = array();

        
        $var_20 = preg_replace('/[\n\r\s\t]+/', ' ', $var_20);

        
        $var_20 = rcube_utils::xss_entity_decode($var_20);

        foreach (explode(';', $var_20) as $var_22) {
            if (preg_match('/^\s*([a-z\\\-]+)\s*:\s*(.*)\s*$/i', $var_22, $var_23)) {
                $var_24 = $var_23[1];
                $var_25   = $var_23[2];
                $var_26 = '';

                foreach ($var_16->fn_3($var_25) as $var_28) {
                    if (preg_match('/^url\(/i', $var_28)) {
                        if (preg_match('/^url\(\s*[\'"]?([^\'"\)]*)[\'"]?\s*\)/iu', $var_28, $var_23)) {
                            if ($var_29 = $var_16->fn_4($var_23[1])) {
                                $var_26 .= ' url(' . htmlspecialchars($var_29, var_31, $var_16->var_6['charset']) . ')';
                            }
                        }
                    }
                    else if (!preg_match('/^(behavior|expression)/i', $var_28)) {
                        
                        if (!strcasecmp($var_24, 'position') && !strcasecmp($var_28, 'fixed')) {
                            $var_28 = 'absolute';
                        }

                        
                        $var_26 .= ' ' . $var_28;

                        
                        if (preg_match('/^(left|right|top|bottom|width|height)/i', $var_24)
                            && preg_match('/^[0-9]+$/', $var_28)
                        ) {
                            $var_26 .= 'px';
                        }
                    }
                }

                if (isset($var_26[0])) {
                    $var_21[] = $var_24 . ':' . $var_26;
                }
            }
        }

        return implode('; ', $var_21);
    }

    
    private function fn_5($var_33)
    {
        $var_21 = '';
        $var_34 = array();
        $var_35 = array();

        if ($var_33->var_36 == 'body') {
            $var_35 = self::$var_4;
        }

        foreach ($var_33->var_37 as $var_38 => $var_39) {
            $var_40   = strtolower($var_38);
            $var_26 = $var_39->var_41;

            if ($var_40 == 'style' && ($var_20 = $var_16->fn_2($var_26))) {
                
                $var_21 .= ' style="' . str_replace('"', '&quot;', $var_20) . '"';
            }
            else if (isset($var_16->var_11[$var_40]) || in_array($var_40, $var_35)) {
                $var_26 = trim($var_26);
                $var_42   = null;

                
                if ($var_40 == 'to' || $var_40 == 'from') {
                    $var_40 = strtolower($var_33->getAttribute('attributeName'));
                    if ($var_40 && !isset($var_16->var_11[$var_40])) {
                        $var_40 = null;
                    }
                }

                if ($var_16->fn_6($var_33->var_36, $var_40)) {
                    $var_42 = $var_16->fn_4($var_26, true);
                }
                else if ($var_16->fn_7($var_33->var_36, $var_40)) {
                    if (!preg_match('!^(javascript|vbscript|data:)!i', $var_26)
                        && preg_match('!^([a-z][a-z0-9.+-]+:|
                    ) {
                        $out = $value;
                    }
                }
                else if ($this->is_funciri_attribute($node->nodeName, $key)) {
                    if (preg_match('/^[var_46-var_47:]*var_29\(/var_48', $var_28)) {
                        if (preg_match('/^([a-z:]*url)\(\s*[\'"]?([^\'"\)]*)[\'"]?\s*\)/iu', $var_26, $var_23)) {
                            if ($var_29 = $var_16->fn_4($var_23[2])) {
                                $var_21 .= ' ' . $var_39->var_36 . '="' . $var_23[1]
                                    . '(' . htmlspecialchars($var_29, var_31, $var_16->var_6['charset']) . ')'
                                    . substr($var_28, strlen($var_23[0])) . '"';
                                continue;
                            }
                        }
                        else {
                            $var_42 = $var_26;
                        }
                    }
                    else {
                        $var_42 = $var_26;
                    }
                }
                else if ($var_16->var_12 !== null && in_array($var_40, array('id', 'class', 'for'))) {
                    $var_42 = preg_replace('/(\S+)/', $var_16->var_12 . '\1', $var_26);
                }
                else if ($var_40) {
                   $var_42 = $var_26;
                }

                if ($var_42 !== null && $var_42 !== '') {
                    $var_21 .= ' ' . $var_39->var_36 . '="' . htmlspecialchars($var_42, var_31 | var_49, $var_16->var_6['charset']) . '"';
                }
                else if ($var_26) {
                    $var_34[] = htmlspecialchars($var_39->var_36, var_31, $var_16->var_6['charset']);
                }
            }
            else {
                $var_34[] = htmlspecialchars($var_39->var_36, var_31, $var_16->var_6['charset']);
            }
        }

        if (!empty($var_34) && $var_16->var_6['show_washed']) {
            $var_21 .= ' x-washed="' . implode(' ', $var_34) . '"';
        }

        return $var_21;
    }

    
    private function fn_4($var_50, $var_51 = false, $var_52 = true)
    {
        if (($var_53 = $var_16->var_6['cid_map'][$var_50])
            || ($var_53 = $var_16->var_6['cid_map'][$var_16->var_6['base_url'].$var_50])
        ) {
            return $var_53;
        }

        
        if ($var_50[0] == '
            return $uri;
        }

        if (preg_match('/^(var_54|var_55|var_56):.+/var_48', $var_50)) {
            if ($var_16->var_6['allow_remote']) {
                return $var_50;
            }

            $var_16->var_5 = true;
            if ($var_52 && $var_51 && $var_16->var_6['blocked_src']) {
                return $var_16->var_6['blocked_src'];
            }
        }
        else if ($var_52 && preg_match('/^data:image.+/i', $var_50)) { 
            return $var_50;
        }
    }

    
    private function fn_7($var_17, $var_39)
    {
        return ($var_17 == 'a' || $var_17 == 'area') && $var_39 == 'href';
    }

    
    private function fn_6($var_17, $var_39)
    {
        return $var_39 == 'background'
            || $var_39 == 'color-profile' 
            || ($var_39 == 'poster' && $var_17 == 'video')
            || ($var_39 == 'src' && preg_match('/^(img|image|source|input|video|audio)$/i', $var_17))
            || ($var_17 == 'image' && $var_39 == 'href'); 
    }

    
    private function fn_8($var_17, $var_39)
    {
        return in_array($var_39, array('fill', 'filter', 'stroke', 'marker-start',
            'marker-end', 'marker-mid', 'clip-path', 'mask', 'cursor'));
    }

    
    private function fn_9($var_33, $var_58 = 20)
    {
        if (!$var_33->hasChildNodes()) {
            return '';
        }

        $var_58++;

        if ($var_16->var_13 > 0 && $var_58 == $var_16->var_13 - 1) {
            
            if (!$var_16->var_60) {
                $var_16->var_60 = true;
                rcube::raise_error(array('code' => 500, 'type' => 'php',
                    'line' => var_61, 'file' => var_62,
                    'message' => "Maximum nesting level exceeded (xdebug.max_nesting_level={$var_16->var_13})"),
                    true, false);
            }

            return '<!-- ignored -->';
        }

        $var_33 = $var_33->var_63;
        $var_64 = '';

        do {
            switch ($var_33->var_65) {
            case var_66: 
                $var_67 = strtolower($var_33->var_36);

                if ($var_67 == 'link') {
                    $var_50 = $var_16->fn_4($var_33->getAttribute('href'), false, false);
                    if (!$var_50) {
                        $var_64 .= '<!-- link ignored -->';
                        break;
                    }

                    $var_33->setAttribute('href', (string) $var_50);
                }

                if ($var_18 = $var_16->var_7[$var_67]) {
                    $var_64 .= call_user_func($var_18, $var_67,
                        $var_16->fn_5($var_33), $var_16->fn_9($var_33, $var_58), $var_16);
                }
                else if (isset($var_16->var_8[$var_67])) {
                    $var_69 = $var_16->fn_9($var_33, $var_58);
                    $var_64 .= '<' . $var_33->var_36;

                    if ($var_67 == 'svg') {
                        $var_70 = new class_1($var_33->var_71);
                        foreach ($var_70->query('namespace::*') as $var_73) {
                            if ($var_73->var_36 != 'xmlns:xml') {
                                $var_64 .= sprintf(' %s="%s"',
                                    $var_73->var_36,
                                    htmlspecialchars($var_73->var_41, var_31, $var_16->var_6['charset'])
                                );
                            }
                        }
                    }
                    else if ($var_67 == 'textarea' && strpos($var_69, '<') !== false) {
                        $var_69 = htmlspecialchars($var_69, var_31 | var_49, $var_16->var_6['charset']);
                    }

                    $var_64 .= $var_16->fn_5($var_33);

                    if ($var_69 === '' && ($var_16->var_14 || isset($var_16->var_10[$var_67]))) {
                        $var_64 .= ' />';
                    }
                    else {
                        $var_64 .= '>' . $var_69 . '</' . $var_33->var_36 . '>';
                    }
                }
                else if (isset($var_16->var_9[$var_67])) {
                    $var_64 .= '<!-- ' . htmlspecialchars($var_33->var_36, var_31, $var_16->var_6['charset']) . ' not allowed -->';
                }
                else {
                    $var_64 .= '<!-- ' . htmlspecialchars($var_33->var_36, var_31, $var_16->var_6['charset']) . ' ignored -->';
                    $var_64 .= $var_16->fn_9($var_33, $var_58); 
                }
                break;

            case var_74:
            case var_75:
                $var_64 .= htmlspecialchars($var_33->var_41, var_76 | var_77 | var_49, $var_16->var_6['charset']);
                break;

            case var_78:
                $var_64 .= $var_16->fn_9($var_33, $var_58);
                break;
            }
        }
        while($var_33 = $var_33->var_79);

        return $var_64;
    }

    
    public function fn_10($var_80)
    {
        $var_16->var_5 = false;

        $var_80 = $var_16->fn_11($var_80);

        
        if (preg_match('/<base\s+href=[\'"]*([^\'"]+)/is', $var_80, $var_82)) {
            $var_16->var_6['base_url'] = $var_82[1];
        }
        else {
            $var_16->var_6['base_url'] = '';
        }

        
        $var_16->var_13 = (int) @ini_get('xdebug.max_nesting_level');

        
        $var_16->var_14 = !preg_match('/<(html|head|body)/i', $var_80) && stripos($var_80, '<svg') !== false;
        $var_83       = $var_16->var_14 ? 'loadXML' : 'loadHTML';

        
        if (!$var_16->var_14 && class_exists('Masterminds\HTML5')
            
            
            && substr_count($var_80, '<') < 10000
        ) {
            try {
                $var_84 = new var_85\var_86();
                $var_33  = $var_84->loadHTML($var_16->fn_12($var_80));
            }
            catch (var_89 $var_90) {}
        }

        if (empty($var_33)) {
            
            $var_33 = new class_2('1.0', $var_16->var_6['charset']);
            @$var_33->{$var_83}($var_80, var_91 | var_92 | var_93);
        }

        return $var_16->fn_9($var_33);
    }

    
    public function fn_13($var_94)
    {
        return $var_16->var_6[$var_94];
    }

    
    private function fn_11($var_80)
    {
        $var_80 = trim($var_80);

        
        $var_95 = array(
            
            '/(<\/nobr>)(\s+)(<nobr>)/i',
            
            '/<title[^>]*>[^<]*<\/title>/i',
            
            '/<\!doctype[^>]+>[^<]*/im',
            
            '/^(\0\0\xFE\xFF|\xFF\xFE\0\0|\xFE\xFF|\xFF\xFE|\xEF\xBB\xBF)/',
            
            '/<html\s[^>]+>/i',
            
            '/<\?xml:namespace\s[^>]+>/i',
        );

        $var_96 = array(
            '\\1'.' &nbsp; '.'\\3',
            '',
            '',
            '',
            '<html>',
            '',
        );

        $var_80 = preg_replace($var_95, $var_96, $var_80);

        $var_97 = array('line' => var_61, 'file' => var_62, 'message' => "Could not clean up HTML!");
        if ($var_80 === null && rcube_utils::preg_error($var_97)) {
            return '';
        }

        
        $var_98 = array(
            "\xe2\x80\x98", 
            "\xe2\x80\x99", 
            "\xe2\x80\x9c", 
            "\xe2\x80\x9d", 
            "\xe2\x80\x94", 
            "\xe2\x80\xa6"  
        );

        $var_99 = array(
            "'",
            "'",
            '"',
            '"',
            '&mdash;',
            '...'
        );

        $var_80 = str_replace($var_98, $var_99, $var_80);

        
        

        
        $var_80 = preg_replace_callback('/(<(?!\!)[\/]*)([^\s>]+)([^>]*)/', array($var_16, 'html_tag_callback'), $var_80);

        
        
        
        $var_80 = preg_replace('/<!--[a-zA-Z0-9]+>/', '', $var_80);

        
        self::fix_broken_lists($var_80);

        
        $var_80 = self::fn_15($var_80);

        return $var_80;
    }

    
    public static function fn_14($var_82)
    {
        
        if (substr($var_82[3], -2) == '--') {
            $var_82[0] = '';
            return implode('', $var_82);
        }

        $var_100 = $var_82[2];
        $var_100 = preg_replace(array(
            '/:.*$/',                
            '/[^a-z0-9_\[\]\!?-]/i', 
        ), '', $var_100);

        
        if ($var_82[1] == '</') {
            $var_82[3] = '';
        }

        return $var_82[1] . $var_100 . $var_82[3];
    }

    
    public static function fn_15($var_101)
    {
        
        if (preg_match('!(<base.*href=["\']?)([hftps]{3,5}:
            $replacer = new rcube_base_replacer($regs[2]);
            $body     = $replacer->replace($body);
        }

        return $body;
    }

    
    public static function fix_broken_lists(&$html)
    {
        
        foreach (array('var_102', 'ul') as $var_17) {
            $var_103 = 0;
            while (($var_103 = stripos($var_80, '<' . $var_17, $var_103)) !== false) {
                $var_103++;

                
                if (!in_array($var_80[$var_103+2], array(' ', '>'))) {
                    continue;
                }

                $var_15      = $var_103;
                $var_104  = false;
                $var_105 = 0;

                while (($var_15 = strpos($var_80, '<', $var_15)) !== false) {
                    $var_106 = strtolower(substr($var_80, $var_15, 4));

                    
                    if ($var_106 == '<li>' || $var_106 == '<li ') {
                        $var_104 = true;
                        $var_15 += 4;
                    }
                    
                    else if ($var_106 == '</li' && in_array($var_80[$var_15+4], array(' ', '>'))) {
                        $var_105 = $var_15;
                        $var_104  = false;
                        $var_15 += 4;
                    }
                    
                    else if ($var_106 == '</' . $var_17 && in_array($var_80[$var_15+4], array(' ', '>'))) {
                        break;
                    }
                    
                    else if (!$var_104 && $var_105 && ($var_106 == '<ol>' || $var_106 == '<ol ' || $var_106 == '<ul>' || $var_106 == '<ul ')) {
                        
                        $var_107 = substr($var_106, 1, 2);
                        $var_108    = $var_15;
                        do {
                            $var_109 = stripos($var_80, '<' . $var_107, $var_108+1);
                            $var_108 = stripos($var_80, '</' . $var_107, $var_108+1);
                        }
                        while ($var_109 !== false && $var_108 !== false && $var_108 > $var_109);

                        
                        if ($var_108 === false) {
                            break;
                        }

                        
                        $var_110     = strpos($var_80, '>', $var_108);
                        $var_111     = $var_110 - $var_15 + 1;
                        $var_107 = substr($var_80, $var_15, $var_111);

                        
                        $var_80 = substr_replace($var_80, '', $var_15, $var_111);
                        $var_80 = substr_replace($var_80, $var_107, $var_105, 0);

                        $var_15 = $var_110;
                    }
                    else {
                        $var_15++;
                    }
                }
            }
        }
    }

    
    protected function fn_12($var_80)
    {
        
        
        if (strpos($var_80, '<')) {
            $var_103     = stripos($var_80, '<!DOCTYPE') ?: stripos($var_80, '<html') ?: stripos($var_80, '<body');
            $var_112  = '<div>' . substr($var_80, 0, $var_103) . '</div>';
            $var_80    = substr($var_80, $var_103);
        }

        
        
        if (isset($var_112) || !preg_match('/<(head|body)/i', $var_80)) {
            $var_113 = stripos($var_80, '<body');
            $var_103      = $var_113 !== false ? $var_113 : stripos($var_80, '<html');

            
            if ($var_103 === false) {
                $var_80 = '<html><body>' . $var_112 . $var_80;
            }
            
            else {
                $var_103  = strpos($var_80, '>', $var_103);
                $var_80 = substr_replace($var_80, ($var_113 === false ? '<body>' : '') . $var_112, $var_103 + 1, 0);
            }
        }

        return $var_80;
    }

    
    protected function fn_3($var_20)
    {
        $var_103 = 0;

        
        while (($var_103 = strpos($var_20, '', $var_103+2);

            if ($var_110 === false) {
                $var_20 = substr($var_20, 0, $var_103);
            }
            else {
                $var_20 = substr_replace($var_20, '', $var_103, $var_110 - $var_103 + 2);
            }
        }

        $var_20  = trim($var_20);
        $var_114 = strlen($var_20);
        $var_21 = array();

        
        for ($var_15=$var_48=0; $var_48 < $var_114; $var_48++) {
            if (($var_20[$var_48] == "\"" || $var_20[$var_48] == "'") && $var_20[$var_48-1] != "\\") {
                if ($var_115 == $var_20[$var_48]) {
                    $var_115 = false;
                }
                else if (!$var_115) {
                    $var_115 = $var_20[$var_48];
                }
            }

            if (!$var_115 && $var_20[$var_48] == ' ' && !preg_match('/[,\(]/', $var_20[$var_48-1])) {
                $var_21[] = substr($var_20, $var_15, $var_48 - $var_15);
                $var_15 = $var_48 + 1;
            }
        }

        $var_21[] = (string) substr($var_20, $var_15);

        return $var_21;
    }
}
