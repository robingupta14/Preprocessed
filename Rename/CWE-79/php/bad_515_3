<?php




$var_0 = array(
	1 => __('Delete'),
	2 => __('Disable'),
	3 => __('Enable'),
	4 => __('Discover Now'),
	5 => __('Cancel Discovery')
);


set_default_action();

switch (get_request_var('action')) {
case 'save':
	fn_0();

	break;
case 'actions':
	fn_7();

	break;
case 'edit':
	top_header();
	fn_8();
	bottom_footer();

	break;
default:
	top_header();
	fn_6();
	bottom_footer();

	break;
}



function fn_0() {
	if (isset_request_var('save_component_network')) {
		$var_1 = fn_5($var_2);

		header('Location: automation_networks.php?header=false&action=edit&id=' . (empty($var_1) ? get_nfilter_request_var('id') : $var_1));
	}
}

function fn_1($var_1){
	db_execute_prepared('DELETE FROM automation_networks
		WHERE id = ?',
		array($var_1));

	db_execute_prepared('DELETE FROM automation_devices
		WHERE network_id = ?',
		array($var_1));
}

function fn_2($var_1){
	db_execute_prepared('UPDATE automation_networks
		SET enabled="on"
		WHERE id = ?',
		array($var_1));
}

function fn_3($var_1){
	db_execute_prepared('UPDATE automation_networks
		SET enabled=""
		WHERE id = ?',
		array($var_1));
}

function fn_4($var_1){
	db_execute_prepared('UPDATE IGNORE automation_processes
		SET command="cancel"
		WHERE task="tmaster"
		AND network_id = ?',
		array($var_1));
}

function var_3($var_1, $var_4) {
	global $var_5;

	$var_6   = db_fetch_cell_prepared('SELECT enabled
		FROM automation_networks
		WHERE id = ?',
		array($var_1));

	$var_7 = db_fetch_cell_prepared('SELECT count(*)
		FROM automation_processes
		WHERE network_id = ?',
		array($var_1));

	$var_8 = db_fetch_cell_prepared('SELECT name
		FROM automation_networks
		WHERE id = ?',
		array($var_1));

	$var_9 = db_fetch_cell_prepared('SELECT poller_id
		FROM automation_networks
		WHERE id = ?',
		array($var_1));

	if ($var_6 == 'on') {
		if (!$var_7) {
			if ($var_5['poller_id'] == $var_9) {
				$var_10 = ($var_4) ? ' --debug' : '';
				exec_background(read_config_option('path_php_binary'), '-q ' . read_config_option('path_webroot') . "/poller_automation.php --network=$var_1 --force" . $var_10);
			} else {
				$var_10 = ($var_4) ? '&debug=true' : '';
				$var_11 = db_fetch_cell_prepared('SELECT hostname
					FROM poller
					WHERE id = ?',
					array($var_9));

				$var_12 = get_default_contextoption();
				$var_13       = stream_context_create($var_12);
				$var_14          = @file_get_contents(get_url_type() .':
			}
		} else {
			$_SESSION['var_15'] = "Can Not Restart Discovery for Discovery in Progress for Network '$var_8'";
			raise_message('automation_message');
		}
	} else {
		$_SESSION['automation_message'] = "Can Not Perform Discovery for Disabled Network '$var_8'";
		raise_message('automation_message');
	}

	force_session_data();
}

function fn_5($var_16) {
	if (empty($var_16['network_id'])) {
		$var_23['id']            = form_input_validate($var_16['id'], 'id', '^[0-9]+$', false, 3);

		
		$var_23['name']          = form_input_validate($var_16['name'], 'name', '', false, 3);
		$var_23['poller_id']     = form_input_validate($var_16['poller_id'], 'poller_id', '^[0-9]+$', false, 3);
		$var_23['site_id']       = form_input_validate($var_16['site_id'], 'site_id', '^[0-9]+$', false, 3);
		$var_23['subnet_range']  = form_input_validate($var_16['subnet_range'], 'subnet_range', '', false, 3);
		$var_23['dns_servers']   = form_input_validate($var_16['dns_servers'], 'dns_servers', '', true, 3);

		$var_23['threads']       = form_input_validate($var_16['threads'], 'threads', '^[0-9]+$', false, 3);
		$var_23['run_limit']     = form_input_validate($var_16['run_limit'], 'run_limit', '^[0-9]+$', false, 3);

		$var_23['enabled']              = (isset($var_16['enabled']) ? 'on':'');

		
		$var_23['notification_enabled'] = (isset($var_16['notification_enabled']) ? 'on':'');
		$var_23['notification_email']   = form_input_validate($var_16['notification_email'], 'notification_email', '', true, 3);

		$var_23['notification_fromname']  = form_input_validate($var_16['notification_fromname'], 'notification_fromname', '', true, 3);
		$var_23['notification_fromemail'] = form_input_validate($var_16['notification_fromemail'], 'notification_fromemail', '', true, 3);

		$var_23['enable_netbios']       = (isset($var_16['enable_netbios']) ? 'on':'');
		$var_23['add_to_cacti']         = (isset($var_16['add_to_cacti']) ? 'on':'');
		$var_23['same_sysname']         = (isset($var_16['same_sysname']) ? 'on':'');
		$var_23['rerun_data_queries']   = (isset($var_16['rerun_data_queries']) ? 'on':'');

		
		$var_23['snmp_id']       = form_input_validate($var_16['snmp_id'], 'snmp_id', '^[0-9]+$', false, 3);
		$var_23['ping_method']   = form_input_validate($var_16['ping_method'], 'ping_method', '^[0-9]+$', false, 3);
		$var_23['ping_port']     = form_input_validate($var_16['ping_port'], 'ping_port', '^[0-9]+$', false, 3);
		$var_23['ping_timeout']  = form_input_validate($var_16['ping_timeout'], 'ping_timeout', '^[0-9]+$', false, 3);
		$var_23['ping_retries']  = form_input_validate($var_16['ping_retries'], 'ping_retries', '^[0-9]+$', false, 3);

		
		$var_23['sched_type']    = form_input_validate($var_16['sched_type'], 'sched_type', '^[0-9]+$', false, 3);
		$var_23['start_at']      = form_input_validate($var_16['start_at'], 'start_at', '', false, 3);;

		
		if ($var_16['orig_start_at'] != $var_16['start_at']) {
			$var_23['next_start'] = '0000-00-00';
		}

		if ($var_16['orig_sched_type'] != $var_16['sched_type']) {
			$var_23['next_start'] = '0000-00-00';
		}

		$var_23['recur_every']   = form_input_validate($var_16['recur_every'], 'recur_every', '', true, 3);

		$var_23['day_of_week']   = form_input_validate(isset($var_16['day_of_week']) ? implode(',', $var_16['day_of_week']):'', 'day_of_week', '', true, 3);
		$var_23['month']         = form_input_validate(isset($var_16['month']) ? implode(',', $var_16['month']):'', 'month', '', true, 3);
		$var_23['day_of_month']  = form_input_validate(isset($var_16['day_of_month']) ? implode(',', $var_16['day_of_month']):'', 'day_of_month', '', true, 3);
		$var_23['monthly_week']  = form_input_validate(isset($var_16['monthly_week']) ? implode(',', $var_16['monthly_week']):'', 'monthly_week', '', true, 3);
		$var_23['monthly_day']   = form_input_validate(isset($var_16['monthly_day']) ? implode(',', $var_16['monthly_day']):'', 'monthly_day', '', true, 3);

		
		if ($var_23['sched_type'] == '3') {
			if ($var_23['day_of_week'] == '') {
				$var_23['enabled'] = '';
				$_SESSION['automation_message'] = __('ERROR: You must specify the day of the week.  Disabling Network %s!.', $var_17);
				raise_message('automation_message');
			}
		} elseif ($var_23['sched_type'] == '4') {
			if ($var_23['month'] == '' || $var_23['day_of_month'] == '') {
				$var_23['enabled'] = '';
				$_SESSION['automation_message'] = __('ERROR: You must specify both the Months and Days of Month.  Disabling Network %s!', $var_17);
				raise_message('automation_message');
			}
		} elseif ($var_23['sched_type'] == '5') {
			if ($var_23['month'] == '' || $var_23['monthly_day'] == '' || $var_23['monthly_week'] == '') {
				$var_23['enabled'] = '';
				$_SESSION['automation_message'] = __('ERROR: You must specify the Months, Weeks of Months, and Days of Week.  Disabling Network %s!', $var_17);
				raise_message('automation_message');
			}
		}

		
		$var_18  = true;
		$var_19 = 0;
		$var_20  = explode(',', $var_23['subnet_range']);

		$var_21 = 0;
		if (cacti_sizeof($var_20)) {
			foreach($var_20 as $var_17) {
				$var_22 = automation_calculate_total_ips($var_20, $var_21);
				if ($var_22 !== false) {
					$var_19 += $var_22;
				} else {
					$var_18 = false;
					$_SESSION['automation_message'] = __("ERROR: Network '%s' is Invalid.", $var_17);
					raise_message('automation_message');
					break;
				}
				$var_21++;
			}
		}

		if ($var_18) {
			$var_23['total_ips'] = $var_19;

			$var_1 = 0;
			if (!is_error_message()) {
				$var_1 = sql_save($var_23, 'automation_networks');

				if ($var_1) {
					raise_message(1);
				} else {
					raise_message(2);
				}
			}

			return $var_1;
		}
	}
}



function fn_7() {
	global $var_5, $var_0, $var_24;

	
	get_filter_request_var('drp_action');
	

	
	if (isset_request_var('selected_items')) {
		$var_25 = sanitize_unserialize_selected_items(get_nfilter_request_var('selected_items'));
		if ($var_25 != false) {
			if (get_nfilter_request_var('drp_action') == '1') { 
				foreach($var_25 as $var_26) {
					fn_1($var_26);
				}
			} elseif (get_nfilter_request_var('drp_action') == '3') { 
				foreach($var_25 as $var_26) {
					fn_2($var_26);
				}
			} elseif (get_nfilter_request_var('drp_action') == '2') { 
				foreach($var_25 as $var_26) {
					fn_3($var_26);
				}
			} elseif (get_nfilter_request_var('drp_action') == '4') { 
				$var_4 = isset_request_var('discover_debug');

				foreach($var_25 as $var_26) {
					api_networks_discover($var_26, $var_4);
				}

				sleep(2);
			} elseif (get_nfilter_request_var('drp_action') == '5') { 
				foreach($var_25 as $var_26) {
					fn_4($var_26);
				}
			}
		}

		header('Location: automation_networks.php?header=false');

		var_27;
	}

	
	$var_28 = ''; $var_21 = 0;

	
	foreach ($var_2 as $var_29 => $var_30) {
		if (preg_match('/^chk_([0-9]+)$/', $var_29, $var_31)) {
			
			input_validate_input_number($var_31[1]);
			

			$var_32 = db_fetch_row_prepared('SELECT name FROM automation_networks WHERE id = ?', array($var_31[1]));
			$var_28 .= '<li>' . html_escape($var_32['name']) . '</li>';
			$var_33[$var_21] = $var_31[1];
		}

		$var_21++;
	}

	top_header();

	form_start('automation_networks.php');

	html_start_box($var_0[get_nfilter_request_var('drp_action')], '60%', '', '3', 'center', '');

	if (get_nfilter_request_var('drp_action') == '1') { 
		
	} elseif (get_nfilter_request_var('drp_action') == '3') { 
		
	} elseif (get_nfilter_request_var('drp_action') == '2') { 
		
	} elseif (get_nfilter_request_var('drp_action') == '4') { 
		
	} elseif (get_nfilter_request_var('drp_action') == '5') { 
		
	}

	if (!isset($var_33)) {
		raise_message(40);
		header('Location: automation_networks.php?header=false');
		var_27;
	} else {
		$var_34 = "<input type='submit' class='ui-button ui-corner-all ui-widget' value='" . __esc('Continue') . "' name='save'>";
	}

	

	html_end_box();

	form_end();

	bottom_footer();
}

function fn_8() {
	global $var_5, $var_35;;

	
	get_filter_request_var('id');
	

	$var_36 = array(
		'1' => __('Manual'),
		'2' => __('Daily'),
		'3' => __('Weekly'),
		'4' => __('Monthly'),
		'5' => __('Monthly on Day'));

	if (!isempty_request_var('id')) {
		$var_37 = db_fetch_row_prepared('SELECT * FROM automation_networks WHERE id = ?', array(get_request_var('id')));
		$var_38 = __('Network Discovery Range [edit: %s]', html_escape($var_37['name']));
	} else {
		$var_38 = __('Network Discovery Range [new]');
	}

	
	$var_39 = array(
	'spacer0' => array(
		'method' => 'spacer',
		'friendly_name' => __('General Settings'),
		'collapsible' => 'true'
		),
	'name' => array(
		'method' => 'textbox',
		'friendly_name' => __('Name'),
		'description' => __('Give this Network a meaningful name.'),
		'value' => '|arg1:name|',
		'max_length' => '250',
		'placeholder' => __('New Network Discovery Range')
		),
	'poller_id' => array(
		'method' => 'drop_sql',
		'friendly_name' => __('Data Collector'),
		'description' => __('Choose the Cacti Data Collector/Poller to be used to gather data from this Device.'),
		'value' => '|arg1:poller_id|',
		'default' => read_config_option('default_poller'),
		'sql' => 'SELECT id, name FROM poller ORDER BY name',
		),
	'site_id' => array(
		'method' => 'drop_sql',
		'friendly_name' => __('Associated Site'),
		'description' => __('Choose the Cacti Site that you wish to associate discovered Devices with.'),
		'value' => '|arg1:site_id|',
		'default' => read_config_option('default_site'),
		'sql' => 'SELECT id, name FROM sites ORDER BY name',
		'none_value' => __('None')
		),
	'subnet_range' => array(
		'method' => 'textarea',
		'friendly_name' => __('Subnet Range'),
		'description' => __('Enter valid Network Ranges separated by commas.  You may use an IP address, a Network range such as 192.168.1.0/24 or 192.168.1.0/255.255.255.0, or using wildcards such as 192.168.*.*'),
		'value' => '|arg1:subnet_range|',
		'textarea_rows' => '4',
		'textarea_cols' => '80',
		'max_length' => '1024',
		'placeholder' => '192.168.1.0/24'
		),
	'total_ips' => array(
		'method' => 'other',
		'friendly_name' => __('Total IP Addresses'),
		'description' => __('Total addressable IP Addresses in this Network Range.'),
		'value' => (isset($var_37['total_ips']) ? number_format_i18n($var_37['total_ips']) : 0)
		),
	'dns_servers' => array(
		'method' => 'textbox',
		'friendly_name' => __('Alternate DNS Servers'),
		'description' => __('A space delimited list of alternate DNS Servers to use for DNS resolution. If blank, the poller OS will be used to resolve DNS names.'),
		'value' => '|arg1:dns_servers|',
		'max_length' => '250',
		'placeholder' => __('Enter IPs or FQDNs of DNS Servers')
		),
	'sched_type' => array(
		'method' => 'drop_array',
		'friendly_name' => __('Schedule Type'),
		'description' => __('Define the collection frequency.'),
		'value' => '|arg1:sched_type|',
		'array' => $var_36,
		'default' => 1
		),
	'threads' => array(
		'method' => 'drop_array',
		'friendly_name' => __('Discovery Threads'),
		'description' => __('Define the number of threads to use for discovering this Network Range.'),
		'value' => '|arg1:threads|',
		'array' => array(
			'1'  => __('%d Thread', 1),
			'2'  => __('%d Threads', 2),
			'3'  => __('%d Threads', 3),
			'4'  => __('%d Threads', 4),
			'5'  => __('%d Threads', 5),
			'6'  => __('%d Threads', 6),
			'7'  => __('%d Threads', 7),
			'8'  => __('%d Threads', 8),
			'9'  => __('%d Threads', 9),
			'10' => __('%d Threads', 10),
			'20' => __('%d Threads', 20),
			'50' => __('%d Threads', 50)
			),
		'default' => 1
		),
	'run_limit' => array(
		'method' => 'drop_array',
		'friendly_name' => __('Run Limit'),
		'description' => __('After the selected Run Limit, the discovery process will be terminated.'),
		'value' => '|arg1:run_limit|',
		'array' => array(
			'60'    => __('%d Minute', 1),
			'300'   => __('%d Minutes', 5),
			'600'   => __('%d Minutes', 10),
			'1200'  => __('%d Minutes', 20),
			'1800'  => __('%d Minutes', 30),
			'3600'  => __('%d Hour', 1),
			'7200'  => __('%d Hours', 2),
			'14400' => __('%d Hours', 4),
			'28800' => __('%d Hours', 8),
			),
		'default' => 1200
		),
	'enabled' => array(
		'method' => 'checkbox',
		'friendly_name' => __('Enabled'),
		'description' => __('Enable this Network Range.'),
		'value' => '|arg1:enabled|'
		),
	'enable_netbios' => array(
		'method' => 'checkbox',
		'friendly_name' => __('Enable NetBIOS'),
		'description' => __('Use NetBIOS to attempt to resolve the hostname of up hosts.'),
		'value' => '|arg1:enable_netbios|',
		'default' => ''
		),
	'add_to_cacti' => array(
		'method' => 'checkbox',
		'friendly_name' => __('Automatically Add to Cacti'),
		'description' => __('For any newly discovered Devices that are reachable using SNMP and who match a Device Rule, add them to Cacti.'),
		'value' => '|arg1:add_to_cacti|'
		),
	'same_sysname' => array(
		'method' => 'checkbox',
		'friendly_name' => __('Allow same sysName on different hosts'),
		'description' => __('When discovering devices, allow duplicate sysnames to be added on different hosts'),
		'value' => '|arg1:same_sysname|'
		),
	'rerun_data_queries' => array(
		'method' => 'checkbox',
		'friendly_name' => __('Rerun Data Queries'),
		'description' => __('If a device previously added to Cacti is found, rerun its data queries.'),
		'value' => '|arg1:rerun_data_queries|'
		),
	'spacern' => array(
		'method' => 'spacer',
		'friendly_name' => __('Notification Settings'),
		'collapsible' => 'true'
		),
	'notification_enabled' => array(
		'method' => 'checkbox',
		'friendly_name' => __('Notification Enabled'),
		'description' => __('If checked, when the Automation Network is scanned, a report will be sent to the Notification Email account..'),
		'value' => '|arg1:notification_enabled|',
		'default' => ''
		),
	'notification_email' => array(
		'method' => 'textbox',
		'friendly_name' => __('Notification Email'),
		'description' => __('The Email account to be used to send the Notification Email to.'),
		'value' => '|arg1:notification_email|',
		'max_length' => '250',
		'default' => ''
		),
	'notification_fromname' => array(
		'method' => 'textbox',
		'friendly_name' => __('Notification From Name'),
		'description' => __('The Email account name to be used as the senders name for the Notification Email.  If left blank, Cacti will use the default Automation Notification Name if specified, otherwise, it will use the Cacti system default Email name'),
		'value' => '|arg1:notification_fromname|',
		'max_length' => '32',
		'size' => '30',
		'default' => ''
		),
	'notification_fromemail' => array(
		'method' => 'textbox',
		'friendly_name' => __('Notification From Email Address'),
		'description' => __('The Email Address to be used as the senders Email for the Notification Email.  If left blank, Cacti will use the default Automation Notification Email Address if specified, otherwise, it will use the Cacti system default Email Address'),
		'value' => '|arg1:notification_fromemail|',
		'max_length' => '128',
		'default' => ''
		),
	'spacer2' => array(
		'method' => 'spacer',
		'friendly_name' => __('Discovery Timing'),
		'collapsible' => 'true'
		),
	'start_at' => array(
		'method' => 'textbox',
		'friendly_name' => __('Starting Date/Time'),
		'description' => __('What time will this Network discover item start?'),
		'value' => '|arg1:start_at|',
		'max_length' => '30',
		'default' => date('Y-m-d H:i:s'),
		'size' => 20
		),
	'recur_every' => array(
		'method' => 'drop_array',
		'friendly_name' => __('Rerun Every'),
		'description' => __('Rerun discovery for this Network Range every X.'),
		'value' => '|arg1:recur_every|',
		'default' => '1',
		'array' => array(
			1 => '1',
			2 => '2',
			3 => '3',
			4 => '4',
			5 => '5',
			6 => '6',
			7 => '7'
			),
		),
	'day_of_week' => array(
		'method' => 'drop_multi',
		'friendly_name' => __('Days of Week'),
		'description' => __('What Day(s) of the week will this Network Range be discovered.'),
		'array' => array(
			1 => __('Sunday'),
			2 => __('Monday'),
			3 => __('Tuesday'),
			4 => __('Wednesday'),
			5 => __('Thursday'),
			6 => __('Friday'),
			7 => __('Saturday')
			),
		'value' => '|arg1:day_of_week|',
		'class' => 'day_of_week'
		),
	'month' => array(
		'method' => 'drop_multi',
		'friendly_name' => __('Months of Year'),
		'description' => __('What Months(s) of the Year will this Network Range be discovered.'),
		'array' => array(
			1 => __('January'),
			2 => __('February'),
			3 => __('March'),
			4 => __('April'),
			5 => __('May'),
			6 => __('June'),
			7 => __('July'),
			8 => __('August'),
			9 => __('September'),
			10 => __('October'),
			11 => __('November'),
			12 => __('December')
			),
		'value' => '|arg1:month|',
		'class' => 'month'
		),
	'day_of_month' => array(
		'method' => 'drop_multi',
		'friendly_name' => __('Days of Month'),
		'description' => __('What Day(s) of the Month will this Network Range be discovered.'),
		'array' => array(1 => '1', 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 => __('Last')),
		'value' => '|arg1:day_of_month|',
		'class' => 'days_of_month'
		),
	'monthly_week' => array(
		'method' => 'drop_multi',
		'friendly_name' => __('Week(s) of Month'),
		'description' => __('What Week(s) of the Month will this Network Range be discovered.'),
		'array' => array(
			1 => __('First'),
			2 => __('Second'),
			3 => __('Third'),
			'32' => __('Last')
			),
		'value' => '|arg1:monthly_week|',
		'class' => 'monthly_week'
		),
	'monthly_day' => array(
		'method' => 'drop_multi',
		'friendly_name' => __('Day(s) of Week'),
		'description' => __('What Day(s) of the week will this Network Range be discovered.'),
		'array' => array(
			1 => __('Sunday'),
			2 => __('Monday'),
			3 => __('Tuesday'),
			4 => __('Wednesday'),
			5 => __('Thursday'),
			6 => __('Friday'),
			7 => __('Saturday')
			),
		'value' => '|arg1:monthly_day|',
		'class' => 'monthly_day'
		),
	'spacer1' => array(
		'method' => 'spacer',
		'friendly_name' => __('Reachability Settings'),
		'collapsible' => 'true'
		),
	'snmp_id' => array(
		'method' => 'drop_sql',
		'friendly_name' => __('SNMP Options'),
		'description' => __('Select the SNMP Options to use for discovery of this Network Range.'),
		'value' => '|arg1:snmp_id|',
		'none_value' => __('None'),
		'sql' => 'SELECT id, name FROM automation_snmp ORDER BY name'
		),
	'ping_method' => array(
		'friendly_name' => __('Ping Method'),
		'description' => __('The type of ping packet to send.'),
		'value' => '|arg1:ping_method|',
		'method' => 'drop_array',
		'default' => read_config_option('ping_method'),
		'array' => $var_35
		),
	'ping_port' => array(
		'method' => 'textbox',
		'friendly_name' => __('Ping Port'),
		'value' => '|arg1:ping_port|',
		'description' => __('TCP or UDP port to attempt connection.'),
		'default' => read_config_option('ping_port'),
		'max_length' => 5,
		'size' => 5
		),
	'ping_timeout' => array(
		'friendly_name' => __('Ping Timeout Value'),
		'description' => __('The timeout value to use for host ICMP and UDP pinging.  This host SNMP timeout value applies for SNMP pings.'),
		'method' => 'textbox',
		'value' => '|arg1:ping_timeout|',
		'default' => read_config_option('ping_timeout'),
		'max_length' => 5,
		'size' => 5
		),
	'ping_retries' => array(
		'friendly_name' => __('Ping Retry Count'),
		'description' => __('After an initial failure, the number of ping retries Cacti will attempt before failing.'),
		'method' => 'textbox',
		'value' => '|arg1:ping_retries|',
		'default' => read_config_option('ping_retries'),
		'max_length' => 5,
		'size' => 5
		),
	'orig_start_at' => array(
		'method' => 'hidden',
		'value' => '|arg1:start_at|',
		),
	'orig_sched_type' => array(
		'method' => 'hidden',
		'value' => '|arg1:sched_type|',
		)
	);

	form_start('automation_networks.php', 'form_network');

	html_start_box($var_38, '100%', true, '3', 'center', '');

	draw_edit_form(
		array(
			'config' => array('no_form_tag' => 'true'),
			'fields' => inject_form_variables($var_39, (isset($var_37) ? $var_37 : array()))
		)
	);

	html_end_box(true, true);

	form_hidden_box('save_component_network', '1', '');
	form_hidden_box('id', !isempty_request_var('id') ? get_request_var('id'):0, 0);

	form_save_button('automation_networks.php', 'return');

	?>
	<script type='text/javascript'>
	$(function() {
		$('
			selectedList: 7,
			noneSelectedText: '<?php ?>',
			header: false,
			height: 54,
			multipleRow: true,
			multipleRowWidth: 90,
			minWidth: 450
		});

		$('
			selectedList: 7,
			noneSelectedText: '<?php ?>',
			header: false,
			height: 82,
			multipleRow: true,
			multipleRowWidth: 90,
			minWidth: 400
		});

		$('
			selectedList: 15,
			noneSelectedText: '<?php ?>',
			header: false,
			height: 162,
			multipleRow: true,
			multipleRowWidth: 55,
			minWidth: 400
		});

		$('
			selectedList: 4,
			noneSelectedText: '<?php ?>',
			header: false,
			height: 28,
			multipleRow: true,
			multipleRowWidth: 70,
			minWidth: 300
		});

		$('
			selectedList: 7,
			noneSelectedText: '<?php ?>',
			header: false,
			height: 54,
			multipleRow: true,
			multipleRowWidth: 90,
			minWidth: 450
		});

		$('
			minuteGrid: 10,
			stepMinute: 5,
			timeFormat: 'HH:mm',
			dateFormat: 'yy-mm-dd',
			minDateTime: new Date(<?php ?>)
		});

		$('
			setSchedule();
		});

		setSchedule();

		$('
			setNotification();
		});

		setNotification();

		$('
			setPing();
		});

		setPing();
	});

	function setNotification() {
		if ($('
			$('
			$('
			$('
		} else {
			$('
			$('
			$('
		}
	}

	function setPing() {
		$('
		$('

		switch($('
		case '0':
			$('
			$('
			$('
			break;
		case '1':
			$('
			$('
			$('
			break;
		case '2':
		case '3':
			$('
			$('
			$('
			break;
		}
	}

	function setSchedule() {
		switch($('
		case '1': 
			$('
			$('
			$('
			$('
			$('
			$('
			$('
			$('
			break;
		case '2': 
			$('
			$('
			$('
			$('
			$('
			$('
			$('
			$('
			$('
				var html = $(this).html();
				html = html.replace('<?php ?>', '<?php ?>');
				html = html.replace('<?php ?>', '<?php ?>');
				$(this).html(html);
			});

			break;
		case '3': 
			$('
			$('
			$('
			$('
			$('
			$('
			$('
			$('
			$('
				var html = $(this).html();
				html = html.replace('<?php ?>', '<?php ?>');
				html = html.replace('<?php ?>', '<?php ?>');
				$(this).html(html);
			});

			break;
		case '4': 
			$('
			$('
			$('
			$('
			$('
			$('
			$('
			$('
			break;
		case '5': 
			$('
			$('
			$('
			$('
			$('
			$('
			$('
			$('
			break;
		}
	}
	</script>
	<?php
}

function fn_9(&$var_40, $var_41, $var_42 = true) {
	if (get_request_var('filter') != '') {
		$var_40 = " WHERE (automation_networks.name LIKE '%" . get_request_var('filter') . "%')";
	}

	$var_43 = get_order_string();

	if ($var_42) {
		$var_44 = ' LIMIT ' . ($var_41*(get_request_var('page')-1)) . ',' . $var_41;
	} else {
		$var_44 = '';
	}

	$var_45 = "SELECT automation_networks.*, poller.name AS data_collector
		FROM automation_networks
		LEFT JOIN poller
		ON automation_networks.poller_id=poller.id
		$var_40
		$var_43
		$var_44";

	return db_fetch_assoc($var_45);
}

function fn_6() {
	global $var_0, $var_46, $var_5, $var_47;

	
	$var_48 = array(
		'rows' => array(
			'filter' => var_49,
			'pageset' => true,
			'default' => '-1'
			),
		'page' => array(
			'filter' => var_49,
			'default' => '1'
			),
		'refresh' => array(
			'filter' => var_49,
			'default' => '20'
			),
		'filter' => array(
			'filter' => var_50,
			'pageset' => true,
			'default' => '',
			'options' => array('options' => 'sanitize_search_string')
			),
		'sort_column' => array(
			'filter' => var_50,
			'default' => 'name',
			'options' => array('options' => 'sanitize_search_string')
			),
		'sort_direction' => array(
			'filter' => var_50,
			'default' => 'ASC',
			'options' => array('options' => 'sanitize_search_string')
			)
	);

	validate_store_request_vars($var_48, 'sess_networks');
	

	$var_51['page']    = 'automation_networks.php?header=false';
	$var_51['seconds'] = get_request_var('refresh');
	$var_51['logout']  = 'false';

	set_page_refresh($var_51);

	if (get_request_var('rows') == -1) {
		$var_41 = read_config_option('num_rows_table');
	} elseif (get_request_var('rows') == -2) {
		$var_41 = 99999999;
	} else {
		$var_41 = get_request_var('rows');
	}

	html_start_box(__('Network Filters'), '100%', '', '3', 'center', 'automation_networks.php?action=edit');
	fn_10();
	html_end_box();

	$var_40 = '';

	$var_20 = fn_9($var_40, $var_41);

	$var_52 = db_fetch_cell('SELECT COUNT(*) FROM automation_networks ' . $var_40);

	$var_53 = html_nav_bar('automation_networks.php', var_54, get_request_var('page'), $var_41, $var_52, 14, __('Networks'), 'page', 'main');

	form_start('automation_networks.php', 'chk');

	

	html_start_box('', '100%', '', '3', 'center', '');

	$var_36 = array(
		'1' => __('Manual'),
		'2' => __('Daily'),
		'3' => __('Weekly'),
		'4' => __('Monthly'),
		'5' => __('Monthly on Day')
	);

	$var_55 = array(
		'name'           => array('display' => __('Network Name'), 'align' => 'left', 'sort' => 'ASC'),
		'data_collector' => array('display' => __('Data Collector'), 'align' => 'left', 'sort' => 'DESC'),
		'sched_type'     => array('display' => __('Schedule'), 'align' => 'left', 'sort' => 'DESC'),
		'total_ips'      => array('display' => __('Total IPs'), 'align' => 'right', 'sort' => 'DESC'),
		'nosort1'        => array('display' => __('Status'), 'align' => 'right', 'sort' => 'DESC', 'tip' => __('The Current Status of this Networks Discovery')),
		'nosort2'        => array('display' => __('Progress'), 'align' => 'right', 'sort' => 'DESC', 'tip' => __('Pending/Running/Done')),
		'nosort3'        => array('display' => __('Up/SNMP Hosts'), 'align' => 'right', 'sort' => 'DESC'),
		'threads'        => array('display' => __('Threads'), 'align' => 'right', 'sort' => 'DESC'),
		'last_runtime'   => array('display' => __('Last Runtime'), 'align' => 'right', 'sort' => 'ASC'),
		'nosort4'        => array('display' => __('Next Start'), 'align' => 'right', 'sort' => 'ASC'),
		'last_started'   => array('display' => __('Last Started'), 'align' => 'right', 'sort' => 'ASC'));

	$var_56 = 'Idle';

	html_header_sort_checkbox($var_55, get_request_var('sort_column'), get_request_var('sort_direction'), false);

	if (cacti_sizeof($var_20)) {
		foreach ($var_20 as $var_37) {
			if ($var_37['enabled'] == '') {
				$var_57   = "<span class='disabled'>" . __('Disabled') . "</span>";
				$var_58 = "0/0/0";
				$var_56   = array();
				$var_59['up'] = $var_59['snmp'] = '0';
			} else {
				$var_7 = db_fetch_cell_prepared('SELECT COUNT(*) FROM automation_processes WHERE network_id = ?', array($var_37['id']));

				if ($var_7 > 0) {
					$var_56 = db_fetch_row_prepared('SELECT
						COUNT(*) AS total,
						SUM(CASE WHEN status=0 THEN 1 ELSE 0 END) AS pending,
						SUM(CASE WHEN status=1 THEN 1 ELSE 0 END) AS running,
						SUM(CASE WHEN status=2 THEN 1 ELSE 0 END) AS done
						FROM automation_ips
						WHERE network_id = ?', array($var_37['id']));

					$var_57   = "<span class='running'>" . __('Running') . "</span>";

					if (empty($var_56['total'])) {
						$var_58 = "0/0/0";
					} else {
						$var_58 = $var_56['pending'] . '/' . $var_56['running'] . '/' . $var_56['done'];
					}

					$var_59 = db_fetch_row_prepared("SELECT SUM(up_hosts) AS up, SUM(snmp_hosts) AS snmp
						FROM automation_processes
						WHERE network_id = ?", array($var_37['id']));

					if (empty($var_59['up'])) {
						$var_59['up']   = 0;
						$var_59['snmp'] = 0;
					}
				} else {
					$var_59['up']   = $var_37['up_hosts'];
					$var_59['snmp'] = $var_37['snmp_hosts'];

					$var_57   = "<span class='idle'>" . __('Idle') . "</span>";
					$var_58 = "0/0/0";
				}
			}

			form_alternate_row('line' . $var_37['id'], true);
			form_selectable_cell('<a class="linkEditMain" href="' . html_escape('automation_networks.php?action=edit&id=' . $var_37['id']) . '">' . $var_37['name'] . '</a>', $var_37['id']);
			form_selectable_cell($var_37['data_collector'], $var_37['id']);
			form_selectable_cell($var_36[$var_37['sched_type']], $var_37['id']);
			form_selectable_cell(number_format_i18n($var_37['total_ips']), $var_37['id'], '', 'text-align:right;');
			form_selectable_cell($var_57, $var_37['id'], '', 'text-align:right;');
			form_selectable_cell($var_58, $var_37['id'], '', 'text-align:right;');
			form_selectable_cell(number_format_i18n($var_59['up']) . '/' . number_format_i18n($var_59['snmp']), $var_37['id'], '', 'text-align:right;');
			form_selectable_cell(number_format_i18n($var_37['threads']), $var_37['id'], '', 'text-align:right;');
			form_selectable_cell(round($var_37['last_runtime'],2), $var_37['id'], '', 'text-align:right;');
			form_selectable_cell($var_37['enabled'] == '' || $var_37['sched_type'] == '1' ? __('N/A'):($var_37['next_start'] == '0000-00-00 00:00:00' ? substr($var_37['start_at'],0,16):substr($var_37['next_start'],0,16)), $var_37['id'], '', 'text-align:right;');
			form_selectable_cell($var_37['last_started'] == '0000-00-00 00:00:00' ? 'Never':substr($var_37['last_started'],0,16), $var_37['id'], '', 'text-align:right;');
			form_checkbox_cell($var_37['name'], $var_37['id']);
			form_end_row();
		}
	} else {
		
	}
	html_end_box(false);

	if (cacti_sizeof($var_20)) {
		
		
	}

	
	draw_actions_dropdown($var_0);

	form_end();
}

function fn_10() {
	global $var_47;

	?>
	<tr class='even'>
		<td>
			<form id='networks' action='automation_networks.php'>
			<table class='filterTable'>
				<tr>
					<td>
						<?php ?>
					</td>
					<td>
						<input type='text' class='ui-state-default ui-corner-all' id='filter' size='25' value='<?php ?>'>
					</td>
					<td>
						<?php ?>
					</td>
					<td>
						<select id='rows' onChange='applyFilter()'>
							<option value='-1'<?php if (get_request_var('rows') == '-1') {?> selected<?php }?>><?php ?></option>
							<?php
							if (cacti_sizeof($var_47)) {
								foreach ($var_47 as $var_60 => $var_61) {
									 if (get_request_var('rows') == $var_60) {  } 
								}
							}
							?>
						</select>
					</td>
					<td>
						<?php ?>
					</td>
					<td>
						<select id='refresh' onChange='applyFilter()'>
							<?php
							$var_62 = array(
								10  => __('%d Seconds', 10),
								20  => __('%d Seconds', 20),
								30  => __('%d Seconds', 30),
								45  => __('%d Seconds', 45),
								60  => __('%d Minute', 1),
								120 => __('%d Minutes', 2),
								300 => __('%d Minutes', 5)
							);

							foreach ($var_62 as $var_63 => $var_64) {
								
							}
							?>
						</select>
					</td>
					<td>
						<span>
							<input type='button' class='ui-button ui-corner-all ui-widget' id='go' title='<?php ?>' value='<?php ?>'>
							<input type='button' class='ui-button ui-corner-all ui-widget' id='clear' title='<?php ?>' value='<?php ?>'>
						</span>
					</td>
				</tr>
			</table>
			</form>
			<script type='text/javascript'>
			function applyFilter() {
				strURL  = '?rows=' + $('
				strURL += '&filter=' + $('
				strURL += '&refresh=' + $('
				strURL += '&header=false';

				loadPageNoHeader(strURL);
			}

			function clearFilter() {
				strURL = '?clear=true&header=false';

				loadPageNoHeader(strURL);
			}

			$(function() {
				$('
					applyFilter();
				});

				$('
					clearFilter();
				});

				$('
					event.preventDefault();
					applyFilter();
				});
			});
			</script>
		</td>
	</tr>
	<?php
}

