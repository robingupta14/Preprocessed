<?php






class var_0
{
    private $var_1;
    private $var_2;
    private $var_3;
    private $var_4;
    private $var_5;
    private $var_6;

    public function fn_0($var_1 = true, $var_2 = null, $var_6 = null)
    {
        $var_7->var_1 = $var_1;
        $var_7->var_2 = $var_2 ?: ini_get('default_charset') ?: 'UTF-8';
        $var_7->var_6 = $var_6 ?: ini_get('xdebug.file_link_format') ?: get_cfg_var('xdebug.file_link_format');
    }

    
    public static function fn_1($var_1 = true, $var_2 = null, $var_6 = null)
    {
        $var_3 = new class_0($var_1, $var_2, $var_6);

        $var_8 = set_exception_handler(array($var_3, 'handle'));
        if (is_array($var_8) && $var_8[0] instanceof var_9) {
            restore_exception_handler();
            $var_8[0]->setExceptionHandler(array($var_3, 'handle'));
        }

        return $var_3;
    }

    
    public function fn_2(callable $var_3 = null)
    {
        $var_11 = $var_7->var_3;
        $var_7->var_3 = $var_3;

        return $var_11;
    }

    
    public function fn_3($var_12)
    {
        $var_11 = $var_7->var_6;
        $var_7->var_6 = $var_12;

        return $var_11;
    }

    
    public function fn_4(\var_13 $var_14)
    {
        if (null === $var_7->var_3 || $var_14 instanceof var_15) {
            $var_7->fn_5($var_14);

            return;
        }

        $var_5 = $var_7->var_5 = 0;

        ob_start(function ($var_17) {
            $var_7->var_4 = $var_17;

            return '';
        });

        $var_7->fn_5($var_14);
        while (null === $var_7->var_4 && ob_end_flush()) {
            
        }
        if (isset($var_7->var_4[0])) {
            ob_start(function ($var_17) {
                if ($var_7->var_5) {
                    
                    $var_18 = substr_replace($var_17, '', 0, $var_7->var_5);
                    if (isset($var_18[0])) {
                        $var_17 = $var_18;
                    }
                }

                return $var_17;
            });

            
            $var_5 = ob_get_length();
        }
        $var_7->var_4 = null;

        try {
            call_user_func($var_7->var_3, $var_14);
            $var_7->var_5 = $var_5;
        } catch (\var_13 $var_19) {
            if (!$var_5) {
                
                throw $var_14;
            }
        }
    }

    
    public function fn_5($var_14)
    {
        if (!$var_14 instanceof var_20) {
            $var_14 = var_21\var_22\var_23\var_13\var_20::create($var_14);
        }

        if (!headers_sent()) {
            header(sprintf('HTTP/1.0 %s', $var_14->getStatusCode()));
            foreach ($var_14->getHeaders() as $var_26 => $var_27) {
                header($var_26.': '.$var_27, false);
            }
            header('Content-Type: text/html; charset='.$var_7->var_2);
        }

        
    }

    
    public function fn_6($var_14)
    {
        if (!$var_14 instanceof var_20) {
            $var_14 = var_21\var_22\var_23\var_13\var_20::create($var_14);
        }

        return $var_7->decorate($var_7->fn_7($var_14), $var_7->fn_8($var_14));
    }

    
    public function fn_7(var_20 $var_14)
    {
        switch ($var_14->getStatusCode()) {
            case 404:
                $var_31 = 'Sorry, the page you are looking for could not be found.';
                break;
            default:
                $var_31 = 'Whoops, looks like something went wrong.';
        }

        $var_32 = '';
        if ($var_7->var_1) {
            try {
                $var_33 = count($var_14->getAllPrevious());
                $var_35 = $var_33 + 1;
                foreach ($var_14->toArray() as $var_37 => $var_19) {
                    $var_38 = $var_33 - $var_37 + 1;
                    $var_39 = $var_7->formatClass($var_19['class']);
                    $var_41 = nl2br($var_7->escapeHtml($var_19['message']));
                    $var_32 .= sprintf(<<<'EOF'
                        <h2 class="block_exception clear_fix">
                            <span class="exception_counter">%d/%d</span>
                            <span class="exception_title">%s%s:</span>
                            <span class="exception_message">%s</span>
                        </h2>
                        <div class="block">
                            <ol class="traces list_exception">

EOF
                        , $var_38, $var_35, $var_39, $var_7->formatPath($var_19['trace'][0]['file'], $var_19['trace'][0]['line']), $var_41);
                    foreach ($var_19['trace'] as $var_44) {
                        $var_32 .= '       <li>';
                        if ($var_44['function']) {
                            $var_32 .= sprintf('at %s%s%s(%s)', $var_7->formatClass($var_44['class']), $var_44['type'], $var_44['function'], $var_7->formatArgs($var_44['args']));
                        }
                        if (isset($var_44['file']) && isset($var_44['line'])) {
                            $var_32 .= $var_7->formatPath($var_44['file'], $var_44['line']);
                        }
                        $var_32 .= "</li>\n";
                    }

                    $var_32 .= "    </ol>\n</div>\n";
                }
            } catch (\var_13 $var_19) {
                
                if ($var_7->var_1) {
                    $var_31 = sprintf('Exception thrown when handling an exception (%s: %s)', get_class($var_19), $var_7->escapeHtml($var_19->getMessage()));
                } else {
                    $var_31 = 'Whoops, looks like something went wrong.';
                }
            }
        }

        return <<<EOF
            <div id="sf-resetcontent" class="sf-reset">
                <h1>$var_31</h1>
                $var_32
            </div>
EOF;
    }

    
    public function fn_8(var_20 $var_14)
    {
        return <<<'EOF'
            .sf-reset { font: 11px Verdana, Arial, sans-serif; color: 
            .sf-reset .clear { clear:both; height:0; font-size:0; line-height:0; }
            .sf-reset .clear_fix:after { display:block; height:0; clear:both; visibility:hidden; }
            .sf-reset .clear_fix { display:inline-block; }
            .sf-reset * html .clear_fix { height:1%; }
            .sf-reset .clear_fix { display:block; }
            .sf-reset, .sf-reset .block { margin: auto }
            .sf-reset abbr { border-bottom: 1px dotted 
            .sf-reset p { font-size:14px; line-height:20px; color:
            .sf-reset strong { font-weight:bold; }
            .sf-reset a { color:
            .sf-reset a img { border:none; }
            .sf-reset a:hover { text-decoration:underline; }
            .sf-reset em { font-style:italic; }
            .sf-reset h1, .sf-reset h2 { font: 20px Georgia, "Times New Roman", Times, serif }
            .sf-reset .exception_counter { background-color: 
            .sf-reset .exception_title { margin-left: 3em; margin-bottom: 0.7em; display: block; }
            .sf-reset .exception_message { margin-left: 3em; display: block; }
            .sf-reset .traces li { font-size:12px; padding: 2px 4px; list-style-type:decimal; margin-left:20px; }
            .sf-reset .block { background-color:
                -webkit-border-bottom-right-radius: 16px;
                -webkit-border-bottom-left-radius: 16px;
                -moz-border-radius-bottomright: 16px;
                -moz-border-radius-bottomleft: 16px;
                border-bottom-right-radius: 16px;
                border-bottom-left-radius: 16px;
                border-bottom:1px solid 
                border-right:1px solid 
                border-left:1px solid 
            }
            .sf-reset .block_exception { background-color:
                -webkit-border-top-left-radius: 16px;
                -webkit-border-top-right-radius: 16px;
                -moz-border-radius-topleft: 16px;
                -moz-border-radius-topright: 16px;
                border-top-left-radius: 16px;
                border-top-right-radius: 16px;
                border-top:1px solid 
                border-right:1px solid 
                border-left:1px solid 
                overflow: hidden;
                word-wrap: break-word;
            }
            .sf-reset a { background:none; color:
            .sf-reset a:hover { background:none; color:
            .sf-reset ol { padding: 10px 0; }
            .sf-reset h1 { background-color:
                -webkit-border-radius: 10px;
                -moz-border-radius: 10px;
                border-radius: 10px;
                border: 1px solid 
            }
EOF;
    }

    private function var_28($var_32, $var_47)
    {
        return <<<EOF
<!DOCTYPE html>
<html>
    <head>
        <meta charset="{$var_7->var_2}" />
        <meta name="robots" content="noindex,nofollow" />
        <style>
            
    private function formatArgs(array $var_48)
    {
        $var_49 = array();
        foreach ($var_48 as $var_50 => $var_51) {
            if ('object' === $var_51[0]) {
                $var_52 = sprintf('<em>object</em>(%s)', $var_7->var_40($var_51[1]));
            } elseif ('array' === $var_51[0]) {
                $var_52 = sprintf('<em>array</em>(%s)', is_array($var_51[1]) ? $var_7->var_45($var_51[1]) : $var_51[1]);
            } elseif ('string' === $var_51[0]) {
                $var_52 = sprintf("'%s'", $var_7->var_42($var_51[1]));
            } elseif ('null' === $var_51[0]) {
                $var_52 = '<em>null</em>';
            } elseif ('boolean' === $var_51[0]) {
                $var_52 = '<em>'.strtolower(var_export($var_51[1], true)).'</em>';
            } elseif ('resource' === $var_51[0]) {
                $var_52 = '<em>resource</em>';
            } else {
                $var_52 = str_replace("\n", '', var_export($var_7->var_42((string) $var_51[1]), true));
            }

            $var_49[] = is_int($var_50) ? $var_52 : sprintf("'%s' => %s", $var_7->var_42($var_50), $var_52);
        }

        return implode(', ', $var_49);
    }

    
    private function escapeHtml($var_53)
    {
        return htmlspecialchars($var_53, ENT_QUOTES | ENT_SUBSTITUTE, $var_7->var_2);
    }
}
