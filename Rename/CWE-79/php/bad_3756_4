<?php





class class_0 implements var_0
{
    
    protected $var_1;

    
    protected $var_2;

    
    protected $var_3;

    
    protected $var_4 = self::var_5;

    
    public function fn_0($var_6 = array())
    {
        if ($var_6 instanceof var_7) {
            $var_6 = var_8\var_9\var_10::iteratorToArray($var_6);
        }

        if (!is_array($var_6)) {
            $var_11 = func_get_args();

            $var_6 = array(
                'rootElement' => array_shift($var_11)
            );

            if (count($var_11)) {
                $var_6['elementMap'] = array_shift($var_11);
            }

            if (count($var_11)) {
                $var_6['encoding'] = array_shift($var_11);
            }

            if (count($var_11)) {
                $var_6['dateTimeFormat'] = array_shift($var_11);
            }
        }

        if (!array_key_exists('rootElement', $var_6)) {
            $var_6['rootElement'] = 'logEntry';
        }

        if (!array_key_exists('encoding', $var_6)) {
            $var_6['encoding'] = 'UTF-8';
        }

        $var_12->var_1 = $var_6['rootElement'];
        $var_12->fn_1($var_6['encoding']);

        if (array_key_exists('elementMap', $var_6)) {
            $var_12->var_2  = $var_6['elementMap'];
        }

        if (array_key_exists('dateTimeFormat', $var_6)) {
            $var_12->fn_2($var_6['dateTimeFormat']);
        }
    }

    
    public function fn_3()
    {
        return $var_12->var_3;
    }

    
    public function fn_1($var_16)
    {
        $var_12->var_3 = (string) $var_16;
        return $var_12;
    }

    
    public function fn_4($var_18)
    {
        if (isset($var_18['timestamp']) && $var_18['timestamp'] instanceof var_19) {
            $var_18['timestamp'] = $var_18['timestamp']->fn_4($var_12->fn_5());
        }

        if ($var_12->var_2 === null) {
            $var_21 = $var_18;
        } else {
            $var_21 = array();
            foreach ($var_12->var_2 as $var_22 => $var_23) {
                $var_21[$var_22] = $var_18[$var_23];
            }
        }

        $var_24 = $var_12->fn_3();
        $var_25 = new class_1('1.0', $var_24);
        $var_26 = $var_25->appendChild(new class_2($var_12->var_1));

        foreach ($var_21 as $var_28 => $var_16) {
            if (empty($var_16)
                || is_scalar($var_16)
                || (is_object($var_16) && method_exists($var_16,'__toString'))
            ) {
                if ($var_28 == "message") {
                    $var_16 = htmlspecialchars($var_16, var_29, $var_24);
                } elseif ($var_28 == "extra" && empty($var_16)) {
                    continue;
                }
                $var_26->appendChild(new class_2($var_28, (string)$var_16));
            }
        }

        $var_30 = $var_25->saveXML();
        $var_30 = preg_replace('/<\?xml version="1.0"( encoding="[^\"]*")?\?>\n/u', '', $var_30);

        return $var_30 . var_32;
    }

    
    public function fn_5()
    {
        return $var_12->var_4;
    }

    
    public function fn_2($var_4)
    {
        $var_12->var_4 = (string) $var_4;
        return $var_12;
    }
}
