<?php






class class_0 extends \var_0\var_1 {

	
	private $var_2 = 'gallery';

	
	public function fn_0() {
		$var_3 = 'An error occurred. Request ID: 1234';
		$var_4 = new class_1($var_3);
		$var_5 = var_6\var_7\var_8::var_9;

		$var_10 = 'An error occurred. Request ID: 1234';
		$var_11 = new class_2($var_10);
		$var_12 = var_6\var_7\var_8::var_9;

		$var_13 = 'Forbidden in service';
		$var_14 = new class_3($var_13);
		$var_16 = var_6\var_7\var_8::var_17;

		$var_18 = 'An error occurred. Request ID: 1234';
		$var_19 = new class_4($var_18);
		$var_20 = var_6\var_7\var_8::var_21;

		$var_22 = 'An error occurred. Request ID: 1234';
		$var_23 = new \var_24($var_22);
		$var_25 = var_6\var_7\var_8::var_21;

		return [
			[$var_4, $var_3, $var_5],
			[$var_11, $var_10, $var_12],
			[$var_14, $var_13, $var_16],
			[$var_19, $var_18, $var_20],
			[$var_23, $var_22, $var_25]
		];
	}

	
	public function fn_1($var_26, $var_27, $var_28) {
		$var_29 = $var_30->createMock(var_6\var_32::var_33);
		$var_34 = $var_30->createMock(var_6\var_35::var_33);

		if($var_26 instanceof var_15) {
			$var_36 = 0;
			$var_27 = $var_27 . ' (' . $var_28 . ')';
		} else {
			$var_36 = 1;
		}

		$var_34
			->expects($var_30->exactly($var_36))
			->method('logException')
			->with($var_26, ['app' => 'gallery']);
		$var_29
			->expects($var_30->exactly($var_36))
			->method('getId')
			->willReturn('1234');

		
		$var_42 = $var_30->getMockForTrait(var_44::var_33);
		
		$var_45 = $var_42->jsonError($var_26, $var_29, $var_34);

		$var_30->assertSame(
			['message' => $var_27, 'success' => false], $var_45->getData()
		);
		$var_30->assertEquals($var_28, $var_45->getStatus());
	}

	
	public function fn_2($var_26, $var_27, $var_28) {
		$var_51 = $var_30->fn_3();
		$var_53 = '/index.php/app/error';
		$var_30->fn_4($var_51, $var_28, $var_53);

		$var_42 = $var_30->getMockForTrait('\OCA\Gallery\Controller\HttpError');

		
		$var_45 = $var_42->htmlError($var_51, $var_30->var_2, $var_26);
		$var_30->assertEquals($var_53, $var_45->getRedirectURL());
		$var_30->assertEquals(var_6\var_7\var_8::var_57, $var_45->getStatus());
		$var_30->assertEquals($var_27, $var_45->getCookies()['galleryErrorMessage']['value']);
	}

	private function fn_3() {
		return $var_30->getMockBuilder('\OCP\IURLGenerator')
					->disableOriginalConstructor()
					->getMock();
	}

	
	private function fn_4($var_51, $var_61, $var_62) {
		$var_51->expects($var_30->once())
					 ->method('linkToRoute')
					 ->with($var_30->var_2 . '.page.error_page', ['code' => $var_61])
					 ->willReturn($var_62);
	}

}
