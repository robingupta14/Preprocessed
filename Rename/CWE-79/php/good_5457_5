<?php







class class_0 extends \var_0\var_1 {

	
	protected $var_2 = 'gallery';
	
	protected $var_3;
	
	protected $var_4;
	
	protected $var_5;
	
	protected $var_6;
	
	protected $var_7;
	
	private $var_8 = [
		'image/png',
		'image/jpeg',
		'image/gif',
		'image/x-xbitmap',
		'image/bmp',
		'image/tiff',
		'image/x-dcraw',
		'application/x-photoshop',
		'application/illustrator',
		'application/postscript',
	];

	
	public function fn_0() {
		parent::fn_0();

		$var_9->var_3 = $var_9->getMockBuilder('\OCP\IRequest')
							  ->disableOriginalConstructor()
							  ->getMock();
		$var_9->var_5 = $var_9->getMockBuilder('\OCA\Gallery\Service\ConfigService')
									->disableOriginalConstructor()
									->getMock();
		$var_9->var_6 = $var_9->getMockBuilder('\OCA\Gallery\Service\PreviewService')
									 ->disableOriginalConstructor()
									 ->getMock();
		$var_9->var_7 = $var_9->getMockBuilder('\OCP\ILogger')
							 ->disableOriginalConstructor()
							 ->getMock();
		$var_9->var_4 = new class_1(
			$var_9->var_2,
			$var_9->var_3,
			$var_9->var_5,
			$var_9->var_7
		);
	}

	
	public function fn_1() {
		$var_13 = [];

		$var_14 = [
			'external_shares',
			'background_colour_toggle',
		];

		$var_15 = array_merge(
			$var_14,
			[
				'native_svg'
			]
		);

		$var_16 = array_merge(
			$var_9->var_8,
			[
				'application/font-sfnt',
				'application/x-font',
			]
		);

		$var_17 = array_merge(
			$var_9->var_8,
			[
				'image/svg+xml',
			]
		);

		$var_18 = array_merge(
			$var_16,
			[
				'image/svg+xml',
			]
		);

		return [
			[$var_13, $var_9->var_8, false, false],
			[$var_13, $var_16, false, true],
			[$var_14, $var_9->var_8, false, false],
			[$var_14, $var_16, false, true],
			[$var_15, $var_17, true, false],
			[$var_15, $var_18, true, true],
		];
	}

	
	public function fn_2($var_14, $var_19, $var_20, $var_21) {
		$var_9->fn_3($var_14);
		$var_9->fn_4($var_21, $var_20, $var_19);

		$var_24 = $var_9->var_4->get($var_21);

		$var_9->assertEquals(['features' => $var_14, 'mediatypes' => $var_19], $var_24);
	}

	
	public function fn_5() {
		$var_14 = $var_9->fn_6();
		$var_21 = true;
		$var_20 = false;
		$var_9->fn_4($var_21, $var_20, $var_9->var_8);

		$var_24 = $var_9->var_4->get($var_21);

		$var_9->assertEquals(
			['features' => $var_14, 'mediatypes' => $var_9->var_8], $var_24
		);
	}

	public function fn_7() {
		$var_21 = true;
		$var_28 = 'AÃ¯e!';
		$var_9->var_5->expects($var_9->any())
							->method('getFeaturesList')
							->willThrowException(new class_2($var_28));
		$var_9->var_3
			->expects($var_9->once())
			->method('getId')
			->willReturn('1234');
		$var_35 = [
			'message' => 'An error occurred. Request ID: 1234',
			'success' => false
		];
		
		$var_24 = $var_9->var_4->get($var_21);

		$var_9->assertEquals($var_35, $var_24->getData());
	}

	
	private function fn_3($var_14) {
		$var_9->var_5->expects($var_9->any())
							->method('getFeaturesList')
							->willReturn($var_14);
	}

	
	private function fn_4($var_21, $var_20, $var_19) {
		$var_9->var_5->expects($var_9->any())
							 ->method('getSupportedMediaTypes')
							 ->with(
								 $var_9->equalTo($var_21),
								 $var_9->equalTo($var_20)
							 )
							 ->willReturn($var_19);
	}

	
	private function fn_6() {
		$var_39 = new class_2('Config corrupt');
		$var_35 = $var_39->getMessage() . "</br></br>Config location: /user1";
		$var_14 = ['error' => ['message' => $var_35]];

		$var_9->fn_3($var_14);

		return $var_14;
	}

}
