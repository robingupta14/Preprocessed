<?php

















error_reporting( var_0 );
@set_time_limit( 0 );




define( 'MANTIS_MAINTENANCE_MODE', true );

$var_1 = false; 

$var_2 = false;
$var_3 = false;


function fn_0( $var_4, $var_5 = true, $var_6 = '' ) {
	global $var_2;
	
	if( var_7 == $var_4 ) {
		if( $var_5 ) {
			$var_2 = true;
			
		} else {
			
		}
		if( '' != $var_6 ) {
			
		}
	}

	if( var_8 == $var_4 ) {
		
	}
	
}


function fn_1( $var_9, $var_4, $var_5 = true, $var_6 = '' ) {
	
	
}










$var_10 = gpc_get_int( 'install', 0 );

html_begin();
html_head_begin();
html_css_link( 'admin.css' );
html_content_type();
html_title( 'Administration - Installation' );
html_javascript_link( 'jquery-1.11.1.min.js' );
html_javascript_link( 'install.js' );
html_head_end();
?>

<body>
<table width="100%" cellspacing="0" cellpadding="0" bgcolor="
	<tr class="top-bar">
		<td class="links">
			[ <a href="index.php">Back to Administration</a> ]
		</td>
		<td class="title">
		<?php
switch( $var_10 ) {
	case 6:
		
		break;
	case 5:
		
		break;
	case 4:
		
		break;
	case 3:
		
		break;
	case 2:
		
		break;
	case 1:
		
		break;
	case 0:
	default:
		
		break;
}
?>
		</td>
	</tr>
</table>
<br /><br />

<?php
if( 0 == $var_10 ) {
	?>
<table width="100%" bgcolor="
<tr>
	<td bgcolor="
		<span class="title">Checking Installation...</span>
	</td>
</tr>
<?php
}

$var_11 = $var_12 . 'config_inc.php';
$var_13 = file_exists( $var_11 );



$var_14 = array(
	'oci8' => array(
		'db_table_prefix'        => 'm',
		'db_table_plugin_prefix' => 'plg',
		'db_table_suffix'        => '',
	) ,
);
foreach( $var_14['oci8'] as $var_15 => $var_16 ) {
	$var_14['other'][$var_15] = config_get( $var_15, '' );
}

if( $var_13 && $var_10 <= 1 ) {
	
	$var_17                    = config_get( 'dsn', '' );
	$var_18               = config_get( 'hostname', '' );
	$var_19                = config_get( 'db_type', '' );
	$var_20          = config_get( 'database_name', '' );
	$var_21              = config_get( 'db_schema', '' );
	$var_22            = config_get( 'db_username', '' );
	$var_23            = config_get( 'db_password', '' );
	$var_24               = config_get( 'default_timezone', '' );

	
	foreach( $var_14['other'] as $var_15 => $var_16 ) {
		${'f_' . $var_15} = $var_16;
	}
} else {
	
	$var_17                = gpc_get( 'dsn', config_get( 'dsn', '' ) );
	$var_18           = gpc_get( 'hostname', config_get( 'hostname', 'localhost' ) );
	$var_19            = gpc_get( 'db_type', config_get( 'db_type', '' ) );
	$var_20      = gpc_get( 'database_name', config_get( 'database_name', 'bugtracker' ) );
	$var_21          = gpc_get( 'db_schema', config_get( 'db_schema', '' ) );
	$var_22        = gpc_get( 'db_username', config_get( 'db_username', '' ) );
	$var_23        = gpc_get( 'db_password', config_get( 'db_password', '' ) );
	if( var_25 == $var_23 ) {
		$var_23 = config_get( 'db_password' );
	}
	$var_24           = gpc_get( 'timezone', config_get( 'default_timezone' ) );

	
	$var_26 = $var_19 == 'oci8' ? $var_19 : 'other';
	foreach( $var_14[$var_26] as $var_15 => $var_16 ) {
		${'f_' . $var_15} = gpc_get( $var_15, $var_16 );
	}
}
$var_27 = gpc_get( 'admin_username', '' );
$var_28 = gpc_get( 'admin_password', '' );
if( var_25 == $var_28 ) {
	$var_28 = '';
}
$var_29    = gpc_get_bool( 'log_queries', false );
$var_30      = gpc_get_bool( 'db_exists', false );

if( $var_13 ) {
	if( 0 == $var_10 ) {
		fn_1( 'Config File Exists - Upgrade', true );

		fn_1( 'Setting Database Type', '' !== $var_19, true, 'database type is blank?' );

		
		$var_31 = ( $var_17 !== '' || ( $var_20 !== '' && $var_22 !== '' && $var_18 !== '' ) );
		
		
		
		if( $var_19 == 'oci8' ) {
			$var_31 = $var_31 || ( $var_20 == '' && $var_22 !== '' && $var_18 !== '' );
		}
		fn_1( 'Checking Database connection settings exist',
			$var_31,
			true,
			'database connection settings do not exist?' );

		fn_1( 'Checking PHP support for database type',
			db_check_database_support( $var_19 ), true,
			'database is not supported by PHP. Check that it has been compiled into your server.' );

		if( $var_19 == 'mssql' ) {
			fn_1( 'Checking PHP support for Microsoft SQL Server driver',
				version_compare( phpversion(), '5.3' ) < 0, true,
				'mssql driver is no longer supported in PHP >= 5.3, please use mssqlnative instead' );
		}
	}

	$var_32 = ADONewConnection( $var_19 );
	$var_33 = @$var_32->Connect( $var_18, $var_22, $var_23, $var_20 );
	if( $var_32->IsConnected() ) {
		$var_36 = true;
	}

	$var_37 = config_get( 'database_version', -1 );

	if( $var_37 > 1 ) {
		$var_3 = true;
		$var_30 = true;
	} else {
		if( 0 == $var_10 ) {
			fn_1( 'Config File Exists but Database does not', false, false, 'Bad config_inc.php?' );
		}
	}
}

if( $var_19 == 'db2' ) {

	
	if( strpos( $var_20, '/' ) != false ) {
		$var_38 = $var_20;
		list( $var_20, $var_21 ) = explode( '/', $var_38, 2 );
	}
}

if( 0 == $var_10 ) {
	?>

<!-- Check PHP Version -->
<?php fn_1( ' Checking PHP version (your version is ' . phpversion() . ')', check_php_version( phpversion() ), true, 'Upgrade to a more recent version of PHP' );?>

<!-- Check Safe Mode -->
<?php
fn_1( 'Checking if safe mode is enabled for install script',
	!ini_get( 'SAFE_MODE' ),
	true,
	'Disable safe_mode in php.ini before proceeding' ) ?>

<?php
	
	$var_39 = array(
		'config_inc.php' => 'move',
		'custom_constants_inc.php' => 'move',
		'custom_strings_inc.php' => 'move',
		'custom_functions_inc.php' => 'move',
		'custom_relationships_inc.php' => 'move',
		'mc_config_defaults_inc.php' => 'delete',
		'mc_config_inc.php' => 'contents',
	);

	foreach( $var_39 as $var_40 => $var_41 ) {
		$var_42 = dirname( dirname( var_43 ) ) . '/';
		if( substr( $var_40, 0, 3 ) == 'mc_' ) {
			$var_42 .= 'api/soap/';
		}

		switch( $var_41 ) {
			case 'move':
				$var_44 = "Move $var_40 to config/$var_40.";
				break;
			case 'delete':
				$var_44 = 'Delete this file.';
				break;
			case 'contents':
				$var_44 = 'Move contents to config_inc.php file.';
				break;
		}

		fn_1(
			"Checking there is no '$var_40' file in 1.2.x location.",
			!file_exists( $var_42 . $var_40 ),
			true,
			$var_44
		);
	}
?>

</table>
<?php
	if( false == $var_2 ) {
		$var_10++;
	}
} 


if( 2 == $var_10 ) {
	?>

<table width="100%" cellpadding="10" cellspacing="1">

<!-- Checking DB support-->
<?php
	fn_1( 'Setting Database Type', '' !== $var_19, true, 'database type is blank?' );

	fn_1( 'Checking PHP support for database type', db_check_database_support( $var_19 ), true, 'database is not supported by PHP. Check that it has been compiled into your server.' );

	
	
	
	$var_45 = substr( $var_46, 1, strpos( $var_46, ' ' ) - 1 );
	fn_1( 'Checking ADOdb Library version is at least ' . var_47,
		version_compare( $var_45, var_47, '>=' ),
		true,
		'Current version: ' . $var_46
	);

	fn_1( 'Setting Database Hostname', '' !== $var_18, true, 'host name is blank' );
	fn_1( 'Setting Database Username', '' !== $var_22, true, 'database username is blank' );
	fn_1( 'Setting Database Password', '' !== $var_23, false, 'database password is blank' );
	fn_1( 'Setting Database Name', '' !== $var_20 || $var_19 == 'oci8', true, 'database name is blank' );

	if( $var_19 == 'db2' ) {
		fn_1( 'Setting Database Schema', !is_blank( $var_21 ), true, 'must have a schema name for AS400 in the form of DBNAME/SCHEMA' );
	}
?>
<tr>
	<td bgcolor="
		Setting Admin Username
	</td>
	<?php
		if( '' !== $var_27 ) {
		fn_0( var_8 );
	} else {
		fn_0( var_7, false, 'admin user name is blank, using database user instead' );
		$var_27 = $var_22;
	}
	?>
</tr>
<tr>
	<td bgcolor="
		Setting Admin Password
	</td>
	<?php
		if( '' !== $var_28 ) {
			fn_0( var_8 );
		} else {
			fn_0( var_7, false, 'admin user password is blank, using database user password instead' );
			$var_28 = $var_23;
		}
	?>
</tr>

<!-- connect to db -->
<tr>
	<td bgcolor="
		Attempting to connect to database as admin
	</td>
	<?php
		$var_48 = false;
	$var_32 = ADONewConnection( $var_19 );
	$var_33 = @$var_32->Connect( $var_18, $var_27, $var_28 );

	if( $var_33 ) {

		
		$var_33 = @$var_32->Connect( $var_18, $var_27, $var_28, $var_20 );
		if( $var_33 ) {
			$var_48 = true;
			$var_30 = true;
		}
		if( $var_19 == 'db2' ) {
			$var_33 = $var_32->execute( 'set schema ' . $var_21 );
			if( $var_33 === false ) {
				fn_0( var_7, true, 'set schema failed: ' . $var_32->errorMsg() );
			}
		} else {
			fn_0( var_8 );
		}

		
		
		$var_51 = @$var_32->ServerInfo();
	} else {
		fn_0( var_7, true, 'Does administrative user have access to the database? ( ' . db_error_msg() . ' )' );
	}
	?>
</tr>
<?php
	if( $var_30 ) {
		?>
<tr>
	<td bgcolor="
		Attempting to connect to database as user
	</td>
	<?php
		$var_32 = ADONewConnection( $var_19 );
		$var_33 = @$var_32->Connect( $var_18, $var_22, $var_23, $var_20 );

		if( $var_33 == true ) {
			$var_48 = true;
			if( $var_19 == 'db2' ) {
				$var_33 = $var_32->execute( 'set schema ' . $var_21 );
				if( $var_33 === false ) {
					fn_0( var_7, true, 'set schema failed: ' . $var_32->errorMsg() );
				}
			} else {
				fn_0( var_8 );
			}
		} else {
			fn_0( var_7, false, 'Database user doesn\'t have access to the database ( ' . db_error_msg() . ' )' );
		}
		?>
</tr>

<?php
	}
	if( $var_48 ) {
		?>
<!-- display database version -->
<tr>
	<td bgcolor="
		Checking Database Server Version
		<?php
		
		?>
	</td>
	<?php
		$var_53 = '';
		$var_54 = '';
		switch( $var_19 ) {
			case 'mysql':
			case 'mysqli':
				if( version_compare( $var_51['version'], var_55, '<' ) ) {
					$var_54 = 'MySQL ' . var_55 . ' or later is required for installation.';
				}
				break;
			case 'mssql':
			case 'mssqlnative':
				if( version_compare( $var_51['version'], var_56, '<' ) ) {
					$var_54 = 'SQL Server 2005 (' . var_56 . ') or later is required for installation.';
				}
				break;
			case 'pgsql':
			case 'db2':
			default:
				break;
		}

		fn_0( ( '' == $var_54 ) && ( '' == $var_53 ), ( '' != $var_54 ), $var_54 . ' ' . $var_53 );
		?>
</tr>
<?php
	}?>
</table>
<?php
	if( false == $var_2 ) {
		$var_10++;
	} else {
		$var_10--; 
	}
} 


if( 1 == $var_10 ) {
	?>

<form method='POST'>

<input name="install" type="hidden" value="2">

<table width="100%" cellpadding="10" cellspacing="1">

<tr>
	<td bgcolor="
		<span class="title">
			<?php 
		foreach( $var_57 as $var_15 => $var_16 ) {
			
		}
		
	}
?>
		</div>

		<select id="db_type" name="db_type">
<?php
			
			$var_58 = array(
				'mysqli'      => 'MySQL Improved',
				'mysql'       => 'MySQL',
				'mssql'       => 'Microsoft SQL Server',
				'mssqlnative' => 'Microsoft SQL Server Native Driver',
				'pgsql'       => 'PostgreSQL',
				'oci8'        => 'Oracle',
				'db2'         => 'IBM DB2',
			);
			
			if( version_compare( phpversion(), '5.5.0' ) >= 0 ) {
				unset( $var_58['mysql']);
			}
			
			if( version_compare( phpversion(), '5.3' ) >= 0 ) {
				unset( $var_58['mssql']);
			}

			foreach( $var_58 as $var_59 => $var_60 ) {
				
			}
?>
		</select>
	</td>
</tr>

<!-- Database server hostname -->
<tr>
	<td>
		Hostname (for Database Server)
	</td>
	<td>
		<input name="hostname" type="textbox" value="<?php 
		?>">
	</td>
</tr>

<!-- Database name -->
<tr>
	<td>
		Database name (for Database)
	</td>
	<td>
		<input name="database_name" type="textbox" value="<?php 
		?>">
	</td>
</tr>

<?php

if( !$var_3 ) {
	$var_61 = array(
		'db_table_prefix'        => 'Database Table Prefix',
		'db_table_plugin_prefix' => 'Database Plugin Table Prefix',
		'db_table_suffix'        => 'Database Table Suffix',
	);
	foreach( $var_14[$var_26] as $var_15 => $var_16 ) {
		
		
		
		
		
	}

	
	$var_62 = config_get_global( 'default_timezone' );
	if( is_blank( $var_62 ) ) {
		$var_62 = @date_default_timezone_get();
	}
?>
<!-- Timezone -->
<tr>
	<td>
		Default Time Zone
	</td>
	<td>
		<select id="timezone" name="timezone">
			<?php print_timezone_option_list( $var_62 ) ?>
		</select>
	</td>
</tr>
<?php
} 
?>

<!-- Printing SQL queries -->
<tr>
	<td>
		Print SQL Queries instead of Writing to the Database
	</td>
	<td>
		<input name="log_queries" type="checkbox" value="1" <?php echo( $var_29 ? 'checked="checked"' : '' )?>>
	</td>
</tr>

<!-- Submit button -->
<tr>
	<td>
		<?php 
		?>
	</td>
	<td>
		<input name="go" type="submit" class="button" value="Install/Upgrade Database">
	</td>
</tr>

</table>
</form>

<?php
}  


if( 3 == $var_10 ) {
	?>
<table width="100%" cellpadding="10" cellspacing="1">
<tr>
	<td bgcolor="
		<span class="title">Installing Database</span>
	</td>
</tr>
<?php if( !$var_29 ) {?>
<tr>
	<td bgcolor="
		Create database if it does not exist
	</td>
	<?php
		$var_33 = @$var_32->Connect( $var_18, $var_27, $var_28, $var_20 );

		if( $var_19 == 'db2' ) {
			$var_63 = $var_32->Execute( "select * from SYSIBM.SCHEMATA WHERE SCHEMA_NAME = '" . $var_21 . "' AND SCHEMA_OWNER = '" . $var_22 . "'" );
			if( $var_63 === false ) {
				
			}

			if( $var_63->var_65 ) {
				$var_33 = false;
				
			} else {
				$var_33 = $var_32->execute( 'set schema ' . $var_21 );
			}
		}

		$var_48 = false;

		if( $var_33 == true ) {
			fn_0( var_8 );
			$var_48 = true;
		} else {
			
			$var_32 = ADONewConnection( $var_19 );
			$var_33 = $var_32->Connect( $var_18, $var_27, $var_28 );

			$var_66 = NewDataDictionary( $var_32 );

			if( $var_19 == 'db2' ) {
				$var_63 = $var_32->Execute( 'CREATE SCHEMA ' . $var_21 );

				if( !$var_63 ) {
					$var_33 = false;
					fn_0( var_7, true, 'Does administrative user have access to create the database? ( ' . db_error_msg() . ' )' );
					$var_10--; 
				} else {
					fn_0( var_8 );
					$var_48 = true;
				}
			} else {
				$var_67 = $var_66->CreateDatabase( $var_20, array( 'mysql' => 'DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci' ) );
				$var_69 = $var_66->ExecuteSQLArray( $var_67, false );
				if( $var_69 == 2 ) {
					fn_0( var_8 );
					$var_48 = true;
				} else {
					$var_54 = db_error_msg();
					if( $var_19 == 'oci8' ) {
						$var_71 = preg_match( '/ORA-01920/', $var_54 );
					} else {
						$var_71 = strstr( $var_54, 'atabase exists' );
					}

					if( $var_71 ) {
						fn_0( var_7, false, 'Database already exists? ( ' . db_error_msg() . ' )' );
					} else {
						fn_0( var_7, true, 'Does administrative user have access to create the database? ( ' . db_error_msg() . ' )' );
						$var_10--; 
					}
				}
			}
		}
		?>
</tr>
<?php
	
	$var_32->Close();
	$var_32 = null;
?>
<tr>
	<td bgcolor="
		Attempting to connect to database as user
	</td>
	<?php
		$var_32 = ADONewConnection( $var_19 );
		$var_33 = @$var_32->Connect( $var_18, $var_22, $var_23, $var_20 );

		if( $var_19 == 'db2' ) {
			$var_33 = $var_32->execute( 'set schema ' . $var_21 );
			if( $var_33 === false ) {
				
			}
		}

		if( $var_33 == true ) {
			fn_0( var_8 );
		} else {
			fn_0( var_7, false, 'Database user doesn\'t have access to the database ( ' . db_error_msg() . ' )' );
		}
		$var_32->Close();
	?>
</tr>
<?php
	}

	
	if( false == $var_2 ) {
		$var_36 = false;

		
		config_set_global( 'db_type', $var_19 );

		
		config_set_global( 'db_table_prefix', $var_73 );
		config_set_global( 'db_table_plugin_prefix', $var_74 );
		config_set_global( 'db_table_suffix', $var_75 );
		
		$var_32 = ADONewConnection( $var_19 );
		$var_33 = @$var_32->Connect( $var_18, $var_27, $var_28, $var_20 );
		if( !$var_29 ) {
			$var_36 = true;

			
		}
		$var_76 = config_get( 'database_version', -1, var_77, var_78 );
		$var_79 = count( $var_80 ) - 1;
		$var_81 = $var_76 + 1;
		if( $var_29 ) {
			
		}

		if( $var_19 == 'db2' ) {
			$var_33 = $var_32->execute( 'set schema ' . $var_21 );
			if( $var_33 === false ) {
				
			}
		}

		$var_66 = NewDataDictionary( $var_32 );

		
		
		
		

		if( $var_76 > 51 && $var_76 < 189 ) {
			
			
			
			$var_82 = check_pgsql_bool_columns();
			if( $var_82 !== true ) {
				
				$var_83 = "PostgreSQL: check Boolean columns' actual type";
				if( is_array( $var_82 ) ) {
					fn_1(
						$var_83,
						count( $var_82 ) == 0,
						false,
						count( $var_82 ) . ' columns must be converted to BOOLEAN' );
				} else {
					
					fn_1( $var_83, false, true, $var_82 );
				}

				
				foreach( $var_82 as $var_84 ) {
					extract( $var_84, var_85, 'v' );
					$var_86 = $var_87 ? 'NULL' : 'NOT NULL';
					$var_88 = is_null( $var_89 ) ? 'NULL' : $var_89;
					$var_67 = $var_66->AlterColumnSQL(
						$var_91,
						$var_92 . ' L ' . $var_86 . ' DEFAULT ' . $var_88 );
					fn_1(
						'Converting column ' . $var_91 . '.' . $var_92 . ' to BOOLEAN',
						2 == $var_66->ExecuteSQLArray( $var_67, false ),
						true,
						print_r( $var_67, true ) );
					if( $var_2 ) {
						
						break;
					}
				}
			}
		}
		

		while( ( $var_81 <= $var_79 ) && !$var_2 ) {
			if( !$var_29 ) {
				
			$var_93 = $var_80[$var_81][1][0];

			switch( $var_80[$var_81][0] ) {
				case 'InsertData':
					$var_67 = call_user_func_array( $var_80[$var_81][0], $var_80[$var_81][1] );
					break;

				case 'UpdateSQL':
					$var_67 = array(
						$var_80[$var_81][1],
					);
					$var_93 = $var_80[$var_81][1];
					break;

				case 'UpdateFunction':
					$var_67 = array(
						$var_80[$var_81][1],
					);
					if( isset( $var_80[$var_81][2] ) ) {
						$var_67[] = $var_80[$var_81][2];
					}
					$var_94 = false;
					$var_93 = $var_80[$var_81][1];
					break;

				case null:
					
					break;

				default:
					$var_67 = call_user_func_array( array( $var_66, $var_80[$var_81][0] ), $var_80[$var_81][1] );

					
					if( isset( $var_80[$var_81][2] ) ) {
						if( call_user_func_array( $var_80[$var_81][2][0], $var_80[$var_81][2][1] ) ) {
							$var_67 = call_user_func_array( array( $var_66, $var_80[$var_81][0] ), $var_80[$var_81][1] );
						} else {
							$var_67 = array();
						}
					} else {
						$var_67 = call_user_func_array( array( $var_66, $var_80[$var_81][0] ), $var_80[$var_81][1] );
					}
					break;
			}
			if( $var_29 ) {
				if( $var_94 ) {
					foreach( $var_67 as $var_94 ) {
						
						if( $var_19 == 'oci8' && stripos( $var_94, 'CREATE OR REPLACE TRIGGER' ) === 0 ) {
							$var_95 = var_96 . '/';
						} else {
							$var_95 = ';';
						}
						
					}
				}
			} else {
				
				if( is_null( $var_80[$var_81][0] ) ) {
					
					$var_69 = 2;
				} else {
					
					if( $var_94 ) {
						$var_69 = $var_66->ExecuteSQLArray( $var_67, false );
					} else {
						if( isset( $var_67[1] ) ) {
							$var_69 = call_user_func( 'install_' . $var_67[0], $var_67[1] );
						} else {
							$var_69 = call_user_func( 'install_' . $var_67[0] );
						}
					}
				}
				
				if( $var_69 == 2 ) {
					fn_0( var_8 );
					config_set( 'database_version', $var_81 );
				} else {
					$var_97 = '';
					foreach ( $var_67 as $var_98 ) {
						$var_97 .= $var_98 . '<br />';
					}
					fn_0( var_7, true, $var_97  . $var_32->ErrorMsg() );
				}
				
			}
			$var_81++;
		}
		if( $var_29 ) {
			
			' . PHP_EOL;
			
		}
	}
	if( false == $g_failed ) {
		$t_install_state++;
	} else {
		$t_install_state--;
	}

	?>
</table>
<?php
}  


if( 4 == $t_install_state ) {

	
	
	?>
		<input name="hostname" type="hidden" value="<?php 
}  


if( 5 == $t_install_state ) {
	$t_config_filename = $g_config_path . 'var_100.var_101';
	$var_13 = file_exists( $var_11 );
	?>
<table width="100%" cellpadding="10" cellspacing="1">
<tr>
	<td bgcolor="
		<span class="title">Write Configuration File(s)</span>
	</td>
</tr>

<tr>
	<td bgcolor="
<?php
	if( !$var_13 ) {
?>
		Creating Configuration File (config/config_inc.php)<br />
		<span class="error-msg">
			(if this file is not created, create it manually with the contents below)
		</span>
<?php
	} else {
?>
		Updating Configuration File (config/config_inc.php)<br />
<?php
	}
?>
	</td>
<?php
	

	
	
	
	
	$var_102 = crypto_generate_random_string( 32 );
	if( $var_102 !== null ) {
		$var_102 = base64_encode( $var_102 );
	}

	$var_103 = '<?php' . var_96
		. '$g_hostname               = \'' . addslashes( $var_18 ) . '\';' . var_96
		. '$g_db_type                = \'' . addslashes( $var_19 ) . '\';' . var_96
		. '$g_database_name          = \'' . addslashes( $var_20 ) . '\';' . var_96
		. '$g_db_username            = \'' . addslashes( $var_22 ) . '\';' . var_96
		. '$g_db_password            = \'' . addslashes( $var_23 ) . '\';' . var_96;

	switch( $var_19 ) {
		case 'db2':
			$var_103 .=  '$g_db_schema              = \'' . addslashes( $var_21 ) . '\';' . var_96;
			break;
		default:
			break;
	}
	$var_103 .= var_96;

	
	$var_104 = false;
	foreach( $var_14['other'] as $var_15 => $var_16 ) {
		$var_105 = ${'f_' . $var_15};
		if( $var_105 != $var_16 ) {
			$var_103 .= '$g_' . str_pad( $var_15, 25 ) . '= \'' . addslashes( ${'f_' . $var_15} ) . '\';' . var_96;
			$var_104 = true;
		}
	}
	if( $var_104 ) {
		$var_103 .= var_96;
	}

	$var_103 .=
		  '$g_default_timezone       = \'' . addslashes( $var_24 ) . '\';' . var_96
		. var_96
		. "\$g_crypto_master_salt     = '" . addslashes( $var_102 ) . "';" . var_96;

	$var_106 = true;

	if( !$var_13 ) {
		if( $var_107 = @fopen( $var_11, 'w' ) ) {
			fwrite( $var_107, $var_103 );
			fclose( $var_107 );
		}

		if( file_exists( $var_11 ) ) {
			fn_0( var_8 );
			$var_106 = false;
		} else {
			fn_0( var_7, false, 'cannot write ' . $var_11 );
		}
	} else {
		
		if( ( $var_18 != config_get( 'hostname', '' ) ) ||
			( $var_19 != config_get( 'db_type', '' ) ) ||
			( $var_20 != config_get( 'database_name', '' ) ) ||
			( $var_21 != config_get( 'db_schema', '' ) ) ||
			( $var_22 != config_get( 'db_username', '' ) ) ||
			( $var_23 != config_get( 'db_password', '' ) ) ) {
			fn_0( var_7, false, 'file ' . $var_12 . 'config_inc.php' . ' already exists and has different settings' );
		} else {
			fn_0( var_8, false );
			$var_106 = false;
		}
	}
	?>
</tr>
<?php
	if( $var_102 === null ) {
		fn_1( 'Setting Cryptographic salt in config file', false, false,
					'Unable to find a random number source for cryptographic purposes. You will need to edit ' .
					$var_12 . 'config_inc.php' . ' and set a value for $g_crypto_master_salt manually' );
	}

	if( true == $var_106 ) {
?>
<tr>
	<td colspan="2">
		<table width="50%" cellpadding="10" cellspacing="1">
			<tr>
				<td>
					Please add the following lines to
					'<?php  ?>config_inc.php'
					before continuing to the database upgrade check:
				</td>
			</tr>
			<tr>
				<td>
					<pre><?php  ?></pre>
				</td>
			</tr>
		</table>
	</td>
</tr>
<?php
	}
?>

</table>

<?php
	if( false == $var_2 ) {
		$var_10++;
	}
}



if( 6 == $var_10 ) {

	
	?>
<table width="100%" bgcolor="
<tr>
	<td bgcolor="
		<span class="title">Checking Installation...</span>
	</td>
</tr>

<!-- Checking register_globals are off -->
<?php fn_1( 'Checking for register_globals are off for mantis', !ini_get_bool( 'register_globals' ), false, 'change php.ini to disable register_globals setting' )?>

<tr>
	<td bgcolor="
		Attempting to connect to database as user
	</td>
	<?php
		$var_32 = ADONewConnection( $var_19 );
	$var_33 = @$var_32->Connect( $var_18, $var_22, $var_23, $var_20 );

	if( $var_33 == true ) {
		fn_0( var_8 );
	} else {
		fn_0( var_7, false, 'Database user does not have access to the database ( ' . db_error_msg() . ' )' );
	}

	if( $var_19 == 'db2' ) {
		$var_33 = $var_32->execute( 'set schema ' . $var_21 );
		if( $var_33 === false ) {
			
		}
	}
	?>
</tr>
<tr>
	<td bgcolor="
		checking ability to SELECT records
	</td>
	<?php
	$var_108 = 'SELECT COUNT(*) FROM ' . db_get_table( 'config' );
	$var_33 = @$var_32->Execute( $var_108 );

	if( $var_33 != false ) {
		fn_0( var_8 );
	} else {
		fn_0( var_7, true, 'Database user does not have SELECT access to the database ( ' . db_error_msg() . ' )' );
	}
	?>
</tr>
<tr>
	<td bgcolor="
		checking ability to INSERT records
	</td>
	<?php
		$var_108 = 'INSERT INTO ' . db_get_table( 'config' ) . ' ( value, type, access_reqd, config_id, project_id, user_id ) VALUES (\'test\', 1, 90, \'database_test\', 20, 0 )';
	$var_33 = @$var_32->Execute( $var_108 );

	if( $var_33 != false ) {
		fn_0( var_8 );
	} else {
		fn_0( var_7, true, 'Database user does not have INSERT access to the database ( ' . db_error_msg() . ' )' );
	}
	?>
</tr>
<tr>
	<td bgcolor="
		checking ability to UPDATE records
	</td>
	<?php
		$var_108 = 'UPDATE ' . db_get_table( 'config' ) . ' SET value=\'test_update\' WHERE config_id=\'database_test\'';
	$var_33 = @$var_32->Execute( $var_108 );

	if( $var_33 != false ) {
		fn_0( var_8 );
	} else {
		fn_0( var_7, true, 'Database user does not have UPDATE access to the database ( ' . db_error_msg() . ' )' );
	}
	?>
</tr>
<tr>
	<td bgcolor="
		checking ability to DELETE records
	</td>
	<?php
		$var_108 = 'DELETE FROM ' . db_get_table( 'config' ) . ' WHERE config_id=\'database_test\'';
	$var_33 = @$var_32->Execute( $var_108 );

	if( $var_33 != false ) {
		fn_0( var_8 );
	} else {
		fn_0( var_7, true, 'Database user does not have DELETE access to the database ( ' . db_error_msg() . ' )' );
	}
	?>
</tr>
</table>
<?php
	if( false == $var_2 ) {
		$var_10++;
	}
}



if( 7 == $var_10 ) {
	
	?>
<table width="100%" bgcolor="
<tr>
	<td bgcolor="
		<span class="title">Installation Complete...</span>
	</td>
</tr>
<tr bgcolor="
	<td>
		MantisBT was installed successfully.
<?php if( $var_30 ) {?>
		<a href="../login_page.php">Continue</a> to log in.
<?php } else { ?>
		Please log in as the administrator and <a href="../login_page.php">create</a> your first project.
<?php } ?>
	</td>
	<?php fn_0( var_8 ); ?>
</tr>
</table>

<?php
}



if( $var_2 && $var_10 != 1 ) {
	?>
<table width="100%" bgcolor="
<tr>
	<td bgcolor="
		<span class="title">Installation Failed...</span>
	</td>
</tr>
<tr>
	<td bgcolor="
	<td bgcolor="
<form method='POST'>
		<input name="install" type="hidden" value="<?php 
		?>">
		<input name="admin_username" type="hidden" value="<?php 
		?>">
		<input name="log_queries" type="hidden" value="<?php echo( $var_29 ? 1 : 0 )?>">
		<input name="db_exists" type="hidden" value="<?php echo( $var_30 ? 1 : 0 )?>">
		<input name="retry" type="submit" class="button" value="Retry">
</form>
	</td>
</tr>
</table>
<?php
}
?>
</body>
</html>
