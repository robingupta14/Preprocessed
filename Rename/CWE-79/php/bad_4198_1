<?php

declare(strict_types=1);



class class_0
{

    
    public const var_0 = '9.4.3';

    
    protected static $var_1 = [];

    
    public $var_2;

    
    public $var_3;

    
    private $var_4;

    
    private $var_5;

    
    private $var_6;

    
    private $var_7;

    
    public function fn_1()
    {
        $var_8->var_2 = new class_1();
        $var_8->var_4 = collect([
            'all'     => collect(),
            'removed' => collect(),
        ]);
        $var_8->var_3 = collect();
        $var_8->var_5 = collect();
        $var_8->var_6 = collect();
    }

    
    public static function fn_2(): string
    {
        return static::var_0;
    }

    
    public static function fn_3(string $var_11 = ''): string
    {
        $var_10 = config('platform.prefix');

        return var_12\var_13\var_14::start($var_10.$var_11, '/');
    }

    
    public static function fn_5(array $var_1)
    {
        static::$var_1 = $var_1;
    }

    
    public static function fn_6(string $var_15, $var_16 = null)
    {
        return var_12\var_13\var_17::get(static::$var_1, $var_15, $var_16);
    }

    
    public static function fn_7(string $var_15, string $var_16 = null)
    {
        $var_18 = static::fn_8($var_15, $var_16);

        return class_exists($var_18) ? new $var_18() : $var_18;
    }

    
    public static function fn_8(string $var_15, string $var_16 = null): string
    {
        return var_12\var_13\var_17::get(static::$var_1, 'models.'.$var_15, $var_16 ?? $var_15);
    }

    
    public static function fn_9(string $var_15, string $var_19)
    {
        static::$var_1['models'][$var_15] = $var_19;
    }

    
    public static function fn_4(string $var_11 = ''): string
    {
        $var_20 = dirname(var_21, 2);

        return realpath($var_20.($var_11 ? var_22.$var_11 : $var_11));
    }

    
    public function fn_10(var_23 $var_4): var_24
    {
        if (empty($var_4->var_25)) {
            return $var_8;
        }

        $var_26 = $var_8->var_4->get('all')
            ->get($var_4->var_25, []);

        $var_8->var_4->get('all')
            ->put($var_4->var_25, array_merge_recursive($var_26, $var_4->var_29));

        return $var_8;
    }

    
    public function fn_11(array $var_18): var_24
    {
        $var_8->var_5 = $var_8->var_5->merge($var_18);

        return $var_8;
    }

    
    public function fn_12(string $var_15, $var_31): var_24
    {
        $var_32 = $var_8->var_3->get($var_15, []);

        $var_8->var_3[$var_15] = array_merge($var_32, var_12\var_13\var_17::wrap($var_31));

        return $var_8;
    }

    
    public function fn_13($var_15 = null)
    {
        if ($var_15 === null) {
            return $var_8->var_3;
        }

        return $var_8->var_3->get($var_15);
    }

    
    public function fn_14(): var_33
    {
        return $var_8->var_5->transform(static function ($var_18) {
            return is_object($var_18) ? $var_18 : app()->make($var_18);
        });
    }

    
    public function fn_0(): var_9
    {
        return $var_8->var_2;
    }

    
    public function fn_15(): var_33
    {
        $var_36 = $var_8->var_4->get('all');
        $var_37 = $var_8->var_4->get('removed');

        if (! $var_37->count()) {
            return $var_36;
        }

        return $var_36->map(static function ($var_25) use ($var_37) {
            foreach ($var_25[key($var_25)] as $var_15 => $var_32) {
                if ($var_37->contains($var_32)) {
                    unset($var_25[key($var_25)]);
                }
            }

            return $var_25;
        });
    }

    
    public function fn_16(string $var_15): var_24
    {
        $var_8->var_4->get('removed')->push($var_15);

        return $var_8;
    }

    
    public function fn_17(string $var_42, string $var_11): var_24
    {
        $var_8->var_6->put($var_42, $var_11);

        return $var_8;
    }

    
    public function fn_18(): var_33
    {
        return $var_8->var_6;
    }

    
    public function fn_19(var_43 $var_44): var_24
    {
        $var_8->var_7 = $var_44;

        return $var_8;
    }

    
    public function fn_20(): ?var_43
    {
        return $var_8->var_7;
    }
}
