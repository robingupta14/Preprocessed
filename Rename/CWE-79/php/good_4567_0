<?php



class class_0 extends var_0
{
    protected $var_1 = false;

    public function fn_0()
    {
        $var_2->var_3 = true;
        $var_2->var_4 = 'alias';
        $var_2->var_5 = 'Alias';
        $var_2->var_6 = false;

        parent::fn_0();

        
        $var_2->addRowAction('edit');
        $var_2->addRowAction('delete');

        if (!Tools::getValue('realedit')) {
            $var_2->var_8 = false;
        }

        $var_2->var_9 = array(
            'delete' => array(
                'text' => $var_2->trans('Delete selected', array(), 'Admin.Actions'),
                'confirm' => $var_2->trans('Delete selected items?', array(), 'Admin.Notifications.Info'),
                'icon' => 'icon-trash',
            ),
        );

        $var_2->var_11 = array(
            'alias' => array('title' => $var_2->trans('Aliases', array(), 'Admin.Shopparameters.Feature')),
            
            'search' => array('title' => $var_2->trans('Search', array(), 'Admin.Shopparameters.Feature')),
            'active' => array('title' => $var_2->trans('Status', array(), 'Admin.Global'), 'class' => 'fixed-width-sm', 'align' => 'center', 'active' => 'status', 'type' => 'bool', 'orderby' => false),
        );

        $var_12 = [
            'action' => 'searchCron',
            'ajax' => 1,
            'full' => 1,
            'token' => $var_2->fn_1(),
        ];
        if (Shop::getContext() == var_14::var_15) {
            $var_12['id_shop'] = (int) Context::getContext()->var_16->var_17;
        }

        
        $var_18 = Context::getContext()->var_19->getAdminLink(
            'AdminSearch',
            false,
            [],
            $var_12
        );

        list($var_21, $var_22) = Db::getInstance()->getRow('SELECT COUNT(*) as "0", SUM(product_shop.indexed) as "1" FROM ' . var_24 . 'product p ' . Shop::addSqlAssociation('product', 'p') . ' WHERE product_shop.`visibility` IN ("both", "search") AND product_shop.`active` = 1');

        $var_2->var_25 = array(
            'indexation' => array(
                'title' => $var_2->trans('Indexing', array(), 'Admin.Shopparameters.Feature'),
                'icon' => 'icon-cogs',
                'info' => '<p>
						' . $var_2->trans('The "indexed" products have been analyzed by PrestaShop and will appear in the results of a front office search.', array(), 'Admin.Shopparameters.Feature') . '<br />
						' . $var_2->trans('Indexed products', array(), 'Admin.Shopparameters.Feature') . ' <strong>' . (int) $var_22 . ' / ' . (int) $var_21 . '</strong>.
					</p>
					<p>
						' . $var_2->trans('Building the product index may take a few minutes.', array(), 'Admin.Shopparameters.Feature') . '
						' . $var_2->trans('If your server stops before the process ends, you can resume the indexing by clicking "Add missing products to the index".', array(), 'Admin.Shopparameters.Feature') . '
					</p>
					<a href="' . Context::getContext()->var_19->getAdminLink('AdminSearch', false) . '&action=searchCron&ajax=1&token=' . $var_2->fn_1() . '&amp;redirect=1' . (Shop::getContext() == var_14::var_15 ? '&id_shop=' . (int) Context::getContext()->var_16->var_17 : '') . '" class="btn-link">
						<i class="icon-external-link-sign"></i>
						' . $var_2->trans('Add missing products to the index', array(), 'Admin.Shopparameters.Feature') . '
					</a><br />
					<a href="' . Context::getContext()->var_19->getAdminLink('AdminSearch', false) . '&action=searchCron&ajax=1&full=1&amp;token=' . $var_2->fn_1() . '&amp;redirect=1' . (Shop::getContext() == var_14::var_15 ? '&id_shop=' . (int) Context::getContext()->var_16->var_17 : '') . '" class="btn-link">
						<i class="icon-external-link-sign"></i>
						' . $var_2->trans('Re-build the entire index', array(), 'Admin.Shopparameters.Feature') . '
					</a><br /><br />
					<p>
						' . $var_2->trans('You can set a cron job that will rebuild your index using the following URL:', array(), 'Admin.Shopparameters.Feature') . '<br />
						<a href="' . Tools::safeOutput($var_18) . '">
							<i class="icon-external-link-sign"></i>
							' . Tools::safeOutput($var_18) . '
						</a>
					</p><br />',
                'fields' => array(
                    'PS_SEARCH_INDEXATION' => array(
                        'title' => $var_2->trans('Indexing', array(), 'Admin.Shopparameters.Feature'),
                        'validation' => 'isBool',
                        'type' => 'bool',
                        'cast' => 'intval',
                        'desc' => $var_2->trans('Enable the automatic indexing of products. If you enable this feature, the products will be indexed in the search automatically when they are saved. If the feature is disabled, you will have to index products manually by using the links provided in the field set.', array(), 'Admin.Shopparameters.Help'),
                    ),
                ),
                'submit' => array('title' => $var_2->trans('Save', array(), 'Admin.Actions')),
            ),
            'search' => array(
                'title' => $var_2->trans('Search', array(), 'Admin.Shopparameters.Feature'),
                'icon' => 'icon-search',
                'fields' => array(
                    'PS_SEARCH_START' => array(
                        'title' => $var_2->trans('Search within word', array(), 'Admin.Shopparameters.Feature'),
                        'validation' => 'isBool',
                        'cast' => 'intval',
                        'type' => 'bool',
                        'desc' => $var_2->trans(
                                'By default, to search for “blouse”, you have to enter “blous”, “blo”, etc (beginning of the word) – but not “lous” (within the word).',
                                array(),
                                'Admin.Shopparameters.Help'
                            ) . '<br/>' .
                            $var_2->trans(
                                'With this option enabled, it also gives the good result if you search for “lous”, “ouse”, or anything contained in the word.',
                                array(),
                                'Admin.Shopparameters.Help'
                            ),
                        'hint' => array(
                            $var_2->trans(
                                'Enable search within a whole word, rather than from its beginning only.',
                                array(),
                                'Admin.Shopparameters.Help'
                            ),
                            $var_2->trans(
                                'It checks if the searched term is contained in the indexed word. This may be resource-consuming.',
                                array(),
                                'Admin.Shopparameters.Help'
                            ),
                        ),
                    ),
                    'PS_SEARCH_END' => array(
                        'title' => $var_2->trans('Search exact end match', array(), 'Admin.Shopparameters.Feature'),
                        'validation' => 'isBool',
                        'cast' => 'intval',
                        'type' => 'bool',
                        'desc' => $var_2->trans(
                                'By default, if you search "book", you will have "book", "bookcase" and "bookend".',
                                array(),
                                'Admin.Shopparameters.Help'
                            ) . '<br/>' .
                            $var_2->trans(
                                'With this option enabled, it only gives one result “book”, as exact end of the indexed word is matching.',
                                array(),
                                'Admin.Shopparameters.Help'
                            ),
                        'hint' => array(
                            $var_2->trans(
                                'Enable more precise search with the end of the word.',
                                array(),
                                'Admin.Shopparameters.Help'
                            ),
                            $var_2->trans(
                                'It checks if the searched term is the exact end of the indexed word.',
                                array(),
                                'Admin.Shopparameters.Help'
                            ),
                        ),
                    ),
                    'PS_SEARCH_MINWORDLEN' => array(
                        'title' => $var_2->trans(
                            'Minimum word length (in characters)',
                            array(),
                            'Admin.Shopparameters.Feature'
                        ),
                        'hint' => $var_2->trans(
                            'Only words this size or larger will be indexed.',
                            array(),
                            'Admin.Shopparameters.Help'
                        ),
                        'validation' => 'isUnsignedInt',
                        'type' => 'text',
                        'cast' => 'intval',
                    ),
                    'PS_SEARCH_BLACKLIST' => array(
                        'title' => $var_2->trans('Blacklisted words', array(), 'Admin.Shopparameters.Feature'),
                        'validation' => 'isGenericName',
                        'hint' => $var_2->trans(
                            'Please enter the index words separated by a "|".',
                            array(),
                            'Admin.Shopparameters.Help'
                        ),
                        'type' => 'textareaLang',
                    ),
                ),
                'submit' => array('title' => $var_2->trans('Save', array(), 'Admin.Actions')),
            ),
            'relevance' => array(
                'title' => $var_2->trans('Weight', array(), 'Admin.Shopparameters.Feature'),
                'icon' => 'icon-cogs',
                'info' => $var_2->trans(
                        'The "weight" represents its importance and relevance for the ranking of the products when completing a new search.',
                        array(),
                        'Admin.Shopparameters.Feature'
                    ) . '<br />
						' . $var_2->trans(
                        'A word with a weight of eight will have four times more value than a word with a weight of two.',
                        array(),
                        'Admin.Shopparameters.Feature'
                    ) . '<br /><br />
						' . $var_2->trans(
                        'We advise you to set a greater weight for words which appear in the name or reference of a product. This will allow the search results to be as precise and relevant as possible.',
                        array(),
                        'Admin.Shopparameters.Feature'
                    ) . '<br /><br />
						' . $var_2->trans(
                        'Setting a weight to 0 will exclude that field from search index. Re-build of the entire index is required when changing to or from 0',
                        array(),
                        'Admin.Shopparameters.Feature'
                    ),
                'fields' => array(
                    'PS_SEARCH_WEIGHT_PNAME' => array(
                        'title' => $var_2->trans('Product name weight', array(), 'Admin.Shopparameters.Feature'),
                        'validation' => 'isUnsignedInt',
                        'type' => 'text',
                        'cast' => 'intval',
                    ),
                    'PS_SEARCH_WEIGHT_REF' => array(
                        'title' => $var_2->trans('Reference weight', array(), 'Admin.Shopparameters.Feature'),
                        'validation' => 'isUnsignedInt',
                        'type' => 'text',
                        'cast' => 'intval',
                    ),
                    'PS_SEARCH_WEIGHT_SHORTDESC' => array(
                        'title' => $var_2->trans(
                            'Short description weight',
                            array(),
                            'Admin.Shopparameters.Feature'
                        ),
                        'validation' => 'isUnsignedInt',
                        'type' => 'text',
                        'cast' => 'intval',
                    ),
                    'PS_SEARCH_WEIGHT_DESC' => array(
                        'title' => $var_2->trans('Description weight', array(), 'Admin.Shopparameters.Feature'),
                        'validation' => 'isUnsignedInt',
                        'type' => 'text',
                        'cast' => 'intval',
                    ),
                    'PS_SEARCH_WEIGHT_CNAME' => array(
                        'title' => $var_2->trans('Category weight', array(), 'Admin.Shopparameters.Feature'),
                        'validation' => 'isUnsignedInt',
                        'type' => 'text',
                        'cast' => 'intval',
                    ),
                    'PS_SEARCH_WEIGHT_MNAME' => array(
                        'title' => $var_2->trans('Brand weight', array(), 'Admin.Shopparameters.Feature'),
                        'validation' => 'isUnsignedInt',
                        'type' => 'text',
                        'cast' => 'intval',
                    ),
                    'PS_SEARCH_WEIGHT_TAG' => array(
                        'title' => $var_2->trans('Tags weight', array(), 'Admin.Shopparameters.Feature'),
                        'validation' => 'isUnsignedInt',
                        'type' => 'text',
                        'cast' => 'intval',
                    ),
                    'PS_SEARCH_WEIGHT_ATTRIBUTE' => array(
                        'title' => $var_2->trans('Attributes weight', array(), 'Admin.Shopparameters.Feature'),
                        'validation' => 'isUnsignedInt',
                        'type' => 'text',
                        'cast' => 'intval',
                    ),
                    'PS_SEARCH_WEIGHT_FEATURE' => array(
                        'title' => $var_2->trans('Features weight', array(), 'Admin.Shopparameters.Feature'),
                        'validation' => 'isUnsignedInt',
                        'type' => 'text',
                        'cast' => 'intval',
                    ),
                ),
                'submit' => array('title' => $var_2->trans('Save', array(), 'Admin.Actions')),
            ),
        );
    }

    public function fn_2()
    {
        if (empty($var_2->var_26)) {
            $var_2->page_header_toolbar_btn['new_alias'] = array(
                'href' => self::$var_27 . '&addalias&token=' . $var_2->var_28,
                'desc' => $var_2->trans('Add new alias', array(), 'Admin.Shopparameters.Feature'),
                'icon' => 'process-icon-new',
            );
        }
        $var_2->var_29 = 'alias';
        parent::fn_2();
        if ($var_2->var_30) {
            $var_2->var_34['import'] = array(
                'href' => $var_2->var_31->var_19->getAdminLink('AdminImport', true) . '&import_type=alias',
                'desc' => $var_2->trans('Import', array(), 'Admin.Actions'),
            );
        }
    }

    public function fn_3()
    {
        parent::fn_3();
        
        if ($var_2->var_26 == 'options') {
            $var_2->var_26 = '';
        }
    }

    
    public function fn_4()
    {
        if ($var_2->var_25 && is_array($var_2->var_25)) {
            $var_32 = new class_1($var_2);
            $var_2->setHelperDisplay($var_32);
            $var_32->var_1 = true;
            $var_32->var_34 = array('save' => array(
                'href' => '
                'var_35' => $var_2->trans('Save', array(), 'Admin.Actions'),
            ));
            $var_32->var_17 = $var_2->var_17;
            $var_32->var_36 = $var_2->var_37;
            $var_38 = $var_32->generateOptions($var_2->var_25);

            return $var_38;
        }
    }

    public function fn_5()
    {
        $var_2->var_40 = array(
            'legend' => array(
                'title' => $var_2->trans('Aliases', array(), 'Admin.Shopparameters.Feature'),
                'icon' => 'icon-search',
            ),
            'input' => array(
                array(
                    'type' => 'text',
                    'label' => $var_2->trans('Alias', array(), 'Admin.Shopparameters.Feature'),
                    'name' => 'alias',
                    'required' => true,
                    'hint' => array(
                        $var_2->trans('Enter each alias separated by a comma (e.g. \'prestshop,preztashop,prestasohp\').', array(), 'Admin.Shopparameters.Help'),
                        $var_2->trans('Forbidden characters: &lt;&gt;;=
                    ),
                ),
                array(
                    'var_41' => 'var_42',
                    'label' => $var_2->trans('Result', array(), 'Admin.Shopparameters.Feature'),
                    'name' => 'search',
                    'required' => true,
                    'hint' => $var_2->trans('Search this word instead.', array(), 'Admin.Shopparameters.Help'),
                ),
            ),
            'submit' => array(
                'title' => $var_2->trans('Save', array(), 'Admin.Actions'),
            ),
        );

        $var_2->var_43 = array('alias' => $var_2->var_44->getAliases());

        return parent::fn_5();
    }

    public function fn_6()
    {
        $var_46 = (string) Tools::getValue('search');
        $var_47 = (string) Tools::getValue('alias');
        $var_48 = explode(',', $var_47);
        if (empty($var_46) || empty($var_47)) {
            $var_2->var_50[] = $var_2->trans('Aliases and results are both required.', array(), 'Admin.Shopparameters.Notification');
        }
        if (!Validate::isValidSearch($var_46)) {
            $var_2->var_50[] = Tools::safeOutput($var_46) . ' ' . $var_2->trans('Is not a valid result', array(), 'Admin.Shopparameters.Notification');
        }
        foreach ($var_48 as $var_49) {
            if (!Validate::isValidSearch($var_49)) {
                $var_2->var_50[] = Tools::safeOutput($var_49) . ' ' . $var_2->trans('Is not a valid alias', array(), 'Admin.Shopparameters.Notification');
            }
        }

        if (!count($var_2->var_50)) {
            foreach ($var_48 as $var_49) {
                $var_51 = new class_2(null, trim($var_49), trim($var_46));
                $var_51->save();
            }
        }

        if (empty($var_2->var_50)) {
            $var_2->confirmations[] = $var_2->trans('Creation successful', array(), 'Admin.Shopparameters.Notification');
        }
    }

    
    private function fn_1()
    {
        return substr(
            var_53,
            var_54::var_55,
            var_54::var_56
        );
    }
}
