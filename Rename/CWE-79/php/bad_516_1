<?php



$var_0 = array(
	1 => __('Delete'),
	2 => __('Disable'),
	3 => __('Enable'),
);

if ($config['poller_id'] == 1) {
	$var_0 += array(4 =>__('Full Sync'));
}

$var_1 = array(
	0 => '<div class="deviceUnknown">'    . __('New/Idle')     . '</div>',
	1 => '<div class="deviceUp">'         . __('Running')      . '</div>',
	2 => '<div class="deviceRecovering">' . __('Idle')         . '</div>',
	3 => '<div class="deviceDown">'       . __('Down')         . '</div>',
	4 => '<div class="deviceDisabled">'   . __('Disabled')     . '</div>',
	5 => '<div class="deviceDown">'       . __('Recovering')   . '</div>',
	6 => '<div class="deviceDown">'       . __('Heartbeat')    . '</div>',
);


$var_2 = array(
	'spacer0' => array(
		'method' => 'spacer',
		'friendly_name' => __('Data Collector Information'),
	),
	'name' => array(
		'method' => 'textbox',
		'friendly_name' => __('Name'),
		'description' => __('The primary name for this Data Collector.'),
		'value' => '|arg1:name|',
		'size' => '50',
		'default' => __('New Data Collector'),
		'max_length' => '100'
	),
	'hostname' => array(
		'method' => 'textbox',
		'friendly_name' => __('Data Collector Hostname'),
		'description' => __('The hostname for Data Collector.  It may have to be a Fully Qualified Domain name for the remote Pollers to contact it for activities such as re-indexing, Real-time graphing, etc.'),
		'value' => '|arg1:hostname|',
		'size' => '50',
		'default' => '',
		'max_length' => '100'
	),
	'timezone' => array(
		'method' => 'drop_callback',
		'friendly_name' => __('TimeZone'),
		'description' => __('The TimeZone for the Data Collector.'),
		'sql' => 'SELECT Name AS id, Name AS name FROM mysql.time_zone_name ORDER BY name',
		'action' => 'ajax_tz',
		'id' => '|arg1:timezone|',
		'value' => '|arg1:timezone|'
		),
	'notes' => array(
		'method' => 'textarea',
		'friendly_name' => __('Notes'),
		'description' => __('Notes for this Data Collectors Database.'),
		'value' => '|arg1:notes|',
		'textarea_rows' => 4,
		'textarea_cols' => 50
	),
	'spacer_collection' => array(
		'method' => 'spacer',
		'friendly_name' => __('Collection Settings'),
	),
	'processes' => array(
		'method' => 'textbox',
		'friendly_name' => __('Processes'),
		'description' => __('The number of Data Collector processes to use to spawn.'),
		'value' => '|arg1:processes|',
		'size' => '10',
		'default' => read_config_option('concurrent_processes'),
		'max_length' => '4'
	),
	'threads' => array(
		'method' => 'textbox',
		'friendly_name' => __('Threads'),
		'description' => __('The number of Spine Threads to use per Data Collector process.'),
		'value' => '|arg1:threads|',
		'size' => '10',
		'default' => read_config_option('max_threads'),
		'max_length' => '4'
	),
	'sync_interval' => array(
		'method' => 'drop_array',
		'friendly_name' => __('Sync Interval'),
		'description' => __('The polling sync interval in use.  This setting will effect how often this poller is checked and updated.'),
		'value' => '|arg1:sync_interval|',
		'default' => read_config_option('poller_sync_interval'),
		'array' => $var_3,
	),
	'spacer_remotedb' => array(
		'method' => 'spacer',
		'friendly_name' => __('Remote Database Connection'),
	),
	'dbhost' => array(
		'method' => 'textbox',
		'friendly_name' => __('Hostname'),
		'description' => __('The hostname for the remote database server.'),
		'value' => '|arg1:dbhost|',
		'size' => '50',
		'default' => '',
		'max_length' => '100'
	),
	'dbdefault' => array(
		'method' => 'textbox',
		'friendly_name' => __('Remote Database Name'),
		'description' => __('The name of the remote database.'),
		'value' => '|arg1:dbdefault|',
		'size' => '20',
		'default' => $var_4,
		'max_length' => '20'
	),
	'dbuser' => array(
		'method' => 'textbox',
		'friendly_name' => __('Remote Database User'),
		'description' => __('The user name to use to connect to the remote database.'),
		'value' => '|arg1:dbuser|',
		'size' => '20',
		'default' => $var_5,
		'max_length' => '20'
	),
	'dbpass' => array(
		'method' => 'textbox_password',
		'friendly_name' => __('Remote Database Password'),
		'description' => __('The user password to use to connect to the remote database.'),
		'value' => '|arg1:dbpass|',
		'size' => '40',
		'default' => $var_6,
		'max_length' => '64'
	),
	'dbport' => array(
		'method' => 'textbox',
		'friendly_name' => __('Remote Database Port'),
		'description' => __('The TCP port to use to connect to the remote database.'),
		'value' => '|arg1:dbport|',
		'size' => '5',
		'default' => $var_7,
		'max_length' => '5'
	),
	'dbssl' => array(
		'method' => 'checkbox',
		'friendly_name' => __('Remote Database SSL'),
		'description' => __('If the remote database uses SSL to connect, check the checkbox below.'),
		'value' => '|arg1:dbssl|',
		'default' => $var_8 ? 'on':''
	),
	'dbsslkey' => array(
		'method' => 'textbox',
		'friendly_name' => __('Remote Database SSL Key'),
		'description' => __('The file holding the SSL Key to use to connect to the remote database.'),
		'value' => '|arg1:dbsslkey|',
		'size' => '50',
		'default' => $var_9,
		'max_length' => '255'
	),
	'dbsslcert' => array(
		'method' => 'textbox',
		'friendly_name' => __('Remote Database SSL Certificate'),
		'description' => __('The file holding the SSL Certificate to use to connect to the remote database.'),
		'value' => '|arg1:dbsslcert|',
		'size' => '50',
		'default' => $var_10,
		'max_length' => '255'
	),
	'dbsslca' => array(
		'method' => 'textbox',
		'friendly_name' => __('Remote Database SSL Authority'),
		'description' => __('The file holding the SSL Certificate Authority to use to connect to the remote database.'),
		'value' => '|arg1:dbsslca|',
		'size' => '50',
		'default' => $var_11,
		'max_length' => '255'
	),
	'id' => array(
		'method' => 'hidden',
		'value' => '|arg1:id|',
	),
	'save_component_poller' => array(
		'method' => 'hidden',
		'value' => '1'
	)
);


set_default_action();

switch (get_request_var('action')) {
	case 'save':
		fn_0();

		break;
	case 'actions':
		fn_2();

		break;
	case 'ajax_tz':
		

		break;
	case 'ping':
		fn_5();

		break;
	case 'edit':
		top_header();

		fn_4();

		bottom_footer();
		break;
	default:
		top_header();

		fn_3();

		bottom_footer();
		break;
}





function fn_0() {
	if (isset_request_var('save_component_poller')) {

		
		$var_13['id']       = get_filter_request_var('id');
		$var_13['name']     = form_input_validate(get_nfilter_request_var('name'), 'name', '', false, 3);
		$var_13['hostname'] = form_input_validate(get_nfilter_request_var('hostname'), 'hostname', '', false, 3);
		$var_13['timezone'] = form_input_validate(get_nfilter_request_var('timezone'), 'timezone', '', false, 3);
		$var_13['notes']    = form_input_validate(get_nfilter_request_var('notes'), 'notes', '', true, 3);

		
		$var_13['processes']     = form_input_validate(get_nfilter_request_var('processes'), 'processes', '^[0-9]+$', false, 3);
		$var_13['threads']       = form_input_validate(get_nfilter_request_var('threads'), 'threads', '^[0-9]+$', false, 3);

		if ($var_13['id'] != 1) {
			$var_13['sync_interval'] = form_input_validate(get_nfilter_request_var('sync_interval'), 'sync_interval', '^[0-9]+$', false, 3);

			
			$var_13['dbdefault']     = form_input_validate(get_nfilter_request_var('dbdefault'), 'dbdefault', '', true, 3);
			$var_13['dbhost']        = form_input_validate(get_nfilter_request_var('dbhost'),    'dbhost',    '', true, 3);
			$var_13['dbuser']        = form_input_validate(get_nfilter_request_var('dbuser'),    'dbuser',    '', true, 3);
			$var_13['dbpass']        = form_input_validate(get_nfilter_request_var('dbpass'),    'dbpass',    '', true, 3);
			$var_13['dbport']        = form_input_validate(get_nfilter_request_var('dbport'),    'dbport',    '', true, 3);
			$var_13['dbssl']         = isset_request_var('dbssl') ? 'on':'';
			$var_13['dbsslkey']      = form_input_validate(get_nfilter_request_var('dbsslkey'),  'dbsslkey',  '', true, 3);
			$var_13['dbsslcert']     = form_input_validate(get_nfilter_request_var('dbsslcert'), 'dbsslcert', '', true, 3);
			$var_13['dbsslca']       = form_input_validate(get_nfilter_request_var('dbsslca'),   'dbsslca',   '', true, 3);
		}

		if ($var_13['dbhost'] == 'localhost' && $var_13['id'] > 1) {
			raise_message('poller_dbhost');
		} elseif ($var_13['id'] > 1 && fn_1($var_13['id'], $var_13['dbhost'])) {
			raise_message('poller_nodupe');
		} elseif (!is_error_message()) {
			$var_12 = sql_save($var_13, 'poller');

			if ($var_12) {
				raise_message(1);
			} else {
				raise_message(2);
			}
		}

		header('Location: pollers.php?header=false&action=edit&id=' . (empty($var_12) ? get_nfilter_request_var('id') : $var_12));
	}
}



function fn_1($var_12, $var_14) {
	if ($var_14 == 'localhost') {
		return true;
	} else {
		return db_fetch_cell_prepared('SELECT COUNT(*)
			FROM poller
			WHERE dbhost LIKE "' . $var_14 . '%"
			AND id != ?',
			array($var_12));
	}
}

function fn_2() {
	global $var_0;

	
	get_filter_request_var('drp_action', var_15, array('options' => array('regexp' => '/^([a-zA-Z0-9_]+)$/')));
	

	
	if (isset_request_var('selected_items')) {
		$var_16 = sanitize_unserialize_selected_items(get_nfilter_request_var('selected_items'));

		if ($var_16 != false) {
			if (get_nfilter_request_var('drp_action') == '1') { 
				db_execute('DELETE FROM poller WHERE ' . array_to_sql_or($var_16, 'id'));
				db_execute('UPDATE host SET poller_id=1 WHERE ' . array_to_sql_or($var_16, 'poller_id'));
				db_execute('UPDATE automation_networks SET poller_id=1 WHERE ' . array_to_sql_or($var_16, 'poller_id'));
				db_execute('UPDATE automation_processes SET poller_id=1 WHERE ' . array_to_sql_or($var_16, 'poller_id'));
				db_execute('UPDATE poller_command SET poller_id=1 WHERE ' . array_to_sql_or($var_16, 'poller_id'));
				db_execute('UPDATE poller_item SET poller_id=1 WHERE ' . array_to_sql_or($var_16, 'poller_id'));
				db_execute('UPDATE poller_output_realtime SET poller_id=1 WHERE ' . array_to_sql_or($var_16, 'poller_id'));
				db_execute('UPDATE poller_time SET poller_id=1 WHERE ' . array_to_sql_or($var_16, 'poller_id'));

				cacti_log('NOTE: The poller(s) with the id(s): ' . implode(',', $var_16) . ' deleted by user ' . $_SESSION['sess_user_id'], false, 'WEBUI');
			} elseif (get_request_var('drp_action') == '2') { 
				db_execute('UPDATE poller SET disabled="on" WHERE ' . array_to_sql_or($var_16, 'id'));

				cacti_log('NOTE: The poller(s) with the id(s): ' . implode(',', $var_16) . ' disabled by user ' . $_SESSION['sess_user_id'], false, 'WEBUI');
			} elseif (get_request_var('drp_action') == '3') { 
				db_execute('UPDATE poller SET disabled="" WHERE ' . array_to_sql_or($var_16, 'id'));

				cacti_log('NOTE: The poller(s) with the id(s): ' . implode(',', $var_16) . ' enabled by user ' . $_SESSION['sess_user_id'], false, 'WEBUI');
			} elseif (get_request_var('drp_action') == '4') { 
				session_write_close(); 

				$var_17 = array();
				$var_18  = array();
				$var_19     = array();

				foreach($var_16 as $var_20) {
					
					if ($var_20 == 1) {
						continue;
					}

					$var_19[]   = $var_20;

					$var_21 = db_fetch_row_prepared('SELECT *
						FROM poller
						WHERE id = ?',
						array($var_20));

					if ($var_21['dbhost'] == 'localhost') {
						raise_message('poller_dbhost');
						continue;
					} elseif ($var_20 == 1) {
						raise_message('poller_nomain');
						continue;
					} else {
						if (replicate_out($var_20)) {
							$var_17[] = $var_20;

							db_execute_prepared('UPDATE poller
								SET last_sync = NOW()
								WHERE id = ?',
								array($var_20));
						} else {
							$var_18[] = $var_20;
						}
					}
				}

				session_start(); 

				if (sizeof($var_18)) {
					cacti_log('WARNING: Some selected Remote Data Collectors in [' . implode(', ', $var_19) . '] failed synchronization by user ' . get_username($_SESSION['sess_user_id']) . ', Successful/Failed[' . sizeof($var_17) . '/' . sizeof($var_18) . '].  See log for details.', false, 'WEBUI');
				} else {
					cacti_log('NOTE: All selected Remote Data Collectors in [' . implode(', ', $var_19) . '] synchronized correctly by user ' . get_username($_SESSION['sess_user_id']), false, 'WEBUI');
				}
			}
		}

		header('Location: pollers.php?header=false');
		var_22;
	}

	
	$var_23 = ''; $var_24 = 0;

	
	foreach ($var_25 as $var_26 => $var_27) {
		if (preg_match('/^chk_([0-9]+)$/', $var_26, $var_28)) {
			
			input_validate_input_number($var_28[1]);
			

			$var_23 .= '<li>' . html_escape(db_fetch_cell_prepared('SELECT name FROM poller WHERE id = ?', array($var_28[1]))) . '</li>';
			$var_29[$var_24] = $var_28[1];

			$var_24++;
		}
	}

	top_header();

	form_start('pollers.php');

	html_start_box($var_0[get_nfilter_request_var('drp_action')], '60%', '', '3', 'center', '');

	if (isset($var_29) && cacti_sizeof($var_29)) {
		if (get_nfilter_request_var('drp_action') == '1') { 
			

			$var_30 = "<input type='button' class='ui-button ui-corner-all ui-widget' value='" . __esc('Cancel') . "' onClick='cactiReturnTo()'>&nbsp;<input type='submit' class='ui-button ui-corner-all ui-widget' value='" . __esc('Continue') . "' title='" . __n('Delete Data Collector', 'Delete Data Collectors', cacti_sizeof($var_29)) . "'>";
		} elseif (get_request_var('drp_action') == '2') { 
			

			$var_30 = "<input type='button' class='ui-button ui-corner-all ui-widget' value='" . __esc('Cancel') . "' onClick='cactiReturnTo()'>&nbsp;<input type='submit' class='ui-button ui-corner-all ui-widget' value='" . __esc('Continue') . "' title='" . __n('Disable Data Collector', 'Disable Data Collectors', cacti_sizeof($var_29)) . "'>";
		} elseif (get_request_var('drp_action') == '3') { 
			

			$var_30 = "<input type='button' class='ui-button ui-corner-all ui-widget' value='" . __esc('Cancel') . "' onClick='cactiReturnTo()'>&nbsp;<input type='submit' class='ui-button ui-corner-all ui-widget' value='" . __esc('Continue') . "' title='" . __n('Enable Data Collector', 'Enable Data Collectors', cacti_sizeof($var_29)) . "'>";
		} elseif (get_request_var('drp_action') == '4') { 
			

			$var_30 = "<input type='button' class='ui-button ui-corner-all ui-widget' value='" . __esc('Cancel') . "' onClick='cactiReturnTo()'>&nbsp;<input type='submit' class='ui-button ui-corner-all ui-widget' value='" . __esc('Continue') . "' title='" . __n('Enable Data Collector', 'Synchronize Remote Data Collectors', cacti_sizeof($var_29)) . "'>";
		}
	} else {
		raise_message(40);
		header('Location: pollers.php?header=false');
		var_22;
	}

	

	html_end_box();

	form_end();

	bottom_footer();
}



function fn_4() {
	global $var_2;

	
	get_filter_request_var('id');
	

	if (!isempty_request_var('id')) {
		$var_21 = db_fetch_row_prepared('SELECT *
			FROM poller
			WHERE id = ?',
			array(get_request_var('id')));

		$var_31 = __('Site [edit: %s]', html_escape($var_21['name']));
	} else {
		$var_21 = array();

		$var_31 = __('Site [new]');
	}

	form_start('pollers.php', 'poller');

	html_start_box($var_31, '100%', true, '3', 'center', '');

	if (cacti_sizeof($var_21)) {
		if ($var_21['id'] == 1) {
			unset($var_2['sync_interval']);
			unset($var_2['spacer_remotedb']);
			unset($var_2['dbdefault']);
			unset($var_2['dbhost']);
			unset($var_2['dbuser']);
			unset($var_2['dbpass']);
			unset($var_2['dbport']);
			unset($var_2['dbssl']);
			unset($var_2['dbsslkey']);
			unset($var_2['dbsslcert']);
			unset($var_2['dbsslca']);
		}

		if ($var_21['timezone'] == '' || $var_21['id'] == 1) {
			$var_21['timezone'] = ini_get('date.timezone');
		}
	}

	draw_edit_form(
		array(
			'config' => array('no_form_tag' => true),
			'fields' => inject_form_variables($var_2, (isset($var_21) ? $var_21 : array()))
		)
	);

	$var_32 = __('Remote Data Collectors must be able to communicate to the Main Data Collector, and vice versa.  Use this button to verify that the Main Data Collector can communicate to this Remote Data Collector.');

	if (read_config_option('hide_form_description') == 'on') {
		$var_33 = '<br><span class="formFieldDescription">' . $var_32 . '</span>';
	} else {
		$var_33 = '<div class="formTooltip">' . str_replace("\n", '', display_tooltip($var_32)) . '</div>';
	}

	$var_34 = '<div class="formRow odd"><div class="formColumnLeft"><div class="formFieldName">' . __('Test Database Connection') . $var_33 . '</div></div><div class="formColumnRight"><input type="button" class="ui-button ui-corner-all ui-widget" id="dbtest" value="' . __esc('Test Connection') . '"><span id="results"></span></div></div>';

	if (isset($var_21) && cacti_sizeof($var_21)) {
		if ($var_21['id'] > 1) {
			?>
			<script type='text/javascript'>
			function showHideRemoteDB() {
					var hasSSL = $('
					if (hasSSL) {
						$('
						$('
						$('
					} else {
						$('
						$('
						$('
					}
			}

			$(function() {
				$('
				$('
					showHideRemoteDB();
				});

				$('
					ping_database();
				});

				showHideRemoteDB();
			});

			function ping_database() {
				dbssl = $('

				$.post('pollers.php', {
					__csrf_magic: csrfMagicToken,
					action:       'ping',
					dbdefault:    $('
					dbhost:       $('
					dbuser:       $('
					dbpass:       $('
					dbport:       $('
					dbssl:        dbssl,
					dbsslkey:     $('
					dbsslcert:    $('
					dbsslca:      $('
				}).done(function(data) {
					$('
				});
			}
			</script>
			<?php
		} else {
			?>
			<script type='text/javascript'>
			$(function() {
				$('
			});
			</script>
			<?php
		}
	}

	html_end_box(true, true);

	form_save_button('pollers.php', 'return');
}

function fn_5($var_21 = array()) {
	if (!cacti_sizeof($var_21)) {
		$var_21['dbtype'] = 'mysql';

		$var_35 = array('dbhost', 'dbuser', 'dbpass', 'dbdefault', 'dbport', 'dbssl', 'dbsslkey', 'dbsslcert', 'dbsslca');
		foreach ($var_35 as $var_36) {
			if ($var_36 == 'dbssl') {
				if (isset_request_var('dbssl') && get_nfilter_request_var('dbssl') == 'on') {
					$var_21['dbssl'] = true;
				} else {
					$var_21['dbssl'] = false;
				}
			} elseif (isset_request_var($var_36)) {
				$var_21[$var_36] = get_nfilter_request_var($var_36);
			} else {
				
				return false;
			}
		}
	}

    $var_37 = db_connect_real(
		$var_21['dbhost'],
		$var_21['dbuser'],
		$var_21['dbpass'],
		$var_21['dbdefault'],
		$var_21['dbtype'],
		$var_21['dbport'],
		$var_21['dbssl'],
		$var_21['dbsslkey'],
		$var_21['dbsslcert'],
		$var_21['dbsslca']
	);

    if (is_object($var_37)) {
        db_close($var_37);
        
    } else {
        
    }
}

function fn_3() {
	global $var_0, $var_1, $var_38;

	
	$var_39 = array(
		'rows' => array(
			'filter' => var_40,
			'pageset' => true,
			'default' => '-1'
			),
		'page' => array(
			'filter' => var_40,
			'default' => '1'
			),
		'filter' => array(
			'filter' => var_41,
			'pageset' => true,
			'default' => '',
			'options' => array('options' => 'sanitize_search_string')
			),
		'sort_column' => array(
			'filter' => var_41,
			'default' => 'name',
			'options' => array('options' => 'sanitize_search_string')
			),
		'sort_direction' => array(
			'filter' => var_41,
			'default' => 'ASC',
			'options' => array('options' => 'sanitize_search_string')
			)
	);

	validate_store_request_vars($var_39, 'sess_pollers');
	

	if (get_request_var('rows') == '-1') {
		$var_42 = read_config_option('num_rows_table');
	} else {
		$var_42 = get_request_var('rows');
	}

	html_start_box( __('Data Collectors'), '100%', '', '3', 'center', '');

	?>
	<tr class='even'>
		<td>
			<form id='form_poller' action='pollers.php'>
			<table class='filterTable'>
				<tr>
					<td>
						<?php ?>
					</td>
					<td>
						<input type='text' class='ui-state-default ui-corner-all' id='filter' size='25' value='<?php ?>'>
					</td>
					<td>
						<?php ?>
					</td>
					<td>
						<select id='rows' onChange='applyFilter()'>
							<option value='-1'<?php ?></option>
							<?php
							if (cacti_sizeof($var_38)) {
								foreach ($var_38 as $var_43 => $var_44) {
									 if (get_request_var('rows') == $var_43) {  } 
								}
							}
							?>
						</select>
					</td>
					<td>
						<span>
							<input type='button' class='ui-button ui-corner-all ui-widget' id='refresh' value='<?php ?>' title='<?php ?>'>
							<input type='button' class='ui-button ui-corner-all ui-widget' id='clear' value='<?php ?>' title='<?php ?>'>
						</span>
					</td>
				</tr>
			</table>
			</form>
			<script type='text/javascript'>

			function applyFilter() {
				strURL  = 'pollers.php?header=false';
				strURL += '&filter='+$('
				strURL += '&rows='+$('
				loadPageNoHeader(strURL);
			}

			function clearFilter() {
				strURL = 'pollers.php?clear=1&header=false';
				loadPageNoHeader(strURL);
			}

			$(function() {
				$('
					applyFilter();
				});

				$('
					clearFilter();
				});

				$('
					event.preventDefault();
					applyFilter();
				});
			});

			</script>
		</td>
	</tr>
	<?php

	html_end_box();

	
	if (get_request_var('filter') != '') {
		$var_45 = "WHERE (name LIKE '%" . get_request_var('filter') . "%')";
	} else {
		$var_45 = '';
	}

	$var_46 = db_fetch_cell("SELECT COUNT(*) FROM poller $var_45");

	$var_47 = get_order_string();
	$var_48 = ' LIMIT ' . ($var_42*(get_request_var('page')-1)) . ',' . $var_42;

	$var_23 = db_fetch_assoc("SELECT poller.*, UNIX_TIMESTAMP() - UNIX_TIMESTAMP(poller.last_status) as heartbeat, count(h.id) AS hosts
		FROM poller
		LEFT JOIN host AS h
		ON h.poller_id=poller.id
		$var_45
		GROUP BY poller.id
		$var_47
		$var_48");

	$var_49 = html_nav_bar('pollers.php?filter=' . get_request_var('filter'), var_50, get_request_var('page'), $var_42, $var_46, 5, __('Pollers'), 'page', 'main');

	form_start('pollers.php', 'chk');

	

	html_start_box('', '100%', '', '3', 'center', '');

	$var_51 = array(
		'name'        => array('display' => __('Collector Name'), 'align' => 'left',   'sort' => 'ASC',  'tip' => __('The Name of this Data Collector.')),
		'id'          => array('display' => __('ID'),             'align' => 'right',  'sort' => 'ASC',  'tip' => __('The unique id associated with this Data Collector.')),
		'hostname'    => array('display' => __('Hostname'),       'align' => 'right',  'sort' => 'ASC',  'tip' => __('The Hostname where the Data Collector is running.')),
		'status'      => array('display' => __('Status'),         'align' => 'center', 'sort' => 'DESC', 'tip' => __('The Status of this Data Collector.')),
		'nosort0'   => array('display' => __('Proc/Threads'),      'align' => 'right',  'sort' => 'DESC', 'tip' => __('The Number of Poller Processes and Threads for this Data Collector.')),
		'total_time'  => array('display' => __('Polling Time'),   'align' => 'right',  'sort' => 'DESC', 'tip' => __('The last data collection time for this Data Collector.')),
		'nosort1'     => array('display' => __('Avg/Max'),        'align' => 'right',  'sort' => 'DESC', 'tip' => __('The Average and Maximum Collector timings for this Data Collector.')),
		'hosts'       => array('display' => __('Devices'),        'align' => 'right',  'sort' => 'DESC', 'tip' => __('The number of Devices associated with this Data Collector.')),
		'snmp'        => array('display' => __('SNMP Gets'),      'align' => 'right',  'sort' => 'DESC', 'tip' => __('The number of SNMP gets associated with this Collector.')),
		'script'      => array('display' => __('Scripts'),        'align' => 'right',  'sort' => 'DESC', 'tip' => __('The number of script calls associated with this Data Collector.')),
		'server'      => array('display' => __('Servers'),        'align' => 'right',  'sort' => 'DESC', 'tip' => __('The number of script server calls associated with this Data Collector.')),
		'last_update' => array('display' => __('Last Finished'),  'align' => 'right',  'sort' => 'DESC', 'tip' => __('The last time this Data Collector completed.')),
		'last_status' => array('display' => __('Last Update'),    'align' => 'right',  'sort' => 'DESC', 'tip' => __('The last time this Data Collector checked in with the main Cacti site.')),
		'last_sync' => array('display' => __('Last Sync'),        'align' => 'right',  'sort' => 'DESC', 'tip' => __('The last time this Data Collector was full synced with main Cacti site.')));

	html_header_sort_checkbox($var_51, get_request_var('sort_column'), get_request_var('sort_direction'), false);

	$var_24 = 0;
	if (cacti_sizeof($var_23)) {
		foreach ($var_23 as $var_21) {
			if ($var_21['id'] == 1) {
				$var_52 = true;
			} else {
				$var_52 = false;
			}

			if ($var_21['disabled'] == 'on') {
				$var_21['status'] = 4;
			}else if ($var_21['heartbeat'] > 310) {
				$var_21['status'] = 6;
			}

			$var_53 = round($var_21['avg_time'], 2) . '/' .  round($var_21['max_time'], 2);

			if (empty($var_21['name'])) {
				$var_21['name'] = '&lt;no name&gt;';
			}

			form_alternate_row('line' . $var_21['id'], true, $var_52);
			form_selectable_cell(filter_value($var_21['name'], get_request_var('filter'), 'pollers.php?action=edit&id=' . $var_21['id']), $var_21['id']);
			form_selectable_cell($var_21['id'], $var_21['id'], '', 'right');
			form_selectable_cell($var_21['hostname'], $var_21['id'], '', 'right');
			form_selectable_cell($var_1[$var_21['status']], $var_21['id'], '', 'center');
			form_selectable_cell($var_21['processes'] . '/' . $var_21['threads'], $var_21['id'], '', 'right');
			form_selectable_cell(number_format_i18n($var_21['total_time'], 2), $var_21['id'], '', 'right');
			form_selectable_cell($var_53, $var_21['id'], '', 'right');
			form_selectable_cell(number_format_i18n($var_21['hosts'], '-1'), $var_21['id'], '', 'right');
			form_selectable_cell(number_format_i18n($var_21['snmp'], '-1'), $var_21['id'], '', 'right');
			form_selectable_cell(number_format_i18n($var_21['script'], '-1'), $var_21['id'], '', 'right');
			form_selectable_cell(number_format_i18n($var_21['server'], '-1'), $var_21['id'], '', 'right');
			form_selectable_cell(substr($var_21['last_update'], 5), $var_21['id'], '', 'right');
			form_selectable_cell(substr($var_21['last_status'], 5), $var_21['id'], '', 'right');

			if ($var_21['id'] == 1) {
				form_selectable_cell(__('N/A'), $var_21['id'], '', 'right');
			} else {
				form_selectable_cell(substr($var_21['last_sync'], 5), $var_21['id'], '', 'right');
			}

			form_checkbox_cell($var_21['name'], $var_21['id'], $var_52);
			form_end_row();
		}
	} else {
		
	}

	html_end_box(false);

	if (cacti_sizeof($var_23)) {
		
	}

	
	draw_actions_dropdown($var_0);

	form_end();
}

