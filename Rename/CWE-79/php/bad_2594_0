<?php

















error_reporting( var_0 );
@set_time_limit( 0 );




define( 'MANTIS_MAINTENANCE_MODE', true );

$var_1 = false; 

$var_2 = false;
$var_3 = false;


function fn_0( $var_4, $var_5 = true, $var_6 = '' ) {
	global $var_2;
	
	if( var_7 == $var_4 ) {
		if( $var_5 ) {
			$var_2 = true;
			
		} else {
			
		}
		if( '' != $var_6 ) {
			
		}
	}

	if( var_8 == $var_4 ) {
		
	}
	
}


function fn_1( $var_9, $var_4, $var_5 = true, $var_6 = '' ) {
	
	
}










$var_10 = gpc_get_int( 'install', 0 );

html_begin();
html_head_begin();
html_css_link( 'admin.css' );
html_content_type();
html_title( 'Administration - Installation' );
html_javascript_link( 'jquery-' . var_11 . '.min.js' );
html_javascript_link( 'install.js' );
html_head_end();
?>

<body>
<table width="100%" cellspacing="0" cellpadding="0">
	<tr class="top-bar">
		<td class="links">
			[ <a href="index.php">Back to Administration</a> ]
		</td>
		<td class="title">
		<?php
switch( $var_10 ) {
	case 7:
		
		break;
	case 6:
		
		break;
	case 5:
		
		break;
	case 4:
		
		break;
	case 3:
		
		break;
	case 2:
		
		break;
	case 1:
		
		break;
	case 0:
	default:
		$var_10 = 0;
		
		break;
}
?>
		</td>
	</tr>
</table>
<br /><br />

<?php


if( 0 == $var_10 || 2 == $var_10 ) {
	?>
<table width="100%" cellpadding="10" cellspacing="1">
<tr>
	<td bgcolor="
		<span class="title">Checking Installation</span>
	</td>
</tr>
<?php
}

$var_12 = $var_13 . 'config_inc.php';
$var_14 = file_exists( $var_12 );



$var_15 = array(
	'oci8' => array(
		'db_table_prefix'        => 'm',
		'db_table_plugin_prefix' => 'plg',
		'db_table_suffix'        => '',
	) ,
);
foreach( $var_15['oci8'] as $var_16 => $var_17 ) {
	$var_15['other'][$var_16] = config_get( $var_16, '' );
}

if( $var_14 && $var_10 <= 1 ) {
	
	$var_18                    = config_get( 'dsn', '' );
	$var_19               = config_get( 'hostname', '' );
	$var_20                = config_get( 'db_type', '' );
	$var_21          = config_get( 'database_name', '' );
	$var_22              = config_get( 'db_schema', '' );
	$var_23            = config_get( 'db_username', '' );
	$var_24            = config_get( 'db_password', '' );
	$var_25               = config_get( 'default_timezone', '' );

	
	$var_26 = 'other';
	foreach( $var_15[$var_26] as $var_16 => $var_17 ) {
		${'f_' . $var_16} = $var_17;
	}
} else {
	
	$var_18                = gpc_get( 'dsn', config_get( 'dsn', '' ) );
	$var_19           = gpc_get( 'hostname', config_get( 'hostname', 'localhost' ) );
	$var_20            = gpc_get( 'db_type', config_get( 'db_type', '' ) );
	$var_21      = gpc_get( 'database_name', config_get( 'database_name', 'bugtracker' ) );
	$var_22          = gpc_get( 'db_schema', config_get( 'db_schema', '' ) );
	$var_23        = gpc_get( 'db_username', config_get( 'db_username', '' ) );
	$var_24        = gpc_get( 'db_password', config_get( 'db_password', '' ) );
	if( var_27 == $var_24 ) {
		$var_24 = config_get( 'db_password' );
	}
	$var_25           = gpc_get( 'timezone', config_get( 'default_timezone' ) );

	
	$var_26 = $var_20 == 'oci8' ? $var_20 : 'other';
	foreach( $var_15[$var_26] as $var_16 => $var_17 ) {
		${'f_' . $var_16} = gpc_get( $var_16, $var_17 );
	}
}
$var_28 = gpc_get( 'admin_username', '' );
$var_29 = gpc_get( 'admin_password', '' );
if( var_27 == $var_29 ) {
	$var_29 = '';
}
$var_30    = gpc_get_bool( 'log_queries', false );
$var_31      = gpc_get_bool( 'db_exists', false );

if( $var_14 ) {
	if( 0 == $var_10 ) {
		fn_1( 'Config File Exists - Upgrade', true );

		fn_1( 'Setting Database Type', '' !== $var_20, true, 'database type is blank?' );

		
		$var_32 = ( $var_18 !== '' || ( $var_21 !== '' && $var_23 !== '' && $var_19 !== '' ) );
		
		
		
		if( $var_20 == 'oci8' ) {
			$var_32 = $var_32 || ( $var_21 == '' && $var_23 !== '' && $var_19 !== '' );
		}
		fn_1( 'Checking Database connection settings exist',
			$var_32,
			true,
			'database connection settings do not exist?' );

		fn_1( 'Checking PHP support for database type',
			db_check_database_support( $var_20 ), true,
			'database is not supported by PHP. Check that it has been compiled into your server.' );

		if( $var_20 == 'mssql' ) {
			fn_1( 'Checking PHP support for Microsoft SQL Server driver',
				version_compare( phpversion(), '5.3' ) < 0, true,
				'mssql driver is no longer supported in PHP >= 5.3, please use mssqlnative instead' );
		}
	}

	$var_33 = ADONewConnection( $var_20 );
	$var_34 = @$var_33->Connect( $var_19, $var_23, $var_24, $var_21 );
	if( $var_33->IsConnected() ) {
		$var_37 = true;
	}

	$var_38 = config_get( 'database_version', -1 );

	if( $var_38 > 1 ) {
		$var_3 = true;
		$var_31 = true;
	} else {
		if( 0 == $var_10 ) {
			fn_1( 'Config File Exists but Database does not', false, false, 'Bad config_inc.php?' );
		}
	}
}

if( $var_20 == 'db2' ) {

	
	if( strpos( $var_21, '/' ) != false ) {
		$var_39 = $var_21;
		list( $var_21, $var_22 ) = explode( '/', $var_39, 2 );
	}
}

if( 0 == $var_10 ) {
	?>

<!-- Check PHP Version -->
<?php
	fn_1(
		'Checking PHP version (your version is ' . phpversion() . ')',
		check_php_version( phpversion() ),
		true,
		'Upgrade to a more recent version of PHP'
	);

	
	
	
	
	fn_1(
		'Checking UTF-8 support',
		extension_loaded( 'mbstring' ) || function_exists( 'utf8_encode' ),
		true,
		'Please install or enable the PHP mbstring extension'
	);
?>
<!-- Check Safe Mode -->
<?php
fn_1( 'Checking if safe mode is enabled for install script',
	!ini_get( 'SAFE_MODE' ),
	true,
	'Disable safe_mode in php.ini before proceeding' ) ?>

<?php
	
	$var_40 = array(
		'config_inc.php' => 'move',
		'custom_constants_inc.php' => 'move',
		'custom_strings_inc.php' => 'move',
		'custom_functions_inc.php' => 'move',
		'custom_relationships_inc.php' => 'move',
		'mc_config_defaults_inc.php' => 'delete',
		'mc_config_inc.php' => 'contents',
	);

	foreach( $var_40 as $var_41 => $var_42 ) {
		$var_43 = dirname( dirname( var_44 ) ) . '/';
		if( substr( $var_41, 0, 3 ) == 'mc_' ) {
			$var_43 .= 'api/soap/';
		}

		switch( $var_42 ) {
			case 'move':
				$var_45 = "Move $var_41 to config/$var_41.";
				break;
			case 'delete':
				$var_45 = 'Delete this file.';
				break;
			case 'contents':
				$var_45 = 'Move contents to config_inc.php file.';
				break;
		}

		fn_1(
			"Checking there is no '$var_41' file in 1.2.x location.",
			!file_exists( $var_43 . $var_41 ),
			true,
			$var_45
		);
	}
?>

</table>
<?php
	if( false == $var_2 ) {
		$var_10++;
	}
} 


if( 2 == $var_10 ) {
	
	date_default_timezone_set( $var_25 );
?>

<!-- Checking DB support-->
<?php
	fn_1( 'Setting Database Type', '' !== $var_20, true, 'database type is blank?' );

	fn_1( 'Checking PHP support for database type', db_check_database_support( $var_20 ), true, 'database is not supported by PHP. Check that it has been compiled into your server.' );

	
	
	
	$var_46 = substr( $var_47, 1, strpos( $var_47, ' ' ) - 1 );
	fn_1( 'Checking ADOdb Library version is at least ' . var_48,
		version_compare( $var_46, var_48, '>=' ),
		true,
		'Current version: ' . $var_47
	);

	fn_1( 'Setting Database Hostname', '' !== $var_19, true, 'host name is blank' );
	fn_1( 'Setting Database Username', '' !== $var_23, true, 'database username is blank' );
	fn_1( 'Setting Database Password', '' !== $var_24, false, 'database password is blank' );
	fn_1( 'Setting Database Name', '' !== $var_21 || $var_20 == 'oci8', true, 'database name is blank' );

	if( $var_20 == 'db2' ) {
		fn_1( 'Setting Database Schema', !is_blank( $var_22 ), true, 'must have a schema name for AS400 in the form of DBNAME/SCHEMA' );
	}
?>
<tr>
	<td bgcolor="
		Setting Admin Username
	</td>
	<?php
		if( '' !== $var_28 ) {
		fn_0( var_8 );
	} else {
		fn_0( var_7, false, 'admin user name is blank, using database user instead' );
		$var_28 = $var_23;
	}
	?>
</tr>
<tr>
	<td bgcolor="
		Setting Admin Password
	</td>
	<?php
		if( '' !== $var_29 ) {
			fn_0( var_8 );
		} else {
			fn_0( var_7, false, 'admin user password is blank, using database user password instead' );
			$var_29 = $var_24;
		}
	?>
</tr>

<!-- connect to db -->
<tr>
	<td bgcolor="
		Attempting to connect to database as admin
	</td>
	<?php
		$var_49 = false;
	$var_33 = ADONewConnection( $var_20 );
	$var_34 = @$var_33->Connect( $var_19, $var_28, $var_29 );

	if( $var_34 ) {

		
		$var_34 = @$var_33->Connect( $var_19, $var_28, $var_29, $var_21 );
		if( $var_34 ) {
			$var_49 = true;
			$var_31 = true;
		}
		if( $var_20 == 'db2' ) {
			$var_34 = $var_33->execute( 'set schema ' . $var_22 );
			if( $var_34 === false ) {
				fn_0( var_7, true, 'set schema failed: ' . $var_33->errorMsg() );
			}
		} else {
			fn_0( var_8 );
		}

		
		
		$var_52 = @$var_33->ServerInfo();
	} else {
		fn_0( var_7, true, 'Does administrative user have access to the database? ( ' . db_error_msg() . ' )' );
		$var_52 = null;
	}
	?>
</tr>
<?php
	if( $var_31 ) {
		?>
<tr>
	<td bgcolor="
		Attempting to connect to database as user
	</td>
	<?php
		$var_33 = ADONewConnection( $var_20 );
		$var_34 = @$var_33->Connect( $var_19, $var_23, $var_24, $var_21 );

		if( $var_34 == true ) {
			$var_49 = true;
			if( $var_20 == 'db2' ) {
				$var_34 = $var_33->execute( 'set schema ' . $var_22 );
				if( $var_34 === false ) {
					fn_0( var_7, true, 'set schema failed: ' . $var_33->errorMsg() );
				}
			} else {
				fn_0( var_8 );
			}
		} else {
			fn_0( var_7, false, 'Database user doesn\'t have access to the database ( ' . db_error_msg() . ' )' );
		}
		?>
</tr>

<?php
	}
	if( $var_49 ) {
		?>
<!-- display database version -->
<tr>
	<td bgcolor="
		Checking Database Server Version
<?php
		if( isset( $var_52['description'] ) ) {
			
		}
?>
	</td>
<?php
		$var_54 = '';
		$var_55 = '';
		switch( $var_20 ) {
			case 'mysql':
			case 'mysqli':
				if( version_compare( $var_52['version'], var_56, '<' ) ) {
					$var_55 = 'MySQL ' . var_56 . ' or later is required for installation.';
				}
				break;
			case 'mssql':
			case 'mssqlnative':
				if( version_compare( $var_52['version'], var_57, '<' ) ) {
					$var_55 = 'SQL Server 2005 (' . var_57 . ') or later is required for installation.';
				}
				break;
			case 'pgsql':
			case 'db2':
			default:
				break;
		}

		if( is_null( $var_52 ) ) {
			$var_54 = "Unable to determine '$var_20' version. ($var_55).";
			$var_55 = '';
		}
		fn_0(
			( '' == $var_55 ) && ( '' == $var_54 ),
			( '' != $var_55 ),
			$var_55 . ' ' . $var_54
		);
?>
</tr>
</table>
<?php
	}?>
</table>
<?php
	if( false == $var_2 ) {
		$var_10++;
	} else {
		$var_10--; 
	}
} 


if( 1 == $var_10 ) {
	?>

<form method='POST'>

<input name="install" type="hidden" value="2">

<table width="100%" cellpadding="10" cellspacing="1">

<tr>
	<td bgcolor="
		<span class="title">
			<?php 
		foreach( $var_58 as $var_16 => $var_17 ) {
			
		}
		
	}
?>
		</div>

		<select id="db_type" name="db_type">
<?php
			
			$var_59 = array(
				'mysqli'      => 'MySQL Improved',
				'mysql'       => 'MySQL',
				'mssqlnative' => 'Microsoft SQL Server Native Driver',
				'pgsql'       => 'PostgreSQL',
				'oci8'        => 'Oracle',
				
				
			);
			
			if( version_compare( phpversion(), '5.5.0' ) >= 0 ) {
				unset( $var_59['mysql']);
			}

			foreach( $var_59 as $var_60 => $var_61 ) {
				
			}
?>
		</select>
	</td>
</tr>

<!-- Database server hostname -->
<tr>
	<td>
		Hostname (for Database Server)
	</td>
	<td>
		<input name="hostname" type="textbox" value="<?php 
		?>">
	</td>
</tr>

<!-- Database name -->
<tr>
	<td>
		Database name (for Database)
	</td>
	<td>
		<input name="database_name" type="textbox" value="<?php 
		?>">
	</td>
</tr>

<?php

if( !$var_3 ) {
	$var_62 = array(
		'db_table_prefix'        => 'Database Table Prefix',
		'db_table_plugin_prefix' => 'Database Plugin Table Prefix',
		'db_table_suffix'        => 'Database Table Suffix',
	);
	foreach( $var_15[$var_26] as $var_16 => $var_17 ) {
		
		
		
		
		
	}

	
	$var_63 = config_get_global( 'default_timezone' );
	if( is_blank( $var_63 ) ) {
		$var_63 = @date_default_timezone_get();
	}
?>
<!-- Timezone -->
<tr>
	<td>
		Default Time Zone
	</td>
	<td>
		<select id="timezone" name="timezone">
			<?php print_timezone_option_list( $var_63 ) ?>
		</select>
	</td>
</tr>
<?php
} 
?>

<!-- Printing SQL queries -->
<tr>
	<td>
		Print SQL Queries instead of Writing to the Database
	</td>
	<td>
		<input name="log_queries" type="checkbox" value="1" <?php echo( $var_30 ? 'checked="checked"' : '' )?>>
	</td>
</tr>

<!-- Submit button -->
<tr>
	<td>
		<?php 
		?>
	</td>
	<td>
		<input name="go" type="submit" class="button" value="Install/Upgrade Database">
	</td>
</tr>

</table>
</form>

<?php
}  


if( 3 == $var_10 ) {
	?>
<table width="100%" cellpadding="10" cellspacing="1">
<tr>
	<td bgcolor="
		<span class="title">Installing Database</span>
	</td>
</tr>
<?php if( !$var_30 ) {?>
<tr>
	<td bgcolor="
		Create database if it does not exist
	</td>
	<?php
		$var_34 = @$var_33->Connect( $var_19, $var_28, $var_29, $var_21 );

		if( $var_20 == 'db2' ) {
			$var_64 = $var_33->Execute( "select * from SYSIBM.SCHEMATA WHERE SCHEMA_NAME = '" . $var_22 . "' AND SCHEMA_OWNER = '" . $var_23 . "'" );
			if( $var_64 === false ) {
				
			}

			if( $var_64->var_66 ) {
				$var_34 = false;
				
			} else {
				$var_34 = $var_33->execute( 'set schema ' . $var_22 );
			}
		}

		$var_49 = false;

		if( $var_34 == true ) {
			fn_0( var_8 );
			$var_49 = true;
		} else {
			
			$var_33 = ADONewConnection( $var_20 );
			$var_34 = $var_33->Connect( $var_19, $var_28, $var_29 );

			$var_67 = NewDataDictionary( $var_33 );

			if( $var_20 == 'db2' ) {
				$var_64 = $var_33->Execute( 'CREATE SCHEMA ' . $var_22 );

				if( !$var_64 ) {
					$var_34 = false;
					fn_0( var_7, true, 'Does administrative user have access to create the database? ( ' . db_error_msg() . ' )' );
					$var_10--; 
				} else {
					fn_0( var_8 );
					$var_49 = true;
				}
			} else {
				$var_68 = $var_67->CreateDatabase( $var_21, array(
					'mysql' => 'DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci',
				) );
				$var_70 = $var_67->ExecuteSQLArray( $var_68, false );
				if( $var_70 == 2 ) {
					fn_0( var_8 );
					$var_49 = true;
				} else {
					$var_55 = db_error_msg();
					if( $var_20 == 'oci8' ) {
						$var_72 = preg_match( '/ORA-01920/', $var_55 );
					} else {
						$var_72 = strstr( $var_55, 'atabase exists' );
					}

					if( $var_72 ) {
						fn_0( var_7, false, 'Database already exists? ( ' . db_error_msg() . ' )' );
					} else {
						fn_0( var_7, true, 'Does administrative user have access to create the database? ( ' . db_error_msg() . ' )' );
						$var_10--; 
					}
				}
			}
		}
		?>
</tr>
<?php
	
	$var_33->Close();
	$var_33 = null;
?>
<tr>
	<td bgcolor="
		Attempting to connect to database as user
	</td>
	<?php
		$var_33 = ADONewConnection( $var_20 );
		$var_34 = @$var_33->Connect( $var_19, $var_23, $var_24, $var_21 );

		if( $var_20 == 'db2' ) {
			$var_34 = $var_33->execute( 'set schema ' . $var_22 );
			if( $var_34 === false ) {
				
			}
		}

		if( $var_34 == true ) {
			fn_0( var_8 );
		} else {
			fn_0( var_7, false, 'Database user doesn\'t have access to the database ( ' . db_error_msg() . ' )' );
		}
		$var_33->Close();
	?>
</tr>
<?php
	}

	
	if( false == $var_2 ) {
		$var_37 = false;

		
		config_set_global( 'db_type', $var_20 );

		
		config_set_global( 'db_table_prefix', $var_74 );
		config_set_global( 'db_table_plugin_prefix', $var_75 );
		config_set_global( 'db_table_suffix', $var_76 );
		
		$var_33 = ADONewConnection( $var_20 );
		$var_34 = @$var_33->Connect( $var_19, $var_28, $var_29, $var_21 );
		if( !$var_30 ) {
			$var_37 = true;

			
		}
		$var_77 = config_get( 'database_version', -1, var_78, var_79 );
		$var_80 = count( $var_81 ) - 1;
		$var_82 = $var_77 + 1;
		if( $var_30 ) {
			
		}

		if( $var_20 == 'db2' ) {
			$var_34 = $var_33->execute( 'set schema ' . $var_22 );
			if( $var_34 === false ) {
				
			}
		}

		$var_67 = NewDataDictionary( $var_33 );

		
		
		
		

		if( $var_77 > 51 && $var_77 < 189 ) {
			
			
			
			$var_83 = check_pgsql_bool_columns();
			if( $var_83 !== true ) {
				
				$var_84 = "PostgreSQL: check Boolean columns' actual type";
				if( is_array( $var_83 ) ) {
					fn_1(
						$var_84,
						count( $var_83 ) == 0,
						false,
						count( $var_83 ) . ' columns must be converted to BOOLEAN' );
				} else {
					
					fn_1( $var_84, false, true, $var_83 );
				}

				
				foreach( $var_83 as $var_85 ) {
					extract( $var_85, var_86, 'v' );
					$var_87 = $var_88 ? 'NULL' : 'NOT NULL';
					$var_89 = is_null( $var_90 ) ? 'NULL' : $var_90;
					$var_68 = $var_67->AlterColumnSQL(
						$var_92,
						$var_93 . ' L ' . $var_87 . ' DEFAULT ' . $var_89 );
					fn_1(
						'Converting column ' . $var_92 . '.' . $var_93 . ' to BOOLEAN',
						2 == $var_67->ExecuteSQLArray( $var_68, false ),
						true,
						print_r( $var_68, true ) );
					if( $var_2 ) {
						
						break;
					}
				}
			}
		}
		

		while( ( $var_82 <= $var_80 ) && !$var_2 ) {
			if( !$var_30 ) {
				
			$var_94 = $var_81[$var_82][1][0];

			switch( $var_81[$var_82][0] ) {
				case 'InsertData':
					$var_68 = call_user_func_array( $var_81[$var_82][0], $var_81[$var_82][1] );
					break;

				case 'UpdateSQL':
					$var_68 = array(
						$var_81[$var_82][1],
					);
					$var_94 = $var_81[$var_82][1];
					break;

				case 'UpdateFunction':
					$var_68 = array(
						$var_81[$var_82][1],
					);
					if( isset( $var_81[$var_82][2] ) ) {
						$var_68[] = $var_81[$var_82][2];
					}
					$var_95 = false;
					$var_94 = $var_81[$var_82][1];
					break;

				case null:
					
					break;

				default:
					$var_68 = call_user_func_array( array( $var_67, $var_81[$var_82][0] ), $var_81[$var_82][1] );

					
					if( isset( $var_81[$var_82][2] ) ) {
						if( call_user_func_array( $var_81[$var_82][2][0], $var_81[$var_82][2][1] ) ) {
							$var_68 = call_user_func_array( array( $var_67, $var_81[$var_82][0] ), $var_81[$var_82][1] );
						} else {
							$var_68 = array();
						}
					} else {
						$var_68 = call_user_func_array( array( $var_67, $var_81[$var_82][0] ), $var_81[$var_82][1] );
					}
					break;
			}
			if( $var_30 ) {
				if( $var_95 ) {
					foreach( $var_68 as $var_95 ) {
						
						if( $var_20 == 'oci8' && stripos( $var_95, 'CREATE OR REPLACE TRIGGER' ) === 0 ) {
							$var_96 = var_97 . '/';
						} else {
							$var_96 = ';';
						}
						
					}
				}
			} else {
				
				if( is_null( $var_81[$var_82][0] ) ) {
					
					$var_70 = 2;
				} else {
					
					if( $var_95 ) {
						$var_70 = $var_67->ExecuteSQLArray( $var_68, false );
					} else {
						if( isset( $var_68[1] ) ) {
							$var_70 = call_user_func( 'install_' . $var_68[0], $var_68[1] );
						} else {
							$var_70 = call_user_func( 'install_' . $var_68[0] );
						}
					}
				}
				
				if( $var_70 == 2 ) {
					fn_0( var_8 );
					config_set( 'database_version', $var_82 );
				} else {
					$var_98 = '';
					if( $var_95 ) {
						foreach( $var_68 as $var_99 ) {
							if( !empty( $var_99 ) ) {
								$var_98 .= $var_99 . '<br />';
							}
						}
					}
					fn_0( var_7, true, $var_98  . $var_33->ErrorMsg() );
				}
				
			}
			$var_82++;
		}
		if( $var_30 ) {
			
			' . PHP_EOL;
			
		}
	}
	if( false == $g_failed ) {
		$t_install_state++;
	} else {
		$t_install_state--;
	}

	?>
</table>
<?php
}  


if( 4 == $t_install_state ) {


	$t_install_state++;
}  


if( 5 == $t_install_state ) {
	$t_config_exists = file_exists( $t_config_filename );
	?>
<table width="100%" cellpadding="10" cellspacing="1">
<tr>
	<td bgcolor="
		<span class="title">Write Configuration File(s)</span>
	</td>
</tr>

<tr>
	<td bgcolor="
		<?php  ?>
		Configuration File (config/config_inc.php)<br />
	</td>
<?php
	

	
	
	
	
	$t_crypto_master_salt = crypto_generate_random_string( 32 );
	if( $t_crypto_master_salt !== null ) {
		$t_crypto_master_salt = base64_encode( $t_crypto_master_salt );
	}

	$t_config = '<?var_101' . var_97
		. '$g_hostname               = \'' . addslashes( $var_19 ) . '\';' . var_97
		. '$g_db_type                = \'' . addslashes( $var_20 ) . '\';' . var_97
		. '$g_database_name          = \'' . addslashes( $var_21 ) . '\';' . var_97
		. '$g_db_username            = \'' . addslashes( $var_23 ) . '\';' . var_97
		. '$g_db_password            = \'' . addslashes( $var_24 ) . '\';' . var_97;

	switch( $var_20 ) {
		case 'db2':
			$var_102 .=  '$g_db_schema              = \'' . addslashes( $var_22 ) . '\';' . var_97;
			break;
		default:
			break;
	}
	$var_102 .= var_97;

	
	$var_103 = false;
	foreach( $var_15['other'] as $var_16 => $var_17 ) {
		$var_104 = ${'f_' . $var_16};
		if( $var_104 != $var_17 ) {
			$var_102 .= '$g_' . str_pad( $var_16, 25 ) . '= \'' . addslashes( ${'f_' . $var_16} ) . '\';' . var_97;
			$var_103 = true;
		}
	}
	if( $var_103 ) {
		$var_102 .= var_97;
	}

	$var_102 .=
		  '$g_default_timezone       = \'' . addslashes( $var_25 ) . '\';' . var_97
		. var_97
		. "\$g_crypto_master_salt     = '" . addslashes( $var_105 ) . "';" . var_97;

	$var_106 = true;

	if( !$var_14 ) {
		if( $var_107 = @fopen( $var_12, 'w' ) ) {
			fwrite( $var_107, $var_102 );
			fclose( $var_107 );
		}

		if( file_exists( $var_12 ) ) {
			fn_0( var_8 );
			$var_106 = false;
		} else {
			fn_0( var_7, false, 'cannot write ' . $var_12 );
		}
	} else {
		
		if( ( $var_19 != config_get( 'hostname', '' ) ) ||
			( $var_20 != config_get( 'db_type', '' ) ) ||
			( $var_21 != config_get( 'database_name', '' ) ) ||
			( $var_22 != config_get( 'db_schema', '' ) ) ||
			( $var_23 != config_get( 'db_username', '' ) ) ||
			( $var_24 != config_get( 'db_password', '' ) ) ) {
			fn_0( var_7, false, 'file ' . $var_12 . ' already exists and has different settings' );
		} else {
			fn_0( var_8, false );
			$var_106 = false;
		}
	}
	?>
</tr>
<?php
	if( $var_105 === null ) {
		fn_1( 'Setting Cryptographic salt in config file', false, false,
					'Unable to find a random number source for cryptographic purposes. You will need to edit ' .
					$var_12 . ' and set a value for $g_crypto_master_salt manually' );
	}

	if( true == $var_106 ) {
?>
<tr>
	<td colspan="2">
		<table width="50%" cellpadding="10" cellspacing="1">
			<tr>
				<td>
					Please add the following lines to
					<em>'<?php  ?>'</em>
					before continuing:
				</td>
			</tr>
			<tr>
				<td>
					<pre><?php  ?></pre>
				</td>
			</tr>
		</table>
	</td>
</tr>
<?php
	}
?>

</table>

<?php
	if( false == $var_2 ) {
		$var_10++;
	}
}



if( 6 == $var_10 ) {

	
	?>
<table width="100%" cellpadding="10" cellspacing="1">
<tr>
	<td bgcolor="
		<span class="title">Checking Installation</span>
	</td>
</tr>

<!-- Checking register_globals are off -->
<?php fn_1( 'Checking for register_globals are off for mantis', !ini_get_bool( 'register_globals' ), false, 'change php.ini to disable register_globals setting' )?>

<tr>
	<td bgcolor="
		Attempting to connect to database as user
	</td>
	<?php
		$var_33 = ADONewConnection( $var_20 );
	$var_34 = @$var_33->Connect( $var_19, $var_23, $var_24, $var_21 );

	if( $var_34 == true ) {
		fn_0( var_8 );
	} else {
		fn_0( var_7, false, 'Database user does not have access to the database ( ' . db_error_msg() . ' )' );
	}

	if( $var_20 == 'db2' ) {
		$var_34 = $var_33->execute( 'set schema ' . $var_22 );
		if( $var_34 === false ) {
			
		}
	}
	?>
</tr>
<tr>
	<td bgcolor="
		checking ability to SELECT records
	</td>
	<?php
	$var_108 = 'SELECT COUNT(*) FROM ' . db_get_table( 'config' );
	$var_34 = @$var_33->Execute( $var_108 );

	if( $var_34 != false ) {
		fn_0( var_8 );
	} else {
		fn_0( var_7, true, 'Database user does not have SELECT access to the database ( ' . db_error_msg() . ' )' );
	}
	?>
</tr>
<tr>
	<td bgcolor="
		checking ability to INSERT records
	</td>
	<?php
		$var_108 = 'INSERT INTO ' . db_get_table( 'config' ) . ' ( value, type, access_reqd, config_id, project_id, user_id ) VALUES (\'test\', 1, 90, \'database_test\', 20, 0 )';
	$var_34 = @$var_33->Execute( $var_108 );

	if( $var_34 != false ) {
		fn_0( var_8 );
	} else {
		fn_0( var_7, true, 'Database user does not have INSERT access to the database ( ' . db_error_msg() . ' )' );
	}
	?>
</tr>
<tr>
	<td bgcolor="
		checking ability to UPDATE records
	</td>
	<?php
		$var_108 = 'UPDATE ' . db_get_table( 'config' ) . ' SET value=\'test_update\' WHERE config_id=\'database_test\'';
	$var_34 = @$var_33->Execute( $var_108 );

	if( $var_34 != false ) {
		fn_0( var_8 );
	} else {
		fn_0( var_7, true, 'Database user does not have UPDATE access to the database ( ' . db_error_msg() . ' )' );
	}
	?>
</tr>
<tr>
	<td bgcolor="
		checking ability to DELETE records
	</td>
	<?php
		$var_108 = 'DELETE FROM ' . db_get_table( 'config' ) . ' WHERE config_id=\'database_test\'';
	$var_34 = @$var_33->Execute( $var_108 );

	if( $var_34 != false ) {
		fn_0( var_8 );
	} else {
		fn_0( var_7, true, 'Database user does not have DELETE access to the database ( ' . db_error_msg() . ' )' );
	}
	?>
</tr>
</table>
<?php
	if( false == $var_2 ) {
		$var_10++;
	}
}



if( 7 == $var_10 ) {
	
	?>
<table width="100%" cellpadding="10" cellspacing="1">
<tr>
	<td bgcolor="
		<span class="title">Installation Complete</span>
	</td>
</tr>
<tr bgcolor="
	<td>
		MantisBT was installed successfully.
<?php if( $var_31 ) {?>
		<a href="../login_page.php">Continue</a> to log in.
<?php } else { ?>
		Please log in as the administrator and <a href="../login_page.php">create</a> your first project.
<?php } ?>
	</td>
	<?php fn_0( var_8 ); ?>
</tr>
</table>

<?php
}



if( $var_2 && $var_10 != 1 ) {
	?>
<table width="100%" cellpadding="10" cellspacing="1">
<tr>
	<td bgcolor="
		<span class="title">Installation Failed</span>
	</td>
</tr>
<tr>
	<td bgcolor="
	<td bgcolor="
<form method='POST'>
		<input name="install" type="hidden" value="<?php 
		?>">
		<input name="admin_username" type="hidden" value="<?php 
		?>">
		<input name="log_queries" type="hidden" value="<?php echo( $var_30 ? 1 : 0 )?>">
		<input name="db_exists" type="hidden" value="<?php echo( $var_31 ? 1 : 0 )?>">
		<input name="retry" type="submit" class="button" value="Retry">
</form>
	</td>
</tr>
</table>
<?php
}
?>
</body>
</html>
