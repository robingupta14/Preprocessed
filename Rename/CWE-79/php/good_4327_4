<?php namespace var_0\var_1;


class class_0 extends var_2
{
    
    protected function fn_0(string $var_4): var_5
    {
        return new class_1(base_path('tests/test-data/test-file.txt'), $var_4, 'text/plain', 55, null, true);
    }

    
    protected function fn_1(string $var_7, int $var_8 = 0): \var_9\var_10\var_11\var_12
    {
        $var_13 = $var_14->fn_0($var_7);
        return $var_14->call('POST', '/attachments/upload', ['uploaded_to' => $var_8], [], ['file' => $var_13], []);
    }

    
    protected function fn_2(var_17 $var_18): var_19
    {
        $var_14->post('attachments/link', [
            'attachment_link_url' => 'https:
            'var_21' => 'var_22 var_19 var_23',
            'attachment_link_uploaded_to' => $var_18->var_24,
        ]);

        return var_25\var_1\var_19::query()->latest()->first();
    }

    
    protected function fn_3()
    {
        $var_29 = $var_14->var_30->make(var_25\var_1\var_32::var_33);
        foreach (var_25\var_1\var_19::all() as $var_13) {
            $var_29->deleteFile($var_13);
        }
    }

    public function fn_4()
    {
        $var_18 = var_25\var_35\var_17::first();
        $var_14->asAdmin();
        $var_37 = $var_14->getAdmin();
        $var_4 = 'upload_test_file.txt';

        $var_39 = [
            'name' => $var_4,
            'uploaded_to'=> $var_18->var_24,
            'extension' => 'txt',
            'order' => 1,
            'created_by' => $var_37->var_24,
            'updated_by' => $var_37->var_24,
        ];

        $var_40 = $var_14->fn_1($var_4, $var_18->var_24);
        $var_40->assertStatus(200);

        $var_42 = var_25\var_1\var_19::query()->orderBy('id', 'desc')->first();
        $var_39['path'] = $var_42->var_44;

        $var_40->assertJson($var_39);
        $var_14->assertDatabaseHas('attachments', $var_39);

        $var_14->fn_3();
    }

    public function fn_5()
    {
        $var_18 = var_25\var_35\var_17::first();
        $var_4 = 'upload_test_file.txt';


        $var_40 = $var_14->asAdmin()->fn_1($var_4, $var_18->var_24);
        $var_40->assertStatus(200);

        $var_42 = var_25\var_1\var_19::query()->orderBy('id', 'desc')->first();
        $var_14->assertStringNotContainsString($var_4, $var_42->var_44);
        $var_14->assertStringEndsWith('.txt', $var_42->var_44);
    }

    public function fn_6()
    {
        $var_18 = var_25\var_35\var_17::first();
        $var_14->asAdmin();
        $var_4 = 'upload_test_file.txt';

        $var_40 = $var_14->fn_1($var_4, $var_18->var_24);
        $var_40->assertStatus(200);
        $var_42 = var_25\var_1\var_19::orderBy('id', 'desc')->take(1)->first();

        $var_50 = $var_14->get($var_18->getUrl());
        $var_50->assertSeeText($var_4);
        $var_50->assertSee($var_42->getUrl());

        $var_55 = $var_14->get($var_42->getUrl());
        $var_55->assertSee('Hi, This is a test file for testing the upload process.');

        $var_14->fn_3();
    }

    public function fn_7()
    {
        $var_18 = var_25\var_35\var_17::first();
        $var_37 = $var_14->getAdmin();
        $var_14->asAdmin();

        $var_56 = $var_14->call('POST', 'attachments/link', [
            'attachment_link_url' => 'https:
            'var_21' => 'var_22 var_19 var_23',
            'attachment_link_uploaded_to' => $var_18->var_24,
        ]);

        $var_57 = [
            'path' => 'https:
            'var_7' => 'var_22 var_19 var_23',
            'uploaded_to' => $var_18->var_24,
            'created_by' => $var_37->var_24,
            'updated_by' => $var_37->var_24,
            'external' => true,
            'order' => 1,
            'extension' => ''
        ];

        $var_56->assertStatus(200);
        $var_14->assertDatabaseHas('attachments', $var_57);
        $var_42 = var_25\var_1\var_19::orderBy('id', 'desc')->take(1)->first();

        $var_50 = $var_14->get($var_18->getUrl());
        $var_50->assertSeeText('Example Attachment Link');
        $var_50->assertSee($var_42->getUrl());

        $var_55 = $var_14->get($var_42->getUrl());
        $var_55->assertRedirect('https:

        $this->deleteUploads();
    }

    public function test_attachment_updating()
    {
        $page = BookStack\Entities\Page::first();
        $this->asAdmin();

        $attachment = $this->createAttachment($page);
        $update = $this->call('var_59', 'attachments/' . $var_42->var_24, [
            'attachment_edit_name' => 'My new attachment name',
            'attachment_edit_url' => 'https:
        ]);

        $expectedData = [
            'var_24' => $var_42->var_24,
            'path' => 'https:
            'var_7' => 'var_60 new class_2 var_7',
            'uploaded_to' => $var_18->var_24
        ];

        $var_61->assertStatus(200);
        $var_14->assertDatabaseHas('attachments', $var_57);

        $var_14->fn_3();
    }

    public function fn_8()
    {
        $var_18 = var_25\var_35\var_17::first();
        $var_14->asAdmin();
        $var_4 = 'deletion_test.txt';
        $var_14->fn_1($var_4, $var_18->var_24);

        $var_42 = var_25\var_1\var_19::query()->orderBy('id', 'desc')->first();
        $var_62 = storage_path($var_42->var_44);
        $var_14->assertTrue(file_exists($var_62), 'File at path ' . $var_62 . ' does not exist');

        $var_42 = var_25\var_1\var_19::first();
        $var_14->delete($var_42->getUrl());

        $var_14->assertDatabaseMissing('attachments', [
            'name' => $var_4
        ]);
        $var_14->assertFalse(file_exists($var_62), 'File at path ' . $var_62 . ' was not deleted as expected');

        $var_14->fn_3();
    }

    public function fn_9()
    {
        $var_18 = var_25\var_35\var_17::first();
        $var_14->asAdmin();
        $var_4 = 'deletion_test.txt';
        $var_14->fn_1($var_4, $var_18->var_24);

        $var_42 = var_25\var_1\var_19::query()->orderBy('id', 'desc')->first();
        $var_62 = storage_path($var_42->var_44);

        $var_14->assertTrue(file_exists($var_62), 'File at path ' . $var_62 . ' does not exist');
        $var_14->assertDatabaseHas('attachments', [
            'name' => $var_4
        ]);

        $var_14->call('DELETE', $var_18->getUrl());

        $var_14->assertDatabaseMissing('attachments', [
            'name' => $var_4
        ]);
        $var_14->assertFalse(file_exists($var_62), 'File at path ' . $var_62 . ' was not deleted as expected');

        $var_14->fn_3();
    }

    public function fn_10()
    {
        $var_37 = $var_14->getAdmin();
        $var_67 = $var_14->getViewer();
        $var_18 = var_25\var_35\var_17::first(); 

        $var_14->actingAs($var_37);
        $var_4 = 'permission_test.txt';
        $var_14->fn_1($var_4, $var_18->var_24);
        $var_42 = var_25\var_1\var_19::orderBy('id', 'desc')->take(1)->first();

        $var_18->var_70 = true;
        $var_18->permissions()->delete();
        $var_18->save();
        $var_18->rebuildPermissions();
        $var_18->load('jointPermissions');

        $var_14->actingAs($var_67);
        $var_55 = $var_14->get($var_42->getUrl());
        $var_55->assertStatus(404);
        $var_55->assertSee("Attachment not found");

        $var_14->fn_3();
    }

    public function fn_11()
    {
        $var_18 = var_25\var_35\var_17::first();
        $var_14->asAdmin();

        $var_75 = [
            'javascript:alert("bunny")',
            ' javascript:alert("bunny")',
            'JavaScript:alert("bunny")',
            "\t\n\t\nJavaScript:alert(\"bunny\")",
            "data:text/html;<a></a>",
            "Data:text/html;<a></a>",
            "Data:text/html;<a></a>",
        ];

        foreach ($var_75 as $var_76) {
            $var_56 = $var_14->post('attachments/link', [
                'attachment_link_url' => $var_76,
                'attachment_link_name' => 'Example Attachment Link',
                'attachment_link_uploaded_to' => $var_18->var_24,
            ]);
            $var_56->assertStatus(422);
            $var_14->assertDatabaseMissing('attachments', [
                'path' => $var_76,
            ]);
        }

        $var_42 = $var_14->fn_2($var_18);

        foreach ($var_75 as $var_76) {
            $var_56 = $var_14->put('attachments/' . $var_42->var_24, [
                'attachment_edit_url' => $var_76,
                'attachment_edit_name' => 'Example Attachment Link',
            ]);
            $var_56->assertStatus(422);
            $var_14->assertDatabaseMissing('attachments', [
                'path' => $var_76,
            ]);
        }
    }
}
