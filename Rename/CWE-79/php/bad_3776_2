<?php

class class_0 extends var_0 {
	static $var_1 = array(
		"AbsoluteLinks" => "HTMLText",
	);
	
 	
	function fn_0() {
		$var_2=Array('datatype'=>'mediumtext', 'character set'=>'utf8', 'collate'=>'utf8_general_ci', 'arrayValue'=>$var_3->var_4);
		$var_5=Array('type'=>'text', 'parts'=>$var_2);
		DB::fn_0($var_3->var_6, $var_3->var_7, $var_5, $var_3->var_8);
	}
	
	
	function fn_1($var_10 = 26, $var_11 = '...') {
		$var_3->var_12 = trim(Convert::xml2raw($var_3->var_12));
		$var_13 = explode(' ', $var_3->var_12, $var_10 + 1);
		
		if(count($var_13) <= $var_10 - 1) {
			$var_13 = $var_3->var_12;
		} else {
			array_pop($var_13);
			$var_13 = implode(' ', $var_13) . $var_11;
		}
		
		return $var_13;
	}
	
	
	function fn_2() {
		return strip_tags($var_3->var_12);
	}
	
	function fn_3() {
		return str_replace(array('&','<','>','"'), array('&amp;','&lt;','&gt;','&quot;'), $var_3->var_12);
	}
	
	
	function fn_4() {
		return HTTP::absoluteURLs($var_3->var_12);
	}
	
	
	function fn_5($var_15 = 20, $var_11 = "...") {
		$var_12 = trim($var_3->var_12);
		return (strlen($var_12) > $var_15) ? substr($var_12, 0, $var_15) . $var_11 : $var_12;
	}
	
	
	function fn_6($var_10 = 26, $var_11 = '...') {
		$var_13 = $var_3->fn_1($var_10, $var_11);
		return Convert::raw2xml($var_13);
	}

	
	function fn_7($var_16 = 2) {
		if(!is_numeric($var_16)) user_error("Text::LimitSentence() expects one numeric argument", var_17);
		
		$var_18 = array();
		$var_19 = trim(Convert::xml2raw($var_3->var_12));
		$var_20 = explode('.', $var_19);

		if ($var_16 == 0) return '';

		for($var_21 = 0; $var_21 < $var_16; $var_21++) {
			if(isset($var_20[$var_21])) {
				$var_22 = trim($var_20[$var_21]);
				if(!empty($var_22)) $var_18[] .= $var_22;		
			}
		}

		return count($var_18)==0 ? '' : implode($var_18, '. ') . '.';				
	}
	
	
	
	function fn_8() {
		$var_19 = Convert::xml2raw( $var_3->var_12 );
		if( !$var_19 ) return "";
		
		
		$var_20 = explode( '.', $var_19 );
		
		if( count( $var_20 ) )
			return $var_20[0] . '.';
		else
			return $var_3->fn_9(20);
	}	

	
	function fn_9($var_24 = 50) {
		
		
		
		$var_19 = Convert::xml2raw( $var_3->var_12  );
		
	
		if( !$var_19 )
			return "";
		
		
		if( strpos( $var_19, "\n\n" ) )
			$var_19 = substr( $var_19, 0, strpos( $var_19, "\n\n" ) );
			
		$var_20 = explode( '.', $var_19 );	
		
		$var_25 = count( explode( ' ', $var_20[0] ) );
		
		
		if( $var_25 > $var_24 ) {
			return implode( ' ', array_slice( explode( ' ', $var_20[0] ), 0, $var_24 ) ).'...';
		}
		
		$var_26 = '';
		do {
			$var_26 .= trim(array_shift( $var_20 )).'.';
			if(count($var_20) > 0) {
				$var_25 += count( explode( ' ', $var_20[0] ) );
			}
			
			
			$var_27 = (substr_count($var_26,'<') != substr_count($var_26,'>')) ||
				(substr_count($var_26,'<a') != substr_count($var_26,'</a'));
			
		} while( ($var_25 < $var_24 || $var_27) && $var_20 && trim( $var_20[0] ) );
		
		if( preg_match( '/<a[^>]*>/', $var_26 ) && !preg_match( '/<\/a>/', $var_26 ) )
			$var_26 .= '</a>';
		
		$var_26 = Convert::raw2xml( $var_26 );
		return $var_26;
	}
	
	
	function fn_10($var_24 = 50, $var_28 = 1) {
		$var_26 = "";
		
		
		if($var_28) $var_19 = Convert::xml2raw( $var_3->var_12, true );
		
		if( !$var_19 )
			return "";
			
		$var_20 = explode( '.', $var_19 );	
		$var_25 = count( explode( ' ', $var_20[0] ) );
		
		
		if( $var_25 > $var_24 ) {
			return implode( ' ', array_slice( explode( ' ', $var_20[0] ), 0, $var_24 ) ).'...';
		}
		
		do {
			$var_26 .= trim(array_shift($var_20));
			if($var_20) {
				$var_26 .= '. ';
				$var_25 += count(explode(' ', $var_20[0]));
			}
			
			
			$var_27 = (substr_count($var_26,'<') != substr_count($var_26,'>')) ||
				(substr_count($var_26,'<a') != substr_count($var_26,'</a'));
		} while( ($var_25 < $var_24 || $var_27) && $var_20 && trim( $var_20[0] ) );
		
		if( preg_match( '/<a[^>]*>/', $var_26 ) && !preg_match( '/<\/a>/', $var_26 ) )
			$var_26 .= '</a>';
		
		return $var_26;
	}
	
	
	function fn_11($var_28 = 1) {
		
		
		if($var_28 && $var_28 != 'html') {
			$var_19 = Convert::xml2raw( $var_3->var_12, true );
			if( !$var_19 ) return "";
		
			
			if( strpos( $var_19, "\n\n" ) )
				$var_19 = substr( $var_19, 0, strpos( $var_19, "\n\n" ) );

			return $var_19;
		
		} else {
			if(strpos( $var_3->var_12, "</p>" ) === false) return $var_3->var_12;
			
			$var_19 = substr( $var_3->var_12, 0, strpos( $var_3->var_12, "</p>" ) + 4 );


			if(strlen($var_19) < 20 && strpos( $var_3->var_12, "</p>", strlen($var_19) )) $var_19 = substr( $var_3->var_12, 0, strpos( $var_3->var_12, "</p>", strlen($var_19) ) + 4 );
			
			return $var_19;			
		}
	}
	
	
	function fn_12($var_29 = 500, $var_30 = false, $var_31 = true, $var_32 = true, $var_33 = "... ", $var_34 = "...") {

		if(!$var_30) $var_30 = $_REQUEST['Search'];	

		
		$var_35 = $var_31 ? $var_3->fn_2() : $var_3->var_12;
		
		
		$var_36 = (int) stripos($var_35, $var_30);
		
		
		$var_36 = max(0, $var_36 - ($var_29 / 2));

		if($var_36 > 0) {
			
			$var_36 = max((int) strrpos(substr($var_35, 0, $var_36), ' '), (int) strrpos(substr($var_35, 0, $var_36), "\n"));
		}

		$var_37 = substr($var_35, $var_36, $var_29);
		$var_38 = explode(' ', $var_30);
		
		if($var_32) {
			
			if($var_38) {
			
				foreach($var_38 as $var_39) {
					if(strlen($var_39) > 2) {
						$var_37 = str_ireplace($var_39, "<span class=\"highlight\">$var_39</span>", $var_37);
					}
				}
			}
		}
		$var_37 = trim($var_37);
		
		if($var_36 > 0) $var_37 = $var_33 . $var_37;
		if(strlen($var_3->var_12) > ($var_29 + $var_36)) $var_37 = $var_37 . $var_34;
		
		return $var_37;
	}
	
	
	function fn_13($var_40 = "TextParser") {
		if($var_40 == "TextParser" || is_subclass_of($var_40, "TextParser")) {
			$var_41 = new $var_40($var_3->var_12);
			return $var_41->parse();
		} else {
			
			
			user_error("Couldn't find an appropriate TextParser sub-class to create (Looked for '$var_40'). Make sure it sub-classes TextParser and that you've done ?flush=1.", var_43);
			return Convert::raw2xml($var_3->var_12);
		}
	}
	
	
	public function fn_14($var_44 = null, $var_45 = null) {
		if(!$var_3->var_46) {
			
			return new class_1(new class_2($var_3->var_7, $var_44));
		} else {
			
			return new class_2($var_3->var_7, $var_44);
		}
	}
	
	
	public function fn_15($var_44 = null, $var_45 = null) {
		return new class_3($var_3->var_7, $var_44);
	}
}

?>
