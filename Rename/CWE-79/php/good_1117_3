<?php



class class_0 extends var_0 {

	
	protected static $var_1;

	
	protected static $var_2;

	
	protected static $var_3;

	
	public static function fn_0() {
		self::$var_1 = self::factory()->var_4->create(
			array(
				'role' => 'editor',
			)
		);

		self::$var_2 = self::factory()->var_6->create(
			array(
				'post_title'   => 'Example',
				'post_content' => "<!-- wp:core/text {\"dropCap\":true} -->\n<p class=\"has-drop-cap\">Tester</p>\n<!-- /wp:core/text -->",
			)
		);

		self::$var_3 = self::factory()->var_6->create(
			array(
				'post_title'   => 'Example',
				'post_content' => 'Tester',
			)
		);
	}

	
	public function fn_1() {
		$var_7 = 'core/fake';
		$var_8 = array(
			'render_callback' => array( $var_9, 'render_fake_block' ),
			'foo'             => 'bar',
		);

		$var_10 = new class_1( $var_7, $var_8 );

		$var_9->assertSame( $var_7, $var_10->var_7 );
		$var_9->assertSame( $var_8['render_callback'], $var_10->var_12 );
		$var_9->assertSame( $var_8['foo'], $var_10->var_13 );
	}

	
	public function fn_2() {
		$var_14 = array(
			'foo' => 'bar',
			'bar' => 'foo',
		);

		$var_10 = new class_1(
			'core/fake',
			array(
				'render_callback' => array( $var_9, 'render_fake_block' ),
			)
		);
		$var_15     = $var_10->render( $var_14 );
		$var_9->assertEquals( $var_14, json_decode( $var_15, true ) );
	}

	
	public function fn_3() {
		$var_14 = array(
			'foo' => 'bar',
			'bar' => 'foo',
		);

		$var_18 = 'baz';

		$var_19 = array_merge( $var_14, array( '_content' => $var_18 ) );

		$var_10 = new class_1(
			'core/fake',
			array(
				'render_callback' => array( $var_9, 'render_fake_block_with_content' ),
			)
		);
		$var_15     = $var_10->render( $var_14, $var_18 );
		$var_9->assertEquals( $var_19, json_decode( $var_15, true ) );
	}

	
	public function fn_4() {
		$var_10 = new class_1( 'core/fake', array() );
		$var_15     = $var_10->render();

		$var_9->assertEquals( '', $var_15 );
	}

	
	public function fn_5() {
		$var_10 = new class_1( 'core/fake', array() );

		$var_9->assertFalse( $var_10->is_dynamic() );
	}

	
	public function fn_6() {
		$var_10 = new class_1(
			'core/fake',
			array(
				'render_callback' => array( $var_9, 'render_fake_block' ),
			)
		);

		$var_9->assertTrue( $var_10->is_dynamic() );
	}

	
	public function fn_7() {
		$var_14 = array(
			'correct'            => 'include',
			'wrongType'          => 5,
			'wrongTypeDefaulted' => 5,
			
			'undefined'          => 'include',
			'intendedNull'       => null,
		);

		$var_10 = new class_1(
			'core/fake',
			array(
				'attributes' => array(
					'correct'            => array(
						'type' => 'string',
					),
					'wrongType'          => array(
						'type' => 'string',
					),
					'wrongTypeDefaulted' => array(
						'type'    => 'string',
						'default' => 'defaulted',
					),
					'missingDefaulted'   => array(
						'type'    => 'string',
						'default' => 'define',
					),
					'intendedNull'       => array(
						'type'    => array( 'string', 'null' ),
						'default' => 'wrong',
					),
				),
			)
		);

		$var_23 = $var_10->prepare_attributes_for_render( $var_14 );

		$var_9->assertEquals(
			array(
				'correct'            => 'include',
				
				'wrongTypeDefaulted' => 'defaulted',
				'missingDefaulted'   => 'define',
				'undefined'          => 'include',
				'intendedNull'       => null,
			),
			$var_23
		);
	}

	
	function fn_8() {
		$var_14 = array( 'exists' => 'keep' );

		$var_10 = new class_1( 'core/dummy', array() );

		$var_23 = $var_10->prepare_attributes_for_render( $var_14 );

		$var_9->assertEquals( $var_14, $var_23 );
	}

	
	public function fn_9() {
		$var_25 = 'before' .
		'<!-- wp:core/fake --><!-- /wp:core/fake -->' .
		'<!-- wp:core/fake_atts {"value":"b1"} --><!-- /wp:core/fake_atts -->' .
		'<!-- wp:core/fake-child -->
		<p>testing the test</p>
		<!-- /wp:core/fake-child -->' .
		'between' .
		'<!-- wp:core/self-close-fake /-->' .
		'<!-- wp:custom/fake {"value":"b2"} /-->' .
		'after';

		$var_9->assertTrue( has_block( 'core/fake', $var_25 ) );

		$var_9->assertTrue( has_block( 'core/fake_atts', $var_25 ) );

		$var_9->assertTrue( has_block( 'core/fake-child', $var_25 ) );

		$var_9->assertTrue( has_block( 'core/self-close-fake', $var_25 ) );

		$var_9->assertTrue( has_block( 'custom/fake', $var_25 ) );

		
		$var_9->assertFalse( has_block( 'core/fak', $var_25 ) );

		
		$var_9->assertFalse( has_block( 'custom/fake_atts', $var_25 ) );

		
		$var_9->assertFalse( has_block( 'core', $var_25 ) );
	}

	
	public function fn_10() {
		
		$var_26 = 'before' .
		'<!- - wp:core/weird-space --><!-- /wp:core/weird-space -->' .
		'<!--wp:core/untrimmed-left --><!-- /wp:core/untrimmed -->' .
		'<!-- wp:core/fake --><!-- /wp:core/fake -->' .
		'<!-- wp:core/untrimmed-right--><!-- /wp:core/untrimmed2 -->' .
		'after';

		$var_9->assertFalse( has_block( 'core/text', self::$var_3 ) );

		$var_9->assertFalse( has_block( 'core/weird-space', $var_26 ) );

		$var_9->assertFalse( has_block( 'core/untrimmed-left', $var_26 ) );

		$var_9->assertFalse( has_block( 'core/untrimmed-right', $var_26 ) );

		$var_9->assertTrue( has_block( 'core/fake', $var_26 ) );
	}

	
	public function fn_11() {
		
		$var_9->assertFalse( has_block( 'custom/fake', self::$var_2 ) );

		
		$var_9->assertFalse( has_block( 'core/text' ) );
		$var_9->assertFalse( has_block( 'core/fake' ) );

		global $var_6;
		$var_6 = get_post( self::$var_2 );

		
		$var_9->assertTrue( has_block( 'core/text' ) );
		
		$var_9->assertFalse( has_block( 'core/fake' ) );
	}

	public function fn_12() {
		$var_18 = '<!-- wp:serialized /--><!-- wp:core/normalized /--><!-- wp:plugin/third-party /-->';

		$var_9->assertTrue( has_block( 'core/serialized', $var_18 ) );

		
		$var_9->assertTrue( has_block( 'serialized', $var_18 ) );
		$var_9->assertTrue( has_block( 'core/normalized', $var_18 ) );
		$var_9->assertTrue( has_block( 'normalized', $var_18 ) );
		$var_9->assertFalse( has_block( 'plugin/normalized', $var_18 ) );
		$var_9->assertFalse( has_block( 'plugin/serialized', $var_18 ) );
		$var_9->assertFalse( has_block( 'third-party', $var_18 ) );
		$var_9->assertFalse( has_block( 'core/third-party', $var_18 ) );
	}

	
	public function fn_13( $var_14 ) {
		return json_encode( $var_14 );
	}

	
	public function fn_14( $var_14, $var_18 ) {
		$var_14['_content'] = $var_18;

		return json_encode( $var_14 );
	}

	
	public function fn_15( $var_18, $var_19 ) {
		$var_9->assertSame( $var_19, block_version( $var_18 ) );
	}

	
	public function fn_16() {
		return array(
			
			array( null, 0 ),
			
			array( '', 0 ),
			
			array( '<hr class="wp-block-separator" />', 0 ),
			
			array( '<!-- wp:core/separator -->', 1 ),
			
			array( '<!-- wp:core/fake --><!-- /wp:core/fake -->', 1 ),
			
			array( '<!- - wp:core/separator -->', 0 ),
		);
	}
}
