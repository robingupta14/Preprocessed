<?php defined('SYSPATH') or die('No direct script access.');


class class_0 extends var_0 {

	public function fn_0($var_1)
	{
		parent::fn_0($var_1);
	}

	public function fn_1()
	{
		
		if ($var_2->var_1->verify_array_index($var_2->var_4, 'by'))
		{
			$var_2->var_5 = $var_2->var_4['by'];

			switch ($var_2->var_5)
			{
				case "all" :
					
					if (!$var_2->var_1->_login(TRUE))
					{
						$var_2->var_7 = $var_2->fn_2();
						return;
					}
					
					$var_2->var_7 = $var_2->fn_3();
					break;

				case "spam" :
					
					if (!$var_2->var_1->_login(TRUE))
					{
						$var_2->set_error_message($var_2->response(2));
						return;
					}

					$var_2->var_7 = $var_2->fn_4();
					break;

				case "pending" :
					
					if (!$var_2->var_1->_login(TRUE))
					{
						$var_2->set_error_message($var_2->response(2));
						return;
					}

					$var_2->var_7 = $var_2->fn_5();
					break;

				case "approved" :
					$var_2->var_7 = $var_2->fn_2();
					break;

				case "reportid" :
					if (!$var_2->var_1->verify_array_index($var_2->var_4, 'id'))
					{
						$var_2->set_error_message(array("error" => $var_2->var_1->get_error_msg(1, 'id')));
						return;
					}
					else
					{
						$var_2->var_7 = $var_2->fn_6($var_2->check_id_value($var_2->var_4['id']));
					}
					break;

				case "checkinid" :
					if (!$var_2->var_1->verify_array_index($var_2->var_4, 'id'))
					{
						$var_2->set_error_message(array("error" => $var_2->var_1->get_error_msg(1, 'id')));
						return;
					}
					else
					{
						$var_2->var_7 = $var_2->fn_7($var_2->check_id_value($var_2->var_4['id']));
					}
					break;
				default :
					$var_2->set_error_message(array("error" => $var_2->var_1->get_error_msg(2)));
			}

			return;
		}

		
		else if ($var_2->var_1->verify_array_index($var_2->var_4, 'action'))
		{
			$var_2->fn_8();
			return;
		}
		else
		{

			$var_2->set_error_message(array("error" => $var_2->var_1->get_error_msg(1, 'by or action')));
			return;

		}

	}

	
	public function fn_8()
	{
		$var_19 = '';
		

		if (!$var_2->var_1->verify_array_index($var_2->var_4, 'action'))
		{
			$var_2->set_error_message(array("error" => $var_2->var_1->get_error_msg(1, 'action')));
			return;
		}
		else
		{
			$var_19 = $var_2->var_4['action'];
		}

		switch ($var_19)
		{
			case "approve" :
				
				if (!$var_2->var_1->_login(TRUE))
				{
					$var_2->set_error_message($var_2->response(2));
					return;
				}

				
				$var_2->var_7 = $var_2->fn_9();
				break;

			case "add" :
				
				$var_2->var_7 = $var_2->fn_10();
				break;

			case "delete" :
				
				if (!$var_2->var_1->_login(TRUE))
				{
					$var_2->set_error_message($var_2->response(2));
					return;
				}
				
				
				$var_2->var_7 = $var_2->fn_11();
				break;

			case "spam" :
				
				if (!$var_2->var_1->_login(TRUE))
				{
					$var_2->set_error_message($var_2->response(2));
					return;
				}
				
				
				$var_2->var_7 = $var_2->fn_12();
				break;

			default :
				$var_2->set_error_message(array("error" => $var_2->var_1->get_error_msg(2)));
		}
	}

	
	private function fn_13($var_25 = array(), $var_26 = '')
	{

		$var_27 = new class_1();
		$var_28 = array();
		$var_29 = array();

		$var_30 = ORM::factory('comment')
			->orderby('comment_date','desc')
			->where($var_25)
			->limit($var_2->var_32);
		

		$var_33 = $var_30->find_all();

		
		$var_2->var_35 = $var_33->count();

		if ($var_2->var_37 == "xml")
		{
			$var_27->openMemory();
			$var_27->startDocument('1.0', 'UTF-8');
			$var_27->startElement('response');
			$var_27->startElement('payload');
			$var_27->writeElement('domain', $var_2->var_42);
			$var_27->startElement('comments');
		}

		
		if ($var_33->count() == 0)
		{
			return $var_2->response(4);
		}

		foreach ($var_33 as $var_43)
		{
			if ($var_2->var_37 == "json" OR $var_2->var_37 == "jsonp")
			{
				$var_29[] = $var_43->as_array();
			}
			else
			{
				$var_27->startElement('comment');

				$var_27->writeElement('id', $var_43->var_45);
				$var_27->writeElement('incident_id', $var_43->var_46);
				$var_27->writeElement('user_id', $var_43->var_47);
				$var_27->writeElement('comment_author', $var_43->var_48);
				$var_27->writeElement('comment_description', $var_43->var_49);
				$var_27->writeElement('comment_date', $var_43->var_50);

				$var_27->endElement();
				
			}
		}

		if ($var_2->var_37 == "xml")
		{
			$var_27->endElement();
			
			$var_27->endElement();
			
			$var_27->startElement('error');
			$var_27->writeElement('code', 0);
			$var_27->writeElement('message', 'No Error');
			$var_27->endElement();
			
			$var_27->endElement();
			

			return $var_27->outputMemory(true);
		}
		else
		{
			$var_28 = array("payload" => array("comments" => $var_29));

			return $var_2->array_as_json($var_28);
		}
	}

	
	private function fn_4()
	{
		$var_25 = array('comment_spam' => 1);

		return $var_2->fn_13($var_25);
	}

	
	private function fn_3()
	{
		$var_25 = array('comment_spam' => 0);

		return $var_2->fn_13($var_25);
	}

	
	private function fn_2()
	{
		$var_25 = array('comment_spam' => 0,'comment_active' => 1);

		return $var_2->fn_13($var_25);

	}

	
	private function fn_5()
	{
		$var_25 = array('comment_spam' => 0, 'comment_active' => 0);

		return $var_2->fn_13($var_25);
	}

	
	private function fn_12()
	{
		$var_54 = array('comment_id' => '');

		$var_55 = 0;

		if ($var_56)
		{
			$var_57 = Validation::factory($var_56);

			
			$var_57->pre_filter('trim', TRUE);
			
			
			$var_57->add_rules('comment_id', 'required', 'numeric');

			if ($var_57->validate(FALSE))
			{
				$var_61 = $var_57->var_61;
				$var_62 = new class_2($var_61);

				if ($var_62->var_63 == true)
				{
					
					if ($var_57->var_19 == strtolower('s'))
					{
						$var_62->var_64 = '0';
						$var_62->var_65 = '1';
					}
					
					elseif ($var_57->var_19 == strtolower('n'))
					{
						$var_62->var_64 = '1';
						$var_62->var_65 = '0';
					}

					$var_62->save();
				}
				else
				{
					
					
					$var_2->var_67 .= "Comment ID does not exist.";
					$var_55 = 1;

				}
			}
			else
			{
				
				$var_2->var_67 .= "Comment ID is required.";
				$var_55 = 1;
			}

		}
		else
		{
			$var_55 = 3;
		}

		return $var_2->response($var_55, $var_2->var_67);

	}

	
	private function fn_11()
	{
		$var_54 = array('comment_id' => '');

		$var_68 = $var_54;
		$var_69 = FALSE;

		$var_55 = 0;

		if ($var_56)
		{
			$var_57 = Validation::factory($var_56);

			
			$var_57->pre_filter('trim', TRUE);
			
			
			$var_57->add_rules('comment_id', 'required', 'numeric');

			if ($var_57->validate(FALSE))
			{
				$var_61 = $var_57->var_61;
				$var_62 = new class_2($var_61);
				if ($var_62->var_63 == true)
				{
					$var_62->delete();
				}
				else
				{
					
					
					$var_2->var_67 .= "Comment ID does not exist.";
					$var_2->var_55 = 1;

				}
			}
			else
			{
				
				$var_2->var_67 .= "Comment ID is required.";
				$var_55 = 1;
			}

		}
		else
		{
			$var_55 = 3;
		}

		return $var_2->response($var_55, $var_2->var_67);
	}

	
	private function fn_9()
	{
		$var_54 = array('comment_id' => '', );

		$var_68 = $var_54;
		$var_69 = FALSE;

		$var_55 = 0;

		if ($var_56)
		{
			$var_57 = Validation::factory($var_56);

			
			$var_57->pre_filter('trim', TRUE);
			
			
			$var_57->add_rules('comment_id', 'required', 'numeric');

			if ($var_57->validate(FALSE))
			{
				$var_61 = $var_57->var_61;
				$var_62 = new class_2($var_61);
				if ($var_62->var_63 == true)
				{
					
					if ($var_57->var_19 == strtolower('a'))
					{
						$var_62->var_64 = '1';
						$var_62->var_65 = '0';
					}
					else if ($var_57->var_19 == strtolower('u'))
					{
						$var_62->var_64 = '0';
					}

					$var_62->save();
				}
				else
				{
					
					
					$var_2->var_67 .= "Comment ID does not exist.";
					$var_55 = 1;

				}
			}
			else
			{
				
				$var_2->var_67 .= "Comment ID is required.";
				$var_55 = 1;
			}

		}
		else
		{
			$var_55 = 3;
		}

		return $var_2->response($var_55, $var_2->var_67);
	}

	
	private function fn_10()
	{
		$var_71 = Kohana::config('settings.api_akismet');

		
		

		$var_54 = array('incident_id' => '', 'comment_author' => '', 'comment_description' => '', 'comment_email' => '', );

		$var_72 = Captcha::factory();
		$var_68 = $var_54;
		$var_69 = FALSE;
		$var_55 = 0;

		

		if ($var_56 AND Kohana::config('settings.allow_comments'))
		{
			

			$var_57 = Validation::factory($var_56);

			

			$var_57->pre_filter('trim', TRUE);

			

			
			if (isset($var_57->var_73))
			{
				$var_57->add_rules('checkin_id', 'required');
			}
			else
			{
				$var_57->add_rules('incident_id', 'required');
			}

			
			if (empty($var_57->var_48) OR empty($var_57->var_74))
			{
				if (!$var_2->var_1->_login())
				{
					$var_2->set_error_message($var_2->response(2));
					return;
				}
			}

			
			$var_75 = Auth::instance();

			
			if ($var_75->logged_in())
			{
				$var_47 = $var_75->get_user()->var_45;
			}
			else
			{
				$var_47 = NULL;
				$var_57->add_rules('comment_author', 'required', 'length[3,100]');
				$var_57->add_rules('comment_email', 'required', 'email', 'length[4,100]');
			}
			
			$var_57->add_rules('comment_description', 'required');

			

			if ($var_57->validate(FALSE))
			{
				

				$var_46 = NULL;
				$var_73 = NULL;

				if (isset($var_57->var_73))
				{
					$var_78 = ORM::factory('checkin')->where('id', $var_57->var_73)->find();
					if ($var_78->var_45 == 0)
					{
						return $var_2->response(1, "No checkins with that ID");
					}
					$var_73 = $var_57->var_73;
					$var_80 = '';
					$var_81 = $var_78->var_82;
				}
				else
				{
					$var_83 = ORM::factory('incident')->where('id', $var_57->var_46)->where('incident_active', 1)->find();
					if ($var_83->var_45 == 0)
					{
						return $var_2->response(1, "No incidents with that ID");
					}
					$var_46 = $var_57->var_46;
					$var_80 = url::base() . 'reports/view/' . $var_57->var_46;
					$var_81 = $var_83->var_84;
				}

				if ($var_47 == NULL)
				{
					$var_48 = $var_57->var_48;
					$var_74 = $var_57->var_74;
				}
				else
				{
					$var_48 = $var_75->get_user()->var_85;
					$var_74 = $var_75->get_user()->var_86;
				}

				if ($var_71 != "")
				{
					

					$var_87 = new class_3();

					

					$var_62 = array('author' => $var_48, 'email' => $var_74, 'website' => "", 'body' => $var_57->var_49, 'user_ip' => $_SERVER['REMOTE_ADDR']);

					$var_88 = array('blog_url' => url::site(), 'api_key' => $var_71, 'comment' => $var_62);

					$var_87->init($var_88);

					if ($var_87->errors_exist())
					{
						if ($var_87->is_error('AKISMET_INVALID_KEY'))
						{
							

						}
						elseif ($var_87->is_error('AKISMET_RESPONSE_FAILED'))
						{

							

						}
						elseif ($var_87->is_error('AKISMET_SERVER_NOT_FOUND'))
						{

							

						}

						
						
						

						$var_65 = 0;
					}
					else
					{
						$var_92 = ($var_87->is_spam()) ? 1 : 0;
					}
				}
				else
				{
					
					$var_65 = 0;
				}

				$var_62 = new class_2();
				$var_62->var_46 = intval($var_46);
				$var_62->var_73 = intval($var_73);
				$var_62->var_48 = html::strip_tags($var_48, FALSE);
				$var_62->var_49 = html::strip_tags($var_57->var_49, FALSE);
				$var_62->var_74 = html::strip_tags($var_74, FALSE);
				$var_62->var_94 = $_SERVER['REMOTE_ADDR'];
				$var_62->var_50 = date("Y-m-d H:i:s", time());

				
				if ($var_65 == 1)
				{
					$var_62->var_65 = 1;
					$var_62->var_64 = 0;
				}
				else
				{
					$var_62->var_65 = 0;
					
					$var_62->var_64 = (Kohana::config('settings.allow_comments') == 1) ? 1 : 0;
				}
				$var_62->save();

				
				$var_95 = notifications::notify_admins("[" . Kohana::config('settings.site_name') . "] " . Kohana::lang('notifications.admin_new_comment.subject'), Kohana::lang('notifications.admin_new_comment.message') . "\n\n'" . $var_81 . "'" . "\n" . $var_80 . "\n\n" . strip_tags($var_57->var_49));
			}
			else
			{

				

				

				$var_54 = arr::overwrite($var_54, $var_57->as_array());

				

				$var_68 = arr::overwrite($var_68, $var_57->errors('comments'));

				foreach ($var_68 as $var_96 => $var_97)
				{
					if (!is_array($var_97))
					{
						$var_2->var_67 .= $var_97;

						if ($var_97 != end($var_68))
						{
							$var_2->var_67 .= " - ";
						}
					}
				}

				$var_55 = 1;
				
			}
		}
		else
		{
			$var_55 = 3;
		}

		return $var_2->response($var_55, $var_2->var_67);
	}

	
	private function fn_6($var_45)
	{
		$var_98 = array();
		$var_99 = '';
		$var_100 = 0;

		
		if (Kohana::config('settings.allow_comments'))
		{

			$var_101 = array();
			if ($var_45)
			{
				$var_2->var_30 = "SELECT id, incident_id, comment_author, ";
				$var_2->var_30 .= "comment_description, comment_date ";
				$var_2->var_30 .= "FROM " . $var_2->var_102 . "`comment`";
				$var_2->var_30 .= " WHERE `incident_id` = " . $var_2->var_103->escape_str($var_45) . " AND `comment_active` = '1' ";
				$var_2->var_30 .= "AND `comment_spam` = '0' ORDER BY `comment_date` ASC";
				$var_101 = $var_2->var_103->query($var_2->var_30);

				if ($var_101->count() == 0)
					return $var_2->response(4);

				foreach ($var_101 as $var_62)
				{
					
					if ($var_2->var_37 == 'json' OR $var_2->var_37 == 'jsonp')
					{
						$var_98[] = array("comment" => $var_62);
					}
					else
					{
						$var_98['comment' . $var_100] = array("comment" => $var_62);
						$var_2->var_107[] = 'comment' . $var_100;
					}

					$var_100++;
				}
				
				$var_105 = array("payload" => array("domain" => $var_2->var_42, "comments" => $var_98), "error" => $var_2->var_1->get_error_msg(0));

				$var_99 = ($var_2->var_37 == 'json' OR $var_2->var_37 == 'jsonp') ? $var_2->array_as_json($var_105) : $var_2->array_as_xml($var_105, $var_2->var_107);

				return $var_99;
			}
			else
			{
				
				return $var_2->response(1, "No report with that ID");
			}

		}
		else
		{
			
			return $var_2->response(1, "Commenting is not activated on this deployment");
		}
	}

	
	private function fn_7($var_45)
	{
		$var_98 = array();
		$var_99 = '';
		$var_100 = 0;

		
		if (Kohana::config('settings.allow_comments'))
		{

			$var_108 = array();
			if ($var_45)
			{
				$var_2->var_30 = "SELECT id, checkin_id, comment_author, ";
				$var_2->var_30 .= "comment_description, comment_date ";
				$var_2->var_30 .= "FROM " . $var_2->var_102 . "`comment`";
				$var_2->var_30 .= " WHERE `checkin_id` = " . $var_2->var_103->escape_str($var_45) . " AND `comment_active` = '1' ";
				$var_2->var_30 .= "AND `comment_spam` = '0' ORDER BY `comment_date` ASC";
				$var_108 = $var_2->var_103->query($var_2->var_30);

				if ($var_108->count() == 0)
					return $var_2->response(4);

				foreach ($var_108 as $var_62)
				{
					
					if ($var_2->var_37 == 'json' OR $var_2->var_37 == 'jsonp')
					{
						$var_98[] = array("comment" => $var_62);
					}
					else
					{
						$var_98['comment' . $var_100] = array("comment" => $var_62);
						$var_2->var_107[] = 'comment' . $var_100;
					}

					$var_100++;
				}
				
				$var_105 = array("payload" => array("domain" => $var_2->var_42, "comments" => $var_98), "error" => $var_2->var_1->get_error_msg(0));

				$var_99 = ($var_2->var_37 == 'json' OR $var_2->var_37 == 'jsonp') ? $var_2->array_as_json($var_105) : $var_2->array_as_xml($var_105, $var_2->var_107);

				return $var_99;
			}
			else
			{
				
				return $var_2->response(1, "No checkins with that ID");
			}

		}
		else
		{
			
			return $var_2->response(1, "Commenting is not activated on this deployment");
		}
	}

}
