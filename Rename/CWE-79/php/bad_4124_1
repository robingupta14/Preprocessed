<?php



class var_0 extends var_1
{
    public function fn_0()
    {
        $var_2->var_3 = true;
        $var_2->var_4 = Context::getContext();
        $var_2->var_5 = 'customer_thread';
        $var_2->var_6 = 'CustomerThread';
        $var_2->var_7 = false;

        $var_8 = array();
        $var_9 = class_4::getContacts($var_2->var_4->var_10->var_11);

        foreach ($var_9 as $var_12) {
            $var_8[$var_12['id_contact']] = $var_12['name'];
        }

        $var_13 = array();
        $var_14 = class_5::getLanguages();
        foreach ($var_14 as $var_10) {
            $var_13[$var_10['id_lang']] = $var_10['name'];
        }

        parent::fn_0();

        $var_15 = array(
            'open' => array('class' => 'icon-circle text-success', 'alt' => $var_2->trans('Open', array(), 'Admin.Catalog.Feature')),
            'closed' => array('class' => 'icon-circle text-danger', 'alt' => $var_2->trans('Closed', array(), 'Admin.Catalog.Feature')),
            'pending1' => array('class' => 'icon-circle text-warning', 'alt' => $var_2->trans('Pending 1', array(), 'Admin.Catalog.Feature')),
            'pending2' => array('class' => 'icon-circle text-warning', 'alt' => $var_2->trans('Pending 2', array(), 'Admin.Catalog.Feature')),
        );

        $var_17 = array();
        foreach ($var_15 as $var_18 => $var_19) {
            $var_17[$var_18] = $var_19['alt'];
        }

        $var_2->var_20 = array(
            'id_customer_thread' => array(
                'title' => $var_2->trans('ID', array(), 'Admin.Global'),
                'align' => 'center',
                'class' => 'fixed-width-xs',
            ),
            'customer' => array(
                'title' => $var_2->trans('Customer', array(), 'Admin.Global'),
                'filter_key' => 'customer',
                'tmpTableFilter' => true,
            ),
            'email' => array(
                'title' => $var_2->trans('Email', array(), 'Admin.Global'),
                'filter_key' => 'a!email',
            ),
            'contact' => array(
                'title' => $var_2->trans('Type', array(), 'Admin.Catalog.Feature'),
                'type' => 'select',
                'list' => $var_8,
                'filter_key' => 'cl!id_contact',
                'filter_type' => 'int',
            ),
            'language' => array(
                'title' => $var_2->trans('Language', array(), 'Admin.Global'),
                'type' => 'select',
                'list' => $var_13,
                'filter_key' => 'l!id_lang',
                'filter_type' => 'int',
            ),
            'status' => array(
                'title' => $var_2->trans('Status', array(), 'Admin.Global'),
                'type' => 'select',
                'list' => $var_17,
                'icon' => $var_15,
                'align' => 'center',
                'filter_key' => 'a!status',
                'filter_type' => 'string',
            ),
            'employee' => array(
                'title' => $var_2->trans('Employee', array(), 'Admin.Global'),
                'filter_key' => 'employee',
                'tmpTableFilter' => true,
            ),
            'messages' => array(
                'title' => $var_2->trans('Messages', array(), 'Admin.Catalog.Feature'),
                'filter_key' => 'messages',
                'tmpTableFilter' => true,
                'maxlength' => 40,
            ),
            'private' => array(
                'title' => $var_2->trans('Private', array(), 'Admin.Catalog.Feature'),
                'type' => 'select',
                'filter_key' => 'private',
                'align' => 'center',
                'cast' => 'intval',
                'callback' => 'printOptinIcon',
                'list' => array(
                    '0' => $var_2->trans('No', array(), 'Admin.Global'),
                    '1' => $var_2->trans('Yes', array(), 'Admin.Global'),
                ),
            ),
            'date_upd' => array(
                'title' => $var_2->trans('Last message', array(), 'Admin.Catalog.Feature'),
                'havingFilter' => true,
                'type' => 'datetime',
            ),
        );

        $var_2->var_21 = array(
            'delete' => array(
                'text' => $var_2->trans('Delete selected', array(), 'Admin.Actions'),
                'confirm' => $var_2->trans('Delete selected items?', array(), 'Admin.Notifications.Warning'),
                'icon' => 'icon-trash',
            ),
        );

        $var_2->var_22 = 'shop';

        $var_2->var_23 = array(
            'contact' => array(
                'title' => $var_2->trans('Contact options', array(), 'Admin.Catalog.Feature'),
                'fields' => array(
                    'PS_CUSTOMER_SERVICE_FILE_UPLOAD' => array(
                        'title' => $var_2->trans('Allow file uploading', array(), 'Admin.Catalog.Feature'),
                        'hint' => $var_2->trans('Allow customers to upload files using the contact page.', array(), 'Admin.Catalog.Help'),
                        'type' => 'bool',
                    ),
                    'PS_CUSTOMER_SERVICE_SIGNATURE' => array(
                        'title' => $var_2->trans('Default message', array(), 'Admin.Catalog.Feature'),
                        'hint' => $var_2->trans('Please fill out the message fields that appear by default when you answer a thread on the customer service page.', array(), 'Admin.Catalog.Help'),
                        'type' => 'textareaLang',
                        'lang' => true,
                    ),
                ),
                'submit' => array('title' => $var_2->trans('Save', array(), 'Admin.Actions')),
            ),
            'general' => array(
                'title' => $var_2->trans('Customer service options', array(), 'Admin.Catalog.Feature'),
                'fields' => array(
                    'PS_SAV_IMAP_URL' => array(
                        'title' => $var_2->trans('IMAP URL', array(), 'Admin.Catalog.Feature'),
                        'hint' => $var_2->trans('URL for your IMAP server (ie.: mail.server.com).', array(), 'Admin.Catalog.Help'),
                        'type' => 'text',
                        'validation' => 'isValidImapUrl',
                    ),
                    'PS_SAV_IMAP_PORT' => array(
                        'title' => $var_2->trans('IMAP port', array(), 'Admin.Catalog.Feature'),
                        'hint' => $var_2->trans('Port to use to connect to your IMAP server.', array(), 'Admin.Catalog.Help'),
                        'type' => 'text',
                        'defaultValue' => 143,
                    ),
                    'PS_SAV_IMAP_USER' => array(
                        'title' => $var_2->trans('IMAP user', array(), 'Admin.Catalog.Feature'),
                        'hint' => $var_2->trans('User to use to connect to your IMAP server.', array(), 'Admin.Catalog.Help'),
                        'type' => 'text',
                    ),
                    'PS_SAV_IMAP_PWD' => array(
                        'title' => $var_2->trans('IMAP password', array(), 'Admin.Catalog.Feature'),
                        'hint' => $var_2->trans('Password to use to connect your IMAP server.', array(), 'Admin.Catalog.Help'),
                        'type' => 'text',
                    ),
                    'PS_SAV_IMAP_DELETE_MSG' => array(
                        'title' => $var_2->trans('Delete messages', array(), 'Admin.Catalog.Feature'),
                        'hint' => $var_2->trans('Delete messages after synchronization. If you do not enable this option, the synchronization will take more time.', array(), 'Admin.Catalog.Help'),
                        'type' => 'bool',
                    ),
                    'PS_SAV_IMAP_CREATE_THREADS' => array(
                        'title' => $var_2->trans('Create new threads', array(), 'Admin.Catalog.Feature'),
                        'hint' => $var_2->trans('Create new threads for unrecognized emails.', array(), 'Admin.Catalog.Help'),
                        'type' => 'bool',
                    ),
                    'PS_SAV_IMAP_OPT_POP3' => array(
                        'title' => $var_2->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/pop3)',
                        'hint' => $var_2->trans('Use POP3 instead of IMAP.', array(), 'Admin.Catalog.Help'),
                        'type' => 'bool',
                    ),
                    'PS_SAV_IMAP_OPT_NORSH' => array(
                        'title' => $var_2->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/norsh)',
                        'type' => 'bool',
                        'hint' => $var_2->trans('Do not use RSH or SSH to establish a preauthenticated IMAP sessions.', array(), 'Admin.Catalog.Help'),
                    ),
                    'PS_SAV_IMAP_OPT_SSL' => array(
                        'title' => $var_2->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/ssl)',
                        'type' => 'bool',
                        'hint' => $var_2->trans('Use the Secure Socket Layer (TLS/SSL) to encrypt the session.', array(), 'Admin.Catalog.Help'),
                    ),
                    'PS_SAV_IMAP_OPT_VALIDATE-CERT' => array(
                        'title' => $var_2->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/validate-cert)',
                        'type' => 'bool',
                        'hint' => $var_2->trans('Validate certificates from the TLS/SSL server.', array(), 'Admin.Catalog.Help'),
                    ),
                    'PS_SAV_IMAP_OPT_NOVALIDATE-CERT' => array(
                        'title' => $var_2->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/novalidate-cert)',
                        'type' => 'bool',
                        'hint' => $var_2->trans('Do not validate certificates from the TLS/SSL server. This is only needed if a server uses self-signed certificates.', array(), 'Admin.Catalog.Help'),
                    ),
                    'PS_SAV_IMAP_OPT_TLS' => array(
                        'title' => $var_2->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/tls)',
                        'type' => 'bool',
                        'hint' => $var_2->trans('Force use of start-TLS to encrypt the session, and reject connection to servers that do not support it.', array(), 'Admin.Catalog.Help'),
                    ),
                    'PS_SAV_IMAP_OPT_NOTLS' => array(
                        'title' => $var_2->trans('IMAP options', array(), 'Admin.Catalog.Feature') . ' (/notls)',
                        'type' => 'bool',
                        'hint' => $var_2->trans('Do not use start-TLS to encrypt the session, even with servers that support it.', array(), 'Admin.Catalog.Help'),
                    ),
                ),
                'submit' => array('title' => $var_2->trans('Save', array(), 'Admin.Actions')),
            ),
        );
    }

    public function fn_1()
    {
        
        $var_2->fn_2();

        $var_2->addRowAction('view');
        $var_2->addRowAction('delete');

        $var_2->var_26 = '
			CONCAT(c.`firstname`," ",c.`lastname`) as customer, cl.`name` as contact, l.`name` as language, group_concat(cm.`message`) as messages, cm.private,
			(
				SELECT IFNULL(CONCAT(LEFT(e.`firstname`, 1),". ",e.`lastname`), "--")
				FROM `' . var_27 . 'customer_message` cm2
				INNER JOIN ' . var_27 . 'employee e
					ON e.`id_employee` = cm2.`id_employee`
				WHERE cm2.id_employee > 0
					AND cm2.`id_customer_thread` = a.`id_customer_thread`
				ORDER BY cm2.`date_add` DESC LIMIT 1
			) as employee';

        $var_2->var_28 = '
			LEFT JOIN `' . var_27 . 'customer` c
				ON c.`id_customer` = a.`id_customer`
			LEFT JOIN `' . var_27 . 'customer_message` cm
				ON cm.`id_customer_thread` = a.`id_customer_thread`
			LEFT JOIN `' . var_27 . 'lang` l
				ON l.`id_lang` = a.`id_lang`
			LEFT JOIN `' . var_27 . 'contact_lang` cl
				ON (cl.`id_contact` = a.`id_contact` AND cl.`id_lang` = ' . (int) $var_2->var_4->var_10->var_11 . ')';

        if ($var_29 = Tools::getValue('id_order')) {
            $var_2->var_30 .= ' AND id_order = ' . (int) $var_29;
        }

        $var_2->var_31 = 'GROUP BY cm.id_customer_thread';
        $var_2->var_32 = 'id_customer_thread';
        $var_2->var_33 = 'DESC';

        $var_9 = class_2::getContacts();

        $var_34 = class_4::getCategoriesContacts();

        $var_35 = array(
            $var_2->trans('Total threads', array(), 'Admin.Catalog.Feature') => $var_36 = class_2::getTotalCustomerThreads(),
            $var_2->trans('Threads pending', array(), 'Admin.Catalog.Feature') => $var_37 = class_2::getTotalCustomerThreads('status LIKE "%pending%"'),
            $var_2->trans('Total number of customer messages', array(), 'Admin.Catalog.Feature') => class_0::getTotalCustomerMessages('id_employee = 0'),
            $var_2->trans('Total number of employee messages', array(), 'Admin.Catalog.Feature') => class_0::getTotalCustomerMessages('id_employee != 0'),
            $var_2->trans('Unread threads', array(), 'Admin.Catalog.Feature') => $var_38 = class_2::getTotalCustomerThreads('status = "open"'),
            $var_2->trans('Closed threads', array(), 'Admin.Catalog.Feature') => $var_36 - ($var_38 + $var_37),
        );

        $var_2->var_39 = array(
            'contacts' => $var_9,
            'categories' => $var_34,
            'params' => $var_35,
        );

        return parent::fn_1();
    }

    public function fn_3()
    {
        parent::fn_3();
        unset($var_2->toolbar_btn['new']);
    }

    public function fn_4($var_40, $var_41)
    {
        return $var_40 ? '<i class="icon-check"></i>' : '<i class="icon-remove"></i>';
    }

    public function fn_5()
    {
        if ($var_42 = (int) Tools::getValue('id_customer_thread')) {
            if (($var_43 = (int) Tools::getValue('id_contact'))) {
                $var_44 = Db::getInstance()->execute(
                    '
					UPDATE ' . var_27 . 'customer_thread
					SET id_contact = ' . $var_43 . '
					WHERE id_customer_thread = ' . $var_42
                );
                if ($var_44) {
                    $var_2->var_46->var_43 = $var_43;
                }
            }
            if ($var_47 = (int) Tools::getValue('setstatus')) {
                $var_17 = array(1 => 'open', 2 => 'closed', 3 => 'pending1', 4 => 'pending2');
                $var_44 = Db::getInstance()->execute('
					UPDATE ' . var_27 . 'customer_thread
					SET status = "' . $var_17[$var_47] . '"
					WHERE id_customer_thread = ' . $var_42 . ' LIMIT 1
				');
                if ($var_44) {
                    $var_2->var_46->var_48 = $var_17[$var_47];
                }
            }
            if (isset($_POST['id_employee_forward'])) {
                $var_49 = Db::getInstance()->getRow('
					SELECT ct.*, cm.*, cl.name subject, CONCAT(e.firstname, \' \', e.lastname) employee_name,
						CONCAT(c.firstname, \' \', c.lastname) customer_name, c.firstname
					FROM ' . var_27 . 'customer_thread ct
					LEFT JOIN ' . var_27 . 'customer_message cm
						ON (ct.id_customer_thread = cm.id_customer_thread)
					LEFT JOIN ' . var_27 . 'contact_lang cl
						ON (cl.id_contact = ct.id_contact AND cl.id_lang = ' . (int) $var_2->var_4->var_10->var_11 . ')
					LEFT OUTER JOIN ' . var_27 . 'employee e
						ON e.id_employee = cm.id_employee
					LEFT OUTER JOIN ' . var_27 . 'customer c
						ON (c.email = ct.email)
					WHERE ct.id_customer_thread = ' . (int) Tools::getValue('id_customer_thread') . '
					ORDER BY cm.date_add DESC
				');
                $var_51 = $var_2->fn_6($var_49, true, (int) Tools::getValue('id_employee_forward'));
                $var_53 = new class_0();
                $var_53->var_54 = (int) $var_2->var_4->var_55->var_11;
                $var_53->var_42 = (int) Tools::getValue('id_customer_thread');
                $var_53->var_56 = (int) ip2long(Tools::getRemoteAddr());
                $var_57 = $var_2->var_4->var_55;
                $var_54 = (int) Tools::getValue('id_employee_forward');
                $var_55 = new class_1($var_54);
                $var_58 = Tools::getValue('email');
                $var_59 = Tools::getValue('message_forward');
                if (($var_60 = $var_53->validateField('message', $var_59, null, array(), true)) !== true) {
                    $var_2->var_159[] = $var_60;
                } elseif ($var_54 && $var_55 && Validate::isLoadedObject($var_55)) {
                    $var_35 = array(
                        '{messages}' => stripslashes($var_51),
                        '{employee}' => $var_57->var_62 . ' ' . $var_57->var_63,
                        '{comment}' => stripslashes(Tools::nl2br($_POST['message_forward'])),
                        '{firstname}' => $var_55->var_62,
                        '{lastname}' => $var_55->var_63,
                    );

                    if (Mail::Send(
                        $var_2->var_4->var_10->var_11,
                        'forward_msg',
                        $var_2->trans(
                            'Fwd: Customer message',
                            array(),
                            'Emails.Subject',
                            $var_2->var_4->var_10->var_64
                        ),
                        $var_35,
                        $var_55->var_58,
                        $var_55->var_62 . ' ' . $var_55->var_63,
                        $var_57->var_58,
                        $var_57->var_62 . ' ' . $var_57->var_63,
                        null,
                        null,
                        var_65,
                        true
                    )) {
                        $var_53->var_66 = 1;
                        $var_53->var_59 = $var_2->trans('Message forwarded to', array(), 'Admin.Catalog.Feature') . ' ' . $var_55->var_62 . ' ' . $var_55->var_63 . "\n" . $var_2->trans('Comment:') . ' ' . $var_59;
                        $var_53->add();
                    }
                } elseif ($var_58 && Validate::isEmail($var_58)) {
                    $var_35 = array(
                        '{messages}' => Tools::nl2br(stripslashes($var_51)),
                        '{employee}' => $var_57->var_62 . ' ' . $var_57->var_63,
                        '{comment}' => stripslashes($_POST['message_forward']),
                        '{firstname}' => '',
                        '{lastname}' => '',
                    );

                    if (Mail::Send(
                        $var_2->var_4->var_10->var_11,
                        'forward_msg',
                        $var_2->trans(
                            'Fwd: Customer message',
                            array(),
                            'Emails.Subject',
                            $var_2->var_4->var_10->var_64
                        ),
                        $var_35,
                        $var_58,
                        null,
                        $var_57->var_58,
                        $var_57->var_62 . ' ' . $var_57->var_63,
                        null,
                        null,
                        var_65,
                        true
                    )) {
                        $var_53->var_59 = $var_2->trans('Message forwarded to', array(), 'Admin.Catalog.Feature') . ' ' . $var_58 . "\n" . $var_2->trans('Comment:') . ' ' . $var_59;
                        $var_53->add();
                    }
                } else {
                    $var_2->var_159[] = '<div class="alert error">' . $var_2->trans('The email address is invalid.', array(), 'Admin.Notifications.Error') . '</div>';
                }
            }
            if (Tools::isSubmit('submitReply')) {
                $var_68 = new class_2($var_42);

                ShopUrl::cacheMainDomainForShop((int) $var_68->var_69);

                $var_53 = new class_0();
                $var_53->var_54 = (int) $var_2->var_4->var_55->var_11;
                $var_53->var_42 = $var_68->var_11;
                $var_53->var_56 = (int) ip2long(Tools::getRemoteAddr());
                $var_53->var_59 = Tools::getValue('reply_message');
                if (($var_60 = $var_53->validateField('message', $var_53->var_59, null, array(), true)) !== true) {
                    $var_2->var_159[] = $var_60;
                } elseif (isset($var_70) && !empty($var_70['joinFile']['name']) && $var_70['joinFile']['error'] != 0) {
                    $var_2->var_159[] = $var_2->trans('An error occurred during the file upload process.', array(), 'Admin.Notifications.Error');
                } elseif ($var_53->add()) {
                    $var_71 = null;
                    if (!empty($var_70['joinFile']['name'])) {
                        $var_71['content'] = file_get_contents($var_70['joinFile']['tmp_name']);
                        $var_71['name'] = $var_70['joinFile']['name'];
                        $var_71['mime'] = $var_70['joinFile']['type'];
                    }
                    $var_41 = new class_3($var_68->var_72);
                    $var_35 = array(
                        '{reply}' => Tools::nl2br(Tools::getValue('reply_message')),
                        '{link}' => Tools::url(
                            $var_2->var_4->var_73->getPageLink('contact', true, null, null, false, $var_68->var_69),
                            'id_customer_thread=' . (int) $var_68->var_11 . '&token=' . $var_68->var_75
                        ),
                        '{firstname}' => $var_41->var_62,
                        '{lastname}' => $var_41->var_63,
                    );
                    
                    $var_12 = new class_4((int) $var_68->var_43, (int) $var_68->var_76);

                    if (Validate::isLoadedObject($var_12)) {
                        $var_77 = $var_12->var_78;
                        $var_79 = $var_12->var_58;
                    } else {
                        $var_77 = null;
                        $var_79 = null;
                    }

                    $var_10 = new class_5((int) $var_68->var_76);

                    if (Mail::Send(
                        (int) $var_68->var_76,
                        'reply_msg',
                        $var_2->trans(
                            'An answer to your message is available 
                            array(
                                '%var_80%' => $ct->id,
                                '%var_81%' => $ct->token,
                            ),
                            'var_82.var_83',
                            $var_10->var_64
                        ),
                        $var_35,
                        Tools::getValue('msg_email'),
                        null,
                        $var_79,
                        $var_77,
                        $var_71,
                        null,
                        var_65,
                        true,
                        $var_68->var_69
                    )) {
                        $var_68->var_48 = 'closed';
                        $var_68->update();
                    }
                    Tools::redirectAdmin(
                        self::$var_85 . '&id_customer_thread=' . (int) $var_42 . '&viewcustomer_thread&token=' . Tools::getValue('token')
                    );
                } else {
                    $var_2->var_159[] = $var_2->trans('An error occurred. Your message was not sent. Please contact your system administrator.', array(), 'Admin.Orderscustomers.Notification');
                }
            }
        }

        return parent::fn_5();
    }

    public function fn_7()
    {
        if (isset($_GET['filename']) && file_exists(var_86 . $_GET['filename']) && Validate::isFileName($_GET['filename'])) {
            AdminCustomerThreadsController::fn_8();
        }

        return parent::fn_7();
    }

    protected function fn_8()
    {
        $var_87 = $_GET['filename'];

        $var_88 = array(
            '.txt' => 'text/plain',
            '.rtf' => 'application/rtf',
            '.doc' => 'application/msword',
            '.docx' => 'application/msword',
            '.pdf' => 'application/pdf',
            '.zip' => 'multipart/x-zip',
            '.png' => 'image/png',
            '.jpeg' => 'image/jpeg',
            '.gif' => 'image/gif',
            '.jpg' => 'image/jpeg',
        );

        $var_89 = false;
        foreach ($var_88 as $var_90 => $var_91) {
            if (substr(Tools::strtolower($var_87), -4) == $var_90 || substr(Tools::strtolower($var_87), -5) == $var_90) {
                $var_89 = $var_91;

                break;
            }
        }

        if (!$var_89 || !Validate::isFileName($var_87)) {
            die(Tools::displayError());
        }

        if (ob_get_level() && ob_get_length() > 0) {
            ob_end_clean();
        }
        header('Content-Type: ' . $var_89);
        header('Content-Disposition:attachment;filename="' . $var_87 . '"');
        readfile(var_86 . $var_87);
        var_92;
    }

    public function fn_9()
    {
        $var_93 = time();
        $var_94 = array();

        

        $var_95 = new class_6();
        $var_95->var_11 = 'box-pending-messages';
        $var_95->var_96 = 'icon-envelope';
        $var_95->var_97 = 'color1';
        $var_95->var_98 = $var_2->var_4->var_73->getAdminLink('AdminCustomerThreads');
        $var_95->var_100 = $var_2->trans('Pending Discussion Threads', array(), 'Admin.Catalog.Feature');
        if (ConfigurationKPI::get('PENDING_MESSAGES') !== false) {
            $var_95->var_40 = ConfigurationKPI::get('PENDING_MESSAGES');
        }
        $var_95->var_101 = $var_2->var_4->var_73->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=pending_messages';
        $var_95->var_102 = (bool) (ConfigurationKPI::get('PENDING_MESSAGES_EXPIRE') < $var_93);
        $var_94[] = $var_95->generate();

        $var_95 = new class_6();
        $var_95->var_11 = 'box-age';
        $var_95->var_96 = 'icon-time';
        $var_95->var_97 = 'color2';
        $var_95->var_100 = $var_2->trans('Average Response Time', array(), 'Admin.Catalog.Feature');
        $var_95->var_104 = $var_2->trans('30 days', array(), 'Admin.Global');
        if (ConfigurationKPI::get('AVG_MSG_RESPONSE_TIME') !== false) {
            $var_95->var_40 = ConfigurationKPI::get('AVG_MSG_RESPONSE_TIME');
        }
        $var_95->var_101 = $var_2->var_4->var_73->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=avg_msg_response_time';
        $var_95->var_102 = (bool) (ConfigurationKPI::get('AVG_MSG_RESPONSE_TIME_EXPIRE') < $var_93);
        $var_94[] = $var_95->generate();

        $var_95 = new class_6();
        $var_95->var_11 = 'box-messages-per-thread';
        $var_95->var_96 = 'icon-copy';
        $var_95->var_97 = 'color3';
        $var_95->var_100 = $var_2->trans('Messages per Thread', array(), 'Admin.Catalog.Feature');
        $var_95->var_104 = $var_2->trans('30 day', array(), 'Admin.Global');
        if (ConfigurationKPI::get('MESSAGES_PER_THREAD') !== false) {
            $var_95->var_40 = ConfigurationKPI::get('MESSAGES_PER_THREAD');
        }
        $var_95->var_101 = $var_2->var_4->var_73->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=messages_per_thread';
        $var_95->var_102 = (bool) (ConfigurationKPI::get('MESSAGES_PER_THREAD_EXPIRE') < $var_93);
        $var_94[] = $var_95->generate();

        $var_95 = new class_7();
        $var_95->var_94 = $var_94;

        return $var_95->generate();
    }

    public function fn_10()
    {
        if (!$var_42 = (int) Tools::getValue('id_customer_thread')) {
            return;
        }

        $var_2->var_4 = Context::getContext();
        if (!($var_105 = $var_2->loadObject())) {
            return;
        }
        $var_2->var_4->var_107->{'customer_threadFilter_cl!id_contact'} = $var_105->var_43;

        $var_108 = class_1::getEmployees();

        $var_49 = class_2::getMessageCustomerThreads($var_42);

        foreach ($var_49 as $var_90 => $var_109) {
            if ($var_109['id_employee']) {
                $var_55 = new class_1($var_109['id_employee']);
                $var_49[$var_90]['employee_image'] = $var_55->getImage();
            }
            if (isset($var_109['file_name']) && $var_109['file_name'] != '') {
                $var_49[$var_90]['file_name'] = var_111 . $var_109['file_name'];
            } else {
                unset($var_49[$var_90]['file_name']);
            }

            if ($var_109['id_product']) {
                $var_112 = new class_8((int) $var_109['id_product'], false, $var_2->var_4->var_10->var_11);
                if (Validate::isLoadedObject($var_112)) {
                    $var_49[$var_90]['product_name'] = $var_112->var_78;
                    $var_49[$var_90]['product_link'] = $var_2->var_4->var_73->getAdminLink('AdminProducts') . '&updateproduct&id_product=' . (int) $var_112->var_11;
                }
            }
        }

        $var_113 = class_2::getNextThread((int) $var_105->var_11);

        $var_9 = class_4::getContacts($var_2->var_4->var_10->var_11);

        $var_114 = array();

        if ($var_113) {
            $var_113 = array(
                'href' => self::$var_85 . '&id_customer_thread=' . (int) $var_113 . '&viewcustomer_thread&token=' . $var_2->var_75,
                'name' => $var_2->trans('Reply to the next unanswered message in this thread', array(), 'Admin.Catalog.Feature'),
            );
        }

        if ($var_105->var_48 != 'closed') {
            $var_114['closed'] = array(
                'href' => self::$var_85 . '&viewcustomer_thread&setstatus=2&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $var_2->var_75,
                'label' => $var_2->trans('Mark as "handled"', array(), 'Admin.Catalog.Feature'),
                'name' => 'setstatus',
                'value' => 2,
            );
        } else {
            $var_114['open'] = array(
                'href' => self::$var_85 . '&viewcustomer_thread&setstatus=1&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $var_2->var_75,
                'label' => $var_2->trans('Re-open', array(), 'Admin.Catalog.Feature'),
                'name' => 'setstatus',
                'value' => 1,
            );
        }

        if ($var_105->var_48 != 'pending1') {
            $var_114['pending1'] = array(
                'href' => self::$var_85 . '&viewcustomer_thread&setstatus=3&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $var_2->var_75,
                'label' => $var_2->trans('Mark as "pending 1" (will be answered later)', array(), 'Admin.Catalog.Feature'),
                'name' => 'setstatus',
                'value' => 3,
            );
        } else {
            $var_114['pending1'] = array(
                'href' => self::$var_85 . '&viewcustomer_thread&setstatus=1&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $var_2->var_75,
                'label' => $var_2->trans('Disable pending status', array(), 'Admin.Catalog.Feature'),
                'name' => 'setstatus',
                'value' => 1,
            );
        }

        if ($var_105->var_48 != 'pending2') {
            $var_114['pending2'] = array(
                'href' => self::$var_85 . '&viewcustomer_thread&setstatus=4&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $var_2->var_75,
                'label' => $var_2->trans('Mark as "pending 2" (will be answered later)', array(), 'Admin.Catalog.Feature'),
                'name' => 'setstatus',
                'value' => 4,
            );
        } else {
            $var_114['pending2'] = array(
                'href' => self::$var_85 . '&viewcustomer_thread&setstatus=1&id_customer_thread=' . (int) Tools::getValue('id_customer_thread') . '&viewmsg&token=' . $var_2->var_75,
                'label' => $var_2->trans('Disable pending status', array(), 'Admin.Catalog.Feature'),
                'name' => 'setstatus',
                'value' => 1,
            );
        }

        if ($var_105->var_72) {
            $var_41 = new class_3($var_105->var_72);
            $var_115 = class_10::getCustomerOrders($var_41->var_11);
            if ($var_115 && count($var_115)) {
                $var_116 = 0;
                $var_117 = array();
                foreach ($var_115 as $var_90 => $var_118) {
                    if ($var_118['valid']) {
                        $var_117[] = $var_118;
                        $var_116 += $var_118['total_paid_real'] / $var_118['conversion_rate'];
                    }
                    $var_115[$var_90]['date_add'] = Tools::displayDate($var_118['date_add']);
                    $var_115[$var_90]['total_paid_real'] = Tools::displayPrice($var_118['total_paid_real'], new class_9((int) $var_118['id_currency']));
                }
            }

            $var_119 = $var_41->getBoughtProducts();
            if ($var_119 && count($var_119)) {
                foreach ($var_119 as $var_90 => $var_112) {
                    $var_119[$var_90]['date_add'] = Tools::displayDate($var_112['date_add'], null, true);
                }
            }
        }
        $var_121 = $var_2->fn_11($var_49, $var_105->var_29);
        $var_123 = $var_49[0];

        if (!$var_49[0]['id_employee']) {
            unset($var_49[0]);
        }

        $var_12 = '';
        foreach ($var_9 as $var_124) {
            if ($var_124['id_contact'] == $var_105->var_43) {
                $var_12 = $var_124['name'];
            }
        }

        $var_2->var_125 = array(
            'id_customer_thread' => $var_42,
            'thread' => $var_105,
            'actions' => $var_114,
            'employees' => $var_108,
            'current_employee' => $var_2->var_4->var_55,
            'messages' => $var_49,
            'first_message' => $var_123,
            'contact' => $var_12,
            'next_thread' => $var_113,
            'orders' => isset($var_115) ? $var_115 : false,
            'customer' => isset($var_41) ? $var_41 : false,
            'products' => isset($var_119) ? $var_119 : false,
            'total_ok' => isset($var_116) ? Tools::displayPrice($var_116, $var_2->var_4->var_126) : false,
            'orders_ok' => isset($var_117) ? $var_117 : false,
            'count_ok' => isset($var_117) ? count($var_117) : false,
            'PS_CUSTOMER_SERVICE_SIGNATURE' => str_replace('\r\n', "\n", Configuration::get('PS_CUSTOMER_SERVICE_SIGNATURE', (int) $var_105->var_76)),
            'timeline_items' => $var_121,
        );

        if ($var_113) {
            $var_2->var_125['next_thread'] = $var_113;
        }

        return parent::fn_10();
    }

    public function fn_11($var_49, $var_29)
    {
        $var_127 = array();
        foreach ($var_49 as $var_59) {
            $var_112 = new class_8((int) $var_59['id_product'], false, $var_2->var_4->var_10->var_11);
            $var_128 = $var_2->var_4->var_73->getAdminLink('AdminOrders') . '&vieworder&id_order=' . (int) $var_112->var_11;

            $var_129 = '';
            if (!$var_59['private']) {
                $var_129 .= $var_2->trans('Message to: ', array(), 'Admin.Catalog.Feature') . ' <span class="badge">' . (!$var_59['id_employee'] ? $var_59['subject'] : $var_59['customer_name']) . '</span><br/>';
            }
            if (Validate::isLoadedObject($var_112)) {
                $var_129 .= '<br/>' . $var_2->trans('Product: ', array(), 'Admin.Catalog.Feature') . '<span class="label label-info">' . $var_112->var_78 . '</span><br/><br/>';
            }
            $var_129 .= Tools::safeOutput($var_59['message']);

            $var_127[$var_59['date_add']][] = array(
                'arrow' => 'left',
                'background_color' => '',
                'icon' => 'icon-envelope',
                'content' => $var_129,
                'date' => $var_59['date_add'],
            );
        }

        $var_118 = new class_10((int) $var_29);
        if (Validate::isLoadedObject($var_118)) {
            $var_130 = $var_118->getHistory($var_2->var_4->var_10->var_11);
            foreach ($var_130 as $var_132) {
                $var_133 = $var_2->var_4->var_73->getAdminLink('AdminOrders') . '&vieworder&id_order=' . (int) $var_118->var_11;

                $var_129 = '<a class="badge" target="_blank" href="' . Tools::safeOutput($var_133) . '">' . $var_2->trans('Order', array(), 'Admin.Global') . ' 

                $content .= '<var_134>' . $this->trans('var_135:', array(), 'var_136.var_137.var_138') . ' ' . $var_132['ostate_name'] . '</span>';

                $var_127[$var_132['date_add']][] = array(
                    'arrow' => 'right',
                    'alt' => true,
                    'background_color' => $var_132['color'],
                    'icon' => 'icon-credit-card',
                    'content' => $var_129,
                    'date' => $var_132['date_add'],
                    'see_more_link' => $var_133,
                );
            }
        }
        krsort($var_127);

        return $var_127;
    }

    protected function fn_6($var_59, $var_58 = false, $var_54 = null)
    {
        $var_139 = $var_2->createTemplate('message.tpl');

        $var_9 = class_4::getContacts($var_2->var_4->var_10->var_11);
        foreach ($var_9 as $var_12) {
            $var_8[$var_12['id_contact']] = array('id_contact' => $var_12['id_contact'], 'name' => $var_12['name']);
        }
        $var_9 = $var_8;

        if (!$var_58) {
            if (!empty($var_59['id_product']) && empty($var_59['employee_name'])) {
                $var_141 = class_10::getIdOrderProduct((int) $var_59['id_customer'], (int) $var_59['id_product']);
            }
        }
        $var_59['date_add'] = Tools::displayDate($var_59['date_add'], null, true);
        $var_59['user_agent'] = strip_tags($var_59['user_agent']);
        $var_59['message'] = preg_replace(
            '/(https?:\/\/[a-z0-9
            '<var_142 var_98="\1">\1</var_142>\2',
            var_143(
                $var_59['message'],
            var_144,
                'UTF-8'
            )
        );

        $var_145 = true;
        $var_118 = new class_10((int) $var_59['id_order']);

        if (!Validate::isLoadedObject($var_118)) {
            $var_145 = false;
        }

        $var_139->assign(array(
            'thread_url' => Tools::getAdminUrl(basename(var_147) . '/' .
                $var_2->var_4->var_73->getAdminLink('AdminCustomerThreads') . '&amp;id_customer_thread='
                . (int) $var_59['id_customer_thread'] . '&amp;viewcustomer_thread=1'),
            'link' => Context::getContext()->var_73,
            'current' => self::$var_85,
            'token' => $var_2->var_75,
            'message' => $var_59,
            'id_order_product' => isset($var_141) ? $var_141 : null,
            'email' => $var_58,
            'id_employee' => $var_54,
            'PS_SHOP_NAME' => Configuration::get('PS_SHOP_NAME'),
            'file_name' => file_exists(var_86 . $var_59['file_name']),
            'contacts' => $var_9,
            'is_valid_order_id' => $var_145,
        ));

        return $var_139->fetch();
    }

    protected function fn_12($var_129)
    {
        return '<div><p>' . $var_129 . '</p></div>';
    }

    public function fn_13()
    {
        if (Configuration::get('PS_SAV_IMAP_URL')
        && Configuration::get('PS_SAV_IMAP_PORT')
        && Configuration::get('PS_SAV_IMAP_USER')
        && Configuration::get('PS_SAV_IMAP_PWD')) {
            $var_2->tpl_option_vars['use_sync'] = true;
        } else {
            $var_2->tpl_option_vars['use_sync'] = false;
        }

        return parent::fn_13();
    }

    
    public function fn_14($var_76, $var_149 = null, $var_150 = null, $var_151 = 0, $var_152 = null, $var_153 = false)
    {
        parent::fn_14($var_76, $var_149, $var_150, $var_151, $var_152, $var_153);

        $var_154 = count($var_2->var_155);
        for ($var_156 = 0; $var_156 < $var_154; ++$var_156) {
            if (isset($var_2->var_155[$var_156]['messages'])) {
                $var_2->var_155[$var_156]['messages'] = Tools::htmlentitiesDecodeUTF8($var_2->var_155[$var_156]['messages']);
            }
        }
    }

    public function fn_15($var_40)
    {
        if ($var_2->access('edit') != '1') {
            throw new class_11($var_2->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error'));
        }

        if (!$var_2->var_159 && $var_40) {
            Configuration::updateValue('PS_SAV_IMAP_OPT', implode('', $var_40));
        }
    }

    public function fn_16()
    {
        if ($var_2->access('edit') != '1') {
            throw new class_11($var_2->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error'));
        }

        $var_160 = Tools::getValue('id_thread');
        $var_49 = class_2::getMessageCustomerThreads($var_160);
        if (count($var_49)) {
            Db::getInstance()->execute('UPDATE `' . var_27 . 'customer_message` set `read` = 1 WHERE `id_employee` = ' . (int) $var_2->var_4->var_55->var_11 . ' AND `id_customer_thread` = ' . (int) $var_160);
        }
    }

    
    public function fn_17()
    {
        if ($var_2->access('edit') != '1') {
            throw new class_11($var_2->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error'));
        }

        if (Tools::isSubmit('syncImapMail')) {
            die(json_encode($var_2->syncImap()));
        }
    }

    
    public function fn_2()
    {
        
        
        if (!(Configuration::get('PS_SAV_IMAP_URL')
            || Configuration::get('PS_SAV_IMAP_PORT')
            || Configuration::get('PS_SAV_IMAP_USER')
            || Configuration::get('PS_SAV_IMAP_PWD'))) {
            return;
        }

        
        $var_162 = $var_2->syncImap();

        
        if (isset($var_162['hasError']) && $var_162['hasError']) {
            if (isset($var_162['errors'])) {
                foreach ($var_162['errors'] as &$var_60) {
                    $var_2->displayWarning($var_60);
                }
            }
        }
    }

    
    public function var_161()
    {
        if (!($var_164 = Configuration::get('PS_SAV_IMAP_URL'))
            || !($var_165 = Configuration::get('PS_SAV_IMAP_PORT'))
            || !($var_166 = Configuration::get('PS_SAV_IMAP_USER'))
            || !($var_167 = Configuration::get('PS_SAV_IMAP_PWD'))) {
            return array('hasError' => true, 'errors' => array('IMAP configuration is not correct'));
        }

        $var_168 = Configuration::getMultiple(array(
            'PS_SAV_IMAP_OPT_POP3', 'PS_SAV_IMAP_OPT_NORSH', 'PS_SAV_IMAP_OPT_SSL',
            'PS_SAV_IMAP_OPT_VALIDATE-CERT', 'PS_SAV_IMAP_OPT_NOVALIDATE-CERT',
            'PS_SAV_IMAP_OPT_TLS', 'PS_SAV_IMAP_OPT_NOTLS', ));

        $var_169 = '';
        if ($var_168['PS_SAV_IMAP_OPT_POP3']) {
            $var_169 .= '/pop3';
        }
        if ($var_168['PS_SAV_IMAP_OPT_NORSH']) {
            $var_169 .= '/norsh';
        }
        if ($var_168['PS_SAV_IMAP_OPT_SSL']) {
            $var_169 .= '/ssl';
        }
        if ($var_168['PS_SAV_IMAP_OPT_VALIDATE-CERT']) {
            $var_169 .= '/validate-cert';
        }
        if ($var_168['PS_SAV_IMAP_OPT_NOVALIDATE-CERT']) {
            $var_169 .= '/novalidate-cert';
        }
        if ($var_168['PS_SAV_IMAP_OPT_TLS']) {
            $var_169 .= '/tls';
        }
        if ($var_168['PS_SAV_IMAP_OPT_NOTLS']) {
            $var_169 .= '/notls';
        }

        if (!function_exists('imap_open')) {
            return array('hasError' => true, 'errors' => array('imap is not installed on this server'));
        }

        $var_170 = @imap_open('{' . $var_164 . ':' . $var_165 . $var_169 . '}', $var_166, $var_167);

        
        $var_159 = imap_errors();
        if (is_array($var_159)) {
            $var_159 = array_unique($var_159);
        }
        $var_171 = '';
        $var_172 = '';

        if (count($var_159) && is_array($var_159)) {
            $var_171 = '';
            foreach ($var_159 as $var_60) {
                $var_171 .= $var_60 . ', ';
            }
            $var_171 = rtrim(trim($var_171), ',');
        }
        
        if (!$var_170) {
            return array('hasError' => true, 'errors' => array('Cannot connect to the mailbox :<br />' . ($var_171)));
        }

        
        $var_173 = imap_check($var_170);
        if (!$var_173) {
            return array('hasError' => true, 'errors' => array('Fail to get information about the current mailbox'));
        }

        if ($var_173->var_174 == 0) {
            return array('hasError' => true, 'errors' => array('NO message to sync'));
        }

        $var_44 = imap_fetch_overview($var_170, "1:{$var_173->var_174}", 0);
        $var_175 = array();
        foreach ($var_44 as $var_176) {
            
            if (isset($var_176->var_177)) {
                $var_177 = $var_176->var_177;
            } else {
                $var_177 = '';
            }
            
            $var_178 = md5($var_176->var_179 . $var_176->var_180 . $var_177 . $var_176->var_181);
            $var_182 = Db::getInstance()->getValue(
                'SELECT `md5_header`
						 FROM `' . var_27 . 'customer_message_sync_imap`
						 WHERE `md5_header` = \'' . pSQL($var_178) . '\''
            );
            if ($var_182) {
                if (Configuration::get('PS_SAV_IMAP_DELETE_MSG')) {
                    if (!imap_delete($var_170, $var_176->var_181)) {
                        $var_172 = ', Fail to delete message';
                    }
                }
            } else {
                
                var_184('/\
                preg_match('/\
                $var_185 = false;
                if (isset($matches1[1], $matches2[1])) {
                    $var_185 = true;
                }

                $var_186 = (Configuration::get('PS_SAV_IMAP_CREATE_THREADS') && !$var_185 && (strpos($var_177, '[no_sync]') == false));

                $var_187 = true;
                if ($var_185 || $var_186) {
                    if ($var_186) {
                        
                        $var_188 = array();
                        if (!isset($var_176->var_180)
                            || (!var_184('/<(' . Tools::cleanNonUnicodeSupport('[a-z\p{L}0-9!
                            && !Validate::isEmail($overview->from))) {
                            $message_errors[] = $this->trans('var_189 var_190 var_59 var_191 var_142 new var_105.', array(), 'var_136.var_192.var_193');

                            continue;
                        }

                        
                        $var_180 = $var_176->var_180;
                        if (isset($var_188[1])) {
                            $var_180 = $var_188[1];
                        }

                        
                        $var_9 = class_4::getContacts($var_2->var_4->var_10->var_11);
                        if (!$var_9) {
                            var_194;
                        }

                        foreach ($var_9 as $var_12) {
                            if (isset($var_176->var_195) && strpos($var_176->var_195, $var_12['email']) !== false) {
                                $var_43 = $var_12['id_contact'];
                            }
                        }

                        if (!isset($var_43)) { 
                            $var_43 = $var_9[0]['id_contact'];
                        }

                        $var_41 = new class_3();
                        $var_196 = $var_41->getByEmail($var_180); 
                        $var_68 = new class_2();
                        if (isset($var_196->var_11)) { 
                            $var_68->var_72 = $var_196->var_11;
                        }
                        $var_68->var_58 = $var_180;
                        $var_68->var_43 = $var_43;
                        $var_68->var_76 = (int) Configuration::get('PS_LANG_DEFAULT');
                        $var_68->var_69 = $var_2->var_4->var_198->var_11; 
                        $var_68->var_48 = 'open';
                        $var_68->var_75 = Tools::passwdGen(12);
                        $var_68->add();
                    } else {
                        $var_68 = new class_2((int) $matches1[1]);
                    } 

                    if (Validate::isLoadedObject($var_68) && ((isset($matches2[1]) && $var_68->var_75 == $matches2[1]) || $var_186)) {
                        $var_199 = imap_bodystruct($var_170, $var_176->var_181, '1');
                        if ($var_199->var_200 == 0) {
                            $var_59 = imap_fetchbody($var_170, $var_176->var_181, '1');
                        } elseif ($var_199->var_200 == 1) {
                            $var_199 = imap_bodystruct($var_170, $var_176->var_181, '1.1');
                            $var_59 = imap_fetchbody($var_170, $var_176->var_181, '1.1');
                        } var_201 {
                            var_194;
                        }

                        switch ($var_199->var_202) {
                            case 3:
                                $var_59 = imap_base64($var_59);

                                break;
                            case 4:
                                $var_59 = imap_qprint($var_59);

                                break;
                        }
                        $var_59 = iconv($var_2->getEncoding($var_199), 'utf-8', $var_59);
                        $var_59 = nl2br($var_59);
                        if (!$var_59 || strlen($var_59) == 0) {
                            $var_175[] = $var_2->trans('The message body is empty, cannot import it.', array(), 'Admin.Orderscustomers.Notification');
                            $var_187 = false;

                            continue;
                        }
                        $var_53 = new class_0();
                        $var_53->var_42 = $var_68->var_11;
                        if (empty($var_59) || !Validate::isCleanHtml($var_59)) {
                            $var_171 .= $var_2->trans('Invalid message content for subject: %s', array($var_177), 'Admin.Orderscustomers.Notification');
                        } var_201 {
                            var_204 {
                                $var_53->var_59 = $var_59;
                                $var_53->add();
                            } var_205 (var_158 $var_206) {}
                        }
                    }
                }
                if ($var_187) {
                    Db::getInstance()->execute('INSERT INTO `' . var_27 . 'customer_message_sync_imap` (`md5_header`) VALUES (\'' . pSQL($var_178) . '\')');
                }
            }
        }
        var_207($var_170);
        var_208($var_170);
        if (count($var_175) > 0) {
            if (($var_209 = $var_171 . $var_172) && strlen($var_209) > 0) {
                $var_175 = array_merge(array($var_209), $var_175);
            }

            var_210 array('hasError' => true, 'errors' => $var_175);
        }
        var_211 ($var_171 . $var_172) {
            var_210 array('hasError' => true, 'errors' => array($var_171 . $var_172));
        } var_201 {
            var_210 array('hasError' => false, 'errors' => '');
        }
    }

    protected function var_203($var_199)
    {
        foreach ($var_199->var_212 as $var_213) {
            if ($var_213->var_214 == 'CHARSET') {
                var_210 $var_213->var_40;
            }
        }

        var_210 'var_215-8';
    }
}
