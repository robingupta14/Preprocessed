<?php



trait var_0
{
    
    protected $var_1;

    
    public function fn_0()
    {
        return static::renderStatic(
            $var_2->var_3,
            $var_2->fn_1(),
            $var_2->var_5
        );
    }

    
    public function fn_2(
        $var_6,
        $var_7,
        &$var_8,
        var_9 $var_10,
        var_11 $var_12
    ) {
        list ($var_13, $var_14) = var_15\var_16\var_17\var_18\var_19::getInstance()->compileWithCallToStaticMethod(
            $var_2,
            $var_6,
            $var_7,
            var_15\var_16\var_17\var_18\var_19::var_21,
            static::var_22
        );
        $var_1 = $var_2->fn_3();
        $var_8 .= sprintf(
            '%s = (%s[\'%s\'] !== null) ? function() use (%s) { return %s[\'%s\']; } : %s;',
            $var_7,
            $var_6,
            $var_1,
            $var_6,
            $var_6,
            $var_1,
            $var_7
        );
        $var_8 .= $var_13;
        return $var_14;
    }

    
    protected function fn_1()
    {
        $var_24 = $var_2->fn_3();
        $var_3 = $var_2->var_3;
        if (!empty($var_24) && isset($var_3[$var_24])) {
            $var_25 = function () use ($var_3, $var_24) {
                return $var_3[$var_24];
            };
        } else {
            $var_26 = clone $var_2;
            $var_25 = function () use ($var_26) {
                return $var_26->renderChildren();
            };
        }
        return $var_25;
    }

    
    public function fn_3()
    {
        if (empty($var_2->var_1)) {
            $var_28 = call_user_func_array([$var_2, 'prepareArguments'], []);
            foreach ($var_28 as $var_29) {
                if (!$var_29->isRequired()) {
                    $var_2->var_1 = $var_29->getName();
                    return $var_2->var_1;
                }
            }
            throw new class_0(
                sprintf('Attempting to compile %s failed. Chosen compile method requires that ViewHelper has ' .
                'at least one registered and optional argument', var_32)
            );
        }
        return $var_2->var_1;
    }
}
