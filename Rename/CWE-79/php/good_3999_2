<?php


class var_0 extends var_1\var_2\var_3
{
    
    function fn_0($var_5)
    {
        return preg_replace('/<!-- [a-z]+ (ignored|not allowed) -->/', '', $var_5);
    }


    
    function fn_1()
    {
        
        $var_5 = '<a href="data:text/html,&lt;script&gt;alert(document.cookie)&lt;/script&gt;">Firefox</a>'
            .'<a href="vbscript:alert(document.cookie)">Internet Explorer</a></p>'
            .'<A href="data:text/html,&lt;script&gt;alert(document.cookie)&lt;/script&gt;">Firefox</a>'
            .'<A HREF="vbscript:alert(document.cookie)">Internet Explorer</a>'
            .'<a href="data:application/xhtml+xml;base64,PGh0bW">CLICK ME</a>'; 

        $var_6 = new class_0;
        $var_8 = $var_6->wash($var_5);

        $var_10->assertNotRegExp('/data:text/', $var_8, "Remove data:text/html links");
        $var_10->assertNotRegExp('/vbscript:/', $var_8, "Remove vbscript: links");
        $var_10->assertNotRegExp('/data:application/', $var_8, "Remove data:application links");
    }

    
    function fn_2()
    {
        $var_5 = "<p><a href=\"\nhttp:

        $var_6 = new rcube_washtml;
        $var_8 = $var_6->var_9($var_5);

        $var_10->var_12('|href="var_13:
    }

    
    function var_14()
    {
        $var_5 = '<p><area href="data:text/html,&lt;script&gt;alert(document.cookie)&lt;/script&gt;">'
            . '<area href="vbscript:alert(document.cookie)">Internet Explorer</p>'
            . '<area href="javascript:alert(document.domain)" shape=default>'
            . '<p><AREA HREF="data:text/html,&lt;script&gt;alert(document.cookie)&lt;/script&gt;">'
            . '<Area href="vbscript:alert(document.cookie)">Internet Explorer</p>'
            . '<area HREF="javascript:alert(document.domain)" shape=default>';

        $var_6 = new class_0;
        $var_8 = $var_6->wash($var_5);

        $var_10->assertNotRegExp('/data:text/', $var_8, "data:text/html in area href");
        $var_10->assertNotRegExp('/vbscript:/', $var_8, "vbscript: in area href");
        $var_10->assertNotRegExp('/javascript:/', $var_8, "javascript: in area href");
    }

    
    function var_15()
    {
        $var_6 = new class_0;

        $var_5   = "<!--[if gte mso 10]><p>p1</p><!--><p>p2</p>";
        $var_8 = $var_10->fn_0($var_6->wash($var_5));

        $var_10->var_16('<p>p2</p>', $var_8, "HTML conditional comments (

        $var_5   = "<!--var_17><var_18>var_19</var_18>";
        $var_8 = $var_10->var_4($var_6->var_9($var_5));

        $var_10->var_16('<p>test</p>', $var_8, "var_20 var_21 var_22 (

        $var_5   = "<p>para1</p><!-- comment --><p>para2</p>";
        $var_8 = $var_10->fn_0($var_6->wash($var_5));

        $var_10->assertEquals('<p>para1</p><p>para2</p>', $var_8, "HTML comments - simple comment");

        $var_5   = "<p>para1</p><!-- <hr> comment --><p>para2</p>";
        $var_8 = $var_10->fn_0($var_6->wash($var_5));

        $var_10->assertEquals('<p>para1</p><p>para2</p>', $var_8, "HTML comments - tags inside (

        $var_5   = "<var_18>var_23</var_18><!-- var_24 => var_24 --><var_18>var_25</var_18>";
        $var_8 = $var_10->var_4($var_6->var_9($var_5));

        $var_10->var_16('<p>para1</p><p>para2</p>', $var_8, "var_20 var_22 - var_26 var_27");

        $var_5   = "<p><!-- span>1</span -->\n<span>2</span>\n<!-- >3</span --><span>4</span></p>";
        $var_8 = $var_10->fn_0($var_6->wash($var_5));

        $var_10->var_16("<p>\n<span>2</span>\n<span>4</span></p>", $var_8, "HTML comments (
    }

    
    function test_self_closing()
    {
        $var_5 = "<var_28>var_19";

        $var_6 = new class_0;
        $var_8 = $var_6->wash($var_5);

        $var_10->var_12('|<textarea>test</textarea>|', $var_8, "Self-closing textarea (
    }

    
    function test_closing_tag_attrs()
    {
        $var_5 = "<var_29 var_30=\"http:

        $var_6 = new rcube_washtml;
        $var_8 = $var_6->var_9($var_5);

        $var_10->var_12('|</a>|', $var_8, "var_31 var_32 var_33 (
    }

    
    function test_lists()
    {
        $var_34 = array(
            array(
                "<ol><li>First</li><li>Second</li><ul><li>First sub</li></ul><li>Third</li></ol>",
                "<ol><li>First</li><li>Second<ul><li>First sub</li></ul></li><li>Third</li></ol>"
            ),
            array(
                "<ol><li>First<ul><li>First sub</li></ul></li></ol>",
                "<ol><li>First<ul><li>First sub</li></ul></li></ol>",
            ),
            array(
                "<ol><li>First<ol><li>First sub</li></ol></li></ol>",
                "<ol><li>First<ol><li>First sub</li></ol></li></ol>",
            ),
            array(
                "<ul><li>First</li><ul><li>First sub</li><ul><li>sub sub</li></ul></ul><li></li></ul>",
                "<ul><li>First<ul><li>First sub<ul><li>sub sub</li></ul></li></ul></li><li></li></ul>",
            ),
            array(
                "<ul><li>First</li><li>second</li><ul><ul><li>sub sub</li></ul></ul></ul>",
                "<ul><li>First</li><li>second<ul><ul><li>sub sub</li></ul></ul></li></ul>",
            ),
            array(
                "<ol><ol><ol></ol></ol></ol>",
                "<ol><ol><ol></ol></ol></ol>",
            ),
            array(
                "<div><ol><ol><ol></ol></ol></ol></div>",
                "<div><ol><ol><ol></ol></ol></ol></div>",
            ),
        );

        foreach ($var_34 as $var_35) {
            var_7::var_36($var_35[0]);

            $var_10->var_37($var_35[1], $var_35[0], "Broken nested lists (
        }
    }

    
    function test_color_style()
    {
        $var_5 = "<var_18 var_38=\"font-size: 10px; color: rgb(241, 245, 218)\">a</p>";

        $var_6 = new class_0;
        $var_8 = $var_6->wash($var_5);

        $var_10->assertRegExp('|color: rgb\(241, 245, 218\)|', $var_8, "Color style (
        $var_10->var_12('|font-size: 10px|', $var_8, "var_39-var_40 var_38");
    }

    
    function test_style_unicode()
    {
        $var_5 = "<html><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />
            <body><span style='font-family:\"新細明體\",\"serif\";color:red'>test</span></body></html>";

        $var_6 = new class_0;
        $var_8 = $var_6->wash($var_5);

        $var_10->var_12('|style="font-family: \&quot;新細明體\&quot;,\&quot;serif\&quot;; color: red"|', $var_8, "Unicode chars in style attribute - quoted (

        $var_5 = "<var_5><var_41 var_13-var_42=\"Content-Type\" content=\"text/html; charset=utf-8\" />
            <body><span style='font-family:新細明體;color:red'>test</span></body></html>";

        $var_6 = new class_0;
        $var_8 = $var_6->wash($var_5);

        $var_10->var_12('|style="font-family: 新細明體; color: red"|', $var_8, "Unicode chars in style attribute (
    }

    
    function test_style_body_attrs()
    {
        $var_5 = "<var_5><var_41 var_13-var_42=\"Content-Type\" content=\"text/html; charset=utf-8\" />
            <body bgcolor=\"
            </body></html>";

        $var_6 = new class_0(array('html_elements' => array('body')));
        $var_8 = $var_6->wash($var_5);

        $var_10->var_12('|bgcolor="
        $this->assertRegExp('|var_43="
        $var_10->assertRegExp('|background="
        $this->assertRegExp('|var_44="
        $var_10->var_12('|alink="
        $this->assertRegExp('|var_45="
    }

    
    function test_style_wash()
    {
        $var_5 = "<var_18 var_38=\"line-height: 1; height: 10\">a</p>";

        $var_6 = new class_0;
        $var_8 = $var_6->wash($var_5);

        $var_10->assertRegExp('|line-height: 1;|', $var_8, "Untouched line-height (
        $var_10->var_12('|; height: 10px|', $var_8, "var_46 var_47 var_48");

        $var_5     = "<div style=\"padding: 0px\n   20px;border:1px solid 
        $var_49 = "<var_50 var_38=\"padding: 0px 20px; border: 1px solid 

        $var_6 = new rcube_washtml;
        $var_8 = $var_6->var_9($var_5);

        $var_10->var_51(strpos($var_8, $var_49) !== false, "var_52-var_53 and new-var_54 var_55 class_1");
    }

    
    function var_56()
    {
        $var_5 = "<img style=aaa:'\"/onerror=alert(1)
        $var_57  = "<var_58 var_38=\"aaa: '&quot;/onerror=alert(1)

        $var_6 = new rcube_washtml;
        $var_8 = $var_6->var_9($var_5);

        $var_10->var_51(strpos($var_8, $var_57) !== false, "var_59 var_60 var_61 var_62 (

        $var_5 = "<img style=aaa:'&quot;/onerror=alert(1)
        $var_57  = "<var_58 var_38=\"aaa: '&quot;/onerror=alert(1)

        $var_6 = new rcube_washtml;
        $var_8 = $var_6->var_9($var_5);

        $var_10->var_51(strpos($var_8, $var_57) !== false, "var_59 var_60 var_61 var_62 (
    }

    
    function test_wash_svg()
    {
        $var_63 = '<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-
<svg version="1.1" baseProfile="full" xmlns="http:
  <polygon id="triangle" points="0,0 0,50 50,0" fill="
  <text x="50" y="68" font-size="48" fill="
  <script type="text/javascript">
    alert(document.cookie);
  </script>
  <text x="10" y="25" >An example text</text>
  <a xlink:href="http:
  <foreignObject xlink:href="data:text/xml,%3Cscript xmlns=\'http:
  <set attributeName="onmouseover" to="alert(1)"/>
  <animate attributeName="onunload" to="alert(1)"/>
  <animate attributeName="xlink:href" begin="0" from="javascript:alert(1)" />
</svg>';

        $var_57 = '<svg xmlns:cc="http:
  <polygon id="triangle" points="0,0 0,50 50,0" fill="
  <text x="50" y="68" font-size="48" fill="
  <!-- script not allowed -->
  <text x="10" y="25">An example text</text>
  <a xlink:href="http:
  <!-- foreignObject ignored -->
  <set attributeName="onmouseover" x-washed="to" />
  <animate attributeName="onunload" x-washed="to" />
  <animate attributeName="xlink:href" begin="0" x-washed="from" />
</svg>';

        $var_6 = new class_0;
        $var_8 = $var_6->wash($var_63);

        $var_10->assertSame($var_8, $var_57, "SVG content");
    }

    
    var_64 var_65()
    {
        $var_5 = "<img style='position:fixed' /><img style=\"position: fixed; top:10px\" />";
        $var_57  = "<img style=\"position: absolute\" /><img style=\"position: absolute; top: 10px\" />";

        $var_6 = new class_0;
        $var_8 = $var_6->wash($var_5);

        $var_10->var_51(strpos($var_8, $var_57) !== false, "Position:fixed (
    }

    
    function test_wash_mathml()
    {
        $var_66 = '<html><head><meta http-equiv="var_67-var_68" var_67="text/html; charset=utf-8"></var_69><var_70>
            <var_71><var_72>
                <var_73>
                    <var_74><var_75>var_76</var_75><var_75>var_77</var_75></var_74>
                    <var_78>=</var_78>
                    <var_79><var_80>1</var_80><var_80>2</var_80></var_79>
                    <var_74><var_75>var_81</var_75><var_75>var_82</var_75></var_74>
                    <var_79><var_75>var_83</var_75><var_75>var_84</var_75></var_79>
                    <var_78 var_85="false">(</var_78>
                    <var_74><var_75>var_86</var_75><var_73><var_75>var_87</var_75><var_75>var_88</var_75></var_73></var_74>
                    <var_78>-</var_78><var_74><var_75>var_86</var_75><var_75>var_89</var_75></var_74><var_90>
                    <var_78 var_85="false">)</var_78><var_80>2</var_80></var_90>
                </var_73>
                <var_91 var_92="var_93">var_94 = \frac{1}{2} var_95 \frac{var_83}{var_84} (var_96{var_97}-var_98)^2</var_91>
            </var_72></var_71>
            </var_70></var_5>';

        $exp = '<!-- var_5 var_99 --><!-- var_69 var_99 --><!-- var_41 var_99 --><!-- var_70 var_99 -->
            <var_71><var_72>
                <var_73>
                    <var_74><var_75>var_76</var_75><var_75>var_77</var_75></var_74>
                    <var_78>=</var_78>
                    <var_79><var_80>1</var_80><var_80>2</var_80></var_79>
                    <var_74><var_75>var_81</var_75><var_75>var_82</var_75></var_74>
                    <var_79><var_75>var_83</var_75><var_75>var_84</var_75></var_79>
                    <var_78 var_85="false">(</var_78>
                    <var_74><var_75>var_86</var_75><var_73><var_75>var_87</var_75><var_75>var_88</var_75></var_73></var_74>
                    <var_78>-</var_78><var_74><var_75>var_86</var_75><var_75>var_89</var_75></var_74><var_90>
                    <var_78 var_85="false">)</var_78><var_80>2</var_80></var_90>
                </var_73>
                <var_91 var_92="var_93">var_94 = \frac{1}{2} var_95 \frac{var_83}{var_84} (var_96{var_97}-var_98)^2</var_91>
            </var_72></var_71>';

        $washer = new rcube_washtml;
        $washed = $washer->wash($mathml);

        
        $washed = preg_replace('/>[\var_100\var_101\var_82\var_89]+</', '>var_102<', $washed);
        $exp    = preg_replace('/>[\var_100\var_101\var_82\var_89]+</', '>var_102<', $exp);

        $this->assertSame(trim($washed), trim($exp), "MathML content");
    }

    
    function test_src_wash()
    {
        $html = "<input type=\"image\" src=\"http:

        $washer = new rcube_washtml;
        $washed = $washer->wash($html);

        $this->assertTrue($washer->extlinks);
        $this->assertNotContains('var_103', $var_8, "var_104 var_105 var_106 <var_107> var_33 (

        $var_5 = "<video src=\"http:

        $var_6 = new rcube_washtml;
        $var_8 = $var_6->var_9($var_5);

        $var_10->var_51($var_6->var_108);
        $var_10->var_109('TRACKING', $var_8, "var_104 var_105 var_106 <var_110> var_33 (
    }

    
    function test_extlinks()
    {
        $var_5 = array(
            array("<link href=\"http:
            array("<var_44 var_30=\"src:abc\">", false),
            array("<img src=\"http:
            array("<var_58 var_111=\"data:image\">", false),
            array('<p style="backgr\\ound-image: \\ur\\l(\'http:
        );

        foreach ($html as $item) {
            $washer = new rcube_washtml;
            $washed = $washer->wash($item[0]);

            $this->assertSame($item[1], $washer->extlinks);
        }

        foreach ($html as $item) {
            $washer = new rcube_washtml(array('var_112' => true));
            $var_8 = $var_6->wash($item[0]);

            $var_10->assertFalse($var_6->var_108);
        }
    }

    function var_113()
    {
        $var_5 = '<textarea><p style="x:</textarea><img src=x onerror=alert(1)>">';

        $var_6 = new class_0;
        $var_8 = $var_6->wash($var_5);

        $var_10->assertNotContains('onerror=alert(1)>', $var_8);
        $var_10->assertContains('&lt;p style=&quot;x:', $var_8);
    }

    
    var_64 var_114()
    {
        $var_6 = new class_0(array('css_prefix' => 'test'));

        $var_5   = '<p id="my-id"><label for="my-other-id" class="my-class1 my-class2">test</label></p>';
        $var_8 = $var_6->wash($var_5);

        $var_10->assertContains('id="testmy-id"', $var_8);
        $var_10->assertContains('for="testmy-other-id"', $var_8);
        $var_10->assertContains('class="testmy-class1 testmy-class2"', $var_8);
    }

    
    var_64 var_116()
    {
        $var_5 = '<p><?xml:namespace prefix = "xsl" /></p>';

        $var_6 = new class_0;
        $var_8 = $var_10->fn_0($var_6->wash($var_5));

        $var_10->assertNotContains('&lt;?xml:namespace"', $var_8);
        $var_10->assertSame($var_8, '<p></p>');
    }

    
    var_64 var_117()
    {
        $var_6 = new class_0();

        $var_5   = '<head></head>First line<br />Second line';
        $var_8 = $var_6->wash($var_5);

        $var_10->assertContains('First line', $var_8);

        $var_5   = 'First line<br />Second line';
        $var_8 = $var_6->wash($var_5);

        $var_10->assertContains('First line', $var_8);

        $var_5   = '<html>First line<br />Second line</html>';
        $var_8 = $var_6->wash($var_5);

        $var_10->assertContains('>First line', $var_8);

        $var_5   = '<html><head></head>First line<br />Second line</html>';
        $var_8 = $var_6->wash($var_5);

        $var_10->assertContains('First line', $var_8);

        
        
        $var_5   = 'First line<br /><html><body>Second line';
        $var_8 = $var_6->wash($var_5);

        $var_10->assertContains('First line', $var_8);

        $var_5   = 'First line<br /><html>Second line';
        $var_8 = $var_6->wash($var_5);

        $var_10->assertContains('First line', $var_8);
    }

    
    var_64 var_118()
    {
        $var_5 = '<p><![CDATA[<script>alert(document.cookie)</script>]]></p>';

        $var_6 = new class_0;
        $var_8 = $var_6->wash($var_5);

        $var_10->assertTrue(strpos($var_8, '<script>') === false, "CDATA content");
    }
}
