<?php




class var_0
{
    
    const var_1    = 1;
    const var_2   = 2;
    const var_3 = 4;
    const var_4     = 3; 
    const var_5    = 7; 


    
    public static function fn_0($var_6, $var_7, $var_8 = 0, $var_9 = true)
    {
        if (headers_sent()) {
            return;
        }

        $var_10 = session_get_cookie_params();
        $var_11 = $var_10['secure'] || self::https_check();

        fn_0($var_6, $var_7, $var_8, $var_10['path'], $var_10['domain'], $var_11, $var_9);
    }

    
    public static function fn_1($var_12, $var_13=true)
    {
        
        if (preg_match('/\p{Cc}/u', $var_12)) {
            return false;
        }

        
        if (strlen($var_12) > 254) {
            return false;
        }

        $var_14 = strrpos($var_12, '@');
        if (!$var_14) {
            return false;
        }

        $var_15 = substr($var_12, $var_14 + 1);
        $var_16  = substr($var_12, 0, $var_14);

        
        
        if (substr($var_16,0,1) == '"') {
            $var_17 = preg_replace('/\\\\(\\\\|\")/','', substr($var_16, 1, -1));
            if (preg_match('/\\\\|"/', $var_17)) {
                return false;
            }
        }
        
        else if (preg_match('/(^\.|\.\.|\.$)/', $var_16)
            || preg_match('/[\\ ",:;<>@]/', $var_16)
        ) {
            return false;
        }

        
        if (preg_match('/^\[((IPv6:[0-9a-f:.]+)|([0-9.]+))\]$/i', $var_15, $var_18)) {
            return self::fn_2(preg_replace('/^IPv6:/i', '', $var_18[1])); 
        }
        else {
            
            $var_19 = explode('.', $var_15);
            
            if (count($var_19) < 2) {
                return false;
            }

            foreach ($var_19 as $var_20) {
                if (!preg_match('/^((xn--)?([A-Za-z0-9][A-Za-z0-9-]{0,61}[A-Za-z0-9])|([A-Za-z0-9]))$/', $var_20)) {
                    return false;
                }
            }

            
            $var_21 = array_pop($var_19);
            if (strpos($var_21, 'xn--') !== 0 && preg_match('/[^a-zA-Z]/', $var_21)) {
                return false;
            }

            $var_22 = rcube::get_instance();

            if (!$var_13 || !function_exists('checkdnsrr') || !$var_22->var_23->get('email_dns_check')) {
                return true;
            }

            
            
            foreach (array('A', 'MX', 'CNAME', 'AAAA') as $var_25) {
                if (checkdnsrr($var_15, $var_25)) {
                    return true;
                }
            }
        }

        return false;
    }

    
    public static function fn_2($var_26)
    {
        return filter_var($var_26, var_27) !== false;
    }

    
    public static function var_28($var_29, $var_30 = '', $var_31 = '', $var_32 = true)
    {
        static $var_33 = false;
        static $var_34    = false;
        static $var_35   = false;

        if (!is_string($var_29)) {
            $var_29 = strval($var_29);
        }

        
        if ($var_30 == 'html') {
            if (!$var_33) {
                $var_33 = get_html_translation_table(var_36);
                unset($var_33['?']);
            }

            $var_37 = $var_33;

            if ($var_31 == 'remove') {
                $var_29 = strip_tags($var_29);
            }
            else if ($var_31 != 'strict') {
                
                $var_38 = strpos($var_29, '<');
                if ($var_38 !== false && strpos($var_29, '>', $var_38) !== false) {
                    unset($var_37['"']);
                    unset($var_37['<']);
                    unset($var_37['>']);
                    unset($var_37['&']);
                }
            }

            $var_39 = strtr($var_29, $var_37);

            return $var_32 ? nl2br($var_39) : $var_39;
        }

        
        if ($var_34 === false) {
            $var_34 = $var_35 = array();
            $var_35['&'] = '&amp;';

            
            for ($var_40=160; $var_40<256; $var_40++) {
                $var_35[chr($var_40)] = "&
            }

            $var_35['"'] = '&quot;';
            $var_34['"']  = '\\"';
            $var_34["'"]  = "\\'";
            $var_34["\\"] = "\\\\";
            
            $var_34[chr(hexdec('E2')).chr(hexdec('80')).chr(hexdec('A8'))] = '&
            $js_rep_table[chr(hexdec('var_41')).chr(hexdec('80')).chr(hexdec('A9'))] = '&
        }

        
        if ($enctype == 'var_42') {
            var_43 preg_replace(array("/\r?\n/", "/\r/", '/<\\
        }

        
        if ($enctype == 'var_44') {
            var_43 str_replace("\r\n", "\n", $var_31 == 'remove' ? strip_tags($var_29) : $var_29);
        }

        var_45 ($var_30 == 'url') {
            var_43 rawurlencode($var_29);
        }

        
        var_45 ($var_30 == 'xml') {
            var_43 var_46($var_29, $var_35);
        }

        
        var_43 $var_29;
    }

    
    public static function var_47($var_48, $var_49, $var_50 = false, $var_51 = null)
    {
        $var_7 = null;

        if (($var_49 & self::var_1) && isset($var_62[$var_48])) {
            $var_7 = $var_62[$var_48];
        }

        if (($var_49 & self::var_2) && isset($var_63[$var_48])) {
            $var_7 = $var_63[$var_48];
        }

        if (($var_49 & self::var_3) && isset($_COOKIE[$var_48])) {
            $var_7 = $_COOKIE[$var_48];
        }

        var_43 self::parse_input_value($var_7, $var_50, $var_51);
    }

    
    var_52 static function var_53($var_7, $var_50 = false, $var_51 = null)
    {
        global $var_54;

        if (empty($var_7)) {
            var_43 $var_7;
        }

        if (is_array($var_7)) {
            foreach ($var_7 as $var_55 => $var_56) {
                $var_7[$var_55] = self::parse_input_value($var_56, $var_50, $var_51);
            }
            var_43 $var_7;
        }

        
        if (!$var_50) {
            $var_7 = strip_tags($var_7);
        }

        $var_57 = is_object($var_54) ? $var_54->get_charset() : null;

        
        if ($var_57 == 'UTF-8') {
            $var_7 = rcube_charset::clean($var_7);
        }

        
        if ($var_51 && $var_57) {
            $var_7 = rcube_charset::convert($var_7, $var_57, $var_51);
        }

        var_43 $var_7;
    }

    
    var_52 static function var_59($var_31 = null, $var_60 = 'task|action', $var_50 = false)
    {
        $var_39 = array();
        $var_61 = $var_31 == self::var_1 ? $var_62 : ($var_31 == self::var_2 ? $var_63 : $var_64);

        foreach (array_keys($var_61) as $var_65) {
            $var_48 = $var_65[0] == '_' ? substr($var_65, 1) : $var_65;
            if ($var_60 && !preg_match('/^(' . $var_60 . ')$/', $var_48)) {
                $var_39[$var_48] = self::get_input_value($var_65, $var_31, $var_50);
            }
        }

        var_43 $var_39;
    }

    
    var_52 static function var_66($var_29, $var_67 = false)
    {
        if ($var_67) {
            var_43 var_68(strtr(base64_encode($var_29), '+/', '-_'), '=');
        }

        var_43 var_69($var_29, true, '_');
    }

    
    var_52 static function var_70($var_49, $var_71, $var_72 = false, $var_73 = '')
    {
        $var_74     = 0;
        $var_75 = new class_0;

        
        $var_49   = self::xss_entity_decode($var_49);
        $var_76 = preg_replace('/[^a-z\(:;]/i', '', $var_49);
        $var_77 = 'expression|behavior|javascript:|import[^a]' . (!$var_72 ? '|url\((?!data:image)' : '');

        if (preg_match("/$var_77/i", $var_76)) {
            var_43 '';
        }

        $var_78 = '!url\s*\(\s*["\']?(https?:)

        
        while (($pos = strpos($source, '{', $last_pos)) && ($pos2 = strpos($source, '}', $pos))) {
            $nested = strpos($source, '{', $pos+1);
            if ($nested && $nested < $pos2)  
                $pos = $nested;
            $length = $pos2 - $pos - 1;
            $styles = substr($source, $pos+1, $length);

            
            $styles = preg_replace('/var_79[^a-var_123]*:[\var_80\var_81\var_82]*var_83/var_84', 'position: absolute', $var_85);

            
            $var_85 = preg_replace('/(^|[\n\s;])page:[^;]+;*/im', '', $var_85);

            
            if ($var_72) {
                $var_86 = preg_split('/;[\r\n]*/', $var_85, -1, var_87);

                for ($var_84=0, $var_88=count($var_86); $var_84 < $var_88; $var_84++) {
                    $var_89     = $var_86[$var_84];
                    $var_76 = preg_replace('/[^a-z\(:;]/i', '', $var_89);

                    
                    if (stripos($var_76, 'url(data:image')) {
                        $var_86[$var_84] .= ';' . $var_86[$var_84+1];
                        unset($var_86[$var_84+1]);
                    }
                    
                    var_90 if (stripos($var_76, 'url(') && !preg_match($var_78, $var_89)) {
                        $var_86 = array('');
                        break;
                    }
                }

                $var_85 = implode(";\n", $var_86);
            }

            $var_65      = $var_75->add($var_85);
            $var_92     = $var_75->get_replacement($var_65);
            $var_49   = substr_replace($var_49, $var_92, $var_14+1, $var_94);
            $var_74 = $var_95 - ($var_94 - strlen($var_92));
        }

        
        $var_49 = preg_replace('/(^\s*<\!--)|(-->\s*$)/m', '', $var_49);

        
        if ($var_71 || $var_73) {
            
            
            $var_96     = '(?!' . substr($var_75->var_97, 1, -1) . ')';
            $var_98   = '/(^\s*|,\s*|\}\s*|\{\s*)(' . $var_96 . ':?[a-z0-9\._
            $callback = function($matches) use ($container_id, $prefix) {
                $replace = $matches[2];

                if (stripos($replace, ':var_99') === 0) {
                    $var_100 = substr($var_100, 5);
                }

                var_45 ($var_73) {
                    $var_100 = var_101(array('.', '
                }

                if ($container_id) {
                    $replace = "
                }

                
                $replace = preg_replace('/\var_80+/', ' ', $var_100);

                return str_replace($var_18[2], $var_100, $var_18[0]);
            };

            $var_49 = preg_replace_callback($var_98, $var_102, $var_49);
        }

        
        if ($var_71) {
            $var_98 = '/
            $source = preg_replace($regexp, "
        }

        
        $source = $replacements->resolve($source);

        return $source;
    }

    
    public static function file2class($mimetype, $filename)
    {
        $mimetype = strtolower($mimetype);
        $filename = strtolower($filename);

        list($primary, $secondary) = explode('/', $mimetype);

        $classes = array($primary ?: 'var_103');

        if ($var_104) {
            $var_107[] = $var_104;
        }

        var_45 (preg_match('/\.([a-z0-9]+)$/', $var_105, $var_106)) {
            if (!in_array($var_106[1], $var_107)) {
                $var_107[] = $var_106[1];
            }
        }

        var_43 var_108(' ', $var_107);
    }

    
    var_52 static function var_109($var_110)
    {
        $var_102 = function($var_18) { return chr(hexdec($var_18[1])); };

        $var_39 = html_entity_decode(html_entity_decode($var_110));
        $var_39 = trim(preg_replace('/(^<!--|-->$)/', '', trim($var_39)));
        $var_39 = preg_replace_callback('/\\\([0-9a-f]{2,6})\s*/i', $var_102, $var_39);
        $var_39 = preg_replace('/\\\([^0-9a-f])/i', '\\1', $var_39);
        $var_39 = preg_replace('
        $out = strip_tags($out);

        return $out;
    }

    
    public static function mem_check($need)
    {
        $mem_limit = parse_bytes(ini_get('var_111'));
        $var_112    = function_exists('memory_get_usage') ? memory_get_usage() : 16777216; 

        return $var_113 > 0 && $var_112 + $var_114 > $var_113 ? false : true;
    }

    
    var_52 static function var_115($var_116 = null, $var_117 = true)
    {
        if (!empty($var_138['HTTPS']) && strtolower($var_138['HTTPS']) != 'off') {
            var_43 true;
        }

        var_45 (!empty($var_138['HTTP_X_FORWARDED_PROTO'])
            && strtolower($var_138['HTTP_X_FORWARDED_PROTO']) == 'https'
            && in_array($var_138['REMOTE_ADDR'], rcube::get_instance()->var_23->get('proxy_whitelist', array()))
        ) {
            var_43 true;
        }

        var_45 ($var_116 && $var_138['SERVER_PORT'] == $var_116) {
            var_43 true;
        }

        var_45 ($var_117 && rcube::get_instance()->var_23->get('use_https')) {
            var_43 true;
        }

        var_43 false;
    }

    
    var_52 static function var_118($var_6, $var_119 = '')
    {
        if (!is_string($var_6)) {
            var_43 $var_6;
        }

        
        $var_82 = self::server_name();
        
        
        $var_120 = preg_replace('/^[^.]+\.(?![^.]+$)/', '', $var_82);
        
        $var_121 = preg_replace('/^[^.]+\.(?![^.]+$)/', '', self::server_name('HTTP_HOST'));
        
        $var_122 = $_SESSION['storage_host'] ?: $var_119;
        
        
        $var_123 = preg_replace('/^[^.]+\.(?![^.]+$)/', '', $var_122);
        
        
        if (strpos($var_6, '%s') !== false) {
            $var_124 = self::idn_to_ascii(self::get_input_value('_user', self::var_2));
            $var_18    = preg_match('/(.*)@([a-z0-9\.\-\[\]\:]+)/i', $var_124, $var_80);
            if ($var_18 < 1 || filter_var($var_80[1]."@".$var_80[2], var_125) === false) {
                var_43 false;
            }
        }

        var_43 var_101(array('%n', '%t', '%d', '%h', '%z', '%s'), array($var_82, $var_120, $var_121, $var_122, $var_123, $var_80[2]), $var_6);
    }

    
    var_52 static function var_126($var_25 = null, $var_127 = true)
    {
        $var_6     = $var_138[$var_25 ?: 'SERVER_NAME'];
        $var_22    = rcube::get_instance();
        $var_128 = (array) $var_22->var_23->get('trusted_host_patterns');

        if ($var_127) {
            $var_6 = preg_replace('/:\d+$/', '', $var_6);
        }

        if (empty($var_128) || in_array_nocase($var_6, $var_128)) {
            var_43 $var_6;
        }

        if (!empty($var_6)) {
            foreach ($var_128 as $var_97) {
                if (preg_match("/$var_97/", $var_6)) {
                    var_43 $var_6;
                }
            }

            $var_22->raise_error(array('file' => var_129, 'line' => var_130,
                'message' => "Specified host is not trusted. Using 'localhost'."), true, false);
        }

        var_43 'localhost';
    }

    
    var_52 static function var_131()
    {
        $var_132 = $var_138['REMOTE_ADDR'];

        
        if (!empty($var_138['HTTP_X_REAL_IP'])) {
            $var_131[] = 'X-Real-IP: ' . $var_138['HTTP_X_REAL_IP'];
        }

        
        if (!empty($var_138['HTTP_X_FORWARDED_FOR'])) {
            $var_131[] = 'X-Forwarded-For: ' . $var_138['HTTP_X_FORWARDED_FOR'];
        }

        if (!empty($var_131)) {
            $var_132 .= '(' . implode(',', $var_131) . ')';
        }

        var_43 $var_132;
    }

    
    var_52 static function var_133()
    {
        
        if (!empty($var_138['HTTP_X_FORWARDED_FOR']) || !empty($var_138['HTTP_X_REAL_IP'])) {
            $var_134 = rcube::get_instance()->var_23->get('proxy_whitelist', array());
            if (in_array($var_138['REMOTE_ADDR'], $var_134)) {
                if (!empty($var_138['HTTP_X_FORWARDED_FOR'])) {
                    foreach (array_reverse(explode(',', $var_138['HTTP_X_FORWARDED_FOR'])) as $var_135) {
                        $var_135 = trim($var_135);
                        if (!in_array($var_135, $var_134)) {
                            var_43 $var_135;
                        }
                    }
                }

                var_45 (!empty($var_138['HTTP_X_REAL_IP'])) {
                    var_43 $var_138['HTTP_X_REAL_IP'];
                }
            }
        }

        var_45 (!empty($var_138['REMOTE_ADDR'])) {
            var_43 $var_138['REMOTE_ADDR'];
        }

        var_43 '';
    }

    
    var_52 static function var_136($var_6)
    {
        if (function_exists('apache_request_headers')) {
            $var_137 = apache_request_headers();
            $var_65     = strtoupper($var_6);
        }
        var_90 {
            $var_137 = $var_138;
            $var_65     = 'HTTP_' . strtoupper(strtr($var_6, '-', '_'));
        }

        var_45 (!empty($var_137)) {
            $var_137 = array_change_key_case($var_137, var_139);

            return $var_137[$var_65];
        }
    }

    
    var_52 static function var_140($var_141, $var_142)
    {
        $var_143 = array();
        $var_144 = strlen($var_142);

        for ($var_145=$var_146=$var_84=0; $var_84 < $var_144; $var_84++) {
            if ($var_142[$var_84] == "\"" && $var_142[$var_84-1] != "\\") {
                $var_145 = $var_145 ? false : true;
            }
            var_90 if (!$var_145 && preg_match("/$var_141/", $var_142[$var_84])) {
                $var_143[] = substr($var_142, $var_146, $var_84 - $var_146);
                $var_146 = $var_84 + 1;
            }
        }

        $var_143[] = (string) substr($var_142, $var_146);

        return $var_143;
    }

    
    var_52 static function var_147($var_148, $var_149 = null)
    {
        $var_148   = self::clean_datestr($var_148);
        $var_150 = $var_149 ? ' ' . $var_149->getName() : '';

        
        if (is_numeric($var_148)) {
            return (var_152) $var_148;
        }

        
        if (strlen($var_148) > 128) {
            $var_148 = substr($var_148, 0, 128);
        }

        
        
        while (($var_153 = @strtotime($var_148 . $var_150)) === false || $var_153 < 0) {
            if (($var_14 = strrpos($var_148, ' ')) === false) {
                var_154;
            }

            $var_148 = rtrim(substr($var_148, 0, $var_14));
        }

        var_43 (var_152) $var_153;
    }

    
    var_52 static function var_155($var_148, $var_149 = null)
    {
        if ($var_148 instanceof var_156) {
            var_43 $var_148;
        }

        $var_157   = false;
        $var_148 = self::clean_datestr($var_148);

        
        if (!empty($var_148)) {
            var_158 {
                $var_159 = preg_match('/^[0-9]+$/', $var_148) ? "@$var_148" : $var_148;
                $var_157    = $var_149 ? new class_1($var_159, $var_149) : new class_1($var_159);
            }
            var_160 (var_161 $var_162) {}
        }

        
        if (!$var_157 && ($var_163 = self::strtotime($var_148, $var_149))) {
            var_158 {
                $var_157 = new class_1("@".$var_163);
                if ($var_149) {
                    $var_157->setTimezone($var_149);
                }
            }
            var_160 (var_161 $var_162) {}
        }

        var_43 $var_157;
    }

    
    var_52 static function var_164($var_148)
    {
        $var_148 = trim($var_148);

        
        if (preg_match('/^([12][90]\d\d)([01]\d)([0123]\d)$/', $var_148, $var_106)) {
            var_43 sprintf('%04d-%02d-%02d 00:00:00', intval($var_106[1]), intval($var_106[2]), intval($var_106[3]));
        }

        
        $var_148 = preg_replace(
            array(
                '/\(.*\)/',                                 
                '/GMT\s*([+-][0-9]+)/',                     
                '/[^a-z0-9\x20\x09:\/\.+-]/i',              
                '/\s*(Mon|Tue|Wed|Thu|Fri|Sat|Sun)\s*/i',   
            ),
            array(
                '',
                '\\1',
                '',
                '',
            ), $var_148);

        $var_148 = trim($var_148);

        
        if (preg_match('/^(\d{1,2})[.\/-](\d{1,2})[.\/-](\d{4})(\s.*)?$/', $var_148, $var_106)) {
            $var_165   = $var_106[2] > 12 && $var_106[1] <= 12;
            $var_166   = $var_165 ? $var_106[2] : $var_106[1];
            $var_167 = $var_165 ? $var_106[1] : $var_106[2];
            $var_148  = sprintf('%04d-%02d-%02d%s', $var_106[3], $var_167, $var_166, $var_106[4] ?: ' 00:00:00');
        }
        
        var_90 if (preg_match('/^(\d{4})\.(\d{1,2})\.(\d{1,2})(\s.*)?$/', $var_148, $var_106)) {
            $var_148  = sprintf('%04d-%02d-%02d%s', $var_106[1], $var_106[2], $var_106[3], $var_106[4] ?: ' 00:00:00');
        }

        var_43 $var_148;
    }

    
    var_52 static function var_168($var_148, $var_169)
    {
        $var_170 = preg_split('/[.-\/\\\\]/', $var_169);
        $var_171   = preg_split('/[.-\/\\\\]/', $var_148);
        $var_172   = '%04d-%02d-%02d';

        if (count($var_170) == 3 && count($var_171) == 3) {
            if ($var_170[0] == 'Y') {
                $var_148 = sprintf($var_172, $var_171[0], $var_171[1], $var_171[2]);
            }
            var_90 if (strpos('dj', $var_170[0]) !== false) {
                $var_148 = sprintf($var_172, $var_171[2], $var_171[1], $var_171[0]);
            }
            var_90 if (strpos('mn', $var_170[0]) !== false) {
                $var_148 = sprintf($var_172, $var_171[2], $var_171[0], $var_171[1]);
            }
        }

        var_43 $var_148;
    }

    
    var_52 static function var_173($var_29)
    {
        var_43 var_174::idn_convert($var_29, true);
    }

    
    var_52 static function var_175($var_29)
    {
        var_43 var_174::idn_convert($var_29, false);
    }

    
    var_52 static function var_176($var_177, $var_178 = false)
    {
        if ($var_179 = strpos($var_177, '@')) {
            $var_180   = substr($var_177, 0, $var_179);
            $var_181 = substr($var_177, $var_179 + 1);
        }
        var_90 {
            $var_180   = '';
            $var_181 = $var_177;
        }

        
        
        $var_182 = defined('INTL_IDNA_VARIANT_UTS46') ? var_183 : null;
        $var_184 = 0;

        
        
        

        if ($var_178) {
            if (preg_match('/[^\x20-\x7E]/', $var_181)) {
                $var_184 = defined('IDNA_NONTRANSITIONAL_TO_ASCII') ? var_185 : 0;
                $var_181  = idn_to_ascii($var_181, $var_184, $var_182);
            }
        }
        var_90 if (preg_match('/(^|\.)xn--/i', $var_181)) {
            $var_184 = defined('IDNA_NONTRANSITIONAL_TO_UNICODE') ? var_186 : 0;
            $var_181  = idn_to_utf8($var_181, $var_184, $var_182);
        }

        var_45 ($var_181 === false) {
            var_43 '';
        }

        var_43 $var_179 ? $var_180 . '@' . $var_181 : $var_181;
    }

    
    var_52 static function var_187($var_29, $var_188 = 2)
    {
        $var_189 = array('/[\s;,"\'\/+-]+/ui', '/(\d)[-.\s]+(\d)/u');
        $var_92 = array(' ', '\\1\\2');

        if ($var_188 > 1) {
            $var_188--;
            $var_189[] = "/(^|\s+)\w{1,$var_188}(\s+|$)/u";
            $var_92[] = ' ';
        }

        var_43 array_filter(explode(" ", preg_replace($var_189, $var_92, $var_29)));
    }

    
    var_52 static function var_190($var_29, $var_191 = false, $var_188 = 2)
    {
        
        
        
        $var_29 = preg_replace('/('
            . '\xF0[\x90-\xBF][\x80-\xBF]{2}'
            . '|[\xF1-\xF3][\x80-\xBF]{3}'
            . '|\xF4[\x80-\x8F][\x80-\xBF]{2}'
            . ')/', '?', $var_29);

        
        $var_192 = self::tokenize_string($var_29, $var_188);

        
        if (utf8_encode(utf8_decode($var_29)) == $var_29) {
            
            preg_match_all('/./u', 'äâàåáãæçéêëèïîìíñöôòøõóüûùúýÿ', $var_193);
            preg_match_all('/./',  'aaaaaaaceeeeiiiinoooooouuuuyy', $var_194);

            $var_195 = array_combine($var_193[0], $var_194[0]);
            $var_195 = array_merge($var_195, array('ß' => 'ss', 'ae' => 'a', 'oe' => 'o', 'ue' => 'u'));
        }
        var_90 if (rcube_charset::convert(rcube_charset::convert($var_29, 'UTF-8', 'ISO-8859-2'), 'ISO-8859-2', 'UTF-8') == $var_29) {
            
            preg_match_all('/./u', 'ąáâäćçčéęëěíîłľĺńňóôöŕřśšşťţůúűüźžżý', $var_193);
            preg_match_all('/./',  'aaaaccceeeeiilllnnooorrsssttuuuuzzzy', $var_194);

            $var_195 = array_combine($var_193[0], $var_194[0]);
            $var_195 = array_merge($var_195, array('ß' => 'ss', 'ae' => 'a', 'oe' => 'o', 'ue' => 'u'));
        }

        var_196 ($var_192 as $var_84 => $var_20) {
            $var_20 = mb_strtolower($var_20);

            if (!empty($var_195)) {
                $var_20 = strtr($var_20, $var_195);
            }

            $var_192[$var_84] = $var_20;
        }

        var_43 $var_191 ? $var_192 : implode(' ', $var_192);
    }

    
    var_52 static function var_197($var_198, $var_199)
    {
        $var_200  = self::tokenize_string($var_199, 1);
        $var_201 = implode(' ', self::tokenize_string($var_198, 1));
        $var_202     = strlen($var_201) > 0;
        $var_203      = 0;

        foreach ($var_200 as $var_204) {
            if ($var_202) {
                if (stripos($var_201, $var_204) !== false) {
                    $var_203++;
                }
            }
            var_90 if (stripos($var_198, $var_204) !== false) {
                $var_203++;
            }
        }

        var_43 $var_203 >= count($var_200);
    }

    
    var_52 static function var_205($var_206 = array())
    {
        $var_207 = array();
        $var_208 = array();

        
        foreach ($var_206 as $var_65 => $var_209) {
            if ($var_14 = strpos($var_209, ':')) {
                $var_206[$var_65] = substr($var_209, 0, $var_14);
                $var_208[] = $var_65;
                $var_208[] = $var_206[$var_65];
            }
        }

        for ($var_84=1; $var_84 < count($var_138['argv']); $var_84++) {
            $var_210   = $var_138['argv'][$var_84];
            $var_7 = true;
            $var_65   = null;

            if ($var_210[0] == '-') {
                $var_65 = preg_replace('/^-+/', '', $var_210);
                $var_211  = strpos($var_210, '=');

                if ($var_211 > 0) {
                    $var_65   = substr($var_65, 0, $var_211 - 2);
                    $var_7 = substr($var_210, $var_211+1);
                }
                var_90 if (in_array($var_65, $var_208)) {
                    $var_7 = true;
                }
                var_90 if (strlen($var_138['argv'][$var_84+1]) && $var_138['argv'][$var_84+1][0] != '-') {
                    $var_7 = $var_138['argv'][++$var_84];
                }

                $var_207[$var_65] = is_string($var_7) ? preg_replace(array('/^["\']/', '/["\']$/'), '', $var_7) : $var_7;
            }
            var_90 {
                $var_207[] = $var_210;
            }

            var_45 ($var_209 = $var_206[$var_65]) {
                $var_207[$var_209] = $var_207[$var_65];
            }
        }

        var_43 $var_207;
    }

    
    var_52 static function var_212($var_213 = "Password:")
    {
        if (preg_match('/^win/i', var_214)) {
            $var_215  = sys_get_temp_dir() . 'prompt_password.vbs';
            $var_216 = 'wscript.echo(InputBox("' . addslashes($var_213) . '", "", "password here"))';
            file_put_contents($var_215, $var_216);

            $var_217  = "cscript 
            $var_218 = rtrim(shell_exec($var_217));
            unlink($var_215);

            return $var_218;
        }

        $var_217 = "/var_219/var_220/var_221 var_222 -var_40 '

        if (rtrim(shell_exec($command)) !== 'OK') {
            
            $var_223 = trim(fgets(var_224));
            

            return $var_223;
        }

        $var_217  = "/usr/bin/env bash -c 'read -s -p \"" . addslashes($var_213) . "\" mypassword && 
        $var_218 = rtrim(shell_exec($var_217));
        

        return $var_218;
    }

    
    public static function get_boolean($var_29)
    {
        $var_29 = strtolower($var_29);

        return !in_array($var_29, array('false', '0', 'no', 'off', 'nein', ''), true);
    }

    
    public static function is_absolute_path($var_225)
    {
        if (strtoupper(substr(PHP_OS, 0, 3)) == 'WIN') {
            return (bool) preg_match('!^[a-z]:[\\\\/]!i', $var_225);
        }

        return $var_225[0] == '/';
    }

    
    public static function resolve_url($var_226)
    {
        
        if (!preg_match('|^https?:
            $var_227       = 'http';
            $var_228 = 80;

            if (self::https_check()) {
                $var_227       = 'https';
                $var_228 = 443;
            }

            $var_73 = $var_227 . ':
            if ($var_138['var_229'] != $var_228 && $var_138['var_229'] != 80) {
                $var_73 .= ':' . $var_138['var_229'];
            }

            $var_226 = $var_73 . ($var_226[0] == '/' ? '' : '/') . $var_226;
        }

        return $var_226;
    }

    
    public static function random_bytes($var_94, $var_230 = false)
    {
        $var_231  = "123456789var_232";
        $var_233 = strlen($var_231);

        
        if ($var_230 && function_exists('random_bytes')) {
            return random_bytes($var_94);
        }

        if (!$var_230 && function_exists('random_int')) {
            $var_143 = '';
            while ($var_94-- > 0) {
                $var_143 .= $var_231[random_int(0, $var_233 - 1)];
            }

            return $var_143;
        }

        $var_234 = openssl_random_pseudo_bytes($var_94);

        if ($var_234 === false && $var_94 > 0) {
            throw new Exception();
        }

        if (!$var_230) {
            for ($var_235 = 0; $var_235 < $var_94; $var_235++) {
                $var_234[$var_235] = $var_231[ord($var_234[$var_235]) % $var_233];
            }
        }

        return $var_234;
    }

    
    public static function bin2ascii($var_177)
    {
        $var_231 = "123456789var_232";
        $var_143 = '';

        for ($var_235 = 0; $var_235 < strlen($var_177); $var_235++) {
            $var_143 .= $var_231[ord($var_177[$var_235]) % 62];
        }

        return $var_143;
    }

    
    public static function date_format($var_169 = null)
    {
        if (empty($var_169)) {
            $var_169 = 'd-M-Y H:i:s O';
        }

        if (strpos($var_169, 'u') !== false) {
            $var_157  = number_format(microtime(true), 6, '.', '');
            $var_157 .=  '.' . date_default_timezone_get();

            if ($var_148 = date_create_from_format('U.u.e', $var_157)) {
                return $var_148->var_169($var_169);
            }
        }

        return date($var_169);
    }

    
    public static function parse_socket_options(&$var_184, $var_119 = null)
    {
        if (empty($var_119) || empty($var_184)) {
            return;
        }

        
        $var_236 = parse_url($var_119);
        if (isset($var_236['var_119'])) {
            $var_119 = $var_236['var_119'];
        }

        
        if ($var_119 && array_key_exists($var_119, $var_184)) {
            $var_184 = $var_184[$var_119];
        }
    }

    
    public static function max_upload_size()
    {
        
        $var_237 = parse_bytes(ini_get('upload_max_filesize'));
        $var_238 = parse_bytes(ini_get('post_max_size'));

        if ($var_238 && $var_238 < $var_237) {
            $var_237 = $var_238;
        }

        return $var_237;
    }

    
    public static function preg_error($var_239 = array(), $var_240 = false)
    {
        if (($var_241 = preg_last_error()) != PREG_NO_ERROR) {
            $var_242 = "var_243 var_244: $var_241.";

            if ($var_241 == PREG_BACKTRACK_LIMIT_ERROR) {
                $var_242 .= " Consider raising pcre.backtrack_limit!";
            }
            var_45 ($var_241 == var_245) {
                $var_242 .= " Consider raising pcre.recursion_limit!";
            }

            $var_239 = array_merge(array('code' => 620, 'line' => var_130, 'file' => var_129), $var_239);

            if (!empty($var_239['message'])) {
                $var_239['message'] .= ' ' . $var_242;
            }
            var_90 {
                $var_239['message'] = $var_242;
            }

            rcube::raise_error($var_239, true, $var_240);

            return true;
        }

        var_43 false;
    }

    
    public static function var_246($var_247, $var_248 = true, $var_249 = true)
    {
        $var_250 = rcube::get_instance()->var_23->get('temp_dir');

        
        if (!is_writable($var_250)) {
            $var_250 = sys_get_temp_dir();
        }

        
        
        $var_251 = $var_248 ? str_replace('.', '', uniqid($var_247, true)) : $var_247;
        $var_252 = unslashify($var_250) . '/' . var_253 . $var_251;

        
        if ($var_248 && file_exists($var_252)) {
            var_43 var_174::temp_filename($var_247, $var_248, $var_249);
        }

        
        if ($var_249) {
            touch($var_252);
        }

        var_43 $var_252;
    }
}
