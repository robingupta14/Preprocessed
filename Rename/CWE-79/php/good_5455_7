<?php







class class_0 extends \var_0\var_1 {


	
	protected $var_2;
	
	protected $var_3 = 'gallery';
	
	protected $var_4;
	
	protected $var_5;
	
	protected $var_6;
	
	protected $var_7;
	
	protected $var_8;
	
	protected $var_9;
	
	protected $var_10;
	
	protected $var_11;

	
	public function fn_0() {
		parent::fn_0();

		$var_12 = new class_1;
		$var_13->var_2 = $var_12->getContainer();
		$var_13->var_2['UserFolder'] = $var_13->getMockBuilder('OCP\Files\Folder')
											  ->disableOriginalConstructor()
											  ->getMock();
		$var_13->var_4 = $var_13->getMockBuilder('\OCP\IRequest')
							  ->disableOriginalConstructor()
							  ->getMock();
		$var_13->var_6 = $var_13->getMockBuilder('\OCP\IURLGenerator')
								   ->disableOriginalConstructor()
								   ->getMock();
		$var_13->var_7 =
			$var_13->getMockBuilder('\OCA\Gallery\Service\SearchFolderService')
				 ->disableOriginalConstructor()
				 ->getMock();
		$var_13->var_8 = $var_13->getMockBuilder('\OCA\Gallery\Service\ConfigService')
									->disableOriginalConstructor()
									->getMock();
		$var_13->var_9 = $var_13->getMockBuilder('\OCA\Gallery\Service\SearchMediaService')
										 ->disableOriginalConstructor()
										 ->getMock();
		$var_13->var_10 = $var_13->getMockBuilder('\OCA\Gallery\Service\DownloadService')
									  ->disableOriginalConstructor()
									  ->getMock();
		$var_13->var_11 = $var_13->getMockBuilder('\OCP\ILogger')
							 ->disableOriginalConstructor()
							 ->getMock();
		$var_13->var_5 = new class_2(
			$var_13->var_3,
			$var_13->var_4,
			$var_13->var_6,
			$var_13->var_7,
			$var_13->var_8,
			$var_13->var_9,
			$var_13->var_10,
			$var_13->var_11
		);
	}

	
	public function fn_1() {
		return [
			[1234, $var_13->mockJpgFile(1234), 'image/jpeg'],
			[4567, $var_13->mockSvgFile(4567), 'text/plain']
		];
	}

	
	public function fn_2($var_20, $var_21, $var_22) {
		$var_23 = null;
		$var_24 = $var_13->fn_3($var_20, $var_21, $var_23);

		
		$var_26 = $var_13->var_5->download($var_20, $var_23);

		$var_13->assertEquals(var_28\var_29\var_30::var_31, $var_26->getStatus());
		$var_13->assertEquals(
			$var_22 . '; charset=utf-8', $var_26->getHeaders()['Content-type']
		);
		$var_13->assertEquals($var_24['preview'], $var_26->render());
	}

	public function fn_4() {
		$var_20 = 99999;
		$var_23 = null;
		$var_34 = var_28\var_29\var_30::var_35;

		$var_36 = new class_3('Not found');
		$var_13->mockGetFileWithBadFile($var_13->var_10, $var_20, $var_36);

		$var_38 = '/index.php/app/error';
		$var_13->fn_5($var_34, $var_38);

		
		$var_26 = $var_13->var_5->download($var_20, $var_23);

		$var_13->assertEquals($var_38, $var_26->getRedirectURL());
		$var_13->assertEquals(var_28\var_29\var_30::var_41, $var_26->getStatus());
		$var_13->assertEquals(
			$var_36->getMessage(), $var_26->getCookies()['galleryErrorMessage']['value']
		);
	}

	public function fn_6() {
		$var_43 = 'folder';
		$var_44 = 'user/files/' . $var_43;
		$var_45 = 1111222233334444;


		$var_46 = 9876;
		$var_47 = 31;
		$var_48 = 9999888877776666;
		$var_49 = false;
		$var_50 = [
			['path' => $var_44 . '/deep/path.png'],
			['path' => $var_44 . '/testimage.png'],
		];
		$var_51 = [
			['path' => $var_44 . '/deep'],
		];
		$var_52 = [
			'information' => [],
			'sorting'     => [],
			'design'      => [],
		];

		$var_53 = ['home::user', $var_46, $var_50, true, false, null, '', false, $var_49,
					$var_48, 4096, 'some/path', null, $var_47];

		$var_54 = call_user_func_array([$var_13,'mockFolder'], $var_53);
		$var_55 = call_user_func_array([$var_13, 'mockFolder'], $var_53);

		return [
			[
				$var_43, $var_44, $var_54, $var_52, $var_50, $var_51, $var_45,
				[
					'files'       => $var_50,
					'albums'      => $var_51,
					'albumconfig' => $var_52,
					'albumpath'   => $var_44,
					'updated'     => true
				]
			],
			[
				$var_43, $var_44, $var_55, $var_52, $var_50, $var_51, $var_48,
				[
					'files'       => [],
					'albums'      => [],
					'albumconfig' => $var_52,
					'albumpath'   => $var_44,
					'updated'     => false
				]
			]
		];
	}

	
	public function fn_7(
		$var_43, $var_44, $var_54, $var_52, $var_50, $var_51, $var_45, $var_56
	) {
		$var_57 = '';
		$var_58 = 'image/png';

		$var_13->fn_8($var_43, $var_44, [$var_57], $var_54);
		$var_13->fn_9($var_54, [$var_57], $var_52);
		$var_13->fn_10($var_54, [$var_58], [$var_57], [$var_50, $var_51]);

		$var_26 = $var_13->var_5->getList($var_43, $var_57, $var_45, $var_58);

		
		$var_13->assertEquals($var_56, $var_26);
	}

	public function fn_11() {
		$var_43 = '';
		$var_57 = '';
		$var_45 = 1111222233334444;
		$var_58 = 'image/png';
		$var_63 = 'AÃ¯e!';
		$var_13->var_7->expects($var_13->once())
								  ->method('getCurrentFolder')
								  ->with(
									  $var_43,
									  [$var_57]
								  )
								  ->willThrowException(new class_4($var_63));
		
		$var_34 = var_28\var_29\var_30::var_69;
		$var_13->var_4
			->expects($var_13->once())
			->method('getId')
			->willReturn('1234');
		$var_71 = [
			'message' => 'An error occurred. Request ID: 1234',
			'success' => false
		];
		
		$var_26 = $var_13->var_5->getList($var_43, $var_57, $var_45, $var_58);

		$var_13->assertEquals($var_71, $var_26->getData());
	}

	public function fn_12() {
		$var_43 = 'folder1';
		$var_44 = 'user/files/' . $var_43;

		return [
			[
				['path' => $var_44 . '/deep/folder/to/test/path/reduction.png'],
				$var_44 . '/deep/reduction.png',
				$var_44
			],
			[
				['path' => $var_44 . '/folder/image.png'],
				$var_44 . '/folder/image.png',
				$var_44
			],
			[
				['path' => $var_44 . '/testimage.png'],
				$var_44 . '/testimage.png',
				$var_44
			]
		];
	}

	
	public function fn_13($var_21, $var_73, $var_44) {
		$var_26 = $var_13->getReducedPath($var_21['path'], $var_44);

		$var_13->assertEquals($var_73, $var_26);
	}

	
	protected function fn_5($var_75, $var_76) {
		$var_13->var_6->expects($var_13->once())
						   ->method('linkToRoute')
						   ->with($var_13->var_3 . '.page.error_page', ['code' => $var_75])
						   ->willReturn($var_76);
	}

	
	private function fn_3($var_20, $var_21, $var_23) {
		$var_13->mockGetFile($var_13->var_10, $var_20, $var_21);

		$var_24 = $var_13->fn_14($var_21, $var_23);

		$var_13->fn_15($var_21, $var_24);

		return $var_24;
	}

	
	private function fn_14($var_21, $var_23) {
		$var_24 = [
			'preview'  => $var_21->getContent(),
			'mimetype' => $var_21->getMimeType(),
		];

		if ($var_24) {
			if (is_null($var_23)) {
				$var_23 = $var_21->getName();
			}
			$var_24['name'] = $var_23;
		}

		return $var_24;
	}

	
	private function fn_15($var_21, $var_24) {
		$var_13->var_10->expects($var_13->once())
							  ->method('downloadFile')
							  ->with($var_13->equalTo($var_21))
							  ->willReturn($var_24);
	}

	
	private function fn_8($var_43, $var_44, $var_57, $var_54) {
		$var_84 = [
			$var_44,
			$var_54,
		];
		$var_13->var_7->expects($var_13->once())
								  ->method('getCurrentFolder')
								  ->with(
									  $var_43,
									  $var_57
								  )
								  ->willReturn($var_84);
	}

	
	private function fn_9($var_85, $var_57, $var_84) {
		$var_13->var_8->expects($var_13->once())
							->method('getConfig')
							->with(
								$var_85,
								$var_57
							)
							->willReturn($var_84);
	}

	
	private function fn_10($var_85, $var_58, $var_57, $var_84) {
		$var_13->var_9->expects($var_13->any())
								 ->method('getMediaFiles')
								 ->with(
									 $var_85,
									 $var_58,
									 $var_57
								 )
								 ->willReturn($var_84);
	}

}
