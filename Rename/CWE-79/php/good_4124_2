<?php



class class_0 extends var_0
{
    public $var_1;

    protected $var_2 = array();

    public function fn_0()
    {
        $var_3->var_4 = true;
        $var_3->var_5 = 'order';
        $var_3->var_6 = 'Order';
        $var_3->var_7 = false;
        $var_3->addRowAction('view');
        $var_3->var_9 = true;
        $var_3->var_10 = true;
        $var_3->var_11 = false;

        parent::fn_0();

        $var_3->var_12 = '
		a.id_currency,
		a.id_order AS id_pdf,
		CONCAT(LEFT(c.`firstname`, 1), \'. \', c.`lastname`) AS `customer`,
		osl.`name` AS `osname`,
		os.`color`,
		IF((SELECT so.id_order FROM `' . var_13 . 'orders` so WHERE so.id_customer = a.id_customer AND so.id_order < a.id_order LIMIT 1) > 0, 0, 1) as new,
		country_lang.name as cname,
		IF(a.valid, 1, 0) badge_success';

        $var_3->var_14 = '
		LEFT JOIN `' . var_13 . 'customer` c ON (c.`id_customer` = a.`id_customer`)
		INNER JOIN `' . var_13 . 'address` address ON address.id_address = a.id_address_delivery
		INNER JOIN `' . var_13 . 'country` country ON address.id_country = country.id_country
		INNER JOIN `' . var_13 . 'country_lang` country_lang ON (country.`id_country` = country_lang.`id_country` AND country_lang.`id_lang` = ' . (int) $var_3->var_15->var_16->var_17 . ')
		LEFT JOIN `' . var_13 . 'order_state` os ON (os.`id_order_state` = a.`current_state`)
		LEFT JOIN `' . var_13 . 'order_state_lang` osl ON (os.`id_order_state` = osl.`id_order_state` AND osl.`id_lang` = ' . (int) $var_3->var_15->var_16->var_17 . ')';
        $var_3->var_18 = 'id_order';
        $var_3->var_19 = 'DESC';
        $var_3->var_20 = true;

        $var_21 = class_5::getOrderStates((int) $var_3->var_15->var_16->var_17);
        foreach ($var_21 as $var_22) {
            $var_3->var_2[$var_22['id_order_state']] = $var_22['name'];
        }

        $var_3->var_23 = array(
            'id_order' => array(
                'title' => $var_3->trans('ID', array(), 'Admin.Global'),
                'align' => 'text-center',
                'class' => 'fixed-width-xs',
            ),
            'reference' => array(
                'title' => $var_3->trans('Reference', array(), 'Admin.Global'),
            ),
            'new' => array(
                'title' => $var_3->trans('New client', array(), 'Admin.Orderscustomers.Feature'),
                'align' => 'text-center',
                'type' => 'bool',
                'tmpTableFilter' => true,
                'orderby' => false,
            ),
            'customer' => array(
                'title' => $var_3->trans('Customer', array(), 'Admin.Global'),
                'havingFilter' => true,
            ),
        );

        if (Configuration::get('PS_B2B_ENABLE')) {
            $var_3->var_23 = array_merge($var_3->var_23, array(
                'company' => array(
                    'title' => $var_3->trans('Company', array(), 'Admin.Global'),
                    'filter_key' => 'c!company',
                ),
            ));
        }

        $var_3->var_23 = array_merge($var_3->var_23, array(
            'total_paid_tax_incl' => array(
                'title' => $var_3->trans('Total', array(), 'Admin.Global'),
                'align' => 'text-right',
                'type' => 'price',
                'currency' => true,
                'callback' => 'setOrderCurrency',
                'badge_success' => true,
            ),
            'payment' => array(
                'title' => $var_3->trans('Payment', array(), 'Admin.Global'),
            ),
            'osname' => array(
                'title' => $var_3->trans('Status', array(), 'Admin.Global'),
                'type' => 'select',
                'color' => 'color',
                'list' => $var_3->var_2,
                'filter_key' => 'os!id_order_state',
                'filter_type' => 'int',
                'order_key' => 'osname',
            ),
            'date_add' => array(
                'title' => $var_3->trans('Date', array(), 'Admin.Global'),
                'align' => 'text-right',
                'type' => 'datetime',
                'filter_key' => 'a!date_add',
            ),
            'id_pdf' => array(
                'title' => $var_3->trans('PDF', array(), 'Admin.Global'),
                'align' => 'text-center',
                'callback' => 'printPDFIcons',
                'orderby' => false,
                'search' => false,
                'remove_onclick' => true,
            ),
        ));

        if (Country::isCurrentlyUsed('country', true)) {
            $var_25 = Db::getInstance(var_26)->executeS('
			SELECT DISTINCT c.id_country, cl.`name`
			FROM `' . var_13 . 'orders` o
			' . class_1::addSqlAssociation('orders', 'o') . '
			INNER JOIN `' . var_13 . 'address` a ON a.id_address = o.id_address_delivery
			INNER JOIN `' . var_13 . 'country` c ON a.id_country = c.id_country
			INNER JOIN `' . var_13 . 'country_lang` cl ON (c.`id_country` = cl.`id_country` AND cl.`id_lang` = ' . (int) $var_3->var_15->var_16->var_17 . ')
			ORDER BY cl.name ASC');

            $var_28 = array();
            foreach ($var_25 as $var_29) {
                $var_28[$var_29['id_country']] = $var_29['name'];
            }

            $var_30 = array_slice($var_3->var_23, 0, 3);
            $var_31 = array_slice($var_3->var_23, 3);
            $var_30['cname'] = array(
                'title' => $var_3->trans('Delivery', array(), 'Admin.Global'),
                'type' => 'select',
                'list' => $var_28,
                'filter_key' => 'country!id_country',
                'filter_type' => 'int',
                'order_key' => 'cname',
            );
            $var_3->var_23 = array_merge($var_30, $var_31);
        }

        $var_3->var_32 = 'shop';
        $var_3->var_33 = var_34::var_35;

        if (Tools::isSubmit('id_order')) {
            
            $var_36 = new class_2((int) Tools::getValue('id_order'));
            $var_3->var_15->var_38 = new class_3($var_36->var_40);
            $var_3->var_15->var_41 = new class_4($var_36->var_42);
        }

        $var_3->var_43 = array(
            'updateOrderStatus' => array('text' => $var_3->trans('Change Order Status', array(), 'Admin.Orderscustomers.Feature'), 'icon' => 'icon-refresh'),
        );
    }

    public static function fn_1($var_44, $var_45)
    {
        if (!empty($var_45['id_currency'])) {
            $var_46 = (int) $var_45['id_currency'];
        } else {
            $var_36 = new class_2($var_45['id_order']);
            $var_46 = (int) $var_36->var_47;
        }

        return Tools::displayPrice($var_44, $var_46);
    }

    public function fn_2()
    {
        parent::fn_2();

        if (empty($var_3->var_48)) {
            $var_3->page_header_toolbar_btn['new_order'] = array(
                'href' => self::$var_49 . '&addorder&token=' . $var_3->var_50,
                'desc' => $var_3->trans('Add new order', array(), 'Admin.Orderscustomers.Feature'),
                'icon' => 'process-icon-new',
            );
        }

        if ($var_3->var_48 == 'add') {
            unset($var_3->page_header_toolbar_btn['save']);
        }

        if (Context::getContext()->var_51->getContext() != var_34::var_53 && isset($var_3->page_header_toolbar_btn['new_order'])
            && class_1::isFeatureActive()) {
            unset($var_3->page_header_toolbar_btn['new_order']);
        }
    }

    public function fn_3()
    {
        if (Context::getContext()->var_51->getContext() != var_34::var_53 && class_1::isFeatureActive()) {
            $var_3->var_54[] = $var_3->trans('You have to select a shop before creating new orders.', array(), 'Admin.Orderscustomers.Notification');
        }

        $var_40 = (int) Tools::getValue('id_cart');
        $var_38 = new class_3((int) $var_40);
        if ($var_40 && !Validate::isLoadedObject($var_38)) {
            $var_3->var_54[] = $var_3->trans('This cart does not exists', array(), 'Admin.Orderscustomers.Notification');
        }
        if ($var_40 && Validate::isLoadedObject($var_38) && !$var_38->var_42) {
            $var_3->var_54[] = $var_3->trans('The cart must have a customer', array(), 'Admin.Orderscustomers.Notification');
        }
        if (count($var_3->var_54)) {
            return false;
        }

        parent::fn_3();
        unset($var_3->var_67['save']);
        $var_3->addJqueryPlugin(array('autocomplete', 'fancybox', 'typewatch', 'highlight'));

        $var_56 = array('cheque' => (int) Configuration::get('PS_OS_CHEQUE'),
            'bankwire' => (int) Configuration::get('PS_OS_BANKWIRE'),
            'cashondelivery' => Configuration::get('PS_OS_COD_VALIDATION') ? (int) Configuration::get('PS_OS_COD_VALIDATION') : (int) Configuration::get('PS_OS_PREPARATION'),
            'other' => (int) Configuration::get('PS_OS_PAYMENT'),
        );
        $var_57 = array();
        foreach (PaymentModule::getInstalledPaymentModules() as $var_58) {
            $var_57[] = Module::getInstanceById((int) $var_58['id_module']);
        }

        $var_3->var_15->var_59->assign(array(
            'customersSearchUrl' => var_61\var_61\var_62\var_63::getInstance()->get('router')->generate('admin_customers_search'),
            'recyclable_pack' => (int) Configuration::get('PS_RECYCLABLE_PACK'),
            'gift_wrapping' => (int) Configuration::get('PS_GIFT_WRAPPING'),
            'cart' => $var_38,
            'currencies' => class_16::getCurrenciesByIdShop(Context::getContext()->var_51->var_17),
            'langs' => class_11::getLanguages(true, Context::getContext()->var_51->var_17),
            'payment_modules' => $var_57,
            'order_states' => class_5::getOrderStates((int) Context::getContext()->var_16->var_17),
            'defaults_order_state' => $var_56,
            'show_toolbar' => $var_3->var_66,
            'toolbar_btn' => $var_3->var_67,
            'toolbar_scroll' => $var_3->var_68,
            'PS_CATALOG_MODE' => Configuration::get('PS_CATALOG_MODE'),
            'title' => array($var_3->trans('Orders', array(), 'Admin.Orderscustomers.Feature'), $var_3->trans('Create order', array(), 'Admin.Orderscustomers.Feature')),
        ));
        $var_3->var_69 .= $var_3->createTemplate('form.tpl')->fetch();
    }

    public function fn_4()
    {
        if ($var_3->var_48 == 'view') {
            
            $var_36 = $var_3->loadObject();
            $var_41 = $var_3->var_15->var_41;

            if (!Validate::isLoadedObject($var_36)) {
                Tools::redirectAdmin($var_3->var_15->var_73->getAdminLink('AdminOrders'));
            }

            $var_3->var_1[] = $var_3->trans(
                'Order %reference% from %firstname% %lastname%',
                array(
                    '%reference%' => $var_36->var_75,
                    '%firstname%' => $var_41->var_76,
                    '%lastname%' => $var_41->var_77,
                ),
                'Admin.Orderscustomers.Feature'
            );
            $var_3->addMetaTitle($var_3->var_1[count($var_3->var_1) - 1]);

            if ($var_36->hasBeenShipped()) {
                $var_80 = $var_3->trans('Return products', array(), 'Admin.Orderscustomers.Feature');
            } elseif ($var_36->hasBeenPaid()) {
                $var_80 = $var_3->trans('Standard refund', array(), 'Admin.Orderscustomers.Feature');
            } else {
                $var_80 = $var_3->trans('Cancel products', array(), 'Admin.Orderscustomers.Feature');
            }

            if (!$var_36->hasBeenShipped() && !$var_3->var_82) {
                $var_3->var_67['new'] = array(
                    'short' => 'Create',
                    'href' => '
                    'var_83' => $var_3->trans('Add a product', array(), 'Admin.Orderscustomers.Feature'),
                    'class' => 'add_product',
                );
            }

            if (Configuration::get('PS_ORDER_RETURN') && !$var_3->var_82) {
                $var_3->var_67['standard_refund'] = array(
                    'short' => 'Create',
                    'href' => '',
                    'desc' => $var_80,
                    'class' => 'process-icon-standardRefund',
                );
            }

            if ($var_36->hasInvoice() && !$var_3->var_82) {
                $var_3->var_67['partial_refund'] = array(
                    'short' => 'Create',
                    'href' => '',
                    'desc' => $var_3->trans('Partial refund', array(), 'Admin.Orderscustomers.Feature'),
                    'class' => 'process-icon-partialRefund',
                );
            }
        }
        $var_85 = parent::fn_4();
        if (Context::getContext()->var_51->getContext() != var_34::var_53 && isset($var_3->var_67['new']) && class_1::isFeatureActive()) {
            unset($var_3->var_67['new']);
        }

        return $var_85;
    }

    public function fn_5($var_86 = false)
    {
        parent::fn_5($var_86);

        $var_3->addJqueryUI('ui.datepicker');
        $var_3->addJS(var_89 . 'vendor/d3.v3.min.js');
        $var_3->addJS('https:

        if ($this->access('var_90') && $var_3->var_48 == 'view') {
            $var_3->addJS(var_89 . 'admin/orders.js');
            $var_3->addJS(var_89 . 'tools.js');
            $var_3->addJqueryPlugin('autocomplete');
        }
    }

    public function fn_6($var_91, $var_45)
    {
        static $var_92 = array();

        $var_36 = new class_2($var_91);
        if (!Validate::isLoadedObject($var_36)) {
            return '';
        }

        if (!isset($var_92[$var_36->current_state])) {
            $var_92[$var_36->current_state] = Validate::isLoadedObject($var_36->getCurrentOrderState());
        }

        if (!$var_92[$var_36->current_state]) {
            return '';
        }

        $var_3->var_15->var_59->assign(array(
            'order' => $var_36,
            'tr' => $var_45,
        ));

        return $var_3->createTemplate('_print_pdf_icon.tpl')->fetch();
    }

    public function fn_7()
    {
        if (Tools::isSubmit('submitUpdateOrderStatus')
            && ($var_94 = (int) Tools::getValue('id_order_state'))) {
            if (true !== $var_3->access('edit')) {
                $var_3->var_54[] = $var_3->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');
            } else {
                $var_96 = new class_5($var_94);

                if (!Validate::isLoadedObject($var_96)) {
                    $var_3->var_54[] = $var_3->trans('Order status 
                } else {
                    foreach (Tools::getValue('var_97') var_98 $var_91) {
                        $var_36 = new class_2((int) $var_91);
                        if (!Validate::isLoadedObject($var_36)) {
                            $var_3->var_54[] = $var_3->trans('Order 
                        } else {
                            $current_order_state = $order->getCurrentOrderState();
                            if ($current_order_state->id == $order_state->id) {
                                $this->errors[] = $this->trans('var_37 
                            } else {
                                $var_99 = new class_6();
                                $var_99->var_91 = $var_36->var_17;
                                $var_99->var_100 = (int) $var_3->var_15->var_101->var_17;

                                $var_102 = !$var_36->hasInvoice();
                                $var_99->changeIdOrderState((int) $var_96->var_17, $var_36, $var_102);

                                $var_104 = new class_7($var_36->var_105, $var_36->var_106);
                                $var_107 = array();
                                if ($var_99->var_94 == Configuration::get('PS_OS_SHIPPING') && $var_36->var_108) {
                                    $var_107 = array('{followup}' => str_replace('@', $var_36->var_108, $var_104->var_109));
                                }

                                if ($var_99->addWithemail(true, $var_107)) {
                                    if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT')) {
                                        foreach ($var_36->fn_8() as $var_112) {
                                            if (StockAvailable::dependsOnStock($var_112['product_id'])) {
                                                StockAvailable::synchronize($var_112['product_id'], (int) $var_112['id_shop']);
                                            }
                                        }
                                    }
                                } var_147 {
                                    $var_3->var_54[] = $var_3->trans(
                                        'An error occurred while changing the status for order 
                                        array(
                                            '
                                        ),
                                        'var_113.var_114.var_115'
                                    );
                                }
                            }
                        }
                    }
                }
            }
            if (!count($var_3->var_54)) {
                Tools::redirectAdmin(self::$var_49 . '&conf=4&token=' . $var_3->var_50);
            }
        }
    }

    public function var_116()
    {
        if (Tools::isSubmit('submitBulkupdateOrderStatus' . $var_3->var_5)) {
            if (Tools::getIsset('cancel')) {
                Tools::redirectAdmin(self::$var_49 . '&token=' . $var_3->var_50);
            }

            $var_3->tpl_list_vars['updateOrderStatus_mode'] = true;
            $var_3->tpl_list_vars['order_statuses'] = $var_3->var_2;
            $var_3->tpl_list_vars['REQUEST_URI'] = $_SERVER['REQUEST_URI'];
            $var_3->tpl_list_vars['POST'] = $var_117;
        }

        var_118 parent::renderList();
    }

    var_119 function var_120()
    {
        
        if (Tools::isSubmit('id_order') && Tools::getValue('id_order') > 0) {
            $var_36 = new class_2(Tools::getValue('id_order'));
            if (!Validate::isLoadedObject($var_36)) {
                $var_3->var_54[] = $var_3->trans('The order cannot be found within your database.', array(), 'Admin.Orderscustomers.Notification');
            }
            ShopUrl::cacheMainDomainForShop((int) $var_36->var_121);
        }

        
        var_122 (Tools::isSubmit('submitShippingNumber') && isset($var_36)) {
            if ($var_3->access('edit')) {
                $var_123 = Tools::getValue('shipping_tracking_number');
                $var_105 = Tools::getValue('shipping_carrier');
                $var_124 = $var_36->var_108;

                $var_125 = new class_8(Tools::getValue('id_order_carrier'));
                if (!Validate::isLoadedObject($var_125)) {
                    $var_3->var_54[] = $var_3->trans('The order carrier ID is invalid.', array(), 'Admin.Orderscustomers.Notification');
                } elseif (!empty($var_123) && !Validate::isTrackingNumber($var_123)) {
                    $var_3->var_54[] = $var_3->trans('The tracking number is incorrect.', array(), 'Admin.Orderscustomers.Notification');
                } var_147 {
                    
                    $var_126 = $var_125->var_105;
                    if (!empty($var_105) && $var_126 != $var_105) {
                        $var_36->var_105 = (int) $var_105;
                        $var_125->var_105 = (int) $var_105;
                        $var_125->update();
                        $var_36->refreshShippingCost();
                    }

                    
                    $var_125 = new class_8((int) Tools::getValue('id_order_carrier'));

                    
                    
                    $var_36->var_108 = $var_123;
                    $var_36->update();

                    
                    $var_125->var_123 = pSQL($var_123);
                    if ($var_125->update()) {
                        
                        if (!empty($var_123) && $var_124 != $var_123) {
                            if ($var_125->sendInTransitEmail($var_36)) {
                                $var_41 = new class_4((int) $var_36->var_42);
                                $var_104 = new class_7((int) $var_36->var_105, $var_36->var_106);

                                Hook::exec('actionAdminOrdersTrackingNumberUpdate', array(
                                    'order' => $var_36,
                                    'customer' => $var_41,
                                    'carrier' => $var_104,
                                ), null, false, true, false, $var_36->var_121);

                                Tools::redirectAdmin(self::$var_49 . '&id_order=' . $var_36->var_17 . '&vieworder&conf=4&token=' . $var_3->var_50);
                            } var_147 {
                                $var_3->var_54[] = $var_3->trans('An error occurred while sending an email to the customer.', array(), 'Admin.Orderscustomers.Notification');
                            }
                        }
                    } var_147 {
                        $var_3->var_54[] = $var_3->trans('The order carrier cannot be updated.', array(), 'Admin.Orderscustomers.Notification');
                    }
                }
            } var_147 {
                $var_3->var_54[] = $var_3->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');
            }
        } var_129 (Tools::isSubmit('submitState') && isset($var_36)) {
            
            if ($var_3->access('edit')) {
                $var_96 = new class_5(Tools::getValue('id_order_state'));

                if (!Validate::isLoadedObject($var_96)) {
                    $var_3->var_54[] = $var_3->trans('The new order status is invalid.', array(), 'Admin.Orderscustomers.Notification');
                } var_147 {
                    $var_130 = $var_36->getCurrentOrderState();
                    if ($var_130->var_17 != $var_96->var_17) {
                        
                        $var_99 = new class_6();
                        $var_99->var_91 = $var_36->var_17;
                        $var_99->var_100 = (int) $var_3->var_15->var_101->var_17;

                        $var_102 = false;
                        if (!$var_36->hasInvoice()) {
                            $var_102 = true;
                        }
                        $var_99->changeIdOrderState((int) $var_96->var_17, $var_36, $var_102);

                        $var_104 = new class_7($var_36->var_105, $var_36->var_106);
                        $var_107 = array();
                        if ($var_99->var_94 == Configuration::get('PS_OS_SHIPPING') && $var_36->var_108) {
                            $var_107 = array('{followup}' => str_replace('@', $var_36->var_108, $var_104->var_109));
                        }

                        
                        if ($var_99->addWithemail(true, $var_107)) {
                            
                            if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT')) {
                                foreach ($var_36->fn_8() as $var_112) {
                                    if (StockAvailable::dependsOnStock($var_112['product_id'])) {
                                        StockAvailable::synchronize($var_112['product_id'], (int) $var_112['id_shop']);
                                    }
                                }
                            }

                            var_131::redirectAdmin(self::$var_49 . '&id_order=' . (int) $var_36->var_17 . '&vieworder&token=' . $var_3->var_50);
                        }
                        $var_3->var_54[] = $var_3->trans('An error occurred while changing order status, or we were unable to send an email to the customer.', array(), 'Admin.Orderscustomers.Notification');
                    } var_147 {
                        $var_3->var_54[] = $var_3->trans('The order has already been assigned this status.', array(), 'Admin.Orderscustomers.Notification');
                    }
                }
            } var_147 {
                $var_3->var_54[] = $var_3->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');
            }
        } var_129 (Tools::isSubmit('submitMessage') && isset($var_36)) {
            
            if ($var_3->access('edit')) {
                $var_41 = new class_4(Tools::getValue('id_customer'));
                if (!Validate::isLoadedObject($var_41)) {
                    $var_3->var_54[] = $var_3->trans('The customer is invalid.', array(), 'Admin.Orderscustomers.Notification');
                } elseif (!Tools::getValue('message')) {
                    $var_3->var_54[] = $var_3->trans('The message cannot be blank.', array(), 'Admin.Orderscustomers.Notification');
                } var_147 {
                    
                    $var_132 = call_user_func(array('Message', 'getValidationRules'), 'Message');
                    foreach ($var_132['required'] as $var_133) {
                        if (($var_134 = Tools::getValue($var_133)) == false && (string) $var_134 != '0') {
                            if (!Tools::getValue('id_' . $var_3->var_5) || $var_133 != 'passwd') {
                                $var_3->var_54[] = $var_3->trans('field %s is required.', array('%s' => $var_133), 'Admin.Orderscustomers.Notification');
                            }
                        }
                    }
                    var_135 ($var_132['size'] as $var_133 => $var_136) {
                        if (Tools::getValue($var_133) && Tools::strlen(Tools::getValue($var_133)) > $var_136) {
                            $var_3->var_54[] = $var_3->trans(
                                'The %1$s field is too long (%2$d chars max).',
                                array(
                                    '%1$s' => $var_133,
                                    '%2$d' => $var_136,
                                ),
                                'Admin.Notifications.Error'
                            );
                        }
                    }
                    var_135 ($var_132['validate'] as $var_133 => $var_137) {
                        if (Tools::getValue($var_133)) {
                            if (!Validate::$var_137(htmlentities(Tools::getValue($var_133), var_138, 'UTF-8'))) {
                                $var_3->var_54[] = $var_3->trans('The %s field is invalid.', array('%s' => $var_133), 'Admin.Notifications.Error');
                            }
                        }
                    }

                    var_122 (!count($var_3->var_54)) {
                        
                        $var_139 = class_9::getIdCustomerThreadByEmailAndIdOrder($var_41->var_140, $var_36->var_17);
                        if (!$var_139) {
                            $var_141 = new class_9();
                            $var_141->var_142 = 0;
                            $var_141->var_42 = (int) $var_36->var_42;
                            $var_141->var_121 = (int) $var_3->var_15->var_51->var_17;
                            $var_141->var_91 = (int) $var_36->var_17;
                            $var_141->var_106 = (int) $var_3->var_15->var_16->var_17;
                            $var_141->var_140 = $var_41->var_140;
                            $var_141->var_22 = 'open';
                            $var_141->var_50 = Tools::passwdGen(12);
                            $var_141->add();
                        } var_147 {
                            $var_141 = new class_9((int) $var_139);
                        }

                        $var_143 = new class_10();
                        $var_143->var_139 = $var_141->var_17;
                        $var_143->var_100 = (int) $var_3->var_15->var_101->var_17;
                        $var_143->var_144 = Tools::getValue('message');
                        $var_143->var_145 = Tools::getValue('visibility');

                        if (!$var_143->add()) {
                            $var_3->var_54[] = $var_3->trans('An error occurred while saving the message.', array(), 'Admin.Notifications.Error');
                        } elseif ($var_143->var_145) {
                            Tools::redirectAdmin(self::$var_49 . '&id_order=' . (int) $var_36->var_17 . '&vieworder&conf=11&token=' . $var_3->var_50);
                        } var_147 {
                            $var_144 = $var_143->var_144;
                            if (Configuration::get('PS_MAIL_TYPE', null, null, $var_36->var_121) != var_148::var_149) {
                                $var_144 = Tools::nl2br(Tools::htmlentitiesUTF8($var_143->var_144));
                            }

                            $var_150 = new class_11((int) $var_36->var_106);
                            $var_151 = array(
                                '{lastname}' => $var_41->var_77,
                                '{firstname}' => $var_41->var_76,
                                '{id_order}' => $var_36->var_17,
                                '{order_name}' => $var_36->getUniqReference(),
                                '{message}' => $var_144,
                            );

                            if (
                                @Mail::Send(
                                    (int) $var_36->var_106,
                                    'order_merchant_comment',
                                    $var_3->trans(
                                        'New message regarding your order',
                                        array(),
                                        'Emails.Subject',
                                        $var_150->var_153
                                    ),
                                    $var_151,
                                    $var_41->var_140,
                                    $var_41->var_76 . ' ' . $var_41->var_77,
                                    null,
                                    null,
                                    null,
                                    null,
                                    var_154,
                                    true,
                                    (int) $var_36->var_121
                                )
                            ) {
                                Tools::redirectAdmin(self::$var_49 . '&id_order=' . $var_36->var_17 . '&vieworder&conf=11' . '&token=' . $var_3->var_50);
                            }
                        }
                        $var_3->var_54[] = $var_3->trans('An error occurred while sending an email to the customer.', array(), 'Admin.Orderscustomers.Notification');
                    }
                }
            } var_147 {
                $var_3->var_54[] = $var_3->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');
            }
        } var_129 (Tools::isSubmit('partialRefund') && isset($var_36)) {
            
            if ($var_3->access('edit')) {
                if (Tools::isSubmit('partialRefundProduct') && ($var_155 = Tools::getValue('partialRefundProduct')) && is_array($var_155)) {
                    $var_156 = 0;
                    $var_157 = array();
                    $var_158 = array();
                    foreach ($var_155 as $var_159 => $var_160) {
                        $var_161 = Tools::getValue('partialRefundProductQuantity');
                        if (!$var_161[$var_159]) {
                            var_162;
                        }

                        $var_158[$var_159] = (int) $var_161[$var_159];

                        $var_157[$var_159] = array(
                            'quantity' => (int) $var_161[$var_159],
                            'id_order_detail' => (int) $var_159,
                        );

                        $var_163 = new class_12((int) $var_159);
                        if (empty($var_160)) {
                            $var_157[$var_159]['unit_price'] = (!Tools::getValue('TaxMethod') ? $var_163->var_165 : $var_163->var_166);
                            $var_157[$var_159]['amount'] = $var_163->var_166 * $var_157[$var_159]['quantity'];
                        } var_147 {
                            $var_157[$var_159]['amount'] = (float) str_replace(',', '.', $var_160);
                            $var_157[$var_159]['unit_price'] = $var_157[$var_159]['amount'] / $var_157[$var_159]['quantity'];
                        }
                        $var_156 += $var_157[$var_159]['amount'];
                        if (!$var_36->hasBeenDelivered() || ($var_36->hasBeenDelivered() && Tools::isSubmit('reinjectQuantities')) && $var_157[$var_159]['quantity'] > 0) {
                            $var_3->fn_22($var_163, $var_157[$var_159]['quantity']);
                        }
                    }

                    $var_168 = (float) str_replace(',', '.', Tools::getValue('partialRefundShippingCost')) ? (float) str_replace(',', '.', Tools::getValue('partialRefundShippingCost')) : false;

                    if ($var_156 == 0 && $var_168 == 0) {
                        if (!empty($var_155)) {
                            $var_3->var_54[] = $var_3->trans('Please enter a quantity to proceed with your refund.', array(), 'Admin.Orderscustomers.Notification');
                        } var_147 {
                            $var_3->var_54[] = $var_3->trans('Please enter an amount to proceed with your refund.', array(), 'Admin.Orderscustomers.Notification');
                        }

                        var_118 false;
                    }

                    $var_169 = false;
                    $var_170 = 0;

                    if ((int) var_131::var_171('var_172') == 1) {
                        $var_156 -= $var_170 = (float) var_131::var_171('order_discount_price');
                    } var_129 ((int) Tools::getValue('refund_voucher_off') == 2) {
                        $var_169 = true;
                        $var_156 = $var_170 = (float) Tools::getValue('refund_voucher_choose');
                    }

                    var_122 ($var_168 > 0) {
                        if (!Tools::getValue('TaxMethod')) {
                            $var_173 = new class_13();
                            $var_173->var_174 = $var_36->var_175;
                            $var_176 = new class_14(array($var_173));
                            $var_156 += $var_176->addTaxes($var_168);
                        } var_147 {
                            $var_156 += $var_168;
                        }
                    }

                    $var_125 = new class_8((int) $var_36->getIdOrderCarrier());
                    if (Validate::isLoadedObject($var_125)) {
                        $var_125->var_179 = (float) $var_36->var_224();
                        if ($var_125->update()) {
                            $var_36->var_179 = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $var_125->var_179);
                        }
                    }

                    var_122 ($var_156 >= 0) {
                        if (!OrderSlip::create(
                            $var_36,
                            $var_157,
                            $var_168,
                            $var_170,
                            $var_169,
                            (Tools::getValue('TaxMethod') ? false : true)
                        )) {
                            $var_3->var_54[] = $var_3->trans('You cannot generate a partial credit slip.', array(), 'Admin.Orderscustomers.Notification');
                        } var_147 {
                            Hook::exec('actionOrderSlipAdd', array('order' => $var_36, 'productList' => $var_157, 'qtyList' => $var_158), null, false, true, false, $var_36->var_121);
                            $var_41 = new class_4((int) ($var_36->var_42));
                            $var_180['{lastname}'] = $var_41->var_77;
                            $var_180['{firstname}'] = $var_41->var_76;
                            $var_180['{id_order}'] = $var_36->var_17;
                            $var_180['{order_name}'] = $var_36->getUniqReference();
                            $var_150 = new class_11((int) $var_36->var_106);
                            @Mail::Send(
                                (int) $var_36->var_106,
                                'credit_slip',
                                $var_3->trans(
                                    'New credit slip regarding your order',
                                    array(),
                                    'Emails.Subject',
                                    $var_150->var_153
                                ),
                                $var_180,
                                $var_41->var_140,
                                $var_41->var_76 . ' ' . $var_41->var_77,
                                null,
                                null,
                                null,
                                null,
                                var_154,
                                true,
                                (int) $var_36->var_121
                            );
                        }

                        var_135 ($var_157 as &$var_112) {
                            $var_163 = new class_12((int) $var_112['id_order_detail']);
                            if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT')) {
                                StockAvailable::synchronize($var_163->var_181);
                            }
                        }

                        
                        var_122 (Tools::isSubmit('generateDiscountRefund') && !count($var_3->var_54) && $var_156 > 0) {
                            $var_182 = new class_15();
                            $var_182->var_183 = $var_3->trans('Credit slip for order 
                            $language_ids = Language::getIDs(false);
                            foreach ($language_ids as $id_lang) {
                                
                                $cart_rule->name[$id_lang] = sprintf('var_184%1$var_185%2$var_186', $order->id_customer, $order->id);
                            }

                            
                            $cart_rule->code = sprintf('var_184%1$var_185%2$var_186', $order->id_customer, $order->id);
                            $cart_rule->quantity = 1;
                            $cart_rule->quantity_per_user = 1;

                            
                            $cart_rule->id_customer = $order->id_customer;
                            $now = time();
                            $cart_rule->date_from = date('var_187-var_188-var_186 var_189:var_190:var_191', $var_192);
                            $var_182->var_193 = date('Y-m-d H:i:s', strtotime('+1 year'));
                            $var_182->var_194 = 1;
                            $var_182->var_195 = 1;

                            $var_182->var_196 = $var_156;
                            $var_182->var_197 = $var_36->getTaxCalculationMethod() != var_199;
                            $var_182->var_200 = $var_36->var_47;
                            $var_182->var_201 = $var_36->var_47;

                            if (!$var_182->add()) {
                                $var_3->var_54[] = $var_3->trans('You cannot generate a voucher.', array(), 'Admin.Orderscustomers.Notification');
                            } var_147 {
                                
                                foreach ($var_202 as $var_106) {
                                    $var_182->var_288[$var_106] = sprintf('V%1$dC%2$dO%3$d', $var_182->var_17, $var_36->var_42, $var_36->var_17);
                                }
                                $var_182->var_203 = sprintf('V%1$dC%2$dO%3$d', $var_182->var_17, $var_36->var_42, $var_36->var_17);

                                if (!$var_182->update()) {
                                    $var_3->var_54[] = $var_3->trans('You cannot generate a voucher.', array(), 'Admin.Orderscustomers.Notification');
                                } var_147 {
                                    $var_204 = $var_3->var_15->var_204;
                                    $var_41 = new class_4((int) ($var_36->var_42));
                                    $var_180['{lastname}'] = $var_41->var_77;
                                    $var_180['{firstname}'] = $var_41->var_76;
                                    $var_180['{id_order}'] = $var_36->var_17;
                                    $var_180['{order_name}'] = $var_36->getUniqReference();
                                    $var_180['{voucher_amount}'] = Tools::displayPrice($var_182->var_196, $var_204, false);
                                    $var_180['{voucher_num}'] = $var_182->var_203;
                                    $var_150 = new class_11((int) $var_36->var_106);
                                    @Mail::Send(
                                        (int) $var_36->var_106,
                                        'voucher',
                                        $var_3->trans(
                                            'New voucher for your order 
                                            array($order->reference),
                                            'var_205.var_206',
                                            $var_150->var_153
                                        ),
                                        $var_180,
                                        $var_41->var_140,
                                        $var_41->var_76 . ' ' . $var_41->var_77,
                                        null,
                                        null,
                                        null,
                                        null,
                                        var_154,
                                        true,
                                        (int) $var_36->var_121
                                    );
                                }
                            }
                        }
                    } var_147 {
                        if (!empty($var_155)) {
                            $var_3->var_54[] = $var_3->trans('Please enter a quantity to proceed with your refund.', array(), 'Admin.Orderscustomers.Notification');
                        } var_147 {
                            $var_3->var_54[] = $var_3->trans('Please enter an amount to proceed with your refund.', array(), 'Admin.Orderscustomers.Notification');
                        }
                    }

                    
                    var_122 (!count($var_3->var_54)) {
                        Tools::redirectAdmin(self::$var_49 . '&id_order=' . $var_36->var_17 . '&vieworder&conf=30&token=' . $var_3->var_50);
                    }
                } var_147 {
                    $var_3->var_54[] = $var_3->trans('The partial refund data is incorrect.', array(), 'Admin.Orderscustomers.Notification');
                }
            } else {
                $var_3->var_54[] = $var_3->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');
            }
        } elseif (Tools::isSubmit('cancelProduct') && isset($var_36)) {
            
            if ($var_3->access('delete')) {
                if (!Tools::isSubmit('id_order_detail') && !Tools::isSubmit('id_customization')) {
                    $var_3->var_54[] = $var_3->trans('You must select a product.', array(), 'Admin.Orderscustomers.Notification');
                } var_129 (!Tools::isSubmit('cancelQuantity') && !Tools::isSubmit('cancelCustomizationQuantity')) {
                    $var_3->var_54[] = $var_3->trans('You must enter a quantity.', array(), 'Admin.Orderscustomers.Notification');
                } var_147 {
                    $var_207 = Tools::getValue('id_order_detail');
                    if ($var_207) {
                        $var_207 = array_map('intval', $var_207);
                    }

                    $var_208 = Tools::getValue('id_customization');
                    if ($var_208) {
                        $var_208 = array_map('intval', $var_208);
                    }

                    $var_209 = Tools::getValue('cancelQuantity');
                    if ($var_209) {
                        $var_209 = array_map('intval', $var_209);
                    }

                    $var_210 = Tools::getValue('cancelCustomizationQuantity');
                    if ($var_210) {
                        $var_210 = array_map('intval', $var_210);
                    }

                    $var_211 = $var_207;
                    $var_158 = $var_209;

                    if ($var_208) {
                        foreach ($var_208 as $var_212 => $var_159) {
                            $var_211[(int) $var_159] = $var_159;
                            if (isset($var_210[$var_212])) {
                                $var_158[(int) $var_159] += $var_210[$var_212];
                            }
                        }
                    }

                    var_122 ($var_207 || $var_208) {
                        if ($var_207) {
                            $var_40 = class_3::getCartIdByOrderId($var_36->var_17);
                            $var_213 = Customization::countQuantityByCart($var_40);

                            foreach ($var_207 as $var_212 => $var_159) {
                                $var_214 = abs($var_209[$var_212]);
                                if (!$var_214) {
                                    $var_3->var_54[] = $var_3->trans('No quantity has been selected for this product.', array(), 'Admin.Orderscustomers.Notification');
                                }

                                $var_163 = new class_12($var_159);
                                $var_215 = 0;
                                if (array_key_exists($var_163->var_181, $var_213) && array_key_exists($var_163->var_216, $var_213[$var_163->var_181])) {
                                    $var_215 = (int) $var_213[$var_163->var_181][$var_163->var_216];
                                }

                                if (($var_163->var_217 - $var_215 - $var_163->var_218 - $var_163->var_219) < $var_214) {
                                    $var_3->var_54[] = $var_3->trans('An invalid quantity was selected for this product.', array(), 'Admin.Orderscustomers.Notification');
                                }
                            }
                        }
                        var_122 ($var_208) {
                            $var_213 = Customization::retrieveQuantitiesFromIds(array_keys($var_208));

                            foreach ($var_208 as $var_220 => $var_159) {
                                $var_214 = abs($var_210[$var_220]);
                                $var_215 = $var_213[$var_220];

                                if (!$var_214) {
                                    $var_3->var_54[] = $var_3->trans('No quantity has been selected for this product.', array(), 'Admin.Orderscustomers.Notification');
                                }

                                if ($var_214 > ($var_215['quantity'] - ($var_215['quantity_refunded'] + $var_215['quantity_returned']))) {
                                    $var_3->var_54[] = $var_3->trans('An invalid quantity was selected for this product.', array(), 'Admin.Orderscustomers.Notification');
                                }
                            }
                        }

                        var_122 (!count($var_3->var_54) && $var_207) {
                            foreach ($var_207 as $var_212 => $var_159) {
                                $var_221 = abs($var_209[$var_212]);
                                $var_163 = new class_12((int) ($var_159));

                                if (!$var_36->hasBeenDelivered() || ($var_36->hasBeenDelivered() && Tools::isSubmit('reinjectQuantities')) && $var_221 > 0) {
                                    $var_3->fn_22($var_163, $var_221);
                                }

                                
                                $var_163 = new class_12((int) $var_159);
                                if (!$var_36->deleteProduct($var_36, $var_163, $var_221)) {
                                    $var_3->var_54[] = $var_3->trans('An error occurred while attempting to delete the product.', array(), 'Admin.Orderscustomers.Notification') . ' <span class="bold">' . $var_163->var_223 . '</span>';
                                }
                                
                                $var_125 = new class_8((int) $var_36->getIdOrderCarrier());
                                if (Validate::isLoadedObject($var_125)) {
                                    $var_125->var_179 = (float) $var_36->getTotalWeight();
                                    if ($var_125->update()) {
                                        $var_36->var_179 = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $var_125->var_179);
                                    }
                                }

                                var_122 (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') && StockAvailable::dependsOnStock($var_163->var_181)) {
                                    StockAvailable::synchronize($var_163->var_181);
                                }
                                var_225::exec('actionProductCancel', array('order' => $var_36, 'id_order_detail' => (int) $var_159), null, false, true, false, $var_36->var_121);
                            }
                        }
                        var_122 (!count($var_3->var_54) && $var_208) {
                            foreach ($var_208 as $var_220 => $var_159) {
                                $var_163 = new class_12((int) ($var_159));
                                $var_214 = abs($var_210[$var_220]);
                                if (!$var_36->deleteCustomization($var_220, $var_214, $var_163)) {
                                    $var_3->var_54[] = $var_3->trans('An error occurred while attempting to delete product customization.', array(), 'Admin.Orderscustomers.Notification') . ' ' . $var_220;
                                }
                            }
                        }
                        
                        var_122 ((Tools::isSubmit('generateCreditSlip') || Tools::isSubmit('generateDiscount')) && !count($var_3->var_54)) {
                            $var_41 = new class_4((int) ($var_36->var_42));
                            $var_180['{lastname}'] = $var_41->var_77;
                            $var_180['{firstname}'] = $var_41->var_76;
                            $var_180['{id_order}'] = $var_36->var_17;
                            $var_180['{order_name}'] = $var_36->getUniqReference();
                        }

                        
                        var_122 (Tools::isSubmit('generateCreditSlip') && !count($var_3->var_54)) {
                            $var_227 = array();
                            $var_156 = $var_163->var_166 * $var_158[$var_159];

                            $var_169 = false;
                            if ((int) Tools::getValue('refund_total_voucher_off') == 1) {
                                $var_156 -= $var_170 = (float) Tools::getValue('order_discount_price');
                            } elseif ((int) Tools::getValue('refund_total_voucher_off') == 2) {
                                $var_169 = true;
                                $var_156 = $var_170 = (float) Tools::getValue('refund_total_voucher_choose');
                            }
                            foreach ($var_211 as $var_159) {
                                $var_163 = new class_12((int) $var_159);
                                $var_227[$var_159] = array(
                                    'id_order_detail' => $var_159,
                                    'quantity' => $var_158[$var_159],
                                    'unit_price' => $var_163->var_165,
                                    'amount' => isset($var_156) ? $var_156 : $var_163->var_166 * $var_158[$var_159],
                                );
                            }

                            $var_228 = Tools::isSubmit('shippingBack') ? null : false;

                            if (!OrderSlip::create($var_36, $var_227, $var_228, $var_170, $var_169)) {
                                $var_3->var_54[] = $var_3->trans('A credit slip cannot be generated.', array(), 'Admin.Orderscustomers.Notification');
                            } var_147 {
                                Hook::exec('actionOrderSlipAdd', array('order' => $var_36, 'productList' => $var_211, 'qtyList' => $var_158), null, false, true, false, $var_36->var_121);
                                $var_150 = new class_11((int) $var_36->var_106);
                                @Mail::Send(
                                    (int) $var_36->var_106,
                                    'credit_slip',
                                    $var_3->trans(
                                        'New credit slip regarding your order',
                                        array(),
                                        'Emails.Subject',
                                        $var_150->var_153
                                    ),
                                    $var_180,
                                    $var_41->var_140,
                                    $var_41->var_76 . ' ' . $var_41->var_77,
                                    null,
                                    null,
                                    null,
                                    null,
                                    var_154,
                                    true,
                                    (int) $var_36->var_121
                                );
                            }
                        }

                        
                        var_122 (Tools::isSubmit('generateDiscount') && !count($var_3->var_54)) {
                            $var_229 = new class_15();
                            $var_202 = class_11::getIDs((bool) $var_36);
                            $var_229->var_183 = $var_3->trans('Credit card slip for order 
                            foreach ($language_ids as $id_lang) {
                                
                                $cartrule->name[$id_lang] = 'var_184' . (int) ($var_36->var_42) . 'O' . (int) ($var_36->var_17);
                            }
                            
                            $var_229->var_203 = 'V0C' . (int) ($var_36->var_42) . 'O' . (int) ($var_36->var_17);

                            $var_229->var_161 = 1;
                            $var_229->var_230 = 1;
                            
                            $var_229->var_42 = $var_36->var_42;
                            $var_192 = time();
                            $var_229->var_231 = date('Y-m-d H:i:s', $var_192);
                            $var_229->var_193 = date('Y-m-d H:i:s', $var_192 + 31557600.0); 
                            $var_229->var_195 = 1;

                            $var_232 = $var_36->fn_8(false, $var_211, $var_158);

                            $var_233 = 0;
                            foreach ($var_232 as $var_112) {
                                $var_233 += $var_112['unit_price_tax_incl'] * $var_112['product_quantity'];
                            }

                            if (Tools::isSubmit('shippingBack')) {
                                $var_233 += $var_36->var_234;
                            }

                            if ((int) Tools::getValue('refund_total_voucher_off') == 1) {
                                $var_233 -= (float) Tools::getValue('order_discount_price');
                            } elseif ((int) Tools::getValue('refund_total_voucher_off') == 2) {
                                $var_233 = (float) Tools::getValue('refund_total_voucher_choose');
                            }

                            $var_229->var_196 = $var_233;
                            $var_229->var_197 = true;
                            $var_229->var_200 = $var_36->var_47;
                            $var_229->var_201 = $var_36->var_47;

                            if (!$var_229->add()) {
                                $var_3->var_54[] = $var_3->trans('You cannot generate a voucher.', array(), 'Admin.Orderscustomers.Notification');
                            } var_147 {
                                
                                foreach ($var_202 as $var_106) {
                                    $var_229->var_288[$var_106] = 'V' . (int) ($var_229->var_17) . 'C' . (int) ($var_36->var_42) . 'O' . $var_36->var_17;
                                }
                                $var_229->var_203 = 'V' . (int) ($var_229->var_17) . 'C' . (int) ($var_36->var_42) . 'O' . $var_36->var_17;
                                if (!$var_229->update()) {
                                    $var_3->var_54[] = $var_3->trans('You cannot generate a voucher.', array(), 'Admin.Orderscustomers.Notification');
                                } var_147 {
                                    $var_204 = $var_3->var_15->var_204;
                                    $var_180['{voucher_amount}'] = Tools::displayPrice($var_229->var_196, $var_204, false);
                                    $var_180['{voucher_num}'] = $var_229->var_203;
                                    $var_150 = new class_11((int) $var_36->var_106);
                                    @Mail::Send(
                                        (int) $var_36->var_106,
                                        'voucher',
                                        $var_3->trans(
                                            'New voucher for your order 
                                            array($order->reference),
                                            'var_205.var_206',
                                            $var_150->var_153
                                        ),
                                        $var_180,
                                        $var_41->var_140,
                                        $var_41->var_76 . ' ' . $var_41->var_77,
                                        null,
                                        null,
                                        null,
                                        null,
                                        var_154,
                                        true,
                                        (int) $var_36->var_121
                                    );
                                }
                            }
                        }
                    } else {
                        $var_3->var_54[] = $var_3->trans('No product or quantity has been selected.', array(), 'Admin.Orderscustomers.Notification');
                    }

                    
                    var_122 (!count($var_3->var_54)) {
                        Tools::redirectAdmin(self::$var_49 . '&id_order=' . $var_36->var_17 . '&vieworder&conf=31&token=' . $var_3->var_50);
                    }
                }
            } else {
                $var_3->var_54[] = $var_3->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');
            }
        } elseif (Tools::isSubmit('messageReaded')) {
            Message::markAsReaded(Tools::getValue('messageReaded'), $var_3->var_15->var_101->var_17);
        } var_129 (Tools::isSubmit('submitAddPayment') && isset($var_36)) {
            if ($var_3->access('edit')) {
                $var_156 = str_replace(',', '.', Tools::getValue('payment_amount'));
                $var_204 = new class_16(Tools::getValue('payment_currency'));
                $var_235 = $var_36->hasInvoice();
                if ($var_235) {
                    $var_236 = new class_17(Tools::getValue('payment_invoice'));
                } var_147 {
                    $var_236 = null;
                }

                if (!Validate::isLoadedObject($var_36)) {
                    $var_3->var_54[] = $var_3->trans('The order cannot be found', array(), 'Admin.Orderscustomers.Notification');
                } elseif (!Validate::isNegativePrice($var_156) || !(float) $var_156) {
                    $var_3->var_54[] = $var_3->trans('The amount is invalid.', array(), 'Admin.Orderscustomers.Notification');
                } elseif (!Validate::isGenericName(Tools::getValue('payment_method'))) {
                    $var_3->var_54[] = $var_3->trans('The selected payment method is invalid.', array(), 'Admin.Orderscustomers.Notification');
                } elseif (!Validate::isString(Tools::getValue('payment_transaction_id'))) {
                    $var_3->var_54[] = $var_3->trans('The transaction ID is invalid.', array(), 'Admin.Orderscustomers.Notification');
                } elseif (!Validate::isLoadedObject($var_204)) {
                    $var_3->var_54[] = $var_3->trans('The selected currency is invalid.', array(), 'Admin.Orderscustomers.Notification');
                } elseif ($var_235 && !Validate::isLoadedObject($var_236)) {
                    $var_3->var_54[] = $var_3->trans('The invoice is invalid.', array(), 'Admin.Orderscustomers.Notification');
                } elseif (!Validate::isDate(Tools::getValue('payment_date'))) {
                    $var_3->var_54[] = $var_3->trans('The date is invalid', array(), 'Admin.Orderscustomers.Notification');
                } var_147 {
                    if (!$var_36->addOrderPayment($var_156, Tools::getValue('payment_method'), Tools::getValue('payment_transaction_id'), $var_204, Tools::getValue('payment_date'), $var_236)) {
                        $var_3->var_54[] = $var_3->trans('An error occurred during payment.', array(), 'Admin.Orderscustomers.Notification');
                    } var_147 {
                        Tools::redirectAdmin(self::$var_49 . '&id_order=' . $var_36->var_17 . '&vieworder&conf=4&token=' . $var_3->var_50);
                    }
                }
            } var_147 {
                $var_3->var_54[] = $var_3->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');
            }
        } var_129 (Tools::isSubmit('submitEditNote')) {
            $var_239 = Tools::getValue('note');
            $var_236 = new class_17((int) Tools::getValue('id_order_invoice'));
            if (Validate::isLoadedObject($var_236) && Validate::isCleanHtml($var_239)) {
                if ($var_3->access('edit')) {
                    $var_236->var_239 = $var_239;
                    if ($var_236->save()) {
                        Tools::redirectAdmin(self::$var_49 . '&id_order=' . $var_236->var_91 . '&vieworder&conf=4&token=' . $var_3->var_50);
                    } var_147 {
                        $var_3->var_54[] = $var_3->trans('The invoice note was not saved.', array(), 'Admin.Orderscustomers.Notification');
                    }
                } var_147 {
                    $var_3->var_54[] = $var_3->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');
                }
            } var_147 {
                $var_3->var_54[] = $var_3->trans('Failed to upload the invoice and edit its note.', array(), 'Admin.Orderscustomers.Notification');
            }
        } var_129 (Tools::isSubmit('submitAddOrder') && ($var_40 = Tools::getValue('id_cart')) &&
            ($var_241 = Tools::getValue('payment_module_name')) &&
            ($var_94 = Tools::getValue('id_order_state')) && Validate::isModuleName($var_241)) {
            if ($var_3->access('edit')) {
                if (!Configuration::get('PS_CATALOG_MODE')) {
                    $var_242 = Module::getInstanceByName($var_241);
                } var_147 {
                    $var_242 = new class_18();
                }

                $var_38 = new class_3((int) $var_40);
                Context::getContext()->var_204 = new class_16((int) $var_38->var_47);
                Context::getContext()->var_41 = new class_4((int) $var_38->var_42);

                $var_243 = false;
                if (($var_243 = (bool) !class_20::isCountryActiveById((int) $var_38->var_244))
                    || !class_20::isCountryActiveById((int) $var_38->var_245)) {
                    if ($var_243) {
                        $var_3->var_54[] = $var_3->trans('This delivery address country is not active.', array(), 'Admin.Orderscustomers.Notification');
                    } var_147 {
                        $var_3->var_54[] = $var_3->trans('This invoice address country is not active.', array(), 'Admin.Orderscustomers.Notification');
                    }
                } var_147 {
                    $var_101 = new class_19((int) Context::getContext()->var_246->var_100);
                    $var_242->validateOrder(
                        (int) $var_38->var_17,
                        (int) $var_94,
                        $var_38->getOrderTotal(true, var_39::var_249),
                        $var_242->var_250,
                        $var_3->trans('Manual order -- Employee:', array(), 'Admin.Orderscustomers.Feature') . ' ' .
                        substr($var_101->var_76, 0, 1) . '. ' . $var_101->var_77,
                        array(),
                        null,
                        false,
                        $var_38->var_251
                    );
                    if ($var_242->var_252) {
                        Tools::redirectAdmin(self::$var_49 . '&id_order=' . $var_242->var_252 . '&vieworder' . '&token=' . $var_3->var_50);
                    }
                }
            } var_147 {
                $var_3->var_54[] = $var_3->trans('You do not have permission to add this.', array(), 'Admin.Notifications.Error');
            }
        } var_129 ((Tools::isSubmit('submitAddressShipping') || Tools::isSubmit('submitAddressInvoice')) && isset($var_36)) {
            if ($var_3->access('edit')) {
                $var_253 = new class_20(Tools::getValue('id_address'));
                $var_38 = class_3::getCartByOrderId($var_36->var_17);
                if (Validate::isLoadedObject($var_253)) {
                    
                    if (Tools::isSubmit('submitAddressShipping')) {
                        $var_36->var_244 = $var_253->var_17;
                        $var_38->var_244 = $var_253->var_17;
                    } var_129 (Tools::isSubmit('submitAddressInvoice')) {
                        $var_36->var_245 = $var_253->var_17;
                        $var_38->var_245 = $var_253->var_17;
                    }
                    $var_36->update();
                    $var_36->var_421();
                    $var_38->var_127();

                    Tools::redirectAdmin(self::$var_49 . '&id_order=' . $var_36->var_17 . '&vieworder&conf=4&token=' . $var_3->var_50);
                } var_147 {
                    $var_3->var_54[] = $var_3->trans('This address can\'t be loaded', array(), 'Admin.Orderscustomers.Notification');
                }
            } var_147 {
                $var_3->var_54[] = $var_3->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');
            }
        } var_129 (Tools::isSubmit('submitChangeCurrency') && isset($var_36)) {
            if ($var_3->access('edit')) {
                if (Tools::getValue('new_currency') != $var_36->var_47 && !$var_36->var_254) {
                    $var_255 = new class_16($var_36->var_47);
                    $var_204 = new class_16(Tools::getValue('new_currency'));
                    if (!Validate::isLoadedObject($var_204)) {
                        throw new class_21('Can\'t load Currency object');
                    }

                    
                    foreach ($var_36->getOrderDetailList() as $var_29) {
                        $var_163 = new class_12($var_29['id_order_detail']);
                        $var_257 = array(
                            'ecotax',
                            'product_price',
                            'reduction_amount',
                            'total_shipping_price_tax_excl',
                            'total_shipping_price_tax_incl',
                            'total_price_tax_incl',
                            'total_price_tax_excl',
                            'product_quantity_discount',
                            'purchase_supplier_price',
                            'reduction_amount',
                            'reduction_amount_tax_incl',
                            'reduction_amount_tax_excl',
                            'unit_price_tax_incl',
                            'unit_price_tax_excl',
                            'original_product_price',
                        );
                        foreach ($var_257 as $var_133) {
                            $var_163->{$var_133} = Tools::convertPriceFull($var_163->{$var_133}, $var_255, $var_204);
                        }

                        $var_163->update();
                        $var_163->var_417($var_36);
                    }

                    var_135 ($var_36->getCartRules() as $var_259) {
                        $var_260 = new class_22((int) $var_259['id_order_cart_rule']);
                        if ($var_259['value'] > 0) {
                            $var_260->var_134 = Tools::convertPriceFull(
                                (float) $var_259['value'],
                                $var_255,
                                $var_204
                            );
                        }
                        if ($var_259['value_tax_excl'] > 0) {
                            $var_260->var_261 = Tools::convertPriceFull(
                                (float) $var_259['value_tax_excl'],
                                $var_255,
                                $var_204
                            );
                        }
                        $var_260->update();
                    }

                    $var_262 = (int) $var_36->getIdOrderCarrier();
                    if ($var_262) {
                        $var_125 = $var_125 = new OrderCarrier((int) $var_36->var_178());
                        $var_125->var_413 = (float) var_131::convertPriceFull($var_125->var_413, $var_255, $var_204);
                        $var_125->var_414 = (float) var_131::convertPriceFull($var_125->var_414, $var_255, $var_204);
                        $var_125->var_127();
                    }

                    
                    $var_257 = array(
                        'total_discounts',
                        'total_discounts_tax_incl',
                        'total_discounts_tax_excl',
                        'total_discount_tax_excl',
                        'total_discount_tax_incl',
                        'total_paid',
                        'total_paid_tax_incl',
                        'total_paid_tax_excl',
                        'total_paid_real',
                        'total_products',
                        'total_products_wt',
                        'total_shipping',
                        'total_shipping_tax_incl',
                        'total_shipping_tax_excl',
                        'total_wrapping',
                        'total_wrapping_tax_incl',
                        'total_wrapping_tax_excl',
                    );

                    $var_263 = $var_36->var_264();
                    if ($var_263) {
                        foreach ($var_263 as $var_265) {
                            foreach ($var_257 as $var_133) {
                                if (isset($var_265->$var_133)) {
                                    $var_265->{$var_133} = Tools::convertPriceFull($var_265->{$var_133}, $var_255, $var_204);
                                }
                            }
                            $var_265->save();
                        }
                    }

                    var_135 ($var_257 as $var_133) {
                        if (isset($var_36->$var_133)) {
                            $var_36->{$var_133} = Tools::convertPriceFull($var_36->{$var_133}, $var_255, $var_204);
                        }
                    }

                    
                    $var_36->var_47 = $var_204->var_17;
                    
                    $var_36->var_266 = (float) $var_204->var_266;
                    $var_36->update();
                } else {
                    $var_3->var_54[] = $var_3->trans('You cannot change the currency.', array(), 'Admin.Orderscustomers.Notification');
                }
            } else {
                $var_3->var_54[] = $var_3->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');
            }
        } elseif (Tools::isSubmit('submitGenerateInvoice') && isset($var_36)) {
            if (!Configuration::get('PS_INVOICE', null, null, $var_36->var_121)) {
                $var_3->var_54[] = $var_3->trans('Invoice management has been disabled.', array(), 'Admin.Orderscustomers.Notification');
            } var_129 ($var_36->hasInvoice()) {
                $var_3->var_54[] = $var_3->trans('This order already has an invoice.', array(), 'Admin.Orderscustomers.Notification');
            } var_147 {
                $var_36->setInvoice(true);
                Tools::redirectAdmin(self::$var_49 . '&id_order=' . $var_36->var_17 . '&vieworder&conf=4&token=' . $var_3->var_50);
            }
        } var_129 (Tools::isSubmit('submitDeleteVoucher') && isset($var_36)) {
            if ($var_3->access('edit')) {
                $var_268 = new class_22(Tools::getValue('id_order_cart_rule'));
                if (Validate::isLoadedObject($var_268) && $var_268->var_91 == $var_36->var_17) {
                    if ($var_268->var_269) {
                        $var_236 = new class_17($var_268->var_269);
                        if (!Validate::isLoadedObject($var_236)) {
                            throw new class_21('Can\'t load Order Invoice object');
                        }

                        
                        $var_236->var_270 -= $var_268->var_261;
                        $var_236->var_271 -= $var_268->var_134;

                        $var_236->var_272 += $var_268->var_261;
                        $var_236->var_273 += $var_268->var_134;

                        
                        $var_236->update();
                    }

                    
                    $var_36->var_274 -= $var_268->var_134;
                    $var_36->var_289 -= $var_268->var_134;
                    $var_36->var_290 -= $var_268->var_261;

                    $var_36->var_291 += $var_268->var_134;
                    $var_36->var_273 += $var_268->var_134;
                    $var_36->var_272 += $var_268->var_261;

                    
                    $var_268->var_418();
                    $var_36->var_127();
                    Tools::redirectAdmin(self::$var_49 . '&id_order=' . $var_36->var_17 . '&vieworder&conf=4&token=' . $var_3->var_50);
                } var_147 {
                    $var_3->var_54[] = $var_3->trans('You cannot edit this cart rule.', array(), 'Admin.Orderscustomers.Notification');
                }
            } var_147 {
                $var_3->var_54[] = $var_3->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');
            }
        } var_129 (Tools::isSubmit('submitNewVoucher') && isset($var_36)) {
            if ($var_3->access('edit')) {
                if (!Tools::getValue('discount_name')) {
                    $var_3->var_54[] = $var_3->trans('You must specify a name in order to create a new discount.', array(), 'Admin.Orderscustomers.Notification');
                } var_147 {
                    if ($var_36->hasInvoice()) {
                        
                        if (!Tools::isSubmit('discount_all_invoices')) {
                            $var_236 = new class_17(Tools::getValue('discount_invoice'));
                            if (!Validate::isLoadedObject($var_236)) {
                                throw new class_21('Can\'t load Order Invoice object');
                            }
                        }
                    }

                    $var_275 = array();
                    $var_276 = (float) str_replace(',', '.', Tools::getValue('discount_value'));
                    switch (Tools::getValue('discount_type')) {
                        
                        case 1:
                            if ($var_276 < 100) {
                                if (isset($var_236)) {
                                    $var_275[$var_236->var_17]['value_tax_incl'] = Tools::ps_round($var_236->var_273 * $var_276 / 100, 2);
                                    $var_275[$var_236->var_17]['value_tax_excl'] = Tools::ps_round($var_236->var_272 * $var_276 / 100, 2);

                                    
                                    $var_3->fn_23($var_236, $var_275[$var_236->var_17]['value_tax_incl'], $var_275[$var_236->var_17]['value_tax_excl']);
                                } var_129 ($var_36->hasInvoice()) {
                                    $var_277 = $var_36->getInvoicesCollection();
                                    foreach ($var_277 as $var_236) {
                                        
                                        $var_275[$var_236->var_17]['value_tax_incl'] = Tools::ps_round($var_236->var_273 * $var_276 / 100, 2);
                                        $var_275[$var_236->var_17]['value_tax_excl'] = Tools::ps_round($var_236->var_272 * $var_276 / 100, 2);

                                        
                                        $var_3->fn_23($var_236, $var_275[$var_236->var_17]['value_tax_incl'], $var_275[$var_236->var_17]['value_tax_excl']);
                                    }
                                } var_147 {
                                    $var_275[0]['value_tax_incl'] = Tools::ps_round($var_36->var_273 * $var_276 / 100, 2);
                                    $var_275[0]['value_tax_excl'] = Tools::ps_round($var_36->var_272 * $var_276 / 100, 2);
                                }
                            } var_147 {
                                $var_3->var_54[] = $var_3->trans('The discount value is invalid.', array(), 'Admin.Orderscustomers.Notification');
                            }

                            var_278;
                        
                        case 2:
                            if (isset($var_236)) {
                                if ($var_276 > $var_236->var_273) {
                                    $var_3->var_54[] = $var_3->trans('The discount value is greater than the order invoice total.', array(), 'Admin.Orderscustomers.Notification');
                                } var_147 {
                                    $var_275[$var_236->var_17]['value_tax_incl'] = Tools::ps_round($var_276, 2);
                                    $var_275[$var_236->var_17]['value_tax_excl'] = Tools::ps_round($var_276 / (1 + ($var_36->getTaxesAverageUsed() / 100)), 2);

                                    
                                    $var_3->fn_23($var_236, $var_275[$var_236->var_17]['value_tax_incl'], $var_275[$var_236->var_17]['value_tax_excl']);
                                }
                            } var_129 ($var_36->hasInvoice()) {
                                $var_277 = $var_36->getInvoicesCollection();
                                foreach ($var_277 as $var_236) {
                                    
                                    if ($var_276 > $var_236->var_273) {
                                        $var_3->var_54[] = $var_3->trans('The discount value is greater than the order invoice total.', array(), 'Admin.Orderscustomers.Notification') . $var_236->getInvoiceNumberFormatted(Context::getContext()->var_16->var_17, (int) $var_36->var_121) . ')';
                                    } var_147 {
                                        $var_275[$var_236->var_17]['value_tax_incl'] = Tools::ps_round($var_276, 2);
                                        $var_275[$var_236->var_17]['value_tax_excl'] = Tools::ps_round($var_276 / (1 + ($var_36->getTaxesAverageUsed() / 100)), 2);

                                        
                                        $var_3->fn_23($var_236, $var_275[$var_236->var_17]['value_tax_incl'], $var_275[$var_236->var_17]['value_tax_excl']);
                                    }
                                }
                            } var_147 {
                                if ($var_276 > $var_36->var_273) {
                                    $var_3->var_54[] = $var_3->trans('The discount value is greater than the order total.', array(), 'Admin.Orderscustomers.Notification');
                                } var_147 {
                                    $var_275[0]['value_tax_incl'] = Tools::ps_round($var_276, 2);
                                    $var_275[0]['value_tax_excl'] = Tools::ps_round($var_276 / (1 + ($var_36->getTaxesAverageUsed() / 100)), 2);
                                }
                            }

                            var_278;
                        
                        case 3:
                            if (isset($var_236)) {
                                if ($var_236->var_281 > 0) {
                                    $var_275[$var_236->var_17]['value_tax_incl'] = $var_236->var_281;
                                    $var_275[$var_236->var_17]['value_tax_excl'] = $var_236->var_282;

                                    
                                    $var_3->fn_23($var_236, $var_275[$var_236->var_17]['value_tax_incl'], $var_275[$var_236->var_17]['value_tax_excl']);
                                }
                            } var_129 ($var_36->hasInvoice()) {
                                $var_277 = $var_36->getInvoicesCollection();
                                foreach ($var_277 as $var_236) {
                                    
                                    if ($var_236->var_281 <= 0) {
                                        var_162;
                                    }
                                    $var_275[$var_236->var_17]['value_tax_incl'] = $var_236->var_281;
                                    $var_275[$var_236->var_17]['value_tax_excl'] = $var_236->var_282;

                                    
                                    $var_3->fn_23($var_236, $var_275[$var_236->var_17]['value_tax_incl'], $var_275[$var_236->var_17]['value_tax_excl']);
                                }
                            } var_147 {
                                $var_275[0]['value_tax_incl'] = $var_36->var_281;
                                $var_275[0]['value_tax_excl'] = $var_36->var_282;
                            }

                            var_278;
                        default:
                            $var_3->var_54[] = $var_3->trans('The discount type is invalid.', array(), 'Admin.Orderscustomers.Notification');
                    }

                    $var_85 = true;
                    foreach ($var_275 as &$var_182) {
                        $var_283 = new CartRule();
                        $var_283->var_231 = date('Y-m-d H:i:s', strtotime('-1 hour', strtotime($var_36->var_284)));
                        $var_283->var_193 = date('Y-m-d H:i:s', strtotime('+1 hour'));
                        $var_283->var_288[Configuration::get('PS_LANG_DEFAULT')] = Tools::getValue('discount_name');
                        $var_283->var_161 = 0;
                        $var_283->var_230 = 1;
                        if (Tools::getValue('discount_type') == 1) {
                            $var_283->var_285 = $var_276;
                        } elseif (Tools::getValue('discount_type') == 2) {
                            $var_283->var_196 = $var_182['value_tax_excl'];
                        } elseif (Tools::getValue('discount_type') == 3) {
                            $var_283->var_286 = 1;
                        }
                        $var_283->var_195 = 0;
                        if ($var_85 = $var_283->add()) {
                            $var_182['id'] = $var_283->var_17;
                        } var_147 {
                            var_278;
                        }
                    }

                    var_122 ($var_85) {
                        foreach ($var_275 as $var_269 => $var_182) {
                            
                            $var_268 = new class_22();
                            $var_268->var_91 = $var_36->var_17;
                            $var_268->var_287 = $var_182['id'];
                            $var_268->var_269 = $var_269;
                            $var_268->var_288 = Tools::getValue('discount_name');
                            $var_268->var_134 = $var_182['value_tax_incl'];
                            $var_268->var_261 = $var_182['value_tax_excl'];
                            $var_85 &= $var_268->add();

                            $var_36->var_274 += $var_268->var_134;
                            $var_36->var_289 += $var_268->var_134;
                            $var_36->var_290 += $var_268->var_261;
                            $var_36->var_291 -= $var_268->var_134;
                            $var_36->var_273 -= $var_268->var_134;
                            $var_36->var_272 -= $var_268->var_261;
                        }

                        
                        $var_85 &= $var_36->update();
                    }

                    var_122 ($var_85) {
                        Tools::redirectAdmin(self::$var_49 . '&id_order=' . $var_36->var_17 . '&vieworder&conf=4&token=' . $var_3->var_50);
                    } var_147 {
                        $var_3->var_54[] = $var_3->trans('An error occurred during the OrderCartRule creation', array(), 'Admin.Orderscustomers.Notification');
                    }
                }
            } var_147 {
                $var_3->var_54[] = $var_3->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');
            }
        } elseif (Tools::isSubmit('sendStateEmail') && Tools::getValue('sendStateEmail') > 0 && Tools::getValue('id_order') > 0) {
            if ($var_3->access('edit')) {
                $var_96 = new class_5((int) Tools::getValue('sendStateEmail'));

                if (!Validate::isLoadedObject($var_96)) {
                    $var_3->var_54[] = $var_3->trans('An error occurred while loading order status.', array(), 'Admin.Orderscustomers.Notification');
                } var_147 {
                    $var_99 = new class_6((int) Tools::getValue('id_order_history'));

                    $var_104 = new class_7($var_36->var_105, $var_36->var_106);
                    $var_107 = array();
                    if ($var_96->var_17 == Configuration::get('PS_OS_SHIPPING') && $var_36->var_108) {
                        $var_107 = array('{followup}' => str_replace('@', $var_36->var_108, $var_104->var_109));
                    }

                    if ($var_99->sendEmail($var_36, $var_107)) {
                        Tools::redirectAdmin(self::$var_49 . '&id_order=' . $var_36->var_17 . '&vieworder&conf=10&token=' . $var_3->var_50);
                    } var_147 {
                        $var_3->var_54[] = $var_3->trans('An error occurred while sending the e-mail to the customer.', array(), 'Admin.Orderscustomers.Notification');
                    }
                }
            } var_147 {
                $var_3->var_54[] = $var_3->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');
            }
        }

        var_293::postProcess();
    }

    public function fn_9()
    {
        $var_294 = time();
        $var_295 = array();

        

        $var_296 = new class_23();
        $var_296->var_17 = 'box-conversion-rate';
        $var_296->var_297 = 'icon-sort-by-attributes-alt';
        
        $var_296->var_298 = 'color1';
        $var_296->var_299 = $var_3->trans('Conversion Rate', array(), 'Admin.Global');
        $var_296->var_300 = $var_3->trans('30 days', array(), 'Admin.Global');
        if (ConfigurationKPI::get('CONVERSION_RATE') !== false) {
            $var_296->var_134 = ConfigurationKPI::get('CONVERSION_RATE');
        }
        if (ConfigurationKPI::get('CONVERSION_RATE_CHART') !== false) {
            $var_296->var_301 = ConfigurationKPI::get('CONVERSION_RATE_CHART');
        }
        $var_296->var_302 = $var_3->var_15->var_73->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=conversion_rate';
        $var_296->var_303 = (bool) (ConfigurationKPI::get('CONVERSION_RATE_EXPIRE') < $var_294);
        $var_295[] = $var_296->generate();

        $var_296 = new class_23();
        $var_296->var_17 = 'box-carts';
        $var_296->var_297 = 'icon-shopping-cart';
        $var_296->var_298 = 'color2';
        $var_296->var_299 = $var_3->trans('Abandoned Carts', array(), 'Admin.Global');
        $var_296->var_300 = $var_3->trans('Today', array(), 'Admin.Global');
        $var_296->var_304 = $var_3->var_15->var_73->getAdminLink('AdminCarts') . '&action=filterOnlyAbandonedCarts';
        if (ConfigurationKPI::get('ABANDONED_CARTS') !== false) {
            $var_296->var_134 = ConfigurationKPI::get('ABANDONED_CARTS');
        }
        $var_296->var_302 = $var_3->var_15->var_73->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=abandoned_cart';
        $var_296->var_303 = (bool) (ConfigurationKPI::get('ABANDONED_CARTS_EXPIRE') < $var_294);
        $var_295[] = $var_296->generate();

        $var_296 = new class_23();
        $var_296->var_17 = 'box-average-order';
        $var_296->var_297 = 'icon-money';
        $var_296->var_298 = 'color3';
        $var_296->var_299 = $var_3->trans('Average Order Value', array(), 'Admin.Global');
        $var_296->var_300 = $var_3->trans('30 days', array(), 'Admin.Global');
        if (ConfigurationKPI::get('AVG_ORDER_VALUE') !== false) {
            $var_296->var_134 = $var_3->trans('%amount% tax excl.', array('%amount%' => ConfigurationKPI::get('AVG_ORDER_VALUE')), 'Admin.Orderscustomers.Feature');
        }
        $var_296->var_302 = $var_3->var_15->var_73->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=average_order_value';
        $var_296->var_303 = (bool) (ConfigurationKPI::get('AVG_ORDER_VALUE_EXPIRE') < $var_294);
        $var_295[] = $var_296->generate();

        $var_296 = new class_23();
        $var_296->var_17 = 'box-net-profit-visit';
        $var_296->var_297 = 'icon-user';
        $var_296->var_298 = 'color4';
        $var_296->var_299 = $var_3->trans('Net Profit per Visit', array(), 'Admin.Orderscustomers.Feature');
        $var_296->var_300 = $var_3->trans('30 days', array(), 'Admin.Orderscustomers.Feature');
        if (ConfigurationKPI::get('NETPROFIT_VISIT') !== false) {
            $var_296->var_134 = ConfigurationKPI::get('NETPROFIT_VISIT');
        }
        $var_296->var_302 = $var_3->var_15->var_73->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=netprofit_visit';
        $var_296->var_303 = (bool) (ConfigurationKPI::get('NETPROFIT_VISIT_EXPIRE') < $var_294);
        $var_295[] = $var_296->generate();

        $var_296 = new class_24();
        $var_296->var_295 = $var_295;

        return $var_296->generate();
    }

    public function fn_10()
    {
        $var_36 = new class_2(Tools::getValue('id_order'));
        if (!Validate::isLoadedObject($var_36)) {
            $var_3->var_54[] = $var_3->trans('The order cannot be found within your database.', array(), 'Admin.Orderscustomers.Notification');
        }

        $var_41 = new class_4($var_36->var_42);
        $var_104 = new class_7($var_36->var_105);
        $var_232 = $var_3->fn_8($var_36);
        $var_204 = new class_16((int) $var_36->var_47);
        
        $var_305 = null;
        if ($var_104->var_306) {
            $var_307 = Module::getInstanceByName($var_104->var_308);
            if (method_exists($var_307, 'displayInfoByCart')) {
                $var_305 = call_user_func(array($var_307, 'displayInfoByCart'), $var_36->var_40);
            }
        }

        
        $var_309 = new class_20($var_36->var_245, $var_3->var_15->var_16->var_17);
        if (Validate::isLoadedObject($var_309) && $var_309->var_310) {
            $var_311 = new class_25((int) $var_309->var_310);
        }

        if ($var_36->var_245 == $var_36->var_244) {
            $var_312 = $var_309;
            if (isset($var_311)) {
                $var_313 = $var_311;
            }
        } else {
            $var_312 = new class_20($var_36->var_244, $var_3->var_15->var_16->var_17);
            if (Validate::isLoadedObject($var_312) && $var_312->var_310) {
                $var_313 = new class_25((int) ($var_312->var_310));
            }
        }

        $var_3->var_1 = $var_3->trans(
            'Order 
            array(
                '%var_17%' => $order->id,
                '%var_314%' => $order->reference,
                '%var_76%' => $customer->firstname,
                '%var_77%' => $customer->lastname,
            ),
            'var_113.var_114.var_315'
        );
        if (class_1::isFeatureActive()) {
            $var_51 = new class_1((int) $var_36->var_121);
            $var_3->var_1 .= ' - ' . $var_3->trans('Shop: %shop_name%', array('%shop_name%' => $var_51->var_288), 'Admin.Orderscustomers.Feature');
        }

        
        $var_316 = null;

        $var_317 = $var_36->getOrderDetailList();
        foreach ($var_317 as $var_163) {
            $var_112 = new class_26($var_163['product_id']);

            if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT')
                && $var_112->var_318) {
                $var_319 = class_27::getWarehousesByProductId($var_163['product_id'], $var_163['product_attribute_id']);
                foreach ($var_319 as $var_320) {
                    if (!isset($var_316[$var_320['id_warehouse']])) {
                        $var_316[$var_320['id_warehouse']] = $var_320;
                    }
                }
            }
        }

        $var_321 = array();
        foreach (PaymentModule::getInstalledPaymentModules() as $var_322) {
            $var_307 = Module::getInstanceByName($var_322['name']);
            if (Validate::isLoadedObject($var_307) && $var_307->var_195) {
                $var_321[] = $var_307->var_250;
            }
        }

        
        $var_323 = false;
        $var_130 = $var_36->getCurrentOrderState();
        if (Configuration::get('PS_STOCK_MANAGEMENT') && (!Validate::isLoadedObject($var_130) || ($var_130->var_324 != 1 && $var_130->var_325 != 1))) {
            $var_323 = true;
        }

        
        $var_326 = false;
        foreach ($var_232 as &$var_112) {
            
            $var_327 = 0;

            if (is_array($var_112['customizedDatas'])) {
                foreach ($var_112['customizedDatas'] as $var_328) {
                    foreach ($var_328 as $var_329 => $var_330) {
                        $var_327 += (int) $var_330['quantity'];
                    }
                }
            }

            $var_112['customized_product_quantity'] = $var_327;
            $var_112['current_stock'] = StockAvailable::getQuantityAvailableByProduct($var_112['product_id'], $var_112['product_attribute_id'], $var_112['id_shop']);
            $var_331 = OrderSlip::getProductSlipResume($var_112['id_order_detail']);
            $var_112['quantity_refundable'] = $var_112['product_quantity'] - $var_331['product_quantity'];
            $var_112['amount_refundable'] = $var_112['total_price_tax_excl'] - $var_331['amount_tax_excl'];
            $var_112['amount_refundable_tax_incl'] = $var_112['total_price_tax_incl'] - $var_331['amount_tax_incl'];
            $var_112['amount_refund'] = $var_36->getTaxCalculationMethod() ? Tools::displayPrice($var_331['amount_tax_excl'], $var_204) : Tools::displayPrice($var_331['amount_tax_incl'], $var_204);
            $var_112['refund_history'] = OrderSlip::getProductSlipDetail($var_112['id_order_detail']);
            $var_112['return_history'] = OrderReturn::getProductReturnDetail($var_112['id_order_detail']);

            
            if ($var_112['current_stock'] <= 0 && $var_323) {
                $var_3->displayWarning($var_3->trans('This product is out of stock: ', array(), 'Admin.Orderscustomers.Notification') . ' ' . $var_112['product_name']);
            }
            if ($var_112['id_warehouse'] != 0) {
                $var_320 = new class_27((int) $var_112['id_warehouse']);
                $var_112['warehouse_name'] = $var_320->var_288;
                $var_333 = WarehouseProductLocation::getProductLocation($var_112['product_id'], $var_112['product_attribute_id'], $var_112['id_warehouse']);
                if (!empty($var_333)) {
                    $var_112['warehouse_location'] = $var_333;
                } else {
                    $var_112['warehouse_location'] = false;
                }
            } else {
                $var_112['warehouse_name'] = '--';
                $var_112['warehouse_location'] = false;
            }

            if (!empty($var_112['location'])) {
                $var_326 = true;
            }
        }

        
        foreach ($var_232 as &$var_112) {
            $var_334 = $var_112['cache_is_pack'] ? Pack::getItemTable($var_112['id_product'], $var_3->var_15->var_16->var_17, true) : array();
            foreach ($var_334 as &$var_335) {
                $var_335['current_stock'] = StockAvailable::getQuantityAvailableByProduct($var_335['id_product'], $var_335['id_product_attribute'], $var_335['id_shop']);
                
                if ($var_112['current_stock'] <= 0 && $var_323) {
                    $var_3->displayWarning($var_3->trans('This product, included in package (' . $var_112['product_name'] . ') is out of stock: ', array(), 'Admin.Orderscustomers.Notification') . ' ' . $var_335['product_name']);
                }
                $var_3->fn_11($var_335);
                if ($var_335['image'] != null) {
                    $var_288 = 'product_mini_' . (int) $var_335['id_product'] . (isset($var_335['id_product_attribute']) ? '_' . (int) $var_335['id_product_attribute'] : '') . '.jpg';
                    
                    $var_335['image_tag'] = ImageManager::thumbnail(var_337 . 'p/' . $var_335['image']->getExistingImgPath() . '.jpg', $var_288, 45, 'jpg');
                    if (file_exists(var_339 . $var_288)) {
                        $var_335['image_size'] = getimagesize(var_339 . $var_288);
                    } else {
                        $var_335['image_size'] = false;
                    }
                }
            }
            $var_112['pack_items'] = $var_334;
        }

        $var_340 = new class_28((int) $var_41->var_341, $var_3->var_15->var_16->var_17);

        $var_99 = $var_36->getHistory($var_3->var_15->var_16->var_17);

        foreach ($var_99 as &$var_96) {
            $var_96['text-color'] = Tools::getBrightness($var_96['color']) < 128 ? 'white' : 'black';
        }

        $var_343 = $var_36->var_282;
        $var_344 = $var_36->var_281;
        $var_345 = OrderSlip::getOrdersSlip($var_41->var_17, $var_36->var_17);
        foreach ($var_345 as $var_346) {
            $var_343 -= $var_346['total_shipping_tax_excl'];
            $var_344 -= $var_346['total_shipping_tax_incl'];
        }
        $var_343 = max(0, $var_343);
        $var_344 = max(0, $var_344);

        
        $var_3->var_347 = array(
            'order' => $var_36,
            'cart' => new class_3($var_36->var_40),
            'customer' => $var_41,
            'gender' => $var_340,
            'customer_addresses' => $var_41->getAddresses($var_3->var_15->var_16->var_17),
            'addresses' => array(
                'delivery' => $var_312,
                'deliveryState' => isset($var_313) ? $var_313 : null,
                'invoice' => $var_309,
                'invoiceState' => isset($var_311) ? $var_311 : null,
            ),
            'customerStats' => $var_41->getStats(),
            'products' => $var_232,
            'discounts' => $var_36->getCartRules(),
            'orders_total_paid_tax_incl' => $var_36->getOrdersTotalPaid(), 
            'total_paid' => $var_36->getTotalPaid(),
            'returns' => OrderReturn::getOrdersReturn($var_36->var_42, $var_36->var_17),
            'shipping_refundable_tax_excl' => $var_343,
            'shipping_refundable_tax_incl' => $var_344,
            'customer_thread_message' => class_9::getCustomerMessages($var_36->var_42, null, $var_36->var_17),
            'orderMessages' => OrderMessage::getOrderMessages($var_36->var_106),
            'messages' => class_9::getCustomerMessagesOrder($var_36->var_42, $var_36->var_17),
            'carrier' => new class_7($var_36->var_105),
            'history' => $var_99,
            'states' => class_5::getOrderStates($var_3->var_15->var_16->var_17),
            'warehouse_list' => $var_316,
            'sources' => ConnectionsSource::getOrderSources($var_36->var_17),
            'currentState' => $var_36->getCurrentOrderState(),
            'currency' => new class_16($var_36->var_47),
            'currencies' => class_16::getCurrenciesByIdShop($var_36->var_121),
            'previousOrder' => $var_36->getPreviousOrderId(),
            'nextOrder' => $var_36->getNextOrderId(),
            'current_index' => self::$var_49,
            'carrierModuleCall' => $var_305,
            'iso_code_lang' => $var_3->var_15->var_16->var_354,
            'id_lang' => $var_3->var_15->var_16->var_17,
            'can_edit' => ($var_3->access('edit')),
            'current_id_lang' => $var_3->var_15->var_16->var_17,
            'invoices_collection' => $var_36->getInvoicesCollection(),
            'not_paid_invoices_collection' => $var_36->getNotPaidInvoicesCollection(),
            'payment_methods' => $var_321,
            'invoice_management_active' => Configuration::get('PS_INVOICE', null, null, $var_36->var_121),
            'display_warehouse' => (int) Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT'),
            'carrier_list' => $var_3->fn_12($var_36),
            'recalculate_shipping_cost' => (int) Configuration::get('PS_ORDER_RECALCULATE_SHIPPING'),
            'stock_location_is_available' => $var_326,
            'HOOK_CONTENT_ORDER' => Hook::exec(
                'displayAdminOrderContentOrder',
                array(
                    'order' => $var_36,
                    'products' => $var_232,
                    'customer' => $var_41, )
            ),
            'HOOK_CONTENT_SHIP' => Hook::exec(
                'displayAdminOrderContentShip',
                array(
                    'order' => $var_36,
                    'products' => $var_232,
                    'customer' => $var_41, )
            ),
            'HOOK_TAB_ORDER' => Hook::exec(
                'displayAdminOrderTabOrder',
                array(
                    'order' => $var_36,
                    'products' => $var_232,
                    'customer' => $var_41, )
            ),
            'HOOK_TAB_SHIP' => Hook::exec(
                'displayAdminOrderTabShip',
                array(
                    'order' => $var_36,
                    'products' => $var_232,
                    'customer' => $var_41, )
            ),
        );

        return parent::fn_10();
    }

    public function fn_13()
    {
        Context::getContext()->var_41 = new class_4((int) Tools::getValue('id_customer'));
        $var_204 = new class_16((int) Tools::getValue('id_currency'));
        if ($var_232 = class_26::searchByName((int) $var_3->var_15->var_16->var_17, pSQL(Tools::getValue('product_search')))) {
            foreach ($var_232 as &$var_112) {
                
                $var_112['formatted_price'] = Tools::displayPrice(Tools::convertPrice($var_112['price_tax_incl'], $var_204), $var_204);
                
                $var_112['price_tax_incl'] = Tools::ps_round(Tools::convertPrice($var_112['price_tax_incl'], $var_204), 2);
                $var_112['price_tax_excl'] = Tools::ps_round(Tools::convertPrice($var_112['price_tax_excl'], $var_204), 2);
                $var_357 = new class_26((int) $var_112['id_product'], false, (int) $var_3->var_15->var_16->var_17);
                $var_358 = array();
                $var_359 = $var_357->getAttributesGroups((int) $var_3->var_15->var_16->var_17);

                
                if (Tools::isSubmit('id_address')) {
                    $var_112['tax_rate'] = $var_357->getTaxesRate(new class_20(Tools::getValue('id_address')));
                }

                $var_112['warehouse_list'] = array();

                foreach ($var_359 as $var_362) {
                    if (!isset($var_358[$var_362['id_product_attribute']]['attributes'])) {
                        $var_358[$var_362['id_product_attribute']]['attributes'] = '';
                    }
                    $var_358[$var_362['id_product_attribute']]['attributes'] .= $var_362['attribute_name'] . ' - ';
                    $var_358[$var_362['id_product_attribute']]['id_product_attribute'] = $var_362['id_product_attribute'];
                    $var_358[$var_362['id_product_attribute']]['default_on'] = $var_362['default_on'];
                    if (!isset($var_358[$var_362['id_product_attribute']]['price'])) {
                        $var_363 = class_26::getPriceStatic((int) $var_112['id_product'], true, $var_362['id_product_attribute']);
                        $var_364 = class_26::getPriceStatic((int) $var_112['id_product'], false, $var_362['id_product_attribute']);
                        $var_358[$var_362['id_product_attribute']]['price_tax_incl'] = Tools::ps_round(Tools::convertPrice($var_363, $var_204), 2);
                        $var_358[$var_362['id_product_attribute']]['price_tax_excl'] = Tools::ps_round(Tools::convertPrice($var_364, $var_204), 2);
                        $var_358[$var_362['id_product_attribute']]['formatted_price'] = Tools::displayPrice(Tools::convertPrice($var_364, $var_204), $var_204);
                    }
                    if (!isset($var_358[$var_362['id_product_attribute']]['qty_in_stock'])) {
                        $var_358[$var_362['id_product_attribute']]['qty_in_stock'] = StockAvailable::getQuantityAvailableByProduct((int) $var_112['id_product'], $var_362['id_product_attribute'], (int) $var_3->var_15->var_51->var_17);
                    }

                    if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') && (int) $var_112['advanced_stock_management'] == 1) {
                        $var_112['warehouse_list'][$var_362['id_product_attribute']] = class_27::getProductWarehouseList($var_112['id_product'], $var_362['id_product_attribute']);
                    } else {
                        $var_112['warehouse_list'][$var_362['id_product_attribute']] = array();
                    }

                    $var_112['stock'][$var_362['id_product_attribute']] = class_26::getRealQuantity($var_112['id_product'], $var_362['id_product_attribute']);
                }

                if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') && (int) $var_112['advanced_stock_management'] == 1) {
                    $var_112['warehouse_list'][0] = class_27::getProductWarehouseList($var_112['id_product']);
                } else {
                    $var_112['warehouse_list'][0] = array();
                }

                $var_112['stock'][0] = StockAvailable::getQuantityAvailableByProduct((int) $var_112['id_product'], 0, (int) $var_3->var_15->var_51->var_17);

                foreach ($var_358 as &$var_365) {
                    $var_365['attributes'] = rtrim($var_365['attributes'], ' - ');
                }
                $var_112['combinations'] = $var_358;

                if ($var_112['customizable']) {
                    $var_366 = new class_26((int) $var_112['id_product']);
                    $var_112['customization_fields'] = $var_366->getCustomizationFields($var_3->var_15->var_16->var_17);
                }
            }

            $var_368 = array(
                'products' => $var_232,
                'found' => true,
            );
        } else {
            $var_368 = array('found' => false);
        }

        $var_3->var_69 = json_encode($var_368);
    }

    public function fn_14()
    {
        if ($var_3->access('edit')) {
            $var_38 = new class_3((int) Tools::getValue('id_cart'));
            if (Validate::isLoadedObject($var_38)) {
                $var_41 = new class_4((int) $var_38->var_42);
                if (Validate::isLoadedObject($var_41)) {
                    $var_369 = array(
                        '{order_link}' => Context::getContext()->var_73->getPageLink('order', false, (int) $var_38->var_106, 'step=3&recover_cart=' . (int) $var_38->var_17 . '&token_cart=' . md5(var_371 . 'recover_cart_' . (int) $var_38->var_17)),
                        '{firstname}' => $var_41->var_76,
                        '{lastname}' => $var_41->var_77,
                    );
                    $var_372 = new class_11((int) $var_38->var_106);
                    if (
                        Mail::Send(
                            (int) $var_38->var_106,
                            'backoffice_order',
                            $var_3->trans(
                                'Process the payment of your order',
                                array(),
                                'Emails.Subject',
                                $var_372->var_153
                            ),
                            $var_369,
                            $var_41->var_140,
                            $var_41->var_76 . ' ' . $var_41->var_77,
                            null,
                            null,
                            null,
                            null,
                            var_154,
                            true,
                            $var_38->var_121
                        )
                    ) {
                        die(json_encode(array('errors' => false, 'result' => $var_3->trans('The email was sent to your customer.', array(), 'Admin.Orderscustomers.Notification'))));
                    }
                }
            }
            $var_3->var_69 = json_encode(array('errors' => true, 'result' => $var_3->trans('Error in sending the email to your customer.', array(), 'Admin.Orderscustomers.Notification')));
        }
    }

    public function fn_15()
    {
        
        $var_36 = new class_2((int) Tools::getValue('id_order'));
        if (!Validate::isLoadedObject($var_36)) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('The order object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        $var_373 = Context::getContext()->var_38->getCartRules();

        if ($var_36->hasBeenShipped()) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('You cannot add products to delivered orders.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        $var_374 = $var_117['add_product'];
        if (isset($var_117['add_invoice'])) {
            $var_375 = $var_117['add_invoice'];
        } else {
            $var_375 = array();
        }
        $var_112 = new class_26($var_374['product_id'], false, $var_36->var_106);
        if (!Validate::isLoadedObject($var_112)) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('The product object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        if (isset($var_374['product_attribute_id']) && $var_374['product_attribute_id']) {
            $var_365 = new class_29($var_374['product_attribute_id']);
            if (!Validate::isLoadedObject($var_365)) {
                die(json_encode(array(
                    'result' => false,
                    'error' => $var_3->trans('The combination object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),
                )));
            }
        }

        
        $var_376 = var_39::var_377;

        
        $var_38 = new class_3();
        $var_38->var_378 = $var_36->var_378;
        $var_38->var_121 = $var_36->var_121;
        $var_38->var_42 = $var_36->var_42;
        $var_38->var_105 = $var_36->var_105;
        $var_38->var_244 = $var_36->var_244;
        $var_38->var_245 = $var_36->var_245;
        $var_38->var_47 = $var_36->var_47;
        $var_38->var_106 = $var_36->var_106;
        $var_38->var_251 = $var_36->var_251;

        
        $var_38->add();

        
        $var_3->var_15->var_38 = $var_38;
        $var_3->var_15->var_41 = new class_4($var_36->var_42);

        
        $var_379 = true;

        $var_380 = class_26::getPriceStatic(
            $var_112->var_17,
            $var_379,
            isset($var_365) ? $var_365->var_17 : null,
            2,
            null,
            false,
            true,
            1,
            false,
            $var_36->var_42,
            $var_38->var_17,
            $var_36->{Configuration::get('PS_TAX_ADDRESS_TYPE', null, null, $var_36->var_121)}
        );

        
        if ($var_374['product_price_tax_incl'] != $var_380) {
            $var_381 = new class_30();
            $var_381->var_121 = 0;
            $var_381->var_378 = 0;
            $var_381->var_47 = 0;
            $var_381->var_382 = 0;
            $var_381->var_383 = 0;
            $var_381->var_42 = $var_36->var_42;
            $var_381->var_384 = $var_112->var_17;
            if (isset($var_365)) {
                $var_381->var_385 = $var_365->var_17;
            } else {
                $var_381->var_385 = 0;
            }
            $var_381->var_386 = $var_374['product_price_tax_excl'];
            $var_381->var_387 = 1;
            $var_381->var_388 = 0;
            $var_381->var_389 = 'amount';
            $var_381->var_197 = 0;
            $var_381->var_390 = '0000-00-00 00:00:00';
            $var_381->var_391 = '0000-00-00 00:00:00';
            $var_381->add();
        }

        
        $var_392 = $var_38->updateQty(
            $var_374['product_quantity'],
            $var_112->var_17,
            isset($var_374['product_attribute_id']) ? $var_374['product_attribute_id'] : null,
            isset($var_365) ? $var_365->var_17 : null,
            'up',
            0,
            new class_1($var_38->var_121)
        );

        if ($var_392 < 0) {
            
            $var_394 = ($var_374['product_attribute_id']) ? Attribute::getAttributeMinimalQty($var_374['product_attribute_id']) : $var_112->var_394;
            die(json_encode(array('error' => $var_3->trans('You must add %d minimum quantity', array('%d' => $var_394), 'Admin.Orderscustomers.Notification'))));
        } elseif (!$var_392) {
            die(json_encode(array('error' => $var_3->trans('You already have the maximum quantity available for this product.', array(), 'Admin.Orderscustomers.Notification'))));
        }

        
        if ($var_36->hasInvoice()) {
            $var_236 = new class_17($var_374['invoice']);
            
            if ($var_236->var_17 == 0) {
                
                $var_376 = var_39::var_249;
                
                if (isset($var_375['free_shipping']) && $var_375['free_shipping']) {
                    $var_182 = new class_15();
                    $var_182->var_42 = $var_36->var_42;
                    $var_182->var_288 = array(
                        Configuration::get('PS_LANG_DEFAULT') => $var_3->trans('[Generated] CartRule for Free Shipping', array(), 'Admin.Orderscustomers.Notification'),
                    );
                    $var_182->var_231 = date('Y-m-d H:i:s', time());
                    $var_182->var_193 = date('Y-m-d H:i:s', time() + 86400);
                    $var_182->var_161 = 1;
                    $var_182->var_230 = 1;
                    $var_182->var_200 = $var_36->var_47;
                    $var_182->var_201 = $var_36->var_47;
                    $var_182->var_286 = true;
                    $var_182->var_195 = 1;
                    $var_182->add();

                    
                    $var_38->addCartRule($var_182->var_17);
                    $var_396 = array(
                        'tax_incl' => $var_182->getContextualValue(true),
                        'tax_excl' => $var_182->getContextualValue(false),
                    );
                    $var_36->addCartRule($var_182->var_17, $var_182->var_288[Configuration::get('PS_LANG_DEFAULT')], $var_396);
                }

                $var_236->var_91 = $var_36->var_17;
                if ($var_236->var_398) {
                    Configuration::updateValue('PS_INVOICE_START_NUMBER', false, false, null, $var_36->var_121);
                } else {
                    $var_236->var_398 = class_2::getLastInvoiceNumber() + 1;
                }

                $var_399 = new class_20((int) $var_36->{Configuration::get('PS_TAX_ADDRESS_TYPE', null, null, $var_36->var_121)});
                $var_104 = new class_7((int) $var_36->var_105);
                $var_176 = $var_104->getTaxCalculator($var_399);

                $var_236->var_272 = Tools::ps_round((float) $var_38->getOrderTotal(false, $var_376), 2);
                $var_236->var_273 = Tools::ps_round((float) $var_38->getOrderTotal($var_379, $var_376), 2);
                $var_236->var_401 = (float) $var_38->getOrderTotal(false, var_39::var_402);
                $var_236->var_403 = (float) $var_38->getOrderTotal($var_379, var_39::var_402);
                $var_236->var_282 = (float) $var_38->getTotalShippingCost(null, false);
                $var_236->var_281 = (float) $var_38->getTotalShippingCost();

                $var_236->var_405 = abs($var_38->getOrderTotal(false, var_39::var_406));
                $var_236->var_407 = abs($var_38->getOrderTotal($var_379, var_39::var_406));
                $var_236->var_408 = (int) $var_176->var_409;

                
                $var_36->var_234 += $var_236->var_281;
                $var_36->var_282 += $var_236->var_282;
                $var_36->var_281 += ($var_379) ? $var_236->var_281 : $var_236->var_282;

                $var_36->var_410 += abs($var_38->getOrderTotal($var_379, var_39::var_406));
                $var_36->var_405 += abs($var_38->getOrderTotal(false, var_39::var_406));
                $var_36->var_407 += abs($var_38->getOrderTotal($var_379, var_39::var_406));
                $var_236->add();

                $var_236->saveCarrierTaxCalculator($var_176->getTaxesAmount($var_236->var_282));

                $var_125 = new class_8();
                $var_125->var_91 = (int) $var_36->var_17;
                $var_125->var_105 = (int) $var_36->var_105;
                $var_125->var_269 = (int) $var_236->var_17;
                $var_125->var_179 = (float) $var_38->getTotalWeight();
                $var_125->var_413 = (float) $var_236->var_282;
                $var_125->var_414 = ($var_379) ? (float) $var_236->var_281 : (float) $var_236->var_282;
                $var_125->add();
            } else {
                
                $var_236->var_272 += Tools::ps_round((float) ($var_38->getOrderTotal(false, $var_376)), 2);
                $var_236->var_273 += Tools::ps_round((float) ($var_38->getOrderTotal($var_379, $var_376)), 2);
                $var_236->var_401 += (float) $var_38->getOrderTotal(false, var_39::var_402);
                $var_236->var_403 += (float) $var_38->getOrderTotal($var_379, var_39::var_402);
                $var_236->update();
            }
        }

        
        $var_163 = new class_12();
        $var_163->createList($var_36, $var_38, $var_36->getCurrentOrderState(), $var_38->fn_8(), (isset($var_236) ? $var_236->var_17 : 0), $var_379, (int) Tools::getValue('add_product_warehouse'));

        
        $var_36->var_401 += (float) $var_38->getOrderTotal(false, var_39::var_402);
        $var_36->var_403 += (float) $var_38->getOrderTotal($var_379, var_39::var_402);

        $var_36->var_291 += Tools::ps_round((float) ($var_38->getOrderTotal(true, $var_376)), 2);
        $var_36->var_272 += Tools::ps_round((float) ($var_38->getOrderTotal(false, $var_376)), 2);
        $var_36->var_273 += Tools::ps_round((float) ($var_38->getOrderTotal($var_379, $var_376)), 2);

        if (isset($var_236) && Validate::isLoadedObject($var_236)) {
            $var_36->var_234 = $var_236->var_281;
            $var_36->var_281 = $var_236->var_281;
            $var_36->var_282 = $var_236->var_282;
        }
        
        $var_36->var_274 += (float) abs($var_38->getOrderTotal(true, var_39::var_416));
        $var_36->var_290 += (float) abs($var_38->getOrderTotal(false, var_39::var_416));
        $var_36->var_289 += (float) abs($var_38->getOrderTotal(true, var_39::var_416));

        
        $var_36->update();

        StockAvailable::synchronize($var_112->var_17);

        
        $var_125 = new class_8((int) $var_36->getIdOrderCarrier());
        if (Validate::isLoadedObject($var_125)) {
            $var_125->var_179 = (float) $var_36->getTotalWeight();
            if ($var_125->update()) {
                $var_36->var_179 = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $var_125->var_179);
            }
        }

        
        $var_163->updateTaxAmount($var_36);

        
        if (isset($var_381)) {
            $var_381->delete();
        }

        $var_232 = $var_3->fn_8($var_36);

        
        $var_112 = end($var_232);
        $var_331 = OrderSlip::getProductSlipResume((int) $var_112['id_order_detail']);
        $var_112['quantity_refundable'] = $var_112['product_quantity'] - $var_331['product_quantity'];
        $var_112['amount_refundable'] = $var_112['total_price_tax_excl'] - $var_331['amount_tax_excl'];
        $var_112['amount_refund'] = Tools::displayPrice($var_331['amount_tax_incl']);
        $var_112['return_history'] = OrderReturn::getProductReturnDetail((int) $var_112['id_order_detail']);
        $var_112['refund_history'] = OrderSlip::getProductSlipDetail((int) $var_112['id_order_detail']);
        if ($var_112['id_warehouse'] != 0) {
            $var_320 = new class_27((int) $var_112['id_warehouse']);
            $var_112['warehouse_name'] = $var_320->var_288;
            $var_333 = WarehouseProductLocation::getProductLocation($var_112['product_id'], $var_112['product_attribute_id'], $var_112['id_warehouse']);
            if (!empty($var_333)) {
                $var_112['warehouse_location'] = $var_333;
            } else {
                $var_112['warehouse_location'] = false;
            }
        } else {
            $var_112['warehouse_name'] = '--';
            $var_112['warehouse_location'] = false;
        }

        
        $var_419 = $var_36->getInvoicesCollection();

        $var_420 = array();
        foreach ($var_419 as $var_265) {
            
            $var_265->var_288 = $var_265->getInvoiceNumberFormatted(Context::getContext()->var_16->var_17, (int) $var_36->var_121);
            $var_420[] = $var_265;
        }

        $var_36 = $var_36->refreshShippingCost();

        
        $var_3->var_15->var_59->assign(array(
            'product' => $var_112,
            'order' => $var_36,
            'currency' => new class_16($var_36->var_47),
            'can_edit' => $var_3->access('edit'),
            'invoices_collection' => $var_419,
            'current_id_lang' => Context::getContext()->var_16->var_17,
            'link' => Context::getContext()->var_73,
            'current_index' => self::$var_49,
            'display_warehouse' => (int) Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT'),
        ));

        $var_3->fn_16($var_36);
        $var_423 = Context::getContext()->var_38->getCartRules();
        sort($var_373);
        sort($var_423);
        $var_25 = array_diff($var_423, $var_373);
        $var_303 = false;

        $var_85 = true;
        foreach ($var_25 as $var_182) {
            $var_303 = true;
            
            $var_424 = new class_15($var_182['id_cart_rule']);
            $var_396 = array(
                'tax_incl' => $var_424->getContextualValue(true),
                'tax_excl' => $var_424->getContextualValue(false),
            );
            $var_268 = new class_22();
            $var_268->var_91 = $var_36->var_17;
            $var_268->var_287 = $var_182['id_cart_rule'];
            $var_268->var_269 = $var_236->var_17;
            $var_268->var_288 = $var_182['name'];
            $var_268->var_134 = $var_396['tax_incl'];
            $var_268->var_261 = $var_396['tax_excl'];
            $var_85 &= $var_268->add();

            $var_36->var_274 += $var_268->var_134;
            $var_36->var_289 += $var_268->var_134;
            $var_36->var_290 += $var_268->var_261;
            $var_36->var_291 -= $var_268->var_134;
            $var_36->var_273 -= $var_268->var_134;
            $var_36->var_272 -= $var_268->var_261;
        }

        
        $var_85 &= $var_36->update();

        die(json_encode(array(
            'result' => true,
            'view' => $var_3->createTemplate('_product_line.tpl')->fetch(),
            'can_edit' => $var_3->access('add'),
            'order' => $var_36,
            'invoices' => $var_420,
            'documents_html' => $var_3->createTemplate('_documents.tpl')->fetch(),
            'shipping_html' => $var_3->createTemplate('_shipping.tpl')->fetch(),
            'discount_form_html' => $var_3->createTemplate('_discount_form.tpl')->fetch(),
            'refresh' => $var_303,
        )));
    }

    public function fn_16(var_37 $var_36 = null)
    {
        if (null === $var_36) {
            $var_36 = new class_2(Tools::getValue('id_order'));
        }

        Hook::exec('actionOrderEdited', array('order' => $var_36));
    }

    public function fn_17()
    {
        $var_163 = new class_12(Tools::getValue('id_order_detail'));
        if (!Validate::isLoadedObject($var_163)) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('The OrderDetail object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        $var_112 = new class_26($var_163->var_181);
        if (!Validate::isLoadedObject($var_112)) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('The product object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        $var_253 = new class_20(Tools::getValue('id_address'));
        if (!Validate::isLoadedObject($var_253)) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('The address object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        die(json_encode(array(
            'result' => true,
            'product' => $var_112,
            'tax_rate' => $var_112->getTaxesRate($var_253),
            'price_tax_incl' => class_26::getPriceStatic($var_112->var_17, true, $var_163->var_216, 2),
            'price_tax_excl' => class_26::getPriceStatic($var_112->var_17, false, $var_163->var_216, 2),
            'reduction_percent' => $var_163->var_285,
        )));
    }

    public function fn_18()
    {
        
        $var_85 = true;

        $var_36 = new class_2((int) Tools::getValue('id_order'));
        $var_163 = new class_12((int) Tools::getValue('product_id_order_detail'));
        if (Tools::isSubmit('product_invoice')) {
            $var_236 = new class_17((int) Tools::getValue('product_invoice'));
        }

        
        $var_3->fn_19($var_163, $var_36, isset($var_236) ? $var_236 : null);

        
        $var_217 = 0;
        if (is_array(Tools::getValue('product_quantity'))) {
            foreach (Tools::getValue('product_quantity') as $var_220 => $var_426) {
                
                Db::getInstance()->update('customization', array('quantity' => (int) $var_426), 'id_customization = ' . (int) $var_220);
                
                $var_217 += $var_426;
            }
        } else {
            $var_217 = Tools::getValue('product_quantity');
        }

        $var_427 = Tools::ps_round(Tools::getValue('product_price_tax_incl'), 2);
        $var_428 = Tools::ps_round(Tools::getValue('product_price_tax_excl'), 2);
        $var_429 = $var_427 * $var_217;
        $var_430 = $var_428 * $var_217;

        
        $var_431 = $var_429 - $var_163->var_432;
        $var_433 = $var_430 - $var_163->var_434;

        
        if (isset($var_236)) {
            
            if ($var_163->var_269 != $var_236->var_17) {
                $var_435 = new class_17($var_163->var_269);
                
                $var_435->var_401 -= $var_163->var_434;
                $var_435->var_403 -= $var_163->var_432;

                $var_435->var_272 -= $var_163->var_434;
                $var_435->var_273 -= $var_163->var_432;

                $var_85 &= $var_435->update();

                $var_236->var_401 += $var_163->var_434;
                $var_236->var_403 += $var_163->var_432;

                $var_236->var_272 += $var_163->var_434;
                $var_236->var_273 += $var_163->var_432;

                $var_163->var_269 = $var_236->var_17;
            }
        }

        if ($var_431 != 0 && $var_433 != 0) {
            $var_163->var_165 = $var_428;
            $var_163->var_166 = $var_427;

            $var_163->var_432 += $var_431;
            $var_163->var_434 += $var_433;

            if (isset($var_236)) {
                
                $var_236->var_401 += $var_433;
                $var_236->var_403 += $var_431;

                $var_236->var_272 += $var_433;
                $var_236->var_273 += $var_431;
            }

            
            $var_36 = new class_2($var_163->var_91);
            $var_36->var_401 += $var_433;
            $var_36->var_403 += $var_431;

            $var_36->var_291 += $var_431;
            $var_36->var_272 += $var_433;
            $var_36->var_273 += $var_431;

            $var_85 &= $var_36->update();
        }

        $var_436 = $var_163->var_217;

        $var_163->var_217 = $var_217;
        $var_163->var_285 = 0;

        
        $var_85 &= $var_163->updateTaxAmount($var_36);

        
        $var_85 &= $var_163->update();

        
        $var_125 = new class_8((int) $var_36->getIdOrderCarrier());
        if (Validate::isLoadedObject($var_125)) {
            $var_125->var_179 = (float) $var_36->getTotalWeight();
            $var_85 &= $var_125->update();
            if ($var_85) {
                $var_36->var_179 = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $var_125->var_179);
            }
        }

        
        if (isset($var_236)) {
            $var_85 &= $var_236->update();
        }

        
        StockAvailable::updateQuantity($var_163->var_181, $var_163->var_216, ($var_436 - $var_163->var_217), $var_36->var_121);

        $var_232 = $var_3->fn_8($var_36);
        
        $var_112 = $var_232[$var_163->var_17];
        $var_331 = OrderSlip::getProductSlipResume($var_163->var_17);
        $var_112['quantity_refundable'] = $var_112['product_quantity'] - $var_331['product_quantity'];
        $var_112['amount_refundable'] = $var_112['total_price_tax_excl'] - $var_331['amount_tax_excl'];
        $var_112['amount_refund'] = Tools::displayPrice($var_331['amount_tax_incl']);
        $var_112['refund_history'] = OrderSlip::getProductSlipDetail($var_163->var_17);
        if ($var_112['id_warehouse'] != 0) {
            $var_320 = new class_27((int) $var_112['id_warehouse']);
            $var_112['warehouse_name'] = $var_320->var_288;
            $var_333 = WarehouseProductLocation::getProductLocation($var_112['product_id'], $var_112['product_attribute_id'], $var_112['id_warehouse']);
            if (!empty($var_333)) {
                $var_112['warehouse_location'] = $var_333;
            } else {
                $var_112['warehouse_location'] = false;
            }
        } else {
            $var_112['warehouse_name'] = '--';
            $var_112['warehouse_location'] = false;
        }

        
        $var_419 = $var_36->getInvoicesCollection();

        $var_420 = array();
        foreach ($var_419 as $var_265) {
            
            $var_265->var_288 = $var_265->getInvoiceNumberFormatted(Context::getContext()->var_16->var_17, (int) $var_36->var_121);
            $var_420[] = $var_265;
        }

        $var_36 = $var_36->refreshShippingCost();

        $var_326 = false;
        foreach ($var_232 as $var_437) {
            if (!empty($var_437['location'])) {
                $var_326 = true;

                break;
            }
        }

        
        $var_3->var_15->var_59->assign(array(
            'product' => $var_112,
            'order' => $var_36,
            'currency' => new class_16($var_36->var_47),
            'can_edit' => $var_3->access('edit'),
            'invoices_collection' => $var_419,
            'current_id_lang' => Context::getContext()->var_16->var_17,
            'link' => Context::getContext()->var_73,
            'current_index' => self::$var_49,
            'display_warehouse' => (int) Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT'),
            'stock_location_is_available' => $var_326,
        ));

        if (!$var_85) {
            die(json_encode(array(
                'result' => $var_85,
                'error' => $var_3->trans('An error occurred while editing the product line.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        if (is_array(Tools::getValue('product_quantity'))) {
            $var_438 = $var_3->createTemplate('_customized_data.tpl')->fetch();
        } else {
            $var_438 = $var_3->createTemplate('_product_line.tpl')->fetch();
        }

        $var_3->fn_16($var_36);

        die(json_encode(array(
            'result' => $var_85,
            'view' => $var_438,
            'can_edit' => $var_3->access('add'),
            'invoices_collection' => $var_419,
            'order' => $var_36,
            'invoices' => $var_420,
            'documents_html' => $var_3->createTemplate('_documents.tpl')->fetch(),
            'shipping_html' => $var_3->createTemplate('_shipping.tpl')->fetch(),
            'customized_product' => is_array(Tools::getValue('product_quantity')),
        )));
    }

    public function fn_20()
    {
        $var_85 = true;

        $var_163 = new class_12((int) Tools::getValue('id_order_detail'));
        $var_36 = new class_2((int) Tools::getValue('id_order'));

        $var_3->fn_21($var_163, $var_36);

        
        if ($var_163->var_269 != 0) {
            $var_236 = new class_17($var_163->var_269);
            $var_236->var_272 -= $var_163->var_434;
            $var_236->var_273 -= $var_163->var_432;
            $var_236->var_401 -= $var_163->var_434;
            $var_236->var_403 -= $var_163->var_432;
            $var_85 &= $var_236->update();
        }

        
        $var_36->var_291 -= $var_163->var_432;
        $var_36->var_273 -= $var_163->var_432;
        $var_36->var_272 -= $var_163->var_434;
        $var_36->var_401 -= $var_163->var_434;
        $var_36->var_403 -= $var_163->var_432;

        $var_85 &= $var_36->update();

        
        $var_3->fn_22($var_163, $var_163->var_217, true);

        
        $var_125 = new class_8((int) $var_36->getIdOrderCarrier());
        if (Validate::isLoadedObject($var_125)) {
            $var_125->var_179 = (float) $var_36->getTotalWeight();
            $var_85 &= $var_125->update();
            if ($var_85) {
                $var_36->var_179 = sprintf('%.3f ' . Configuration::get('PS_WEIGHT_UNIT'), $var_125->var_179);
            }
        }

        if (!$var_85) {
            die(json_encode(array(
                'result' => $var_85,
                'error' => $var_3->trans('An error occurred while attempting to delete the product line.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        
        $var_419 = $var_36->getInvoicesCollection();

        $var_420 = array();
        foreach ($var_419 as $var_265) {
            
            $var_265->var_288 = $var_265->getInvoiceNumberFormatted(Context::getContext()->var_16->var_17, (int) $var_36->var_121);
            $var_420[] = $var_265;
        }

        $var_36 = $var_36->refreshShippingCost();

        
        $var_3->var_15->var_59->assign(array(
            'order' => $var_36,
            'currency' => new class_16($var_36->var_47),
            'invoices_collection' => $var_419,
            'current_id_lang' => Context::getContext()->var_16->var_17,
            'link' => Context::getContext()->var_73,
            'current_index' => self::$var_49,
        ));

        $var_3->fn_16($var_36);

        die(json_encode(array(
            'result' => $var_85,
            'order' => $var_36,
            'invoices' => $var_420,
            'documents_html' => $var_3->createTemplate('_documents.tpl')->fetch(),
            'shipping_html' => $var_3->createTemplate('_shipping.tpl')->fetch(),
        )));
    }

    protected function fn_19(var_164 $var_163, var_37 $var_36, var_237 $var_236 = null)
    {
        if (!Validate::isLoadedObject($var_163)) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('The Order Detail object could not be loaded.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        if (!empty($var_236) && !Validate::isLoadedObject($var_236)) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('The invoice object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        if (!Validate::isLoadedObject($var_36)) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('The order object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        if ($var_163->var_91 != $var_36->var_17) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('You cannot edit the order detail for this order.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        
        if ($var_36->hasBeenDelivered()) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('You cannot edit a delivered order.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        if (!empty($var_236) && $var_236->var_91 != Tools::getValue('id_order')) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('You cannot use this invoice for the order', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        
        $var_427 = str_replace(',', '.', Tools::getValue('product_price_tax_incl'));
        $var_428 = str_replace(',', '.', Tools::getValue('product_price_tax_excl'));

        if (!Validate::isPrice($var_427) || !Validate::isPrice($var_428)) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('Invalid price', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        if (!is_array(Tools::getValue('product_quantity')) && !Validate::isUnsignedInt(Tools::getValue('product_quantity'))) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('Invalid quantity', array(), 'Admin.Orderscustomers.Notification'),
            )));
        } elseif (is_array(Tools::getValue('product_quantity'))) {
            foreach (Tools::getValue('product_quantity') as $var_426) {
                if (!Validate::isUnsignedInt($var_426)) {
                    die(json_encode(array(
                        'result' => false,
                        'error' => $var_3->trans('Invalid quantity', array(), 'Admin.Orderscustomers.Notification'),
                    )));
                }
            }
        }
    }

    protected function fn_21(var_164 $var_163, var_37 $var_36)
    {
        if (!Validate::isLoadedObject($var_163)) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('The Order Detail object could not be loaded.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        if (!Validate::isLoadedObject($var_36)) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('The order object cannot be loaded.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        if ($var_163->var_91 != $var_36->var_17) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('You cannot delete the order detail.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }

        
        if ($var_36->hasBeenDelivered()) {
            die(json_encode(array(
                'result' => false,
                'error' => $var_3->trans('You cannot edit a delivered order.', array(), 'Admin.Orderscustomers.Notification'),
            )));
        }
    }

    
    protected function fn_8($var_36)
    {
        $var_232 = $var_36->fn_8();

        foreach ($var_232 as &$var_112) {
            if ($var_112['image'] != null) {
                $var_288 = 'product_mini_' . (int) $var_112['product_id'] . (isset($var_112['product_attribute_id']) ? '_' . (int) $var_112['product_attribute_id'] : '') . '.jpg';
                
                $var_112['image_tag'] = ImageManager::thumbnail(var_337 . 'p/' . $var_112['image']->getExistingImgPath() . '.jpg', $var_288, 45, 'jpg');
                if (file_exists(var_339 . $var_288)) {
                    $var_112['image_size'] = getimagesize(var_339 . $var_288);
                } else {
                    $var_112['image_size'] = false;
                }
            }
        }

        ksort($var_232);

        return $var_232;
    }

    
    protected function fn_22($var_163, $var_221, $var_418 = false)
    {
        
        $var_441 = (int) $var_163->var_217 - (int) $var_163->var_442;
        $var_443 = $var_221 > $var_441 ? $var_441 : $var_221;
        
        $var_444 = new class_26($var_163->var_181, false, (int) $var_3->var_15->var_16->var_17, (int) $var_163->var_121);

        $var_112 = new class_26($var_163->var_181, false, (int) $var_3->var_15->var_16->var_17, (int) $var_163->var_121);

        if (Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') && $var_112->var_318 && $var_163->var_445 != 0) {
            $var_446 = StockManagerFactory::getManager();
            $var_447 = StockMvt::getNegativeStockMvts(
                                $var_163->var_91,
                                $var_163->var_181,
                                $var_163->var_216,
                                $var_443
                            );
            $var_448 = $var_443;
            foreach ($var_447 as $var_449) {
                if ($var_448 > $var_449['physical_quantity']) {
                    $var_443 = $var_449['physical_quantity'];
                }

                $var_448 -= $var_443;
                if (Pack::isPack((int) $var_112->var_17)) {
                    
                    if ($var_112->var_450 == var_451::var_452
                        || $var_112->var_450 == var_451::var_453
                        || ($var_112->var_450 == var_451::var_454
                            && Configuration::get('PS_PACK_STOCK_TYPE') > 0)
                    ) {
                        $var_455 = Pack::getItems((int) $var_112->var_17, (int) Configuration::get('PS_LANG_DEFAULT'));
                        
                        foreach ($var_455 as $var_456) {
                            if ($var_456->var_318 == 1) {
                                $var_446->addProduct(
                                    $var_456->var_17,
                                    $var_456->var_458,
                                    new class_27($var_449['id_warehouse']),
                                    $var_456->var_459 * $var_443,
                                    null,
                                    $var_449['price_te'],
                                    true
                                );
                            }
                        }
                    }

                    if ($var_112->var_450 == var_451::var_460
                        || $var_112->var_450 == var_451::var_453
                        || (
                            $var_112->var_450 == var_451::var_454
                            && (Configuration::get('PS_PACK_STOCK_TYPE') == var_451::var_460
                                || Configuration::get('PS_PACK_STOCK_TYPE') == var_451::var_453)
                        )
                    ) {
                        $var_446->addProduct(
                                $var_163->var_181,
                                $var_163->var_216,
                                new class_27($var_449['id_warehouse']),
                                $var_443,
                                null,
                                $var_449['price_te'],
                                true
                            );
                    }
                } else {
                    $var_446->addProduct(
                            $var_163->var_181,
                            $var_163->var_216,
                            new class_27($var_449['id_warehouse']),
                            $var_443,
                            null,
                            $var_449['price_te'],
                            true
                        );
                }
            }

            $var_384 = $var_163->var_181;
            if ($var_418) {
                $var_163->delete();
            }
            StockAvailable::synchronize($var_384);
        } elseif ($var_163->var_445 == 0) {
            StockAvailable::updateQuantity(
                $var_163->var_181,
                $var_163->var_216,
                $var_443,
                $var_163->var_121,
                true,
                array(
                    'id_order' => $var_163->var_91,
                    'id_stock_mvt_reason' => Configuration::get('PS_STOCK_CUSTOMER_RETURN_REASON'),
                )
            );

            
            (new class_31())->updatePhysicalProductQuantity(
                (int) $var_163->var_121,
                (int) Configuration::get('PS_OS_ERROR'),
                (int) Configuration::get('PS_OS_CANCELED'),
                null,
                (int) $var_163->var_91
            );

            if ($var_418) {
                $var_163->delete();
            }
        } else {
            $var_3->var_54[] = $var_3->trans('This product cannot be re-stocked.', array(), 'Admin.Orderscustomers.Notification');
        }
    }

    
    protected function fn_23($var_236, $var_462, $var_261)
    {
        
        $var_236->var_271 += $var_462;
        $var_236->var_270 += $var_261;
        $var_236->var_273 -= $var_462;
        $var_236->var_272 -= $var_261;
        $var_236->update();
    }

    public function fn_24()
    {
        $var_41 = new class_4(Tools::getValue('id_customer'));
        $var_463 = Module::getAuthorizedModules($var_41->var_464, array($var_41->var_121));
        $var_465 = array();

        if (!Validate::isLoadedObject($var_41) || !is_array($var_463)) {
            die(json_encode(array('result' => false)));
        }

        foreach ($var_463 as $var_307) {
            $var_465[] = (int) $var_307['id_module'];
        }

        $var_57 = array();

        foreach (PaymentModule::getInstalledPaymentModules() as $var_58) {
            if (in_array((int) $var_58['id_module'], $var_465)) {
                $var_57[] = Module::getInstanceById((int) $var_58['id_module']);
            }
        }

        $var_3->var_15->var_59->assign(array(
            'payment_modules' => $var_57,
        ));

        die(json_encode(array(
            'result' => true,
            'view' => $var_3->createTemplate('_select_payment.tpl')->fetch(),
        )));
    }

    
    protected function fn_11(&$var_335)
    {
        if (isset($var_335['id_product_attribute']) && $var_335['id_product_attribute']) {
            $var_466 = Db::getInstance()->getValue('
                SELECT `image_shop`.id_image
                FROM `' . var_13 . 'product_attribute_image` pai' .
                class_1::addSqlAssociation('image', 'pai', true) . '
                WHERE id_product_attribute = ' . (int) $var_335['id_product_attribute']);
        }

        if (!isset($var_466) || !$var_466) {
            $var_466 = Db::getInstance()->getValue(
                '
                SELECT `image_shop`.id_image
                FROM `' . var_13 . 'image` i' .
                class_1::addSqlAssociation('image', 'i', true, 'image_shop.cover=1') . '
                WHERE i.id_product = ' . (int) $var_335['id_product']
            );
        }

        $var_335['image'] = null;
        $var_335['image_size'] = null;

        if ($var_466) {
            $var_335['image'] = new class_32($var_466);
        }
    }

    
    protected function fn_12($var_36)
    {
        $var_38 = $var_3->var_15->var_38;
        $var_467 = class_4::getGroupsStatic((int) $var_38->var_42);
        $var_253 = new class_20((int) $var_38->var_244);

        return class_7::getCarriersForOrder(class_20::getZoneById((int) $var_253->var_17), $var_467, $var_38);
    }
}
