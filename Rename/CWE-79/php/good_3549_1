<?php

class class_0 extends var_0 {
	
	function fn_0() {
		$var_1 = new class_1(array(
			'Var' => 'var value'
		));
		
		$var_2 = $var_1->renderWith("SSViewerTestPartialTemplate");
		$var_4->assertEquals('Test partial template: var value', trim(preg_replace("/<!--.*-->/U",'',$var_2)));
	}
	
	function fn_1() {
		$var_6 = $var_4->getMock("Requirements_Backend", array("javascript", "css"));
		$var_8 = 'sapphire/tests/forms/a.js';
		$var_9 = 'sapphire/tests/forms/a.js';
		
		$var_6->expects($var_4->once())->method('javascript')->with($var_8);
		$var_6->expects($var_4->once())->method('css')->with($var_9);
		
		Requirements::set_backend($var_6);
		
		$var_1 = new class_1(array());
		
		$var_14 = class_2::fromString(<<<SS
		<% require javascript($var_8) %>
		<% require css($var_9) %>
SS
);
		$var_15 = $var_14->process($var_1);
		$var_4->assertFalse((bool)trim($var_15), "Should be no content in this return.");
	}
	
	function fn_2() {
		$var_14 = class_2::fromString(<<<SS
This is my template<%-- this is a comment --%>This is some content<%-- this is another comment --%>This is the final content
SS
);
		$var_18 = $var_14->process(new class_1(array()));
		
		$var_4->assertEquals("This is my templateThis is some contentThis is the final content", preg_replace("/\n?<!--.*-->\n?/U",'',$var_18));
	}
	
	function fn_3() {
		$var_19 = class_2::getOption('rewriteHashlinks');
		class_2::setOption('rewriteHashlinks', true);
		
		
		$var_20 = Convert::raw2att($_SERVER['REQUEST_URI']);
		$var_21 = var_22 . '/SSViewerTest_testRewriteHashlinks_' . sha1(rand()) . '.ss';
		
		
		file_put_contents($var_21, '<!DOCTYPE html>
			<html>
				<head><% base_tag %></head>
				<body>
				<a class="inline" href="
				$InsertedLink
				<body>
			</html>');
		$var_23 = new class_2($var_21);
		$var_24 = new class_3();
		$var_24->var_25 = '<a class="inserted" href="
		$result = $tmpl->process($obj);
		$this->assertContains(
			'<var_26 var_27="inserted" var_28="' . $var_20 . '
			$var_2
		);
		$var_4->var_29(
			'<a class="var_30" var_28="' . $var_20 . '
			$var_2
		);
		
		unlink($var_21);
		
		SSViewer::setOption('rewriteHashlinks', $var_19);
	}

	function testRewriteHashlinksInPhpMode() {
		$var_19 = SSViewer::getOption('rewriteHashlinks');
		SSViewer::setOption('rewriteHashlinks', 'php');
		
		$var_21 = TEMP_FOLDER . '/SSViewerTest_testRewriteHashlinksInPhpMode_' . sha1(rand()) . '.ss';
		
		
		file_put_contents($var_21, '<!DOCTYPE html>
			<html>
				<head><% base_tag %></head>
				<body>
				<a class="var_30" var_28="
				$var_25
				<body>
			</html>');
		$var_23 = new SSViewer($var_21);
		$var_24 = new ViewableData();
		$var_24->var_25 = '<a class="var_31" var_28="
		$var_2 = $var_23->var_16($var_24);
		$var_4->var_29(
			'<a class="var_31" var_28="<?php 
		
		
		
		
		
		
		var_32($var_21);
		
		class_2::setOption('rewriteHashlinks', $var_19);
	}
}
