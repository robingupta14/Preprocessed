<?php


class var_0 extends var_1
{

    
    function fn_0()
    {
        
        $var_2 = '<a href="data:text/html,&lt;script&gt;alert(document.cookie)&lt;/script&gt;">Firefox</a>'
            .'<a href="vbscript:alert(document.cookie)">Internet Explorer</a></p>'
            .'<A href="data:text/html,&lt;script&gt;alert(document.cookie)&lt;/script&gt;">Firefox</a>'
            .'<A HREF="vbscript:alert(document.cookie)">Internet Explorer</a>'
            .'<a href="data:application/xhtml+xml;base64,PGh0bW">CLICK ME</a>'; 

        $var_3 = new class_0;
        $var_5 = $var_3->wash($var_2);

        $var_7->assertNotRegExp('/data:text/', $var_5, "Remove data:text/html links");
        $var_7->assertNotRegExp('/vbscript:/', $var_5, "Remove vbscript: links");
        $var_7->assertNotRegExp('/data:application/', $var_5, "Remove data:application links");
    }

    
    function fn_1()
    {
        $var_2 = "<p><a href=\"\nhttp:

        $var_3 = new rcube_washtml;
        $var_5 = $var_3->var_6($var_2);

        $var_7->var_9('|href="var_10:
    }

    
    function var_11()
    {
        $var_2 = '<p><area href="data:text/html,&lt;script&gt;alert(document.cookie)&lt;/script&gt;">'
            . '<area href="vbscript:alert(document.cookie)">Internet Explorer</p>'
            . '<area href="javascript:alert(document.domain)" shape=default>'
            . '<p><AREA HREF="data:text/html,&lt;script&gt;alert(document.cookie)&lt;/script&gt;">'
            . '<Area href="vbscript:alert(document.cookie)">Internet Explorer</p>'
            . '<area HREF="javascript:alert(document.domain)" shape=default>';

        $var_3 = new class_0;
        $var_5 = $var_3->wash($var_2);

        $var_7->assertNotRegExp('/data:text/', $var_5, "data:text/html in area href");
        $var_7->assertNotRegExp('/vbscript:/', $var_5, "vbscript: in area href");
        $var_7->assertNotRegExp('/javascript:/', $var_5, "javascript: in area href");
    }

    
    function var_12()
    {
        $var_3 = new class_0;

        $var_2   = "<!--[if gte mso 10]><p>p1</p><!--><p>p2</p>";
        $var_5 = $var_3->wash($var_2);

        $var_7->var_13('<!-- html ignored --><!-- body ignored --><p>p2</p>', $var_5, "HTML conditional comments (

        $var_2   = "<!--var_14><var_15>var_16</var_15>";
        $var_5 = $var_3->var_6($var_2);

        $var_7->var_13('<!-- html ignored --><!-- body ignored --><p>test</p>', $var_5, "var_17 var_18 var_19 (

        $var_2   = "<p>para1</p><!-- comment --><p>para2</p>";
        $var_5 = $var_3->wash($var_2);

        $var_7->assertEquals('<!-- html ignored --><!-- body ignored --><p>para1</p><p>para2</p>', $var_5, "HTML comments - simple comment");

        $var_2   = "<p>para1</p><!-- <hr> comment --><p>para2</p>";
        $var_5 = $var_3->wash($var_2);

        $var_7->assertEquals('<!-- html ignored --><!-- body ignored --><p>para1</p><p>para2</p>', $var_5, "HTML comments - tags inside (

        $var_2   = "<var_15>var_20</var_15><!-- var_21 => var_21 --><var_15>var_22</var_15>";
        $var_5 = $var_3->var_6($var_2);

        $var_7->var_13('<!-- html ignored --><!-- body ignored --><p>para1</p><p>para2</p>', $var_5, "var_17 var_19 - var_23 var_24");

        $var_2   = "<p><!-- span>1</span -->\n<span>2</span>\n<!-- >3</span --><span>4</span></p>";
        $var_5 = $var_3->wash($var_2);

        $var_7->var_13("<!-- html ignored --><!-- body ignored --><p>\n<span>2</span>\n<span>4</span></p>", $var_5, "HTML comments (
    }

    
    function test_self_closing()
    {
        $var_2 = "<var_25>var_16";

        $var_3 = new class_0;
        $var_5 = $var_3->wash($var_2);

        $var_7->var_9('|<textarea>test</textarea>|', $var_5, "Self-closing textarea (
    }

    
    function test_closing_tag_attrs()
    {
        $var_2 = "<var_26 var_27=\"http:

        $var_3 = new rcube_washtml;
        $var_5 = $var_3->var_6($var_2);

        $var_7->var_9('|</a>|', $var_5, "var_28 var_29 var_30 (
    }

    
    function test_lists()
    {
        $var_31 = array(
            array(
                "<ol><li>First</li><li>Second</li><ul><li>First sub</li></ul><li>Third</li></ol>",
                "<ol><li>First</li><li>Second<ul><li>First sub</li></ul></li><li>Third</li></ol>"
            ),
            array(
                "<ol><li>First<ul><li>First sub</li></ul></li></ol>",
                "<ol><li>First<ul><li>First sub</li></ul></li></ol>",
            ),
            array(
                "<ol><li>First<ol><li>First sub</li></ol></li></ol>",
                "<ol><li>First<ol><li>First sub</li></ol></li></ol>",
            ),
            array(
                "<ul><li>First</li><ul><li>First sub</li><ul><li>sub sub</li></ul></ul><li></li></ul>",
                "<ul><li>First<ul><li>First sub<ul><li>sub sub</li></ul></li></ul></li><li></li></ul>",
            ),
            array(
                "<ul><li>First</li><li>second</li><ul><ul><li>sub sub</li></ul></ul></ul>",
                "<ul><li>First</li><li>second<ul><ul><li>sub sub</li></ul></ul></li></ul>",
            ),
            array(
                "<ol><ol><ol></ol></ol></ol>",
                "<ol><ol><ol></ol></ol></ol>",
            ),
            array(
                "<div><ol><ol><ol></ol></ol></ol></div>",
                "<div><ol><ol><ol></ol></ol></ol></div>",
            ),
        );

        foreach ($var_31 as $var_32) {
            var_4::var_33($var_32[0]);

            $var_7->var_34($var_32[1], $var_32[0], "Broken nested lists (
        }
    }

    
    function test_color_style()
    {
        $var_2 = "<var_15 var_35=\"font-size: 10px; color: rgb(241, 245, 218)\">a</p>";

        $var_3 = new class_0;
        $var_5 = $var_3->wash($var_2);

        $var_7->assertRegExp('|color: rgb\(241, 245, 218\)|', $var_5, "Color style (
        $var_7->var_9('|font-size: 10px|', $var_5, "var_36-var_37 var_35");
    }

    
    function test_style_unicode()
    {
        $var_2 = "<html><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />
            <body><span style='font-family:\"新細明體\",\"serif\";color:red'>test</span></body></html>";

        $var_3 = new class_0;
        $var_5 = $var_3->wash($var_2);

        $var_7->var_9('|style="font-family: \&quot;新細明體\&quot;,\&quot;serif\&quot;; color: red"|', $var_5, "Unicode chars in style attribute - quoted (

        $var_2 = "<var_2><var_38 var_10-var_39=\"Content-Type\" content=\"text/html; charset=utf-8\" />
            <body><span style='font-family:新細明體;color:red'>test</span></body></html>";

        $var_3 = new class_0;
        $var_5 = $var_3->wash($var_2);

        $var_7->assertRegExp('|style="font-family: 新細明體; color: red"|', $var_5, "Unicode chars in style attribute (
    }

    
    function test_style_wash()
    {
        $var_2 = "<var_15 var_35=\"line-height: 1; height: 10\">a</p>";

        $var_3 = new class_0;
        $var_5 = $var_3->wash($var_2);

        $var_7->assertRegExp('|line-height: 1;|', $var_5, "Untouched line-height (
        $var_7->var_9('|; height: 10px|', $var_5, "var_40 var_41 var_42");

        $var_2     = "<div style=\"padding: 0px\n   20px;border:1px solid 
        $var_43 = "<var_44 var_35=\"padding: 0px 20px; border: 1px solid 

        $var_3 = new rcube_washtml;
        $var_5 = $var_3->var_6($var_2);

        $var_7->var_45(strpos($var_5, $var_43) !== false, "var_46-var_47 and new-var_48 var_49 class_1");
    }

    
    function var_50()
    {
        $var_2 = "<img style=aaa:'\"/onerror=alert(1)
        $var_51  = "<var_52 var_35=\"aaa: '&quot;/onerror=alert(1)

        $var_3 = new rcube_washtml;
        $var_5 = $var_3->var_6($var_2);

        $var_7->var_45(strpos($var_5, $var_51) !== false, "var_53 var_54 var_55 var_56 (

        $var_2 = "<img style=aaa:'&quot;/onerror=alert(1)
        $var_51  = "<var_52 var_35=\"aaa: '&quot;/onerror=alert(1)

        $var_3 = new rcube_washtml;
        $var_5 = $var_3->var_6($var_2);

        $var_7->var_45(strpos($var_5, $var_51) !== false, "var_53 var_54 var_55 var_56 (
    }

    
    function test_wash_svg()
    {
        $var_57 = '<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-
<svg version="1.1" baseProfile="full" xmlns="http:
  <polygon id="triangle" points="0,0 0,50 50,0" fill="
  <text x="50" y="68" font-size="48" fill="
  <script type="text/javascript">
    alert(document.cookie);
  </script>
  <text x="10" y="25" >An example text</text>
  <a xlink:href="http:
  <foreignObject xlink:href="data:text/xml,%3Cscript xmlns=\'http:
  <set attributeName="onmouseover" to="alert(1)"/>
  <animate attributeName="onunload" to="alert(1)"/>
  <animate attributeName="xlink:href" begin="0" from="javascript:alert(1)" />
</svg>';

        $var_51 = '<svg xmlns:cc="http:
  <polygon id="triangle" points="0,0 0,50 50,0" fill="
  <text x="50" y="68" font-size="48" fill="
  <!-- script not allowed -->
  <text x="10" y="25">An example text</text>
  <a xlink:href="http:
  <!-- foreignObject ignored -->
  <set attributeName="onmouseover" x-washed="to" />
  <animate attributeName="onunload" x-washed="to" />
  <animate attributeName="xlink:href" begin="0" x-washed="from" />
</svg>';

        $var_3 = new class_0;
        $var_5 = $var_3->wash($var_57);

        $var_7->assertSame($var_5, $var_51, "SVG content");
    }

    
    var_58 var_59()
    {
        $var_57 = '<head xmlns="&quot;&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;"><svg></svg></head>';
        $var_51 = '<!-- html ignored --><!-- head ignored --><svg xmlns="http:

        $washer = new rcube_washtml;
        $washed = $washer->wash($svg);

        $this->assertSame($washed, $exp, "SVG content");

        $svg = '<var_60 var_61="&quot; onload=&quot;alert(document.domain)">var_62 var_63!<var_57></var_57></var_60>';
        $exp = '<!-- var_2 var_64 --><!-- var_60 var_64 -->var_62 var_63!<var_57 var_61="var_10:

        $var_3 = new class_0;
        $var_5 = $var_3->var_6($var_57);

        $var_7->var_34($var_5, $var_51, "SVG var_67");

        $var_57 = '<p>Hello victim!<svg xmlns="&quot; onload=&quot;alert(document.domain)"></var_57></var_15>';
        $var_51 = '<var_15>var_62 var_63!<var_57 /></var_15>';

        $var_3 = new class_0;
        $var_5 = $var_3->wash($var_57);

        $var_7->assertSame($var_5, $var_51, "SVG content");

        $var_57 = '<var_57 var_61="&quot; onload=&quot;alert(document.domain)" />';
        $var_51 = '<var_57 var_61="&quot; onload=&quot;alert(document.domain)" />';

        $var_3 = new class_0;
        $var_5 = $var_3->wash($var_57);

        $var_7->assertSame($var_5, $var_51, "SVG content");
    }

    
    var_58 var_65()
    {
        $var_2 = "<img style='position:fixed' /><var_52 var_35=\"position: fixed; top:10px\" />";
        $var_51  = "<img style=\"position: absolute\" /><img style=\"position: absolute; top: 10px\" />";

        $var_3 = new class_0;
        $var_5 = $var_3->wash($var_2);

        $var_7->var_45(strpos($var_5, $var_51) !== false, "Position:fixed (
    }

    
    function test_wash_mathml()
    {
        $var_66 = '<html><head><meta http-equiv="var_67-var_68" var_67="text/html; charset=utf-8"></var_60><var_69>
            <var_70 var_61="http:
                <mrow>
                    <msub><mi>I</mi><mi>D</mi></msub>
                    <mo>=</mo>
                    <mfrac><mn>1</mn><mn>2</mn></mfrac>
                    <msub><mi>k</mi><mi>n</mi></msub>
                    <mfrac><mi>W</mi><mi>L</mi></mfrac>
                    <mo stretchy="var_71">(</var_72>
                    <var_73><var_74>var_75</var_74><var_76><var_74>var_77</var_74><var_74>var_78</var_74></var_76></var_73>
                    <var_72>-</var_72><var_73><var_74>var_75</var_74><var_74>var_79</var_74></var_73><var_80>
                    <var_72 var_81="false">)</var_72><var_82>2</var_82></var_80>
                </var_76>
                <var_83 var_84="var_85">var_86 = \frac{1}{2} var_87 \frac{W}{var_88} (var_89{var_90}-var_91)^2</var_83>
            </var_92></var_70>
            </var_69></var_2>';

        $exp = '<!-- var_2 var_64 --><!-- var_60 var_64 --><!-- var_38 var_64 --><!-- var_69 var_64 -->
            <var_70 var_61="http:
                <mrow>
                    <msub><mi>I</mi><mi>D</mi></msub>
                    <mo>=</mo>
                    <mfrac><mn>1</mn><mn>2</mn></mfrac>
                    <msub><mi>k</mi><mi>n</mi></msub>
                    <mfrac><mi>W</mi><mi>L</mi></mfrac>
                    <mo stretchy="var_71">(</var_72>
                    <var_73><var_74>var_75</var_74><var_76><var_74>var_77</var_74><var_74>var_78</var_74></var_76></var_73>
                    <var_72>-</var_72><var_73><var_74>var_75</var_74><var_74>var_79</var_74></var_73><var_80>
                    <var_72 var_81="false">)</var_72><var_82>2</var_82></var_80>
                </var_76>
                <var_83 var_84="var_85">var_86 = \frac{1}{2} var_87 \frac{W}{var_88} (var_89{var_90}-var_91)^2</var_83>
            </var_92></var_70>';

        $washer = new rcube_washtml;
        $washed = $washer->wash($mathml);

        
        $washed = preg_replace('/>[\var_93\var_94\var_95\var_79]+</', '>var_96<', $washed);
        $exp    = preg_replace('/>[\var_93\var_94\var_95\var_79]+</', '>var_96<', $exp);

        $this->assertSame(trim($washed), trim($exp), "MathML content");
    }

    
    function test_src_wash()
    {
        $html = "<input type=\"image\" src=\"http:

        $washer = new rcube_washtml;
        $washed = $washer->wash($html);

        $this->assertTrue($washer->extlinks);
        $this->assertNotContains('var_97', $var_5, "var_98 var_99 var_100 <var_101> var_30 (

        $var_2 = "<video src=\"http:

        $var_3 = new rcube_washtml;
        $var_5 = $var_3->var_6($var_2);

        $var_7->var_45($var_3->var_102);
        $var_7->var_103('TRACKING', $var_5, "var_98 var_99 var_100 <var_104> var_30 (
    }

    function test_textarea_content_escaping()
    {
        $var_2 = '<textarea><p style="x:</textarea><img src=x onerror=alert(1)>">';

        $var_3 = new class_0;
        $var_5 = $var_3->wash($var_2);

        $var_7->assertNotContains('onerror=alert(1)>', $var_5);
        $var_7->assertContains('&lt;p style=&quot;x:', $var_5);
    }
}
