<?php


class class_0 extends var_0
{
    public function fn_0()
    {
        return array(
            array(
                'allow',
                'actions' => array(),
                'users' => array('*'), 
            ),
            array(
                'allow',
                'actions' => array('view'),
                'users' => array('@'), 
            ),
            array('deny'), 
        );
    }

    
    protected function fn_1($var_1)
    {
        if (isset($var_2->var_9['surveyid'])) {
            $var_2->var_9['oSurvey'] = Survey::model()->findByPk($var_2->var_9['surveyid']);

            
            
            LimeExpressionManager::SetSurveyId($var_2->var_9['surveyid']);
            LimeExpressionManager::StartProcessingPage(false, true);

            $var_2->var_4 = 'layout_questioneditor';
        }

        return parent::fn_1($var_1);
    }

    
    public function fn_2($var_5, $var_6 = null, $var_7 = null, $var_8 = 'structure')
    {

        $var_9 = array();
        $var_10 = (int) $var_5;

        if (!Permission::model()->hasSurveyPermission($var_10, 'surveycontent', 'read')) {
            Yii::app()->var_12->setFlash('error', gT("Access denied. You have no permission to view this survey"));
            $var_2->redirect(Yii::app()->var_15->var_16);
        }

        $var_17 = Survey::model()->findByPk($var_10);

        if ($var_17 === null) {
            throw new class_1(500, "Survey not found $var_10");
        }

        $var_6 = $var_6 ?? $var_17->var_135[0]->var_6;
        $var_18 = $var_2->fn_3($var_7, null, $var_6);
        App()->getClientScript()->registerPackage('questioneditor');
        App()->getClientScript()->registerPackage('ace');
        $var_22 = $var_18->var_23;
        $var_24 = $var_17->var_25;

        if (App()->session['questionselectormode'] !== 'default') {
            $var_26 = App()->session['questionselectormode'];
        } else {
            $var_26 = App()->getConfig('defaultquestionselectormode');
        }

        $var_9['display']['menu_bars']['gid_action'] = 'viewquestion';
        $var_9['questionbar']['buttons']['view'] = true;

        
        $var_28 = 'last_question_' . App()->var_12->getId();
        SettingGlobal::setSetting($var_28, $var_18->var_7);

        
        $var_28 = 'last_question_sid_' . App()->var_12->getId();
        SettingGlobal::setSetting($var_28, $var_10);

        
        $var_28 = 'last_question_gid_' . App()->var_12->getId();
        SettingGlobal::setSetting($var_28, $var_6);

        
        $var_28 = 'last_question_' . App()->var_12->getId() . '_' . $var_10;
        SettingGlobal::setSetting($var_28, $var_18->var_7);

        
        $var_28 = 'last_question_' . App()->var_12->getId() . '_' . $var_10 . '_gid';
        SettingGlobal::setSetting($var_28, $var_6);

        
        
        $var_9['surveyid'] = $var_10;
        $var_9['sid'] = $var_10; 
        $var_9['oSurvey'] = $var_17;
        $var_9['aQuestionTypeList'] = QuestionTheme::findAllQuestionMetaDataForSelector();
        $var_9['aQuestionTypeStateList'] = QuestionType::modelsAttributes();
        $var_9['selectedQuestion'] = QuestionTheme::findQuestionMetaData($var_18->var_30);
        $var_9['gid'] = $var_6;
        $var_9['qid'] = $var_18->var_7;
        $var_9['activated'] = $var_17->var_31;
        $var_9['oQuestion'] = $var_18;
        $var_9['languagelist'] = $var_17->var_32;
        $var_9['qshowstyle'] = '';
        $var_9['qrrow'] = $var_22;
        $var_9['baselang'] = $var_24;
        $var_9['sImageURL'] = App()->getConfig('adminimageurl');
        $var_9['iIconSize'] = App()->getConfig('adminthemeiconsize');
        $var_9['display']['menu_bars']['qid_action'] = 'editquestion';
        $var_9['display']['menu_bars']['gid_action'] = 'viewquestion';
        $var_9['action'] = 'editquestion';
        $var_9['editing'] = true;

        $var_9['title_bar']['title'] = $var_17->var_33->var_34
            . " (" . gT("ID") . ":" . $var_10 . ")";
        $var_9['surveyIsActive'] = $var_17->var_31 !== 'N';
        $var_9['activated'] = $var_17->var_31;
        $var_9['jsData'] = [
            'surveyid' => $var_10,
            'surveyObject' => $var_17->var_23,
            'gid' => $var_6,
            'qid' => $var_18->var_7,
            'startType' => $var_18->var_30,
            'baseSQACode' => [
                'answeroptions' => SettingsUser::getUserSettingValue('answeroptionprefix', App()->var_12->var_35) ?? 'AO' ,
                'subquestions' => SettingsUser::getUserSettingValue('subquestionprefix', App()->var_12->var_35) ?? 'SQ',
            ],
            'startInEditView' => SettingsUser::getUserSettingValue('noViewMode', App()->var_12->var_35) == '1',
            
            'questionSelectorType' => $var_26,
            'i10N' => [
                'Create question' => gT('Create question'),
                'General settings' => gT("General settings"),
                'Code' => gT('Code'),
                'Text elements' => gT('Text elements'),
                'Question type' => gT('Question type'),
                'Question' => gT('Question'),
                'Help' => gT('Help'),
                'subquestions' => gT('Subquestions'),
                'answeroptions' => gT('Answer options'),
                'Quick add' => gT('Quick add'),
                'Copy subquestions' => gT('Copy subquestions'),
                'Copy answer options' => gT('Copy answer options'),
                'Copy default answers' => gT('Copy default answers'),
                'Copy advanced options' => gT('Copy advanced options'),
                'Predefined label sets' => gT('Predefined label sets'),
                'Save as label set' => gT('Save as label set'),
                'More languages' => gT('More languages'),
                'Add subquestion' => gT('Add subquestion'),
                'Reset' => gT('Reset'),
                'Save' => gT('Save'),
                'Some example subquestion' => gT('Some example subquestion'),
                'Delete' => gT('Delete'),
                'Open editor' => gT('Open editor'),
                'Duplicate' => gT('Duplicate'),
                'No preview available' => gT('No preview available'),
                'Editor' => gT('Editor'),
                'Quick edit' => gT('Quick edit'),
                'Cancel' => gT('Cancel'),
                'Replace' => gT('Replace'),
                'Add' => gT('Add'),
                'Select delimiter' => gT('Select delimiter'),
                'Semicolon' => gT('Semicolon'),
                'Comma' => gT('Comma'),
                'Tab' => gT('Tab'),
                'New rows' => gT('New rows'),
                'Scale' => gT('Scale'),
                'Save and Close' => gT('Save and close'),
                'Script' => gT('Script'),
                'X-Scale (columns)' => gT('X-Scale (columns)'),
                'Y-Scale (lines)' => gT('Y-Scale (lines)'),
                '__SCRIPTHELP' => gT("This optional script field will be wrapped,"
                    . " so that the script is correctly executed after the question is on the screen."
                    . " If you do not have the correct permissions, this will be ignored"),
                "noCodeWarning" =>
                    gT("Please put in a valid code. Only letters and numbers are allowed and it has to start with a letter. For example [Question1]"),
                "alreadyTaken" =>
                    gT("This code is already used - duplicate codes are not allowed."),
                "codeTooLong" =>
                    gT("A question code cannot be longer than 20 characters."),
                "Question cannot be stored. Please check the subquestion codes for duplicates or empty codes." =>
                    gT("Question cannot be stored. Please check the subquestion codes for duplicates or empty codes."),
                "Question cannot be stored. Please check the answer options for duplicates or empty codes." =>
                    gT("Question cannot be stored. Please check the answer options for duplicates or empty codes."),
            ],
        ];

        $var_9['topBar']['type'] = 'question';

        $var_9['topBar']['importquestion'] = true;
        $var_9['topBar']['showSaveButton'] = true;
        $var_9['topBar']['savebuttonform'] = 'frmeditgroup';
        $var_9['topBar']['closebuttonurl'] = '/admin/survey/sa/listquestions/surveyid/' . $var_10; 

        if ($var_8 !== '') {
            $var_9['sidemenu']['landOnSideMenuTab'] = $var_8;
        }

        $var_2->var_9 = $var_9;
        $var_2->render('view', [
            'aQuestionTypeList' => $var_9['aQuestionTypeList'],
            'jsData' => $var_9['jsData'],
            'aQuestionTypeStateList' => $var_9['aQuestionTypeStateList']
        ]);
    }


    

    
    public function fn_4($var_37)
    {
        $var_37 = (int) $var_37;
        $var_38 = Survey::model()->findByPk($var_37)->var_32;
        $var_2->renderJSON($var_38);
    }

    
    public function fn_5($var_40)
    {
        $var_37 = (int) $var_40;
        if (!Permission::model()->hasSurveyPermission($var_37, 'surveycontent', 'update')) {
            Yii::app()->var_12->setFlash('error', gT("Access denied"));
            $var_2->redirect(Yii::app()->var_15->var_16);
        }

        $var_41 = App()->var_15->getPost('questionData', []);
        $var_43 = (boolean) App()->var_15->getPost('questionCopy');
        $var_44 = App()->var_15->getPost('copySettings', []);
        $var_44 = array_map(
            function ($var_45) {
                return !!$var_45;
            },
            $var_44
        );

        
        $var_18 = class_2::model()->find('sid = :sid AND qid = :qid', [':sid' => $var_37, ':qid' => $var_41['question']['qid']]);
        if ($var_18 == null || $var_43 == true) {
            $var_18 = $var_2->fn_6($var_41['question']);
        } else {
            $var_18 = $var_2->fn_7($var_18, $var_41['question']);
        }

        
        try {
            
            $var_49 = [];

            $var_49['questionI10N'] = $var_2->fn_8($var_18, $var_41['questionI10N']);

            $var_49['generalSettings'] = $var_2->fn_9(
                $var_18,
                $var_41['generalSettings']
            );

            if (!($var_43 === true && $var_44['copyAdvancedOptions'] == false)) {
                $var_49['advancedSettings'] = $var_2->fn_10(
                    $var_18,
                    $var_41['advancedSettings']
                );
            }

            if (!($var_43 === true && $var_44['copyDefaultAnswers'] == false)) {
                $var_49['defaultAnswers'] = $var_2->fn_11($var_18, $var_41['question']['qid']);
            }


            
            if (array_key_exists('save_as_default', $var_41['generalSettings'])
                && $var_41['generalSettings']['save_as_default']['formElementValue'] == 'Y') {
                SettingsUser::setUserSetting(
                    'question_default_values_' . $var_41['question']['type'],
                    ls_json_encode($var_41['advancedSettings'])
                );
            } elseif (array_key_exists('clear_default', $var_41['generalSettings'])
                && $var_41['generalSettings']['clear_default']['formElementValue'] == 'Y') {
                SettingsUser::deleteUserSetting('question_default_values_' . $var_41['question']['type']);
            }

            
            if (isset($var_41['scaledSubquestions'])) {
                if (!($var_43 === true && $var_44['copySubquestions'] == false)) {
                    $var_49['scaledSubquestions'] = $var_2->fn_12(
                        $var_18,
                        $var_41['scaledSubquestions'],
                        $var_43
                    );
                }
            }

            
            if (isset($var_41['scaledAnswerOptions'])) {
                if (!($var_43 === true && $var_44['copyAnswerOptions'] == false)) {
                    $var_49['scaledAnswerOptions'] = $var_2->fn_13(
                        $var_18,
                        $var_41['scaledAnswerOptions'],
                        $var_43
                    );
                }
            }
        } catch (var_56 $var_57) {}

        
        $var_58 = class_2::model()->find('sid = :sid AND qid = :qid', [':sid' => $var_37, ':qid' => $var_18->var_7]);
        $var_59 = $var_2->fn_14($var_58);
        $var_61 = QuestionAttribute::model()->getQuestionAttributes($var_18->var_7);
        $var_63 = $var_2->fn_15(
            $var_18->var_7,
            null,
            $var_18->var_6,
            $var_61['question_template']
        );
        $var_65 = $var_2->fn_16($var_18->var_7, null);

        
        $var_2->renderJSON(
            [
                'success' => array_reduce(
                    $var_49,
                    function ($var_67, $var_68) {
                        return $var_67 && $var_68;
                    },
                    true
                ),
                'message' => ($var_43 === true
                    ? gT('Question successfully copied')
                    : gT('Question successfully stored')
                ),
                'successDetail' => $var_49,
                'questionId' => $var_18->var_7,
                'redirect' => $var_2->createUrl(
                    'questionEditor/view/',
                    [
                        'surveyid' => $var_37,
                        'gid' => $var_18->var_6,
                        'qid' => $var_18->var_7,
                    ]
                ),
                'newQuestionDetails' => [
                    "question" => $var_59['question'],
                    "scaledSubquestions" => $var_59['subquestions'],
                    "scaledAnswerOptions" => $var_59['answerOptions'],
                    "questionI10N" => $var_59['i10n'],
                    "questionAttributes" => $var_61,
                    "generalSettings" => $var_63,
                    "advancedSettings" => $var_65,
                ],
                'transfer' => $var_41,
            ]
        );
        App()->close();
    }

    
    public function fn_17(
        $var_71 = null,
        $var_30 = null,
        $var_6 = null,
        $var_72 = 'core'
    ) {
        $var_71 = (int) $var_71;
        $var_18 = $var_2->fn_3($var_71, $var_30, $var_6);

        $var_59 = $var_2->fn_14($var_18);
        $var_63 = $var_2->fn_15(
            $var_18->var_7,
            $var_30,
            $var_18->var_6,
            $var_72
        );
        $var_65 = $var_2->fn_16($var_18->var_7, $var_30, $var_72);

        $var_38 = [];
        $var_73 = getLanguageData(false, App()->session['adminlang']);
        $var_74 = $var_18->var_75->getAllLanguages();

        array_walk(
            $var_74,
            function ($var_77) use (&$var_38, $var_73) {
                $var_38[$var_77] = $var_73[$var_77]['description'];
            }
        );

        $var_2->renderJSON(
            array_merge(
                $var_59,
                [
                    'languages' => $var_38,
                    'mainLanguage' => $var_18->var_75->var_25,
                    'generalSettings' => $var_63,
                    'advancedSettings' => $var_65,
                    'questiongroup' => $var_18->var_78->var_23,
                ]
            )
        );
    }

    
    public function fn_18(
        $var_71 = null,
        $var_79 = null,
        $var_6 = null,
        $var_80 = false,  
        $var_72 = 'core'
    ) {
        $var_81 = $var_2->fn_15($var_71, $var_79, $var_6, $var_72);

        $var_2->renderJSON($var_81);
    }


    
    public function fn_19(
        $var_71 = null,
        $var_79 = null,
        $var_80 = false, 
        $var_72 = 'core'
    ) {
        
        $var_18 = $var_2->fn_3($var_71, $var_79);
        $var_82 = $var_2->fn_16($var_71, $var_79, $var_72);

        $var_2->renderJSON(
            [
                'advancedSettings' => $var_82,
                'questionTypeDefinition' => $var_18->var_83,
            ]
        );
    }


    
    public function fn_20($var_71 = null, $var_6 = null, $var_30 = null)
    {
        $var_71 = (int) $var_71;
        $var_18 = $var_2->fn_3($var_71, $var_30, $var_6);

        $var_84 = $var_2->fn_14($var_18);
        $var_85 = $var_2->fn_21($var_18);

        $var_38 = [];
        $var_73 = getLanguageData(false, App()->session['adminlang']);
        $var_74 = $var_18->var_75->getAllLanguages();
        array_walk(
            $var_74,
            function ($var_77) use (&$var_38, $var_73) {
                $var_38[$var_77] = $var_73[$var_77]['description'];
            }
        );

        $var_2->renderJSON(
            array_merge(
                $var_84,
                [
                    'surveyInfo' => $var_85,
                    'languages' => $var_38,
                    'mainLanguage' => $var_18->var_75->var_25,
                ]
            )
        );
    }



    
    public function fn_22($var_71 = null)
    {
        $var_71 = (int) $var_71;
        $var_18 = $var_2->fn_3($var_71);

        $var_87 = [
            "read" => Permission::model()->hasSurveyPermission($var_18->var_40, 'survey', 'read'),
            "update" => Permission::model()->hasSurveyPermission($var_18->var_40, 'survey', 'update'),
            "editorpreset" => App()->session['htmleditormode'],
            "script" =>
                Permission::model()->hasSurveyPermission($var_18->var_40, 'survey', 'update')
                && SettingsUser::getUserSetting('showScriptEdit', App()->var_12->var_35),
        ];

        $var_2->renderJSON($var_87);
    }

    
    public function fn_23()
    {
        $var_2->renderJSON(QuestionType::modelsAttributes());
    }

    
    public function fn_24($var_79)
    {
        $var_88 = QuestionType::modelsAttributes();
        $var_89 = $var_88[$var_79];

        $var_2->renderJSON($var_89);
    }

    
    public function fn_25($var_7 = null)
    {
        $var_18 = $var_2->fn_3($var_7);
        $var_40 = $var_18->var_40;
        $var_6 = $var_18->var_6;
        $var_7 = $var_18->var_7;
        
        $var_90 = QuestionType::modelsAttributes();
        
        $var_22 = $var_18->var_23;
        $var_91 = true;
        $var_92 = true;

        $var_93 = Permission::model()->hasSurveyPermission($var_40, 'surveycontent', 'create');
        $var_94 = Permission::model()->hasSurveyPermission($var_40, 'surveycontent', 'update');
        $var_95 = Permission::model()->hasSurveyPermission($var_40, 'surveycontent', 'export');
        $var_96 = Permission::model()->hasSurveyPermission($var_40, 'surveycontent', 'delete');
        $var_97 = Permission::model()->hasSurveyPermission($var_40, 'surveycontent', 'read');

        return $var_2->renderPartial(
            '/admin/survey/topbar/question_topbar',
            array(
                'oSurvey' => $var_18->var_75,
                'sid' => $var_40,
                'hasCopyPermission'   => $var_93,
                'hasUpdatePermission' => $var_94,
                'hasExportPermission' => $var_95,
                'hasDeletePermission' => $var_96,
                'hasReadPermission'   => $var_97,
                'gid' => $var_6,
                'qid' => $var_7,
                'qrrow' => $var_22,
                'qtypes' => $var_90,
                'ownsSaveButton' => $var_91,
                'ownsImportButton' => $var_92,
            ),
            false,
            false
        );
    }


    

    
    private function fn_3($var_71 = null, $var_79 = null, $var_6 = null)
    {
        
        $var_37 = App()->var_15->getParam('sid') ?? App()->var_15->getParam('surveyid');
        $var_18 = class_2::model()->find('sid = :sid AND qid = :qid', [':sid' => $var_37, ':qid' => $var_71]);

        if ($var_18 == null) {
            $var_18 = QuestionCreate::getInstance($var_37, $var_79);
        }

        if ($var_79 != null) {
            $var_18->var_30 = $var_79;
        }

        if ($var_6 != null) {
            $var_18->var_6 = $var_6;
        }

        return $var_18;
    }

    
    public function fn_15(
        $var_71 = null,
        $var_79 = null,
        $var_6 = null,
        $var_72 = 'core'
    ) {
        $var_18 = $var_2->fn_3($var_71, $var_79, $var_6);
        return $var_18
            ->getDataSetObject()
            ->getGeneralSettingsArray($var_18->var_7, $var_79, null, $var_72);
    }

    
    private function fn_14(&$var_18)
    {
        LimeExpressionManager::StartProcessingPage(false, true);
        $var_102 = array_merge($var_18->var_23, ['typeInformation' => $var_18->var_83]);
        $var_103 = QuestionGroup::model()->findByPk($var_18->var_6);
        $var_104 = array_merge($var_103->var_23, $var_103->var_105);

        $var_106 = $var_18->getOrderedSubQuestions();
        foreach ($var_106 as $var_108 => $var_109) {
            $var_106[$var_108] = array_map(function ($var_110) {
                return array_merge($var_110->var_23, $var_110->var_111);
            }, $var_109);
        }

        $var_112 = $var_18->getOrderedAnswers();
        foreach ($var_112 as $var_108 => $var_114) {
            $var_112[$var_108] = array_map(function ($var_115) {
                return array_merge($var_115->var_23, $var_115->var_116);
            }, $var_114);
        }
        $var_117 = [];
        $var_118 = [];
        foreach ($var_18->var_111 as $var_119 => $var_120) {
            $var_118[$var_119] = $var_120->var_23;

            templatereplace(
                $var_120->var_121,
                array(),
                $var_117,
                'Unspecified',
                false,
                $var_18->var_7
            );

            $var_118[$var_119]['question_expression'] = viewHelper::stripTagsEM(
                LimeExpressionManager::GetLastPrettyPrintExpression()
            );

            templatereplace($var_120->var_122, array(), $var_117, 'Unspecified', false, $var_18->var_7);
            $var_118[$var_119]['help_expression'] = viewHelper::stripTagsEM(
                LimeExpressionManager::GetLastPrettyPrintExpression()
            );
        }
        LimeExpressionManager::FinishProcessingPage();
        return [
            'question' => $var_102,
            'questiongroup' => $var_104,
            'i10n' => $var_118,
            'subquestions' => $var_106,
            'answerOptions' => $var_112,
        ];
    }

    
    private function fn_16($var_71 = null, $var_79 = null, $var_72 = 'core')
    {
        
        $var_18 = $var_2->fn_3($var_71, $var_79);

        return $var_18->getDataSetObject()->getPreformattedBlockOfAdvancedSettings(
            $var_18,
            $var_72
        );
    }

    
    private function fn_21($var_18)
    {
        $var_17 = $var_18->var_75;
        $var_124 = $var_125 = Yii::app()->var_126->createCommand()
            ->select('title')
            ->from('{{questions}}')
            ->where('sid=:sid and parent_qid=0')
            ->queryColumn([':sid'=>$var_17->var_40]);
        $var_132 = $var_17->var_132;
        $var_133 = safecount($var_124);
        $var_134 = safecount($var_17->var_135);

        return [
            "aQuestionTitles" => $var_124,
            "isActive" => $var_132,
            "questionCount" => $var_133,
            "groupCount" => $var_134,
        ];
    }

    
    private function fn_6($var_136 = null, $var_137 = false)
    {
        $var_37 = $var_136['sid'];
        $var_17 = Survey::model()->findByPk($var_37);
        $var_138 = App()->var_15->getParam('gid');
        $var_30 = SettingsUser::getUserSettingValue(
            'preselectquestiontype',
            null,
            null,
            null,
            App()->getConfig('preselectquestiontype')
        );

        if (isset($var_136['same_default'])) {
            if ($var_136['same_default'] == 1) {
                $var_136['same_default'] =0;
            } else {
                $var_136['same_default'] =1;
            }
        }

        $var_136 = array_merge([
            'sid' => $var_37,
            'gid' => App()->var_15->getParam('gid'),
            'type' => $var_30,
            'other' => 'N',
            'mandatory' => 'N',
            'relevance' => 1,
            'group_name' => '',
            'modulename' => '',
        ], $var_136);
        unset($var_136['qid']);

        if ($var_137) {
            foreach ($var_17->var_32 as $var_139) {
                unset($var_136[$var_139]);
            }
        } else {
            $var_136['question_order'] = getMaxQuestionOrder($var_138);
        }

        $var_18 = new class_2();
        $var_18->setAttributes($var_136, false);
        if ($var_18 == null) {
            throw new class_3(
                500,
                gT("Question creation failed - input was malformed or invalid"),
                0,
                null,
                true
            );
        }

        $var_141 = $var_18->save();
        if ($var_141 == false) {
            throw new class_3(
                500,
                "Object creation failed, couldn't save.\n ERRORS:\n"
                . print_r($var_18->getErrors(), true),
                0,
                null,
                true
            );
        }

        $var_144 = [];
        foreach ($var_17->var_32 as $var_139) {
            $var_144[$var_139] = new class_4();
            $var_144[$var_139]->setAttributes([
                'qid' => $var_18->var_7,
                'language' => $var_139,
                'question' => '',
                'help' => '',
            ], false);
            $var_144[$var_139]->save();
        }

        return $var_18;
    }

    
    private function fn_7(&$var_18, $var_136)
    {
        

        if (isset($var_136['same_default'])) {
            if ($var_136['same_default'] == 1) {
                $var_136['same_default'] =0;
            } else {
                $var_136['same_default'] =1;
            }
        }

        $var_18->setAttributes($var_136, false);
        if ($var_18 == null) {
            throw new class_3(
                500,
                gT("Question update failed, input array malformed or invalid"),
                0,
                null,
                true
            );
        }

        $var_141 = $var_18->save();
        if ($var_141 == false) {
            throw new class_3(
                500,
                "Update failed, could not save. ERRORS:<br/>"
                .implode(", ", $var_18->getErrors()['title']),
                0,
                null,
                true
            );
        }
        return $var_18;
    }

    
    private function fn_8(&$var_18, $var_145)
    {

        foreach ($var_145 as $var_139 => $var_146) {
            $var_144 = class_4::model()->findByAttributes(['qid' => $var_18->var_7, 'language' => $var_139]);
            $var_144->setAttributes([
                'question' => $var_146['question'],
                'help' => $var_146['help'],
                'script' => $var_146['script'],
            ], false);
            if (!$var_144->save()) {
                throw new class_1(500, gT("Could not store translation"));
            }
        }

        return true;
    }

    
    private function fn_9(&$var_18, $var_145)
    {
        $var_148 = $var_18->var_23;

        foreach ($var_145 as $var_149 => $var_150) {
            if ($var_149 === 'debug' || !isset($var_150['formElementValue'])) {
                continue;
            }
            if (array_key_exists($var_149, $var_148)) {
                $var_18->$var_149 = $var_150['formElementValue'];
            } elseif (!QuestionAttribute::model()->setQuestionAttribute(
                $var_18->var_7,
                $var_149,
                $var_150['formElementValue']
            )) {
                throw new class_1(500, gT("Could not store general options"));
            }
        }

        if (!$var_18->save()) {
            throw new class_1(500, gT("Could not store general options"));
        }

        return true;
    }

    
    private function fn_10(&$var_18, $var_145)
    {
        $var_148 = $var_18->var_23;

        foreach ($var_145 as $var_152 => $var_153) {
            if ($var_152 === 'debug') {
                continue;
            }
            foreach ($var_153 as $var_149 => $var_150) {
                if (!isset($var_150['formElementValue'])) {
                    continue;
                }
                $var_154 = $var_150['formElementValue'];

                
                if ($var_154 === ""
                    && isset($var_150['aFormElementOptions']['default'])) {
                    $var_154 = $var_150['aFormElementOptions']['default'];
                }

                if (is_array($var_154)) {
                    foreach ($var_154 as $var_155 => $var_156) {
                        if ($var_155 == 'expression') {
                            continue;
                        }
                        if (!QuestionAttribute::model()->setQuestionAttributeWithLanguage(
                            $var_18->var_7,
                            $var_149,
                            $var_156,
                            $var_155
                        )) {
                            throw new class_1(500, gT("Could not store advanced options"));
                        }
                    }
                } elseif (array_key_exists($var_149, $var_148)) {
                        $var_18->$var_149 = $var_154;
                } elseif (!QuestionAttribute::model()->setQuestionAttribute(
                    $var_18->var_7,
                    $var_149,
                    $var_154
                )) {
                    throw new class_1(500, gT("Could not store advanced options"));
                }
            }
        }


        if (!$var_18->save()) {
            throw new class_1(500, gT("Could not store advanced options"));
        }

        return true;
    }

    
    private function fn_11($var_18, $var_158)
    {
        if (empty($var_158)) {
            return false;
        }

        $var_159 = class_5::model()->with('defaultvaluel10ns')->findAllByAttributes(['qid' => $var_158]);

        $var_49['defaultValues'] = array_reduce(
            $var_159,
            function ($var_162, $var_163) use ($var_18) {
                $var_164 = new class_5();
                $var_164->setAttributes($var_163->var_23, false);
                $var_164->var_165 = null;
                $var_164->var_7 = $var_18->var_7;

                if (!$var_164->save()) {
                    throw new class_1(
                        500,
                        "Could not save default values. ERRORS:"
                        . print_r($var_18->getErrors(), true)
                    );
                }

                foreach ($var_163->var_166 as $var_167) {
                    $var_168 = new class_6();
                    $var_168->setAttributes($var_167->var_23, false);
                    $var_168->var_35 = null;
                    $var_168->var_165 = $var_164->var_165;
                    if (!$var_168->save()) {
                        throw new class_1(
                            500,
                            "Could not save default value I10Ns. ERRORS:"
                            . print_r($var_18->getErrors(), true)
                        );
                    }
                }

                return true;
            },
            true
        );
        return true;
    }

    
    private function fn_12(&$var_18, $var_145, $var_169 = false)
    {
        $var_2->fn_26($var_18, $var_145);
        foreach ($var_145 as $var_109) {
            foreach ($var_109 as $var_171) {
                $var_110 = class_2::model()->find('sid = :sid AND qid = :qid', [':sid' => $var_18->var_40, ':qid' => $var_171['qid']]);
                if ($var_110 != null && !$var_169) {
                    $var_110 = $var_2->fn_7($var_110, $var_171);
                } elseif (!$var_18->var_75->var_132) {
                    $var_171['parent_qid'] = $var_18->var_7;
                    $var_110 = $var_2->fn_6($var_171, true);
                }
                $var_2->fn_27($var_110, $var_171);
            }
        }

        return true;
    }

    
    private function fn_26(&$var_18, &$var_145)
    {
        $var_109 = $var_18->var_173;
        array_walk(
            $var_109,
            function ($var_174) use (&$var_145, $var_18) {
                $var_175 = false;
                foreach ($var_145 as $var_108 => $var_109) {
                    foreach ($var_109 as $var_176 => $var_171) {
                        if ($var_174->var_7 == $var_171['qid']
                            || (($var_174->var_177 == $var_171['title'])
                                && ($var_174->var_178 == $var_108))
                        ) {
                            $var_175 = true;
                            $var_145[$var_108][$var_176]['qid'] = $var_174->var_7;
                        }

                        if (!$var_175 && !$var_18->var_75->var_132) {
                            $var_174->delete();
                        }
                    }
                }
            }
        );
    }

    
    private function fn_27($var_18, $var_145)
    {

        foreach ($var_18->var_75->var_32 as $var_139) {
            $var_146 = $var_145[$var_139];
            $var_144 = class_4::model()->findByAttributes(['qid' => $var_18->var_7, 'language' => $var_139]);
            $var_144->setAttributes([
                'question' => $var_146['question'],
                'help' => $var_146['help'],
            ], false);
            if (!$var_144->save()) {
                throw new class_1(500, gT("Could not store translation for subquestion"));
            }
        }

        return true;
    }

    
    private function fn_13(&$var_18, $var_145, $var_169 = false)
    {
        $var_2->fn_28($var_18, $var_145);
        foreach ($var_145 as $var_114) {
            foreach ($var_114 as $var_181 => $var_182) {
                $var_182['sortorder'] = (int) $var_182['sortorder'];
                $var_183 = class_7::model()->findByPk($var_182['aid']);
                if ($var_183 == null || $var_169) {
                    $var_183 = new class_7();
                    $var_183->var_7 = $var_18->var_7;
                    unset($var_182['aid']);
                    unset($var_182['qid']);
                }

                $var_184 = (!isset($var_182['code']));
                if ($var_184) {
                    throw new class_1(
                        500,
                        "Answer option code cannot be empty"
                    );
                }
                $var_183->setAttributes($var_182);
                $var_185 = $var_183->save();
                if (!$var_185) {
                    throw new class_1(
                        500,
                        "Answer option couldn't be saved. Error: "
                        . print_r($var_183->getErrors(), true)
                    );
                }
                $var_2->fn_29($var_183, $var_18, $var_182);
            }
        }
        return true;
    }

    
    private function fn_28(&$var_18, &$var_145)
    {
        $var_187 = $var_18->var_188;
        array_walk(
            $var_187,
            function ($var_189) use (&$var_145) {
                $var_175 = false;
                foreach ($var_145 as $var_108 => $var_187) {
                    foreach ($var_187 as $var_176 => $var_190) {
                        if (((is_numeric($var_190['aid'])
                                    && $var_189->var_191 == $var_190['aid'])
                                || $var_189->var_192 == $var_190['code'])
                            && ($var_189->var_178 == $var_108)
                        ) {
                            $var_175 = true;
                            $var_145[$var_108][$var_176]['aid'] = $var_189->var_191;
                        }

                        if (!$var_175) {
                            $var_189->delete();
                        }
                    }
                }
            }
        );
    }

    
    private function fn_29($var_183, $var_18, $var_145)
    {
        foreach ($var_18->var_75->var_32 as $var_139) {
            $var_144 = class_8::model()->findByAttributes(['aid' => $var_183->var_191, 'language' => $var_139]);
            if ($var_144 == null) {
                $var_144 = new class_8();
                $var_144->setAttributes([
                    'aid' => $var_183->var_191,
                    'language' => $var_139,
                ], false);
            }
            $var_144->setAttributes([
                'answer' => $var_145[$var_139]['answer'],
            ], false);

            if (!$var_144->save()) {
                throw new class_1(500, gT("Could not store translation for answer option"));
            }
        }

        return true;
    }

}
