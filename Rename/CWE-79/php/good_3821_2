<?php


class class_0 extends var_0
{

    function fn_0()
    {
        
        $GLOBALS['RCMAIL'] = $var_1 = rcmail::get_instance();
        $GLOBALS['OUTPUT'] = $var_2 = $var_1->load_gui();
        $var_1->var_4 = 'autocomplete';
        $var_1->storage_init(false);


        $GLOBALS['EMAIL_ADDRESS_PATTERN'] = $var_6;
    }

    
    function fn_1($var_8)
    {
        $var_9 = new class_1;
        $var_9->var_10 = 'text';
        $var_9->var_11 = 'html';
        $var_9->var_8 = file_get_contents(var_12 . $var_8);
        $var_9->var_13 = array();
        return $var_9;
    }


    
    function fn_2()
    {
        $var_9 = $var_14->fn_1('src/htmlbody.txt');
        $var_9->var_13 = array('ex1.jpg' => 'part_1.2.jpg', 'ex2.jpg' => 'part_1.2.jpg');

        
        $var_15 = rcmail_html4inline(rcmail_print_body($var_9, array('safe' => false)), 'foo');

        $var_14->assertRegExp('/src="'.$var_9->var_13['ex1.jpg'].'"/', $var_15, "Replace reference to inline image");
        $var_14->assertRegExp('
        $this->assertNotRegExp('/var_17.var_18/', $html, "No references to external images");
        $this->assertNotRegExp('/<var_19 [^>]+>/', $html, "No meta tags allowed");
        
        $this->assertNotRegExp('/<var_20 [^>]+>/', $html, "No form tags allowed");
        $this->assertRegExp('/var_21 var_20/', $html, "Include <form> contents");
        $this->assertRegExp('/<!-- var_22 var_23 -->/', $var_15, "No external links allowed");
        $var_14->assertRegExp('/<a[^>]+ target="_blank">/', $var_15, "Set target to _blank");
        $var_14->assertTrue($GLOBALS['REMOTE_OBJECTS'], "Remote object detected");

        
        $var_25 = rcmail_html4inline(rcmail_print_body($var_9, array('safe' => true)), 'foo');

        $var_14->assertRegExp('/<style [^>]+>/', $var_25, "Allow styles in safe mode");
        $var_14->var_16('
        $this->assertRegExp("
        $css = '<var_22 var_26="stylesheet" .+var_27=var_28-[var_29-var_30-9]+\.var_31.+var_32=var_33';
        $var_14->assertRegExp('
    }

    
    function test_html_xss()
    {
        $part = $this->get_html_part('var_34/var_35.var_36');
        $var_37 = rcmail_print_body($var_9, array('safe' => true));

        $var_14->assertNotRegExp('/src="skins/', $var_37, "Remove local references");
        $var_14->assertNotRegExp('/\son[a-z]+/', $var_37, "Remove on* attributes");

        $var_15 = rcmail_html4inline($var_37, 'foo');
        $var_14->assertNotRegExp('/onclick="return rcmail.command(\'compose\',\'xss@somehost.net\',this)"/', $var_15, "Clean mailto links");
        $var_14->assertNotRegExp('/alert/', $var_15, "Remove alerts");
    }

    
    function fn_3()
    {
        $var_9 = $var_14->fn_1('src/BID-26800.txt');
        $var_37 = rcmail_html4inline(rcmail_print_body($var_9, array('safe' => true)), 'dabody', '', $var_39, true);

        $var_14->assertNotRegExp('/alert|expression|javascript|xss/', $var_37, "Remove evil style blocks");
        $var_14->assertNotRegExp('/font-style:italic/', $var_37, "Allow valid styles");
    }

    
    function fn_4()
    {
        
        $var_15 = '<p><a href="data:text/html,&lt;script&gt;alert(document.cookie)&lt;/script&gt;">Firefox</a>'
            .'<a href="vbscript:alert(document.cookie)">Internet Explorer</a></p>';
        $var_37 = rcmail_wash_html($var_15, array('safe' => true), array());

        $var_14->assertNotRegExp('/data:text/', $var_37, "Remove data:text/html links");
        $var_14->assertNotRegExp('/vbscript:/', $var_37, "Remove vbscript: links");
    }

    
    function fn_5()
    {
        $var_9 = $var_14->fn_1('src/invalidchars.html');
        $var_37 = rcmail_print_body($var_9);

        $var_14->assertRegExp('/<p>символ<\/p>/', $var_37, "Remove non-unicode characters from HTML message body");
    }

    
    function fn_6()
    {
        $var_9 = new class_1;
        $var_9->var_10 = 'text';
        $var_9->var_11 = 'plain';
        $var_9->var_8 = quoted_printable_decode(file_get_contents(var_12 . 'src/plainbody.txt'));
        $var_15 = rcmail_print_body($var_9, array('safe' => true));

        $var_14->assertRegExp('/<a href="mailto:nobody@roundcube.net" onclick="return rcmail.command\(\'compose\',\'nobody@roundcube.net\',this\)">nobody@roundcube.net<\/a>/', $var_15, "Mailto links with onclick");
        $var_14->var_16('
        $this->assertRegExp('
    }

    
    function fn_7()
    {
        $var_9 = $var_14->fn_1('src/mailto.txt');

        
        $var_15 = rcmail_html4inline(rcmail_print_body($var_9, array('safe' => false)), 'foo');

        $var_40 = '<a href="mailto:me@me.com?subject=this is the subject&amp;body=this is the body"'
            .' onclick="return rcmail.command(\'compose\',\'me@me.com?subject=this is the subject&amp;body=this is the body\',this)">e-mail</a>';

        $var_14->assertRegExp('|'.preg_quote($var_40, '|').'|', $var_15, "Extended mailto links");
    }

    
    function fn_8()
    {
        $var_9 = $var_14->fn_1('src/htmlcom.txt');
        $var_37 = rcmail_print_body($var_9, array('safe' => true));

        
        $var_14->assertRegExp('|<p>test1</p>|', $var_37, "Buggy HTML comments");
        
        $var_14->assertNotRegExp('|<p>test2</p>|', $var_37, "Conditional HTML comments");
    }

    
    function fn_9()
    {
        $var_15 = file_get_contents(var_12 . 'src/htmlbase.txt');
        $var_15 = rcmail_resolve_base($var_15);

        $var_14->var_16('|src="http:
        $this->assertRegExp('|var_34="http:
        $var_14->var_16('|src="var_41:

        
        $var_14->var_16('|src="var_42:var_43"|', $html, "URI base resolving exception [1]");
        $this->assertRegExp('|var_34="var_41:
    }
}
